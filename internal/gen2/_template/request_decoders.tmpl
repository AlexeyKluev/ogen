{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}
{{ define "request_decoders" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{/* Range over all methods */}}
{{- range $op := $.Operations }}
{{- if $op.Request }}
func decode{{ $op.Name }}Request(r *http.Request) (req {{ $op.Request.Type.GoType }}, err error) {
    buf := json.GetBuffer()
    defer json.PutBuffer(buf)
    if _, err := io.Copy(buf, r.Body); err != nil {
        return req, err
    }

    switch r.Header.Get("Content-Type") {
    {{- /* Range over all request types */ -}}
    {{- range $contentType, $type := $op.Request.Contents }}
    case "{{ $contentType }}":
        var request {{ $type.GoType }}
        {{- /* Decode json */ -}}
        {{- if eq $contentType "application/json" }}
        i := json.GetIterator()
        defer json.PutIterator(i)
        i.ResetBytes(buf.Bytes())
        if err := func() error {
            {{- template "dec_json_value" req_decode_elem $type }}
        }(); err != nil {
            return req, err
        }
        {{- if $type.NeedValidation }}
        if err := request.Validate(); err != nil {
            return req, fmt.Errorf("validate: %w", err)
        }
        {{- end }}

        return {{ if or (not $op.Request.Required) ($op.IsRequestIface) }}&{{ end }}request, nil
        {{- /* Decode json */ -}}
        {{- else }}
        _ = request
        return req, fmt.Errorf("{{ $contentType }} decoder not implemented")
        {{- end }}
    {{- end }}
    {{- /* Range over all request types */}}
    default:
        return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
    }
}
{{- end }}
{{ end }}
{{/* Range over all methods */}}

{{ end }}
