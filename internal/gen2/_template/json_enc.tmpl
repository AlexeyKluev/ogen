{{- define "enc_json_array" }}
    {{- /*gotype: github.com/ogen-go/ogen/internal/gen2.Elem*/ -}}
    more.Down()
    j.WriteArrayStart()
    for _, elem := range {{ $.Var }} {
    {{ template "enc_json_value" array_elem $t.Item }}
    }
    j.WriteArrayEnd()
    more.Up()
{{- end }}

{{- define "enc_json_start" -}}
    {{- /*gotype: github.com/ogen-go/ogen/internal/gen2.Elem*/ -}}
    more.More()
    {{- if $.Field }}
      j.WriteObjectField("{{ $.Field }}")
    {{- end -}}
{{- end -}}

{{- define "enc_json_value" -}}
    {{- /*gotype: github.com/ogen-go/ogen/internal/gen2.Elem*/ -}}
    {{ $t := $.Type }}
    {{ $j := $t.JSON }}
    {{- if or ($t.IsStruct) ($t.IsEnum) ($t.IsPointer) -}}
        {{- if or (eq $t.NilSemantic "invalid") (eq $t.NilSemantic "optional") -}}
          if {{ $.Var }} != nil {
          {{- template "enc_json_start" $ }}
          {{ $.Var }}.WriteJSON(j)
          }
        {{- else if eq $t.NilSemantic "null" -}}
            {{- template "enc_json_start" $ }}
            if {{ $.Var }} == nil {
                j.WriteNil()
            } else {
                {{ $.Var }}.WriteJSON(j)
            }
        {{- else -}}
            {{- template "enc_json_start" $ }}
            {{ $.Var }}.WriteJSON(j)
        {{- end -}}
    {{- else if $t.GenericOf -}}
        {{- $g := $t.GenericOf -}}
        {{- $v := $t.GenericVariant -}}
        {{- if $v.Optional -}}
          if {{ $.Var }}.Set {
            {{- template "enc_json_start" $ }}
            {{ $.Var }}.WriteJSON(j{{ if $g.Format }}, json.Write{{ $g.JSON.Format }}{{ end }})
          }
        {{- else -}}
          {{- template "enc_json_start" $ }}
          {{ $.Var }}.WriteJSON(j{{ if $g.Format }}, json.Write{{ $g.JSON.Format }}{{ end }})
        {{- end -}}
    {{- else if $j.Format -}}
        {{ template "enc_json_start" $ }}
        json.Write{{ $j.Format }}(j, {{ $.Var }})
    {{- else if $j.Write -}}
        {{ template "enc_json_start" $ }}
        j.{{ $j.Write }}({{ $.Var }})
    {{- else if $t.IsArray -}}
        {{- if eq $t.NilSemantic "invalid" -}}
            {{ template "enc_json_start" $ }}
            {{ template "enc_json_array" $ -}}
        {{- else if eq $t.NilSemantic "optional" -}}
          if {{ $.Var }} != nil {
            {{ template "enc_json_start" $ }}
            {{ template "enc_json_array" $ -}}
          }
        {{- else if eq $t.NilSemantic "null" -}}
          {{- template "enc_json_start" $ }}
          if {{ $.Var }} == nil {
            j.WriteNil()
          } else {
            {{- template "enc_json_array" $ -}}
          }
        {{- end -}}
    {{- else -}}
        {{- if $.Sub -}}
          _ = {{ $.Var }}
        {{- end -}}
        // Unsupported kind "{{ $t.Kind  }}".
    {{- end }}
{{- end -}}
