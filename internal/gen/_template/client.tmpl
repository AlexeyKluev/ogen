{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ define "client" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

type HTTPClient interface {
    Do(req *http.Request) (*http.Response, error)
}

type Client struct {
    serverURL *url.URL
    cfg       config
    requests  metric.Int64Counter
    errors    metric.Int64Counter
    duration  metric.Int64Histogram
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...Option) (*Client, error) {
    u, err := url.Parse(serverURL)
    if err != nil {
        return nil, err
    }
    c := &Client{
        cfg:       newConfig(opts...),
        serverURL: u,
    }
    if c.requests, err = c.cfg.Meter.NewInt64Counter(otelogen.ClientRequestCount); err != nil {
        return nil, err
    }
    if c.errors, err = c.cfg.Meter.NewInt64Counter(otelogen.ClientErrorsCount); err != nil {
        return nil, err
    }
    if c.duration, err = c.cfg.Meter.NewInt64Histogram(otelogen.ClientDuration); err != nil {
        return nil, err
    }
    return c, nil
}

{{ range $op := $.Operations }}
{{- if $op.Spec.OperationID }}
// {{ $op.Name }} implements {{ $op.Spec.OperationID }} operation.
{{- end }}
func (c *Client) {{ $op.Name }}(ctx context.Context {{ if $op.Request }}, request {{ $op.Request.Type.Go }}{{ end }}{{ if $op.Params }}, params {{ $op.Name }}Params {{ end }}) (res {{ $op.Response.Type.Go }}, err error) {
    {{- if $op.Request }}{{/* Request validation */}}
        {{- if eq $op.Request.Type.Kind "interface" }}
            switch request := request.(type) {
            {{- range $type:= $op.Request.Type.ListImplementations }}
            case *{{ $type.Go }}:
                {{- if $type.NeedValidation }}
                    if verr := func() error {
                        {{- template "validate" req_dec_elem $type }}
                    }(); verr != nil {
                        err = fmt.Errorf("validate: %w", verr)
                        return
                    }
                {{- else }}
                // Validation is not required for this type.
                {{- end }}
            {{- end }}
            default:
                err = fmt.Errorf("unexpected request type: %T", request)
                return
            }
        {{- else }}
            {{- if $op.Request.Type.NeedValidation }}
                if verr := func() error {
                    {{- template "validate" req_dec_elem $op.Request.Type }}
                }(); verr != nil {
                    err = fmt.Errorf("validate: %w", verr)
                    return
                }
            {{- end }}
        {{- end }}
    {{- end }}{{/* Request validation */}}
    startTime := time.Now()
    ctx, span := c.cfg.Tracer.Start(ctx, `{{ $op.Name }}`,
        {{- if $op.Spec.OperationID }}
        trace.WithAttributes(otelogen.OperationID(`{{ $op.Spec.OperationID }}`)),
        {{- end }}
        trace.WithSpanKind(trace.SpanKindClient),
    )
    defer func() {
        if err != nil {
            span.RecordError(err)
            c.errors.Add(ctx, 1)
        } else {
            elapsedDuration := time.Since(startTime)
            c.duration.Record(ctx, elapsedDuration.Microseconds())
        }
        span.End()
    }()
    c.requests.Add(ctx, 1)

    {{- if $op.Request }}
    buf, contentType, err := encode{{ $op.Name }}Request(request, span)
    if err != nil {
        return res, err
    }
    defer json.PutBuffer(buf)
    {{ end }}

    {{- template "params_encode_path" $op }}
    {{- template "params_encode_query" $op }}

    r := ht.NewRequest(ctx, "{{ $op.Spec.HTTPMethod }}", u, {{ if $op.Request }}buf{{ else }}nil{{ end }})
    defer ht.PutRequest(r)

    {{ if $op.Request }}r.Header.Set("Content-Type", contentType){{ end }}

    {{- template "encode_header_params" $op }}
    {{- template "encode_cookie_params" $op }}

    resp, err := c.cfg.Client.Do(r)
    if err != nil {
        return res, fmt.Errorf("do request: %w", err)
    }
    defer resp.Body.Close()

    result, err := decode{{ $op.Name }}Response(resp, span)
    if err != nil {
        return res, fmt.Errorf("decode response: %w", err)
    }

    return result, nil
}
{{ end }}
{{ end }}


{{ define "encode_cookie_params" }}
{{- range $param := $.CookieParams }}{{/* Range over params */}}
{
value := conv.{{ $param.Type.ToString }}(params.{{ $param.Name }})
{{- if eq $param.Type.Kind "array" }}
r.AddCookie(&http.Cookie{
    Name: "{{ $param.Spec.Name }}",
    Value: strings.Join(value, "/"),
    MaxAge: 1337,
})
{{- else }}
r.AddCookie(&http.Cookie{
    Name: "{{ $param.Spec.Name }}",
    Value: value,
    MaxAge: 1337,
})
{{- end }}
}
{{- end }}{{/* Range over params */}}
{{ end }}


{{ define "encode_header_params" }}
{{- range $param := $.HeaderParams }}{{/* Range over params */}}
{
value := conv.{{ $param.Type.ToString }}(params.{{ $param.Name }})
{{- if eq $param.Type.Kind "array" }}
for _, v := range value {
    r.Header.Add("{{ $param.Spec.Name }}", v)
}
{{- else }}
r.Header.Set("{{ $param.Spec.Name }}", value)
{{- end }}
}
{{- end }}{{/* Range over params */}}
{{ end }}

