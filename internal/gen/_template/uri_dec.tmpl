{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}
{{- define "uri_dec" }}
{{- template "header" $ }}

{{- range $t, $_ := $.URITypes }}
{{- if $t.IsStruct }}
func (v *{{ $t.Go }}) decodeURI(d uri.Decoder) error {
	if v == nil {
		return errors.New(`unable to decode {{ $t.Go }} to nil`)
	}
	return d.DecodeFields(func(name string, d uri.Decoder) error {
		switch name {
		{{- range $f := $t.Fields }}
		{{- if $f.Spec }}
		case "{{ $f.Spec.Name }}":
			{{- template "dec_uri" elem $f.Type (printf "v.%s" $f.Name) }}
		{{- end }}
		{{- end }}
		default:
			return errors.Errorf(`unexpected field %q`, name)
		}
	})
}

{{- end }}
{{- end }}

{{- end }}

{{- define "dec_uri" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.Elem*/ -}}
{{- $t := $.Type }}
{{- $var := $.Var }}
{{- $tmpVar := camelSpecial (printf "%sVal" $var) }}
{{- if $t.IsPrimitive }}
	s, err := d.DecodeValue()
	if err != nil {
		return err
	}

	c, err := conv.{{ $t.FromString }}(s)
	if err != nil {
		return err
	}

	{{ $var }} = c
	return nil
{{- else if $t.IsEnum }}
	s, err := d.DecodeValue()
	if err != nil {
		return err
	}

	c, err := conv.{{ $t.FromString }}(s)
	if err != nil {
		return err
	}

	{{ $var }} = {{ $t.Go }}(c)
	return nil
{{- else if $t.IsArray }}
	return d.DecodeArray(func(d uri.Decoder) error {
		var {{ $tmpVar }} {{ $t.Item.Go }}
		if err := func() error {
			{{- template "dec_uri" elem $t.Item $tmpVar }}
		}(); err != nil {
			return err
		}
		{{ $var }} = append({{ $var }}, {{ $tmpVar }})
		return nil
	})
{{- else if $t.IsAlias }}
	var {{ $tmpVar }} {{ $t.AliasTo.Go }}
	if err := func() error {
		{{- template "dec_uri" elem $t.AliasTo $tmpVar }}
	}(); err != nil {
		return err
	}
	{{ $var }} = {{ $t.Go }}({{ $tmpVar }})
	return nil
{{- else if $t.IsGeneric }}
	var {{ $tmpVar }} {{ $t.GenericOf.Go }}
	if err := func() error {
		{{- template "dec_uri" elem $t.GenericOf $tmpVar }}
	}(); err != nil {
		return err
	}
	{{ $var }}.SetTo({{ $tmpVar }})
	return nil
{{- else if $t.IsPointer }}
	var {{ $tmpVar }} {{ $t.PointerTo.Go }}
	if err := func() error {
		{{- template "dec_uri" elem $t.PointerTo $tmpVar }}
	}(); err != nil {
		return err
	}
	{{ $var }} = &{{ $tmpVar }}
	return nil
{{- else if $t.IsStruct }}
	return {{ $var }}.decodeURI(d)
{{- else if $t.IsSum }}
	{{ errorf "not supported" }}
{{- else }}
    {{ errorf "unexpected kind" $t.Kind }}
{{- end }}
{{- end }}
