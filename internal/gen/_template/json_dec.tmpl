{{- /*gotype: github.com/ogen-go/ogen/internal/gen.Elem*/ -}}

{{- define "dec_json_pointer" }}
{{ $.Var }} = nil
var {{ $.NextVar }} {{ $.Type.PointerTo.Go }}
if err := func() error {
  {{- template "dec_json" pointer_elem $ }}
}(); err != nil {
  return err
}
{{ $.Var }} = &{{ $.NextVar }}
{{- end -}}

{{- define "dec_json_array" }}
{{- $t := $.Type -}}
{{ $.Var }} = nil
var retErr error
i.ReadArrayCB(func(i *json.Iterator) bool {
  var {{ $.NextVar }} {{ $t.Item.Go }}
  if err := func() error {
    {{- template "dec_json" sub_array_elem $ $t.Item }}
  }(); err != nil {
    retErr = err
    return false
  }
  {{ $.Var }} = append({{ $.Var }}, {{ $.NextVar }})
  return true
})
if retErr != nil {
  return retErr
}
{{- end -}}

{{- define "dec_json_generic" }}
{{- $t := $.Type -}}
{{- $g := $t.GenericOf }}
{{- if $t.GenericVariant.Optional }}
    {{ $.Var }}.Reset()
{{- end }}
{{- if $g.Format }}
  if err := {{ $.Var }}.ReadJSON(i, json.Read{{ $g.JSON.Format }}); err != nil {
    return err
  }
{{- else }}
  if err := {{ $.Var }}.ReadJSON(i); err != nil {
    return err
  }
{{- end }}
{{- end -}}


{{- define "dec_json" -}}
    {{- $t := $.Type -}}
    {{- $j := $t.JSON -}}
    {{- if $t.IsPointer -}}
      {{- template "dec_json_pointer" $ }}
    {{- else if $t.IsArray }}
      {{- template "dec_json_array" $ }}
    {{- else if $t.GenericOf }}
      {{- template "dec_json_generic" $ }}
    {{- else if or ($t.IsStruct) ($t.IsEnum) ($t.IsSum) }}
      if err := {{ $.Var }}.ReadJSON(i); err != nil {
        return err
      }
    {{- else if $j.Read -}}
      {{ $.Var }} = {{ $t.Go }}(i.{{ $j.Read }}())
    {{- else if $j.Format }}
      v, err := json.Read{{ $j.Format }}(i)
      {{ $.Var }} = v
      if err != nil {
         return err
      }
    {{- else  -}}
      if err := fmt.Errorf(`decoding of "{{ $t.Go }}" ({{ $t.Kind }}) is not implemented`); err != nil {
        return err
      }
    {{- end }}
    return i.Error
{{- end -}}
