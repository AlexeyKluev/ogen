{{- define "dec_json_array" }}
    {{- /*gotype: github.com/ogen-go/ogen/internal/gen.Elem*/ -}}
    more.Down()
    j.WriteArrayStart()
    for _, elem := range {{ $.Var }} {
    {{ template "dec_json_value" array_elem $.Type.Item }}
    }
    j.WriteArrayEnd()
    more.Up()
{{- end }}

{{- define "dec_json_start" -}}
    {{- /*gotype: github.com/ogen-go/ogen/internal/gen.Elem*/ -}}
    more.More()
    {{- if $.Field }}
      j.WriteObjectField("{{ $.Field }}")
    {{- end -}}
{{- end -}}

{{- define "dec_json_value" -}}
    {{- /*gotype: github.com/ogen-go/ogen/internal/gen.Elem*/ -}}
    {{- if or ($.Type.IsStruct) ($.Type.IsEnum) ($.Type.IsPointer) -}}
        {{- if or (eq $.Type.NilSemantic "invalid") (eq $.Type.NilSemantic "optional") -}}
          if {{ $.Var }} != nil {
          {{- template "dec_json_start" $ }}
          {{ $.Var }}.WriteJSON(j)
          }
        {{- else if eq $.Type.NilSemantic "null" -}}
            {{- template "dec_json_start" $ }}
            if {{ $.Var }} == nil {
            j.WriteNil()
            } else {
            {{ $.Var }}.WriteJSON(j)
            }
        {{- else -}}
            {{- template "dec_json_start" $ }}
            {{ $.Var }}.WriteJSON(j)
        {{- end -}}
    {{- else if $.Type.GenericOf -}}
        {{- $g := $.Type.GenericOf -}}
        {{- $v := $.Type.GenericVariant -}}
        {{- if $v.Optional -}}
          if {{ $.Var }}.Set {
          {{- template "dec_json_start" $ }}
          {{ $.Var }}.WriteJSON(j{{ if $g.FormatCustom }}, json.Write{{ $g.JSONHelper }}{{ end }})
          }
        {{- else -}}
            {{- template "dec_json_start" $ }}
            {{ $.Var }}.WriteJSON(j{{ if $g.FormatCustom }}, json.Write{{ $g.JSONHelper }}{{ end }})
        {{- end -}}
    {{- else if $.Type.JSONHelper -}}
        {{ template "dec_json_start" $ }}
        json.Write{{ $.Type.JSONHelper }}(j, {{ $.Var }})
    {{- else if $.Type.JSONWrite -}}
        {{ template "dec_json_start" $ }}
        j.{{ $.Type.JSONWrite }}({{ $.Var }})
    {{- else if $.Type.IsArray -}}
        {{- if eq $.Type.NilSemantic "invalid" -}}
            {{ template "dec_json_start" $ }}
            {{ template "dec_json_array" $ -}}
        {{- else if eq $.Type.NilSemantic "optional" -}}
          if {{ $.Var }} != nil {
          {{ template "dec_json_start" $ }}
          {{ template "dec_json_array" $ -}}
          }
        {{- else if eq $.Type.NilSemantic "null" -}}
            {{- template "dec_json_start" $ }}
            if {{ $.Var }} == nil {
            j.WriteNil()
            } else {
            {{- template "dec_json_array" $ -}}
            }
        {{- end -}}
    {{- else -}}
        {{- if $.ArrElem -}}
          _ = elem
        {{- end -}}
        // Unsupported kind "{{ $.Type.Kind  }}" for field "{{ $.Field }}".
    {{- end }}
{{- end -}}
