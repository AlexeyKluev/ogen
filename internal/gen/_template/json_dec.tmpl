{{- /*gotype: github.com/ogen-go/ogen/internal/gen.Elem*/ -}}

{{- define "dec_json_pointer" }}
{{ $.Var }} = nil
var {{ $.NextVar }} {{ $.Type.PointerTo.Go }}
{{- template "dec_json" pointer_elem $ }}
{{ $.Var }} = &{{ $.NextVar }}
{{- end -}}

{{- define "dec_json_array" }}
{{- $t := $.Type -}}
{{ $.Var }} = nil
if err := d.Arr(func(d *jx.Decoder) error {
	var {{ $.NextVar }} {{ $t.Item.Go }}
	{{- template "dec_json" sub_array_elem $ $t.Item }}
	{{ $.Var }} = append({{ $.Var }}, {{ $.NextVar }})
	return nil
}); err != nil {
	return err
}
{{- end -}}

{{- define "dec_json_generic" }}
{{- $t := $.Type -}}
{{- $g := $t.GenericOf }}
{{- if $t.GenericVariant.Optional }}
	{{ $.Var }}.Reset()
{{- end }}
{{- if $g.Format }}
	if err := {{ $.Var }}.Decode(d, json.Decode{{ $g.JSON.Format }}); err != nil {
		return err
	}
{{- else }}
	if err := {{ $.Var }}.Decode(d); err != nil {
		return err
	}
{{- end }}
{{- end -}}


{{- define "dec_json" -}}
	{{- $t := $.Type -}}
	{{- $j := $t.JSON -}}
	{{- if $t.IsPointer }}
		{{- template "dec_json_pointer" $ }}
	{{- else if $t.IsArray }}
		{{ template "dec_json_array" $ }}
	{{- else if $t.GenericOf }}
		{{- template "dec_json_generic" $ }}
	{{- else if or ($t.IsStruct) ($t.IsEnum) ($t.IsSum) }}
		if err := {{ $.Var }}.Decode(d); err != nil {
			return err
		}
	{{- else if $j.Fn }}
		v, err := d.{{ $j.Fn }}()
		{{ $.Var }} = {{ $t.Go }}(v)
		if err != nil {
			return err
		}
	{{- else if $j.Format }}
		v, err := json.Decode{{ $j.Format }}(d)
		{{ $.Var }} = v
		if err != nil {
			 return err
		}
	{{- else  }}
		return errors.New(`decoding of "{{ $t.Go }}" ({{ $t.Kind }}) is not implemented`)
	{{- end }}
{{- end -}}
