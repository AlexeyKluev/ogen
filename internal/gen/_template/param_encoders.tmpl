{{ define "params_encode_path_v2" }}
path := c.serverURL
{{- range $part := $.PathParts }}{{/* Range over path parts */}}
{{- if $part.Raw }}
path += "/{{ $part.Raw }}"
{{- else }}
{
    // Encode '{{ $part.Param.SourceName }}' parameter.
    e := uri.NewPathEncoder(uri.PathEncoderConfig{
        Param: "{{ $part.Param.SourceName }}",
        Style: uri.PathStyle{{ pascalMP $part.Param.Style }},
        Explode: {{ if $part.Param.Explode }}true{{ else }}false{{ end }},
    })
    v := params.{{ $part.Param.Name }}
    {{ template "encode_param" $part.Param.Schema }}
    path += "/" + param
}
{{- end }}
{{- end }}
{{- end }}

{{ define "params_encode_query_v2" }}
{{ $pcount := len $.QueryParams }}
{{ if ne $pcount 0 }}{{/* Check params existence */}}
q := r.URL.Query()
{{- range $param := $.QueryParams }}{{/* Range over params */}}
{
    // Encode '{{ $param.SourceName }}' parameter.
    e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
        Style:uri.QueryStyle{{ pascalMP $param.Style }},
        Explode: {{ if $param.Explode }}true{{ else }}false{{ end }},
    })
    v := params.{{ $param.Name }}
    {{ template "encode_param" $param.Schema }}
    {{- if eq $param.Schema.Kind "array" }}
    q["{{ $param.SourceName }}"] = param
    {{- else }}
    q.Set("{{ $param.SourceName }}", param)
    {{- end }}
}
{{- end }}{{/* Range over params */}}
r.URL.RawQuery = q.Encode()
{{- end }}{{/* Check params existence */}}
{{- end }}

{{ define "encode_param" }}
{{- if or (eq $.Kind "primitive") (eq $.Kind "enum") }}
	{{- if eq $.Primitive "string" }}param := e.EncodeString(v)
	{{- else if eq $.Primitive "int64" }}param := e.EncodeInt64(v)
	{{- else if eq $.Primitive "int32" }}param := e.EncodeInt32(v)
	{{- else if eq $.Primitive "int" }}param := e.EncodeInt(v)
	{{- else if eq $.Primitive "float64" }}param := e.EncodeFloat64(v)
	{{- else if eq $.Primitive "float32" }}param := e.EncodeFloat32(v)
	{{- else if eq $.Primitive "bool" }}param := e.EncodeBool(v)
	{{- else if eq $.Primitive "time.Time" }}param := e.EncodeString(v.Format(time.RFC3339))
	{{- else }} unsupported primitive {{ $.Primitive }}
	{{- end }}
{{- else if eq $.Kind "array" }}
	{{- if eq $.Item.Kind "primitive" }}
		{{- $primitive := $.Item.Primitive }}
		{{- if eq $primitive "string" }}param := e.EncodeStringArray(v)
		{{- else if eq $primitive "int64" }}param := e.EncodeInt64Array(v)
		{{- else if eq $primitive "int32" }}param := e.EncodeInt32Array(v)
		{{- else if eq $primitive "int" }}param := e.EncodeIntArray(v)
		{{- else if eq $primitive "float64" }}param := e.EncodeFloat64Array(v)
		{{- else if eq $primitive "float32" }}param := e.EncodeFloat32Array(v)
		{{- else if eq $primitive "bool" }}param := e.EncodeBoolArray(v)
		{{- else if eq $primitive "time.Time" }}
		strs := make([]string, 0, len(v))
        for _, t := range v {
            strs = append(strs, t.Format(time.RFC3339))
        }
        param := e.EncodeStringArray(strs)
		{{- else }}unsupported array item primitive {{ $.Item.Primitive }}
		{{- end }}
	{{- else }}
	unsupported array item kind {{ $.Item.Kind }}
	{{- end }}
{{- else }}
unsupported kind {{ $.Kind }}
{{- end }}
{{- end }}
