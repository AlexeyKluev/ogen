{{ define "params_encode_path" }}
path := c.serverURL
{{- range $part := $.PathParts }}{{/* Range over path parts */}}
{{- if $part.Raw }}
path += "{{ $part.Raw }}"
{{- else }}
{
	{{- $param := $part.Param }}
    // Encode '{{ $param.SourceName }}' parameter.
    e := uri.NewPathEncoder(uri.PathEncoderConfig{
        Param: "{{ $param.SourceName }}",
        Style: uri.PathStyle{{ pascalMP $param.Style }},
        Explode: {{ if $param.Explode }}true{{ else }}false{{ end }},
    })
    path += e.Encode{{ $param.Schema.EncodeFn }}(params.{{ $param.Name }})
}
{{- end }}
{{- end }}
{{- end }}

{{ define "params_encode_query" }}
{{ $pcount := len $.QueryParams }}
{{ if ne $pcount 0 }}{{/* Check params existence */}}
q := r.URL.Query()
{{- range $param := $.QueryParams }}{{/* Range over params */}}
{
    // Encode '{{ $param.SourceName }}' parameter.
    e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
        Style:uri.QueryStyle{{ pascalMP $param.Style }},
        Explode: {{ if $param.Explode }}true{{ else }}false{{ end }},
    })
    v := params.{{ $param.Name }}
		param := e.Encode{{ $param.Schema.EncodeFn }}(v)
    {{- if $param.Schema.IsArray }}
    q["{{ $param.SourceName }}"] = param
    {{- else }}
    q.Set("{{ $param.SourceName }}", param)
    {{- end }}
}
{{- end }}{{/* Range over params */}}
r.URL.RawQuery = q.Encode()
{{- end }}{{/* Check params existence */}}
{{- end }}

