{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ define "response_decoders" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $m := $.Methods }}{{/* Range over all methods */}}

func decode{{ $m.Name }}Response(resp *http.Response) (res {{ $m.ResponseType.Type }}, err error) {
    buf := json.GetBuffer()
    defer json.PutBuffer(buf)
    if _, err := io.Copy(buf, resp.Body); err != nil {
        return res, err
    }

    switch resp.StatusCode {
    {{- range $statusCode, $response := $m.Responses.StatusCode }}{{/* Range over responses */}}
    case {{ $statusCode }}:
        {{- if $response.NoContent }}{{/* Decode NoContent response */}}
        return {{ if $m.IsResponseIface }}&{{ end }}{{ $response.NoContent.Name }}{}, nil
        {{- else }}{{/* Decode content response */}}
        switch resp.Header.Get("Content-Type") {
        {{- range $contentType, $schema := $response.Contents }}{{/* Range over contents */}}
        case "{{ $contentType }}":
            {{- if eq $contentType "application/json" }}{{/* Decode */}}
            i := json.GetIterator()
            defer json.PutIterator(i)
            i.ResetBytes(buf.Bytes())

            var response {{ $schema.Type }}
            if err := func() error {
                {{- template "dec_json_value" req_elem $schema }}
            }(); err != nil {
                return res, err
            }

            return {{ if $m.IsResponseIface }}&{{ end }}response, nil
            {{- else }}
            return res, fmt.Errorf("{{ $contentType }} decoder not implemented")
            {{- end }}{{/* Decode */}}
        {{- end }}{{/* Range over contents */}}
        default:
            return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
        }
        {{- end }}{{/* Decode content response */}}
    {{- end }}{{/* Range over responses */}}
    default:
        {{- $def := $m.Responses.Default }}
        {{- if $def }}{{/* Decode default response */}}
        {{- if $def.NoContent }}{{/* Decode NoContent response */}}
        return {{ if $m.IsResponseIface }}&{{ end }}{{ $def.NoContent.Name }}{StatusCode: resp.StatusCode}, nil
        {{- else }}{{/* Decode content response */}}
        switch resp.Header.Get("Content-Type") {
        {{- range $contentType, $schema := $def.Contents }}{{/* Range over contents */}}
        case "{{ $contentType }}":
            {{- if eq $contentType "application/json" }}{{/* Decode */}}
            i := json.GetIterator()
            defer json.PutIterator(i)
            i.ResetBytes(buf.Bytes())

            var response {{ $schema.Type }}
            if err := func() error {
                {{- template "dec_json_value" req_elem $schema }}
            }(); err != nil {
                return res, err
            }

            response.StatusCode = resp.StatusCode
            return {{ if $m.IsResponseIface }}&{{ end }}response, nil
            {{- else }}
            return res, fmt.Errorf("{{ $contentType }} decoder not implemented")
            {{- end }}{{/* Decode */}}
        {{- end }}{{/* Range over contents */}}
        default:
            return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
        }
        {{- end }}{{/* Decode content response */}}
        {{- else }}
        return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
        {{- end }}{{- /* Decode default response */}}
    }
}

{{- end }}{{/* Range over all methods */}}
{{ end }}
