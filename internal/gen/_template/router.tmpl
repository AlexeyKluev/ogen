{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}
{{ define "router" }}
{{ template "header" $ }}

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	http.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	p := []byte(r.URL.Path)
	if len(p) == 0 {
		s.notFound(w, r)
		return
	}

	var (
		idx    int               // index of next slash
		elem   []byte            // current element, without slashes
		args   map[string]string // lazily initialized
	)

	// Static code generated router with unwrapped path search.
	switch r.Method {
	{{- range $m := $.Methods }}
	case "{{ $m.Method }}":
		{{- template "route_edge" $m.Root }}
	{{- end }}
	default:
		s.notFound(w, r)
		return
	}
}

{{ end }}

{{ define "route_edge" }}
	{{- /*gotype: github.com/ogen-go/ogen/internal/gen.RouteEge*/ -}}
	{{- if and ($.Operation) (not $.HasNext) }}
		// {{ $.Operation.Spec.HTTPMethod }} {{ $.Operation.Spec.Path }}.
		s.handle{{ $.Operation.Name }}Request(args, w, r)
		return
	{{- else }}
		{{- if and (not $.ID) (not $.Path) }}
		// Root edge.
        {{- else }}
		// Edge: {{ $.ID }}, path: {{ printf "%q" $.Path }}.
		{{- end }}
		if len(p) > 1 && p[0] == '/' {
			p = p[1:]
		}
		if idx = bytes.IndexByte(p[:], '/'); idx < 0 { // looking for next element
			elem, p = p, p[:0] // slash not found, using full path
		} else {
			elem = p[:idx] // slash found, element is path until slash
			p = p[idx:]
		}
		{{- if $.HasNext }}
			switch string(elem) {
			{{- range $next := $.Case.Static }}
				case "{{ $next.Path }}": // -> {{ $next.ID }}
					{{- template "route_edge" $next }}
			{{- end }}
			{{- if $.Case.Variable }}
				{{- $v := $.Case.Variable }}
				default:
					// {{ $v.Operation.Spec.HTTPMethod }} {{ $v.Operation.Spec.Path }}.
					if args == nil {
						args = make(map[string]string)
					}
					args["{{ $v.Param.Spec.Name }}"] = string(elem)
					s.handle{{ $v.Operation.Name }}Request(args, w, r)
					return
				}
			{{- else }}
				default:
					{{- if $.Operation }}
						// {{ $.Operation.Spec.HTTPMethod }} {{ $.Operation.Spec.Path }}.
						s.handle{{ $.Operation.Name }}Request(args, w, r)
						return
					{{- else }}
						s.notFound(w, r)
						return
					{{- end }}
				}
			{{- end }}
		{{- else }}
			{{- if not $.Operation }}
				{{ errorf "leaf without operation: %+v" $ }}
			{{- end }}
			{{- if $.Param }}
				if args == nil {
					args = make(map[string]string)
				}
				args["{{ $.Param.Spec.Name }}"] = string(elem)
			{{- end }}
			// {{ $.Operation.Spec.HTTPMethod }} {{ $.Operation.Spec.Path }}.
			s.handle{{ $.Operation.Name }}Request(args, w, r)
			return
		{{- end }}
	{{- end }}
{{- end }}
