{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ define "response_encoders" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $m := $.Methods }}{{/* Range over all methods */}}

func encode{{ $m.Name }}Response(response {{ $m.ResponseType }}, w http.ResponseWriter) error {
    {{- $schemasLength := len $m.ListResponseSchemas }}
    {{- if eq $schemasLength 1 }}

    {{- range $info := $m.ListResponseSchemas }}
        {{- template "respond" $info }}
    {{- end }}

    {{- else }}
    switch response := response.(type) {
    {{- range $info := $m.ListResponseSchemas }}
    case *{{ $info.Schema.Name }}:
        {{- template "respond" $info }}
    {{- end }}
    default:
        return fmt.Errorf("{{ $m.Path}}: unexpected response type for method: %T", response)
    }
    {{- end }}
}


{{- end }}{{/* Range over all methods */}}
{{ end }}

{{ define "respond" }}
{{- if not $.NoContent }}{{- /* Set content-type */}}
w.Header().Set("Content-Type", "{{ $.ContentType }}")
{{- end }}{{- /* Set content-type */}}

{{- if $.Default }}{{- /* Set status code */}}
w.WriteHeader(response.StatusCode)
{{- else }}
w.WriteHeader({{ $.StatusCode }})
{{- end }}{{- /* Set status code */}}

{{- if $.NoContent }}{{- /* Encode content */}}
return nil
{{- else if eq $.ContentType "application/json" }}
return json.NewEncoder(w).Encode({{ if $.Default }}response.Response{{ else }}response{{ end }})
{{- else }}
return fmt.Errorf("{{ $.ContentType }} encoder not implemented")
{{- end }}{{- /* Encode content */ -}}
{{ end }}