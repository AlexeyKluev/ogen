{{- /*gotype: github.com/ogen-go/ogen/internal/gen.config*/ -}}

{{ define "parameters" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $m := $.Server.Methods }}
{{ if $m.Parameters }}
type {{ $m.Name }}Parameters struct {
	{{- range $t, $params := $m.Parameters }}
		{{ $t }} {{ $m.Name }}{{ $t }}Parameters
	{{- end}}
}
{{ range $t, $params := $m.Parameters }}
type {{ $m.Name }}{{ $t }}Parameters struct {
	{{- range $p := $params }}
		{{ $p.Name }} {{ $p.Type }}
	{{- end }}
}
{{ end }}

func Parse{{ $m.Name }}Parameters(r *http.Request) (*{{ $m.Name }}Parameters, error) {
	var parameters {{ $m.Name }}Parameters
	{{ range $t, $params := $m.Parameters }}
		{{- range $p := $params }}
		{
			{{- if eq $t "Query" }}
				param := r.URL.Query().Get("{{ $p.SourceName }}")
			{{- else if eq $t "Path" }}
				param := chi.URLParam(r, "{{ $p.SourceName }}")
			{{- else if eq $t "Header" }}
				param := r.Header.Values("{{ $p.SourceName }}")
            {{- else if eq $t "Cookie" }}
				c, err := r.Cookie("{{ $p.SourceName }}")
				if err != nil {
					return nil, fmt.Errorf("cookie param {{ $p.SourceName }}: %w", err)
				}

				param := c.Value
			{{- else }}
				return nil, fmt.Errorf("unsupported param type {{ $t }}")
			{{- end }}

			{{- if $p.Required }}
			if len(param) == 0 {
				return nil, fmt.Errorf("{{ $t }} param '{{ $p.SourceName }}' is empty")
			}

			v, err := {{ template "parse_from_string" $p.Type }}(param)
			if err != nil {
				return nil, fmt.Errorf("parse {{ $t }} param '{{ $p.SourceName }}': %w", err)
			}

			parameters.{{ $t }}.{{ $p.Name }} = v
			{{- else }}
			if len(param) > 0 {
				v, err := {{ template "parse_from_string" $p.Type }}(param)
				if err != nil {
					return nil, fmt.Errorf("param {{ $t }} {{ $p.SourceName }} parse: %w", err)
				}

				parameters.{{ $t }}.{{ $p.Name }} = v
			}
			{{- end }}
		}
		{{- end }}
	{{- end }}

	return &parameters, nil
}
{{- end }}
{{- end }}

{{ end }}