{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ define "handlers" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}
func New{{ $op.Name }}Handler(s Server, opts ...Option) func(w http.ResponseWriter, r *http.Request) {
  cfg := newConfig(opts...)
	return func(w http.ResponseWriter, r *http.Request) {
    ctx, span := cfg.Tracer.Start(r.Context(), `{{ $op.Name }}`,
      {{- if $op.Spec.OperationID }}
      trace.WithAttributes(otelogen.OperationID(`{{ $op.Spec.OperationID }}`)),
      {{- end }}
      trace.WithSpanKind(trace.SpanKindServer),
    )
    defer span.End()
		{{- if $op.Params }}
        params, err := decode{{ $op.Name }}Params(r)
        if err != nil {
            span.RecordError(err)
            respondError(w, http.StatusBadRequest, err)
            return
        }
        {{- end }}

        {{- if $op.Request }}
        request, err := decode{{ $op.Name }}Request(r, span)
        if err != nil {
          span.RecordError(err)
            respondError(w, http.StatusBadRequest, err)
            return
        }
        {{- end }}

        response, err := s.{{$op.Name}}(ctx{{ if $op.Request }}, request{{ end }}{{if $op.Params}}, params {{ end }})
        if err != nil {
            {{- /* It is not secure to expose internal error to client, but better than nothing. */ -}}
            span.RecordError(err)
            respondError(w, http.StatusInternalServerError, err)
            return
        }

        if err := encode{{ $op.Name }}Response(response, w, span); err != nil {
            span.RecordError(err)
            return
        }
	}
}

{{- if not (or ($op.Params) ($op.Request)) }}
func New{{ $op.Name }}FastHandler(s Server) func(ctx *fasthttp.RequestCtx) {
  return func(ctx *fasthttp.RequestCtx) {
    response, err := s.{{$op.Name}}(context.Background())
    if err != nil {
      return
    }
    w := ht.Writer{
      Context: ctx,
    }
    if err := encode{{ $op.Name }}Response(response, w, nil); err != nil {
      return
    }
  }
}
{{ end }}

{{ end }}

func respondError(w http.ResponseWriter, code int, err error) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(code)
    data, writeErr := json.Marshal(struct{
        ErrorMessage string `json:"error_message"`
    }{
        ErrorMessage: err.Error(),
    })
    if writeErr == nil {
      w.Write(data)
    }
}
{{ end }}
