{{ define "req_enc_json"}}
buf:= json.GetBuffer()
j := json.GetStream(buf)
defer json.PutStream(j)
more := json.NewMore(j)
defer more.Reset()
{{ template "enc_json_value" req_enc_elem $ }}
if err := j.Flush(); err != nil {
    json.PutBuffer(buf)
    return nil, "", err
}
{{ end }}

{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}
{{ define "req_enc" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{/* Range over all methods */}}
{{- range $op := $.Operations }}
{{- if $op.Request }}
func encode{{ $op.Name }}Request(req {{ $op.Request.Type.Go }}) (data *bytes.Buffer, contentType string, err error) {
    {{- $requestsLength := len $op.Request.Contents }}
    {{- if eq $requestsLength 1 }}
    {{- range $contentType, $type := $op.Request.Contents }}

    {{- if $contentType.JSON }}
    {{- template "req_enc_json" $type }}
    return buf, "{{ $contentType }}", nil
    {{- else }}
    return nil, "", fmt.Errorf("{{ $contentType }} encoder not implemented")
    {{- end }}

    {{- end }}
    {{- else }}
    {{- /* Multiple requests */}}
    switch req := req.(type) {
    {{- range $contentType, $type := $op.Request.Contents }}
    case *{{ $type.Go }}:
        {{- if $contentType.JSON }}
        {{- template "req_enc_json" $type }}
        return buf, "{{ $contentType }}", nil
        {{- else }}
        return nil, "", fmt.Errorf("{{ $contentType }} encoder not implemented")
        {{- end }}
    {{- end }}
    default:
        return nil, "", fmt.Errorf("unexpected request type: %T", req)
    }
    {{- end }}
}
{{- end }}
{{ end }}
{{/* Range over all methods */}}

{{ end }}
