{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ define "schemas" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $_, $s := $.Types }}
{{- template "define_schema" $s }}
{{- end }}
{{- end }}

{{- define "define_schema" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/ir.Type*/ -}}

{{- if $.Doc -}}
// {{ $.Doc }}
{{- end }}
{{- if $.Schema }}
    {{- if $.Schema.Ref }}
    // Ref: {{ $.Schema.Ref }}
    {{- end }}
{{- end }}

{{- /* Define struct */ -}}
{{- if $.IsStruct }}
{{- if eq (len $.Fields) 0 }}{{/* Blank struct */}}
type {{ $.Name }} struct{}
{{- else }}
type {{ $.Name }} struct {
{{- range $f := $.Fields }}
    {{ $f.Name }} {{ $f.Type.Go }} {{ if $f.Tag.JSON }}`json:"{{ $f.Tag.JSON }}"`{{ end }}
{{- end }}
}
{{- end }}
{{/* Define struct */}}

{{/* Define alias */}}
{{- else if $.IsAlias }}
type {{ $.Name }} {{ $.AliasTo.Go }}
{{/* Define alias */}}

{{/* Define enum */}}
{{- else if $.IsEnum }}
type {{ $.Name }} {{ $.Primitive }}

const (
{{- range $variant := $.EnumVariants }}
{{ $variant.Name }} {{ $.Name }} = {{ $variant.ValueGo }}
{{- end }}
)
{{/* Define enum */}}
{{/* Define sum */}}
{{- else if $.IsSum }}
// {{ $.Name }} represents sum type.
type {{ $.Name }} struct {
    Type {{ $.Name }}Type // switch on this field
{{- range $s := $.SumOf }}
    {{ $s.Name }} {{ $s.Go }}
{{- end }}
}

// {{ $.Name }}Type is oneOf type of {{ $.Name }}.
type {{ $.Name }}Type string

// Possible values for {{ $.Name }}Type.
const (
{{- range $s := $.SumOf }}
    {{ $.Name }}{{ $s.Name }}Type {{ $.Name }}Type = "{{ $s.Go }}"
{{- end }}
)

{{- range $s := $.SumOf }}
// Is{{ $s.Name }} reports whether {{ $.Name }} is {{ $s.Go }}.
func (s {{ $.Go }}) Is{{ $s.Name }}() bool { return s.Type == {{ $.Name }}{{ $s.Name }}Type }
{{- end }}

{{- range $s := $.SumOf }}
// Set{{ $s.Name }} sets {{ $.Name }} to {{ $s.Go }}.
func (s *{{ $.Go }}) Set{{ $s.Name }}(v {{ $s.Go }}) {
    s.Type = {{ $.Name }}{{ $s.Name }}Type
    s.{{ $s.Name }} = v
}

// Get{{ $s.Name }} returns {{ $s.Go }} and true boolean if {{ $.Go }} is {{ $s.Go }}.
func (s *{{ $.Go }}) Get{{ $s.Name }}()(v {{ $s.Go }}, ok bool) {
    if !s.Is{{ $s.Name }}() {
        return v, false
    }
    return s.{{ $s.Name }}, true
}

// {{ $.Name }}{{ $s.Name }} returns new {{ $.Go }} from {{ $s.Go }}.
func {{ $.Name }}{{ $s.Name }}(v {{ $s.Go }}) {{ $.Go }} {
    var s {{ $.Name }}
    s.Set{{ $s.Name }}(v)
    return s
}
{{- end }}

{{- range $s := $.SumOf }}

{{- end }}

{{/* Define sum */}}
{{/* Define generic */}}
{{- else if $.IsGeneric }}
{{- $g := $.GenericOf }}
{{- $v := $.GenericVariant }}

// New{{ $.Name }} returns new {{ $.Name }} with value set to v.
func New{{ $.Name }}(v {{ $g.Go }}) {{ $.Name }} {
    return {{ $.Name }} {
        Value: v,
    {{- if $v.Optional }}
        Set: true,
    {{- end }}
    }
}

// {{ $.Name }} is{{ if $v.Optional }} optional{{ end }}{{ if $v.Nullable }} nullable{{ end }} {{ $g.Go }}.
type {{ $.Name }} struct {
    Value {{ $g.Go }}
{{- if $v.Optional }}
    Set bool
{{- end }}
{{- if $v.Nullable }}
    Null bool
{{- end }}
}

{{- if $v.Optional }}
// IsSet returns true if {{ $.Go }} was set.
func (o {{ $.Name }}) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *{{ $.Name }}) Reset() {
    var v {{ $g.Go }}
    o.Value = v
    o.Set = false
{{- if $v.Nullable }}
    o.Null = false
{{- end }}
}
{{- end }}

// SetTo sets value to v.
func (o *{{ $.Name }}) SetTo(v {{ $g.Go }}) {
{{- if $v.Optional }}
    o.Set = true
{{- end }}
{{- if $v.Nullable }}
    o.Null = false
{{- end }}
    o.Value = v
}

{{- if $v.Nullable  }}
// IsSet returns true if value is Null.
func (o {{ $.Name }}) IsNull() bool { return o.Null }
{{ end }}

// Get returns value and boolean that denotes whether value was set.
func (o {{ $.Name }}) Get() (v {{ $g.Go }}, ok bool) {
{{- if $v.Nullable }}
    if o.Null {
        return v, false
    }
{{- end }}
{{- if $v.Optional }}
    if !o.Set {
        return v, false
    }
{{- end }}
    return o.Value, true
}
{{/* end define generic */}}
{{- else }}
// Unexpected kind {{ $.Kind }} of {{ $.Name }}
{{- end }}

{{/* Define methods */}}
{{- range $method := $.Methods }}
func (*{{ $.Name }}) {{ $method }}() {}
{{- end }}
{{/* end define methods */}}


{{- end }}
