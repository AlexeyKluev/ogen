{{- define "uri_decoders" }}
{{- template "header" $ }}

{{- range $t, $_ := $.URITypes }}
{{- if eq $t.Kind "struct" }}
func (v *{{ $t.Go }}) decodeURI(d uri.Decoder) error {
    if v == nil {
        return fmt.Errorf("unable to decode {{ $t.Go }} to nil")
    }
    return d.Fields(func(name string, d uri.Decoder) error {
        switch name {
        {{- range $f := $t.Fields }}
        {{- if $f.Spec }}
        case "{{ $f.Spec.Name }}":
            {{- template "decode_uri" dict
                "type" $f.Type
                "var" (sprintf "v.%s" $f.Name)
                "nestedLvl" 0
            }}
        {{- end }}
        {{- end }}
        default:
            return fmt.Errorf("unexpected field '%s'", name)
        }
    })
}

{{- end }}
{{- end }}

{{- end }}

{{- define "decode_uri" }}
{{- $t := index . "type" }}
{{- $var := index . "var" }}
{{- $nestedLvl := index . "nestedLvl" }}
{{- if eq $t.Kind "primitive" }}
    s, err := d.Value()
    if err != nil {
        return err
    }

    c, err := conv.{{ $t.FromString }}(s)
    if err != nil {
        return err
    }

    {{ $var }} = c
    return nil
{{- else if eq $t.Kind "enum" }}
    s, err := d.Value()
    if err != nil {
        return err
    }

    c, err := conv.{{ $t.FromString }}(s)
    if err != nil {
        return err
    }

    {{ $var }} = {{ $t.Go }}(c)
    return nil
{{- else if eq $t.Kind "array" }}
    return d.Array(func(d uri.Decoder) error {
        var {{ sprintf "tmp%d" $nestedLvl }} {{ $t.Item.Go }}
        if err := func() error {
            {{- template "decode_uri" dict
                "type" $t.Item
                "var" (sprintf "tmp%d" $nestedLvl)
                "nestedLvl" (inc $nestedLvl)
            }}
        }(); err != nil {
            return err
        }
        {{ $var }} = append({{ $var }}, {{ sprintf "tmp%d" $nestedLvl }})
        return nil
    })
{{- else if eq $t.Kind "alias" }}
    var {{ sprintf "tmp%d" $nestedLvl }} {{ $t.AliasTo.Go }}
    if err := func() error {
        {{- template "decode_uri" dict
            "type" $t.AliasTo
            "var" (sprintf "tmp%d" $nestedLvl)
            "nestedLvl" (inc $nestedLvl)
        }}
    }(); err != nil {
        return err
    }
    {{ $var }}.wrap({{ sprintf "tmp%d" $nestedLvl }})
    return nil
{{- else if eq $t.Kind "generic" }}
    var {{ sprintf "tmp%d" $nestedLvl }} {{ $t.GenericOf.Go }}
    if err := func() error {
        {{- template "decode_uri" dict
            "type" $t.GenericOf
            "var" (sprintf "tmp%d" $nestedLvl)
            "nestedLvl" (inc $nestedLvl)
        }}
    }(); err != nil {
        return err
    }
    {{ $var }}.SetTo({{ sprintf "tmp%d" $nestedLvl }})
    return nil
{{- else if eq $t.Kind "pointer" }}
    var {{ sprintf "tmp%d" $nestedLvl }} {{ $t.PointerTo.Go }}
    if err := func() error {
        {{- template "decode_uri" dict
            "type" $t.PointerTo
            "var" (sprintf "tmp%d" $nestedLvl)
            "nestedLvl" (inc $nestedLvl)
        }}
    }(); err != nil {
        return err
    }
    {{ $var }} = &{{ sprintf "tmp%d" $nestedLvl }}
    return nil
{{- else if eq $t.Kind "struct" }}
    return {{ $var }}.decodeURI(d)
{{- else if eq $t.Kind "sum" }}
    // sum not supported
    return nil
{{- else }}
Unexpected kind {{ $t.Kind }}
{{- end }}
{{- end }}