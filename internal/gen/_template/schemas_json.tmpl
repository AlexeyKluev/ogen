{{ define "schemas_json" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $s := $.Schemas }}
{{ if $s.IsStruct }}
// WriteJSON implements json.Marshaler.
func (s {{ $s.Name }}) WriteJSON(j *json.Stream) {
    j.WriteObjectStart()
    field := json.NewFieldWriter(j)
    defer field.Reset()
    {{- range $f := $s.JSONFields }}
        {{- if or ($f.Type.Generic) ($f.Type.IsStruct) }}
            {{- if $f.Type.Optional }}
            if s.{{ $f.Name }}.Set {
                field.Write("{{ $f.Tag }}")
                s.{{ $f.Name }}.WriteJSON(j{{ if $f.Type.JSONFormat }}, json.Write{{ $f.Type.JSONFormat }}{{ end }})
            }
            {{- else }}
            field.Write("{{ $f.Tag }}")
            s.{{ $f.Name }}.WriteJSON(j{{ if $f.Type.JSONFormat }}, json.Write{{ $f.Type.JSONFormat }}{{ end }})
            {{- end }}
        {{- else if $f.Type.JSONFormat }}
            field.Write("{{ $f.Tag }}")
            json.Write{{ $f.Type.JSONFormat }}(j, s.{{ $f.Name }})
        {{- else if $f.Type.JSONWrite }}
            field.Write("{{ $f.Tag }}")
            j.{{ $f.Type.JSONWrite }}(s.{{ $f.Name }})
        {{- else }}
            // Unsupported kind "{{ $f.Type.Kind  }}" for field "{{ $f.Name }}".
        {{- end }}
    {{- end }}
    j.WriteObjectEnd()
}

// WriteJSONTo writes {{ $s.Name }} json value to io.Writer.
func (s {{ $s.Name }}) WriteJSONTo(w io.Writer) error {
    j := json.NewStream(w)
    s.WriteJSON(j)
    return j.Flush()
}

// ReadJSONFrom reads {{ $s.Name }} json value from io.Reader.
func (s *{{ $s.Name }}) ReadJSONFrom(r io.Reader) error {
    buf := json.GetBuffer()
    defer json.PutBuffer(buf)

    if _, err := buf.ReadFrom(r); err != nil {
        return err
    }
    i := json.GetIterator()
    i.ResetBytes(buf.Bytes())
    defer json.PutIterator(i)

    return s.ReadJSON(i)
}

// ReadJSON reads {{ $s.Name }} from json stream.
func (s *{{ $s.Name }}) ReadJSON(i *json.Iterator) error {
    i.ReadObjectCB(func(i *json.Iterator, k string) bool {
        switch k {
{{- range $f := $s.JSONFields }}
    case "{{ $f.Tag }}":
    {{- if $f.Type.Optional }}
        s.{{ $f.Name }}.Reset()
    {{- end }}
    {{- if or ($f.Type.Generic) ($f.Type.IsStruct) }}
        {{- if $f.Type.JSONFormat }}
            if err := s.{{ $f.Name }}.ReadJSON(i, json.Read{{ $f.Type.JSONFormat }}); err != nil {
                i.ReportError("Field {{ $f.Name }}", err.Error())
                return false
            }
            return true
        {{- else }}
            if err := s.{{ $f.Name }}.ReadJSON(i); err != nil {
                i.ReportError("Field {{ $f.Name }}", err.Error())
                return false
            }
            return true
        {{- end }}
    {{- else if $f.Type.JSONFormat }}
        v, err := json.Read{{ $f.Type.JSONFormat }}(i)
        if err != nil {
            i.ReportError("Field {{ $f.Name }}", err.Error())
            return false
        }
        s.{{ $f.Name }} = v
        return true
    {{- else if $f.Type.JSONRead }}
        s.{{ $f.Name }} = i.{{ $f.Type.JSONRead }}()
        return i.Error == nil
    {{- else }}
        // Unsupported kind "{{ $f.Type.Kind  }}" for field "{{ $f.Name }}".
        i.Skip()
        return true
    {{- end }}
{{- end }}
        default:
            i.Skip()
            return true
        }
    })
    return i.Error
}
{{- end }}
{{- end }}

{{ end }}
