{{ define "schemas_json" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $t := $.Types }}
{{ if $t.IsStruct }}
// WriteJSON implements json.Marshaler.
func (s {{ $t.Name }}) WriteJSON(w *json.Writer) {
    w.ObjStart()
    more := json.NewMore(w)
    defer more.Reset()
    {{- range $f := $t.JSON.Fields }}
        {{ template "enc_json" field_elem $f -}}
    {{- end }}
    w.ObjEnd()
}

// ReadJSON reads {{ $t.Name }} from json stream.
func (s *{{ $t.Name }}) ReadJSON(r *json.Reader) error {
    if s == nil {
        return fmt.Errorf(`invalid: unable to decode {{ $t.Name }} to nil`)
    }
    return r.ObjBytes(func(r *json.Reader, k []byte) error {
        switch string(k) {
    {{- range $f := $t.JSON.Fields }}
    case "{{ $f.Tag.JSON }}":
        {{- template "dec_json" field_elem $f }}
    {{- end }}
        default:
            return r.Skip()
        }
        return nil
    })
}
{{- else if $t.IsGeneric }}
{{ $g := $t.GenericOf }}
{{ $v := $t.GenericVariant }}
// WriteJSON writes json value of {{ $g.Go }} to json stream.
func (o {{ $t.Name }}) WriteJSON(w *json.Writer{{ if $g.Format }}, format func(*json.Writer, {{ $g.Go }}){{ end }}) {
{{- if $v.Nullable }}
    if o.Null {
        w.Null()
        return
    }
{{- end }}
{{- if $g.Format }}
    format(w, o.Value)
{{- else if $g.JSON.Format }}
    json.Write{{ $g.JSON.Format }}(w, o.Value)
{{- else if $g.JSON.Write }}
    w.{{ $g.JSON.Write }}({{ $g.Primitive }}(o.Value))
{{- else if $g.IsStruct }}
    o.Value.WriteJSON(w)
{{- end }}
}

// ReadJSON reads json value of {{ $g.Go }} from json iterator.
func (o *{{ $t.Name }}) ReadJSON(r *json.Reader{{ if $g.Format }}, format func(*json.Reader) ({{ $g.Go }}, error){{ end }}) error {
    if o == nil {
        return fmt.Errorf(`invalid: unable to decode {{ $t.Name }} to nil`)
    }
    switch r.Next() {
    case json.{{ $g.JSON.Type }}:
    {{- if $v.Optional }}
        o.Set = true
    {{- end }}
    {{- if $v.Nullable }}
        o.Null = false
    {{- end }}
    {{- if $g.Format }}
        v, err := format(r)
        if err != nil {
            return err
        }
        o.Value = v
    {{- else if $g.JSON.Format }}
        v, err := json.Read{{ $g.JSON.Format }}(r)
        if err != nil {
            return err
        }
        o.Value = v
    {{- else if $g.JSON.Read }}
        v, err := r.{{ $g.JSON.Read }}()
        if err != nil {
            return err
        }
        o.Value = {{ $g.Go }}(v)
    {{- else if $g.IsStruct }}
        if err := o.Value.ReadJSON(r); err != nil {
            return err
        }
    {{- end }}
        return nil
    {{- if $v.Nullable }}
    case json.Nil:
        if err := r.Null(); err != nil {
            return err
        }
        var v {{ $g.Go }}
        o.Value = v
        {{- if $v.Optional }}
        o.Set = true
        {{- end }}
        o.Null = true
        return nil
    {{- end }}
    default:
        return fmt.Errorf("unexpected type %q while reading {{ $t.Name }}", r.Next())
    }
}
{{- else if $t.IsEnum }}
// WriteJSON implements json.Marshaler.
func (s {{ $t.Name }}) WriteJSON(w *json.Writer) {
    w.{{ $t.JSON.Write }}({{ $t.Primitive }}(s))
}

// ReadJSON reads {{ $t.Name }} from json reader.
func (s *{{ $t.Name }}) ReadJSON(r *json.Reader) error {
    if s == nil {
        return fmt.Errorf(`invalid: unable to decode {{ $t.Name }} to nil`)
    }
    v, err := r.{{ $t.JSON.Read }}()
    if err != nil {
        return err
    }
    *s = {{ $t.Name }}(v)
    return nil
}
{{- else if $t.IsAlias }}
func ({{ $t.Name }}) WriteJSON(w *json.Writer) {}
func ({{ $t.Name }}) ReadJSON(r *json.Reader) error { return nil }
{{- else if $t.IsSum }}
// WriteJSON implements json.Marshaler.
func (s {{ $t.Name }}) WriteJSON(w *json.Writer) {
    switch s.Type {
    {{- range $s := $t.SumOf }}
    case {{ $s.Name }}{{ $t.Name }}:
        {{- template "enc_json" sum_elem $s -}}
    {{- end }}
    }
}

// ReadJSON reads value from json reader.
func (s *{{ $t.Name }}) ReadJSON(r *json.Reader) error {
    if s == nil {
        return fmt.Errorf(`invalid: unable to decode {{ $t.Name }} to nil`)
    }
    switch t := r.Next(); t {
    {{- range $s := $t.SumOf }}
    case json.{{ $s.JSON.Type }}:
        {{- template "dec_json" sum_elem $s }}
        s.Type = {{ $s.Name }}{{ $t.Name }}
    {{- end }}
    default:
        return fmt.Errorf("unexpected json type %q", t)
    }
    return nil
}
{{- end }}

{{- end }}
{{ end }}
