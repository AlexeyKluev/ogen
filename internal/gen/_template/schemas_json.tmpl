{{ define "schemas_json" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $s := $.Schemas }}
{{ if $s.IsStruct }}
// WriteJSON implements json.Marshaler.
func (s {{ $s.Name }}) WriteJSON(j *json.Stream) {
    j.WriteObjectStart()
    more := json.NewMore(j)
    defer more.Reset()
    {{- range $f := $s.JSONFields }}
        {{ template "enc_json_value" field_elem $f -}}
    {{- end }}
    j.WriteObjectEnd()
}

// WriteJSONTo writes {{ $s.Name }} json value to io.Writer.
func (s {{ $s.Name }}) WriteJSONTo(w io.Writer) error {
    j := json.GetStream(w)
    defer json.PutStream(j)
    s.WriteJSON(j)
    return j.Flush()
}

// ReadJSONFrom reads {{ $s.Name }} json value from io.Reader.
func (s *{{ $s.Name }}) ReadJSONFrom(r io.Reader) error {
    buf := json.GetBuffer()
    defer json.PutBuffer(buf)

    if _, err := buf.ReadFrom(r); err != nil {
        return err
    }
    i := json.GetIterator()
    i.ResetBytes(buf.Bytes())
    defer json.PutIterator(i)

    return s.ReadJSON(i)
}

// ReadJSON reads {{ $s.Name }} from json stream.
func (s *{{ $s.Name }}) ReadJSON(i *json.Iterator) error {
    var retErr error
    i.ReadObjectCB(func(i *json.Iterator, k string) bool {
        switch k {
{{- range $f := $s.JSONFields }}
    case "{{ $f.Tag }}":
    if err := func() error {
        {{- template "dec_json_value" field_elem $f }}
    }(); err != nil {
        retErr = err
        return false
    }
    return true
{{- end }}
        default:
            i.Skip()
            return true
        }
    })
    if retErr != nil {
        return retErr
    }
    return i.Error
}
{{- else if $s.IsGeneric }}
{{ $g := $s.GenericOf }}
{{ $v := $s.GenericVariant }}
// WriteJSON writes json value of {{ $g.Type }} to json stream.
func (o {{ $s.Name }}) WriteJSON(j *json.Stream{{ if $g.FormatCustom }}, format func(*json.Stream, {{ $g.Type }}){{ end }}) {
{{- if $v.Nullable }}
    if o.Null {
        j.WriteNil()
        return
    }
{{- end }}
{{- if $g.FormatCustom }}
    format(j, o.Value)
{{- else if $g.JSONHelper }}
    json.Write{{ $g.JSONHelper }}(j, o.Value)
{{- else if $g.JSONWrite }}
    j.{{ $g.JSONWrite }}({{ $g.Primitive }}(o.Value))
{{- else if $g.IsStruct }}
    o.Value.WriteJSON(j)
{{- end }}
}

// ReadJSON reads json value of {{ $g.Type }} from json iterator.
func (o *{{ $s.Name }}) ReadJSON(i *json.Iterator{{ if $g.FormatCustom }}, format func(*json.Iterator) ({{ $g.Type }}, error){{ end }}) error {
    switch i.WhatIsNext() {
    case json.{{ $g.JSONType }}:
    {{- if $v.Optional }}
        o.Set = true
    {{- end }}
    {{- if $v.Nullable }}
        o.Null = false
    {{- end }}
    {{- if $g.FormatCustom }}
        v, err := format(i)
        if err != nil {
            return err
        }
        o.Value = v
    {{- else if $g.JSONHelper }}
        v, err := json.Read{{ $g.JSONHelper }}(i)
        if err != nil {
            return err
        }
        o.Value = v
    {{- else if $g.JSONRead }}
        o.Value = {{ $g.Type }}(i.{{ $g.JSONRead }}())
    {{- else if $g.IsStruct }}
        if err := o.Value.ReadJSON(i); err != nil {
            return err
        }
    {{- end }}
        return i.Error
    {{- if $v.Nullable }}
    case json.NilValue:
        var v {{ $g.Type }}
        o.Value = v
        {{- if $v.Optional }}
        o.Set = true
        {{- end }}
        o.Null = true
        i.Skip()
        return i.Error
    {{- end }}
    default:
        return fmt.Errorf("unexpected type %d while reading {{ $s.Name }}", i.WhatIsNext())
    }
    return nil
}
{{- else if $s.IsEnum }}
// WriteJSON implements json.Marshaler.
func (s {{ $s.Name }}) WriteJSON(j *json.Stream) {
    j.{{ $s.JSONWrite }}({{ $s.Primitive }}(s))
}

// ReadJSON reads {{ $s.Name }} from json stream.
func (s *{{ $s.Name }}) ReadJSON(i *json.Iterator) error {
    *s = {{ $s.Name }}(i.{{ $s.JSONRead }}())
    return i.Error
}
{{- else if $s.IsAlias }}
func ({{ $s.Name }}) WriteJSON(j *json.Stream) {}
func ({{ $s.Name }}) ReadJSON(i *json.Iterator) error { return nil }
func ({{ $s.Name }}) ReadJSONFrom(r io.Reader) error { return nil }
func ({{ $s.Name }}) WriteJSONTo(w io.Writer) error { return nil }
{{- end }}

{{- end }}
{{ end }}
