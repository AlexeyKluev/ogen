{{ define "schemas_json" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $s := $.Schemas }}{{/*Range schemas*/}}
{{ if eq $s.Kind "struct" }}{{/*If struct*/}}
// WriteJSON implements json.Marshaler.
func (s {{ $s.Name }}) WriteJSON(j *json.Stream) {
    j.WriteObjectStart()
    field := json.NewFieldWriter(j)
    defer field.Reset()
    {{- range $f := $s.Fields }}{{/*Range fields*/}}
    {{- if ne $f.Tag "-" }}
    {{- if $f.Type.Generic }}
        {{- if $f.Type.Optional }}
        if s.{{ $f.Name }}.Set {
            field.Write("{{ $f.Tag }}")
            s.{{ $f.Name }}.WriteJSON(j{{ if $f.Type.JSONHelper }}, json.Write{{ $f.Type.JSONHelper }}{{ end }})
        }
        {{- else }}
            field.Write("{{ $f.Tag }}")
            s.{{ $f.Name }}.WriteJSON(j{{ if $f.Type.JSONHelper }}, json.Write{{ $f.Type.JSONHelper }}{{ end }})
        {{- end }}
    {{- else if $f.Type.JSONHelper }}
        field.Write("{{ $f.Tag }}")
        json.Write{{ $f.Type.JSONHelper }}(j, s.{{ $f.Name }})
    {{- else if eq $f.Type.Kind "primitive" }}
        field.Write("{{ $f.Tag }}")
        {{- if $f.Type.JSONWrite }}
            j.{{ $f.Type.JSONWrite }}(s.{{ $f.Name }})
        {{- else }}
            // Unsupported primitive "{{ $f.Type.Primitive  }}" for field "{{ $f.Name }}".
            j.WriteNil()
        {{- end }}
    {{- else if eq $f.Type.Kind "struct" }}
        field.Write("{{ $f.Tag }}")
        s.{{ $f.Name }}.WriteJSON("{{ $f.Tag }}", j)
    {{- else }}
        // Unsupported kind "{{ $f.Type.Kind  }}" for field "{{ $f.Name }}".
    {{- end }}
    {{- end }}
    {{- end }}{{/*Range fields*/}}
    j.WriteObjectEnd()
}

// WriteJSONTo writes {{ $s.Name }} json value to io.Writer.
func (s {{ $s.Name }}) WriteJSONTo(w io.Writer) error {
    j := json.NewStream(w)
    s.WriteJSON(j)
    return j.Flush()
}

// ReadJSONFrom reads {{ $s.Name }} json value from io.Reader.
func (s *{{ $s.Name }}) ReadJSONFrom(r io.Reader) error {
    data, err := io.ReadAll(r)
    if err != nil {
        return err
    }
    i := json.NewIterator()
    i.ResetBytes(data)
    return s.ReadJSON(i)
}

// ReadJSON reads {{ $s.Name }} from json stream.
func (s *{{ $s.Name }}) ReadJSON(i *json.Iterator) error {
    i.ReadObjectCB(func(i *json.Iterator, k string) bool {
        switch k {
{{- range $f := $s.Fields }}{{/*Range fields*/}}
{{- if ne $f.Tag "-" }}
    case "{{ $f.Tag }}":
    {{- if $f.Type.Optional }}
        s.{{ $f.Name }}.Reset()
    {{- end }}
    {{- if or ($f.Type.Generic) (eq $f.Type.Kind "struct") }}
        {{- if $f.Type.JSONHelper }}
            if err := s.{{ $f.Name }}.ReadJSON(i, json.Read{{ $f.Type.JSONHelper }}); err != nil {
                i.ReportError("Field {{ $f.Name }}", err.Error())
                return false
            }
            return true
        {{- else }}
        if err := s.{{ $f.Name }}.ReadJSON(i); err != nil {
            i.ReportError("Field {{ $f.Name }}", err.Error())
            return false
        }
        return true
        {{- end }}
    {{- else if $f.Type.JSONHelper }}
            v, err := json.Read{{ $f.Type.JSONHelper }}(i)
            if err != nil {
            i.ReportError("Field {{ $f.Name }}", err.Error())
            return false
            }
            s.{{ $f.Name }} = v
            return true
    {{- else if $f.Type.JSONRead }}
        s.{{ $f.Name }} = i.{{ $f.Type.JSONRead }}()
        return i.Error == nil
    {{- else }}
        // Unsupported kind "{{ $f.Type.Kind  }}" for field "{{ $f.Name }}".
        i.Skip()
        return true
    {{- end }}
{{- end }}
{{- end }}{{/*Range fields*/}}
        default:
            i.Skip()
            return true
        }
    })
    return i.Error
}
{{- end }}{{/*If struct*/}}
{{- end }}{{/*Range schemas*/}}

{{ end }}
