{{ define "schemas_json" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $t := $.Types }}
{{ if $t.IsStruct }}
// WriteJSON implements json.Marshaler.
func (s {{ $t.Name }}) WriteJSON(j *json.Stream) {
    j.WriteObjectStart()
    more := json.NewMore(j)
    defer more.Reset()
    {{- range $f := $t.JSON.Fields }}
        {{ template "enc_json_value" field_elem $f -}}
    {{- end }}
    j.WriteObjectEnd()
}

// ReadJSON reads {{ $t.Name }} from json stream.
func (s *{{ $t.Name }}) ReadJSON(i *json.Iterator) error {
    var retErr error
    i.ReadObjectCB(func(i *json.Iterator, k string) bool {
        switch k {
{{- range $f := $t.JSON.Fields }}
    case "{{ $f.Tag.JSON }}":
    if err := func() error {
        {{- template "dec_json_value" field_elem $f }}
    }(); err != nil {
        retErr = err
        return false
    }
    return true
{{- end }}
        default:
            i.Skip()
            return true
        }
    })
    if retErr != nil {
        return retErr
    }
    return i.Error
}
{{- else if $t.IsGeneric }}
{{ $g := $t.GenericOf }}
{{ $v := $t.GenericVariant }}
// WriteJSON writes json value of {{ $g.Go }} to json stream.
func (o {{ $t.Name }}) WriteJSON(j *json.Stream{{ if $g.Format }}, format func(*json.Stream, {{ $g.Go }}){{ end }}) {
{{- if $v.Nullable }}
    if o.Null {
        j.WriteNil()
        return
    }
{{- end }}
{{- if $g.Format }}
    format(j, o.Value)
{{- else if $g.JSON.Format }}
    json.Write{{ $g.JSON.Format }}(j, o.Value)
{{- else if $g.JSON.Write }}
    j.{{ $g.JSON.Write }}({{ $g.Primitive }}(o.Value))
{{- else if $g.IsStruct }}
    o.Value.WriteJSON(j)
{{- end }}
}

// ReadJSON reads json value of {{ $g.Go }} from json iterator.
func (o *{{ $t.Name }}) ReadJSON(i *json.Iterator{{ if $g.Format }}, format func(*json.Iterator) ({{ $g.Go }}, error){{ end }}) error {
    switch i.WhatIsNext() {
    case json.{{ $g.JSON.Type }}:
    {{- if $v.Optional }}
        o.Set = true
    {{- end }}
    {{- if $v.Nullable }}
        o.Null = false
    {{- end }}
    {{- if $g.Format }}
        v, err := format(i)
        if err != nil {
            return err
        }
        o.Value = v
    {{- else if $g.JSON.Format }}
        v, err := json.Read{{ $g.JSON.Format }}(i)
        if err != nil {
            return err
        }
        o.Value = v
    {{- else if $g.JSON.Read }}
        o.Value = {{ $g.Go }}(i.{{ $g.JSON.Read }}())
    {{- else if $g.IsStruct }}
        if err := o.Value.ReadJSON(i); err != nil {
            return err
        }
    {{- end }}
        return i.Error
    {{- if $v.Nullable }}
    case json.NilValue:
        var v {{ $g.Go }}
        o.Value = v
        {{- if $v.Optional }}
        o.Set = true
        {{- end }}
        o.Null = true
        i.Skip()
        return i.Error
    {{- end }}
    default:
        return fmt.Errorf("unexpected type %d while reading {{ $t.Name }}", i.WhatIsNext())
    }
}
{{- else if $t.IsEnum }}
// WriteJSON implements json.Marshaler.
func (s {{ $t.Name }}) WriteJSON(j *json.Stream) {
    j.{{ $t.JSON.Write }}({{ $t.Primitive }}(s))
}

// ReadJSON reads {{ $t.Name }} from json stream.
func (s *{{ $t.Name }}) ReadJSON(i *json.Iterator) error {
    *s = {{ $t.Name }}(i.{{ $t.JSON.Read }}())
    return i.Error
}
{{- else if $t.IsAlias }}
func ({{ $t.Name }}) WriteJSON(j *json.Stream) {}
func ({{ $t.Name }}) ReadJSON(i *json.Iterator) error { return nil }
{{- else if $t.IsSum }}
// WriteJSON implements json.Marshaler.
func (s {{ $t.Name }}) WriteJSON(j *json.Stream) {
    switch s.Type {
    {{- range $s := $t.SumOf }}
    case {{ $t.Name }}{{ $s.Name }}Type:
        {{- template "enc_json_value" sum_elem $s -}}
    {{- end }}
    }
}

// ReadJSON reads value from json stream.
func (s *{{ $t.Name }}) ReadJSON(i *json.Iterator) error {
    switch t := i.WhatIsNext(); t {
    {{- range $s := $t.SumOf }}
    case json.{{ $s.JSON.Type }}:
        if err := func() error {
        {{- template "dec_json_value" sum_elem $s }}
        }(); err != nil {
            return err
        }
        s.Type = {{ $t.Name }}{{ $s.Name }}Type
    {{- end }}
    default:
        return fmt.Errorf("unexpected json type %d", t)
    }
    return nil
}
{{- end }}

{{- end }}
{{ end }}
