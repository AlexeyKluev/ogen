{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ define "param_decoders" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $m := $.Methods }}{{/* Range over methods */}}
{{ if $m.Parameters }}{{/* Check parameters existence */}}

func decode{{ $m.Name }}Params(r *http.Request) ({{ $m.Name }}Params, error) {
	var params {{ $m.Name }}Params
	{{- range $p := $m.Parameters }}
	// Decode param '{{ $p.SourceName }}' located in '{{ $p.In }}'.
	if err := func() error {
		{{- if eq $p.In "Query" }}
		values, ok := r.URL.Query()["{{ $p.SourceName }}"]
		if !ok {
			{{- if $p.Required }}
			return fmt.Errorf("query parameter '{{ $p.SourceName}}' not specified")
			{{- else }}
			return nil
			{{- end }}
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values: values,
			Style: uri.QueryStyle{{ pascalMP $p.Style }},
			Explode: {{ if $p.Explode }}true{{ else }}false{{ end }},
		})

		{{ template "decode_param" $p.Schema }}
		{{- else if eq $p.In "Path" }}
		param := chi.URLParam(r, "{{ $p.SourceName }}")
		if len(param) == 0 {
			{{- if $p.Required }}
			return fmt.Errorf("path parameter '{{ $p.SourceName}}' not specified")
			{{- else }}
			return nil
			{{- end }}
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param: "{{ $p.SourceName}}",
			Value: param,
			Style: uri.PathStyle{{ pascalMP $p.Style }},
			Explode: {{ if $p.Explode }}true{{ else }}false{{ end }},
		})

		{{ template "decode_param" $p.Schema }}
		{{- else if eq $p.In "Header" }}

		{{- if eq $p.Schema.Kind "array" }}
		param := r.Header.Values("{{ $p.SourceName }}")
		{{- else if eq $p.Schema.Kind "alias" }}
			{{- if eq $p.Schema.AliasTo.Kind "array" }}
			param := r.Header.Values("{{ $p.SourceName }}")
			{{- else }}
			param := r.Header.Get("{{ $p.SourceName }}")
			{{- end }}
		{{- else }}
		param := r.Header.Get("{{ $p.SourceName }}")
		{{- end }}

		if len(param) == 0 {
			{{- if $p.Required }}
			return fmt.Errorf("header parameter '{{ $p.SourceName}}' not specified")
			{{- else }}
			return nil
			{{- end }}
		}

		v, err := conv.{{ $p.Schema.FromString }}(param)
		if err != nil {
			return fmt.Errorf("parse {{ $p.In.Lower }} param '{{ $p.SourceName }}': %w", err)
		}
		{{- else if eq $p.In "Cookie" }}
		c, err := r.Cookie("{{ $p.SourceName }}")
		if err != nil {
			return fmt.Errorf("get cookie '{{ $p.SourceName }}': %w", err)
		}

		param := c.Value
		if len(param) == 0 {
			{{- if $p.Required }}
			return fmt.Errorf("cookie parameter '{{ $p.SourceName}}' not specified")
			{{- else }}
			return nil
			{{- end }}
		}

		v, err := conv.{{ $p.Schema.FromString }}(param)
		if err != nil {
			return fmt.Errorf("parse {{ $p.In.Lower }} param '{{ $p.SourceName }}': %w", err)
		}

		{{- else }}
		unsupported parameter location: {{ $p.In }}
		{{- end }}
		{{- /*Validation*/}}
		{{- if $p.Schema.NeedValidation }}
        if err := func() error {
            return nil
        }(); err != nil {
            return fmt.Errorf("validate {{ $p.In }} {{ $p.SourceName }}: %w", err)
        }
        {{- end }}
		{{- /*Validation*/}}

		params.{{ $p.Name }} = {{ $p.Schema.Type }}(v)
		return nil
	}(); err != nil {
		return params, err
	}
	{{- end }}
	return params, nil
}

{{- end }}{{/* Check parameters existence */}}
{{- end }}{{/* Range over methods */}}
{{ end }}

{{ define "decode_param" }}
	{{- /*gotype: github.com/ogen-go/ogen/internal/ast.Schema*/ -}}
	v, err := d.Decode{{ .EncodeFn }}()
	if err != nil {
		return err
	}
{{- end }}
