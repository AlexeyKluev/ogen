{{- define "validate" }}
    {{- /*gotype: github.com/ogen-go/ogen/internal/gen.Elem*/ -}}
    {{- $t := $.Type }}
    {{- $va := $t.Validators }}
    {{- if eq $t.NilSemantic "invalid" }}
        if {{ $.Var }} == nil {
            {{- /*TODO: continue validation instead return*/ -}}
            return fmt.Errorf("required, can't be nil")
        }
    {{- end }}
    {{- if $va.String.Set }}
        {{- $v := $va.String }}
        if err := (validate.String{
            MinLength:    {{ $v.MinLength }},
            MinLengthSet: {{ $v.MinLengthSet }},
            MaxLength:    {{ $v.MaxLength }},
            MaxLengthSet: {{ $v.MaxLengthSet }},
        }).Validate(string({{ $.Var }})); err != nil {
            return err
        }
    {{- end }}
    {{- if $va.Int.Set }}
        {{- $v := $va.Int }}
        if err := (validate.Int{
            MinSet:         {{ $v.MinSet }},
            Min:            {{ $v.Min }},
            MaxSet:         {{ $v.MaxSet }},
            Max:            {{ $v.Max }},
            MinExclusive:   {{ $v.MinExclusive }},
            MaxExclusive:   {{ $v.MaxExclusive }},
        }).Validate(int64({{ $.Var }})); err != nil {
            return err
        }
    {{- end }}
    return nil
{{- end }}

{{ define "validators" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $t := $.Types }}{{/*Range schemas*/}}
{{- if $t.NeedValidation }}{{/*Need validation*/}}
{{- if $t.IsStruct }}{{/*If struct*/}}
func (s *{{ $t.Name }}) Validate() error {
    var failures []validate.FieldError
    {{- range $f := $t.Fields }}{{/*Range fields*/}}
    {{- if $f.Type.NeedValidation }}
        if err := func() error {
            {{- template "validate" field_elem $f }}
        }(); err != nil {
            failures = append(failures, validate.FieldError{
                Name: "{{ $f.Spec.Name }}",
                Error: err,
            })
        }
    {{- end }}
    {{- end }}{{/*Range fields*/}}
    if len(failures) > 0 {
        return &validate.Error{Fields: failures}
    }
    return nil
}
{{- end }}
{{- end }}
{{- end }}{{/*Range schemas*/}}
{{ end }}
