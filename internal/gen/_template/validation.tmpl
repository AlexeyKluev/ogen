{{ define "validators" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $t := $.Types }}{{/*Range schemas*/}}
{{- if $t.NeedValidation }}{{/*Need validation*/}}
{{- if $t.IsStruct }}{{/*If struct*/}}
func (s *{{ $t.Name }}) Validate() error {
    var failures []validate.FieldError
    {{- range $f := $t.Fields }}{{/*Range fields*/}}
    {{- if $f.Type.NeedValidation }}
        {{- $fieldName := $f.Name }}
        {{- $validated := false }}
        {{- if $f.Type.GenericOf }}{{ $fieldName = sprintf "%s.Value" $fieldName }}{{ end }}
        {{- if eq $f.Type.NilSemantic "invalid" }}
        if s.{{ $fieldName }} == nil {
            {{- /*TODO: continue validation instead return*/ -}}
            return &validate.Error{
                Fields: append(failures, validate.FieldError{
                    Name: "{{ $f.Property }}",
                    Error: fmt.Errorf("required, can't be nil"),
                }),
            }
        }
        {{- end }}
        {{- if $f.Type.Validators.String.Set }}
        {{- $validated = true }}
        {
            // Validate "{{ $f.Property }}" property.
            validator := validate.String{
                MinLength:    {{ $f.Type.Validators.String.MinLength }},
                MinLengthSet: {{ $f.Type.Validators.String.MinLengthSet }},
                MaxLength:    {{ $f.Type.Validators.String.MaxLength }},
                MaxLengthSet: {{ $f.Type.Validators.String.MaxLengthSet }},
            }
            if err := validator.Validate(string(s.{{ $fieldName }})); err != nil {
                failures = append(failures, validate.FieldError{Name: "{{ $f.Property }}", Error: err})
            }
        }
        {{- end }}
        {{- if $f.Type.Validators.Int.Set }}
        {{- $validated = true }}
        {
            // Validate "{{ $f.Property }}" property.
            validator := validate.Int{
                MinSet:         {{ $f.Type.Validators.Int.MinSet }},
                Min:            {{ $f.Type.Validators.Int.Min }},
                MaxSet:         {{ $f.Type.Validators.Int.MaxSet }},
                Max:            {{ $f.Type.Validators.Int.Max }},
                MinExclusive:   {{ $f.Type.Validators.Int.MinExclusive }},
                MaxExclusive:   {{ $f.Type.Validators.Int.MaxExclusive }},
            }
            if err := validator.Validate(int64(s.{{ $fieldName }})); err != nil {
                failures = append(failures, validate.FieldError{Name: "{{ $f.Property }}", Error: err})
            }
        }
        {{- end }}
    {{- end }}
    {{- end }}{{/*Range fields*/}}
    if len(failures) > 0 {
        return &validate.Error{Fields: failures}
    }
    return nil
}
{{- end }}{{/*If struct*/}}
{{- end }}{{/*Need validation*/}}
{{- end }}{{/*Range schemas*/}}
{{ end }}
