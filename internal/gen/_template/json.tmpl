{{ define "json" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $s := $.Generics }}

// New returns new {{ $s.Name }} with value set to v.
func New{{ $s.Name }}(v {{ $s.Primitive }}) {{ $s.Name }} {
    return {{ $s.Name }} {
        Value: v,
{{- if $s.Optional }}
        Set: true,
{{- end }}
    }
}

// {{ $s.Name }} is{{ if $s.Optional }} optional{{ end }}{{ if $s.Nil }} nillable{{ end }} {{ $s.Primitive }}.
type {{ $s.Name }} struct {
    Value {{ $s.Primitive }}
{{- if $s.Optional }}
    Set   bool
{{- end }}
{{- if $s.Nil }}
    Nil   bool
{{- end }}
}

{{- if $s.Optional }}
// IsSet returns true if {{ $s.Primitive }} was set.
func (o {{ $s.Name }}) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *{{ $s.Name }}) Reset() {
    var v {{ $s.Primitive }}
    o.Value = v
    o.Set = false
{{- if $s.Nil }}
    o.Nil = false
{{- end }}
}
{{- end }}

// SetTo sets value to v.
func (o *{{ $s.Name }}) SetTo(v {{ $s.Primitive }}) {
{{- if $s.Optional }}
    o.Set = true
{{- end }}
{{- if $s.Nil }}
    o.Nil = false
{{- end }}
    o.Value = v
}

{{- if $s.Nil }}
// IsSet returns true if value is nil.
func (o {{ $s.Name }}) IsNil() bool { return o.Nil }
{{ end }}

// Get returns value and boolean that denotes whether value was set.
func (o {{ $s.Name }}) Get() (v {{ $s.Primitive }}, ok bool) {
    {{- if $s.Nil }}
    if o.Nil {
        return v, false
    }
    {{- end }}
    {{- if $s.Optional }}
    if !o.Set {
        return v, false
    }
    {{- end }}
    return o.Value, true
}

// WriteJSON writes json value of {{ $s.Primitive }} to json stream.
func (o {{ $s.Name }}) WriteJSON(js *jsoniter.Stream) {
{{- if $s.Nil }}
    if o.Nil {
        js.WriteNil()
        return
    }
{{- end }}
    js.{{ $s.JSONWrite }}(o.Value)
}

// ReadJSON writes json value of {{ $s.Primitive }} from json iterator.
func (o *{{ $s.Name }}) ReadJSON(i *jsoniter.Iterator) error {
    switch i.WhatIsNext() {
    case jsoniter.{{ $s.JSONType }}:
        {{- if $s.Optional }}
        o.Set = true
        {{- end }}
        {{- if $s.Nil }}
        o.Nil = false
        {{- end }}
        o.Value = i.{{ $s.JSONRead }}()
        return i.Error
{{- if $s.Nil }}
    case jsoniter.NilValue:
        var v {{ $s.Primitive }}
        o.Value = v
        {{- if $s.Optional }}
        o.Set = true
        {{- end }}
        o.Nil = true
        i.Skip()
        return i.Error
{{- end }}
    default:
        return fmt.Errorf("unexpected type %d while reading {{ $s.Name }}", i.WhatIsNext())
    }
    return nil
}

{{- end }}

{{- range $s := $.Schemas }}{{/*Range schemas*/}}
{{ if eq $s.Kind "struct" }}{{/*If struct*/}}
func (s {{ $s.Name }}) WriteJSON(js *jsoniter.Stream) {
    js.WriteObjectStart()
    {{- range $f := $s.Fields }}{{/*Range fields*/}}
    {{- if ne $f.Tag "-" }}
    {{- if $f.Type.Generic }}
        {{- if $f.Type.Optional }}
        if s.{{ $f.Name }}.Set {
            js.WriteObjectField("{{ $f.Tag }}")
            s.{{ $f.Name }}.WriteJSON(js)
        }
        {{- else }}
            js.WriteObjectField("{{ $f.Tag }}")``
            s.{{ $f.Name }}.WriteJSON(js)
        {{- end }}
    {{- else if eq $f.Type.Kind "primitive" }}
        {{- if ne $f.Type.JSONWrite "" }}
            js.WriteObjectField("{{ $f.Tag }}")
            js.{{ $f.Type.JSONWrite }}(s.{{ $f.Name }})
        {{- else }}
        // Unsupported primitive "{{ $f.Type.Primitive  }}" for field "{{ $f.Name }}".
        {{- end }}
    {{- else if eq $f.Type.Kind "struct" }}
        s.{{ $f.Name }}.WriteFieldJSON("{{ $f.Tag }}", js)
    {{- else }}
        // Unsupported kind "{{ $f.Type.Kind  }}" for field "{{ $f.Name }}".
    {{- end }}
    {{- end }}
    {{- end }}{{/*Range fields*/}}
    js.WriteObjectEnd()
}
{{- end }}{{/*If struct*/}}
{{- end }}{{/*Range schemas*/}}
{{ end }}
