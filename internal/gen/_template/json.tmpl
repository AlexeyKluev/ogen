{{ define "json" }}
{{- /*gotype: github.com/ogen-go/ogen/internal/gen.TemplateConfig*/ -}}

{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $s := $.Generics }}

// New returns new {{ $s.Name }} with value set to v.
func New{{ $s.Name }}(v {{ $s.Primitive }}) {{ $s.Name }} {
    return {{ $s.Name }} {
        Value: v,
{{- if $s.Optional }}
        Set: true,
{{- end }}
    }
}

// {{ $s.Name }} is{{ if $s.Optional }} optional{{ end }}{{ if $s.Nil }} nillable{{ end }} {{ $s.Primitive }}.
type {{ $s.Name }} struct {
    Value {{ $s.Primitive }}
{{- if $s.Optional }}
    Set   bool
{{- end }}
{{- if $s.Nil }}
    Nil   bool
{{- end }}
}

{{- if $s.Optional }}
// IsSet returns true if {{ $s.Primitive }} was set.
func (o {{ $s.Name }}) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *{{ $s.Name }}) Reset() {
    var v {{ $s.Primitive }}
    o.Value = v
    o.Set = false
{{- if $s.Nil }}
    o.Nil = false
{{- end }}
}
{{- end }}

// SetTo sets value to v.
func (o *{{ $s.Name }}) SetTo(v {{ $s.Primitive }}) {
{{- if $s.Optional }}
    o.Set = true
{{- end }}
{{- if $s.Nil }}
    o.Nil = false
{{- end }}
    o.Value = v
}

{{- if $s.Nil }}
// IsSet returns true if value is nil.
func (o {{ $s.Name }}) IsNil() bool { return o.Nil }
{{ end }}

// Get returns value and boolean that denotes whether value was set.
func (o {{ $s.Name }}) Get() (v {{ $s.Primitive }}, ok bool) {
    {{- if $s.Nil }}
    if o.Nil {
        return v, false
    }
    {{- end }}
    {{- if $s.Optional }}
    if !o.Set {
        return v, false
    }
    {{- end }}
    return o.Value, true
}

// WriteJSON writes json value of {{ $s.Primitive }} to json stream.
func (o {{ $s.Name }}) WriteJSON(js *json.Stream{{ if eq $s.Format "custom" }}, format func(*json.Stream, {{ $s.Primitive }}){{ end }}) {
{{- if $s.Nil }}
    if o.Nil {
        js.WriteNil()
        return
    }
{{- end }}
    {{- if eq $s.Format "custom" }}
    format(js, o.Value)
    {{- else if $s.JSONHelper }}
    json.Write{{ $s.JSONHelper }}(js, o.Value)
    {{- else if $s.JSONWrite }}
    js.{{ $s.JSONWrite }}(o.Value)
    {{- end }}
}

// ReadJSON writes json value of {{ $s.Primitive }} from json iterator.
func (o *{{ $s.Name }}) ReadJSON(i *json.Iterator{{ if eq $s.Format "custom" }}, format func(*json.Iterator) ({{ $s.Primitive }}, error){{ end }}) error {
    switch i.WhatIsNext() {
    case json.{{ $s.JSONType }}:
        {{- if $s.Optional }}
        o.Set = true
        {{- end }}
        {{- if $s.Nil }}
        o.Nil = false
        {{- end }}
        {{- if eq $s.Format "custom" }}
        v, err := format(i)
        if err != nil {
            return err
        }
        o.Value = v
        {{- else if $s.JSONHelper  }}
        v, err := json.Read{{ $s.JSONHelper }}(i)
        if err != nil {
            return err
        }
        o.Value = v
        {{- else if $s.JSONRead }}
        o.Value = i.{{ $s.JSONRead }}()
        {{- end }}
        return i.Error
{{- if $s.Nil }}
    case json.NilValue:
        var v {{ $s.Primitive }}
        o.Value = v
        {{- if $s.Optional }}
        o.Set = true
        {{- end }}
        o.Nil = true
        i.Skip()
        return i.Error
{{- end }}
    default:
        return fmt.Errorf("unexpected type %d while reading {{ $s.Name }}", i.WhatIsNext())
    }
    return nil
}

{{- end }}



{{- range $s := $.Schemas }}{{/*Range schemas*/}}
{{ if eq $s.Kind "struct" }}{{/*If struct*/}}
func (s {{ $s.Name }}) WriteJSON(js *json.Stream) {
    js.WriteObjectStart()
    var field json.FieldWriter
    _ = field
    {{- range $f := $s.Fields }}{{/*Range fields*/}}
    {{- if ne $f.Tag "-" }}
    {{- if $f.Type.Generic }}
        {{- if $f.Type.Optional }}
        if s.{{ $f.Name }}.Set {
            field.Write(js, "{{ $f.Tag }}")
            s.{{ $f.Name }}.WriteJSON(js{{ if $f.Type.JSONHelper }}, json.Write{{ $f.Type.JSONHelper }}{{ end }})
        }
        {{- else }}
            field.Write(js, "{{ $f.Tag }}")
            s.{{ $f.Name }}.WriteJSON(js{{ if $f.Type.JSONHelper }}, json.Write{{ $f.Type.JSONHelper }}{{ end }})
        {{- end }}
    {{- else if $f.Type.JSONHelper }}
        field.Write(js, "{{ $f.Tag }}")
        json.Write{{ $f.Type.JSONHelper }}(js, s.{{ $f.Name }})
    {{- else if eq $f.Type.Kind "primitive" }}
        field.Write(js, "{{ $f.Tag }}")
        {{- if $f.Type.JSONWrite }}
            js.{{ $f.Type.JSONWrite }}(s.{{ $f.Name }})
        {{- else }}
            // Unsupported primitive "{{ $f.Type.Primitive  }}" for field "{{ $f.Name }}".
            js.WriteNil()
        {{- end }}
    {{- else if eq $f.Type.Kind "struct" }}
        field.Write(js, "{{ $f.Tag }}")
        s.{{ $f.Name }}.WriteJSON("{{ $f.Tag }}", js)
    {{- else }}
        // Unsupported kind "{{ $f.Type.Kind  }}" for field "{{ $f.Name }}".
    {{- end }}
    {{- end }}
    {{- end }}{{/*Range fields*/}}
    js.WriteObjectEnd()
}

// WriteJSONTo writes {{ $s.Name }} json value to io.Writer.
func (s {{ $s.Name }}) WriteJSONTo(w io.Writer) error {
    js := json.NewStream(w)
    s.WriteJSON(js)
    return js.Flush()
}

// ReadJSONFrom reads {{ $s.Name }} json value from io.Reader.
func (s *{{ $s.Name }}) ReadJSONFrom(r io.Reader) error {
    i := json.NewIterator(json.ConfigDefault)
    i.Reset(r)
    return s.ReadJSON(i)
}

// ReadJSON reads {{ $s.Name }} from json stream.
func (s *{{ $s.Name }}) ReadJSON(i *json.Iterator) error {
    i.ReadObjectCB(func(i *json.Iterator, k string) bool {
        switch k {
{{- range $f := $s.Fields }}{{/*Range fields*/}}
{{- if ne $f.Tag "-" }}
    case "{{ $f.Tag }}":
    {{- if $f.Type.Optional }}
        s.{{ $f.Name }}.Reset()
    {{- end }}
    {{- if or ($f.Type.Generic) (eq $f.Type.Kind "struct") }}
        {{- if $f.Type.JSONHelper }}
            if err := s.{{ $f.Name }}.ReadJSON(i, json.Read{{ $f.Type.JSONHelper }}); err != nil {
                i.ReportError("Field {{ $f.Name }}", err.Error())
                return false
            }
            return true
        {{- else }}
        if err := s.{{ $f.Name }}.ReadJSON(i); err != nil {
            i.ReportError("Field {{ $f.Name }}", err.Error())
            return false
        }
        return true
        {{- end }}
    {{- else if $f.Type.JSONHelper }}
            v, err := json.Read{{ $f.Type.JSONHelper }}(i)
            if err != nil {
            i.ReportError("Field {{ $f.Name }}", err.Error())
            return false
            }
            s.{{ $f.Name }} = v
            return true
    {{- else if $f.Type.JSONRead }}
        // READER {{ $f.Type.Format  }} {{ $f.Type.JSONHelper }}
        s.{{ $f.Name }} = i.{{ $f.Type.JSONRead }}()
        return i.Error == nil
    {{- else }}
        // Unsupported kind "{{ $f.Type.Kind  }}" for field "{{ $f.Name }}".
        i.Skip()
        return true
    {{- end }}
{{- end }}
{{- end }}{{/*Range fields*/}}
        default:
            i.Skip()
            return true
        }
    })
    return i.Error
}
{{- end }}{{/*If struct*/}}
{{- end }}{{/*Range schemas*/}}

{{ end }}
