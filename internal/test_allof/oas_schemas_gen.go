// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/google/uuid"
)

// Ref: #/components/schemas/Location
type Location struct {
	Lat float64 "json:\"lat\""
	Lon float64 "json:\"lon\""
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NullableStringsOK is response for NullableStrings operation.
type NullableStringsOK struct{}

// ObjectsWithConflictingArrayPropertyOK is response for ObjectsWithConflictingArrayProperty operation.
type ObjectsWithConflictingArrayPropertyOK struct{}

// Merged schema.
type ObjectsWithConflictingArrayPropertyReq struct {
	Bar int "json:\"bar\""
	// Merged property.
	Foo []int "json:\"foo\""
}

// ObjectsWithConflictingPropertiesOK is response for ObjectsWithConflictingProperties operation.
type ObjectsWithConflictingPropertiesOK struct{}

// Merged schema.
type ObjectsWithConflictingPropertiesReq struct {
	Bar OptInt "json:\"bar\""
	// Merged property.
	Foo string "json:\"foo\""
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// ReferencedAllofOK is response for ReferencedAllof operation.
type ReferencedAllofOK struct{}

// Merged schema.
// Ref: #/components/schemas/Robot
type Robot struct {
	State    RobotState "json:\"state\""
	ID       uuid.UUID  "json:\"id\""
	Location Location   "json:\"location\""
}

type RobotState string

const (
	RobotStateOn  RobotState = "on"
	RobotStateOff RobotState = "off"
)

// SimpleIntegerOK is response for SimpleInteger operation.
type SimpleIntegerOK struct{}

// SimpleObjectsOK is response for SimpleObjects operation.
type SimpleObjectsOK struct{}

// Merged schema.
type SimpleObjectsReq struct {
	Foo OptString "json:\"foo\""
	Bar OptBool   "json:\"bar\""
}
