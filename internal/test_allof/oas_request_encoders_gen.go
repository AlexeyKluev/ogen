// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"mime/multipart"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func encodeNullableStringsRequest(
	req string,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeObjectsWithConflictingArrayPropertyRequest(
	req ObjectsWithConflictingArrayPropertyReq,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeObjectsWithConflictingPropertiesRequest(
	req ObjectsWithConflictingPropertiesReq,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeReferencedAllofRequest(
	req ReferencedAllofReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *ReferencedAllofApplicationJSON:
		e := jx.GetEncoder()
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), "application/json")
		return nil
	case *ReferencedAllofMultipartFormData:
		request := req

		q := uri.NewQueryEncoder()
		{
			// Encode "state" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "state",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(string(request.State)))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "id" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "id",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.UUIDToString(request.ID))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "location" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "location",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return request.Location.EncodeURI(e)
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		body, contentType := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetBody(r, body, contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}
func encodeReferencedAllofOptionalRequest(
	req ReferencedAllofOptionalReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *ReferencedAllofOptionalApplicationJSON:
		if !req.Set {
			// Keep request with empty body if value is not set.
			return nil
		}
		e := jx.GetEncoder()
		{
			req.Encode(e)
		}
		encoded := e.Bytes()
		ht.SetBody(r, bytes.NewReader(encoded), "application/json")
		return nil
	case *ReferencedAllofOptionalMultipartFormData:
		if !req.Set {
			// Keep request with empty body if value is not set.
			return nil
		}
		request := req.Value

		q := uri.NewQueryEncoder()
		{
			// Encode "state" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "state",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(string(request.State)))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "id" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "id",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.UUIDToString(request.ID))
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		{
			// Encode "location" form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    "location",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				return request.Location.EncodeURI(e)
			}); err != nil {
				return errors.Wrap(err, "encode query")
			}
		}
		body, contentType := ht.CreateMultipartBody(func(w *multipart.Writer) error {
			if err := q.WriteMultipart(w); err != nil {
				return errors.Wrap(err, "write multipart")
			}
			return nil
		})
		ht.SetBody(r, body, contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}
func encodeSimpleIntegerRequest(
	req int,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		e.Int(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSimpleObjectsRequest(
	req SimpleObjectsReq,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
