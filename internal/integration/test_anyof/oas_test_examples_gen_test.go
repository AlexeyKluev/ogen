// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestAnyOfIntegerNumberString_EncodeDecode(t *testing.T) {
	var typ AnyOfIntegerNumberString
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AnyOfIntegerNumberString
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestIntegerNumber_EncodeDecode(t *testing.T) {
	var typ IntegerNumber
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 IntegerNumber
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestJaegerAnyOf_EncodeDecode(t *testing.T) {
	var typ JaegerAnyOf
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 JaegerAnyOf
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestJaegerAnyOfSizeLimit_EncodeDecode(t *testing.T) {
	var typ JaegerAnyOfSizeLimit
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 JaegerAnyOfSizeLimit
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOneUUID_EncodeDecode(t *testing.T) {
	var typ OneUUID
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OneUUID
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOneUUIDSubscriptionID_EncodeDecode(t *testing.T) {
	var typ OneUUIDSubscriptionID
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OneUUIDSubscriptionID
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionUUID_EncodeDecode(t *testing.T) {
	var typ SubscriptionUUID
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionUUID
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUUIDv4_EncodeDecode(t *testing.T) {
	var typ UUIDv4
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UUIDv4
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
