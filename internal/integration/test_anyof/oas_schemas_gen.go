// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/google/uuid"
)

// Ref: #/components/schemas/JaegerAnyOf
type JaegerAnyOf struct {
	Medium    string               `json:"medium"`
	SizeLimit JaegerAnyOfSizeLimit `json:"sizeLimit"`
}

// GetMedium returns the value of Medium.
func (s JaegerAnyOf) GetMedium() string {
	return s.Medium
}

// GetSizeLimit returns the value of SizeLimit.
func (s JaegerAnyOf) GetSizeLimit() JaegerAnyOfSizeLimit {
	return s.SizeLimit
}

// SetMedium sets the value of Medium.
func (s *JaegerAnyOf) SetMedium(val string) {
	s.Medium = val
}

// SetSizeLimit sets the value of SizeLimit.
func (s *JaegerAnyOf) SetSizeLimit(val JaegerAnyOfSizeLimit) {
	s.SizeLimit = val
}

// JaegerAnyOfSizeLimit represents sum type.
type JaegerAnyOfSizeLimit struct {
	Type   JaegerAnyOfSizeLimitType // switch on this field
	Int    int
	String string
}

// JaegerAnyOfSizeLimitType is oneOf type of JaegerAnyOfSizeLimit.
type JaegerAnyOfSizeLimitType string

// Possible values for JaegerAnyOfSizeLimitType.
const (
	IntJaegerAnyOfSizeLimit    JaegerAnyOfSizeLimitType = "int"
	StringJaegerAnyOfSizeLimit JaegerAnyOfSizeLimitType = "string"
)

// IsInt reports whether JaegerAnyOfSizeLimit is int.
func (s JaegerAnyOfSizeLimit) IsInt() bool { return s.Type == IntJaegerAnyOfSizeLimit }

// IsString reports whether JaegerAnyOfSizeLimit is string.
func (s JaegerAnyOfSizeLimit) IsString() bool { return s.Type == StringJaegerAnyOfSizeLimit }

// SetInt sets JaegerAnyOfSizeLimit to int.
func (s *JaegerAnyOfSizeLimit) SetInt(v int) {
	s.Type = IntJaegerAnyOfSizeLimit
	s.Int = v
}

// GetInt returns int and true boolean if JaegerAnyOfSizeLimit is int.
func (s JaegerAnyOfSizeLimit) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntJaegerAnyOfSizeLimit returns new JaegerAnyOfSizeLimit from int.
func NewIntJaegerAnyOfSizeLimit(v int) JaegerAnyOfSizeLimit {
	var s JaegerAnyOfSizeLimit
	s.SetInt(v)
	return s
}

// SetString sets JaegerAnyOfSizeLimit to string.
func (s *JaegerAnyOfSizeLimit) SetString(v string) {
	s.Type = StringJaegerAnyOfSizeLimit
	s.String = v
}

// GetString returns string and true boolean if JaegerAnyOfSizeLimit is string.
func (s JaegerAnyOfSizeLimit) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringJaegerAnyOfSizeLimit returns new JaegerAnyOfSizeLimit from string.
func NewStringJaegerAnyOfSizeLimit(v string) JaegerAnyOfSizeLimit {
	var s JaegerAnyOfSizeLimit
	s.SetString(v)
	return s
}

// Ref: #/components/schemas/OneUUID
type OneUUID struct {
	Owner          string                `json:"owner"`
	Version        int32                 `json:"version"`
	SubscriptionID OneUUIDSubscriptionID `json:"subscription_id"`
}

// GetOwner returns the value of Owner.
func (s OneUUID) GetOwner() string {
	return s.Owner
}

// GetVersion returns the value of Version.
func (s OneUUID) GetVersion() int32 {
	return s.Version
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s OneUUID) GetSubscriptionID() OneUUIDSubscriptionID {
	return s.SubscriptionID
}

// SetOwner sets the value of Owner.
func (s *OneUUID) SetOwner(val string) {
	s.Owner = val
}

// SetVersion sets the value of Version.
func (s *OneUUID) SetVersion(val int32) {
	s.Version = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *OneUUID) SetSubscriptionID(val OneUUIDSubscriptionID) {
	s.SubscriptionID = val
}

// OneUUIDSubscriptionID represents sum type.
type OneUUIDSubscriptionID struct {
	Type             OneUUIDSubscriptionIDType // switch on this field
	SubscriptionUUID SubscriptionUUID
}

// OneUUIDSubscriptionIDType is oneOf type of OneUUIDSubscriptionID.
type OneUUIDSubscriptionIDType string

// Possible values for OneUUIDSubscriptionIDType.
const (
	SubscriptionUUIDOneUUIDSubscriptionID OneUUIDSubscriptionIDType = "SubscriptionUUID"
)

// IsSubscriptionUUID reports whether OneUUIDSubscriptionID is SubscriptionUUID.
func (s OneUUIDSubscriptionID) IsSubscriptionUUID() bool {
	return s.Type == SubscriptionUUIDOneUUIDSubscriptionID
}

// SetSubscriptionUUID sets OneUUIDSubscriptionID to SubscriptionUUID.
func (s *OneUUIDSubscriptionID) SetSubscriptionUUID(v SubscriptionUUID) {
	s.Type = SubscriptionUUIDOneUUIDSubscriptionID
	s.SubscriptionUUID = v
}

// GetSubscriptionUUID returns SubscriptionUUID and true boolean if OneUUIDSubscriptionID is SubscriptionUUID.
func (s OneUUIDSubscriptionID) GetSubscriptionUUID() (v SubscriptionUUID, ok bool) {
	if !s.IsSubscriptionUUID() {
		return v, false
	}
	return s.SubscriptionUUID, true
}

// NewSubscriptionUUIDOneUUIDSubscriptionID returns new OneUUIDSubscriptionID from SubscriptionUUID.
func NewSubscriptionUUIDOneUUIDSubscriptionID(v SubscriptionUUID) OneUUIDSubscriptionID {
	var s OneUUIDSubscriptionID
	s.SetSubscriptionUUID(v)
	return s
}

// Ref: #/components/schemas/SubscriptionUUID
// SubscriptionUUID represents sum type.
type SubscriptionUUID struct {
	Type   SubscriptionUUIDType // switch on this field
	UUIDv4 UUIDv4
}

// SubscriptionUUIDType is oneOf type of SubscriptionUUID.
type SubscriptionUUIDType string

// Possible values for SubscriptionUUIDType.
const (
	UUIDv4SubscriptionUUID SubscriptionUUIDType = "UUIDv4"
)

// IsUUIDv4 reports whether SubscriptionUUID is UUIDv4.
func (s SubscriptionUUID) IsUUIDv4() bool { return s.Type == UUIDv4SubscriptionUUID }

// SetUUIDv4 sets SubscriptionUUID to UUIDv4.
func (s *SubscriptionUUID) SetUUIDv4(v UUIDv4) {
	s.Type = UUIDv4SubscriptionUUID
	s.UUIDv4 = v
}

// GetUUIDv4 returns UUIDv4 and true boolean if SubscriptionUUID is UUIDv4.
func (s SubscriptionUUID) GetUUIDv4() (v UUIDv4, ok bool) {
	if !s.IsUUIDv4() {
		return v, false
	}
	return s.UUIDv4, true
}

// NewUUIDv4SubscriptionUUID returns new SubscriptionUUID from UUIDv4.
func NewUUIDv4SubscriptionUUID(v UUIDv4) SubscriptionUUID {
	var s SubscriptionUUID
	s.SetUUIDv4(v)
	return s
}

type UUIDv4 uuid.UUID
