// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// OnlyForm implements onlyForm operation.
	//
	// POST /onlyForm
	OnlyForm(ctx context.Context, req *OnlyFormReq) error
	// OnlyMultipartFile implements onlyMultipartFile operation.
	//
	// POST /onlyMultipartFile
	OnlyMultipartFile(ctx context.Context, req *OnlyMultipartFileReqForm) error
	// OnlyMultipartForm implements onlyMultipartForm operation.
	//
	// POST /onlyMultipartForm
	OnlyMultipartForm(ctx context.Context, req *OnlyMultipartFormReq) error
	// TestFormURLEncoded implements testFormURLEncoded operation.
	//
	// POST /testFormURLEncoded
	TestFormURLEncoded(ctx context.Context, req *TestForm) error
	// TestMultipart implements testMultipart operation.
	//
	// POST /testMultipart
	TestMultipart(ctx context.Context, req *TestForm) error
	// TestMultipartUpload implements testMultipartUpload operation.
	//
	// POST /testMultipartUpload
	TestMultipartUpload(ctx context.Context, req *TestMultipartUploadReqForm) (*TestMultipartUploadOK, error)
	// TestShareFormSchema implements testShareFormSchema operation.
	//
	// POST /testShareFormSchema
	TestShareFormSchema(ctx context.Context, req TestShareFormSchemaReq) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
