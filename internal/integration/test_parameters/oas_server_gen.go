// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ComplicatedParameterNameGet implements GET /complicatedParameterName operation.
	//
	// GET /complicatedParameterName
	ComplicatedParameterNameGet(ctx context.Context, params ComplicatedParameterNameGetParams) (*ComplicatedParameterNameGetOK, error)
	// ContentQueryParameter implements contentQueryParameter operation.
	//
	// GET /contentQueryParameter
	ContentQueryParameter(ctx context.Context, params ContentQueryParameterParams) (string, error)
	// HeaderParameter implements headerParameter operation.
	//
	// Test for header param.
	//
	// GET /headerParameter
	HeaderParameter(ctx context.Context, params HeaderParameterParams) (*Hash, error)
	// ObjectQueryParameter implements objectQueryParameter operation.
	//
	// GET /objectQueryParameter
	ObjectQueryParameter(ctx context.Context, params ObjectQueryParameterParams) (*ObjectQueryParameterOK, error)
	// PathObjectParameter implements pathObjectParameter operation.
	//
	// GET /pathObjectParameter/{param}
	PathObjectParameter(ctx context.Context, params PathObjectParameterParams) (*User, error)
	// SameName implements sameName operation.
	//
	// Parameter with different location, but the same name.
	//
	// GET /same_name/{path}
	SameName(ctx context.Context, params SameNameParams) (*SameNameOK, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
