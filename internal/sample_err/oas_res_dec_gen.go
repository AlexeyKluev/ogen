// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/big"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/metric/instrument/syncint64"
	"go.opentelemetry.io/otel/metric/nonrecording"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = big.Rat{}
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = attribute.KeyValue{}
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.MeterConfig{}
	_ = syncint64.Counter(nil)
	_ = nonrecording.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

func decodeDataCreateResponse(resp *http.Response, span trace.Span) (res Data, err error) {
	switch resp.StatusCode {
	case 200:
		switch ct := resp.Header.Get("Content-Type"); ct {
		case "application/json":
			buf := getBuf()
			defer putBuf(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			d := jx.GetDecoder()
			defer jx.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response Data
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		defRes, err := func() (res ErrorStatusCode, err error) {
			switch ct := resp.Header.Get("Content-Type"); ct {
			case "application/json":
				buf := getBuf()
				defer putBuf(buf)
				if _, err := io.Copy(buf, resp.Body); err != nil {
					return res, err
				}

				d := jx.GetDecoder()
				defer jx.PutDecoder(d)
				d.ResetBytes(buf.Bytes())

				var response Error
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, err
				}

				return ErrorStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrap(err, "default")
		}
		return res, errors.Wrap(&defRes, "error")
	}
}

func decodeDataGetResponse(resp *http.Response, span trace.Span) (res Data, err error) {
	switch resp.StatusCode {
	case 200:
		switch ct := resp.Header.Get("Content-Type"); ct {
		case "application/json":
			buf := getBuf()
			defer putBuf(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			d := jx.GetDecoder()
			defer jx.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response Data
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		defRes, err := func() (res ErrorStatusCode, err error) {
			switch ct := resp.Header.Get("Content-Type"); ct {
			case "application/json":
				buf := getBuf()
				defer putBuf(buf)
				if _, err := io.Copy(buf, resp.Body); err != nil {
					return res, err
				}

				d := jx.GetDecoder()
				defer jx.PutDecoder(d)
				d.ResetBytes(buf.Bytes())

				var response Error
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, err
				}

				return ErrorStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrap(err, "default")
		}
		return res, errors.Wrap(&defRes, "error")
	}
}
