// Code generated by ogen, DO NOT EDIT.

package techempower

import (
	"context"
	"net/http"
)

// MiddlewareRequest is request context type for middleware.
type MiddlewareRequest struct {
	// Context is request context.
	Context context.Context
	// OperationName is the ogen operation name. It is guaranteed to be unique and not empty.
	OperationName string
	// OperationID is the spec operation ID, if any.
	OperationID string
	// Body is the operation request body. May be nil, if the operation has no body.
	Body any
	// Params is the operation parameters.
	Params map[string]any
	// Raw is the raw http request.
	Raw *http.Request
}

// MiddlewareResponse is response type for middleware.
type MiddlewareResponse struct {
	Type any
}

// Middleware is middleware type.
type Middleware func(req MiddlewareRequest, next func(req MiddlewareRequest) (MiddlewareResponse, error)) (MiddlewareResponse, error)

func hookMiddleware[Request, Params, Response any](
	m Middleware,
	params Params,
	req MiddlewareRequest,
	cb func(context.Context, Params, Request) (Response, error),
) (r Response, err error) {
	next := func(req MiddlewareRequest) (MiddlewareResponse, error) {
		request := req.Body.(Request)
		response, err := cb(req.Context, params, request)
		if err != nil {
			return MiddlewareResponse{}, err
		}
		return MiddlewareResponse{Type: response}, nil
	}
	resp, err := m(req, next)
	if err != nil {
		return r, err
	}
	return resp.Type.(Response), nil
}

func chainMiddlewares(m ...Middleware) Middleware {
	if len(m) == 0 {
		return func(
			req MiddlewareRequest,
			next func(req MiddlewareRequest) (MiddlewareResponse, error),
		) (MiddlewareResponse, error) {
			return next(req)
		}
	}
	return func(req MiddlewareRequest, next func(req MiddlewareRequest) (MiddlewareResponse, error)) (MiddlewareResponse, error) {
		return m[0](req, func(req MiddlewareRequest) (MiddlewareResponse, error) {
			return chainMiddlewares(m[1:]...)(req, next)
		})
	}
}
