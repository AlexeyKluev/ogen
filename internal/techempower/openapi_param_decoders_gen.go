// Code generated by ogen, DO NOT EDIT.

package techempower

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	jsoniter "github.com/json-iterator/go"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/encoding/json"
	"github.com/ogen-go/ogen/types"
	"github.com/ogen-go/ogen/uri"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = math.Mod
	_ = types.Date{}
	_ = jsoniter.Config{}
)

func decodeCachingParams(r *http.Request) (CachingParams, error) {
	var params CachingParams
	// Decode param 'count' located in 'Query'.
	if err := func() error {
		values, ok := r.URL.Query()["count"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt64()
		if err != nil {
			return err
		}

		params.Count = int64(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeQueriesParams(r *http.Request) (QueriesParams, error) {
	var params QueriesParams
	// Decode param 'queries' located in 'Query'.
	if err := func() error {
		values, ok := r.URL.Query()["queries"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt64()
		if err != nil {
			return err
		}

		params.Queries = int64(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUpdatesParams(r *http.Request) (UpdatesParams, error) {
	var params UpdatesParams
	// Decode param 'queries' located in 'Query'.
	if err := func() error {
		values, ok := r.URL.Query()["queries"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt64()
		if err != nil {
			return err
		}

		params.Queries = int64(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}
