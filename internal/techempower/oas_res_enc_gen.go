// Code generated by ogen, DO NOT EDIT.

package techempower

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func encodeCachingResponse(response WorldObjects, rw http.ResponseWriter, span trace.Span) error {
	rw.Header().Set("Content-Type", "application/json")
	rw.WriteHeader(200)
	w := json.GetWriter()
	w.Reset(rw)
	defer json.PutWriter(w)
	more := json.NewMore(w)
	defer more.Reset()
	// Unsupported kind "alias".
	if err := w.Flush(); err != nil {
		return err
	}
	return nil
}

func encodeDBResponse(response WorldObject, rw http.ResponseWriter, span trace.Span) error {
	rw.Header().Set("Content-Type", "application/json")
	rw.WriteHeader(200)
	w := json.GetWriter()
	w.Reset(rw)
	defer json.PutWriter(w)
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	response.WriteJSON(w)
	if err := w.Flush(); err != nil {
		return err
	}
	return nil
}

func encodeJSONResponse(response HelloWorld, rw http.ResponseWriter, span trace.Span) error {
	rw.Header().Set("Content-Type", "application/json")
	rw.WriteHeader(200)
	w := json.GetWriter()
	w.Reset(rw)
	defer json.PutWriter(w)
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	response.WriteJSON(w)
	if err := w.Flush(); err != nil {
		return err
	}
	return nil
}

func encodeQueriesResponse(response WorldObjects, rw http.ResponseWriter, span trace.Span) error {
	rw.Header().Set("Content-Type", "application/json")
	rw.WriteHeader(200)
	w := json.GetWriter()
	w.Reset(rw)
	defer json.PutWriter(w)
	more := json.NewMore(w)
	defer more.Reset()
	// Unsupported kind "alias".
	if err := w.Flush(); err != nil {
		return err
	}
	return nil
}

func encodeUpdatesResponse(response WorldObjects, rw http.ResponseWriter, span trace.Span) error {
	rw.Header().Set("Content-Type", "application/json")
	rw.WriteHeader(200)
	w := json.GetWriter()
	w.Reset(rw)
	defer json.PutWriter(w)
	more := json.NewMore(w)
	defer more.Reset()
	// Unsupported kind "alias".
	if err := w.Flush(); err != nil {
		return err
	}
	return nil
}
