// Code generated by ogen, DO NOT EDIT.

package techempower

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

// WriteJSON implements json.Marshaler.
func (s HelloWorld) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("message")
	w.Str(s.Message)
	w.ObjEnd()
}

// ReadJSON reads HelloWorld from json stream.
func (s *HelloWorld) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HelloWorld to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "message":
			v, err := r.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s WorldObject) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("id")
	w.Int64(s.ID)
	more.More()
	w.ObjField("randomNumber")
	w.Int64(s.RandomNumber)
	w.ObjEnd()
}

// ReadJSON reads WorldObject from json stream.
func (s *WorldObject) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WorldObject to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "id":
			v, err := r.Int64()
			s.ID = int64(v)
			if err != nil {
				return err
			}
		case "randomNumber":
			v, err := r.Int64()
			s.RandomNumber = int64(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

func (WorldObjects) WriteJSON(w *json.Writer)      {}
func (WorldObjects) ReadJSON(r *json.Reader) error { return nil }
