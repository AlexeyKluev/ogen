// Code generated by ogen, DO NOT EDIT.

package techempower

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
)

type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

type config struct {
	TracerProvider trace.TracerProvider
	Tracer         trace.Tracer
	Client         HTTPClient
}

const defaultTracerName = "github.com/ogen-go/ogen/otelogen"

func newConfig(opts ...Option) config {
	cfg := config{
		TracerProvider: otel.GetTracerProvider(),
		Client: &http.Client{
			Timeout: time.Second * 15,
		},
	}
	for _, opt := range opts {
		opt.apply(&cfg)
	}
	cfg.Tracer = cfg.TracerProvider.Tracer(
		defaultTracerName,
		trace.WithInstrumentationVersion(otelogen.SemVersion()),
	)
	return cfg
}

type Option interface {
	apply(*config)
}

type optionFunc func(*config)

func (o optionFunc) apply(c *config) {
	o(c)
}

// WithTracerProvider specifies a tracer provider to use for creating a tracer.
// If none is specified, the global provider is used.
func WithTracerProvider(provider trace.TracerProvider) Option {
	return optionFunc(func(cfg *config) {
		if provider != nil {
			cfg.TracerProvider = provider
		}
	})
}

func WithHTTPClient(client HTTPClient) Option {
	return optionFunc(func(cfg *config) {
		if client != nil {
			cfg.Client = client
		}
	})
}

type Client struct {
	serverURL *url.URL
	cfg       config
}

func NewClient(serverURL string, opts ...Option) *Client {
	u, err := url.Parse(serverURL)
	if err != nil {
		panic(err) // TODO: fix
	}
	return &Client{
		cfg:       newConfig(opts...),
		serverURL: u,
	}
}

func (c *Client) Caching(ctx context.Context, params CachingParams) (res WorldObjects, err error) {
	ctx, span := c.cfg.Tracer.Start(ctx, `Caching`,
		trace.WithAttributes(otelogen.OperationID(`Caching`)),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	u := uri.Clone(c.serverURL)
	u.Path += "/cached-worlds"

	q := u.Query()
	{
		// Encode "count" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Style:   uri.QueryStyleForm,
			Explode: true,
		})
		v := params.Count
		param := e.EncodeInt64(v)
		q.Set("count", param)
	}
	u.RawQuery = q.Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		span.End()
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeCachingResponse(resp)
	if err != nil {
		span.End()
		return res, fmt.Errorf("decode response: %w", err)
	}

	span.End()
	return result, nil
}

func (c *Client) DB(ctx context.Context) (res WorldObject, err error) {
	ctx, span := c.cfg.Tracer.Start(ctx, `DB`,
		trace.WithAttributes(otelogen.OperationID(`DB`)),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	u := uri.Clone(c.serverURL)
	u.Path += "/db"

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		span.End()
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeDBResponse(resp)
	if err != nil {
		span.End()
		return res, fmt.Errorf("decode response: %w", err)
	}

	span.End()
	return result, nil
}

func (c *Client) JSON(ctx context.Context) (res HelloWorld, err error) {
	ctx, span := c.cfg.Tracer.Start(ctx, `JSON`,
		trace.WithAttributes(otelogen.OperationID(`json`)),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	u := uri.Clone(c.serverURL)
	u.Path += "/json"

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		span.End()
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeJSONResponse(resp)
	if err != nil {
		span.End()
		return res, fmt.Errorf("decode response: %w", err)
	}

	span.End()
	return result, nil
}

func (c *Client) Queries(ctx context.Context, params QueriesParams) (res WorldObjects, err error) {
	ctx, span := c.cfg.Tracer.Start(ctx, `Queries`,
		trace.WithAttributes(otelogen.OperationID(`Queries`)),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	u := uri.Clone(c.serverURL)
	u.Path += "/queries"

	q := u.Query()
	{
		// Encode "queries" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Style:   uri.QueryStyleForm,
			Explode: true,
		})
		v := params.Queries
		param := e.EncodeInt64(v)
		q.Set("queries", param)
	}
	u.RawQuery = q.Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		span.End()
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeQueriesResponse(resp)
	if err != nil {
		span.End()
		return res, fmt.Errorf("decode response: %w", err)
	}

	span.End()
	return result, nil
}

func (c *Client) Updates(ctx context.Context, params UpdatesParams) (res WorldObjects, err error) {
	ctx, span := c.cfg.Tracer.Start(ctx, `Updates`,
		trace.WithAttributes(otelogen.OperationID(`Updates`)),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	u := uri.Clone(c.serverURL)
	u.Path += "/updates"

	q := u.Query()
	{
		// Encode "queries" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Style:   uri.QueryStyleForm,
			Explode: true,
		})
		v := params.Queries
		param := e.EncodeInt64(v)
		q.Set("queries", param)
	}
	u.RawQuery = q.Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		span.End()
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeUpdatesResponse(resp)
	if err != nil {
		span.End()
		return res, fmt.Errorf("decode response: %w", err)
	}

	span.End()
	return result, nil
}
