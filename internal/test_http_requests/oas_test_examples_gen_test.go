// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestAllRequestBodiesApplicationJSON_EncodeDecode(t *testing.T) {
	var typ AllRequestBodiesApplicationJSON
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AllRequestBodiesApplicationJSON
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAllRequestBodiesApplicationXWwwFormUrlencoded_EncodeDecode(t *testing.T) {
	var typ AllRequestBodiesApplicationXWwwFormUrlencoded
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AllRequestBodiesApplicationXWwwFormUrlencoded
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAllRequestBodiesMultipartFormData_EncodeDecode(t *testing.T) {
	var typ AllRequestBodiesMultipartFormData
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AllRequestBodiesMultipartFormData
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAllRequestBodiesOptionalApplicationJSON_EncodeDecode(t *testing.T) {
	var typ AllRequestBodiesOptionalApplicationJSON
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AllRequestBodiesOptionalApplicationJSON
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAllRequestBodiesOptionalApplicationXWwwFormUrlencoded_EncodeDecode(t *testing.T) {
	var typ AllRequestBodiesOptionalApplicationXWwwFormUrlencoded
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AllRequestBodiesOptionalApplicationXWwwFormUrlencoded
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAllRequestBodiesOptionalMultipartFormData_EncodeDecode(t *testing.T) {
	var typ AllRequestBodiesOptionalMultipartFormData
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AllRequestBodiesOptionalMultipartFormData
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSimpleObject_EncodeDecode(t *testing.T) {
	var typ SimpleObject
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SimpleObject
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
