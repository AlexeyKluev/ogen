// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"mime"
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/multierr"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func (s *Server) decodeAllRequestBodiesRequest(r *http.Request, span trace.Span) (
	req AllRequestBodiesReq,
	close func() error,
	rerr error,
) {
	var closers []io.Closer
	close = func() error {
		var merr error
		for _, c := range closers {
			merr = multierr.Append(merr, c.Close())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()

	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch ct {
	case "application/json":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}

		var request AllRequestBodiesApplicationJSON
		buf, err := io.ReadAll(r.Body)
		if err != nil {
			return req, close, err
		}

		if len(buf) == 0 {
			return req, close, validate.ErrBodyRequired
		}

		d := jx.DecodeBytes(buf)
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, close, errors.Wrap(err, "decode \"application/json\"")
		}
		return &request, close, nil
	case "application/octet-stream":
		request := AllRequestBodiesReqApplicationOctetStream{Data: r.Body}
		return &request, close, nil
	case "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		if err := r.ParseForm(); err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}
		form := r.PostForm

		var request AllRequestBodiesApplicationXWwwFormUrlencoded
		{
			var unwrapped SimpleObject
			q := uri.NewQueryDecoder(form)
			{
				cfg := uri.QueryParameterDecodingConfig{
					Name:    "name",
					Style:   uri.QueryStyleForm,
					Explode: true,
				}
				if err := q.HasParam(cfg); err == nil {
					if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						unwrapped.Name = c
						return nil
					}); err != nil {
						return req, close, errors.Wrap(err, "decode \"name\"")
					}
				} else {
					return req, close, errors.Wrap(err, "query")
				}
			}
			{
				cfg := uri.QueryParameterDecodingConfig{
					Name:    "age",
					Style:   uri.QueryStyleForm,
					Explode: true,
				}
				if err := q.HasParam(cfg); err == nil {
					if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
						var unwrappedDotAgeVal int
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToInt(val)
							if err != nil {
								return err
							}

							unwrappedDotAgeVal = c
							return nil
						}(); err != nil {
							return err
						}
						unwrapped.Age.SetTo(unwrappedDotAgeVal)
						return nil
					}); err != nil {
						return req, close, errors.Wrap(err, "decode \"age\"")
					}
				}
			}
			request = AllRequestBodiesApplicationXWwwFormUrlencoded(unwrapped)
		}
		return &request, close, nil
	case "multipart/form-data":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		if err := r.ParseMultipartForm(s.cfg.MaxMultipartMemory); err != nil {
			return req, close, errors.Wrap(err, "parse multipart form")
		}
		form := url.Values(r.MultipartForm.Value)

		var request AllRequestBodiesMultipartFormData
		{
			var unwrapped SimpleObject
			q := uri.NewQueryDecoder(form)
			{
				cfg := uri.QueryParameterDecodingConfig{
					Name:    "name",
					Style:   uri.QueryStyleForm,
					Explode: true,
				}
				if err := q.HasParam(cfg); err == nil {
					if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						unwrapped.Name = c
						return nil
					}); err != nil {
						return req, close, errors.Wrap(err, "decode \"name\"")
					}
				} else {
					return req, close, errors.Wrap(err, "query")
				}
			}
			{
				cfg := uri.QueryParameterDecodingConfig{
					Name:    "age",
					Style:   uri.QueryStyleForm,
					Explode: true,
				}
				if err := q.HasParam(cfg); err == nil {
					if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
						var unwrappedDotAgeVal int
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToInt(val)
							if err != nil {
								return err
							}

							unwrappedDotAgeVal = c
							return nil
						}(); err != nil {
							return err
						}
						unwrapped.Age.SetTo(unwrappedDotAgeVal)
						return nil
					}); err != nil {
						return req, close, errors.Wrap(err, "decode \"age\"")
					}
				}
			}
			request = AllRequestBodiesMultipartFormData(unwrapped)
		}
		return &request, close, nil
	case "text/plain":
		request := AllRequestBodiesReqTextPlain{Data: r.Body}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeAllRequestBodiesOptionalRequest(r *http.Request, span trace.Span) (
	req AllRequestBodiesOptionalReq,
	close func() error,
	rerr error,
) {
	var closers []io.Closer
	close = func() error {
		var merr error
		for _, c := range closers {
			merr = multierr.Append(merr, c.Close())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	if _, ok := r.Header["Content-Type"]; !ok && r.ContentLength == 0 {
		return req, close, nil
	}

	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch ct {
	case "application/json":
		if r.ContentLength == 0 {
			return req, close, nil
		}

		var request AllRequestBodiesOptionalApplicationJSON
		buf, err := io.ReadAll(r.Body)
		if err != nil {
			return req, close, err
		}

		if len(buf) == 0 {
			return req, close, nil
		}

		d := jx.DecodeBytes(buf)
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, close, errors.Wrap(err, "decode \"application/json\"")
		}
		return &request, close, nil
	case "application/octet-stream":
		request := AllRequestBodiesOptionalReqApplicationOctetStream{Data: r.Body}
		return &request, close, nil
	case "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, nil
		}
		if err := r.ParseForm(); err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}
		form := r.PostForm

		var request AllRequestBodiesOptionalApplicationXWwwFormUrlencoded
		{
			var unwrapped OptSimpleObject
			{
				var optForm SimpleObject
				q := uri.NewQueryDecoder(form)
				{
					cfg := uri.QueryParameterDecodingConfig{
						Name:    "name",
						Style:   uri.QueryStyleForm,
						Explode: true,
					}
					if err := q.HasParam(cfg); err == nil {
						if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							optForm.Name = c
							return nil
						}); err != nil {
							return req, close, errors.Wrap(err, "decode \"name\"")
						}
					} else {
						return req, close, errors.Wrap(err, "query")
					}
				}
				{
					cfg := uri.QueryParameterDecodingConfig{
						Name:    "age",
						Style:   uri.QueryStyleForm,
						Explode: true,
					}
					if err := q.HasParam(cfg); err == nil {
						if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
							var optFormDotAgeVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								optFormDotAgeVal = c
								return nil
							}(); err != nil {
								return err
							}
							optForm.Age.SetTo(optFormDotAgeVal)
							return nil
						}); err != nil {
							return req, close, errors.Wrap(err, "decode \"age\"")
						}
					}
				}
				unwrapped = OptSimpleObject{
					Value: optForm,
					Set:   true,
				}
			}
			request = AllRequestBodiesOptionalApplicationXWwwFormUrlencoded(unwrapped)
		}
		return &request, close, nil
	case "multipart/form-data":
		if r.ContentLength == 0 {
			return req, close, nil
		}
		if err := r.ParseMultipartForm(s.cfg.MaxMultipartMemory); err != nil {
			return req, close, errors.Wrap(err, "parse multipart form")
		}
		form := url.Values(r.MultipartForm.Value)

		var request AllRequestBodiesOptionalMultipartFormData
		{
			var unwrapped OptSimpleObject
			{
				var optForm SimpleObject
				q := uri.NewQueryDecoder(form)
				{
					cfg := uri.QueryParameterDecodingConfig{
						Name:    "name",
						Style:   uri.QueryStyleForm,
						Explode: true,
					}
					if err := q.HasParam(cfg); err == nil {
						if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							optForm.Name = c
							return nil
						}); err != nil {
							return req, close, errors.Wrap(err, "decode \"name\"")
						}
					} else {
						return req, close, errors.Wrap(err, "query")
					}
				}
				{
					cfg := uri.QueryParameterDecodingConfig{
						Name:    "age",
						Style:   uri.QueryStyleForm,
						Explode: true,
					}
					if err := q.HasParam(cfg); err == nil {
						if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
							var optFormDotAgeVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								optFormDotAgeVal = c
								return nil
							}(); err != nil {
								return err
							}
							optForm.Age.SetTo(optFormDotAgeVal)
							return nil
						}); err != nil {
							return req, close, errors.Wrap(err, "decode \"age\"")
						}
					}
				}
				unwrapped = OptSimpleObject{
					Value: optForm,
					Set:   true,
				}
			}
			request = AllRequestBodiesOptionalMultipartFormData(unwrapped)
		}
		return &request, close, nil
	case "text/plain":
		request := AllRequestBodiesOptionalReqTextPlain{Data: r.Body}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}
