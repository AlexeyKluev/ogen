// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

type FoobarGetResponseNotFound struct{}

func (*FoobarGetResponseNotFound) foobarGetResponse() {}

type FoobarPostResponseDefaultApplicationJSON struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

type FoobarPostResponseDefaultApplicationJSONStatusCode struct {
	StatusCode int
	Response   FoobarPostResponseDefaultApplicationJSON
}

func (*FoobarPostResponseDefaultApplicationJSONStatusCode) foobarPostResponse() {}

type FoobarPostResponseNotFound struct{}

func (*FoobarPostResponseNotFound) foobarPostResponse() {}

type FoobarPutResponseDefault struct{}

type FoobarPutResponseDefaultStatusCode struct {
	StatusCode int
	Response   FoobarPutResponseDefault
}

type PetGetResponseDefaultApplicationJSON struct {
	Message string `json:"message"`
}

type PetGetResponseDefaultApplicationJSONStatusCode struct {
	StatusCode int
	Response   PetGetResponseDefaultApplicationJSON
}

func (*PetGetResponseDefaultApplicationJSONStatusCode) petGetResponse() {}

// '#/components/schemas/Pet'
type PetGetResponseOKApplicationJSON struct {
	Birthday     time.Time                            `json:"birthday"`
	Friends      *[]PetGetResponseOKApplicationJSON   `json:"friends"`
	ID           int64                                `json:"id"`
	IP           net.IP                               `json:"ip"`
	IPV4         net.IP                               `json:"ip_v4"`
	IPV6         net.IP                               `json:"ip_v6"`
	Kind         string                               `json:"kind"`
	Name         string                               `json:"name"`
	Next         *PetGetResponseOKApplicationJSONNext `json:"next"`
	Nickname     string                               `json:"nickname"`
	NullStr      *string                              `json:"nullStr"`
	Primary      *PetGetResponseOKApplicationJSON     `json:"primary"`
	Rate         time.Duration                        `json:"rate"`
	Tag          *uuid.UUID                           `json:"tag"`
	TestArray1   *[][]string                          `json:"testArray1"`
	TestDate     *time.Time                           `json:"testDate"`
	TestDateTime *time.Time                           `json:"testDateTime"`
	TestDuration *time.Duration                       `json:"testDuration"`
	TestFloat1   *float64                             `json:"testFloat1"`
	TestInteger1 *int                                 `json:"testInteger1"`
	TestTime     *time.Time                           `json:"testTime"`
	Type         *string                              `json:"type"`
	UniqueID     uuid.UUID                            `json:"unique_id"`
	URI          url.URL                              `json:"uri"`
}

func (*PetGetResponseOKApplicationJSON) foobarGetResponse()  {}
func (*PetGetResponseOKApplicationJSON) foobarPostResponse() {}
func (*PetGetResponseOKApplicationJSON) petGetResponse()     {}

type PetGetResponseOKApplicationJSONKind string

const (
	PetGetResponseOKApplicationJSONKindBig  PetGetResponseOKApplicationJSONKind = "big"
	PetGetResponseOKApplicationJSONKindSmol PetGetResponseOKApplicationJSONKind = "smol"
)

// '#/components/schemas/Data'
type PetGetResponseOKApplicationJSONNext struct {
	Description *string `json:"description"`
}

type PetGetResponseOKApplicationJSONType string

const (
	PetGetResponseOKApplicationJSONTypeFifa PetGetResponseOKApplicationJSONType = "fifa"
	PetGetResponseOKApplicationJSONTypeFofa PetGetResponseOKApplicationJSONType = "fofa"
)
