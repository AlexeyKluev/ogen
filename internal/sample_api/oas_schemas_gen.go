// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

// Data describes #/components/schemas/Data.
type Data struct {
	Description OptionalString `json:"description"`
}

type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

type ErrorStatusCode struct {
	StatusCode int   `json:"-"`
	Response   Error `json:"-"`
}

func (*ErrorStatusCode) foobarPostResponse() {}

type FoobarPutDefault struct {
	StatusCode int `json:"-"`
}

// New returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is generic valiant of string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

type NotFound struct{}

func (*NotFound) foobarGetResponse()  {}
func (*NotFound) foobarPostResponse() {}

// New returns new OptionalData with value set to v.
func NewOptionalData(v Data) OptionalData {
	return OptionalData{
		Value: v,
		Set:   true,
	}
}

// OptionalData is generic valiant of Data.
type OptionalData struct {
	Value Data
	Set   bool
}

// IsSet returns true if OptionalData was set.
func (o OptionalData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptionalData) Reset() {
	var v Data
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptionalData) SetTo(v Data) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptionalData) Get() (v Data, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// New returns new OptionalDuration with value set to v.
func NewOptionalDuration(v time.Duration) OptionalDuration {
	return OptionalDuration{
		Value: v,
		Set:   true,
	}
}

// OptionalDuration is generic valiant of time.Duration.
type OptionalDuration struct {
	Value time.Duration
	Set   bool
}

// IsSet returns true if OptionalDuration was set.
func (o OptionalDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptionalDuration) Reset() {
	var v time.Duration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptionalDuration) SetTo(v time.Duration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptionalDuration) Get() (v time.Duration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// New returns new OptionalFloat64 with value set to v.
func NewOptionalFloat64(v float64) OptionalFloat64 {
	return OptionalFloat64{
		Value: v,
		Set:   true,
	}
}

// OptionalFloat64 is generic valiant of float64.
type OptionalFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptionalFloat64 was set.
func (o OptionalFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptionalFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptionalFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptionalFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// New returns new OptionalInt with value set to v.
func NewOptionalInt(v int) OptionalInt {
	return OptionalInt{
		Value: v,
		Set:   true,
	}
}

// OptionalInt is generic valiant of int.
type OptionalInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptionalInt was set.
func (o OptionalInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptionalInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptionalInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptionalInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// New returns new OptionalNilString with value set to v.
func NewOptionalNilString(v string) OptionalNilString {
	return OptionalNilString{
		Value: v,
		Set:   true,
	}
}

// OptionalNilString is generic valiant of string.
type OptionalNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptionalNilString was set.
func (o OptionalNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptionalNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptionalNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptionalNilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptionalNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// New returns new OptionalPetType with value set to v.
func NewOptionalPetType(v PetType) OptionalPetType {
	return OptionalPetType{
		Value: v,
		Set:   true,
	}
}

// OptionalPetType is generic valiant of PetType.
type OptionalPetType struct {
	Value PetType
	Set   bool
}

// IsSet returns true if OptionalPetType was set.
func (o OptionalPetType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptionalPetType) Reset() {
	var v PetType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptionalPetType) SetTo(v PetType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptionalPetType) Get() (v PetType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// New returns new OptionalString with value set to v.
func NewOptionalString(v string) OptionalString {
	return OptionalString{
		Value: v,
		Set:   true,
	}
}

// OptionalString is generic valiant of string.
type OptionalString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptionalString was set.
func (o OptionalString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptionalString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptionalString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptionalString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// New returns new OptionalTime with value set to v.
func NewOptionalTime(v time.Time) OptionalTime {
	return OptionalTime{
		Value: v,
		Set:   true,
	}
}

// OptionalTime is generic valiant of time.Time.
type OptionalTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptionalTime was set.
func (o OptionalTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptionalTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptionalTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptionalTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// New returns new OptionalUUID with value set to v.
func NewOptionalUUID(v uuid.UUID) OptionalUUID {
	return OptionalUUID{
		Value: v,
		Set:   true,
	}
}

// OptionalUUID is generic valiant of uuid.UUID.
type OptionalUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptionalUUID was set.
func (o OptionalUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptionalUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptionalUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptionalUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Pet describes #/components/schemas/Pet.
type Pet struct {
	Birthday     time.Time         `json:"birthday"`
	Friends      *[]Pet            `json:"friends"`
	ID           int64             `json:"id"`
	IP           net.IP            `json:"ip"`
	IPV4         net.IP            `json:"ip_v4"`
	IPV6         net.IP            `json:"ip_v6"`
	Name         string            `json:"name"`
	Next         OptionalData      `json:"next"`
	Nickname     NilString         `json:"nickname"`
	NullStr      OptionalNilString `json:"nullStr"`
	Rate         time.Duration     `json:"rate"`
	Tag          OptionalUUID      `json:"tag"`
	TestArray1   *[][]string       `json:"testArray1"`
	TestDate     OptionalTime      `json:"testDate"`
	TestDateTime OptionalTime      `json:"testDateTime"`
	TestDuration OptionalDuration  `json:"testDuration"`
	TestFloat1   OptionalFloat64   `json:"testFloat1"`
	TestInteger1 OptionalInt       `json:"testInteger1"`
	TestTime     OptionalTime      `json:"testTime"`
	Type         OptionalPetType   `json:"type"`
	URI          url.URL           `json:"uri"`
	UniqueID     uuid.UUID         `json:"unique_id"`
}

func (*Pet) foobarGetResponse()  {}
func (*Pet) foobarPostResponse() {}
func (*Pet) petCreateRequest()   {}
func (*Pet) petGetResponse()     {}

type PetCreateTextPlainRequest string

func (*PetCreateTextPlainRequest) petCreateRequest() {}

type PetGetDefault struct {
	Message string `json:"message"`
}

type PetGetDefaultStatusCode struct {
	StatusCode int           `json:"-"`
	Response   PetGetDefault `json:"-"`
}

func (*PetGetDefaultStatusCode) petGetResponse() {}

type PetType string

const (
	PetTypeFifa PetType = "fifa"
	PetTypeFofa PetType = "fofa"
)
