// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func decodeFoobarGetResponse(resp *http.Response) (res FoobarGetRes, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			buf := json.GetBuffer()
			defer json.PutBuffer(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			i := json.GetIterator()
			defer json.PutIterator(i)
			i.ResetBytes(buf.Bytes())

			var response Pet
			if err := func() error {
				if err := response.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &NotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeFoobarPutResponse(resp *http.Response) (res FoobarPutDefault, err error) {
	switch resp.StatusCode {
	default:
		return FoobarPutDefault{StatusCode: resp.StatusCode}, nil
	}
}

func decodeFoobarPostResponse(resp *http.Response) (res FoobarPostRes, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			buf := json.GetBuffer()
			defer json.PutBuffer(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			i := json.GetIterator()
			defer json.PutIterator(i)
			i.ResetBytes(buf.Bytes())

			var response Pet
			if err := func() error {
				if err := response.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &NotFound{}, nil
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	}
}

func decodePetGetResponse(resp *http.Response) (res PetGetRes, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			buf := json.GetBuffer()
			defer json.PutBuffer(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			i := json.GetIterator()
			defer json.PutIterator(i)
			i.ResetBytes(buf.Bytes())

			var response Pet
			if err := func() error {
				if err := response.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PetGetDefaultStatusCode
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	}
}

func decodePetCreateResponse(resp *http.Response) (res Pet, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			buf := json.GetBuffer()
			defer json.PutBuffer(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			i := json.GetIterator()
			defer json.PutIterator(i)
			i.ResetBytes(buf.Bytes())

			var response Pet
			if err := func() error {
				if err := response.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePetFriendsNamesByIDResponse(resp *http.Response) (res []string, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			buf := json.GetBuffer()
			defer json.PutBuffer(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			i := json.GetIterator()
			defer json.PutIterator(i)
			i.ResetBytes(buf.Bytes())

			var response []string
			if err := func() error {
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem string
					if err := func() error {
						elem = i.ReadString()
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					response = append(response, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePetNameByIDResponse(resp *http.Response) (res string, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			buf := json.GetBuffer()
			defer json.PutBuffer(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			i := json.GetIterator()
			defer json.PutIterator(i)
			i.ResetBytes(buf.Bytes())

			var response string
			if err := func() error {
				response = i.ReadString()
				return i.Error
			}(); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePetGetByNameResponse(resp *http.Response) (res Pet, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			buf := json.GetBuffer()
			defer json.PutBuffer(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			i := json.GetIterator()
			defer json.PutIterator(i)
			i.ResetBytes(buf.Bytes())

			var response Pet
			if err := func() error {
				if err := response.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}
