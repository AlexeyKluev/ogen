// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"io"
	"mime/multipart"
	"strings"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func encodeDefaultTestRequestJSON(
	req DefaultTest,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	return func() (io.ReadCloser, error) {
		return io.NopCloser(bytes.NewReader(encoded)), nil
	}, nil
}
func encodeFoobarPostRequestJSON(
	req OptPet,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}
	encoded := e.Bytes()
	return func() (io.ReadCloser, error) {
		return io.NopCloser(bytes.NewReader(encoded)), nil
	}, nil
}
func encodeOneofBugRequestJSON(
	req OneOfBugs,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	return func() (io.ReadCloser, error) {
		return io.NopCloser(bytes.NewReader(encoded)), nil
	}, nil
}
func encodePetCreateRequestJSON(
	req OptPet,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}
	encoded := e.Bytes()
	return func() (io.ReadCloser, error) {
		return io.NopCloser(bytes.NewReader(encoded)), nil
	}, nil
}
func encodePetUpdateNameAliasPostRequestJSON(
	req OptPetName,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}
	encoded := e.Bytes()
	return func() (io.ReadCloser, error) {
		return io.NopCloser(bytes.NewReader(encoded)), nil
	}, nil
}
func encodePetUpdateNamePostRequestJSON(
	req OptString,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}
	encoded := e.Bytes()
	return func() (io.ReadCloser, error) {
		return io.NopCloser(bytes.NewReader(encoded)), nil
	}, nil
}
func encodePetUploadAvatarByIDRequestOctetStream(
	req PetUploadAvatarByIDReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		return io.NopCloser(req), nil
	}, nil
}
func encodeTestFloatValidationRequestJSON(
	req TestFloatValidation,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	return func() (io.ReadCloser, error) {
		return io.NopCloser(bytes.NewReader(encoded)), nil
	}, nil
}
func encodeTestFormURLEncodedRequestFormURLEncoded(
	req TestForm,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	q := uri.NewQueryEncoder()
	{
		// Encode "id" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.ID.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return data, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "uuid" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "uuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.UUID.Get(); ok {
				return e.EncodeValue(conv.UUIDToString(val))
			}
			return nil
		}); err != nil {
			return data, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "description" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "description",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(req.Description))
		}); err != nil {
			return data, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "array" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range req.Array {
					if err := func() error {
						return e.EncodeValue(conv.StringToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return data, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "object" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "object",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.Object.Get(); ok {
				return val.EncodeURI(e)
			}
			return nil
		}); err != nil {
			return data, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "deepObject" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "deepObject",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.DeepObject.Get(); ok {
				return val.EncodeURI(e)
			}
			return nil
		}); err != nil {
			return data, errors.Wrap(err, "encode query")
		}
	}
	encoded := q.Values().Encode()
	return func() (io.ReadCloser, error) {
		return io.NopCloser(strings.NewReader(encoded)), nil
	}, nil
}
func encodeTestMultipartRequest(
	req TestForm,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	contentType string,
	rerr error,
) {
	q := uri.NewQueryEncoder()
	{
		// Encode "id" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.ID.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return data, "", errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "uuid" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "uuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.UUID.Get(); ok {
				return e.EncodeValue(conv.UUIDToString(val))
			}
			return nil
		}); err != nil {
			return data, "", errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "description" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "description",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(req.Description))
		}); err != nil {
			return data, "", errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "array" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range req.Array {
					if err := func() error {
						return e.EncodeValue(conv.StringToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return data, "", errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "object" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "object",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.Object.Get(); ok {
				return val.EncodeURI(e)
			}
			return nil
		}); err != nil {
			return data, "", errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "deepObject" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "deepObject",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.DeepObject.Get(); ok {
				return val.EncodeURI(e)
			}
			return nil
		}); err != nil {
			return data, "", errors.Wrap(err, "encode query")
		}
	}
	getBody, contentType := ht.CreateMultipartBody(func(w *multipart.Writer) error {
		if err := q.WriteMultipart(w); err != nil {
			return errors.Wrap(err, "write multipart")
		}
		return nil
	})
	return getBody, contentType, nil
}
func encodeTestMultipartUploadRequest(
	req TestMultipartUploadReqForm,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	contentType string,
	rerr error,
) {
	q := uri.NewQueryEncoder()
	{
		// Encode "orderId" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "orderId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.OrderId.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return data, "", errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "userId" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "userId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.UserId.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return data, "", errors.Wrap(err, "encode query")
		}
	}
	getBody, contentType := ht.CreateMultipartBody(func(w *multipart.Writer) error {
		if err := req.File.WriteMultipart("file", w); err != nil {
			return errors.Wrap(err, "write \"file\"")
		}
		if val, ok := req.OptionalFile.Get(); ok {
			if err := val.WriteMultipart("optional_file", w); err != nil {
				return errors.Wrap(err, "write \"optional_file\"")
			}
		}
		if err := func() error {
			for idx, val := range req.Files {
				if err := val.WriteMultipart("files", w); err != nil {
					return errors.Wrapf(err, "file [%d]", idx)
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "write \"files\"")
		}
		if err := q.WriteMultipart(w); err != nil {
			return errors.Wrap(err, "write multipart")
		}
		return nil
	})
	return getBody, contentType, nil
}
func encodeTestShareFormSchemaRequestJSON(
	req SharedRequest,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	return func() (io.ReadCloser, error) {
		return io.NopCloser(bytes.NewReader(encoded)), nil
	}, nil
}
func encodeTestShareFormSchemaRequest(
	req SharedRequestForm,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	contentType string,
	rerr error,
) {
	q := uri.NewQueryEncoder()
	{
		// Encode "filename" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "filename",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := req.Filename.Get(); ok {
				return e.EncodeValue(conv.StringToString(val))
			}
			return nil
		}); err != nil {
			return data, "", errors.Wrap(err, "encode query")
		}
	}
	getBody, contentType := ht.CreateMultipartBody(func(w *multipart.Writer) error {
		if val, ok := req.File.Get(); ok {
			if err := val.WriteMultipart("file", w); err != nil {
				return errors.Wrap(err, "write \"file\"")
			}
		}
		if err := q.WriteMultipart(w); err != nil {
			return errors.Wrap(err, "write multipart")
		}
		return nil
	})
	return getBody, contentType, nil
}
