// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

// Encode implements json.Marshaler.
func (s AnyOfTest) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"medium\"" + ":")
		e.Str(s.Medium)
	}
	{
		e.Comma()

		e.RawStr("\"sizeLimit\"" + ":")
		s.SizeLimit.Encode(e)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfAnyOfTest = [2]string{
	0: "medium",
	1: "sizeLimit",
}

// Decode decodes AnyOfTest from json.
func (s *AnyOfTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnyOfTest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "medium":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Medium = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"medium\"")
			}
		case "sizeLimit":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.SizeLimit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sizeLimit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AnyOfTest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAnyOfTest) {
					name = jsonFieldsNameOfAnyOfTest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode encodes AnyOfTestSizeLimit as json.
func (s AnyOfTestSizeLimit) Encode(e *jx.Writer) {
	switch s.Type {
	case IntAnyOfTestSizeLimit:
		e.Int(s.Int)
	case StringAnyOfTestSizeLimit:
		e.Str(s.String)
	}
}

// Decode decodes AnyOfTestSizeLimit from json.
func (s *AnyOfTestSizeLimit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnyOfTestSizeLimit to nil")
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntAnyOfTestSizeLimit
	case jx.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringAnyOfTestSizeLimit
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// Encode implements json.Marshaler.
func (s AnyTest) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if len(s.Empty) != 0 {
			if !first {
				e.Comma()
			}
			first = false
		}

		if len(s.Empty) != 0 {
			e.RawStr("\"empty\"" + ":")
			e.Raw(s.Empty)
		}
	}
	{
		if s.AnyMap.Set {
			if !first {
				e.Comma()
			}
			first = false
		}
		if s.AnyMap.Set {
			e.RawStr("\"any_map\"" + ":")
			s.AnyMap.Encode(e)
		}
	}
	{
		if s.AnyArray != nil {
			if !first {
				e.Comma()
			}
			first = false
		}
		if s.AnyArray != nil {
			e.RawStr("\"any_array\"" + ":")
			e.ArrStart()
			if len(s.AnyArray) >= 1 {
				// Encode first element without comma.
				{
					elem := s.AnyArray[0]
					if len(elem) != 0 {
						e.Raw(elem)
					}
				}
				for _, elem := range s.AnyArray[1:] {
					e.Comma()
					if len(elem) != 0 {
						e.Raw(elem)
					}
				}
			}
			e.ArrEnd()
		}
	}
	e.ObjEnd()
}

var jsonFieldsNameOfAnyTest = [3]string{
	0: "empty",
	1: "any_map",
	2: "any_array",
}

// Decode decodes AnyTest from json.
func (s *AnyTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnyTest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "empty":
			if err := func() error {
				v, err := d.Raw()
				s.Empty = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"empty\"")
			}
		case "any_map":
			if err := func() error {
				s.AnyMap.Reset()
				if err := s.AnyMap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"any_map\"")
			}
		case "any_array":
			if err := func() error {
				s.AnyArray = nil
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.Raw()
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.AnyArray = append(s.AnyArray, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"any_array\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AnyTest")
	}

	return nil
}

// Encode implements json.Marshaler.
func (s AnyTestAnyMap) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	for k, elem := range s {
		if !first {
			e.Comma()
		}
		first = false
		e.Str(k)
		e.RawStr(`:`)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
	e.ObjEnd()
}

var jsonFieldsNameOfAnyTestAnyMap = [0]string{}

// Decode decodes AnyTestAnyMap from json.
func (s AnyTestAnyMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnyTestAnyMap to nil")
	}

	m := s
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			var elem jx.Raw
			if err := func() error {
				v, err := d.Raw()
				elem = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			m[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AnyTestAnyMap")
	}

	return nil
}

// Encode implements json.Marshaler.
func (s ArrayTest) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"required\"" + ":")
		e.ArrStart()
		if len(s.Required) >= 1 {
			// Encode first element without comma.
			{
				elem := s.Required[0]
				e.Str(elem)
			}
			for _, elem := range s.Required[1:] {
				e.Comma()
				e.Str(elem)
			}
		}
		e.ArrEnd()
	}
	{
		if s.Optional != nil {
			e.Comma()
		}
		if s.Optional != nil {
			e.RawStr("\"optional\"" + ":")
			e.ArrStart()
			if len(s.Optional) >= 1 {
				// Encode first element without comma.
				{
					elem := s.Optional[0]
					e.Str(elem)
				}
				for _, elem := range s.Optional[1:] {
					e.Comma()
					e.Str(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		e.Comma()

		e.RawStr("\"nullable_required\"" + ":")
		if s.NullableRequired == nil {
			e.Null()
		} else {
			e.ArrStart()
			if len(s.NullableRequired) >= 1 {
				// Encode first element without comma.
				{
					elem := s.NullableRequired[0]
					e.Str(elem)
				}
				for _, elem := range s.NullableRequired[1:] {
					e.Comma()
					e.Str(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.NullableOptional.Set {
			e.Comma()
		}
		if s.NullableOptional.Set {
			e.RawStr("\"nullable_optional\"" + ":")
			s.NullableOptional.Encode(e)
		}
	}
	e.ObjEnd()
}

var jsonFieldsNameOfArrayTest = [4]string{
	0: "required",
	1: "optional",
	2: "nullable_required",
	3: "nullable_optional",
}

// Decode decodes ArrayTest from json.
func (s *ArrayTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ArrayTest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Required = nil
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Required = append(s.Required, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "optional":
			if err := func() error {
				s.Optional = nil
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Optional = append(s.Optional, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional\"")
			}
		case "nullable_required":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				s.NullableRequired = nil
				switch tt := d.Next(); tt {
				case jx.Null:
					if err := d.Skip(); err != nil {
						return err
					}
				default:
					if err := d.Arr(func(d *jx.Decoder) error {
						var elem string
						v, err := d.Str()
						elem = string(v)
						if err != nil {
							return err
						}
						s.NullableRequired = append(s.NullableRequired, elem)
						return nil
					}); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullable_required\"")
			}
		case "nullable_optional":
			if err := func() error {
				s.NullableOptional.Reset()
				if err := s.NullableOptional.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullable_optional\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ArrayTest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfArrayTest) {
					name = jsonFieldsNameOfArrayTest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s Data) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"id\"" + ":")
		s.ID.Encode(e)
	}
	{
		e.Comma()

		e.RawStr("\"description\"" + ":")
		s.Description.Encode(e)
	}
	{
		e.Comma()

		e.RawStr("\"email\"" + ":")
		e.Str(s.Email)
	}
	{
		e.Comma()

		e.RawStr("\"hostname\"" + ":")
		e.Str(s.Hostname)
	}
	{
		e.Comma()

		e.RawStr("\"format\"" + ":")
		e.Str(s.Format)
	}
	{
		e.Comma()

		e.RawStr("\"base64\"" + ":")
		e.Base64(s.Base64)
	}
	{
		if s.NullableEnum.Set {
			e.Comma()
		}
		if s.NullableEnum.Set {
			e.RawStr("\"nullable_enum\"" + ":")
			s.NullableEnum.Encode(e)
		}
	}
	e.ObjEnd()
}

var jsonFieldsNameOfData = [7]string{
	0: "id",
	1: "description",
	2: "email",
	3: "hostname",
	4: "format",
	5: "base64",
	6: "nullable_enum",
}

// Decode decodes Data from json.
func (s *Data) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Data to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "description":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "email":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Email = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "hostname":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Hostname = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostname\"")
			}
		case "format":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Format = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"format\"")
			}
		case "base64":
			if err := func() error {
				v, err := d.Base64()
				s.Base64 = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"base64\"")
			}
		case "nullable_enum":
			if err := func() error {
				s.NullableEnum.Reset()
				if err := s.NullableEnum.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullable_enum\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Data")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfData) {
					name = jsonFieldsNameOfData[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode encodes DataDescription as json.
func (s DataDescription) Encode(e *jx.Writer) {
	switch s.Type {
	case DescriptionDetailedDataDescription:
		s.DescriptionDetailed.Encode(e)
	case DescriptionSimpleDataDescription:
		s.DescriptionSimple.Encode(e)
	}
}

// Decode decodes DataDescription from json.
func (s *DataDescription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataDescription to nil")
	}
	// Sum type fields.
	if d.Next() != jx.Object {
		return errors.Errorf("unexpected json type %q", d.Next())
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "name":
				found = true
				s.Type = DescriptionDetailedDataDescription
			case "count":
				found = true
				s.Type = DescriptionDetailedDataDescription
			case "id":
				found = true
				s.Type = DescriptionDetailedDataDescription
			case "description":
				found = true
				s.Type = DescriptionSimpleDataDescription
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case DescriptionDetailedDataDescription:
		if err := s.DescriptionDetailed.Decode(d); err != nil {
			return err
		}
	case DescriptionSimpleDataDescription:
		if err := s.DescriptionSimple.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// Encode implements json.Marshaler.
func (s DefaultTest) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"required\"" + ":")
		e.Str(s.Required)
	}
	{
		if s.Str.Set {
			e.Comma()
		}
		if s.Str.Set {
			e.RawStr("\"str\"" + ":")
			s.Str.Encode(e)
		}
	}
	{
		if s.NullStr.Set {
			e.Comma()
		}
		if s.NullStr.Set {
			e.RawStr("\"nullStr\"" + ":")
			s.NullStr.Encode(e)
		}
	}
	{
		if s.Enum.Set {
			e.Comma()
		}
		if s.Enum.Set {
			e.RawStr("\"enum\"" + ":")
			s.Enum.Encode(e)
		}
	}
	{
		if s.UUID.Set {
			e.Comma()
		}
		if s.UUID.Set {
			e.RawStr("\"uuid\"" + ":")
			s.UUID.Encode(e)
		}
	}
	{
		if s.IP.Set {
			e.Comma()
		}
		if s.IP.Set {
			e.RawStr("\"ip\"" + ":")
			s.IP.Encode(e)
		}
	}
	{
		if s.IPV4.Set {
			e.Comma()
		}
		if s.IPV4.Set {
			e.RawStr("\"ip_v4\"" + ":")
			s.IPV4.Encode(e)
		}
	}
	{
		if s.IPV6.Set {
			e.Comma()
		}
		if s.IPV6.Set {
			e.RawStr("\"ip_v6\"" + ":")
			s.IPV6.Encode(e)
		}
	}
	{
		if s.URI.Set {
			e.Comma()
		}
		if s.URI.Set {
			e.RawStr("\"uri\"" + ":")
			s.URI.Encode(e)
		}
	}
	{
		if s.Birthday.Set {
			e.Comma()
		}
		if s.Birthday.Set {
			e.RawStr("\"birthday\"" + ":")
			s.Birthday.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.Rate.Set {
			e.Comma()
		}
		if s.Rate.Set {
			e.RawStr("\"rate\"" + ":")
			s.Rate.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.Comma()
		}
		if s.Email.Set {
			e.RawStr("\"email\"" + ":")
			s.Email.Encode(e)
		}
	}
	{
		if s.Hostname.Set {
			e.Comma()
		}
		if s.Hostname.Set {
			e.RawStr("\"hostname\"" + ":")
			s.Hostname.Encode(e)
		}
	}
	{
		if s.Format.Set {
			e.Comma()
		}
		if s.Format.Set {
			e.RawStr("\"format\"" + ":")
			s.Format.Encode(e)
		}
	}
	{
		e.Comma()

		e.RawStr("\"base64\"" + ":")
		e.Base64(s.Base64)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfDefaultTest = [15]string{
	0:  "required",
	1:  "str",
	2:  "nullStr",
	3:  "enum",
	4:  "uuid",
	5:  "ip",
	6:  "ip_v4",
	7:  "ip_v6",
	8:  "uri",
	9:  "birthday",
	10: "rate",
	11: "email",
	12: "hostname",
	13: "format",
	14: "base64",
}

// Decode decodes DefaultTest from json.
func (s *DefaultTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DefaultTest to nil")
	}
	var requiredBitSet [2]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Required = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "str":
			if err := func() error {
				s.Str.Reset()
				if err := s.Str.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"str\"")
			}
		case "nullStr":
			if err := func() error {
				s.NullStr.Reset()
				if err := s.NullStr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullStr\"")
			}
		case "enum":
			if err := func() error {
				s.Enum.Reset()
				if err := s.Enum.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enum\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "ip_v4":
			if err := func() error {
				s.IPV4.Reset()
				if err := s.IPV4.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_v4\"")
			}
		case "ip_v6":
			if err := func() error {
				s.IPV6.Reset()
				if err := s.IPV6.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_v6\"")
			}
		case "uri":
			if err := func() error {
				s.URI.Reset()
				if err := s.URI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uri\"")
			}
		case "birthday":
			if err := func() error {
				s.Birthday.Reset()
				if err := s.Birthday.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"birthday\"")
			}
		case "rate":
			if err := func() error {
				s.Rate.Reset()
				if err := s.Rate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rate\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "hostname":
			if err := func() error {
				s.Hostname.Reset()
				if err := s.Hostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostname\"")
			}
		case "format":
			if err := func() error {
				s.Format.Reset()
				if err := s.Format.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"format\"")
			}
		case "base64":
			if err := func() error {
				v, err := d.Base64()
				s.Base64 = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"base64\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DefaultTest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDefaultTest) {
					name = jsonFieldsNameOfDefaultTest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode encodes DefaultTestEnum as json.
func (s DefaultTestEnum) Encode(e *jx.Writer) {
	e.Str(string(s))
}

// Decode decodes DefaultTestEnum from json.
func (s *DefaultTestEnum) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DefaultTestEnum to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DefaultTestEnum(v) {
	case DefaultTestEnumBig:
		*s = DefaultTestEnumBig
	case DefaultTestEnumSmol:
		*s = DefaultTestEnumSmol
	default:
		*s = DefaultTestEnum(v)
	}

	return nil
}

// Encode implements json.Marshaler.
func (s DescriptionDetailed) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"name\"" + ":")
		e.Str(s.Name)
	}
	{
		e.Comma()

		e.RawStr("\"count\"" + ":")
		e.Int(s.Count)
	}
	{
		if s.ID.Set {
			e.Comma()
		}
		if s.ID.Set {
			e.RawStr("\"id\"" + ":")
			s.ID.Encode(e)
		}
	}
	e.ObjEnd()
}

var jsonFieldsNameOfDescriptionDetailed = [3]string{
	0: "name",
	1: "count",
	2: "id",
}

// Decode decodes DescriptionDetailed from json.
func (s *DescriptionDetailed) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DescriptionDetailed to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "count":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DescriptionDetailed")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDescriptionDetailed) {
					name = jsonFieldsNameOfDescriptionDetailed[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s DescriptionSimple) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"description\"" + ":")
		e.Str(s.Description)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfDescriptionSimple = [1]string{
	0: "description",
}

// Decode decodes DescriptionSimple from json.
func (s *DescriptionSimple) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DescriptionSimple to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Description = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DescriptionSimple")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDescriptionSimple) {
					name = jsonFieldsNameOfDescriptionSimple[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s Error) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"code\"" + ":")
		e.Int64(s.Code)
	}
	{
		e.Comma()

		e.RawStr("\"message\"" + ":")
		e.Str(s.Message)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfError = [2]string{
	0: "code",
	1: "message",
}

// Decode decodes Error from json.
func (s *Error) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Error to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int64()
				s.Code = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "message":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Message = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Error")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfError) {
					name = jsonFieldsNameOfError[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s Hash) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"raw\"" + ":")
		e.Base64(s.Raw)
	}
	{
		e.Comma()

		e.RawStr("\"hex\"" + ":")
		e.Str(s.Hex)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfHash = [2]string{
	0: "raw",
	1: "hex",
}

// Decode decodes Hash from json.
func (s *Hash) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Hash to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "raw":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Base64()
				s.Raw = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"raw\"")
			}
		case "hex":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Hex = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hex\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Hash")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfHash) {
					name = jsonFieldsNameOfHash[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode encodes ID as json.
func (s ID) Encode(e *jx.Writer) {
	switch s.Type {
	case StringID:
		e.Str(s.String)
	case IntID:
		e.Int(s.Int)
	}
}

// Decode decodes ID from json.
func (s *ID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ID to nil")
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringID
	case jx.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntID
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// Encode encodes Issue143 as json.
func (s Issue143) Encode(e *jx.Writer) {
	switch s.Type {
	case Issue1430Issue143:
		s.Issue1430.Encode(e)
	case Issue1431Issue143:
		s.Issue1431.Encode(e)
	case Issue1432Issue143:
		s.Issue1432.Encode(e)
	case Issue1433Issue143:
		s.Issue1433.Encode(e)
	}
}

// Decode decodes Issue143 from json.
func (s *Issue143) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue143 to nil")
	}
	// Sum type fields.
	if d.Next() != jx.Object {
		return errors.Errorf("unexpected json type %q", d.Next())
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "unique-1":
				found = true
				s.Type = Issue1430Issue143
			case "unique-2":
				found = true
				s.Type = Issue1431Issue143
			case "unique-3":
				found = true
				s.Type = Issue1432Issue143
			case "unique-4":
				found = true
				s.Type = Issue1433Issue143
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case Issue1430Issue143:
		if err := s.Issue1430.Decode(d); err != nil {
			return err
		}
	case Issue1431Issue143:
		if err := s.Issue1431.Decode(d); err != nil {
			return err
		}
	case Issue1432Issue143:
		if err := s.Issue1432.Decode(d); err != nil {
			return err
		}
	case Issue1433Issue143:
		if err := s.Issue1433.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// Encode implements json.Marshaler.
func (s Issue1430) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"common-1\"" + ":")
		e.Str(s.CommonMinus1)
	}
	{
		e.Comma()

		e.RawStr("\"common-2\"" + ":")
		e.Int(s.CommonMinus2)
	}
	{
		e.Comma()

		e.RawStr("\"unique-1\"" + ":")
		e.Str(s.UniqueMinus1)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfIssue1430 = [3]string{
	0: "common-1",
	1: "common-2",
	2: "unique-1",
}

// Decode decodes Issue1430 from json.
func (s *Issue1430) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue1430 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common-1":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.CommonMinus1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-1\"")
			}
		case "common-2":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.CommonMinus2 = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-2\"")
			}
		case "unique-1":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.UniqueMinus1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unique-1\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue1430")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfIssue1430) {
					name = jsonFieldsNameOfIssue1430[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s Issue1431) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"common-1\"" + ":")
		e.Str(s.CommonMinus1)
	}
	{
		e.Comma()

		e.RawStr("\"common-2\"" + ":")
		e.Int(s.CommonMinus2)
	}
	{
		e.Comma()

		e.RawStr("\"unique-2\"" + ":")
		e.Str(s.UniqueMinus2)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfIssue1431 = [3]string{
	0: "common-1",
	1: "common-2",
	2: "unique-2",
}

// Decode decodes Issue1431 from json.
func (s *Issue1431) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue1431 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common-1":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.CommonMinus1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-1\"")
			}
		case "common-2":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.CommonMinus2 = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-2\"")
			}
		case "unique-2":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.UniqueMinus2 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unique-2\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue1431")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfIssue1431) {
					name = jsonFieldsNameOfIssue1431[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s Issue1432) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"common-1\"" + ":")
		e.Str(s.CommonMinus1)
	}
	{
		e.Comma()

		e.RawStr("\"common-2\"" + ":")
		e.Int(s.CommonMinus2)
	}
	{
		if s.CommonMinus3.Set {
			e.Comma()
		}
		if s.CommonMinus3.Set {
			e.RawStr("\"common-3\"" + ":")
			s.CommonMinus3.Encode(e)
		}
	}
	{
		e.Comma()

		e.RawStr("\"unique-3\"" + ":")
		e.Str(s.UniqueMinus3)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfIssue1432 = [4]string{
	0: "common-1",
	1: "common-2",
	2: "common-3",
	3: "unique-3",
}

// Decode decodes Issue1432 from json.
func (s *Issue1432) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue1432 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common-1":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.CommonMinus1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-1\"")
			}
		case "common-2":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.CommonMinus2 = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-2\"")
			}
		case "common-3":
			if err := func() error {
				s.CommonMinus3.Reset()
				if err := s.CommonMinus3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-3\"")
			}
		case "unique-3":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.UniqueMinus3 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unique-3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue1432")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfIssue1432) {
					name = jsonFieldsNameOfIssue1432[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s Issue1433) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if s.CommonMinus3.Set {
			if !first {
				e.Comma()
			}
			first = false
		}
		if s.CommonMinus3.Set {
			e.RawStr("\"common-3\"" + ":")
			s.CommonMinus3.Encode(e)
		}
	}
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"unique-4\"" + ":")
		e.Str(s.UniqueMinus4)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfIssue1433 = [2]string{
	0: "common-3",
	1: "unique-4",
}

// Decode decodes Issue1433 from json.
func (s *Issue1433) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Issue1433 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common-3":
			if err := func() error {
				s.CommonMinus3.Reset()
				if err := s.CommonMinus3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common-3\"")
			}
		case "unique-4":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.UniqueMinus4 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unique-4\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Issue1433")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfIssue1433) {
					name = jsonFieldsNameOfIssue1433[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s MapWithProperties) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		{
			if !first {
				e.Comma()
			}
			first = false

			e.RawStr("\"required\"" + ":")
			e.Int(s.Required)
		}
		{
			if s.Optional.Set {
				e.Comma()
			}
			if s.Optional.Set {
				e.RawStr("\"optional\"" + ":")
				s.Optional.Encode(e)
			}
		}
		{
			if s.SubMap.Set {
				e.Comma()
			}
			if s.SubMap.Set {
				e.RawStr("\"sub_map\"" + ":")
				s.SubMap.Encode(e)
			}
		}
		{
			if s.InlinedSubMap.Set {
				e.Comma()
			}
			if s.InlinedSubMap.Set {
				e.RawStr("\"inlined_sub_map\"" + ":")
				s.InlinedSubMap.Encode(e)
			}
		}
		{
			if s.MapValidation.Set {
				e.Comma()
			}
			if s.MapValidation.Set {
				e.RawStr("\"map_validation\"" + ":")
				s.MapValidation.Encode(e)
			}
		}
	}
	for k, elem := range s.AdditionalProps {
		if !first {
			e.Comma()
		}
		first = false
		e.Str(k)
		e.RawStr(`:`)

		e.Str(elem)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfMapWithProperties = [5]string{
	0: "required",
	1: "optional",
	2: "sub_map",
	3: "inlined_sub_map",
	4: "map_validation",
}

// Decode decodes MapWithProperties from json.
func (s *MapWithProperties) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MapWithProperties to nil")
	}
	var requiredBitSet [1]uint8
	var propertiesCount int

	m := s.AdditionalProps
	if m == nil {
		m = map[string]string{}
		s.AdditionalProps = m
	}
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		propertiesCount++
		switch string(k) {
		case "required":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Required = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "optional":
			if err := func() error {
				s.Optional.Reset()
				if err := s.Optional.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional\"")
			}
		case "sub_map":
			if err := func() error {
				s.SubMap.Reset()
				if err := s.SubMap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_map\"")
			}
		case "inlined_sub_map":
			if err := func() error {
				s.InlinedSubMap.Reset()
				if err := s.InlinedSubMap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"inlined_sub_map\"")
			}
		case "map_validation":
			if err := func() error {
				s.MapValidation.Reset()
				if err := s.MapValidation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"map_validation\"")
			}
		default:
			var elem string
			if err := func() error {
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			m[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MapWithProperties")
	}
	// Validate properties count.
	if err := (validate.Object{
		MinProperties:    0,
		MinPropertiesSet: false,
		MaxProperties:    7,
		MaxPropertiesSet: true,
	}).ValidateProperties(propertiesCount); err != nil {
		return errors.Wrap(err, "object")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfMapWithProperties) {
					name = jsonFieldsNameOfMapWithProperties[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s MapWithPropertiesInlinedSubMap) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	for k, elem := range s {
		if !first {
			e.Comma()
		}
		first = false
		e.Str(k)
		e.RawStr(`:`)

		e.Str(elem)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfMapWithPropertiesInlinedSubMap = [0]string{}

// Decode decodes MapWithPropertiesInlinedSubMap from json.
func (s MapWithPropertiesInlinedSubMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MapWithPropertiesInlinedSubMap to nil")
	}

	m := s
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			var elem string
			if err := func() error {
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			m[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MapWithPropertiesInlinedSubMap")
	}

	return nil
}

// Encode implements json.Marshaler.
func (s MaxPropertiesTest) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"required\"" + ":")
		e.Int(s.Required)
	}
	{
		if s.OptionalA.Set {
			e.Comma()
		}
		if s.OptionalA.Set {
			e.RawStr("\"optional_a\"" + ":")
			s.OptionalA.Encode(e)
		}
	}
	{
		if s.OptionalB.Set {
			e.Comma()
		}
		if s.OptionalB.Set {
			e.RawStr("\"optional_b\"" + ":")
			s.OptionalB.Encode(e)
		}
	}
	{
		if s.OptionalC.Set {
			e.Comma()
		}
		if s.OptionalC.Set {
			e.RawStr("\"optional_c\"" + ":")
			s.OptionalC.Encode(e)
		}
	}
	e.ObjEnd()
}

var jsonFieldsNameOfMaxPropertiesTest = [4]string{
	0: "required",
	1: "optional_a",
	2: "optional_b",
	3: "optional_c",
}

// Decode decodes MaxPropertiesTest from json.
func (s *MaxPropertiesTest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MaxPropertiesTest to nil")
	}
	var requiredBitSet [1]uint8
	var propertiesCount int

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		propertiesCount++
		switch string(k) {
		case "required":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Required = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "optional_a":
			if err := func() error {
				s.OptionalA.Reset()
				if err := s.OptionalA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_a\"")
			}
		case "optional_b":
			if err := func() error {
				s.OptionalB.Reset()
				if err := s.OptionalB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_b\"")
			}
		case "optional_c":
			if err := func() error {
				s.OptionalC.Reset()
				if err := s.OptionalC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_c\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MaxPropertiesTest")
	}
	// Validate properties count.
	if err := (validate.Object{
		MinProperties:    2,
		MinPropertiesSet: true,
		MaxProperties:    2,
		MaxPropertiesSet: true,
	}).ValidateProperties(propertiesCount); err != nil {
		return errors.Wrap(err, "object")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfMaxPropertiesTest) {
					name = jsonFieldsNameOfMaxPropertiesTest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode encodes NullableEnumsBoth as json.
func (o NilNullableEnumsBoth) Encode(e *jx.Writer) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes NullableEnumsBoth from json.
func (o *NilNullableEnumsBoth) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilNullableEnumsBoth to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Null = false
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableEnumsBoth
		o.Value = v
		o.Null = true
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading NilNullableEnumsBoth", d.Next())
	}
}

// Encode encodes NullableEnumsOnlyNullValue as json.
func (o NilNullableEnumsOnlyNullValue) Encode(e *jx.Writer) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes NullableEnumsOnlyNullValue from json.
func (o *NilNullableEnumsOnlyNullValue) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilNullableEnumsOnlyNullValue to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Null = false
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableEnumsOnlyNullValue
		o.Value = v
		o.Null = true
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading NilNullableEnumsOnlyNullValue", d.Next())
	}
}

// Encode encodes NullableEnumsOnlyNullable as json.
func (o NilNullableEnumsOnlyNullable) Encode(e *jx.Writer) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes NullableEnumsOnlyNullable from json.
func (o *NilNullableEnumsOnlyNullable) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilNullableEnumsOnlyNullable to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Null = false
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableEnumsOnlyNullable
		o.Value = v
		o.Null = true
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading NilNullableEnumsOnlyNullable", d.Next())
	}
}

// Encode encodes string as json.
func (o NilString) Encode(e *jx.Writer) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *NilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilString to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		var v string
		o.Value = v
		o.Null = true
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading NilString", d.Next())
	}
}

// Encode implements json.Marshaler.
func (s NullableEnums) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"only_nullable\"" + ":")
		s.OnlyNullable.Encode(e)
	}
	{
		e.Comma()

		e.RawStr("\"only_null_value\"" + ":")
		s.OnlyNullValue.Encode(e)
	}
	{
		e.Comma()

		e.RawStr("\"both\"" + ":")
		s.Both.Encode(e)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfNullableEnums = [3]string{
	0: "only_nullable",
	1: "only_null_value",
	2: "both",
}

// Decode decodes NullableEnums from json.
func (s *NullableEnums) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NullableEnums to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "only_nullable":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.OnlyNullable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_nullable\"")
			}
		case "only_null_value":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.OnlyNullValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_null_value\"")
			}
		case "both":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Both.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"both\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NullableEnums")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfNullableEnums) {
					name = jsonFieldsNameOfNullableEnums[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode encodes NullableEnumsBoth as json.
func (s NullableEnumsBoth) Encode(e *jx.Writer) {
	e.Str(string(s))
}

// Decode decodes NullableEnumsBoth from json.
func (s *NullableEnumsBoth) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NullableEnumsBoth to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch NullableEnumsBoth(v) {
	case NullableEnumsBothAsc:
		*s = NullableEnumsBothAsc
	case NullableEnumsBothDesc:
		*s = NullableEnumsBothDesc
	default:
		*s = NullableEnumsBoth(v)
	}

	return nil
}

// Encode encodes NullableEnumsOnlyNullValue as json.
func (s NullableEnumsOnlyNullValue) Encode(e *jx.Writer) {
	e.Str(string(s))
}

// Decode decodes NullableEnumsOnlyNullValue from json.
func (s *NullableEnumsOnlyNullValue) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NullableEnumsOnlyNullValue to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch NullableEnumsOnlyNullValue(v) {
	case NullableEnumsOnlyNullValueAsc:
		*s = NullableEnumsOnlyNullValueAsc
	case NullableEnumsOnlyNullValueDesc:
		*s = NullableEnumsOnlyNullValueDesc
	default:
		*s = NullableEnumsOnlyNullValue(v)
	}

	return nil
}

// Encode encodes NullableEnumsOnlyNullable as json.
func (s NullableEnumsOnlyNullable) Encode(e *jx.Writer) {
	e.Str(string(s))
}

// Decode decodes NullableEnumsOnlyNullable from json.
func (s *NullableEnumsOnlyNullable) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NullableEnumsOnlyNullable to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch NullableEnumsOnlyNullable(v) {
	case NullableEnumsOnlyNullableAsc:
		*s = NullableEnumsOnlyNullableAsc
	case NullableEnumsOnlyNullableDesc:
		*s = NullableEnumsOnlyNullableDesc
	default:
		*s = NullableEnumsOnlyNullable(v)
	}

	return nil
}

// Encode implements json.Marshaler.
func (s OneOfBugs) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"issue143\"" + ":")
		s.Issue143.Encode(e)
	}
	{
		e.Comma()

		e.RawStr("\"additional-fields\"" + ":")
		s.AdditionalMinusFields.Encode(e)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfOneOfBugs = [2]string{
	0: "issue143",
	1: "additional-fields",
}

// Decode decodes OneOfBugs from json.
func (s *OneOfBugs) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneOfBugs to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "issue143":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Issue143.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issue143\"")
			}
		case "additional-fields":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AdditionalMinusFields.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"additional-fields\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OneOfBugs")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfOneOfBugs) {
					name = jsonFieldsNameOfOneOfBugs[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode encodes OneVariantHasNoUniqueFields as json.
func (s OneVariantHasNoUniqueFields) Encode(e *jx.Writer) {
	switch s.Type {
	case OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields:
		s.OneVariantHasNoUniqueFields0.Encode(e)
	case OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields:
		s.OneVariantHasNoUniqueFields1.Encode(e)
	}
}

// Decode decodes OneVariantHasNoUniqueFields from json.
func (s *OneVariantHasNoUniqueFields) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneVariantHasNoUniqueFields to nil")
	}
	// Sum type fields.
	if d.Next() != jx.Object {
		return errors.Errorf("unexpected json type %q", d.Next())
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "d":
				found = true
				s.Type = OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields
	}
	switch s.Type {
	case OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields:
		if err := s.OneVariantHasNoUniqueFields0.Decode(d); err != nil {
			return err
		}
	case OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields:
		if err := s.OneVariantHasNoUniqueFields1.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// Encode implements json.Marshaler.
func (s OneVariantHasNoUniqueFields0) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"a\"" + ":")
		e.Str(s.A)
	}
	{
		if s.B.Set {
			e.Comma()
		}
		if s.B.Set {
			e.RawStr("\"b\"" + ":")
			s.B.Encode(e)
		}
	}
	{
		e.Comma()

		e.RawStr("\"c\"" + ":")
		e.Str(s.C)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfOneVariantHasNoUniqueFields0 = [3]string{
	0: "a",
	1: "b",
	2: "c",
}

// Decode decodes OneVariantHasNoUniqueFields0 from json.
func (s *OneVariantHasNoUniqueFields0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneVariantHasNoUniqueFields0 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "a":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.A = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"a\"")
			}
		case "b":
			if err := func() error {
				s.B.Reset()
				if err := s.B.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"b\"")
			}
		case "c":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.C = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"c\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OneVariantHasNoUniqueFields0")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfOneVariantHasNoUniqueFields0) {
					name = jsonFieldsNameOfOneVariantHasNoUniqueFields0[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s OneVariantHasNoUniqueFields1) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"a\"" + ":")
		e.Str(s.A)
	}
	{
		if s.B.Set {
			e.Comma()
		}
		if s.B.Set {
			e.RawStr("\"b\"" + ":")
			s.B.Encode(e)
		}
	}
	{
		e.Comma()

		e.RawStr("\"c\"" + ":")
		e.Str(s.C)
	}
	{
		if s.D.Set {
			e.Comma()
		}
		if s.D.Set {
			e.RawStr("\"d\"" + ":")
			s.D.Encode(e)
		}
	}
	e.ObjEnd()
}

var jsonFieldsNameOfOneVariantHasNoUniqueFields1 = [4]string{
	0: "a",
	1: "b",
	2: "c",
	3: "d",
}

// Decode decodes OneVariantHasNoUniqueFields1 from json.
func (s *OneVariantHasNoUniqueFields1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OneVariantHasNoUniqueFields1 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "a":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.A = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"a\"")
			}
		case "b":
			if err := func() error {
				s.B.Reset()
				if err := s.B.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"b\"")
			}
		case "c":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.C = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"c\"")
			}
		case "d":
			if err := func() error {
				s.D.Reset()
				if err := s.D.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"d\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OneVariantHasNoUniqueFields1")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfOneVariantHasNoUniqueFields1) {
					name = jsonFieldsNameOfOneVariantHasNoUniqueFields1[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode encodes AnyOfTest as json.
func (o OptAnyOfTest) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnyOfTest from json.
func (o *OptAnyOfTest) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnyOfTest to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptAnyOfTest", d.Next())
	}
}

// Encode encodes AnyTest as json.
func (o OptAnyTest) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnyTest from json.
func (o *OptAnyTest) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnyTest to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptAnyTest", d.Next())
	}
}

// Encode encodes AnyTestAnyMap as json.
func (o OptAnyTestAnyMap) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnyTestAnyMap from json.
func (o *OptAnyTestAnyMap) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnyTestAnyMap to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		o.Value = make(AnyTestAnyMap)
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptAnyTestAnyMap", d.Next())
	}
}

// Encode encodes ArrayTest as json.
func (o OptArrayTest) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ArrayTest from json.
func (o *OptArrayTest) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptArrayTest to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptArrayTest", d.Next())
	}
}

// Encode encodes Data as json.
func (o OptData) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Data from json.
func (o *OptData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptData to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptData", d.Next())
	}
}

// Encode encodes time.Time as json.
func (o OptDate) Encode(e *jx.Writer, format func(*jx.Writer, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDate to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := format(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptDate", d.Next())
	}
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Writer, format func(*jx.Writer, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := format(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptDateTime", d.Next())
	}
}

// Encode encodes DefaultTestEnum as json.
func (o OptDefaultTestEnum) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DefaultTestEnum from json.
func (o *OptDefaultTestEnum) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDefaultTestEnum to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptDefaultTestEnum", d.Next())
	}
}

// Encode encodes time.Duration as json.
func (o OptDuration) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	json.EncodeDuration(e, o.Value)
}

// Decode decodes time.Duration from json.
func (o *OptDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDuration to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := json.DecodeDuration(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptDuration", d.Next())
	}
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	switch d.Next() {
	case jx.Number:
		o.Set = true
		v, err := d.Float64()
		if err != nil {
			return err
		}
		o.Value = float64(v)
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptFloat64", d.Next())
	}
}

// Encode encodes ID as json.
func (o OptID) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ID from json.
func (o *OptID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptID to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptID", d.Next())
	}
}

// Encode encodes net.IP as json.
func (o OptIP) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes net.IP from json.
func (o *OptIP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIP to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := json.DecodeIP(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptIP", d.Next())
	}
}

// Encode encodes net.IP as json.
func (o OptIPv4) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes net.IP from json.
func (o *OptIPv4) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIPv4 to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := json.DecodeIP(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptIPv4", d.Next())
	}
}

// Encode encodes net.IP as json.
func (o OptIPv6) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes net.IP from json.
func (o *OptIPv6) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIPv6 to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := json.DecodeIP(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptIPv6", d.Next())
	}
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	switch d.Next() {
	case jx.Number:
		o.Set = true
		v, err := d.Int()
		if err != nil {
			return err
		}
		o.Value = int(v)
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptInt", d.Next())
	}
}

// Encode encodes MapWithProperties as json.
func (o OptMapWithProperties) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MapWithProperties from json.
func (o *OptMapWithProperties) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMapWithProperties to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptMapWithProperties", d.Next())
	}
}

// Encode encodes MapWithPropertiesInlinedSubMap as json.
func (o OptMapWithPropertiesInlinedSubMap) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MapWithPropertiesInlinedSubMap from json.
func (o *OptMapWithPropertiesInlinedSubMap) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMapWithPropertiesInlinedSubMap to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		o.Value = make(MapWithPropertiesInlinedSubMap)
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptMapWithPropertiesInlinedSubMap", d.Next())
	}
}

// Encode encodes MaxPropertiesTest as json.
func (o OptMaxPropertiesTest) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MaxPropertiesTest from json.
func (o *OptMaxPropertiesTest) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMaxPropertiesTest to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptMaxPropertiesTest", d.Next())
	}
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptNilString", d.Next())
	}
}

// Encode encodes []string as json.
func (o OptNilStringArray) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	if len(o.Value) >= 1 {
		// Encode first element without comma.
		{
			elem := o.Value[0]
			e.Str(elem)
		}
		for _, elem := range o.Value[1:] {
			e.Comma()
			e.Str(elem)
		}
	}
	e.ArrEnd()
}

// Decode decodes []string from json.
func (o *OptNilStringArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringArray to nil")
	}
	switch d.Next() {
	case jx.Array:
		o.Set = true
		o.Null = false
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem string
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			o.Value = append(o.Value, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		var v []string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptNilStringArray", d.Next())
	}
}

// Encode encodes NullableEnums as json.
func (o OptNullableEnums) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes NullableEnums from json.
func (o *OptNullableEnums) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNullableEnums to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptNullableEnums", d.Next())
	}
}

// Encode encodes Pet as json.
func (o OptPet) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Pet from json.
func (o *OptPet) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPet to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptPet", d.Next())
	}
}

// Encode encodes PetName as json.
func (o OptPetName) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PetName from json.
func (o *OptPetName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPetName to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptPetName", d.Next())
	}
}

// Encode encodes PetType as json.
func (o OptPetType) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PetType from json.
func (o *OptPetType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPetType to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptPetType", d.Next())
	}
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptString", d.Next())
	}
}

// Encode encodes StringMap as json.
func (o OptStringMap) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes StringMap from json.
func (o *OptStringMap) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringMap to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		o.Value = make(StringMap)
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptStringMap", d.Next())
	}
}

// Encode encodes StringStringMap as json.
func (o OptStringStringMap) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes StringStringMap from json.
func (o *OptStringStringMap) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringStringMap to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		o.Value = make(StringStringMap)
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptStringStringMap", d.Next())
	}
}

// Encode encodes time.Time as json.
func (o OptTime) Encode(e *jx.Writer, format func(*jx.Writer, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTime to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := format(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptTime", d.Next())
	}
}

// Encode encodes url.URL as json.
func (o OptURI) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *OptURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptURI to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := json.DecodeURI(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptURI", d.Next())
	}
}

// Encode encodes uuid.UUID as json.
func (o OptUUID) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *OptUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUUID to nil")
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := json.DecodeUUID(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptUUID", d.Next())
	}
}

// Encode encodes ValidationStringMap as json.
func (o OptValidationStringMap) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ValidationStringMap from json.
func (o *OptValidationStringMap) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptValidationStringMap to nil")
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		o.Value = make(ValidationStringMap)
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("unexpected type %q while reading OptValidationStringMap", d.Next())
	}
}

// Encode implements json.Marshaler.
func (s Pet) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if s.Primary != nil {
			if !first {
				e.Comma()
			}
			first = false
		}
		if s.Primary != nil {
			e.RawStr("\"primary\"" + ":")
			s.Primary.Encode(e)
		}
	}
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"id\"" + ":")
		e.Int64(s.ID)
	}
	{
		e.Comma()

		e.RawStr("\"unique_id\"" + ":")
		json.EncodeUUID(e, s.UniqueID)
	}
	{
		e.Comma()

		e.RawStr("\"name\"" + ":")
		e.Str(s.Name)
	}
	{
		if s.Type.Set {
			e.Comma()
		}
		if s.Type.Set {
			e.RawStr("\"type\"" + ":")
			s.Type.Encode(e)
		}
	}
	{
		e.Comma()

		e.RawStr("\"kind\"" + ":")
		s.Kind.Encode(e)
	}
	{
		if s.Tag.Set {
			e.Comma()
		}
		if s.Tag.Set {
			e.RawStr("\"tag\"" + ":")
			s.Tag.Encode(e)
		}
	}
	{
		e.Comma()

		e.RawStr("\"ip\"" + ":")
		json.EncodeIP(e, s.IP)
	}
	{
		e.Comma()

		e.RawStr("\"ip_v4\"" + ":")
		json.EncodeIP(e, s.IPV4)
	}
	{
		e.Comma()

		e.RawStr("\"ip_v6\"" + ":")
		json.EncodeIP(e, s.IPV6)
	}
	{
		e.Comma()

		e.RawStr("\"uri\"" + ":")
		json.EncodeURI(e, s.URI)
	}
	{
		e.Comma()

		e.RawStr("\"birthday\"" + ":")
		json.EncodeDate(e, s.Birthday)
	}
	{
		e.Comma()

		e.RawStr("\"rate\"" + ":")
		json.EncodeDuration(e, s.Rate)
	}
	{
		e.Comma()

		e.RawStr("\"nickname\"" + ":")
		s.Nickname.Encode(e)
	}
	{
		if s.NullStr.Set {
			e.Comma()
		}
		if s.NullStr.Set {
			e.RawStr("\"nullStr\"" + ":")
			s.NullStr.Encode(e)
		}
	}
	{
		if s.Friends != nil {
			e.Comma()
		}
		if s.Friends != nil {
			e.RawStr("\"friends\"" + ":")
			e.ArrStart()
			if len(s.Friends) >= 1 {
				// Encode first element without comma.
				{
					elem := s.Friends[0]
					elem.Encode(e)
				}
				for _, elem := range s.Friends[1:] {
					e.Comma()
					elem.Encode(e)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Next.Set {
			e.Comma()
		}
		if s.Next.Set {
			e.RawStr("\"next\"" + ":")
			s.Next.Encode(e)
		}
	}
	{
		if s.TestInteger1.Set {
			e.Comma()
		}
		if s.TestInteger1.Set {
			e.RawStr("\"testInteger1\"" + ":")
			s.TestInteger1.Encode(e)
		}
	}
	{
		if s.TestFloat1.Set {
			e.Comma()
		}
		if s.TestFloat1.Set {
			e.RawStr("\"testFloat1\"" + ":")
			s.TestFloat1.Encode(e)
		}
	}
	{
		if s.TestArray1 != nil {
			e.Comma()
		}
		if s.TestArray1 != nil {
			e.RawStr("\"testArray1\"" + ":")
			e.ArrStart()
			if len(s.TestArray1) >= 1 {
				// Encode first element without comma.
				{
					elem := s.TestArray1[0]
					e.ArrStart()
					if len(elem) >= 1 {
						// Encode first element without comma.
						{
							elem := elem[0]
							e.Str(elem)
						}
						for _, elem := range elem[1:] {
							e.Comma()
							e.Str(elem)
						}
					}
					e.ArrEnd()
				}
				for _, elem := range s.TestArray1[1:] {
					e.Comma()
					e.ArrStart()
					if len(elem) >= 1 {
						// Encode first element without comma.
						{
							elem := elem[0]
							e.Str(elem)
						}
						for _, elem := range elem[1:] {
							e.Comma()
							e.Str(elem)
						}
					}
					e.ArrEnd()
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.TestArray2.Set {
			e.Comma()
		}
		if s.TestArray2.Set {
			e.RawStr("\"testArray2\"" + ":")
			s.TestArray2.Encode(e)
		}
	}
	{
		if s.TestMap.Set {
			e.Comma()
		}
		if s.TestMap.Set {
			e.RawStr("\"testMap\"" + ":")
			s.TestMap.Encode(e)
		}
	}
	{
		if s.TestMapWithProps.Set {
			e.Comma()
		}
		if s.TestMapWithProps.Set {
			e.RawStr("\"testMapWithProps\"" + ":")
			s.TestMapWithProps.Encode(e)
		}
	}
	{
		if s.TestAny.Set {
			e.Comma()
		}
		if s.TestAny.Set {
			e.RawStr("\"testAny\"" + ":")
			s.TestAny.Encode(e)
		}
	}
	{
		if s.TestAnyOf.Set {
			e.Comma()
		}
		if s.TestAnyOf.Set {
			e.RawStr("\"testAnyOf\"" + ":")
			s.TestAnyOf.Encode(e)
		}
	}
	{
		if s.TestMaxProperties.Set {
			e.Comma()
		}
		if s.TestMaxProperties.Set {
			e.RawStr("\"testMaxProperties\"" + ":")
			s.TestMaxProperties.Encode(e)
		}
	}
	{
		if s.TestDate.Set {
			e.Comma()
		}
		if s.TestDate.Set {
			e.RawStr("\"testDate\"" + ":")
			s.TestDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.TestDuration.Set {
			e.Comma()
		}
		if s.TestDuration.Set {
			e.RawStr("\"testDuration\"" + ":")
			s.TestDuration.Encode(e)
		}
	}
	{
		if s.TestTime.Set {
			e.Comma()
		}
		if s.TestTime.Set {
			e.RawStr("\"testTime\"" + ":")
			s.TestTime.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.TestDateTime.Set {
			e.Comma()
		}
		if s.TestDateTime.Set {
			e.RawStr("\"testDateTime\"" + ":")
			s.TestDateTime.Encode(e, json.EncodeDateTime)
		}
	}
	e.ObjEnd()
}

var jsonFieldsNameOfPet = [30]string{
	0:  "primary",
	1:  "id",
	2:  "unique_id",
	3:  "name",
	4:  "type",
	5:  "kind",
	6:  "tag",
	7:  "ip",
	8:  "ip_v4",
	9:  "ip_v6",
	10: "uri",
	11: "birthday",
	12: "rate",
	13: "nickname",
	14: "nullStr",
	15: "friends",
	16: "next",
	17: "testInteger1",
	18: "testFloat1",
	19: "testArray1",
	20: "testArray2",
	21: "testMap",
	22: "testMapWithProps",
	23: "testAny",
	24: "testAnyOf",
	25: "testMaxProperties",
	26: "testDate",
	27: "testDuration",
	28: "testTime",
	29: "testDateTime",
}

// Decode decodes Pet from json.
func (s *Pet) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Pet to nil")
	}
	var requiredBitSet [4]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "primary":
			if err := func() error {
				s.Primary = nil
				var elem Pet
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Primary = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primary\"")
			}
		case "id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int64()
				s.ID = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "unique_id":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeUUID(d)
				s.UniqueID = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unique_id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "kind":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.Kind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"kind\"")
			}
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "ip":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.IP = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "ip_v4":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.IPV4 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_v4\"")
			}
		case "ip_v6":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.IPV6 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_v6\"")
			}
		case "uri":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeURI(d)
				s.URI = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uri\"")
			}
		case "birthday":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDate(d)
				s.Birthday = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"birthday\"")
			}
		case "rate":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeDuration(d)
				s.Rate = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rate\"")
			}
		case "nickname":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				if err := s.Nickname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nickname\"")
			}
		case "nullStr":
			if err := func() error {
				s.NullStr.Reset()
				if err := s.NullStr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nullStr\"")
			}
		case "friends":
			if err := func() error {
				s.Friends = nil
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Pet
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Friends = append(s.Friends, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"friends\"")
			}
		case "next":
			if err := func() error {
				s.Next.Reset()
				if err := s.Next.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next\"")
			}
		case "testInteger1":
			if err := func() error {
				s.TestInteger1.Reset()
				if err := s.TestInteger1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testInteger1\"")
			}
		case "testFloat1":
			if err := func() error {
				s.TestFloat1.Reset()
				if err := s.TestFloat1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testFloat1\"")
			}
		case "testArray1":
			if err := func() error {
				s.TestArray1 = nil
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = nil
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.TestArray1 = append(s.TestArray1, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testArray1\"")
			}
		case "testArray2":
			if err := func() error {
				s.TestArray2.Reset()
				if err := s.TestArray2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testArray2\"")
			}
		case "testMap":
			if err := func() error {
				s.TestMap.Reset()
				if err := s.TestMap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testMap\"")
			}
		case "testMapWithProps":
			if err := func() error {
				s.TestMapWithProps.Reset()
				if err := s.TestMapWithProps.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testMapWithProps\"")
			}
		case "testAny":
			if err := func() error {
				s.TestAny.Reset()
				if err := s.TestAny.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testAny\"")
			}
		case "testAnyOf":
			if err := func() error {
				s.TestAnyOf.Reset()
				if err := s.TestAnyOf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testAnyOf\"")
			}
		case "testMaxProperties":
			if err := func() error {
				s.TestMaxProperties.Reset()
				if err := s.TestMaxProperties.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testMaxProperties\"")
			}
		case "testDate":
			if err := func() error {
				s.TestDate.Reset()
				if err := s.TestDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testDate\"")
			}
		case "testDuration":
			if err := func() error {
				s.TestDuration.Reset()
				if err := s.TestDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testDuration\"")
			}
		case "testTime":
			if err := func() error {
				s.TestTime.Reset()
				if err := s.TestTime.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testTime\"")
			}
		case "testDateTime":
			if err := func() error {
				s.TestDateTime.Reset()
				if err := s.TestDateTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testDateTime\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Pet")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [4]uint8{
		0b10101110,
		0b00111111,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPet) {
					name = jsonFieldsNameOfPet[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s PetGetDef) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"message\"" + ":")
		e.Str(s.Message)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfPetGetDef = [1]string{
	0: "message",
}

// Decode decodes PetGetDef from json.
func (s *PetGetDef) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PetGetDef to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Message = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PetGetDef")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPetGetDef) {
					name = jsonFieldsNameOfPetGetDef[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode encodes PetKind as json.
func (s PetKind) Encode(e *jx.Writer) {
	e.Str(string(s))
}

// Decode decodes PetKind from json.
func (s *PetKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PetKind to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PetKind(v) {
	case PetKindBig:
		*s = PetKindBig
	case PetKindSmol:
		*s = PetKindSmol
	default:
		*s = PetKind(v)
	}

	return nil
}

// Encode encodes PetName as json.
func (s PetName) Encode(e *jx.Writer) {
	unwrapped := string(s)
	e.Str(unwrapped)
}

// Decode decodes PetName from json.
func (s *PetName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PetName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PetName(unwrapped)
	return nil
}

// Encode encodes PetType as json.
func (s PetType) Encode(e *jx.Writer) {
	e.Str(string(s))
}

// Decode decodes PetType from json.
func (s *PetType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PetType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PetType(v) {
	case PetTypeFifa:
		*s = PetTypeFifa
	case PetTypeFofa:
		*s = PetTypeFofa
	default:
		*s = PetType(v)
	}

	return nil
}

// Encode implements json.Marshaler.
func (s RecursiveMap) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		{
			if s.OptionalRecursiveField != nil {
				if !first {
					e.Comma()
				}
				first = false
			}
			if s.OptionalRecursiveField != nil {
				e.RawStr("\"optional_recursive_field\"" + ":")
				s.OptionalRecursiveField.Encode(e)
			}
		}
	}
	for k, elem := range s.AdditionalProps {
		if !first {
			e.Comma()
		}
		first = false
		e.Str(k)
		e.RawStr(`:`)

		elem.Encode(e)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfRecursiveMap = [1]string{
	0: "optional_recursive_field",
}

// Decode decodes RecursiveMap from json.
func (s *RecursiveMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecursiveMap to nil")
	}

	m := s.AdditionalProps
	if m == nil {
		m = map[string]RecursiveMap{}
		s.AdditionalProps = m
	}
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "optional_recursive_field":
			if err := func() error {
				s.OptionalRecursiveField = nil
				var elem RecursiveMap
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.OptionalRecursiveField = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_recursive_field\"")
			}
		default:
			var elem RecursiveMap
			if err := func() error {
				if err := elem.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			m[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RecursiveMap")
	}

	return nil
}

// Encode implements json.Marshaler.
func (s StringMap) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	for k, elem := range s {
		if !first {
			e.Comma()
		}
		first = false
		e.Str(k)
		e.RawStr(`:`)

		e.Str(elem)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfStringMap = [0]string{}

// Decode decodes StringMap from json.
func (s StringMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StringMap to nil")
	}

	m := s
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			var elem string
			if err := func() error {
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			m[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StringMap")
	}

	return nil
}

// Encode implements json.Marshaler.
func (s StringStringMap) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	for k, elem := range s {
		if !first {
			e.Comma()
		}
		first = false
		e.Str(k)
		e.RawStr(`:`)

		elem.Encode(e)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfStringStringMap = [0]string{}

// Decode decodes StringStringMap from json.
func (s StringStringMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StringStringMap to nil")
	}

	m := s
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			var elem StringMap
			if err := func() error {
				elem = make(StringMap)
				if err := elem.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			m[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StringStringMap")
	}

	return nil
}

// Encode implements json.Marshaler.
func (s TestObjectQueryParameterOK) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"style\"" + ":")
		e.Str(s.Style)
	}
	{
		e.Comma()

		e.RawStr("\"min\"" + ":")
		e.Int(s.Min)
	}
	{
		e.Comma()

		e.RawStr("\"max\"" + ":")
		e.Int(s.Max)
	}
	{
		e.Comma()

		e.RawStr("\"filter\"" + ":")
		e.Str(s.Filter)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfTestObjectQueryParameterOK = [4]string{
	0: "style",
	1: "min",
	2: "max",
	3: "filter",
}

// Decode decodes TestObjectQueryParameterOK from json.
func (s *TestObjectQueryParameterOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestObjectQueryParameterOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "style":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Style = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"style\"")
			}
		case "min":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.Min = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"min\"")
			}
		case "max":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Int()
				s.Max = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max\"")
			}
		case "filter":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Filter = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filter\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestObjectQueryParameterOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTestObjectQueryParameterOK) {
					name = jsonFieldsNameOfTestObjectQueryParameterOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Encode implements json.Marshaler.
func (s ValidationStringMap) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	for k, elem := range s {
		if !first {
			e.Comma()
		}
		first = false
		e.Str(k)
		e.RawStr(`:`)

		e.Str(elem)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfValidationStringMap = [0]string{}

// Decode decodes ValidationStringMap from json.
func (s ValidationStringMap) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ValidationStringMap to nil")
	}
	var propertiesCount int

	m := s
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		propertiesCount++
		switch string(k) {
		default:
			var elem string
			if err := func() error {
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			m[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ValidationStringMap")
	}
	// Validate properties count.
	if err := (validate.Object{
		MinProperties:    1,
		MinPropertiesSet: true,
		MaxProperties:    4,
		MaxPropertiesSet: true,
	}).ValidateProperties(propertiesCount); err != nil {
		return errors.Wrap(err, "object")
	}

	return nil
}
