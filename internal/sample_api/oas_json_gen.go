// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

// Encode implements json.Marshaler.
func (s Data) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"id\"" + ":")
		s.ID.Encode(e)
	}
	{
		e.Comma()

		e.RawStr("\"description\"" + ":")
		s.Description.Encode(e)
	}
	{
		e.Comma()

		e.RawStr("\"email\"" + ":")
		e.Str(s.Email)
	}
	{
		e.Comma()

		e.RawStr("\"hostname\"" + ":")
		e.Str(s.Hostname)
	}
	{
		e.Comma()

		e.RawStr("\"format\"" + ":")
		e.Str(s.Format)
	}
	{
		e.Comma()

		e.RawStr("\"base64\"" + ":")
		e.Base64(s.Base64)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfData = [6]string{
	0: "id",
	1: "description",
	2: "email",
	3: "hostname",
	4: "format",
	5: "base64",
}

// Decode decodes Data from json.
func (s *Data) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Data to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := s.ID.Decode(d); err != nil {
				return err
			}
		case "description":
			requiredBitSet[0] |= 1 << 1
			if err := s.Description.Decode(d); err != nil {
				return err
			}
		case "email":
			requiredBitSet[0] |= 1 << 2
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "hostname":
			requiredBitSet[0] |= 1 << 3
			v, err := d.Str()
			s.Hostname = string(v)
			if err != nil {
				return err
			}
		case "format":
			requiredBitSet[0] |= 1 << 4
			v, err := d.Str()
			s.Format = string(v)
			if err != nil {
				return err
			}
		case "base64":
			requiredBitSet[0] |= 1 << 5
			v, err := d.Base64()
			s.Base64 = []byte(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfData) {
					name = jsonFieldsNameOfData[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode encodes DataDescription as json.
func (s DataDescription) Encode(e *jx.Writer) {
	switch s.Type {
	case DescriptionDetailedDataDescription:
		s.DescriptionDetailed.Encode(e)
	case DescriptionSimpleDataDescription:
		s.DescriptionSimple.Encode(e)
	}
}

// Decode decodes DataDescription from json.
func (s *DataDescription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DataDescription to nil`)
	}
	// Sum type fields.
	if d.Next() != jx.Object {
		return errors.Errorf("unexpected json type %q", d.Next())
	}
	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "name":
				found = true
				s.Type = DescriptionDetailedDataDescription
			case "count":
				found = true
				s.Type = DescriptionDetailedDataDescription
			case "id":
				found = true
				s.Type = DescriptionDetailedDataDescription
			case "description":
				found = true
				s.Type = DescriptionSimpleDataDescription
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case DescriptionDetailedDataDescription:
		if err := s.DescriptionDetailed.Decode(d); err != nil {
			return err
		}
	case DescriptionSimpleDataDescription:
		if err := s.DescriptionSimple.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// Encode implements json.Marshaler.
func (s DescriptionDetailed) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"name\"" + ":")
		e.Str(s.Name)
	}
	{
		e.Comma()

		e.RawStr("\"count\"" + ":")
		e.Int(s.Count)
	}
	{
		if s.ID.Set {
			e.Comma()
		}
		if s.ID.Set {
			e.RawStr("\"id\"" + ":")
			s.ID.Encode(e)
		}
	}
	e.ObjEnd()
}

var jsonFieldsNameOfDescriptionDetailed = [3]string{
	0: "name",
	1: "count",
	2: "id",
}

// Decode decodes DescriptionDetailed from json.
func (s *DescriptionDetailed) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DescriptionDetailed to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "count":
			requiredBitSet[0] |= 1 << 1
			v, err := d.Int()
			s.Count = int(v)
			if err != nil {
				return err
			}
		case "id":
			requiredBitSet[0] |= 1 << 2
			s.ID.Reset()
			if err := s.ID.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDescriptionDetailed) {
					name = jsonFieldsNameOfDescriptionDetailed[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s DescriptionSimple) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"description\"" + ":")
		e.Str(s.Description)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfDescriptionSimple = [1]string{
	0: "description",
}

// Decode decodes DescriptionSimple from json.
func (s *DescriptionSimple) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DescriptionSimple to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			requiredBitSet[0] |= 1 << 0
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDescriptionSimple) {
					name = jsonFieldsNameOfDescriptionSimple[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s Error) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"code\"" + ":")
		e.Int64(s.Code)
	}
	{
		e.Comma()

		e.RawStr("\"message\"" + ":")
		e.Str(s.Message)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfError = [2]string{
	0: "code",
	1: "message",
}

// Decode decodes Error from json.
func (s *Error) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Error to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			requiredBitSet[0] |= 1 << 0
			v, err := d.Int64()
			s.Code = int64(v)
			if err != nil {
				return err
			}
		case "message":
			requiredBitSet[0] |= 1 << 1
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfError) {
					name = jsonFieldsNameOfError[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s ErrorStatusCode) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	e.ObjEnd()
}

var jsonFieldsNameOfErrorStatusCode = [0]string{}

// Decode decodes ErrorStatusCode from json.
func (s *ErrorStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ErrorStatusCode to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfErrorStatusCode) {
					name = jsonFieldsNameOfErrorStatusCode[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s FoobarPutDef) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	e.ObjEnd()
}

var jsonFieldsNameOfFoobarPutDef = [0]string{}

// Decode decodes FoobarPutDef from json.
func (s *FoobarPutDef) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode FoobarPutDef to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfFoobarPutDef) {
					name = jsonFieldsNameOfFoobarPutDef[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s FoobarPutDefStatusCode) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	e.ObjEnd()
}

var jsonFieldsNameOfFoobarPutDefStatusCode = [0]string{}

// Decode decodes FoobarPutDefStatusCode from json.
func (s *FoobarPutDefStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode FoobarPutDefStatusCode to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfFoobarPutDefStatusCode) {
					name = jsonFieldsNameOfFoobarPutDefStatusCode[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s Hash) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"raw\"" + ":")
		e.Base64(s.Raw)
	}
	{
		e.Comma()

		e.RawStr("\"hex\"" + ":")
		e.Str(s.Hex)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfHash = [2]string{
	0: "raw",
	1: "hex",
}

// Decode decodes Hash from json.
func (s *Hash) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Hash to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "raw":
			requiredBitSet[0] |= 1 << 0
			v, err := d.Base64()
			s.Raw = []byte(v)
			if err != nil {
				return err
			}
		case "hex":
			requiredBitSet[0] |= 1 << 1
			v, err := d.Str()
			s.Hex = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfHash) {
					name = jsonFieldsNameOfHash[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode encodes ID as json.
func (s ID) Encode(e *jx.Writer) {
	switch s.Type {
	case StringID:
		e.Str(s.String)
	case IntID:
		e.Int(s.Int)
	}
}

// Decode decodes ID from json.
func (s *ID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ID to nil`)
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringID
	case jx.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntID
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// Encode encodes string as json.
func (o NilString) Encode(e *jx.Writer) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *NilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode NilString to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		var v string
		o.Value = v
		o.Null = true
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading NilString`, d.Next())
	}
}

// Encode implements json.Marshaler.
func (s NotFound) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	e.ObjEnd()
}

var jsonFieldsNameOfNotFound = [0]string{}

// Decode decodes NotFound from json.
func (s *NotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode NotFound to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfNotFound) {
					name = jsonFieldsNameOfNotFound[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode encodes Data as json.
func (o OptData) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Data from json.
func (o *OptData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptData to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptData`, d.Next())
	}
}

// Encode encodes time.Duration as json.
func (o OptDuration) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	json.EncodeDuration(e, o.Value)
}

// Decode decodes time.Duration from json.
func (o *OptDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptDuration to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := json.DecodeDuration(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptDuration`, d.Next())
	}
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptFloat64 to nil`)
	}
	switch d.Next() {
	case jx.Number:
		o.Set = true
		v, err := d.Float64()
		if err != nil {
			return err
		}
		o.Value = float64(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptFloat64`, d.Next())
	}
}

// Encode encodes ID as json.
func (o OptID) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ID from json.
func (o *OptID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptID to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptID`, d.Next())
	}
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptInt to nil`)
	}
	switch d.Next() {
	case jx.Number:
		o.Set = true
		v, err := d.Int()
		if err != nil {
			return err
		}
		o.Value = int(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptInt`, d.Next())
	}
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptNilString to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptNilString`, d.Next())
	}
}

// Encode encodes Pet as json.
func (o OptPet) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Pet from json.
func (o *OptPet) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptPet to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptPet`, d.Next())
	}
}

// Encode encodes PetName as json.
func (o OptPetName) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PetName from json.
func (o *OptPetName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptPetName to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptPetName`, d.Next())
	}
}

// Encode encodes PetType as json.
func (o OptPetType) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PetType from json.
func (o *OptPetType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptPetType to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptPetType`, d.Next())
	}
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptString to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptString`, d.Next())
	}
}

// Encode encodes time.Time as json.
func (o OptTime) Encode(e *jx.Writer, format func(*jx.Writer, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptTime to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := format(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptTime`, d.Next())
	}
}

// Encode encodes uuid.UUID as json.
func (o OptUUID) Encode(e *jx.Writer) {
	if !o.Set {
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *OptUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptUUID to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := json.DecodeUUID(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptUUID`, d.Next())
	}
}

// Encode implements json.Marshaler.
func (s Pet) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if s.Primary != nil {
			if !first {
				e.Comma()
			}
			first = false
		}
		if s.Primary != nil {
			e.RawStr("\"primary\"" + ":")
			s.Primary.Encode(e)
		}
	}
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"id\"" + ":")
		e.Int64(s.ID)
	}
	{
		e.Comma()

		e.RawStr("\"unique_id\"" + ":")
		json.EncodeUUID(e, s.UniqueID)
	}
	{
		e.Comma()

		e.RawStr("\"name\"" + ":")
		e.Str(s.Name)
	}
	{
		if s.Type.Set {
			e.Comma()
		}
		if s.Type.Set {
			e.RawStr("\"type\"" + ":")
			s.Type.Encode(e)
		}
	}
	{
		e.Comma()

		e.RawStr("\"kind\"" + ":")
		s.Kind.Encode(e)
	}
	{
		if s.Tag.Set {
			e.Comma()
		}
		if s.Tag.Set {
			e.RawStr("\"tag\"" + ":")
			s.Tag.Encode(e)
		}
	}
	{
		e.Comma()

		e.RawStr("\"ip\"" + ":")
		json.EncodeIP(e, s.IP)
	}
	{
		e.Comma()

		e.RawStr("\"ip_v4\"" + ":")
		json.EncodeIP(e, s.IPV4)
	}
	{
		e.Comma()

		e.RawStr("\"ip_v6\"" + ":")
		json.EncodeIP(e, s.IPV6)
	}
	{
		e.Comma()

		e.RawStr("\"uri\"" + ":")
		json.EncodeURI(e, s.URI)
	}
	{
		e.Comma()

		e.RawStr("\"birthday\"" + ":")
		json.EncodeDate(e, s.Birthday)
	}
	{
		e.Comma()

		e.RawStr("\"rate\"" + ":")
		json.EncodeDuration(e, s.Rate)
	}
	{
		e.Comma()

		e.RawStr("\"nickname\"" + ":")
		s.Nickname.Encode(e)
	}
	{
		if s.NullStr.Set {
			e.Comma()
		}
		if s.NullStr.Set {
			e.RawStr("\"nullStr\"" + ":")
			s.NullStr.Encode(e)
		}
	}
	{
		if s.Friends != nil {
			e.Comma()
		}
		if s.Friends != nil {
			e.RawStr("\"friends\"" + ":")
			e.ArrStart()
			if len(s.Friends) >= 1 {
				// Encode first element without comma.
				{
					elem := s.Friends[0]
					elem.Encode(e)
				}
				for _, elem := range s.Friends[1:] {
					e.Comma()
					elem.Encode(e)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Next.Set {
			e.Comma()
		}
		if s.Next.Set {
			e.RawStr("\"next\"" + ":")
			s.Next.Encode(e)
		}
	}
	{
		if s.TestInteger1.Set {
			e.Comma()
		}
		if s.TestInteger1.Set {
			e.RawStr("\"testInteger1\"" + ":")
			s.TestInteger1.Encode(e)
		}
	}
	{
		if s.TestFloat1.Set {
			e.Comma()
		}
		if s.TestFloat1.Set {
			e.RawStr("\"testFloat1\"" + ":")
			s.TestFloat1.Encode(e)
		}
	}
	{
		if s.TestArray1 != nil {
			e.Comma()
		}
		if s.TestArray1 != nil {
			e.RawStr("\"testArray1\"" + ":")
			e.ArrStart()
			if len(s.TestArray1) >= 1 {
				// Encode first element without comma.
				{
					elem := s.TestArray1[0]
					e.ArrStart()
					if len(elem) >= 1 {
						// Encode first element without comma.
						{
							elem := elem[0]
							e.Str(elem)
						}
						for _, elem := range elem[1:] {
							e.Comma()
							e.Str(elem)
						}
					}
					e.ArrEnd()
				}
				for _, elem := range s.TestArray1[1:] {
					e.Comma()
					e.ArrStart()
					if len(elem) >= 1 {
						// Encode first element without comma.
						{
							elem := elem[0]
							e.Str(elem)
						}
						for _, elem := range elem[1:] {
							e.Comma()
							e.Str(elem)
						}
					}
					e.ArrEnd()
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.TestDate.Set {
			e.Comma()
		}
		if s.TestDate.Set {
			e.RawStr("\"testDate\"" + ":")
			s.TestDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.TestDuration.Set {
			e.Comma()
		}
		if s.TestDuration.Set {
			e.RawStr("\"testDuration\"" + ":")
			s.TestDuration.Encode(e)
		}
	}
	{
		if s.TestTime.Set {
			e.Comma()
		}
		if s.TestTime.Set {
			e.RawStr("\"testTime\"" + ":")
			s.TestTime.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.TestDateTime.Set {
			e.Comma()
		}
		if s.TestDateTime.Set {
			e.RawStr("\"testDateTime\"" + ":")
			s.TestDateTime.Encode(e, json.EncodeDateTime)
		}
	}
	e.ObjEnd()
}

var jsonFieldsNameOfPet = [24]string{
	0:  "primary",
	1:  "id",
	2:  "unique_id",
	3:  "name",
	4:  "type",
	5:  "kind",
	6:  "tag",
	7:  "ip",
	8:  "ip_v4",
	9:  "ip_v6",
	10: "uri",
	11: "birthday",
	12: "rate",
	13: "nickname",
	14: "nullStr",
	15: "friends",
	16: "next",
	17: "testInteger1",
	18: "testFloat1",
	19: "testArray1",
	20: "testDate",
	21: "testDuration",
	22: "testTime",
	23: "testDateTime",
}

// Decode decodes Pet from json.
func (s *Pet) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Pet to nil`)
	}
	var requiredBitSet [3]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "primary":
			requiredBitSet[0] |= 1 << 0
			s.Primary = nil
			var elem Pet
			if err := elem.Decode(d); err != nil {
				return err
			}
			s.Primary = &elem
		case "id":
			requiredBitSet[0] |= 1 << 1
			v, err := d.Int64()
			s.ID = int64(v)
			if err != nil {
				return err
			}
		case "unique_id":
			requiredBitSet[0] |= 1 << 2
			v, err := json.DecodeUUID(d)
			s.UniqueID = v
			if err != nil {
				return err
			}
		case "name":
			requiredBitSet[0] |= 1 << 3
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "type":
			requiredBitSet[0] |= 1 << 4
			s.Type.Reset()
			if err := s.Type.Decode(d); err != nil {
				return err
			}
		case "kind":
			requiredBitSet[0] |= 1 << 5
			if err := s.Kind.Decode(d); err != nil {
				return err
			}
		case "tag":
			requiredBitSet[0] |= 1 << 6
			s.Tag.Reset()
			if err := s.Tag.Decode(d); err != nil {
				return err
			}
		case "ip":
			requiredBitSet[0] |= 1 << 7
			v, err := json.DecodeIP(d)
			s.IP = v
			if err != nil {
				return err
			}
		case "ip_v4":
			requiredBitSet[1] |= 1 << 0
			v, err := json.DecodeIP(d)
			s.IPV4 = v
			if err != nil {
				return err
			}
		case "ip_v6":
			requiredBitSet[1] |= 1 << 1
			v, err := json.DecodeIP(d)
			s.IPV6 = v
			if err != nil {
				return err
			}
		case "uri":
			requiredBitSet[1] |= 1 << 2
			v, err := json.DecodeURI(d)
			s.URI = v
			if err != nil {
				return err
			}
		case "birthday":
			requiredBitSet[1] |= 1 << 3
			v, err := json.DecodeDate(d)
			s.Birthday = v
			if err != nil {
				return err
			}
		case "rate":
			requiredBitSet[1] |= 1 << 4
			v, err := json.DecodeDuration(d)
			s.Rate = v
			if err != nil {
				return err
			}
		case "nickname":
			requiredBitSet[1] |= 1 << 5
			if err := s.Nickname.Decode(d); err != nil {
				return err
			}
		case "nullStr":
			requiredBitSet[1] |= 1 << 6
			s.NullStr.Reset()
			if err := s.NullStr.Decode(d); err != nil {
				return err
			}
		case "friends":
			requiredBitSet[1] |= 1 << 7
			s.Friends = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem Pet
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Friends = append(s.Friends, elem)
				return nil
			}); err != nil {
				return err
			}
		case "next":
			requiredBitSet[2] |= 1 << 0
			s.Next.Reset()
			if err := s.Next.Decode(d); err != nil {
				return err
			}
		case "testInteger1":
			requiredBitSet[2] |= 1 << 1
			s.TestInteger1.Reset()
			if err := s.TestInteger1.Decode(d); err != nil {
				return err
			}
		case "testFloat1":
			requiredBitSet[2] |= 1 << 2
			s.TestFloat1.Reset()
			if err := s.TestFloat1.Decode(d); err != nil {
				return err
			}
		case "testArray1":
			requiredBitSet[2] |= 1 << 3
			s.TestArray1 = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem []string
				elem = nil
				if err := d.Arr(func(d *jx.Decoder) error {
					var elemElem string
					v, err := d.Str()
					elemElem = string(v)
					if err != nil {
						return err
					}
					elem = append(elem, elemElem)
					return nil
				}); err != nil {
					return err
				}
				s.TestArray1 = append(s.TestArray1, elem)
				return nil
			}); err != nil {
				return err
			}
		case "testDate":
			requiredBitSet[2] |= 1 << 4
			s.TestDate.Reset()
			if err := s.TestDate.Decode(d, json.DecodeDate); err != nil {
				return err
			}
		case "testDuration":
			requiredBitSet[2] |= 1 << 5
			s.TestDuration.Reset()
			if err := s.TestDuration.Decode(d); err != nil {
				return err
			}
		case "testTime":
			requiredBitSet[2] |= 1 << 6
			s.TestTime.Reset()
			if err := s.TestTime.Decode(d, json.DecodeTime); err != nil {
				return err
			}
		case "testDateTime":
			requiredBitSet[2] |= 1 << 7
			s.TestDateTime.Reset()
			if err := s.TestDateTime.Decode(d, json.DecodeDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b10101110,
		0b00111111,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPet) {
					name = jsonFieldsNameOfPet[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s PetGetDef) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	{
		if !first {
			e.Comma()
		}
		first = false

		e.RawStr("\"message\"" + ":")
		e.Str(s.Message)
	}
	e.ObjEnd()
}

var jsonFieldsNameOfPetGetDef = [1]string{
	0: "message",
}

// Decode decodes PetGetDef from json.
func (s *PetGetDef) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetGetDef to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			requiredBitSet[0] |= 1 << 0
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPetGetDef) {
					name = jsonFieldsNameOfPetGetDef[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s PetGetDefStatusCode) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	e.ObjEnd()
}

var jsonFieldsNameOfPetGetDefStatusCode = [0]string{}

// Decode decodes PetGetDefStatusCode from json.
func (s *PetGetDefStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetGetDefStatusCode to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPetGetDefStatusCode) {
					name = jsonFieldsNameOfPetGetDefStatusCode[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode encodes PetKind as json.
func (s PetKind) Encode(e *jx.Writer) {
	e.Str(string(s))
}

// Decode decodes PetKind from json.
func (s *PetKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetKind to nil`)
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PetKind(v) {
	case PetKindBig:
		*s = PetKindBig
	case PetKindSmol:
		*s = PetKindSmol
	default:
		*s = PetKind(v)
	}

	return nil
}

// Encode encodes PetName as json.
func (s PetName) Encode(e *jx.Writer) {
	unwrapped := string(s)
	e.Str(unwrapped)
}

// Decode decodes PetName from json.
func (s *PetName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetName to nil`)
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PetName(unwrapped)
	return nil
}

// Encode encodes PetType as json.
func (s PetType) Encode(e *jx.Writer) {
	e.Str(string(s))
}

// Decode decodes PetType from json.
func (s *PetType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetType to nil`)
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PetType(v) {
	case PetTypeFifa:
		*s = PetTypeFifa
	case PetTypeFofa:
		*s = PetTypeFofa
	default:
		*s = PetType(v)
	}

	return nil
}

// Encode implements json.Marshaler.
func (s PetUpdateNameAliasPostDef) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	e.ObjEnd()
}

var jsonFieldsNameOfPetUpdateNameAliasPostDef = [0]string{}

// Decode decodes PetUpdateNameAliasPostDef from json.
func (s *PetUpdateNameAliasPostDef) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetUpdateNameAliasPostDef to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPetUpdateNameAliasPostDef) {
					name = jsonFieldsNameOfPetUpdateNameAliasPostDef[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s PetUpdateNameAliasPostDefStatusCode) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	e.ObjEnd()
}

var jsonFieldsNameOfPetUpdateNameAliasPostDefStatusCode = [0]string{}

// Decode decodes PetUpdateNameAliasPostDefStatusCode from json.
func (s *PetUpdateNameAliasPostDefStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetUpdateNameAliasPostDefStatusCode to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPetUpdateNameAliasPostDefStatusCode) {
					name = jsonFieldsNameOfPetUpdateNameAliasPostDefStatusCode[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s PetUpdateNamePostDef) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	e.ObjEnd()
}

var jsonFieldsNameOfPetUpdateNamePostDef = [0]string{}

// Decode decodes PetUpdateNamePostDef from json.
func (s *PetUpdateNamePostDef) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetUpdateNamePostDef to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPetUpdateNamePostDef) {
					name = jsonFieldsNameOfPetUpdateNamePostDef[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s PetUpdateNamePostDefStatusCode) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	e.ObjEnd()
}

var jsonFieldsNameOfPetUpdateNamePostDefStatusCode = [0]string{}

// Decode decodes PetUpdateNamePostDefStatusCode from json.
func (s *PetUpdateNamePostDefStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetUpdateNamePostDefStatusCode to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPetUpdateNamePostDefStatusCode) {
					name = jsonFieldsNameOfPetUpdateNamePostDefStatusCode[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

// Encode implements json.Marshaler.
func (s PetUploadAvatarByIDOK) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_     = first
	)
	e.ObjEnd()
}

var jsonFieldsNameOfPetUploadAvatarByIDOK = [0]string{}

// Decode decodes PetUploadAvatarByIDOK from json.
func (s *PetUploadAvatarByIDOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PetUploadAvatarByIDOK to nil`)
	}
	var requiredBitSet [1]uint8
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return err
	}

	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPetUploadAvatarByIDOK) {
					name = jsonFieldsNameOfPetUploadAvatarByIDOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
