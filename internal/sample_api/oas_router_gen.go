// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	http.NotFound(w, r)
}

func skipSlash(p string) string {
	if len(p) > 0 && p[0] == '/' {
		return p[1:]
	}
	return p
}

// nextElem return next path element from p and forwarded p.
func nextElem(p string) (elem, next string) {
	p = skipSlash(p)
	idx := strings.IndexByte(p, '/')
	if idx < 0 {
		idx = len(p)
	}
	return p[:idx], p[idx:]
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	p := r.URL.Path
	if len(p) == 0 {
		s.notFound(w, r)
		return
	}

	var (
		elem string            // current element, without slashes
		args map[string]string // lazily initialized
	)

	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "GET":
		// Root edge.
		elem, p = nextElem(p)
		switch elem {
		case "error": // -> 1
			// GET /error
			s.handleErrorGetRequest(args, w, r)
			return
		case "foobar": // -> 2
			// GET /foobar
			s.handleFoobarGetRequest(args, w, r)
			return
		case "test": // -> 3
			// Edge: 3, path: "test".
			elem, p = nextElem(p)
			switch elem {
			case "header": // -> 4
				// GET /test/header
				s.handleGetHeaderRequest(args, w, r)
				return
			default:
				s.notFound(w, r)
				return
			}
		case "pet": // -> 5
			// Edge: 5, path: "pet".
			elem, p = nextElem(p)
			if len(elem) == 0 {
				// GET /pet.
				s.handlePetGetRequest(args, w, r)
				return
			}
			switch elem {
			case "friendNames": // -> 6
				// Edge: 6, path: "friendNames".
				elem, p = nextElem(p)
				switch elem {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["id"] = elem
					// GET /pet/friendNames/{id}
					s.handlePetFriendsNamesByIDRequest(args, w, r)
					return
				}
			case "avatar": // -> 8
				// GET /pet/avatar
				s.handlePetGetAvatarByIDRequest(args, w, r)
				return
			case "name": // -> 10
				// Edge: 10, path: "name".
				elem, p = nextElem(p)
				switch elem {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["id"] = elem
					// GET /pet/name/{id}
					s.handlePetNameByIDRequest(args, w, r)
					return
				}
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["name"] = elem
				// GET /pet/{name}
				s.handlePetGetByNameRequest(args, w, r)
				return
			}
		default:
			s.notFound(w, r)
			return
		}
	case "POST":
		// Root edge.
		elem, p = nextElem(p)
		switch elem {
		case "foobar": // -> 1
			// POST /foobar
			s.handleFoobarPostRequest(args, w, r)
			return
		case "pet": // -> 2
			// Edge: 2, path: "pet".
			elem, p = nextElem(p)
			if len(elem) == 0 {
				// POST /pet.
				s.handlePetCreateRequest(args, w, r)
				return
			}
			switch elem {
			case "updateNameAlias": // -> 3
				// POST /pet/updateNameAlias
				s.handlePetUpdateNameAliasPostRequest(args, w, r)
				return
			case "updateName": // -> 4
				// POST /pet/updateName
				s.handlePetUpdateNamePostRequest(args, w, r)
				return
			case "avatar": // -> 5
				// POST /pet/avatar
				s.handlePetUploadAvatarByIDRequest(args, w, r)
				return
			default:
				// POST /pet.
				s.handlePetCreateRequest(args, w, r)
				return
			}
		default:
			s.notFound(w, r)
			return
		}
	case "PUT":
		// Root edge.
		elem, p = nextElem(p)
		switch elem {
		case "foobar": // -> 1
			// PUT /foobar
			s.handleFoobarPutRequest(args, w, r)
			return
		default:
			s.notFound(w, r)
			return
		}
	default:
		s.notFound(w, r)
		return
	}
}
