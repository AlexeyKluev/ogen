// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func decodeFoobarGetParams(r *http.Request) (FoobarGetParams, error) {
	var params FoobarGetParams
	// Decode param "inlinedParam" located in "Query".
	{
		values, ok := r.URL.Query()["inlinedParam"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.Value()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(s)
				if err != nil {
					return err
				}

				params.InlinedParam = c
				return nil
			}(); err != nil {
				return params, fmt.Errorf("parse parameter 'inlinedParam' located in 'query': %w", err)
			}
		} else {
			return params, fmt.Errorf("query parameter 'inlinedParam' not specified")
		}
	}
	// Decode param "skip" located in "Query".
	{
		values, ok := r.URL.Query()["skip"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.Value()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(s)
				if err != nil {
					return err
				}

				params.Skip = c
				return nil
			}(); err != nil {
				return params, fmt.Errorf("parse parameter 'skip' located in 'query': %w", err)
			}
		} else {
			return params, fmt.Errorf("query parameter 'skip' not specified")
		}
	}
	return params, nil
}

func decodePetFriendsNamesByIDParams(r *http.Request) (PetFriendsNamesByIDParams, error) {
	var params PetFriendsNamesByIDParams
	// Decode param "id" located in "Path".
	{
		param := chi.URLParam(r, "id")
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.Value()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(s)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, fmt.Errorf("path parameter 'id' not specified")
		}
	}
	return params, nil
}

func decodePetGetParams(r *http.Request) (PetGetParams, error) {
	var params PetGetParams
	// Decode param "petID" located in "Query".
	{
		values, ok := r.URL.Query()["petID"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.Value()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(s)
				if err != nil {
					return err
				}

				params.PetID = c
				return nil
			}(); err != nil {
				return params, fmt.Errorf("parse parameter 'petID' located in 'query': %w", err)
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:       true,
					Min:          1337,
					MaxSet:       false,
					Max:          0,
					MinExclusive: false,
					MaxExclusive: false,
				}).Validate(int64(params.PetID)); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return params, fmt.Errorf("validate parameter 'petID' located in 'query': %w", err)
			}
		} else {
			return params, fmt.Errorf("query parameter 'petID' not specified")
		}
	}
	// Decode param "x-tags" located in "Header".
	{
		param := r.Header.Values("x-tags")
		if len(param) > 0 {
			v, err := conv.ToUUIDArray(param)
			if err != nil {
				return params, fmt.Errorf("parse header param 'x-tags': %w", err)
			}

			params.XTags = v
		} else {
			return params, fmt.Errorf("header parameter 'x-tags' not specified")
		}
	}
	// Decode param "x-scope" located in "Header".
	{
		param := r.Header.Values("x-scope")
		if len(param) > 0 {
			v, err := conv.ToStringArray(param)
			if err != nil {
				return params, fmt.Errorf("parse header param 'x-scope': %w", err)
			}

			params.XScope = v
		} else {
			return params, fmt.Errorf("header parameter 'x-scope' not specified")
		}
	}
	// Decode param "token" located in "Cookie".
	{
		c, err := r.Cookie("token")
		if err != nil {
			return params, fmt.Errorf("get cookie 'token': %w", err)
		}

		param := c.Value
		if len(param) > 0 {
			v, err := conv.ToString(param)
			if err != nil {
				return params, fmt.Errorf("parse cookie param 'token': %w", err)
			}

			params.Token = v
		} else {
			return params, fmt.Errorf("cookie parameter 'token' not specified")
		}
	}
	return params, nil
}

func decodePetGetByNameParams(r *http.Request) (PetGetByNameParams, error) {
	var params PetGetByNameParams
	// Decode param "name" located in "Path".
	{
		param := chi.URLParam(r, "name")
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.Value()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, fmt.Errorf("path parameter 'name' not specified")
		}
	}
	return params, nil
}

func decodePetNameByIDParams(r *http.Request) (PetNameByIDParams, error) {
	var params PetNameByIDParams
	// Decode param "id" located in "Path".
	{
		param := chi.URLParam(r, "id")
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.Value()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(s)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, fmt.Errorf("path parameter 'id' not specified")
		}
	}
	return params, nil
}
