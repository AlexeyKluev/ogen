// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func decodeFoobarGetParams(args map[string]string, r *http.Request) (FoobarGetParams, error) {
	var params FoobarGetParams
	// Decode query: inlinedParam.
	{
		values, ok := r.URL.Query()["inlinedParam"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(s)
				if err != nil {
					return err
				}

				params.InlinedParam = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: inlinedParam: parse`)
			}
		} else {
			return params, errors.New(`query: inlinedParam: not specified`)
		}
	}
	// Decode query: skip.
	{
		values, ok := r.URL.Query()["skip"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(s)
				if err != nil {
					return err
				}

				params.Skip = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: skip: parse`)
			}
		} else {
			return params, errors.New(`query: skip: not specified`)
		}
	}
	return params, nil
}

func decodeGetHeaderParams(args map[string]string, r *http.Request) (GetHeaderParams, error) {
	var params GetHeaderParams
	// Decode header: x-auth-token.
	{
		param := r.Header.Get("x-auth-token")
		if len(param) > 0 {
			d := uri.NewHeaderDecoder(uri.HeaderDecoderConfig{
				Value:   param,
				Explode: false,
			})
			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.XAuthToken = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `header: x-auth-token: parse`)
			}
		} else {
			return params, errors.New(`header: x-auth-token: not specified`)
		}
	}
	return params, nil
}

func decodePetFriendsNamesByIDParams(args map[string]string, r *http.Request) (PetFriendsNamesByIDParams, error) {
	var params PetFriendsNamesByIDParams
	// Decode path: id.
	{
		param := args["id"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(s)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: id: not specified`)
		}
	}
	return params, nil
}

func decodePetGetParams(args map[string]string, r *http.Request) (PetGetParams, error) {
	var params PetGetParams
	// Decode query: petID.
	{
		values, ok := r.URL.Query()["petID"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(s)
				if err != nil {
					return err
				}

				params.PetID = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: petID: parse`)
			}
			if err := func() error {

				if err := (validate.Int{
					MinSet:       true,
					Min:          1337,
					MaxSet:       false,
					Max:          0,
					MinExclusive: false,
					MaxExclusive: false,
				}).Validate(int64(params.PetID)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: petID: invalid`)
			}
		} else {
			return params, errors.New(`query: petID: not specified`)
		}
	}
	// Decode header: x-tags.
	{
		param := r.Header.Get("x-tags")
		if len(param) > 0 {
			d := uri.NewHeaderDecoder(uri.HeaderDecoderConfig{
				Value:   param,
				Explode: false,
			})
			if err := func() error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsXTagsVal uuid.UUID
					if err := func() error {
						s, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUUID(s)
						if err != nil {
							return err
						}

						paramsXTagsVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.XTags = append(params.XTags, paramsXTagsVal)
					return nil
				})
			}(); err != nil {
				return params, errors.Wrap(err, `header: x-tags: parse`)
			}
		} else {
			return params, errors.New(`header: x-tags: not specified`)
		}
	}
	// Decode header: x-scope.
	{
		param := r.Header.Get("x-scope")
		if len(param) > 0 {
			d := uri.NewHeaderDecoder(uri.HeaderDecoderConfig{
				Value:   param,
				Explode: false,
			})
			if err := func() error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsXScopeVal string
					if err := func() error {
						s, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(s)
						if err != nil {
							return err
						}

						paramsXScopeVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.XScope = append(params.XScope, paramsXScopeVal)
					return nil
				})
			}(); err != nil {
				return params, errors.Wrap(err, `header: x-scope: parse`)
			}
		} else {
			return params, errors.New(`header: x-scope: not specified`)
		}
	}
	// Decode query: token.
	{
		values, ok := r.URL.Query()["token"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Token = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: token: parse`)
			}
		} else {
			return params, errors.New(`query: token: not specified`)
		}
	}
	return params, nil
}

func decodePetGetAvatarByIDParams(args map[string]string, r *http.Request) (PetGetAvatarByIDParams, error) {
	var params PetGetAvatarByIDParams
	// Decode query: petID.
	{
		values, ok := r.URL.Query()["petID"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(s)
				if err != nil {
					return err
				}

				params.PetID = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: petID: parse`)
			}
		} else {
			return params, errors.New(`query: petID: not specified`)
		}
	}
	return params, nil
}

func decodePetGetByNameParams(args map[string]string, r *http.Request) (PetGetByNameParams, error) {
	var params PetGetByNameParams
	// Decode path: name.
	{
		param := args["name"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: name: not specified`)
		}
	}
	return params, nil
}

func decodePetNameByIDParams(args map[string]string, r *http.Request) (PetNameByIDParams, error) {
	var params PetNameByIDParams
	// Decode path: id.
	{
		param := args["id"]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(s)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New(`path: id: not specified`)
		}
	}
	return params, nil
}

func decodePetUploadAvatarByIDParams(args map[string]string, r *http.Request) (PetUploadAvatarByIDParams, error) {
	var params PetUploadAvatarByIDParams
	// Decode query: petID.
	{
		values, ok := r.URL.Query()["petID"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(s)
				if err != nil {
					return err
				}

				params.PetID = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, `query: petID: parse`)
			}
		} else {
			return params, errors.New(`query: petID: not specified`)
		}
	}
	return params, nil
}
