// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"strings"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/uri"
)

func encodeDefaultTestRequestJSON(req DefaultTest, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeFoobarPostRequestJSON(req OptPet, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeOneofBugRequestJSON(req OneOfBugs, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodePetCreateRequestJSON(req OptPet, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodePetUpdateNameAliasPostRequestJSON(req OptPetName, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodePetUpdateNamePostRequestJSON(req OptString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodePetUploadAvatarByIDRequestOctetStream(req PetUploadAvatarByIDReq, span trace.Span) (data io.Reader, err error) {
	return req, nil
}

func encodeTestFloatValidationRequestJSON(req TestFloatValidation, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestFormURLEncodedRequestFormURLEncoded(req URIStruct, span trace.Span) (data io.Reader, err error) {
	q := uri.NewQueryEncoder()
	cfg := uri.QueryParameterEncodingConfig{
		Name:    "",
		Style:   uri.QueryStyleForm,
		Explode: true,
	}

	if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
		return req.EncodeURI(e)
	}); err != nil {
		return data, errors.Wrap(err, "encode query")
	}
	e := strings.NewReader(q.Values().Encode())

	return e, nil
}
