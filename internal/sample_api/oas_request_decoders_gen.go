// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func decodeDefaultTestRequest(r *http.Request, span trace.Span) (req DefaultTest, err error) {
	switch ct := r.Header.Get("Content-Type"); ct {
	case "application/json":
		if r.ContentLength == 0 {
			return req, validate.ErrBodyRequired
		}

		var request DefaultTest
		buf := getBuf()
		defer putBuf(buf)
		written, err := io.Copy(buf, r.Body)
		if err != nil {
			return req, err
		}

		if written == 0 {
			return req, validate.ErrBodyRequired
		}

		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}

		return request, nil
	default:
		return req, validate.InvalidContentType(ct)
	}
}

func decodeFoobarPostRequest(r *http.Request, span trace.Span) (req OptPet, err error) {
	switch ct := r.Header.Get("Content-Type"); ct {
	case "application/json":
		if r.ContentLength == 0 {
			return req, nil
		}

		var request OptPet
		buf := getBuf()
		defer putBuf(buf)
		written, err := io.Copy(buf, r.Body)
		if err != nil {
			return req, err
		}

		if written == 0 {
			return req, nil
		}

		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			request.Reset()
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := func() error {
			if request.Set {
				if err := func() error {
					if err := request.Value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}

		return request, nil
	default:
		return req, validate.InvalidContentType(ct)
	}
}

func decodeOneofBugRequest(r *http.Request, span trace.Span) (req OneOfBugs, err error) {
	switch ct := r.Header.Get("Content-Type"); ct {
	case "application/json":
		if r.ContentLength == 0 {
			return req, validate.ErrBodyRequired
		}

		var request OneOfBugs
		buf := getBuf()
		defer putBuf(buf)
		written, err := io.Copy(buf, r.Body)
		if err != nil {
			return req, err
		}

		if written == 0 {
			return req, validate.ErrBodyRequired
		}

		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}

		return request, nil
	default:
		return req, validate.InvalidContentType(ct)
	}
}

func decodePetCreateRequest(r *http.Request, span trace.Span) (req OptPet, err error) {
	switch ct := r.Header.Get("Content-Type"); ct {
	case "application/json":
		if r.ContentLength == 0 {
			return req, nil
		}

		var request OptPet
		buf := getBuf()
		defer putBuf(buf)
		written, err := io.Copy(buf, r.Body)
		if err != nil {
			return req, err
		}

		if written == 0 {
			return req, nil
		}

		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			request.Reset()
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := func() error {
			if request.Set {
				if err := func() error {
					if err := request.Value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}

		return request, nil
	default:
		return req, validate.InvalidContentType(ct)
	}
}

func decodePetUpdateNameAliasPostRequest(r *http.Request, span trace.Span) (req OptPetName, err error) {
	switch ct := r.Header.Get("Content-Type"); ct {
	case "application/json":
		if r.ContentLength == 0 {
			return req, nil
		}

		var request OptPetName
		buf := getBuf()
		defer putBuf(buf)
		written, err := io.Copy(buf, r.Body)
		if err != nil {
			return req, err
		}

		if written == 0 {
			return req, nil
		}

		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			request.Reset()
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := func() error {
			if request.Set {
				if err := func() error {
					if err := request.Value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}

		return request, nil
	default:
		return req, validate.InvalidContentType(ct)
	}
}

func decodePetUpdateNamePostRequest(r *http.Request, span trace.Span) (req OptString, err error) {
	switch ct := r.Header.Get("Content-Type"); ct {
	case "application/json":
		if r.ContentLength == 0 {
			return req, nil
		}

		var request OptString
		buf := getBuf()
		defer putBuf(buf)
		written, err := io.Copy(buf, r.Body)
		if err != nil {
			return req, err
		}

		if written == 0 {
			return req, nil
		}

		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			request.Reset()
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := func() error {
			if request.Set {
				if err := func() error {
					if err := (validate.String{
						MinLength:    6,
						MinLengthSet: true,
						MaxLength:    0,
						MaxLengthSet: false,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}

		return request, nil
	default:
		return req, validate.InvalidContentType(ct)
	}
}

func decodePetUploadAvatarByIDRequest(r *http.Request, span trace.Span) (req PetUploadAvatarByIDReq, err error) {
	switch ct := r.Header.Get("Content-Type"); ct {
	case "application/octet-stream":
		return PetUploadAvatarByIDReq{Data: r.Body}, nil
	default:
		return req, validate.InvalidContentType(ct)
	}
}

func decodeTestFloatValidationRequest(r *http.Request, span trace.Span) (req TestFloatValidation, err error) {
	switch ct := r.Header.Get("Content-Type"); ct {
	case "application/json":
		if r.ContentLength == 0 {
			return req, validate.ErrBodyRequired
		}

		var request TestFloatValidation
		buf := getBuf()
		defer putBuf(buf)
		written, err := io.Copy(buf, r.Body)
		if err != nil {
			return req, err
		}

		if written == 0 {
			return req, validate.ErrBodyRequired
		}

		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "decode \"application/json\"")
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}

		return request, nil
	default:
		return req, validate.InvalidContentType(ct)
	}
}

func decodeTestFormURLEncodedRequest(r *http.Request, span trace.Span) (req TestForm, err error) {
	switch ct := r.Header.Get("Content-Type"); ct {
	case "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, validate.ErrBodyRequired
		}

		var request TestForm
		if err := r.ParseForm(); err != nil {
			return req, errors.Wrap(err, "parse form")
		}

		if len(r.PostForm) == 0 {
			return req, validate.ErrBodyRequired
		}

		q := uri.NewQueryDecoder(r.PostForm)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "id",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}

			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					var reqDotIDVal int
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt(val)
						if err != nil {
							return err
						}

						reqDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					req.ID.SetTo(reqDotIDVal)
					return nil
				}); err != nil {
					return req, errors.Wrap(err, "decode \"id\"")
				}
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "uuid",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}

			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					var reqDotUUIDVal uuid.UUID
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUUID(val)
						if err != nil {
							return err
						}

						reqDotUUIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					req.UUID.SetTo(reqDotUUIDVal)
					return nil
				}); err != nil {
					return req, errors.Wrap(err, "decode \"uuid\"")
				}
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "description",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}

			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					req.Description = c
					return nil
				}); err != nil {
					return req, errors.Wrap(err, "decode \"description\"")
				}
			} else {
				return req, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "array",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}

			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					return d.DecodeArray(func(d uri.Decoder) error {
						var reqDotArrayVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							reqDotArrayVal = c
							return nil
						}(); err != nil {
							return err
						}
						req.Array = append(req.Array, reqDotArrayVal)
						return nil
					})
				}); err != nil {
					return req, errors.Wrap(err, "decode \"array\"")
				}
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "object",
				Style:   uri.QueryStyleForm,
				Explode: true,
				Fields:  []uri.QueryParameterObjectField{{"min", false}, {"max", true}},
			}

			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					var reqDotObjectVal TestFormObject
					if err := func() error {
						return reqDotObjectVal.DecodeURI(d)
					}(); err != nil {
						return err
					}
					req.Object.SetTo(reqDotObjectVal)
					return nil
				}); err != nil {
					return req, errors.Wrap(err, "decode \"object\"")
				}
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "deepObject",
				Style:   uri.QueryStyleDeepObject,
				Explode: true,
				Fields:  []uri.QueryParameterObjectField{{"min", false}, {"max", true}},
			}

			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					var reqDotDeepObjectVal TestFormDeepObject
					if err := func() error {
						return reqDotDeepObjectVal.DecodeURI(d)
					}(); err != nil {
						return err
					}
					req.DeepObject.SetTo(reqDotDeepObjectVal)
					return nil
				}); err != nil {
					return req, errors.Wrap(err, "decode \"deepObject\"")
				}
			}
		}

		return request, nil
	default:
		return req, validate.InvalidContentType(ct)
	}
}
