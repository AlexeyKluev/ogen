// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = math.Mod
	_ = validate.Int{}
)

type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

type Client struct {
	serverURL string
	http      HTTPClient
}

func NewClient(serverURL string) *Client {
	return &Client{
		serverURL: serverURL,
		http: &http.Client{
			Timeout: time.Second * 15,
		},
	}
}

func (c *Client) FoobarGet(ctx context.Context, params FoobarGetParams) (res FoobarGetResponse, err error) {
	path := c.serverURL
	path += "/foobar"

	r, err := http.NewRequestWithContext(ctx, "GET", path, nil)
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	q := r.URL.Query()
	{
		// Encode 'inlinedParam' parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Style:   uri.QueryStyleForm,
			Explode: true,
		})
		v := params.InlinedParam
		param := e.EncodeInt64(v)
		q.Set("inlinedParam", param)
	}
	{
		// Encode 'skip' parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Style:   uri.QueryStyleForm,
			Explode: true,
		})
		v := params.Skip
		param := e.EncodeInt32(v)
		q.Set("skip", param)
	}
	r.URL.RawQuery = q.Encode()

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeFoobarGetResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) FoobarPut(ctx context.Context) (res FoobarPutDefault, err error) {
	path := c.serverURL
	path += "/foobar"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, nil)
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeFoobarPutResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) FoobarPost(ctx context.Context, req *Pet) (res FoobarPostResponse, err error) {
	body, contentType, err := encodeFoobarPostRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/foobar"

	r, err := http.NewRequestWithContext(ctx, "POST", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeFoobarPostResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PetGet(ctx context.Context, params PetGetParams) (res PetGetResponse, err error) {
	path := c.serverURL
	path += "/pet"

	r, err := http.NewRequestWithContext(ctx, "GET", path, nil)
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	q := r.URL.Query()
	{
		// Encode 'petID' parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Style:   uri.QueryStyleForm,
			Explode: true,
		})
		v := params.PetID
		param := e.EncodeInt64(v)
		q.Set("petID", param)
	}
	r.URL.RawQuery = q.Encode()
	{
		value := conv.UUIDArrayToString(params.XTags)
		for _, v := range value {
			r.Header.Add("x-tags", v)
		}
	}
	{
		value := conv.StringArrayToString(params.XScope)
		for _, v := range value {
			r.Header.Add("x-scope", v)
		}
	}

	{
		value := conv.StringToString(params.Token)
		r.AddCookie(&http.Cookie{
			Name:   "token",
			Value:  value,
			MaxAge: 1337,
		})
	}

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePetGetResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PetCreate(ctx context.Context, req PetCreateRequest) (res Pet, err error) {
	body, contentType, err := encodePetCreateRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/pet"

	r, err := http.NewRequestWithContext(ctx, "POST", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePetCreateResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PetGetByName(ctx context.Context, params PetGetByNameParams) (res Pet, err error) {
	path := c.serverURL
	path += "/pet/"
	{
		// Encode 'name' parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		path += e.EncodeString(params.Name)
	}

	r, err := http.NewRequestWithContext(ctx, "GET", path, nil)
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePetGetByNameResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}
