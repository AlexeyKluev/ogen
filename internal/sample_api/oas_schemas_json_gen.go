// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

// WriteJSON implements json.Marshaler.
func (s Data) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		w.ObjField("description")
		s.Description.WriteJSON(w)
	}
	more.More()
	w.ObjField("email")
	w.Str(s.Email)
	more.More()
	w.ObjField("format")
	w.Str(s.Format)
	more.More()
	w.ObjField("hostname")
	w.Str(s.Hostname)
	more.More()
	w.ObjField("id")
	s.ID.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads Data from json stream.
func (s *Data) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Data to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(r); err != nil {
				return err
			}
		case "email":
			v, err := r.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "format":
			v, err := r.Str()
			s.Format = string(v)
			if err != nil {
				return err
			}
		case "hostname":
			v, err := r.Str()
			s.Hostname = string(v)
			if err != nil {
				return err
			}
		case "id":
			if err := s.ID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Error) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("code")
	w.Int64(s.Code)
	more.More()
	w.ObjField("message")
	w.Str(s.Message)
	w.ObjEnd()
}

// ReadJSON reads Error from json stream.
func (s *Error) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Error to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "code":
			v, err := r.Int64()
			s.Code = int64(v)
			if err != nil {
				return err
			}
		case "message":
			v, err := r.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ErrorStatusCode) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads ErrorStatusCode from json stream.
func (s *ErrorStatusCode) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ErrorStatusCode to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FoobarPutDef) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads FoobarPutDef from json stream.
func (s *FoobarPutDef) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FoobarPutDef to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FoobarPutDefStatusCode) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads FoobarPutDefStatusCode from json stream.
func (s *FoobarPutDefStatusCode) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FoobarPutDefStatusCode to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ID) WriteJSON(w *json.Writer) {
	switch s.Type {
	case StringID:
		w.Str(s.String)
	case IntID:
		w.Int(s.Int)
	}
}

// ReadJSON reads value from json reader.
func (s *ID) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ID to nil`)
	}
	switch t := r.Next(); t {
	case json.String:
		v, err := r.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringID
	case json.Number:
		v, err := r.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntID
	default:
		return fmt.Errorf("unexpected json type %q", t)
	}
	return nil
}

// WriteJSON writes json value of string to json stream.
func (o NilString) WriteJSON(w *json.Writer) {
	if o.Null {
		w.Null()
		return
	}
	w.Str(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *NilString) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilString to nil`)
	}
	switch r.Next() {
	case json.String:
		o.Null = false
		v, err := r.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	case json.Nil:
		if err := r.Null(); err != nil {
			return err
		}
		var v string
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilString", r.Next())
	}
}

// WriteJSON implements json.Marshaler.
func (s NotFound) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads NotFound from json stream.
func (s *NotFound) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NotFound to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON writes json value of Data to json stream.
func (o OptData) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Data from json iterator.
func (o *OptData) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptData to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptData", r.Next())
	}
}

// WriteJSON writes json value of time.Duration to json stream.
func (o OptDuration) WriteJSON(w *json.Writer) {
	json.WriteDuration(w, o.Value)
}

// ReadJSON reads json value of time.Duration from json iterator.
func (o *OptDuration) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptDuration to nil`)
	}
	switch r.Next() {
	case json.String:
		o.Set = true
		v, err := json.ReadDuration(r)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptDuration", r.Next())
	}
}

// WriteJSON writes json value of float64 to json stream.
func (o OptFloat64) WriteJSON(w *json.Writer) {
	w.Float64(float64(o.Value))
}

// ReadJSON reads json value of float64 from json iterator.
func (o *OptFloat64) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFloat64 to nil`)
	}
	switch r.Next() {
	case json.Number:
		o.Set = true
		v, err := r.Float64()
		if err != nil {
			return err
		}
		o.Value = float64(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFloat64", r.Next())
	}
}

// WriteJSON writes json value of int to json stream.
func (o OptInt) WriteJSON(w *json.Writer) {
	w.Int(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptInt) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInt to nil`)
	}
	switch r.Next() {
	case json.Number:
		o.Set = true
		v, err := r.Int()
		if err != nil {
			return err
		}
		o.Value = int(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInt", r.Next())
	}
}

// WriteJSON writes json value of string to json stream.
func (o OptNilString) WriteJSON(w *json.Writer) {
	if o.Null {
		w.Null()
		return
	}
	w.Str(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptNilString) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilString to nil`)
	}
	switch r.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := r.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	case json.Nil:
		if err := r.Null(); err != nil {
			return err
		}
		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilString", r.Next())
	}
}

// WriteJSON writes json value of PetType to json stream.
func (o OptPetType) WriteJSON(w *json.Writer) {
	w.Str(string(o.Value))
}

// ReadJSON reads json value of PetType from json iterator.
func (o *OptPetType) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPetType to nil`)
	}
	switch r.Next() {
	case json.String:
		o.Set = true
		v, err := r.Str()
		if err != nil {
			return err
		}
		o.Value = PetType(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPetType", r.Next())
	}
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(w *json.Writer) {
	w.Str(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptString to nil`)
	}
	switch r.Next() {
	case json.String:
		o.Set = true
		v, err := r.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptString", r.Next())
	}
}

// WriteJSON writes json value of time.Time to json stream.
func (o OptTime) WriteJSON(w *json.Writer, format func(*json.Writer, time.Time)) {
	format(w, o.Value)
}

// ReadJSON reads json value of time.Time from json iterator.
func (o *OptTime) ReadJSON(r *json.Reader, format func(*json.Reader) (time.Time, error)) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTime to nil`)
	}
	switch r.Next() {
	case json.String:
		o.Set = true
		v, err := format(r)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTime", r.Next())
	}
}

// WriteJSON writes json value of uuid.UUID to json stream.
func (o OptUUID) WriteJSON(w *json.Writer) {
	json.WriteUUID(w, o.Value)
}

// ReadJSON reads json value of uuid.UUID from json iterator.
func (o *OptUUID) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptUUID to nil`)
	}
	switch r.Next() {
	case json.String:
		o.Set = true
		v, err := json.ReadUUID(r)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptUUID", r.Next())
	}
}

// WriteJSON implements json.Marshaler.
func (s Pet) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("birthday")
	json.WriteDate(w, s.Birthday)
	if s.Friends != nil {
		more.More()
		w.ObjField("friends")
		more.Down()
		w.ArrStart()
		for _, elem := range s.Friends {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("id")
	w.Int64(s.ID)
	more.More()
	w.ObjField("ip")
	json.WriteIP(w, s.IP)
	more.More()
	w.ObjField("ip_v4")
	json.WriteIP(w, s.IPV4)
	more.More()
	w.ObjField("ip_v6")
	json.WriteIP(w, s.IPV6)
	more.More()
	w.ObjField("kind")
	s.Kind.WriteJSON(w)
	more.More()
	w.ObjField("name")
	w.Str(s.Name)
	if s.Next.Set {
		more.More()
		w.ObjField("next")
		s.Next.WriteJSON(w)
	}
	more.More()
	w.ObjField("nickname")
	s.Nickname.WriteJSON(w)
	if s.NullStr.Set {
		more.More()
		w.ObjField("nullStr")
		s.NullStr.WriteJSON(w)
	}
	if s.Primary != nil {
		more.More()
		w.ObjField("primary")
		s.Primary.WriteJSON(w)
	}
	more.More()
	w.ObjField("rate")
	json.WriteDuration(w, s.Rate)
	if s.Tag.Set {
		more.More()
		w.ObjField("tag")
		s.Tag.WriteJSON(w)
	}
	if s.TestArray1 != nil {
		more.More()
		w.ObjField("testArray1")
		more.Down()
		w.ArrStart()
		for _, elem := range s.TestArray1 {
			more.More()
			more.Down()
			w.ArrStart()
			for _, elem := range elem {
				more.More()
				w.Str(elem)
			}
			w.ArrEnd()
			more.Up()
		}
		w.ArrEnd()
		more.Up()
	}
	if s.TestDate.Set {
		more.More()
		w.ObjField("testDate")
		s.TestDate.WriteJSON(w, json.WriteDate)
	}
	if s.TestDateTime.Set {
		more.More()
		w.ObjField("testDateTime")
		s.TestDateTime.WriteJSON(w, json.WriteDateTime)
	}
	if s.TestDuration.Set {
		more.More()
		w.ObjField("testDuration")
		s.TestDuration.WriteJSON(w)
	}
	if s.TestFloat1.Set {
		more.More()
		w.ObjField("testFloat1")
		s.TestFloat1.WriteJSON(w)
	}
	if s.TestInteger1.Set {
		more.More()
		w.ObjField("testInteger1")
		s.TestInteger1.WriteJSON(w)
	}
	if s.TestTime.Set {
		more.More()
		w.ObjField("testTime")
		s.TestTime.WriteJSON(w, json.WriteTime)
	}
	if s.Type.Set {
		more.More()
		w.ObjField("type")
		s.Type.WriteJSON(w)
	}
	more.More()
	w.ObjField("unique_id")
	json.WriteUUID(w, s.UniqueID)
	more.More()
	w.ObjField("uri")
	json.WriteURI(w, s.URI)
	w.ObjEnd()
}

// ReadJSON reads Pet from json stream.
func (s *Pet) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Pet to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "birthday":
			v, err := json.ReadDate(r)
			s.Birthday = v
			if err != nil {
				return err
			}
		case "friends":
			s.Friends = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem Pet
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Friends = append(s.Friends, elem)
				return nil
			}); err != nil {
				return err
			}
		case "id":
			v, err := r.Int64()
			s.ID = int64(v)
			if err != nil {
				return err
			}
		case "ip":
			v, err := json.ReadIP(r)
			s.IP = v
			if err != nil {
				return err
			}
		case "ip_v4":
			v, err := json.ReadIP(r)
			s.IPV4 = v
			if err != nil {
				return err
			}
		case "ip_v6":
			v, err := json.ReadIP(r)
			s.IPV6 = v
			if err != nil {
				return err
			}
		case "kind":
			if err := s.Kind.ReadJSON(r); err != nil {
				return err
			}
		case "name":
			v, err := r.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "next":
			s.Next.Reset()
			if err := s.Next.ReadJSON(r); err != nil {
				return err
			}
		case "nickname":
			if err := s.Nickname.ReadJSON(r); err != nil {
				return err
			}
		case "nullStr":
			s.NullStr.Reset()
			if err := s.NullStr.ReadJSON(r); err != nil {
				return err
			}
		case "primary":
			s.Primary = nil
			var elem Pet
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.Primary = &elem
		case "rate":
			v, err := json.ReadDuration(r)
			s.Rate = v
			if err != nil {
				return err
			}
		case "tag":
			s.Tag.Reset()
			if err := s.Tag.ReadJSON(r); err != nil {
				return err
			}
		case "testArray1":
			s.TestArray1 = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem []string
				elem = nil
				if err := r.Array(func(r *json.Reader) error {
					var elemElem string
					v, err := r.Str()
					elemElem = string(v)
					if err != nil {
						return err
					}
					elem = append(elem, elemElem)
					return nil
				}); err != nil {
					return err
				}
				s.TestArray1 = append(s.TestArray1, elem)
				return nil
			}); err != nil {
				return err
			}
		case "testDate":
			s.TestDate.Reset()
			if err := s.TestDate.ReadJSON(r, json.ReadDate); err != nil {
				return err
			}
		case "testDateTime":
			s.TestDateTime.Reset()
			if err := s.TestDateTime.ReadJSON(r, json.ReadDateTime); err != nil {
				return err
			}
		case "testDuration":
			s.TestDuration.Reset()
			if err := s.TestDuration.ReadJSON(r); err != nil {
				return err
			}
		case "testFloat1":
			s.TestFloat1.Reset()
			if err := s.TestFloat1.ReadJSON(r); err != nil {
				return err
			}
		case "testInteger1":
			s.TestInteger1.Reset()
			if err := s.TestInteger1.ReadJSON(r); err != nil {
				return err
			}
		case "testTime":
			s.TestTime.Reset()
			if err := s.TestTime.ReadJSON(r, json.ReadTime); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(r); err != nil {
				return err
			}
		case "unique_id":
			v, err := json.ReadUUID(r)
			s.UniqueID = v
			if err != nil {
				return err
			}
		case "uri":
			v, err := json.ReadURI(r)
			s.URI = v
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PetCreateReqTextPlain) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads PetCreateReqTextPlain from json stream.
func (s *PetCreateReqTextPlain) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PetCreateReqTextPlain to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PetGetDef) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("message")
	w.Str(s.Message)
	w.ObjEnd()
}

// ReadJSON reads PetGetDef from json stream.
func (s *PetGetDef) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PetGetDef to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "message":
			v, err := r.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PetGetDefStatusCode) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads PetGetDefStatusCode from json stream.
func (s *PetGetDefStatusCode) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PetGetDefStatusCode to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PetKind) WriteJSON(w *json.Writer) {
	w.Str(string(s))
}

// ReadJSON reads PetKind from json reader.
func (s *PetKind) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PetKind to nil`)
	}
	v, err := r.Str()
	if err != nil {
		return err
	}
	*s = PetKind(v)
	return nil
}

func (PetName) WriteJSON(w *json.Writer)      {}
func (PetName) ReadJSON(r *json.Reader) error { return nil }

// WriteJSON implements json.Marshaler.
func (s PetType) WriteJSON(w *json.Writer) {
	w.Str(string(s))
}

// ReadJSON reads PetType from json reader.
func (s *PetType) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PetType to nil`)
	}
	v, err := r.Str()
	if err != nil {
		return err
	}
	*s = PetType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PetUpdateNameAliasPostDef) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads PetUpdateNameAliasPostDef from json stream.
func (s *PetUpdateNameAliasPostDef) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PetUpdateNameAliasPostDef to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PetUpdateNameAliasPostDefStatusCode) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads PetUpdateNameAliasPostDefStatusCode from json stream.
func (s *PetUpdateNameAliasPostDefStatusCode) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PetUpdateNameAliasPostDefStatusCode to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PetUpdateNamePostDef) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads PetUpdateNamePostDef from json stream.
func (s *PetUpdateNamePostDef) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PetUpdateNamePostDef to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PetUpdateNamePostDefStatusCode) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads PetUpdateNamePostDefStatusCode from json stream.
func (s *PetUpdateNamePostDefStatusCode) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PetUpdateNamePostDefStatusCode to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}
