// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

func (s *Server) notAllowed(w http.ResponseWriter, r *http.Request, allowed string) {
	s.cfg.MethodNotAllowed(w, r, allowed)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/test"
			if l := len("/test"); len(elem) >= l && elem[0:l] == "/test" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'F': // Prefix: "FormURLEncoded"
				if l := len("FormURLEncoded"); len(elem) >= l && elem[0:l] == "FormURLEncoded" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleTestFormURLEncodedRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			case 'M': // Prefix: "Multipart"
				if l := len("Multipart"); len(elem) >= l && elem[0:l] == "Multipart" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "POST":
						s.handleTestMultipartRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
				switch elem[0] {
				case 'U': // Prefix: "Upload"
					if l := len("Upload"); len(elem) >= l && elem[0:l] == "Upload" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleTestMultipartUploadRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			case 'S': // Prefix: "ShareFormSchema"
				if l := len("ShareFormSchema"); len(elem) >= l && elem[0:l] == "ShareFormSchema" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleTestShareFormSchemaRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [0]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/test"
			if l := len("/test"); len(elem) >= l && elem[0:l] == "/test" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'F': // Prefix: "FormURLEncoded"
				if l := len("FormURLEncoded"); len(elem) >= l && elem[0:l] == "FormURLEncoded" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: TestFormURLEncoded
						r.name = "TestFormURLEncoded"
						r.operationID = "testFormURLEncoded"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'M': // Prefix: "Multipart"
				if l := len("Multipart"); len(elem) >= l && elem[0:l] == "Multipart" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						r.name = "TestMultipart"
						r.operationID = "testMultipart"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case 'U': // Prefix: "Upload"
					if l := len("Upload"); len(elem) >= l && elem[0:l] == "Upload" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: TestMultipartUpload
							r.name = "TestMultipartUpload"
							r.operationID = "testMultipartUpload"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'S': // Prefix: "ShareFormSchema"
				if l := len("ShareFormSchema"); len(elem) >= l && elem[0:l] == "ShareFormSchema" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: TestShareFormSchema
						r.name = "TestShareFormSchema"
						r.operationID = "testShareFormSchema"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			}
		}
	}
	return r, false
}
