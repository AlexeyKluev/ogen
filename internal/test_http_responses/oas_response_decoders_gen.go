// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func decodeAnyContentTypeBinaryStringSchemaResponse(resp *http.Response, span trace.Span) (res AnyContentTypeBinaryStringSchemaOK, err error) {
	switch resp.StatusCode {
	case 200:
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ht.MatchContentType("*/*", ct):
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			response := AnyContentTypeBinaryStringSchemaOK{Data: bytes.NewReader(b)}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		return res, validate.UnexpectedStatusCode(resp.StatusCode)
	}
}
func decodeAnyContentTypeBinaryStringSchemaDefaultResponse(resp *http.Response, span trace.Span) (res AnyContentTypeBinaryStringSchemaDefaultDefStatusCode, err error) {
	switch resp.StatusCode {
	default:
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ht.MatchContentType("*/*", ct):
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			response := AnyContentTypeBinaryStringSchemaDefaultDef{Data: bytes.NewReader(b)}
			return AnyContentTypeBinaryStringSchemaDefaultDefStatusCode{
				StatusCode: resp.StatusCode,
				Response:   response,
			}, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
}
func decodeHeaders200Response(resp *http.Response, span trace.Span) (res Headers200OK, err error) {
	switch resp.StatusCode {
	case 200:
		var wrapper Headers200OK
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse 'TestHeader' header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "TestHeader",
				Explode: false,
			}
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				wrapper.TestHeader = c
				return nil
			}); err != nil {
				return res, errors.Wrap(err, "parse TestHeader header")
			}
		}
		return wrapper, nil
	default:
		return res, validate.UnexpectedStatusCode(resp.StatusCode)
	}
}
func decodeHeadersCombinedResponse(resp *http.Response, span trace.Span) (res HeadersCombinedRes, err error) {
	switch resp.StatusCode {
	case 200:
		var wrapper HeadersCombinedOK
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse 'TestHeader' header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "TestHeader",
				Explode: false,
			}
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				wrapper.TestHeader = c
				return nil
			}); err != nil {
				return res, errors.Wrap(err, "parse TestHeader header")
			}
		}
		return &wrapper, nil
	default:
		var wrapper HeadersCombinedDef
		wrapper.StatusCode = resp.StatusCode
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse 'TestHeader' header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "TestHeader",
				Explode: false,
			}
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				wrapper.TestHeader = c
				return nil
			}); err != nil {
				return res, errors.Wrap(err, "parse TestHeader header")
			}
		}
		return &wrapper, nil
	}
}
func decodeHeadersDefaultResponse(resp *http.Response, span trace.Span) (res HeadersDefaultDef, err error) {
	switch resp.StatusCode {
	default:
		var wrapper HeadersDefaultDef
		wrapper.StatusCode = resp.StatusCode
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse 'TestHeader' header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "TestHeader",
				Explode: false,
			}
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				wrapper.TestHeader = c
				return nil
			}); err != nil {
				return res, errors.Wrap(err, "parse TestHeader header")
			}
		}
		return wrapper, nil
	}
}
func decodeMultipleGenericResponsesResponse(resp *http.Response, span trace.Span) (res MultipleGenericResponsesRes, err error) {
	switch resp.StatusCode {
	case 200:
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response NilInt
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 201:
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response NilString
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		return res, validate.UnexpectedStatusCode(resp.StatusCode)
	}
}
func decodeOctetStreamBinaryStringSchemaResponse(resp *http.Response, span trace.Span) (res OctetStreamBinaryStringSchemaOK, err error) {
	switch resp.StatusCode {
	case 200:
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/octet-stream":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			response := OctetStreamBinaryStringSchemaOK{Data: bytes.NewReader(b)}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		return res, validate.UnexpectedStatusCode(resp.StatusCode)
	}
}
func decodeOctetStreamEmptySchemaResponse(resp *http.Response, span trace.Span) (res OctetStreamEmptySchemaOK, err error) {
	switch resp.StatusCode {
	case 200:
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/octet-stream":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			response := OctetStreamEmptySchemaOK{Data: bytes.NewReader(b)}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		return res, validate.UnexpectedStatusCode(resp.StatusCode)
	}
}
func decodeTextPlainBinaryStringSchemaResponse(resp *http.Response, span trace.Span) (res TextPlainBinaryStringSchemaOK, err error) {
	switch resp.StatusCode {
	case 200:
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "text/plain":
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			response := TextPlainBinaryStringSchemaOK{Data: bytes.NewReader(b)}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		return res, validate.UnexpectedStatusCode(resp.StatusCode)
	}
}
