// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

// CombinedParams is parameters of combined operation.
type CombinedParams struct {
	Type CombinedType
}

func unpackCombinedParams(packed map[string]any) (params CombinedParams) {
	params.Type = packed["type"].(CombinedType)
	return params
}

func decodeCombinedParams(args [0]string, r *http.Request) (params CombinedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Type = CombinedType(c)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: type: parse")
			}
			if err := func() error {
				if err := params.Type.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: type: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	return params, nil
}

// HeadersCombinedParams is parameters of headersCombined operation.
type HeadersCombinedParams struct {
	Type HeadersCombinedType
}

func unpackHeadersCombinedParams(packed map[string]any) (params HeadersCombinedParams) {
	params.Type = packed["type"].(HeadersCombinedType)
	return params
}

func decodeHeadersCombinedParams(args [0]string, r *http.Request) (params HeadersCombinedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Type = HeadersCombinedType(c)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: type: parse")
			}
			if err := func() error {
				if err := params.Type.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: type: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	return params, nil
}

// IntersectPatternCodeParams is parameters of intersectPatternCode operation.
type IntersectPatternCodeParams struct {
	Code int
}

func unpackIntersectPatternCodeParams(packed map[string]any) (params IntersectPatternCodeParams) {
	params.Code = packed["code"].(int)
	return params
}

func decodeIntersectPatternCodeParams(args [0]string, r *http.Request) (params IntersectPatternCodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: code.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "code",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Code = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: code: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	return params, nil
}
