{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}

{{ define "test_examples" }}
{{ template "header_test" $ }}

{{- range $typ := $.Types }}{{- if $typ.HasFeature "json" }}
{{- with $examples := $typ.Examples }}

func Test{{ $typ.Go }}_JSON(t *testing.T) {
	{{- if $.SkipTest $typ }}
	t.Skip("Skipped by regex")
	{{- end }}
	t.Parallel()

	for i, tc := range []struct{
		Input string
	}{
		{{- range $example := $examples }}
		{Input: {{ quote $example }}},
		{{- end }}
	}{
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ {{ $typ.Go }}
			{{- if $typ.IsMap }}{{- if not $typ.Fields }}
			typ = make({{ $typ.Go }})
			{{- end }}{{- end }}

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 {{ $typ.Go }}
			{{- if $typ.IsMap }}{{- if not $typ.Fields }}
			typ2 = make({{ $typ.Go }})
			{{- end }}{{- end }}
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

{{- end }}
{{- end }}{{- end }}

{{- end }}
