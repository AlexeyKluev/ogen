{{ define "enc_param_path" }}
u := uri.Clone(c.serverURL)
{{- range $part := $.PathParts }}{{/* Range over path parts */}}
{{- if $part.Raw }}
u.Path += {{ quote $part.Raw }}

{{- else }}
{
	{{- $param := $part.Param }}
	// Encode {{ quote $param.Spec.Name }} parameter.
	e := uri.NewPathEncoder(uri.PathEncoderConfig{
		Param: {{ quote $param.Spec.Name }},
		Style: uri.PathStyle{{ capitalize $param.Spec.Style.String }},
		Explode: {{ if $param.Spec.Explode }}true{{ else }}false{{ end }},
	})
	if err := func() error {
		{{- template "uri/encode" elem $param.Type (printf "params.%s" $param.Name) }}
	}(); err != nil {
		return res, errors.Wrap(err, "encode path")
	}
	u.Path += e.Result()
}
{{- end }}
{{- end }}
{{- end }}

{{ define "enc_param_query" }}
{{ $pcount := len $.QueryParams }}
{{ if ne $pcount 0 }}{{/* Check params existence */}}
q := u.Query()
{{- range $param := $.QueryParams }}{{/* Range over params */}}
{
	// Encode {{ quote $param.Spec.Name }} parameter.
	e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
		Style: uri.QueryStyle{{ capitalize $param.Spec.Style.String }},
		Explode: {{ if $param.Spec.Explode }}true{{ else }}false{{ end }},
	})
	if err := func() error {
		{{- template "uri/encode" elem $param.Type (printf "params.%s" $param.Name) }}
	}(); err != nil {
		return res, errors.Wrap(err, "encode query")
	}
	q[{{ quote $param.Spec.Name }}] = e.Result()
}
{{- end }}{{/* Range over params */}}
u.RawQuery = q.Encode()
{{- end }}{{/* Check params existence */}}
{{- end }}

