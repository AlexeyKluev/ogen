{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}

{{ define "cfg" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- with $regexStrings := $.RegexStrings }}
var regexMap = map[string]*regexp.Regexp{
	{{- range $regex := $regexStrings }}
	{{ quote $regex }}: regexp.MustCompile({{ quote $regex }}),
	{{- end }}
}
{{- end }}

{{- with $ratStrings := $.RatStrings }}
var ratMap = map[string]*big.Rat{
	{{- range $rat := $ratStrings }}
	{{ quote $rat }}: func() *big.Rat {
		r := new(big.Rat)
		if err := r.UnmarshalText([]byte({{ quote $rat }})); err != nil {
			panic(fmt.Sprintf("rat %q: %v", {{ quote $rat }}, err))
		}
		return r
	}(),
	{{- end }}
}
{{- end }}

// bufPool is pool of bytes.Buffer for encoding and decoding.
var bufPool = &sync.Pool{
	New: func() interface{} {
		return new(bytes.Buffer)
	},
}

// getBuf returns buffer from pool.
func getBuf() *bytes.Buffer {
	return bufPool.Get().(*bytes.Buffer)
}

// putBuf puts buffer to pool.
func putBuf(b *bytes.Buffer) {
	b.Reset()
	bufPool.Put(b)
}

type config struct {
	TracerProvider trace.TracerProvider
	Tracer         trace.Tracer
	MeterProvider  metric.MeterProvider
	Meter          metric.Meter
	Client         ht.Client
}

func newConfig(opts ...Option) config {
	cfg := config{
		TracerProvider: otel.GetTracerProvider(),
		MeterProvider: metric.NewNoopMeterProvider(),
		Client: http.DefaultClient,
	}
	for _, opt := range opts {
		opt.apply(&cfg)
	}
	cfg.Tracer = cfg.TracerProvider.Tracer(otelogen.Name,
		trace.WithInstrumentationVersion(otelogen.SemVersion()),
	)
	cfg.Meter = cfg.MeterProvider.Meter(otelogen.Name)
	return cfg
}

type Option interface {
	apply(*config)
}

type optionFunc func(*config)

func (o optionFunc) apply(c *config) {
	o(c)
}

// WithTracerProvider specifies a tracer provider to use for creating a tracer.
//
// If none is specified, the global provider is used.
func WithTracerProvider(provider trace.TracerProvider) Option {
	return optionFunc(func(cfg *config) {
		if provider != nil {
			cfg.TracerProvider = provider
		}
	})
}

// WithMeterProvider specifies a meter provider to use for creating a meter.
//
// If none is specified, the metric.NewNoopMeterProvider is used.
func WithMeterProvider(provider metric.MeterProvider) Option {
	return optionFunc(func(cfg *config) {
		if provider != nil {
			cfg.MeterProvider = provider
		}
	})
}

// WithClient specifies http client to use.
func WithClient(client ht.Client) Option {
	return optionFunc(func(cfg *config) {
		if client != nil {
			cfg.Client = client
		}
	})
}

{{ end }}
