{{ define "response_decoders" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}
func decode{{ $op.Name }}Response(resp *http.Response, span trace.Span) (res {{ $op.Responses.Type.Go }}, err error) {
	switch resp.StatusCode {
	{{- range $statusCode, $response := $op.Responses.StatusCode }}{{/* Range over responses */}}
	case {{ $statusCode }}:
		{{- template "decode_response" response_elem $response $op.Responses.Type.IsInterface }}
	{{- end }}
	default:
	{{- if $op.Responses.Default }}
		{{- template "decode_response" response_elem $op.Responses.Default $op.Responses.Type.IsInterface }}
	{{- else if $.Error }}
		defRes, err := func() (res {{ $.ErrorType.Go }}, err error) {
			{{- template "decode_response" response_elem $.Error false }}
		}()
		if err != nil {
			return res, errors.Wrap(err, "default")
		}
		return res, errors.Wrap(&defRes, "error")
	{{- else }}
		return res, validate.UnexpectedStatusCode(resp.StatusCode)
	{{- end }}
	}
}
{{- end }}
{{ end }}

{{- define "decode_response" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.ResponseElem*/ -}}
{{- $response := $.Response }}
{{- $ptr := $.Ptr }}
{{- if $response.NoContent }}{{/* Decode NoContent response */}}
	{{- if $response.Wrapped }}
		return {{ if $ptr }}&{{ end }}{{ $response.NoContent.Name }}{
			StatusCode: resp.StatusCode,
		}, nil
	{{- else }}
		return {{ if $ptr }}&{{ end }}{{ $response.NoContent.Name }}{}, nil
	{{- end }}
{{- else }}{{/* Decode content response */}}
	switch ct := resp.Header.Get("Content-Type"); ct {
	{{- range $contentType, $originalType := $response.Contents }}{{/* Range over contents */}}
		case {{ quote $contentType }}:

		{{- $type := $originalType }}
		{{- if $response.Wrapped }}
			{{- $type = ($type.MustField "Response").Type }}
		{{- end }}

		{{- if $contentType.JSON }}
			buf := getBuf()
			defer putBuf(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			d := jx.GetDecoder()
			defer jx.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response {{ $type.Go }}
			if err := func() error {
				{{- template "json/dec" elem $type "response" }}
				return nil
			}(); err != nil {
				return res, err
			}
		{{- else if $type.IsStream }}
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			response := {{ $type.Name }}{Data: bytes.NewReader(b)}
		{{- else }}
			{{- errorf "%q: %s decoder not implemented" $contentType $type }}
		{{- end }}

		{{- if $response.Wrapped }}
			return {{ if $ptr }}&{{ end }}{{ $originalType.Go }}{
				StatusCode: resp.StatusCode,
				Response:   response,
			}, nil
		{{- else }}
			return {{ if $ptr }}&{{ end }}response, nil
		{{- end }}
	{{- end }}{{/* Range over contents */}}
	default:
		return res, validate.InvalidContentType(ct)
	}
{{- end }}{{/* Decode content response */}}
{{- end }}
