{{- /*gotype: github.com/ogen-go/ogen/internal/ir.Type*/ -}}
{{- define "json/encoders_sum" }}
// Encode encodes {{ $.Name }} as json.
func (s {{ $.Name }}) Encode(e *jx.Writer) {
	switch s.Type {
	{{- range $s := $.SumOf }}
	case {{ $s.Name }}{{ $.Name }}:
		{{- template "json/enc" elem $s (printf "s.%s" $s.Name) -}}
	{{- end }}
	}
}

{{ $d := $.JSON.Sum -}}
// Decode decodes {{ $.Name }} from json.
func (s *{{ $.Name }}) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode {{ $.Name }} to nil`)
	}
	// Sum type {{ $d }}.
	{{- if or ($d.Primitive) ($d.TypeDiscriminator) }}
	switch t := d.Next(); t {
	{{- range $s := $.SumOf }}
	case jx.{{ $s.JSON.Type }}:
		{{- template "json/dec" elem $s (printf "s.%s" $s.Name) }}
		s.Type = {{ $s.Name }}{{ $.Name }}
	{{- end }}
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	{{- else if or ($d.Fields) ($d.Discriminator) }}
	if d.Next() != jx.Object {
		return errors.Errorf("unexpected json type %q", d.Next())
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			{{- if $d.Discriminator -}}
			case "{{ $.SumSpec.Discriminator }}":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				{{- range $m:= $.SumSpec.Mapping }}
				case "{{ $m.Key }}":
					s.Type = {{ $m.Type }}{{ $.Name }}
					found = true
				{{- end }}
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			{{- else }}
			{{- range $s := $.SumOf }}
			{{- range $f := $s.SumSpec.Unique }}
			case "{{ $f.Tag.JSON }}":
				found = true
				s.Type = {{ $s.Name }}{{ $.Name }}
			{{- end }}
			{{- end }}
			{{- end }}
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		{{- if $.SumSpec.DefaultMapping }}
		s.Type = {{ $.SumSpec.DefaultMapping }}{{ $.Name }}
		{{- else }}
		return errors.New("unable to detect sum type variant")
		{{- end }}
	}
	switch s.Type {
	{{- range $s := $.SumOf }}
	case {{ $s.Name }}{{ $.Name }}:
		{{- template "json/dec" elem $s (printf "s.%s" $s.Name) }}
	{{- end}}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	{{- else if $d.Discriminator  }}

	{{- end }}
	return nil
}

{{ end }}
