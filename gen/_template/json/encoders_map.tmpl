{{- /*gotype: github.com/ogen-go/ogen/internal/ir.Type*/ -}}
{{- define "json/encoders_map" }}
{{- $fields := $.JSON.Fields }}
// Encode implements json.Marshaler.
func (s {{ $.Name }}) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_ = first
	)
	{{- if $fields.NotEmpty }}
	{{- template "json/encode_struct_fields" $fields }}
	{{- end }}
	for k, elem := range s{{- if $fields.NotEmpty }}.Addtional{{- end }} {
		if !first {
			e.Comma()
		}
		first = true
		e.Str(k)
		e.RawStr(`:`)
		{{ template "json/enc" map_elem $.Item }}
	}
	e.ObjEnd()
}

var jsonFieldsNameOf{{ $.Name }} = [{{ len $fields }}]string{
	{{- range $i, $f := $fields }}
	{{ $i }}: {{ printf "%q" $f.Tag.JSON }},
	{{- end }}
}

// Decode decodes {{ $.Name }} from json.
func (s {{ if $fields.NotEmpty }}*{{ end }}{{ $.Name }}) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode {{ $.Name }} to nil`)
	}

	{{- $requiredMask := $fields.RequiredMask }}
	{{- if $fields.HasRequired }}
	var requiredBitSet [{{ len $requiredMask }}]uint8
	{{- end }}

	m := s{{ if $fields.NotEmpty }}.Addtional{{ end }}
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
	{{- range $i, $f := $fields }}
	case {{ printf "%q" $f.Tag.JSON }}:
		{{- if $f.Spec.Required }}
		requiredBitSet[{{ div $i 8 }}] |= 1 << {{ mod $i 8 }}
		{{- end }}
		s := s.Fields
		{{- template "json/dec" field_elem $f }}
	{{- end }}
		default:
			var elem {{ $.Item.Go }}
			{{- template "json/dec" map_elem $.Item }}
			m[string(k)] = elem
		}
		return nil
	}); err != nil {
		return err
	}

	{{- if $fields.HasRequired }}
	var failures []validate.FieldError
	for i, mask := range [{{ len $requiredMask }}]uint8{
	{{- range $mask := $requiredMask }}
		{{ printf "%#08b" $mask }},
	{{- end }}
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i * 8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOf{{ $.Name }}) {
					name = jsonFieldsNameOf{{ $.Name }}[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	{{- end }}

	return nil
}

{{ end }}
