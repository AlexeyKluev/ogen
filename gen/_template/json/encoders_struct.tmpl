{{- /*gotype: github.com/ogen-go/ogen/internal/ir.Type*/ -}}
{{- define "json/encoders_struct" }}
// Encode implements json.Marshaler.
func (s {{ $.Name }}) Encode(e *jx.Writer) {
	e.ObjStart()
	{{- range $i, $f := $.JSON.Fields }}
		{{- $elem := field_elem $f }}
		{{ template "json/enc" $elem }}
		{{- if ne $i (add (len $.JSON.Fields) -1) }}
            {{ template "json/enc_comma" $elem }}
		{{- end }}
	{{- end }}
	{{/* Trim last comma if needed */}}
	if length := len(e.Buf); length > 0 && e.Buf[length-1] == ',' {
		e.Buf = e.Buf[:length-1]
	}
	e.ObjEnd()
}

// Decode decodes {{ $.Name }} from json.
func (s *{{ $.Name }}) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode {{ $.Name }} to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
	{{- range $f := $.JSON.Fields }}
	case "{{ $f.Tag.JSON }}":
		{{- template "json/dec" field_elem $f }}
	{{- end }}
		default:
			return d.Skip()
		}
		return nil
	})
}

{{ end }}
