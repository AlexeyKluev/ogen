{{- /*gotype: github.com/ogen-go/ogen/internal/ir.Type*/ -}}
{{- define "json/encoders_struct" }}
// Encode implements json.Marshaler.
func (s {{ $.Name }}) Encode(e *jx.Writer) {
	e.ObjStart()
	var (
		first = true
		_ = first
	)
	{{- $fields := $.JSON.Fields }}
	{{- $firstRequiredIDx := $fields.FirstRequiredIndex }}
	{{- range $i, $f := $fields }}
		{
		{{- $elem := field_elem $f }}
		{{- if eq $i $firstRequiredIDx -}}
			{{/* Encode first required field */}}
			if !first {
				{{- template "json/enc_comma" $elem -}}
			}
			first = false
		{{- else if and (ne $firstRequiredIDx -1) (gt $i $firstRequiredIDx) -}}
			{{/* Encode field after first required */}}
			{{- template "json/enc_comma" $elem -}}
		{{- else -}}
			{{/* Encode field before first required */}}
			{{- template "json/enc_comma_first" $elem -}}
		{{- end }}
		{{ template "json/enc" $elem }}
		}
	{{- end }}
	e.ObjEnd()
}

// Decode decodes {{ $.Name }} from json.
func (s *{{ $.Name }}) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode {{ $.Name }} to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
	{{- range $f := $.JSON.Fields }}
	case "{{ $f.Tag.JSON }}":
		{{- template "json/dec" field_elem $f }}
	{{- end }}
		default:
			return d.Skip()
		}
		return nil
	})
}

{{ end }}
