{{- /*gotype: github.com/ogen-go/ogen/internal/ir.Type*/ -}}
{{- define "json/object" }}

{{- if $.IsStruct }}
// Encode implements json.Marshaler.
func (s {{ $.Name }}) Encode(e *jx.Encoder) {
	e.ObjStart()
	{{- range $f := $.JSON.Fields }}
		{{ template "json/enc" field_elem $f -}}
	{{- end }}
	e.ObjEnd()
}

// Decode decodes {{ $.Name }} from json.
func (s *{{ $.Name }}) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode {{ $.Name }} to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
	{{- range $f := $.JSON.Fields }}
	case "{{ $f.Tag.JSON }}":
		{{- template "json/dec" field_elem $f }}
	{{- end }}
		default:
			return d.Skip()
		}
		return nil
	})
}
{{- else if $.IsGeneric }}
{{ $g := $.GenericOf }}
{{ $v := $.GenericVariant }}
// Encode encodes {{ $g.Go }} as json.
func (o {{ $.Name }}) Encode(e *jx.Encoder{{ if $g.Format }}, format func(*jx.Encoder, {{ $g.Go }}){{ end }}) {
{{- if $v.Nullable }}
	if o.Null {
		e.Null()
		return
	}
{{- end }}
{{- if $g.Format }}
	format(e, o.Value)
{{- else if $g.JSON.Format }}
	json.Encode{{ $g.JSON.Format }}(e, o.Value)
{{- else if $g.JSON.Fn }}
	e.{{ $g.JSON.Fn }}({{ $g.Primitive }}(o.Value))
{{- else if $g.IsStruct }}
	o.Value.Encode(e)
{{- end }}
}

// Decode decodes {{ $g.Go }} from json.
func (o *{{ $.Name }}) Decode(d *jx.Decoder{{ if $g.Format }}, format func(*jx.Decoder) ({{ $g.Go }}, error){{ end }}) error {
	if o == nil {
		return errors.New(`invalid: unable to decode {{ $.Name }} to nil`)
	}
	switch d.Next() {
	case jx.{{ $g.JSON.Type }}:
	{{- if $v.Optional }}
		o.Set = true
	{{- end }}
	{{- if $v.Nullable }}
		o.Null = false
	{{- end }}
	{{- if $g.Format }}
		v, err := format(d)
		if err != nil {
			return err
		}
		o.Value = v
	{{- else if $g.JSON.Format }}
		v, err := json.Decode{{ $g.JSON.Format }}(d)
		if err != nil {
			return err
		}
		o.Value = v
	{{- else if $g.JSON.Fn }}
		v, err := d.{{ $g.JSON.Fn }}()
		if err != nil {
			return err
		}
		o.Value = {{ $g.Go }}(v)
	{{- else if $g.IsStruct }}
		if err := o.Value.Decode(d); err != nil {
			return err
		}
	{{- end }}
		return nil
	{{- if $v.Nullable }}
	case jx.Null:
		if err := d.Null(); err != nil {
			return err
		}
		var v {{ $g.Go }}
		o.Value = v
		{{- if $v.Optional }}
		o.Set = true
		{{- end }}
		o.Null = true
		return nil
	{{- end }}
	default:
		return errors.Errorf(`unexpected type %q while reading {{ $.Name }}`, d.Next())
	}
}
{{- else if $.IsEnum }}
// Encode encodes {{ $.Name }} as json.
func (s {{ $.Name }}) Encode(e *jx.Encoder) {
	e.{{ $.JSON.Fn }}({{ $.Primitive }}(s))
}

// Decode decodes {{ $.Name }} from json.
func (s *{{ $.Name }}) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode {{ $.Name }} to nil`)
	}
	v, err := d.{{ $.JSON.Fn }}()
	if err != nil {
		return err
	}
	*s = {{ $.Name }}(v)
	return nil
}
{{- else if $.IsSum }}
// Encode encodes {{ $.Name }} as json.
func (s {{ $.Name }}) Encode(e *jx.Encoder) {
	switch s.Type {
	{{- range $s := $.SumOf }}
	case {{ $s.Name }}{{ $.Name }}:
		{{- template "json/enc" elem $s (printf "s.%s" $s.Name) -}}
	{{- end }}
	}
}

{{ $d := $.JSON.Sum -}}
// Decode decodes {{ $.Name }} from json.
func (s *{{ $.Name }}) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode {{ $.Name }} to nil`)
	}
	// Sum type {{ $d }}.
	{{- if or ($d.Primitive) ($d.TypeDiscriminator) }}
	switch t := d.Next(); t {
	{{- range $s := $.SumOf }}
	case jx.{{ $s.JSON.Type }}:
		{{- template "json/dec" elem $s (printf "s.%s" $s.Name) }}
		s.Type = {{ $s.Name }}{{ $.Name }}
	{{- end }}
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	{{- else if or ($d.Fields) ($d.Discriminator) }}
	if d.Next() != jx.Object {
		return errors.Errorf("unexpected json type %q", d.Next())
	}
	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			{{- if $d.Discriminator -}}
			case "{{ $.SumSpec.Discriminator }}":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				{{- range $m:= $.SumSpec.Mapping }}
				case "{{ $m.Key }}":
					s.Type = {{ $m.Type }}{{ $.Name }}
					found = true
				{{- end }}
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			{{- else }}
			{{- range $s := $.SumOf }}
			{{- range $f := $s.SumSpec.Unique }}
			case "{{ $f.Tag.JSON }}":
				found = true
				s.Type = {{ $s.Name }}{{ $.Name }}
			{{- end }}
			{{- end }}
			{{- end }}
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	{{- range $s := $.SumOf }}
	case {{ $s.Name }}{{ $.Name }}:
		{{- template "json/dec" elem $s (printf "s.%s" $s.Name) }}
	{{- end}}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	{{- else if $d.Discriminator  }}

	{{- end }}
	return nil
}
{{- else if $.IsAlias }}
// Encode encodes {{ $.Name }} as json.
func (s {{ $.Name }}) Encode(e *jx.Encoder) {
	unwrapped := {{ $.AliasTo.Go }}(s)
	{{- template "json/enc" elem $.AliasTo "unwrapped" -}}
}

// Decode decodes {{ $.Name }} from json.
func (s *{{ $.Name }}) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode {{ $.Name }} to nil`)
	}
	var unwrapped {{ $.AliasTo.Go }}
	if err := func() error {
		{{- template "json/dec" elem $.AliasTo "unwrapped" }}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = {{ $.Go }}(unwrapped)
	return nil
}
{{- end }}

{{ end }}
