{{ define "request_encoders" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}{{ if $op.Request }}
{{- range $contentType, $type := $op.Request.Contents }}
func encode{{ $op.Name }}Request{{ $contentType.Name }}(
	req {{ $op.Request.Type.Go }},
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	{{- if $contentType.MultipartForm }}
	contentType string,
	{{- end }}
	rerr error,
) {
	{{- if $type.IsStream }}
		return func() (io.ReadCloser, error) {
			return io.NopCloser(req), nil
		}, nil
	{{- else if $contentType.JSON }}
		e := jx.GetEncoder()
        {{ template "json/enc" elem $type "req" }}
		encoded := e.Bytes()
		return func() (io.ReadCloser, error) {
			return io.NopCloser(bytes.NewReader(encoded)), nil
		}, nil
	{{- else if or $contentType.FormURLEncoded $contentType.MultipartForm }}
		q := uri.NewQueryEncoder()
		{{- range $param := $op.Request.FormParameters $contentType }}
		{
			// Encode {{ quote $param.Spec.Name }} form field.
			cfg := uri.QueryParameterEncodingConfig{
				Name:    {{ quote $param.Spec.Name }},
				Style:   uri.QueryStyle{{ capitalize $param.Spec.Style.String }},
				Explode: {{ if $param.Spec.Explode }}true{{ else }}false{{ end }},
			}
			if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
				{{- template "uri/encode" elem $param.Type (printf "req.%s" $param.Name) }}
			}); err != nil {
				return data, {{ if $contentType.MultipartForm }}"",{{- end }}errors.Wrap(err, "encode query")
			}
		}
		{{- end }}
		{{- if $contentType.FormURLEncoded }}
			encoded := q.Values().Encode()
			return func() (io.ReadCloser, error) {
				return io.NopCloser(strings.NewReader(encoded)), nil
			}, nil
		{{- else if $contentType.MultipartForm }}
			getBody, contentType := ht.CreateMultipartBody(func(w *multipart.Writer) error {
            	{{- range $param := $op.Request.FileParameters $contentType }}
				{{- template "encode_multipart_file_param" $param }}
				{{- end }}
				if err := q.WriteMultipart(w); err != nil {
					return errors.Wrap(err, "write multipart")
				}
				return nil
			})
			return getBody, contentType, nil
		{{- else }}
			{{- errorf "%s encoder not implemented" $contentType }}
		{{- end }}
	{{- else }}
		{{- errorf "%s encoder not implemented" $contentType }}
	{{- end }}
}
{{- end }}
{{- end }}{{ end }}
{{ end }}

{{- define "encode_multipart_file_param" }}
{{- /*gotype: github.com/ogen-go/ogen/gen/ir.Parameter*/ -}}
{{- $name := quote $.Spec.Name }}
{{- $errWrite := printf "write %s" $name | quote }}
{{- $recv := printf "req.%s" $.Name }}
{{- $t := $.Type }}

{{- if $t.IsPrimitive }}
	if err := {{ $recv }}.WriteMultipart({{ $name }}, w); err != nil {
		return errors.Wrap(err, {{ $errWrite }})
	}
{{- else if $t.IsGeneric }}
	if val, ok := {{ $recv }}.Get(); ok {
		if err := val.WriteMultipart({{ $name }}, w); err != nil {
			return errors.Wrap(err, {{ $errWrite }})
		}
	}
{{- else if $t.IsArray }}
	if err := func() error {
		for idx, val := range {{ $recv }} {
			if err := val.WriteMultipart({{ $name }}, w); err != nil {
				return errors.Wrapf(err, "file [%d]", idx)
			}
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, {{ $errWrite }})
	}
{{- else }}
    {{ errorf "unexpected kind %s" $t.Kind }}
{{- end }}
{{- end }}
