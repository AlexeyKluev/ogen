{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}

{{ define "param_dec" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}{{/* Range over methods */}}
{{ if $op.Params }}{{/* Check parameters existence */}}

func decode{{ $op.Name }}Params(args [{{ $op.PathParamsCount }}]string, r *http.Request) ({{ $op.Name }}Params, error) {
	var (
		params {{ $op.Name }}Params
		{{- if $op.HasQueryParams }}
		queryArgs = r.URL.Query()
		{{- end }}
	)
	{{- range $p := $op.Params }}{{/* Range params */}}
    {{- $loc             := printf "%s: %s" $p.Spec.In $p.Spec.Name }}
    {{- $errParse        := printf "%s: parse"         $loc }}
    {{- $errInvalid      := printf "%s: invalid"       $loc }}
    {{- $errNotSpecified := printf "%s: not specified" $loc }}
    {{- $el              := elem $p.Type (printf "params.%s" $p.Name) }}
	// Decode {{ $loc }}.
	{{- if $p.Spec.In.Query }}{{/* Switch location */}}
	{
		values, ok := queryArgs[{{ printf "%q" $p.Spec.Name }}]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values: values,
				Style: uri.QueryStyle{{ pascalSpecial $p.Spec.Style }},
				Explode: {{ if $p.Spec.Explode }}true{{ else }}false{{ end }},
			})

			if err := func() error {
				{{- template "uri/decode" $el }}
			}(); err != nil {
				return params, errors.Wrap(err, `{{ $errParse }}`)
			}

			{{- if $p.Type.NeedValidation }}
			if err := func() error {
				{{- template "validate" $el }}
			}(); err != nil {
				return params, errors.Wrap(err, `{{ $errInvalid }}`)
			}
			{{- end }}
		} {{- if $p.Spec.Required }} else {
			return params, errors.New(`{{ $errNotSpecified }}`)
		} {{- end }}
	}
	{{- else if $p.Spec.In.Path }}
	{
		param := args[{{ $op.PathParamIndex $p.Spec.Name }}]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param: "{{ $p.Spec.Name}}",
				Value: param,
				Style: uri.PathStyle{{ pascalSpecial $p.Spec.Style }},
				Explode: {{ if $p.Spec.Explode }}true{{ else }}false{{ end }},
			})

			if err := func() error {
				{{- template "uri/decode" $el }}
			}(); err != nil {
				return params, err
			}
		} {{ if $p.Spec.Required }} else {
			return params, errors.New(`{{ $errNotSpecified }}`)
		} {{ end }}
	}
	{{- else if $p.Spec.In.Header }}
	{
		param := r.Header.Get("{{ $p.Spec.Name }}")
		if len(param) > 0 {
			d := uri.NewHeaderDecoder(uri.HeaderDecoderConfig{
				Value:   param,
				Explode: {{ if $p.Spec.Explode }}true{{ else }}false{{ end }},
			})
			if err := func() error {
				{{- template "uri/decode" $el }}
			}(); err != nil {
				return params, errors.Wrap(err, `{{ $errParse }}`)
			}
		} {{ if $p.Spec.Required }} else {
			return params, errors.New(`{{ $errNotSpecified }}`)
		} {{ end }}
	}
	{{- else if $p.Spec.In.Cookie }}
	{
		c, err := r.Cookie("{{ $p.Spec.Name }}")
		if err != nil {
			return params, errors.Wrap(err, `{{ $loc }}: get`)
		}

		param := c.Value
		if len(param) > 0 {
			v, err := conv.{{ $p.Type.FromString }}(param)
			if err != nil {
				return params, errors.Wrap(err, `{{ $errParse }}`)
			}

			params.{{ $p.Name }} = v
		} {{ if $p.Spec.Required }} else {
			return params, errors.New(`{{ $errNotSpecified }}`)
		} {{ end }}
	}
	{{- else }}
	{{ errorf "unsupported location %s" $p.Spec.In }}
	{{- end }}{{/* Switch location */}}
	{{- end }}{{/* Range params */}}
	return params, nil
}

{{- end }}{{/* Check parameters existence */}}
{{- end }}{{/* Range over methods */}}
{{ end }}

