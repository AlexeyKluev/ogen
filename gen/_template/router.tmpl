{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ define "router" }}
{{ template "header" $ }}
{{- $router := $.Router }}

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

func (s *Server) notAllowed(w http.ResponseWriter, r *http.Request, allowed string) {
	s.cfg.MethodNotAllowed(w, r, allowed)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	{{- if gt $router.MaxParametersCount 0 }}
	args := [{{ $router.MaxParametersCount }}]string{}
	{{- end }}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		{{- template "route_edge" router_elem $router.Tree.Root 0 }}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name string
	count int
	args [{{ $router.MaxParametersCount }}]string
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.name
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [{{ $router.MaxParametersCount }}]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		{{- template "find_edge" router_elem $router.Tree.Root 0 }}
	}
	return r, false
}

{{ end }}

{{ define "route_handle_request" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.RouteNode*/ -}}
	switch r.Method {
	{{- range $r := $.Routes }}
	case {{ quote $r.Method }}:
		{{- $op := $r.Operation }}
		s.handle{{ $op.Name }}Request([{{ $op.PathParamsCount }}]string{
		{{- range $i, $_ := times $op.PathParamsCount }}
			args[{{ $i }}],
		{{- end }}
		}, w, r)
	{{- end }}
	default:
		s.notAllowed(w, r, {{ quote $.AllowedMethods }})
	}
{{ end }}

{{ define "route_edge" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.RouterElem*/ -}}
{{- $r := $.Route }}
{{- if $r.IsLeaf }}
	if len(elem) == 0 {
		// Leaf node.
		{{ template "route_handle_request" $r }}
		return
	}
{{- else }}
	{{- with $child := $r.StaticChildren }}
		if len(elem) == 0 {
			{{- with $routes := $r.Routes }}
			{{ template "route_handle_request" $r }}
			return
			{{- else }}
			break
			{{- end }}
		}
		switch elem[0] {
		{{- range $c := $child }}
		case {{ quote $c.Head }}: // Prefix: {{ quote $c.Prefix }}
			if l := len({{ quote $c.Prefix }}); len(elem) >= l && elem[0:l] == {{ quote $c.Prefix }} {
				elem = elem[l:]
			} else {
				break
			}
			{{ template "route_edge" router_elem $c $.ParameterIndex }}
		{{- end }}
		}
	{{- end }}
	{{- with $child := $r.ParamChildren }}
		{{- range $c := $child }}
			// Param: {{ quote $c.ParamName }}
			{{- with $tails := $c.Tails }}

			{{- if eq (len $tails) 1 }}
			// Match until {{ quote $tails }}
			idx := strings.IndexByte(elem, {{ quote (index $tails 0) }})
			{{- else }}
			// Match until one of {{ quote $tails }}
			idx := strings.IndexAny(elem, {{ quote $tails }})
			{{- end }}
			if (idx < 0) {
				idx = len(elem)
			}
			args[{{ $.ParameterIndex }}] = elem[:idx]
			elem = elem[idx:]
			{{ template "route_edge" router_elem $c $.ParameterIndex }}
			{{- else }}
			// Leaf parameter
			args[{{ $.ParameterIndex }}] = elem
			elem = ""
			{{ template "route_edge" router_elem $c $.ParameterIndex }}
			{{- end }}
		{{- end }}
	{{- end }}
{{- end }}

{{- end }}

{{ define "find_edge" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.RouterElem*/ -}}
{{- $r := $.Route }}
{{- if $r.IsLeaf }}
	if len(elem) == 0 {
		switch method {
		{{- range $route := $r.Routes }}{{- $op := $route.Operation }}
		case {{ quote $route.Method }}:
			// Leaf: {{ $op.Name }}
			r.name = {{ quote $op.Name }}
			r.args = args
			r.count = {{ $.ParameterIndex }}
			return r, true
		{{- end }}
		default:
			return
		}
	}
{{- else }}
	{{- with $child := $r.StaticChildren }}
		if len(elem) == 0 {
			{{- with $routes := $r.Routes }}
			switch method {
            {{- range $route := $routes }}{{- $op := $route.Operation }}
			case {{ quote $route.Method }}:
				r.name = {{ quote $op.Name }}
				r.args = args
				r.count = {{ $.ParameterIndex }}
				return r, true
			{{- end }}
			default:
				return
			}
			{{- else }}
			break
			{{- end }}
		}
		switch elem[0] {
		{{- range $c := $child }}
		case {{ quote $c.Head }}: // Prefix: {{ quote $c.Prefix }}
			if l := len({{ quote $c.Prefix }}); len(elem) >= l && elem[0:l] == {{ quote $c.Prefix }} {
				elem = elem[l:]
			} else {
				break
			}
			{{ template "find_edge" router_elem $c $.ParameterIndex }}
		{{- end }}
		}
	{{- end }}
	{{- with $child := $r.ParamChildren }}
		{{- range $c := $child }}
			// Param: {{ quote $c.ParamName }}
			{{- with $tails := $c.Tails }}

			{{- if eq (len $tails) 1 }}
			// Match until {{ quote $tails }}
			idx := strings.IndexByte(elem, {{ quote (index $tails 0) }})
			{{- else }}
			// Match until one of {{ quote $tails }}
			idx := strings.IndexAny(elem, {{ quote $tails }})
			{{- end }}
			if (idx < 0) {
				idx = len(elem)
			}
			args[{{ $.ParameterIndex }}] = elem[:idx]
			elem = elem[idx:]
			{{ template "find_edge" router_elem $c $.ParameterIndex }}
			{{- else }}
			// Leaf parameter
			args[{{ $.ParameterIndex }}] = elem
			elem = ""
			{{ template "find_edge" router_elem $c $.ParameterIndex }}
			{{- end }}
		{{- end }}
	{{- end }}
{{- end }}

{{- end }}
