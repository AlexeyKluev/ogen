{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ define "router" }}
{{ template "header" $ }}

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	http.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	args := map[string]string{}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	{{- range $m := $.Methods }}
	case "{{ $m.Method }}":
		{{- template "route_edge" $m.Tree.Root }}
	{{- end }}
	}
	s.notFound(w, r)
}
{{ end }}

{{ define "route_edge" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.RouteNode*/ -}}
{{- if $.IsLeaf }}
	// Leaf: {{ $.Operation.Name }}
	s.handle{{ $.Operation.Name }}Request(args, w, r)
	return
{{- else }}
	{{- with $child := $.StaticChildren }}
		if len(elem) == 0 {
			{{- with $op := $.Operation }}
			s.handle{{ $op.Name }}Request(args, w, r)
			return
			{{- else }}
			break
			{{- end }}
		}
		switch elem[0] {
		{{- range $c := $child }}
		case {{ printf "%q" $c.Head }}: // Prefix: {{ printf "%q" $c.Prefix }}
			if prefix := {{ printf "%q" $c.Prefix }}; len(elem) >= len(prefix) && elem[0:len(prefix)] == prefix {
				elem = elem[len(prefix):]
			} else {
				break
			}
			{{ template "route_edge" $c }}
		{{- end }}
		}
	{{- end }}
	{{- with $child := $.ParamChildren }}
		{{- range $c := $child }}
			// Param: {{ printf "%q" $c.ParamName }}
			{{- with $tails := $c.Tails }}
			// Match until one of {{ printf "%q" $tails }}
			idx := strings.IndexAny(elem, {{ printf "%q" $tails }})
			if idx > 0 {
				args[{{ printf "%q" $c.ParamName }}] = elem[:idx]
				elem = elem[idx:]
				{{ template "route_edge" $c }}
			}
			{{- else }}
			// Leaf parameter
			args[{{ printf "%q" $c.ParamName }}] = elem
			{{ template "route_edge" $c }}
			{{- end }}
		{{- end }}
	{{- end }}
{{- end }}

{{- end }}
