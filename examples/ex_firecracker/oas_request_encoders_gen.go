// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"net/http"

	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

func encodeCreateSnapshotRequestJSON(
	req SnapshotCreateParams,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeCreateSyncActionRequestJSON(
	req InstanceActionInfo,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeLoadSnapshotRequestJSON(
	req SnapshotLoadParams,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeMmdsConfigPutRequestJSON(
	req MmdsConfig,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeMmdsPatchRequestJSON(
	req *MmdsPatchReq,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	if req != nil {
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeMmdsPutRequestJSON(
	req *MmdsPutReq,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	if req != nil {
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePatchBalloonRequestJSON(
	req BalloonUpdate,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePatchBalloonStatsIntervalRequestJSON(
	req BalloonStatsUpdate,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePatchGuestDriveByIDRequestJSON(
	req PartialDrive,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePatchGuestNetworkInterfaceByIDRequestJSON(
	req PartialNetworkInterface,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePatchMachineConfigurationRequestJSON(
	req OptMachineConfiguration,
	r *http.Request,
) error {
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePatchVmRequestJSON(
	req VM,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePutBalloonRequestJSON(
	req Balloon,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePutGuestBootSourceRequestJSON(
	req BootSource,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePutGuestDriveByIDRequestJSON(
	req Drive,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePutGuestNetworkInterfaceByIDRequestJSON(
	req NetworkInterface,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePutGuestVsockRequestJSON(
	req Vsock,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePutLoggerRequestJSON(
	req Logger,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePutMachineConfigurationRequestJSON(
	req OptMachineConfiguration,
	r *http.Request,
) error {
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePutMetricsRequestJSON(
	req Metrics,
	r *http.Request,
) error {
	e := jx.GetEncoder()

	req.Encode(e)
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
