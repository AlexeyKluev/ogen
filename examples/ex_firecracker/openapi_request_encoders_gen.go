// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/encoding/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func encodeCreateSyncActionRequest(req InstanceActionInfo) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePutBalloonRequest(req Balloon) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePatchBalloonRequest(req BalloonUpdate) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePatchBalloonStatsIntervalRequest(req BalloonStatsUpdate) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePutGuestBootSourceRequest(req BootSource) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePutGuestDriveByIDRequest(req Drive) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePatchGuestDriveByIDRequest(req PartialDrive) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePutLoggerRequest(req Logger) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePutMachineConfigurationRequest(req *MachineConfiguration) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePatchMachineConfigurationRequest(req *MachineConfiguration) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePutMetricsRequest(req Metrics) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeMmdsPutRequest(req *MmdsPutApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeMmdsPatchRequest(req *MmdsPatchApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeMmdsConfigPutRequest(req MmdsConfig) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePutGuestNetworkInterfaceByIDRequest(req NetworkInterface) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePatchGuestNetworkInterfaceByIDRequest(req PartialNetworkInterface) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeCreateSnapshotRequest(req SnapshotCreateParams) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeLoadSnapshotRequest(req SnapshotLoadParams) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePatchVmRequest(req VM) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePutGuestVsockRequest(req Vsock) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}
