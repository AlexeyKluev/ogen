// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func (s *Drive) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *FullVmConfiguration) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *InstanceActionInfo) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *InstanceInfo) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Logger) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MachineConfiguration) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'vcpu_count' field.
		validator := validate.Int{
			MinSet:       true,
			Min:          1,
			MaxSet:       true,
			Max:          32,
			MinExclusive: false,
			MaxExclusive: false,
		}
		if err := validator.Validate(s.VcpuCount); err != nil {
			failures = append(failures, validate.FieldError{Name: "vcpu_count", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *NetworkInterface) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PartialDrive) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PartialNetworkInterface) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *RateLimiter) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SnapshotCreateParams) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TokenBucket) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'refill_time' field.
		validator := validate.Int{
			MinSet:       true,
			Min:          0,
			MaxSet:       false,
			Max:          0,
			MinExclusive: false,
			MaxExclusive: false,
		}
		if err := validator.Validate(s.RefillTime); err != nil {
			failures = append(failures, validate.FieldError{Name: "refill_time", Error: err})
		}
	}
	{
		// Validate 'size' field.
		validator := validate.Int{
			MinSet:       true,
			Min:          0,
			MaxSet:       false,
			Max:          0,
			MinExclusive: false,
			MaxExclusive: false,
		}
		if err := validator.Validate(s.Size); err != nil {
			failures = append(failures, validate.FieldError{Name: "size", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *VM) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Vsock) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'guest_cid' field.
		validator := validate.Int{
			MinSet:       true,
			Min:          3,
			MaxSet:       false,
			Max:          0,
			MinExclusive: false,
			MaxExclusive: false,
		}
		if err := validator.Validate(s.GuestCid); err != nil {
			failures = append(failures, validate.FieldError{Name: "guest_cid", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
