// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-faster/errors"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

// WriteJSON implements json.Marshaler.
func (s Balloon) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("amount_mib")
	e.Int(s.AmountMib)

	e.FieldStart("deflate_on_oom")
	e.Bool(s.DeflateOnOom)
	if s.StatsPollingIntervalS.Set {
		e.FieldStart("stats_polling_interval_s")
		s.StatsPollingIntervalS.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Balloon from json stream.
func (s *Balloon) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Balloon to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "amount_mib":
			v, err := d.Int()
			s.AmountMib = int(v)
			if err != nil {
				return err
			}
		case "deflate_on_oom":
			v, err := d.Bool()
			s.DeflateOnOom = bool(v)
			if err != nil {
				return err
			}
		case "stats_polling_interval_s":
			s.StatsPollingIntervalS.Reset()
			if err := s.StatsPollingIntervalS.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BalloonStats) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("target_pages")
	e.Int(s.TargetPages)

	e.FieldStart("actual_pages")
	e.Int(s.ActualPages)

	e.FieldStart("target_mib")
	e.Int(s.TargetMib)

	e.FieldStart("actual_mib")
	e.Int(s.ActualMib)
	if s.SwapIn.Set {
		e.FieldStart("swap_in")
		s.SwapIn.WriteJSON(e)
	}
	if s.SwapOut.Set {
		e.FieldStart("swap_out")
		s.SwapOut.WriteJSON(e)
	}
	if s.MajorFaults.Set {
		e.FieldStart("major_faults")
		s.MajorFaults.WriteJSON(e)
	}
	if s.MinorFaults.Set {
		e.FieldStart("minor_faults")
		s.MinorFaults.WriteJSON(e)
	}
	if s.FreeMemory.Set {
		e.FieldStart("free_memory")
		s.FreeMemory.WriteJSON(e)
	}
	if s.TotalMemory.Set {
		e.FieldStart("total_memory")
		s.TotalMemory.WriteJSON(e)
	}
	if s.AvailableMemory.Set {
		e.FieldStart("available_memory")
		s.AvailableMemory.WriteJSON(e)
	}
	if s.DiskCaches.Set {
		e.FieldStart("disk_caches")
		s.DiskCaches.WriteJSON(e)
	}
	if s.HugetlbAllocations.Set {
		e.FieldStart("hugetlb_allocations")
		s.HugetlbAllocations.WriteJSON(e)
	}
	if s.HugetlbFailures.Set {
		e.FieldStart("hugetlb_failures")
		s.HugetlbFailures.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BalloonStats from json stream.
func (s *BalloonStats) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode BalloonStats to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "target_pages":
			v, err := d.Int()
			s.TargetPages = int(v)
			if err != nil {
				return err
			}
		case "actual_pages":
			v, err := d.Int()
			s.ActualPages = int(v)
			if err != nil {
				return err
			}
		case "target_mib":
			v, err := d.Int()
			s.TargetMib = int(v)
			if err != nil {
				return err
			}
		case "actual_mib":
			v, err := d.Int()
			s.ActualMib = int(v)
			if err != nil {
				return err
			}
		case "swap_in":
			s.SwapIn.Reset()
			if err := s.SwapIn.ReadJSON(d); err != nil {
				return err
			}
		case "swap_out":
			s.SwapOut.Reset()
			if err := s.SwapOut.ReadJSON(d); err != nil {
				return err
			}
		case "major_faults":
			s.MajorFaults.Reset()
			if err := s.MajorFaults.ReadJSON(d); err != nil {
				return err
			}
		case "minor_faults":
			s.MinorFaults.Reset()
			if err := s.MinorFaults.ReadJSON(d); err != nil {
				return err
			}
		case "free_memory":
			s.FreeMemory.Reset()
			if err := s.FreeMemory.ReadJSON(d); err != nil {
				return err
			}
		case "total_memory":
			s.TotalMemory.Reset()
			if err := s.TotalMemory.ReadJSON(d); err != nil {
				return err
			}
		case "available_memory":
			s.AvailableMemory.Reset()
			if err := s.AvailableMemory.ReadJSON(d); err != nil {
				return err
			}
		case "disk_caches":
			s.DiskCaches.Reset()
			if err := s.DiskCaches.ReadJSON(d); err != nil {
				return err
			}
		case "hugetlb_allocations":
			s.HugetlbAllocations.Reset()
			if err := s.HugetlbAllocations.ReadJSON(d); err != nil {
				return err
			}
		case "hugetlb_failures":
			s.HugetlbFailures.Reset()
			if err := s.HugetlbFailures.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BalloonStatsUpdate) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("stats_polling_interval_s")
	e.Int(s.StatsPollingIntervalS)
	e.ObjEnd()
}

// ReadJSON reads BalloonStatsUpdate from json stream.
func (s *BalloonStatsUpdate) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode BalloonStatsUpdate to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "stats_polling_interval_s":
			v, err := d.Int()
			s.StatsPollingIntervalS = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BalloonUpdate) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("amount_mib")
	e.Int(s.AmountMib)
	e.ObjEnd()
}

// ReadJSON reads BalloonUpdate from json stream.
func (s *BalloonUpdate) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode BalloonUpdate to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "amount_mib":
			v, err := d.Int()
			s.AmountMib = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BootSource) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	if s.BootArgs.Set {
		e.FieldStart("boot_args")
		s.BootArgs.WriteJSON(e)
	}
	if s.InitrdPath.Set {
		e.FieldStart("initrd_path")
		s.InitrdPath.WriteJSON(e)
	}

	e.FieldStart("kernel_image_path")
	e.Str(s.KernelImagePath)
	e.ObjEnd()
}

// ReadJSON reads BootSource from json stream.
func (s *BootSource) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode BootSource to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "boot_args":
			s.BootArgs.Reset()
			if err := s.BootArgs.ReadJSON(d); err != nil {
				return err
			}
		case "initrd_path":
			s.InitrdPath.Reset()
			if err := s.InitrdPath.ReadJSON(d); err != nil {
				return err
			}
		case "kernel_image_path":
			v, err := d.Str()
			s.KernelImagePath = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CpuTemplate) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CpuTemplate from json reader.
func (s *CpuTemplate) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CpuTemplate to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CpuTemplate(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateSnapshotNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads CreateSnapshotNoContent from json stream.
func (s *CreateSnapshotNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreateSnapshotNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CreateSyncActionNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads CreateSyncActionNoContent from json stream.
func (s *CreateSyncActionNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CreateSyncActionNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Drive) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("drive_id")
	e.Str(s.DriveID)
	if s.CacheType.Set {
		e.FieldStart("cache_type")
		s.CacheType.WriteJSON(e)
	}

	e.FieldStart("is_read_only")
	e.Bool(s.IsReadOnly)

	e.FieldStart("is_root_device")
	e.Bool(s.IsRootDevice)
	if s.Partuuid.Set {
		e.FieldStart("partuuid")
		s.Partuuid.WriteJSON(e)
	}

	e.FieldStart("path_on_host")
	e.Str(s.PathOnHost)
	if s.RateLimiter.Set {
		e.FieldStart("rate_limiter")
		s.RateLimiter.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Drive from json stream.
func (s *Drive) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Drive to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "drive_id":
			v, err := d.Str()
			s.DriveID = string(v)
			if err != nil {
				return err
			}
		case "cache_type":
			s.CacheType.Reset()
			if err := s.CacheType.ReadJSON(d); err != nil {
				return err
			}
		case "is_read_only":
			v, err := d.Bool()
			s.IsReadOnly = bool(v)
			if err != nil {
				return err
			}
		case "is_root_device":
			v, err := d.Bool()
			s.IsRootDevice = bool(v)
			if err != nil {
				return err
			}
		case "partuuid":
			s.Partuuid.Reset()
			if err := s.Partuuid.ReadJSON(d); err != nil {
				return err
			}
		case "path_on_host":
			v, err := d.Str()
			s.PathOnHost = string(v)
			if err != nil {
				return err
			}
		case "rate_limiter":
			s.RateLimiter.Reset()
			if err := s.RateLimiter.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Error) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	if s.FaultMessage.Set {
		e.FieldStart("fault_message")
		s.FaultMessage.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Error from json stream.
func (s *Error) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Error to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "fault_message":
			s.FaultMessage.Reset()
			if err := s.FaultMessage.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ErrorStatusCode) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads ErrorStatusCode from json stream.
func (s *ErrorStatusCode) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ErrorStatusCode to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FullVmConfiguration) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	if s.BalloonDevice.Set {
		e.FieldStart("balloon_device")
		s.BalloonDevice.WriteJSON(e)
	}
	if s.BlockDevices != nil {
		e.FieldStart("block_devices")
		e.ArrStart()
		for _, elem := range s.BlockDevices {
			elem.WriteJSON(e)
		}
		e.ArrEnd()
	}
	if s.BootSource.Set {
		e.FieldStart("boot_source")
		s.BootSource.WriteJSON(e)
	}
	if s.Logger.Set {
		e.FieldStart("logger")
		s.Logger.WriteJSON(e)
	}
	if s.MachineConfig.Set {
		e.FieldStart("machine_config")
		s.MachineConfig.WriteJSON(e)
	}
	if s.Metrics.Set {
		e.FieldStart("metrics")
		s.Metrics.WriteJSON(e)
	}
	if s.MmdsConfig.Set {
		e.FieldStart("mmds_config")
		s.MmdsConfig.WriteJSON(e)
	}
	if s.NetDevices != nil {
		e.FieldStart("net_devices")
		e.ArrStart()
		for _, elem := range s.NetDevices {
			elem.WriteJSON(e)
		}
		e.ArrEnd()
	}
	if s.VsockDevice.Set {
		e.FieldStart("vsock_device")
		s.VsockDevice.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FullVmConfiguration from json stream.
func (s *FullVmConfiguration) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode FullVmConfiguration to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "balloon_device":
			s.BalloonDevice.Reset()
			if err := s.BalloonDevice.ReadJSON(d); err != nil {
				return err
			}
		case "block_devices":
			s.BlockDevices = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Drive
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.BlockDevices = append(s.BlockDevices, elem)
				return nil
			}); err != nil {
				return err
			}
		case "boot_source":
			s.BootSource.Reset()
			if err := s.BootSource.ReadJSON(d); err != nil {
				return err
			}
		case "logger":
			s.Logger.Reset()
			if err := s.Logger.ReadJSON(d); err != nil {
				return err
			}
		case "machine_config":
			s.MachineConfig.Reset()
			if err := s.MachineConfig.ReadJSON(d); err != nil {
				return err
			}
		case "metrics":
			s.Metrics.Reset()
			if err := s.Metrics.ReadJSON(d); err != nil {
				return err
			}
		case "mmds_config":
			s.MmdsConfig.Reset()
			if err := s.MmdsConfig.ReadJSON(d); err != nil {
				return err
			}
		case "net_devices":
			s.NetDevices = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem NetworkInterface
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.NetDevices = append(s.NetDevices, elem)
				return nil
			}); err != nil {
				return err
			}
		case "vsock_device":
			s.VsockDevice.Reset()
			if err := s.VsockDevice.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InstanceActionInfo) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("action_type")
	s.ActionType.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads InstanceActionInfo from json stream.
func (s *InstanceActionInfo) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode InstanceActionInfo to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "action_type":
			if err := s.ActionType.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InstanceActionInfoActionType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads InstanceActionInfoActionType from json reader.
func (s *InstanceActionInfoActionType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode InstanceActionInfoActionType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = InstanceActionInfoActionType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s InstanceInfo) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("app_name")
	e.Str(s.AppName)

	e.FieldStart("id")
	e.Str(s.ID)

	e.FieldStart("state")
	s.State.WriteJSON(e)

	e.FieldStart("vmm_version")
	e.Str(s.VmmVersion)
	e.ObjEnd()
}

// ReadJSON reads InstanceInfo from json stream.
func (s *InstanceInfo) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode InstanceInfo to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "app_name":
			v, err := d.Str()
			s.AppName = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "vmm_version":
			v, err := d.Str()
			s.VmmVersion = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InstanceInfoState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads InstanceInfoState from json reader.
func (s *InstanceInfoState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode InstanceInfoState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = InstanceInfoState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s LoadSnapshotNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads LoadSnapshotNoContent from json stream.
func (s *LoadSnapshotNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode LoadSnapshotNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Logger) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	if s.Level.Set {
		e.FieldStart("level")
		s.Level.WriteJSON(e)
	}

	e.FieldStart("log_path")
	e.Str(s.LogPath)
	if s.ShowLevel.Set {
		e.FieldStart("show_level")
		s.ShowLevel.WriteJSON(e)
	}
	if s.ShowLogOrigin.Set {
		e.FieldStart("show_log_origin")
		s.ShowLogOrigin.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Logger from json stream.
func (s *Logger) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Logger to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "level":
			s.Level.Reset()
			if err := s.Level.ReadJSON(d); err != nil {
				return err
			}
		case "log_path":
			v, err := d.Str()
			s.LogPath = string(v)
			if err != nil {
				return err
			}
		case "show_level":
			s.ShowLevel.Reset()
			if err := s.ShowLevel.ReadJSON(d); err != nil {
				return err
			}
		case "show_log_origin":
			s.ShowLogOrigin.Reset()
			if err := s.ShowLogOrigin.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s LoggerLevel) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads LoggerLevel from json reader.
func (s *LoggerLevel) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode LoggerLevel to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = LoggerLevel(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MachineConfiguration) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	if s.CPUTemplate.Set {
		e.FieldStart("cpu_template")
		s.CPUTemplate.WriteJSON(e)
	}

	e.FieldStart("ht_enabled")
	e.Bool(s.HtEnabled)

	e.FieldStart("mem_size_mib")
	e.Int(s.MemSizeMib)
	if s.TrackDirtyPages.Set {
		e.FieldStart("track_dirty_pages")
		s.TrackDirtyPages.WriteJSON(e)
	}

	e.FieldStart("vcpu_count")
	e.Int(s.VcpuCount)
	e.ObjEnd()
}

// ReadJSON reads MachineConfiguration from json stream.
func (s *MachineConfiguration) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MachineConfiguration to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "cpu_template":
			s.CPUTemplate.Reset()
			if err := s.CPUTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "ht_enabled":
			v, err := d.Bool()
			s.HtEnabled = bool(v)
			if err != nil {
				return err
			}
		case "mem_size_mib":
			v, err := d.Int()
			s.MemSizeMib = int(v)
			if err != nil {
				return err
			}
		case "track_dirty_pages":
			s.TrackDirtyPages.Reset()
			if err := s.TrackDirtyPages.ReadJSON(d); err != nil {
				return err
			}
		case "vcpu_count":
			v, err := d.Int()
			s.VcpuCount = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Metrics) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("metrics_path")
	e.Str(s.MetricsPath)
	e.ObjEnd()
}

// ReadJSON reads Metrics from json stream.
func (s *Metrics) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Metrics to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "metrics_path":
			v, err := d.Str()
			s.MetricsPath = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MmdsConfig) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	if s.Ipv4Address.Set {
		e.FieldStart("ipv4_address")
		s.Ipv4Address.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MmdsConfig from json stream.
func (s *MmdsConfig) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MmdsConfig to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "ipv4_address":
			s.Ipv4Address.Reset()
			if err := s.Ipv4Address.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MmdsConfigPutNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads MmdsConfigPutNoContent from json stream.
func (s *MmdsConfigPutNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MmdsConfigPutNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MmdsGetOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads MmdsGetOK from json stream.
func (s *MmdsGetOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MmdsGetOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MmdsPatchNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads MmdsPatchNoContent from json stream.
func (s *MmdsPatchNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MmdsPatchNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MmdsPatchReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads MmdsPatchReq from json stream.
func (s *MmdsPatchReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MmdsPatchReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MmdsPutNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads MmdsPutNoContent from json stream.
func (s *MmdsPutNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MmdsPutNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MmdsPutReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads MmdsPutReq from json stream.
func (s *MmdsPutReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MmdsPutReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NetworkInterface) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	if s.AllowMmdsRequests.Set {
		e.FieldStart("allow_mmds_requests")
		s.AllowMmdsRequests.WriteJSON(e)
	}
	if s.GuestMAC.Set {
		e.FieldStart("guest_mac")
		s.GuestMAC.WriteJSON(e)
	}

	e.FieldStart("host_dev_name")
	e.Str(s.HostDevName)

	e.FieldStart("iface_id")
	e.Str(s.IfaceID)
	if s.RxRateLimiter.Set {
		e.FieldStart("rx_rate_limiter")
		s.RxRateLimiter.WriteJSON(e)
	}
	if s.TxRateLimiter.Set {
		e.FieldStart("tx_rate_limiter")
		s.TxRateLimiter.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NetworkInterface from json stream.
func (s *NetworkInterface) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode NetworkInterface to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "allow_mmds_requests":
			s.AllowMmdsRequests.Reset()
			if err := s.AllowMmdsRequests.ReadJSON(d); err != nil {
				return err
			}
		case "guest_mac":
			s.GuestMAC.Reset()
			if err := s.GuestMAC.ReadJSON(d); err != nil {
				return err
			}
		case "host_dev_name":
			v, err := d.Str()
			s.HostDevName = string(v)
			if err != nil {
				return err
			}
		case "iface_id":
			v, err := d.Str()
			s.IfaceID = string(v)
			if err != nil {
				return err
			}
		case "rx_rate_limiter":
			s.RxRateLimiter.Reset()
			if err := s.RxRateLimiter.ReadJSON(d); err != nil {
				return err
			}
		case "tx_rate_limiter":
			s.TxRateLimiter.Reset()
			if err := s.TxRateLimiter.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON writes json value of Balloon to json stream.
func (o OptBalloon) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of Balloon from json iterator.
func (o *OptBalloon) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptBalloon to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptBalloon`, d.Next())
	}
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(e *json.Encoder) {
	e.Bool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptBool to nil`)
	}
	switch d.Next() {
	case json.Bool:
		o.Set = true
		v, err := d.Bool()
		if err != nil {
			return err
		}
		o.Value = bool(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptBool`, d.Next())
	}
}

// WriteJSON writes json value of BootSource to json stream.
func (o OptBootSource) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BootSource from json iterator.
func (o *OptBootSource) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptBootSource to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptBootSource`, d.Next())
	}
}

// WriteJSON writes json value of CpuTemplate to json stream.
func (o OptCpuTemplate) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CpuTemplate from json iterator.
func (o *OptCpuTemplate) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptCpuTemplate to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CpuTemplate(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptCpuTemplate`, d.Next())
	}
}

// WriteJSON writes json value of int to json stream.
func (o OptInt) WriteJSON(e *json.Encoder) {
	e.Int(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptInt) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptInt to nil`)
	}
	switch d.Next() {
	case json.Number:
		o.Set = true
		v, err := d.Int()
		if err != nil {
			return err
		}
		o.Value = int(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptInt`, d.Next())
	}
}

// WriteJSON writes json value of int64 to json stream.
func (o OptInt64) WriteJSON(e *json.Encoder) {
	e.Int64(int64(o.Value))
}

// ReadJSON reads json value of int64 from json iterator.
func (o *OptInt64) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptInt64 to nil`)
	}
	switch d.Next() {
	case json.Number:
		o.Set = true
		v, err := d.Int64()
		if err != nil {
			return err
		}
		o.Value = int64(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptInt64`, d.Next())
	}
}

// WriteJSON writes json value of Logger to json stream.
func (o OptLogger) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of Logger from json iterator.
func (o *OptLogger) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptLogger to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptLogger`, d.Next())
	}
}

// WriteJSON writes json value of LoggerLevel to json stream.
func (o OptLoggerLevel) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of LoggerLevel from json iterator.
func (o *OptLoggerLevel) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptLoggerLevel to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = LoggerLevel(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptLoggerLevel`, d.Next())
	}
}

// WriteJSON writes json value of MachineConfiguration to json stream.
func (o OptMachineConfiguration) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of MachineConfiguration from json iterator.
func (o *OptMachineConfiguration) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptMachineConfiguration to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptMachineConfiguration`, d.Next())
	}
}

// WriteJSON writes json value of Metrics to json stream.
func (o OptMetrics) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of Metrics from json iterator.
func (o *OptMetrics) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptMetrics to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptMetrics`, d.Next())
	}
}

// WriteJSON writes json value of MmdsConfig to json stream.
func (o OptMmdsConfig) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of MmdsConfig from json iterator.
func (o *OptMmdsConfig) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptMmdsConfig to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptMmdsConfig`, d.Next())
	}
}

// WriteJSON writes json value of RateLimiter to json stream.
func (o OptRateLimiter) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of RateLimiter from json iterator.
func (o *OptRateLimiter) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptRateLimiter to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptRateLimiter`, d.Next())
	}
}

// WriteJSON writes json value of SnapshotCreateParamsSnapshotType to json stream.
func (o OptSnapshotCreateParamsSnapshotType) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of SnapshotCreateParamsSnapshotType from json iterator.
func (o *OptSnapshotCreateParamsSnapshotType) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptSnapshotCreateParamsSnapshotType to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = SnapshotCreateParamsSnapshotType(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptSnapshotCreateParamsSnapshotType`, d.Next())
	}
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptString to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptString`, d.Next())
	}
}

// WriteJSON writes json value of TokenBucket to json stream.
func (o OptTokenBucket) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of TokenBucket from json iterator.
func (o *OptTokenBucket) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptTokenBucket to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptTokenBucket`, d.Next())
	}
}

// WriteJSON writes json value of Vsock to json stream.
func (o OptVsock) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of Vsock from json iterator.
func (o *OptVsock) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptVsock to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptVsock`, d.Next())
	}
}

// WriteJSON implements json.Marshaler.
func (s PartialDrive) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("drive_id")
	e.Str(s.DriveID)
	if s.PathOnHost.Set {
		e.FieldStart("path_on_host")
		s.PathOnHost.WriteJSON(e)
	}
	if s.RateLimiter.Set {
		e.FieldStart("rate_limiter")
		s.RateLimiter.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PartialDrive from json stream.
func (s *PartialDrive) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PartialDrive to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "drive_id":
			v, err := d.Str()
			s.DriveID = string(v)
			if err != nil {
				return err
			}
		case "path_on_host":
			s.PathOnHost.Reset()
			if err := s.PathOnHost.ReadJSON(d); err != nil {
				return err
			}
		case "rate_limiter":
			s.RateLimiter.Reset()
			if err := s.RateLimiter.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PartialNetworkInterface) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("iface_id")
	e.Str(s.IfaceID)
	if s.RxRateLimiter.Set {
		e.FieldStart("rx_rate_limiter")
		s.RxRateLimiter.WriteJSON(e)
	}
	if s.TxRateLimiter.Set {
		e.FieldStart("tx_rate_limiter")
		s.TxRateLimiter.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PartialNetworkInterface from json stream.
func (s *PartialNetworkInterface) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PartialNetworkInterface to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "iface_id":
			v, err := d.Str()
			s.IfaceID = string(v)
			if err != nil {
				return err
			}
		case "rx_rate_limiter":
			s.RxRateLimiter.Reset()
			if err := s.RxRateLimiter.ReadJSON(d); err != nil {
				return err
			}
		case "tx_rate_limiter":
			s.TxRateLimiter.Reset()
			if err := s.TxRateLimiter.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PatchBalloonNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PatchBalloonNoContent from json stream.
func (s *PatchBalloonNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PatchBalloonNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PatchBalloonStatsIntervalNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PatchBalloonStatsIntervalNoContent from json stream.
func (s *PatchBalloonStatsIntervalNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PatchBalloonStatsIntervalNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PatchGuestDriveByIDNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PatchGuestDriveByIDNoContent from json stream.
func (s *PatchGuestDriveByIDNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PatchGuestDriveByIDNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PatchGuestNetworkInterfaceByIDNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PatchGuestNetworkInterfaceByIDNoContent from json stream.
func (s *PatchGuestNetworkInterfaceByIDNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PatchGuestNetworkInterfaceByIDNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PatchMachineConfigurationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PatchMachineConfigurationNoContent from json stream.
func (s *PatchMachineConfigurationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PatchMachineConfigurationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PatchVmNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PatchVmNoContent from json stream.
func (s *PatchVmNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PatchVmNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PutBalloonNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PutBalloonNoContent from json stream.
func (s *PutBalloonNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PutBalloonNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PutGuestBootSourceNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PutGuestBootSourceNoContent from json stream.
func (s *PutGuestBootSourceNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PutGuestBootSourceNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PutGuestDriveByIDNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PutGuestDriveByIDNoContent from json stream.
func (s *PutGuestDriveByIDNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PutGuestDriveByIDNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PutGuestNetworkInterfaceByIDNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PutGuestNetworkInterfaceByIDNoContent from json stream.
func (s *PutGuestNetworkInterfaceByIDNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PutGuestNetworkInterfaceByIDNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PutGuestVsockNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PutGuestVsockNoContent from json stream.
func (s *PutGuestVsockNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PutGuestVsockNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PutLoggerNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PutLoggerNoContent from json stream.
func (s *PutLoggerNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PutLoggerNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PutMachineConfigurationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PutMachineConfigurationNoContent from json stream.
func (s *PutMachineConfigurationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PutMachineConfigurationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PutMetricsNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// ReadJSON reads PutMetricsNoContent from json stream.
func (s *PutMetricsNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PutMetricsNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RateLimiter) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	if s.Bandwidth.Set {
		e.FieldStart("bandwidth")
		s.Bandwidth.WriteJSON(e)
	}
	if s.Ops.Set {
		e.FieldStart("ops")
		s.Ops.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads RateLimiter from json stream.
func (s *RateLimiter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode RateLimiter to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "bandwidth":
			s.Bandwidth.Reset()
			if err := s.Bandwidth.ReadJSON(d); err != nil {
				return err
			}
		case "ops":
			s.Ops.Reset()
			if err := s.Ops.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SnapshotCreateParams) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("mem_file_path")
	e.Str(s.MemFilePath)

	e.FieldStart("snapshot_path")
	e.Str(s.SnapshotPath)
	if s.SnapshotType.Set {
		e.FieldStart("snapshot_type")
		s.SnapshotType.WriteJSON(e)
	}
	if s.Version.Set {
		e.FieldStart("version")
		s.Version.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads SnapshotCreateParams from json stream.
func (s *SnapshotCreateParams) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SnapshotCreateParams to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "mem_file_path":
			v, err := d.Str()
			s.MemFilePath = string(v)
			if err != nil {
				return err
			}
		case "snapshot_path":
			v, err := d.Str()
			s.SnapshotPath = string(v)
			if err != nil {
				return err
			}
		case "snapshot_type":
			s.SnapshotType.Reset()
			if err := s.SnapshotType.ReadJSON(d); err != nil {
				return err
			}
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SnapshotCreateParamsSnapshotType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SnapshotCreateParamsSnapshotType from json reader.
func (s *SnapshotCreateParamsSnapshotType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SnapshotCreateParamsSnapshotType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SnapshotCreateParamsSnapshotType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SnapshotLoadParams) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	if s.EnableDiffSnapshots.Set {
		e.FieldStart("enable_diff_snapshots")
		s.EnableDiffSnapshots.WriteJSON(e)
	}

	e.FieldStart("mem_file_path")
	e.Str(s.MemFilePath)

	e.FieldStart("snapshot_path")
	e.Str(s.SnapshotPath)
	if s.ResumeVM.Set {
		e.FieldStart("resume_vm")
		s.ResumeVM.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads SnapshotLoadParams from json stream.
func (s *SnapshotLoadParams) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SnapshotLoadParams to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enable_diff_snapshots":
			s.EnableDiffSnapshots.Reset()
			if err := s.EnableDiffSnapshots.ReadJSON(d); err != nil {
				return err
			}
		case "mem_file_path":
			v, err := d.Str()
			s.MemFilePath = string(v)
			if err != nil {
				return err
			}
		case "snapshot_path":
			v, err := d.Str()
			s.SnapshotPath = string(v)
			if err != nil {
				return err
			}
		case "resume_vm":
			s.ResumeVM.Reset()
			if err := s.ResumeVM.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TokenBucket) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	if s.OneTimeBurst.Set {
		e.FieldStart("one_time_burst")
		s.OneTimeBurst.WriteJSON(e)
	}

	e.FieldStart("refill_time")
	e.Int64(s.RefillTime)

	e.FieldStart("size")
	e.Int64(s.Size)
	e.ObjEnd()
}

// ReadJSON reads TokenBucket from json stream.
func (s *TokenBucket) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode TokenBucket to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "one_time_burst":
			s.OneTimeBurst.Reset()
			if err := s.OneTimeBurst.ReadJSON(d); err != nil {
				return err
			}
		case "refill_time":
			v, err := d.Int64()
			s.RefillTime = int64(v)
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int64()
			s.Size = int64(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s VM) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("state")
	s.State.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads VM from json stream.
func (s *VM) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode VM to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s VMState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads VMState from json reader.
func (s *VMState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode VMState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = VMState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Vsock) WriteJSON(e *json.Encoder) {
	e.ObjStart()

	e.FieldStart("guest_cid")
	e.Int(s.GuestCid)

	e.FieldStart("uds_path")
	e.Str(s.UdsPath)

	e.FieldStart("vsock_id")
	e.Str(s.VsockID)
	e.ObjEnd()
}

// ReadJSON reads Vsock from json stream.
func (s *Vsock) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Vsock to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "guest_cid":
			v, err := d.Int()
			s.GuestCid = int(v)
			if err != nil {
				return err
			}
		case "uds_path":
			v, err := d.Str()
			s.UdsPath = string(v)
			if err != nil {
				return err
			}
		case "vsock_id":
			v, err := d.Str()
			s.VsockID = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}
