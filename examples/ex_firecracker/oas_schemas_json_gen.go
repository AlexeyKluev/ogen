// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

// WriteJSON implements json.Marshaler.
func (s Balloon) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()

	more.More()
	j.WriteObjectField("amount_mib")
	j.WriteInt(s.AmountMib)

	more.More()
	j.WriteObjectField("deflate_on_oom")
	j.WriteBool(s.DeflateOnOom)

	if s.StatsPollingIntervalS.Set {
		more.More()
		j.WriteObjectField("stats_polling_interval_s")
		s.StatsPollingIntervalS.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes Balloon json value to io.Writer.
func (s Balloon) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Balloon json value from io.Reader.
func (s *Balloon) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Balloon from json stream.
func (s *Balloon) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "amount_mib":
			s.AmountMib = i.ReadInt()
			return i.Error == nil
		case "deflate_on_oom":
			s.DeflateOnOom = i.ReadBool()
			return i.Error == nil
		case "stats_polling_interval_s":
			s.StatsPollingIntervalS.Reset()
			if err := s.StatsPollingIntervalS.ReadJSON(i); err != nil {
				i.ReportError("Field StatsPollingIntervalS", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BalloonStats) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()

	more.More()
	j.WriteObjectField("actual_mib")
	j.WriteInt(s.ActualMib)

	more.More()
	j.WriteObjectField("actual_pages")
	j.WriteInt(s.ActualPages)

	if s.AvailableMemory.Set {
		more.More()
		j.WriteObjectField("available_memory")
		s.AvailableMemory.WriteJSON(j)
	}

	if s.DiskCaches.Set {
		more.More()
		j.WriteObjectField("disk_caches")
		s.DiskCaches.WriteJSON(j)
	}

	if s.FreeMemory.Set {
		more.More()
		j.WriteObjectField("free_memory")
		s.FreeMemory.WriteJSON(j)
	}

	if s.HugetlbAllocations.Set {
		more.More()
		j.WriteObjectField("hugetlb_allocations")
		s.HugetlbAllocations.WriteJSON(j)
	}

	if s.HugetlbFailures.Set {
		more.More()
		j.WriteObjectField("hugetlb_failures")
		s.HugetlbFailures.WriteJSON(j)
	}

	if s.MajorFaults.Set {
		more.More()
		j.WriteObjectField("major_faults")
		s.MajorFaults.WriteJSON(j)
	}

	if s.MinorFaults.Set {
		more.More()
		j.WriteObjectField("minor_faults")
		s.MinorFaults.WriteJSON(j)
	}

	if s.SwapIn.Set {
		more.More()
		j.WriteObjectField("swap_in")
		s.SwapIn.WriteJSON(j)
	}

	if s.SwapOut.Set {
		more.More()
		j.WriteObjectField("swap_out")
		s.SwapOut.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("target_mib")
	j.WriteInt(s.TargetMib)

	more.More()
	j.WriteObjectField("target_pages")
	j.WriteInt(s.TargetPages)

	if s.TotalMemory.Set {
		more.More()
		j.WriteObjectField("total_memory")
		s.TotalMemory.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BalloonStats json value to io.Writer.
func (s BalloonStats) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BalloonStats json value from io.Reader.
func (s *BalloonStats) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BalloonStats from json stream.
func (s *BalloonStats) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "actual_mib":
			s.ActualMib = i.ReadInt()
			return i.Error == nil
		case "actual_pages":
			s.ActualPages = i.ReadInt()
			return i.Error == nil
		case "available_memory":
			s.AvailableMemory.Reset()
			if err := s.AvailableMemory.ReadJSON(i); err != nil {
				i.ReportError("Field AvailableMemory", err.Error())
				return false
			}
			return true
		case "disk_caches":
			s.DiskCaches.Reset()
			if err := s.DiskCaches.ReadJSON(i); err != nil {
				i.ReportError("Field DiskCaches", err.Error())
				return false
			}
			return true
		case "free_memory":
			s.FreeMemory.Reset()
			if err := s.FreeMemory.ReadJSON(i); err != nil {
				i.ReportError("Field FreeMemory", err.Error())
				return false
			}
			return true
		case "hugetlb_allocations":
			s.HugetlbAllocations.Reset()
			if err := s.HugetlbAllocations.ReadJSON(i); err != nil {
				i.ReportError("Field HugetlbAllocations", err.Error())
				return false
			}
			return true
		case "hugetlb_failures":
			s.HugetlbFailures.Reset()
			if err := s.HugetlbFailures.ReadJSON(i); err != nil {
				i.ReportError("Field HugetlbFailures", err.Error())
				return false
			}
			return true
		case "major_faults":
			s.MajorFaults.Reset()
			if err := s.MajorFaults.ReadJSON(i); err != nil {
				i.ReportError("Field MajorFaults", err.Error())
				return false
			}
			return true
		case "minor_faults":
			s.MinorFaults.Reset()
			if err := s.MinorFaults.ReadJSON(i); err != nil {
				i.ReportError("Field MinorFaults", err.Error())
				return false
			}
			return true
		case "swap_in":
			s.SwapIn.Reset()
			if err := s.SwapIn.ReadJSON(i); err != nil {
				i.ReportError("Field SwapIn", err.Error())
				return false
			}
			return true
		case "swap_out":
			s.SwapOut.Reset()
			if err := s.SwapOut.ReadJSON(i); err != nil {
				i.ReportError("Field SwapOut", err.Error())
				return false
			}
			return true
		case "target_mib":
			s.TargetMib = i.ReadInt()
			return i.Error == nil
		case "target_pages":
			s.TargetPages = i.ReadInt()
			return i.Error == nil
		case "total_memory":
			s.TotalMemory.Reset()
			if err := s.TotalMemory.ReadJSON(i); err != nil {
				i.ReportError("Field TotalMemory", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BalloonStatsUpdate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()

	more.More()
	j.WriteObjectField("stats_polling_interval_s")
	j.WriteInt(s.StatsPollingIntervalS)

	j.WriteObjectEnd()
}

// WriteJSONTo writes BalloonStatsUpdate json value to io.Writer.
func (s BalloonStatsUpdate) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BalloonStatsUpdate json value from io.Reader.
func (s *BalloonStatsUpdate) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BalloonStatsUpdate from json stream.
func (s *BalloonStatsUpdate) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "stats_polling_interval_s":
			s.StatsPollingIntervalS = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BalloonUpdate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()

	more.More()
	j.WriteObjectField("amount_mib")
	j.WriteInt(s.AmountMib)

	j.WriteObjectEnd()
}

// WriteJSONTo writes BalloonUpdate json value to io.Writer.
func (s BalloonUpdate) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BalloonUpdate json value from io.Reader.
func (s *BalloonUpdate) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BalloonUpdate from json stream.
func (s *BalloonUpdate) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "amount_mib":
			s.AmountMib = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BootSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.BootArgs.Set {
		more.More()
		j.WriteObjectField("boot_args")
		s.BootArgs.WriteJSON(j)
	}

	if s.InitrdPath.Set {
		more.More()
		j.WriteObjectField("initrd_path")
		s.InitrdPath.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("kernel_image_path")
	j.WriteString(s.KernelImagePath)

	j.WriteObjectEnd()
}

// WriteJSONTo writes BootSource json value to io.Writer.
func (s BootSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BootSource json value from io.Reader.
func (s *BootSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BootSource from json stream.
func (s *BootSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "boot_args":
			s.BootArgs.Reset()
			if err := s.BootArgs.ReadJSON(i); err != nil {
				i.ReportError("Field BootArgs", err.Error())
				return false
			}
			return true
		case "initrd_path":
			s.InitrdPath.Reset()
			if err := s.InitrdPath.ReadJSON(i); err != nil {
				i.ReportError("Field InitrdPath", err.Error())
				return false
			}
			return true
		case "kernel_image_path":
			s.KernelImagePath = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CpuTemplate) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CpuTemplate from json stream.
func (s *CpuTemplate) ReadJSON(i *json.Iterator) error {
	*s = CpuTemplate(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Drive) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CacheType.Set {
		more.More()
		j.WriteObjectField("cache_type")
		s.CacheType.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("drive_id")
	j.WriteString(s.DriveID)

	more.More()
	j.WriteObjectField("is_read_only")
	j.WriteBool(s.IsReadOnly)

	more.More()
	j.WriteObjectField("is_root_device")
	j.WriteBool(s.IsRootDevice)

	if s.Partuuid.Set {
		more.More()
		j.WriteObjectField("partuuid")
		s.Partuuid.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("path_on_host")
	j.WriteString(s.PathOnHost)

	if s.RateLimiter.Set {
		more.More()
		j.WriteObjectField("rate_limiter")
		s.RateLimiter.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes Drive json value to io.Writer.
func (s Drive) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Drive json value from io.Reader.
func (s *Drive) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Drive from json stream.
func (s *Drive) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cache_type":
			s.CacheType.Reset()
			if err := s.CacheType.ReadJSON(i); err != nil {
				i.ReportError("Field CacheType", err.Error())
				return false
			}
			return true
		case "drive_id":
			s.DriveID = i.ReadString()
			return i.Error == nil
		case "is_read_only":
			s.IsReadOnly = i.ReadBool()
			return i.Error == nil
		case "is_root_device":
			s.IsRootDevice = i.ReadBool()
			return i.Error == nil
		case "partuuid":
			s.Partuuid.Reset()
			if err := s.Partuuid.ReadJSON(i); err != nil {
				i.ReportError("Field Partuuid", err.Error())
				return false
			}
			return true
		case "path_on_host":
			s.PathOnHost = i.ReadString()
			return i.Error == nil
		case "rate_limiter":
			s.RateLimiter.Reset()
			if err := s.RateLimiter.ReadJSON(i); err != nil {
				i.ReportError("Field RateLimiter", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Error) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FaultMessage.Set {
		more.More()
		j.WriteObjectField("fault_message")
		s.FaultMessage.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes Error json value to io.Writer.
func (s Error) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Error json value from io.Reader.
func (s *Error) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Error from json stream.
func (s *Error) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fault_message":
			s.FaultMessage.Reset()
			if err := s.FaultMessage.ReadJSON(i); err != nil {
				i.ReportError("Field FaultMessage", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ErrorStatusCode) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes ErrorStatusCode json value to io.Writer.
func (s ErrorStatusCode) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ErrorStatusCode json value from io.Reader.
func (s *ErrorStatusCode) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ErrorStatusCode from json stream.
func (s *ErrorStatusCode) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FullVmConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.BalloonDevice.Set {
		more.More()
		j.WriteObjectField("balloon_device")
		s.BalloonDevice.WriteJSON(j)
	}

	if s.BlockDevices != nil {
		more.More()
		j.WriteObjectField("block_devices")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.BlockDevices {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()

	}

	if s.BootSource.Set {
		more.More()
		j.WriteObjectField("boot_source")
		s.BootSource.WriteJSON(j)
	}

	if s.Logger.Set {
		more.More()
		j.WriteObjectField("logger")
		s.Logger.WriteJSON(j)
	}

	if s.MachineConfig.Set {
		more.More()
		j.WriteObjectField("machine_config")
		s.MachineConfig.WriteJSON(j)
	}

	if s.Metrics.Set {
		more.More()
		j.WriteObjectField("metrics")
		s.Metrics.WriteJSON(j)
	}

	if s.MmdsConfig.Set {
		more.More()
		j.WriteObjectField("mmds_config")
		s.MmdsConfig.WriteJSON(j)
	}

	if s.NetDevices != nil {
		more.More()
		j.WriteObjectField("net_devices")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NetDevices {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()

	}

	if s.VsockDevice.Set {
		more.More()
		j.WriteObjectField("vsock_device")
		s.VsockDevice.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FullVmConfiguration json value to io.Writer.
func (s FullVmConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FullVmConfiguration json value from io.Reader.
func (s *FullVmConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FullVmConfiguration from json stream.
func (s *FullVmConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "balloon_device":
			s.BalloonDevice.Reset()
			if err := s.BalloonDevice.ReadJSON(i); err != nil {
				i.ReportError("Field BalloonDevice", err.Error())
				return false
			}
			return true
		case "block_devices":
			// Unsupported kind "array" for field "BlockDevices".
			i.Skip()
			return true
		case "boot_source":
			s.BootSource.Reset()
			if err := s.BootSource.ReadJSON(i); err != nil {
				i.ReportError("Field BootSource", err.Error())
				return false
			}
			return true
		case "logger":
			s.Logger.Reset()
			if err := s.Logger.ReadJSON(i); err != nil {
				i.ReportError("Field Logger", err.Error())
				return false
			}
			return true
		case "machine_config":
			s.MachineConfig.Reset()
			if err := s.MachineConfig.ReadJSON(i); err != nil {
				i.ReportError("Field MachineConfig", err.Error())
				return false
			}
			return true
		case "metrics":
			s.Metrics.Reset()
			if err := s.Metrics.ReadJSON(i); err != nil {
				i.ReportError("Field Metrics", err.Error())
				return false
			}
			return true
		case "mmds_config":
			s.MmdsConfig.Reset()
			if err := s.MmdsConfig.ReadJSON(i); err != nil {
				i.ReportError("Field MmdsConfig", err.Error())
				return false
			}
			return true
		case "net_devices":
			// Unsupported kind "array" for field "NetDevices".
			i.Skip()
			return true
		case "vsock_device":
			s.VsockDevice.Reset()
			if err := s.VsockDevice.ReadJSON(i); err != nil {
				i.ReportError("Field VsockDevice", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InstanceActionInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("action_type")
	s.ActionType.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes InstanceActionInfo json value to io.Writer.
func (s InstanceActionInfo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads InstanceActionInfo json value from io.Reader.
func (s *InstanceActionInfo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads InstanceActionInfo from json stream.
func (s *InstanceActionInfo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "action_type":
			if err := s.ActionType.ReadJSON(i); err != nil {
				i.ReportError("Field ActionType", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InstanceActionInfoActionType) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads InstanceActionInfoActionType from json stream.
func (s *InstanceActionInfoActionType) ReadJSON(i *json.Iterator) error {
	*s = InstanceActionInfoActionType(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InstanceInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()

	more.More()
	j.WriteObjectField("app_name")
	j.WriteString(s.AppName)

	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	more.More()
	j.WriteObjectField("vmm_version")
	j.WriteString(s.VmmVersion)

	j.WriteObjectEnd()
}

// WriteJSONTo writes InstanceInfo json value to io.Writer.
func (s InstanceInfo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads InstanceInfo json value from io.Reader.
func (s *InstanceInfo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads InstanceInfo from json stream.
func (s *InstanceInfo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "app_name":
			s.AppName = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadString()
			return i.Error == nil
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "vmm_version":
			s.VmmVersion = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InstanceInfoState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads InstanceInfoState from json stream.
func (s *InstanceInfoState) ReadJSON(i *json.Iterator) error {
	*s = InstanceInfoState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Logger) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Level.Set {
		more.More()
		j.WriteObjectField("level")
		s.Level.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("log_path")
	j.WriteString(s.LogPath)

	if s.ShowLevel.Set {
		more.More()
		j.WriteObjectField("show_level")
		s.ShowLevel.WriteJSON(j)
	}

	if s.ShowLogOrigin.Set {
		more.More()
		j.WriteObjectField("show_log_origin")
		s.ShowLogOrigin.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes Logger json value to io.Writer.
func (s Logger) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Logger json value from io.Reader.
func (s *Logger) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Logger from json stream.
func (s *Logger) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "level":
			s.Level.Reset()
			if err := s.Level.ReadJSON(i); err != nil {
				i.ReportError("Field Level", err.Error())
				return false
			}
			return true
		case "log_path":
			s.LogPath = i.ReadString()
			return i.Error == nil
		case "show_level":
			s.ShowLevel.Reset()
			if err := s.ShowLevel.ReadJSON(i); err != nil {
				i.ReportError("Field ShowLevel", err.Error())
				return false
			}
			return true
		case "show_log_origin":
			s.ShowLogOrigin.Reset()
			if err := s.ShowLogOrigin.ReadJSON(i); err != nil {
				i.ReportError("Field ShowLogOrigin", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s LoggerLevel) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads LoggerLevel from json stream.
func (s *LoggerLevel) ReadJSON(i *json.Iterator) error {
	*s = LoggerLevel(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MachineConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CPUTemplate.Set {
		more.More()
		j.WriteObjectField("cpu_template")
		s.CPUTemplate.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("ht_enabled")
	j.WriteBool(s.HtEnabled)

	more.More()
	j.WriteObjectField("mem_size_mib")
	j.WriteInt(s.MemSizeMib)

	if s.TrackDirtyPages.Set {
		more.More()
		j.WriteObjectField("track_dirty_pages")
		s.TrackDirtyPages.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("vcpu_count")
	j.WriteInt(s.VcpuCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes MachineConfiguration json value to io.Writer.
func (s MachineConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MachineConfiguration json value from io.Reader.
func (s *MachineConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MachineConfiguration from json stream.
func (s *MachineConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cpu_template":
			s.CPUTemplate.Reset()
			if err := s.CPUTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field CPUTemplate", err.Error())
				return false
			}
			return true
		case "ht_enabled":
			s.HtEnabled = i.ReadBool()
			return i.Error == nil
		case "mem_size_mib":
			s.MemSizeMib = i.ReadInt()
			return i.Error == nil
		case "track_dirty_pages":
			s.TrackDirtyPages.Reset()
			if err := s.TrackDirtyPages.ReadJSON(i); err != nil {
				i.ReportError("Field TrackDirtyPages", err.Error())
				return false
			}
			return true
		case "vcpu_count":
			s.VcpuCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Metrics) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()

	more.More()
	j.WriteObjectField("metrics_path")
	j.WriteString(s.MetricsPath)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Metrics json value to io.Writer.
func (s Metrics) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Metrics json value from io.Reader.
func (s *Metrics) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Metrics from json stream.
func (s *Metrics) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metrics_path":
			s.MetricsPath = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MmdsConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ipv4Address.Set {
		more.More()
		j.WriteObjectField("ipv4_address")
		s.Ipv4Address.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes MmdsConfig json value to io.Writer.
func (s MmdsConfig) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MmdsConfig json value from io.Reader.
func (s *MmdsConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MmdsConfig from json stream.
func (s *MmdsConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ipv4_address":
			s.Ipv4Address.Reset()
			if err := s.Ipv4Address.ReadJSON(i); err != nil {
				i.ReportError("Field Ipv4Address", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NetworkInterface) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowMmdsRequests.Set {
		more.More()
		j.WriteObjectField("allow_mmds_requests")
		s.AllowMmdsRequests.WriteJSON(j)
	}

	if s.GuestMAC.Set {
		more.More()
		j.WriteObjectField("guest_mac")
		s.GuestMAC.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("host_dev_name")
	j.WriteString(s.HostDevName)

	more.More()
	j.WriteObjectField("iface_id")
	j.WriteString(s.IfaceID)

	if s.RxRateLimiter.Set {
		more.More()
		j.WriteObjectField("rx_rate_limiter")
		s.RxRateLimiter.WriteJSON(j)
	}

	if s.TxRateLimiter.Set {
		more.More()
		j.WriteObjectField("tx_rate_limiter")
		s.TxRateLimiter.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes NetworkInterface json value to io.Writer.
func (s NetworkInterface) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NetworkInterface json value from io.Reader.
func (s *NetworkInterface) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NetworkInterface from json stream.
func (s *NetworkInterface) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_mmds_requests":
			s.AllowMmdsRequests.Reset()
			if err := s.AllowMmdsRequests.ReadJSON(i); err != nil {
				i.ReportError("Field AllowMmdsRequests", err.Error())
				return false
			}
			return true
		case "guest_mac":
			s.GuestMAC.Reset()
			if err := s.GuestMAC.ReadJSON(i); err != nil {
				i.ReportError("Field GuestMAC", err.Error())
				return false
			}
			return true
		case "host_dev_name":
			s.HostDevName = i.ReadString()
			return i.Error == nil
		case "iface_id":
			s.IfaceID = i.ReadString()
			return i.Error == nil
		case "rx_rate_limiter":
			s.RxRateLimiter.Reset()
			if err := s.RxRateLimiter.ReadJSON(i); err != nil {
				i.ReportError("Field RxRateLimiter", err.Error())
				return false
			}
			return true
		case "tx_rate_limiter":
			s.TxRateLimiter.Reset()
			if err := s.TxRateLimiter.ReadJSON(i); err != nil {
				i.ReportError("Field TxRateLimiter", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON writes json value of Balloon to json stream.
func (o OptBalloon) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Balloon from json iterator.
func (o *OptBalloon) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBalloon", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(j *json.Stream) {
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.BoolValue:
		o.Set = true
		o.Value = bool(i.ReadBool())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBool", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BootSource to json stream.
func (o OptBootSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BootSource from json iterator.
func (o *OptBootSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBootSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CpuTemplate to json stream.
func (o OptCpuTemplate) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of CpuTemplate from json iterator.
func (o *OptCpuTemplate) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = CpuTemplate(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCpuTemplate", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of int to json stream.
func (o OptInt) WriteJSON(j *json.Stream) {
	j.WriteInt(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptInt) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = int(i.ReadInt())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInt", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of int64 to json stream.
func (o OptInt64) WriteJSON(j *json.Stream) {
	j.WriteInt64(int64(o.Value))
}

// ReadJSON reads json value of int64 from json iterator.
func (o *OptInt64) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = int64(i.ReadInt64())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInt64", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Logger to json stream.
func (o OptLogger) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Logger from json iterator.
func (o *OptLogger) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptLogger", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of LoggerLevel to json stream.
func (o OptLoggerLevel) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of LoggerLevel from json iterator.
func (o *OptLoggerLevel) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = LoggerLevel(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptLoggerLevel", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MachineConfiguration to json stream.
func (o OptMachineConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of MachineConfiguration from json iterator.
func (o *OptMachineConfiguration) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMachineConfiguration", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Metrics to json stream.
func (o OptMetrics) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Metrics from json iterator.
func (o *OptMetrics) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMetrics", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MmdsConfig to json stream.
func (o OptMmdsConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of MmdsConfig from json iterator.
func (o *OptMmdsConfig) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMmdsConfig", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of RateLimiter to json stream.
func (o OptRateLimiter) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of RateLimiter from json iterator.
func (o *OptRateLimiter) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptRateLimiter", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of SnapshotCreateParamsSnapshotType to json stream.
func (o OptSnapshotCreateParamsSnapshotType) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of SnapshotCreateParamsSnapshotType from json iterator.
func (o *OptSnapshotCreateParamsSnapshotType) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = SnapshotCreateParamsSnapshotType(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptSnapshotCreateParamsSnapshotType", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = string(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptString", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TokenBucket to json stream.
func (o OptTokenBucket) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of TokenBucket from json iterator.
func (o *OptTokenBucket) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTokenBucket", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Vsock to json stream.
func (o OptVsock) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Vsock from json iterator.
func (o *OptVsock) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVsock", i.WhatIsNext())
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PartialDrive) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()

	more.More()
	j.WriteObjectField("drive_id")
	j.WriteString(s.DriveID)

	if s.PathOnHost.Set {
		more.More()
		j.WriteObjectField("path_on_host")
		s.PathOnHost.WriteJSON(j)
	}

	if s.RateLimiter.Set {
		more.More()
		j.WriteObjectField("rate_limiter")
		s.RateLimiter.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PartialDrive json value to io.Writer.
func (s PartialDrive) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PartialDrive json value from io.Reader.
func (s *PartialDrive) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PartialDrive from json stream.
func (s *PartialDrive) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "drive_id":
			s.DriveID = i.ReadString()
			return i.Error == nil
		case "path_on_host":
			s.PathOnHost.Reset()
			if err := s.PathOnHost.ReadJSON(i); err != nil {
				i.ReportError("Field PathOnHost", err.Error())
				return false
			}
			return true
		case "rate_limiter":
			s.RateLimiter.Reset()
			if err := s.RateLimiter.ReadJSON(i); err != nil {
				i.ReportError("Field RateLimiter", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PartialNetworkInterface) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()

	more.More()
	j.WriteObjectField("iface_id")
	j.WriteString(s.IfaceID)

	if s.RxRateLimiter.Set {
		more.More()
		j.WriteObjectField("rx_rate_limiter")
		s.RxRateLimiter.WriteJSON(j)
	}

	if s.TxRateLimiter.Set {
		more.More()
		j.WriteObjectField("tx_rate_limiter")
		s.TxRateLimiter.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PartialNetworkInterface json value to io.Writer.
func (s PartialNetworkInterface) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PartialNetworkInterface json value from io.Reader.
func (s *PartialNetworkInterface) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PartialNetworkInterface from json stream.
func (s *PartialNetworkInterface) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "iface_id":
			s.IfaceID = i.ReadString()
			return i.Error == nil
		case "rx_rate_limiter":
			s.RxRateLimiter.Reset()
			if err := s.RxRateLimiter.ReadJSON(i); err != nil {
				i.ReportError("Field RxRateLimiter", err.Error())
				return false
			}
			return true
		case "tx_rate_limiter":
			s.TxRateLimiter.Reset()
			if err := s.TxRateLimiter.ReadJSON(i); err != nil {
				i.ReportError("Field TxRateLimiter", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RateLimiter) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Bandwidth.Set {
		more.More()
		j.WriteObjectField("bandwidth")
		s.Bandwidth.WriteJSON(j)
	}

	if s.Ops.Set {
		more.More()
		j.WriteObjectField("ops")
		s.Ops.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes RateLimiter json value to io.Writer.
func (s RateLimiter) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RateLimiter json value from io.Reader.
func (s *RateLimiter) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RateLimiter from json stream.
func (s *RateLimiter) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "bandwidth":
			s.Bandwidth.Reset()
			if err := s.Bandwidth.ReadJSON(i); err != nil {
				i.ReportError("Field Bandwidth", err.Error())
				return false
			}
			return true
		case "ops":
			s.Ops.Reset()
			if err := s.Ops.ReadJSON(i); err != nil {
				i.ReportError("Field Ops", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SnapshotCreateParams) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()

	more.More()
	j.WriteObjectField("mem_file_path")
	j.WriteString(s.MemFilePath)

	more.More()
	j.WriteObjectField("snapshot_path")
	j.WriteString(s.SnapshotPath)

	if s.SnapshotType.Set {
		more.More()
		j.WriteObjectField("snapshot_type")
		s.SnapshotType.WriteJSON(j)
	}

	if s.Version.Set {
		more.More()
		j.WriteObjectField("version")
		s.Version.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes SnapshotCreateParams json value to io.Writer.
func (s SnapshotCreateParams) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SnapshotCreateParams json value from io.Reader.
func (s *SnapshotCreateParams) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SnapshotCreateParams from json stream.
func (s *SnapshotCreateParams) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "mem_file_path":
			s.MemFilePath = i.ReadString()
			return i.Error == nil
		case "snapshot_path":
			s.SnapshotPath = i.ReadString()
			return i.Error == nil
		case "snapshot_type":
			s.SnapshotType.Reset()
			if err := s.SnapshotType.ReadJSON(i); err != nil {
				i.ReportError("Field SnapshotType", err.Error())
				return false
			}
			return true
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(i); err != nil {
				i.ReportError("Field Version", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SnapshotCreateParamsSnapshotType) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads SnapshotCreateParamsSnapshotType from json stream.
func (s *SnapshotCreateParamsSnapshotType) ReadJSON(i *json.Iterator) error {
	*s = SnapshotCreateParamsSnapshotType(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SnapshotLoadParams) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EnableDiffSnapshots.Set {
		more.More()
		j.WriteObjectField("enable_diff_snapshots")
		s.EnableDiffSnapshots.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("mem_file_path")
	j.WriteString(s.MemFilePath)

	if s.ResumeVM.Set {
		more.More()
		j.WriteObjectField("resume_vm")
		s.ResumeVM.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("snapshot_path")
	j.WriteString(s.SnapshotPath)

	j.WriteObjectEnd()
}

// WriteJSONTo writes SnapshotLoadParams json value to io.Writer.
func (s SnapshotLoadParams) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SnapshotLoadParams json value from io.Reader.
func (s *SnapshotLoadParams) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SnapshotLoadParams from json stream.
func (s *SnapshotLoadParams) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enable_diff_snapshots":
			s.EnableDiffSnapshots.Reset()
			if err := s.EnableDiffSnapshots.ReadJSON(i); err != nil {
				i.ReportError("Field EnableDiffSnapshots", err.Error())
				return false
			}
			return true
		case "mem_file_path":
			s.MemFilePath = i.ReadString()
			return i.Error == nil
		case "resume_vm":
			s.ResumeVM.Reset()
			if err := s.ResumeVM.ReadJSON(i); err != nil {
				i.ReportError("Field ResumeVM", err.Error())
				return false
			}
			return true
		case "snapshot_path":
			s.SnapshotPath = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TokenBucket) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.OneTimeBurst.Set {
		more.More()
		j.WriteObjectField("one_time_burst")
		s.OneTimeBurst.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("refill_time")
	j.WriteInt64(s.RefillTime)

	more.More()
	j.WriteObjectField("size")
	j.WriteInt64(s.Size)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TokenBucket json value to io.Writer.
func (s TokenBucket) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TokenBucket json value from io.Reader.
func (s *TokenBucket) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TokenBucket from json stream.
func (s *TokenBucket) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "one_time_burst":
			s.OneTimeBurst.Reset()
			if err := s.OneTimeBurst.ReadJSON(i); err != nil {
				i.ReportError("Field OneTimeBurst", err.Error())
				return false
			}
			return true
		case "refill_time":
			s.RefillTime = i.ReadInt64()
			return i.Error == nil
		case "size":
			s.Size = i.ReadInt64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s VM) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes VM json value to io.Writer.
func (s VM) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads VM json value from io.Reader.
func (s *VM) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads VM from json stream.
func (s *VM) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s VMState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads VMState from json stream.
func (s *VMState) ReadJSON(i *json.Iterator) error {
	*s = VMState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Vsock) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()

	more.More()
	j.WriteObjectField("guest_cid")
	j.WriteInt(s.GuestCid)

	more.More()
	j.WriteObjectField("uds_path")
	j.WriteString(s.UdsPath)

	more.More()
	j.WriteObjectField("vsock_id")
	j.WriteString(s.VsockID)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Vsock json value to io.Writer.
func (s Vsock) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Vsock json value from io.Reader.
func (s *Vsock) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Vsock from json stream.
func (s *Vsock) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "guest_cid":
			s.GuestCid = i.ReadInt()
			return i.Error == nil
		case "uds_path":
			s.UdsPath = i.ReadString()
			return i.Error == nil
		case "vsock_id":
			s.VsockID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}
