// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = math.Mod
	_ = validate.Int{}
)

func decodeCreateSyncActionRequest(r *http.Request) (req InstanceActionInfo, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request InstanceActionInfo
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePutBalloonRequest(r *http.Request) (req Balloon, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request Balloon
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePatchBalloonRequest(r *http.Request) (req BalloonUpdate, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request BalloonUpdate
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePatchBalloonStatsIntervalRequest(r *http.Request) (req BalloonStatsUpdate, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request BalloonStatsUpdate
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePutGuestBootSourceRequest(r *http.Request) (req BootSource, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request BootSource
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePutGuestDriveByIDRequest(r *http.Request) (req Drive, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request Drive
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePatchGuestDriveByIDRequest(r *http.Request) (req PartialDrive, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PartialDrive
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePutLoggerRequest(r *http.Request) (req Logger, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request Logger
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePutMachineConfigurationRequest(r *http.Request) (req *MachineConfiguration, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MachineConfiguration
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePatchMachineConfigurationRequest(r *http.Request) (req *MachineConfiguration, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MachineConfiguration
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePutMetricsRequest(r *http.Request) (req Metrics, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request Metrics
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeMmdsPutRequest(r *http.Request) (req *MmdsPutApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MmdsPutApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeMmdsPatchRequest(r *http.Request) (req *MmdsPatchApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MmdsPatchApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeMmdsConfigPutRequest(r *http.Request) (req MmdsConfig, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MmdsConfig
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePutGuestNetworkInterfaceByIDRequest(r *http.Request) (req NetworkInterface, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request NetworkInterface
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePatchGuestNetworkInterfaceByIDRequest(r *http.Request) (req PartialNetworkInterface, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PartialNetworkInterface
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeCreateSnapshotRequest(r *http.Request) (req SnapshotCreateParams, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SnapshotCreateParams
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeLoadSnapshotRequest(r *http.Request) (req SnapshotLoadParams, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SnapshotLoadParams
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePatchVmRequest(r *http.Request) (req VM, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request VM
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePutGuestVsockRequest(r *http.Request) (req Vsock, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request Vsock
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}
