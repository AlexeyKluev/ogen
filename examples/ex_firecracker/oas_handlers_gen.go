// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = math.Mod
	_ = validate.Int{}
)

func NewDescribeInstanceHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.DescribeInstance(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDescribeInstanceResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateSyncActionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeCreateSyncActionRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateSyncAction(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateSyncActionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDescribeBalloonConfigHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.DescribeBalloonConfig(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDescribeBalloonConfigResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPutBalloonHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodePutBalloonRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PutBalloon(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePutBalloonResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPatchBalloonHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodePatchBalloonRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PatchBalloon(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePatchBalloonResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDescribeBalloonStatsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.DescribeBalloonStats(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDescribeBalloonStatsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPatchBalloonStatsIntervalHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodePatchBalloonStatsIntervalRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PatchBalloonStatsInterval(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePatchBalloonStatsIntervalResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPutGuestBootSourceHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodePutGuestBootSourceRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PutGuestBootSource(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePutGuestBootSourceResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPutGuestDriveByIDHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePutGuestDriveByIDParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodePutGuestDriveByIDRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PutGuestDriveByID(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePutGuestDriveByIDResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPatchGuestDriveByIDHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePatchGuestDriveByIDParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodePatchGuestDriveByIDRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PatchGuestDriveByID(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePatchGuestDriveByIDResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPutLoggerHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodePutLoggerRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PutLogger(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePutLoggerResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetMachineConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetMachineConfiguration(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetMachineConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPutMachineConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodePutMachineConfigurationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PutMachineConfiguration(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePutMachineConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPatchMachineConfigurationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodePatchMachineConfigurationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PatchMachineConfiguration(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePatchMachineConfigurationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPutMetricsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodePutMetricsRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PutMetrics(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePutMetricsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMmdsGetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.MmdsGet(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMmdsGetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMmdsPutHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeMmdsPutRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MmdsPut(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMmdsPutResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMmdsPatchHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeMmdsPatchRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MmdsPatch(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMmdsPatchResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMmdsConfigPutHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeMmdsConfigPutRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MmdsConfigPut(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMmdsConfigPutResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPutGuestNetworkInterfaceByIDHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePutGuestNetworkInterfaceByIDParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodePutGuestNetworkInterfaceByIDRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PutGuestNetworkInterfaceByID(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePutGuestNetworkInterfaceByIDResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPatchGuestNetworkInterfaceByIDHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePatchGuestNetworkInterfaceByIDParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodePatchGuestNetworkInterfaceByIDRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PatchGuestNetworkInterfaceByID(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePatchGuestNetworkInterfaceByIDResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCreateSnapshotHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeCreateSnapshotRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CreateSnapshot(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCreateSnapshotResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewLoadSnapshotHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeLoadSnapshotRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.LoadSnapshot(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeLoadSnapshotResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPatchVmHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodePatchVmRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PatchVm(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePatchVmResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetExportVmConfigHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetExportVmConfig(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetExportVmConfigResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPutGuestVsockHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodePutGuestVsockRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PutGuestVsock(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePutGuestVsockResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func respondError(w http.ResponseWriter, code int, err error) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	data, writeErr := json.Marshal(struct {
		ErrorMessage string `json:"error_message"`
	}{
		ErrorMessage: err.Error(),
	})
	if writeErr == nil {
		w.Write(data)
	}
}
