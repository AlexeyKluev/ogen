// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func decodePutGuestDriveByIDParams(r *http.Request) (PutGuestDriveByIDParams, error) {
	var params PutGuestDriveByIDParams
	{
		param := chi.URLParam(r, "drive_id")
		if len(param) == 0 {
			return params, fmt.Errorf("path param 'drive_id' is empty")
		}

		v, err := conv.ToString(param)
		if err != nil {
			return params, fmt.Errorf("parse path param 'drive_id': %w", err)
		}

		params.DriveID = v
	}

	return params, nil
}

func decodePatchGuestDriveByIDParams(r *http.Request) (PatchGuestDriveByIDParams, error) {
	var params PatchGuestDriveByIDParams
	{
		param := chi.URLParam(r, "drive_id")
		if len(param) == 0 {
			return params, fmt.Errorf("path param 'drive_id' is empty")
		}

		v, err := conv.ToString(param)
		if err != nil {
			return params, fmt.Errorf("parse path param 'drive_id': %w", err)
		}

		params.DriveID = v
	}

	return params, nil
}

func decodePutGuestNetworkInterfaceByIDParams(r *http.Request) (PutGuestNetworkInterfaceByIDParams, error) {
	var params PutGuestNetworkInterfaceByIDParams
	{
		param := chi.URLParam(r, "iface_id")
		if len(param) == 0 {
			return params, fmt.Errorf("path param 'iface_id' is empty")
		}

		v, err := conv.ToString(param)
		if err != nil {
			return params, fmt.Errorf("parse path param 'iface_id': %w", err)
		}

		params.IfaceID = v
	}

	return params, nil
}

func decodePatchGuestNetworkInterfaceByIDParams(r *http.Request) (PatchGuestNetworkInterfaceByIDParams, error) {
	var params PatchGuestNetworkInterfaceByIDParams
	{
		param := chi.URLParam(r, "iface_id")
		if len(param) == 0 {
			return params, fmt.Errorf("path param 'iface_id' is empty")
		}

		v, err := conv.ToString(param)
		if err != nil {
			return params, fmt.Errorf("parse path param 'iface_id': %w", err)
		}

		params.IfaceID = v
	}

	return params, nil
}
