// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = math.Mod
	_ = validate.Int{}
)

type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

type Client struct {
	serverURL string
	http      HTTPClient
}

func NewClient(serverURL string) *Client {
	return &Client{
		serverURL: serverURL,
		http: &http.Client{
			Timeout: time.Second * 15,
		},
	}
}

func (c *Client) DescribeInstance(ctx context.Context) (res DescribeInstanceResponse, err error) {
	path := c.serverURL
	path += "/"

	r, err := http.NewRequestWithContext(ctx, "GET", path, nil)
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeDescribeInstanceResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) CreateSyncAction(ctx context.Context, req InstanceActionInfo) (res CreateSyncActionResponse, err error) {
	body, contentType, err := encodeCreateSyncActionRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/actions"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeCreateSyncActionResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) DescribeBalloonConfig(ctx context.Context) (res DescribeBalloonConfigResponse, err error) {
	path := c.serverURL
	path += "/balloon"

	r, err := http.NewRequestWithContext(ctx, "GET", path, nil)
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeDescribeBalloonConfigResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PutBalloon(ctx context.Context, req Balloon) (res PutBalloonResponse, err error) {
	body, contentType, err := encodePutBalloonRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/balloon"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePutBalloonResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PatchBalloon(ctx context.Context, req BalloonUpdate) (res PatchBalloonResponse, err error) {
	body, contentType, err := encodePatchBalloonRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/balloon"

	r, err := http.NewRequestWithContext(ctx, "PATCH", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePatchBalloonResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) DescribeBalloonStats(ctx context.Context) (res DescribeBalloonStatsResponse, err error) {
	path := c.serverURL
	path += "/balloon/statistics"

	r, err := http.NewRequestWithContext(ctx, "GET", path, nil)
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeDescribeBalloonStatsResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PatchBalloonStatsInterval(ctx context.Context, req BalloonStatsUpdate) (res PatchBalloonStatsIntervalResponse, err error) {
	body, contentType, err := encodePatchBalloonStatsIntervalRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/balloon/statistics"

	r, err := http.NewRequestWithContext(ctx, "PATCH", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePatchBalloonStatsIntervalResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PutGuestBootSource(ctx context.Context, req BootSource) (res PutGuestBootSourceResponse, err error) {
	body, contentType, err := encodePutGuestBootSourceRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/boot-source"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePutGuestBootSourceResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PutGuestDriveByID(ctx context.Context, req Drive, params PutGuestDriveByIDParams) (res PutGuestDriveByIDResponse, err error) {
	body, contentType, err := encodePutGuestDriveByIDRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/drives/"
	{
		// Encode 'drive_id' parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "drive_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		path += e.EncodeString(params.DriveID)
	}

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePutGuestDriveByIDResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PatchGuestDriveByID(ctx context.Context, req PartialDrive, params PatchGuestDriveByIDParams) (res PatchGuestDriveByIDResponse, err error) {
	body, contentType, err := encodePatchGuestDriveByIDRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/drives/"
	{
		// Encode 'drive_id' parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "drive_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		path += e.EncodeString(params.DriveID)
	}

	r, err := http.NewRequestWithContext(ctx, "PATCH", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePatchGuestDriveByIDResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PutLogger(ctx context.Context, req Logger) (res PutLoggerResponse, err error) {
	body, contentType, err := encodePutLoggerRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/logger"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePutLoggerResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) GetMachineConfiguration(ctx context.Context) (res GetMachineConfigurationResponse, err error) {
	path := c.serverURL
	path += "/machine-config"

	r, err := http.NewRequestWithContext(ctx, "GET", path, nil)
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeGetMachineConfigurationResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PutMachineConfiguration(ctx context.Context, req *MachineConfiguration) (res PutMachineConfigurationResponse, err error) {
	body, contentType, err := encodePutMachineConfigurationRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/machine-config"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePutMachineConfigurationResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PatchMachineConfiguration(ctx context.Context, req *MachineConfiguration) (res PatchMachineConfigurationResponse, err error) {
	body, contentType, err := encodePatchMachineConfigurationRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/machine-config"

	r, err := http.NewRequestWithContext(ctx, "PATCH", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePatchMachineConfigurationResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PutMetrics(ctx context.Context, req Metrics) (res PutMetricsResponse, err error) {
	body, contentType, err := encodePutMetricsRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/metrics"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePutMetricsResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) MmdsGet(ctx context.Context) (res MmdsGetResponse, err error) {
	path := c.serverURL
	path += "/mmds"

	r, err := http.NewRequestWithContext(ctx, "GET", path, nil)
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeMmdsGetResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) MmdsPut(ctx context.Context, req *MmdsPutApplicationJSONRequest) (res MmdsPutResponse, err error) {
	body, contentType, err := encodeMmdsPutRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/mmds"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeMmdsPutResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) MmdsPatch(ctx context.Context, req *MmdsPatchApplicationJSONRequest) (res MmdsPatchResponse, err error) {
	body, contentType, err := encodeMmdsPatchRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/mmds"

	r, err := http.NewRequestWithContext(ctx, "PATCH", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeMmdsPatchResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) MmdsConfigPut(ctx context.Context, req MmdsConfig) (res MmdsConfigPutResponse, err error) {
	body, contentType, err := encodeMmdsConfigPutRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/mmds/config"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeMmdsConfigPutResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PutGuestNetworkInterfaceByID(ctx context.Context, req NetworkInterface, params PutGuestNetworkInterfaceByIDParams) (res PutGuestNetworkInterfaceByIDResponse, err error) {
	body, contentType, err := encodePutGuestNetworkInterfaceByIDRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/network-interfaces/"
	{
		// Encode 'iface_id' parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "iface_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		path += e.EncodeString(params.IfaceID)
	}

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePutGuestNetworkInterfaceByIDResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PatchGuestNetworkInterfaceByID(ctx context.Context, req PartialNetworkInterface, params PatchGuestNetworkInterfaceByIDParams) (res PatchGuestNetworkInterfaceByIDResponse, err error) {
	body, contentType, err := encodePatchGuestNetworkInterfaceByIDRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/network-interfaces/"
	{
		// Encode 'iface_id' parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "iface_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		path += e.EncodeString(params.IfaceID)
	}

	r, err := http.NewRequestWithContext(ctx, "PATCH", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePatchGuestNetworkInterfaceByIDResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) CreateSnapshot(ctx context.Context, req SnapshotCreateParams) (res CreateSnapshotResponse, err error) {
	body, contentType, err := encodeCreateSnapshotRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/snapshot/create"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeCreateSnapshotResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) LoadSnapshot(ctx context.Context, req SnapshotLoadParams) (res LoadSnapshotResponse, err error) {
	body, contentType, err := encodeLoadSnapshotRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/snapshot/load"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeLoadSnapshotResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PatchVm(ctx context.Context, req VM) (res PatchVmResponse, err error) {
	body, contentType, err := encodePatchVmRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/vm"

	r, err := http.NewRequestWithContext(ctx, "PATCH", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePatchVmResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) GetExportVmConfig(ctx context.Context) (res GetExportVmConfigResponse, err error) {
	path := c.serverURL
	path += "/vm/config"

	r, err := http.NewRequestWithContext(ctx, "GET", path, nil)
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodeGetExportVmConfigResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}

func (c *Client) PutGuestVsock(ctx context.Context, req Vsock) (res PutGuestVsockResponse, err error) {
	body, contentType, err := encodePutGuestVsockRequest(req)
	if err != nil {
		return res, err
	}

	path := c.serverURL
	path += "/vsock"

	r, err := http.NewRequestWithContext(ctx, "PUT", path, bytes.NewReader(body))
	if err != nil {
		return res, fmt.Errorf("create request: %w", err)
	}

	r.Header.Set("Content-Type", contentType)

	resp, err := c.http.Do(r)
	if err != nil {
		return res, fmt.Errorf("do request: %w", err)
	}
	defer resp.Body.Close()

	result, err := decodePutGuestVsockResponse(resp)
	if err != nil {
		return res, fmt.Errorf("decode response: %w", err)
	}

	return result, nil
}
