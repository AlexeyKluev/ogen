// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func decodePutGuestDriveByIDParams(r *http.Request) (PutGuestDriveByIDParams, error) {
	var params PutGuestDriveByIDParams
	// Decode param 'drive_id' located in 'Path'.
	if err := func() error {
		param := chi.URLParam(r, "drive_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'drive_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "drive_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.DriveID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePatchGuestDriveByIDParams(r *http.Request) (PatchGuestDriveByIDParams, error) {
	var params PatchGuestDriveByIDParams
	// Decode param 'drive_id' located in 'Path'.
	if err := func() error {
		param := chi.URLParam(r, "drive_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'drive_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "drive_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.DriveID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePutGuestNetworkInterfaceByIDParams(r *http.Request) (PutGuestNetworkInterfaceByIDParams, error) {
	var params PutGuestNetworkInterfaceByIDParams
	// Decode param 'iface_id' located in 'Path'.
	if err := func() error {
		param := chi.URLParam(r, "iface_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'iface_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "iface_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.IfaceID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePatchGuestNetworkInterfaceByIDParams(r *http.Request) (PatchGuestNetworkInterfaceByIDParams, error) {
	var params PatchGuestNetworkInterfaceByIDParams
	// Decode param 'iface_id' located in 'Path'.
	if err := func() error {
		param := chi.URLParam(r, "iface_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'iface_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "iface_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.IfaceID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}
