// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/encoding/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func decodeDescribeInstanceResponse(resp *http.Response) (_ DescribeInstanceResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response InstanceInfo
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeCreateSyncActionResponse(resp *http.Response) (_ CreateSyncActionResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &CreateSyncActionNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeDescribeBalloonConfigResponse(resp *http.Response) (_ DescribeBalloonConfigResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Balloon
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePutBalloonResponse(resp *http.Response) (_ PutBalloonResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PutBalloonNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePatchBalloonResponse(resp *http.Response) (_ PatchBalloonResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PatchBalloonNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeDescribeBalloonStatsResponse(resp *http.Response) (_ DescribeBalloonStatsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BalloonStats
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePatchBalloonStatsIntervalResponse(resp *http.Response) (_ PatchBalloonStatsIntervalResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PatchBalloonStatsIntervalNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePutGuestBootSourceResponse(resp *http.Response) (_ PutGuestBootSourceResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PutGuestBootSourceNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePutGuestDriveByIDResponse(resp *http.Response) (_ PutGuestDriveByIDResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PutGuestDriveByIDNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePatchGuestDriveByIDResponse(resp *http.Response) (_ PatchGuestDriveByIDResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PatchGuestDriveByIDNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePutLoggerResponse(resp *http.Response) (_ PutLoggerResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PutLoggerNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeGetMachineConfigurationResponse(resp *http.Response) (_ GetMachineConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MachineConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePutMachineConfigurationResponse(resp *http.Response) (_ PutMachineConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PutMachineConfigurationNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePatchMachineConfigurationResponse(resp *http.Response) (_ PatchMachineConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PatchMachineConfigurationNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePutMetricsResponse(resp *http.Response) (_ PutMetricsResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PutMetricsNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeMmdsGetResponse(resp *http.Response) (_ MmdsGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MmdsGetOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeMmdsPutResponse(resp *http.Response) (_ MmdsPutResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &MmdsPutNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeMmdsPatchResponse(resp *http.Response) (_ MmdsPatchResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &MmdsPatchNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeMmdsConfigPutResponse(resp *http.Response) (_ MmdsConfigPutResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &MmdsConfigPutNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePutGuestNetworkInterfaceByIDResponse(resp *http.Response) (_ PutGuestNetworkInterfaceByIDResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PutGuestNetworkInterfaceByIDNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePatchGuestNetworkInterfaceByIDResponse(resp *http.Response) (_ PatchGuestNetworkInterfaceByIDResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PatchGuestNetworkInterfaceByIDNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeCreateSnapshotResponse(resp *http.Response) (_ CreateSnapshotResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &CreateSnapshotNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeLoadSnapshotResponse(resp *http.Response) (_ LoadSnapshotResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &LoadSnapshotNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePatchVmResponse(resp *http.Response) (_ PatchVmResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PatchVmNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodeGetExportVmConfigResponse(resp *http.Response) (_ GetExportVmConfigResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response FullVmConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}

func decodePutGuestVsockResponse(resp *http.Response) (_ PutGuestVsockResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PutGuestVsockNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Error
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ErrorStatusCode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response.Response); err != nil {
				rerr = err
				return
			}

			response.StatusCode = resp.StatusCode
			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	}
}
