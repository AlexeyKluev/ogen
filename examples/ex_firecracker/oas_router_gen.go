// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	http.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	args := map[string]string{}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleDescribeInstanceRequest(args, w, r)
				return
			}
			switch elem[0] {
			case 'b': // Prefix: "balloon"
				if l := len("balloon"); len(elem) >= l && elem[0:l] == "balloon" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleDescribeBalloonConfigRequest(args, w, r)
					return
				}
				switch elem[0] {
				case '/': // Prefix: "/statistics"
					if l := len("/statistics"); len(elem) >= l && elem[0:l] == "/statistics" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: DescribeBalloonStats
						s.handleDescribeBalloonStatsRequest(args, w, r)
						return
					}
				}
			case 'm': // Prefix: "m"
				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleMmdsGetRequest(args, w, r)
					return
				}
				switch elem[0] {
				case 'a': // Prefix: "achine-config"
					if l := len("achine-config"); len(elem) >= l && elem[0:l] == "achine-config" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: GetMachineConfiguration
						s.handleGetMachineConfigurationRequest(args, w, r)
						return
					}
				case 'm': // Prefix: "mds"
					if l := len("mds"); len(elem) >= l && elem[0:l] == "mds" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: MmdsGet
						s.handleMmdsGetRequest(args, w, r)
						return
					}
				}
			case 'v': // Prefix: "vm/config"
				if l := len("vm/config"); len(elem) >= l && elem[0:l] == "vm/config" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetExportVmConfig
					s.handleGetExportVmConfigRequest(args, w, r)
					return
				}
			}
		}
	case "PATCH":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handlePatchBalloonRequest(args, w, r)
				return
			}
			switch elem[0] {
			case 'b': // Prefix: "balloon"
				if l := len("balloon"); len(elem) >= l && elem[0:l] == "balloon" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handlePatchBalloonRequest(args, w, r)
					return
				}
				switch elem[0] {
				case '/': // Prefix: "/statistics"
					if l := len("/statistics"); len(elem) >= l && elem[0:l] == "/statistics" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: PatchBalloonStatsInterval
						s.handlePatchBalloonStatsIntervalRequest(args, w, r)
						return
					}
				}
			case 'd': // Prefix: "drives/"
				if l := len("drives/"); len(elem) >= l && elem[0:l] == "drives/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "drive_id"
				// Leaf parameter
				args["drive_id"] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: PatchGuestDriveByID
					s.handlePatchGuestDriveByIDRequest(args, w, r)
					return
				}
			case 'm': // Prefix: "m"
				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handlePatchMachineConfigurationRequest(args, w, r)
					return
				}
				switch elem[0] {
				case 'a': // Prefix: "achine-config"
					if l := len("achine-config"); len(elem) >= l && elem[0:l] == "achine-config" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: PatchMachineConfiguration
						s.handlePatchMachineConfigurationRequest(args, w, r)
						return
					}
				case 'm': // Prefix: "mds"
					if l := len("mds"); len(elem) >= l && elem[0:l] == "mds" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: MmdsPatch
						s.handleMmdsPatchRequest(args, w, r)
						return
					}
				}
			case 'n': // Prefix: "network-interfaces/"
				if l := len("network-interfaces/"); len(elem) >= l && elem[0:l] == "network-interfaces/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "iface_id"
				// Leaf parameter
				args["iface_id"] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: PatchGuestNetworkInterfaceByID
					s.handlePatchGuestNetworkInterfaceByIDRequest(args, w, r)
					return
				}
			case 'v': // Prefix: "vm"
				if l := len("vm"); len(elem) >= l && elem[0:l] == "vm" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: PatchVm
					s.handlePatchVmRequest(args, w, r)
					return
				}
			}
		}
	case "PUT":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleCreateSyncActionRequest(args, w, r)
				return
			}
			switch elem[0] {
			case 'a': // Prefix: "actions"
				if l := len("actions"); len(elem) >= l && elem[0:l] == "actions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateSyncAction
					s.handleCreateSyncActionRequest(args, w, r)
					return
				}
			case 'b': // Prefix: "b"
				if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handlePutGuestBootSourceRequest(args, w, r)
					return
				}
				switch elem[0] {
				case 'a': // Prefix: "alloon"
					if l := len("alloon"); len(elem) >= l && elem[0:l] == "alloon" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: PutBalloon
						s.handlePutBalloonRequest(args, w, r)
						return
					}
				case 'o': // Prefix: "oot-source"
					if l := len("oot-source"); len(elem) >= l && elem[0:l] == "oot-source" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: PutGuestBootSource
						s.handlePutGuestBootSourceRequest(args, w, r)
						return
					}
				}
			case 'd': // Prefix: "drives/"
				if l := len("drives/"); len(elem) >= l && elem[0:l] == "drives/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "drive_id"
				// Leaf parameter
				args["drive_id"] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: PutGuestDriveByID
					s.handlePutGuestDriveByIDRequest(args, w, r)
					return
				}
			case 'l': // Prefix: "logger"
				if l := len("logger"); len(elem) >= l && elem[0:l] == "logger" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: PutLogger
					s.handlePutLoggerRequest(args, w, r)
					return
				}
			case 'm': // Prefix: "m"
				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handlePutMachineConfigurationRequest(args, w, r)
					return
				}
				switch elem[0] {
				case 'a': // Prefix: "achine-config"
					if l := len("achine-config"); len(elem) >= l && elem[0:l] == "achine-config" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: PutMachineConfiguration
						s.handlePutMachineConfigurationRequest(args, w, r)
						return
					}
				case 'e': // Prefix: "etrics"
					if l := len("etrics"); len(elem) >= l && elem[0:l] == "etrics" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: PutMetrics
						s.handlePutMetricsRequest(args, w, r)
						return
					}
				case 'm': // Prefix: "mds"
					if l := len("mds"); len(elem) >= l && elem[0:l] == "mds" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleMmdsPutRequest(args, w, r)
						return
					}
					switch elem[0] {
					case '/': // Prefix: "/config"
						if l := len("/config"); len(elem) >= l && elem[0:l] == "/config" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: MmdsConfigPut
							s.handleMmdsConfigPutRequest(args, w, r)
							return
						}
					}
				}
			case 'n': // Prefix: "network-interfaces/"
				if l := len("network-interfaces/"); len(elem) >= l && elem[0:l] == "network-interfaces/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "iface_id"
				// Leaf parameter
				args["iface_id"] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: PutGuestNetworkInterfaceByID
					s.handlePutGuestNetworkInterfaceByIDRequest(args, w, r)
					return
				}
			case 's': // Prefix: "snapshot/"
				if l := len("snapshot/"); len(elem) >= l && elem[0:l] == "snapshot/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleLoadSnapshotRequest(args, w, r)
					return
				}
				switch elem[0] {
				case 'c': // Prefix: "create"
					if l := len("create"); len(elem) >= l && elem[0:l] == "create" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: CreateSnapshot
						s.handleCreateSnapshotRequest(args, w, r)
						return
					}
				case 'l': // Prefix: "load"
					if l := len("load"); len(elem) >= l && elem[0:l] == "load" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: LoadSnapshot
						s.handleLoadSnapshotRequest(args, w, r)
						return
					}
				}
			case 'v': // Prefix: "vsock"
				if l := len("vsock"); len(elem) >= l && elem[0:l] == "vsock" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: PutGuestVsock
					s.handlePutGuestVsockRequest(args, w, r)
					return
				}
			}
		}
	}
	s.notFound(w, r)
}
