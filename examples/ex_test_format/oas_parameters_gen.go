// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/http"
	"net/netip"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// TestQueryParameterParams is parameters of test_query_parameter operation.
type TestQueryParameterParams struct {
	Boolean                 bool
	BooleanArray            []bool
	Integer                 int
	IntegerArray            []int
	IntegerInt32            int32
	IntegerInt32Array       []int32
	IntegerInt64            int64
	IntegerInt64Array       []int64
	IntegerUint             uint
	IntegerUint32           uint32
	IntegerUint32Array      []uint32
	IntegerUint64           uint64
	IntegerUint64Array      []uint64
	IntegerUintArray        []uint
	IntegerUnix             time.Time
	IntegerUnixMicro        time.Time
	IntegerUnixMicroArray   []time.Time
	IntegerUnixMilli        time.Time
	IntegerUnixMilliArray   []time.Time
	IntegerUnixNano         time.Time
	IntegerUnixNanoArray    []time.Time
	IntegerUnixSeconds      time.Time
	IntegerUnixSecondsArray []time.Time
	IntegerUnixArray        []time.Time
	Number                  float64
	NumberArray             []float64
	NumberDouble            float64
	NumberDoubleArray       []float64
	NumberFloat             float32
	NumberFloatArray        []float32
	NumberInt32             int32
	NumberInt32Array        []int32
	NumberInt64             int64
	NumberInt64Array        []int64
	String                  string
	StringArray             []string
	StringBinary            string
	StringBinaryArray       []string
	StringByte              []byte
	StringByteArray         [][]byte
	StringDate              time.Time
	StringDateTime          time.Time
	StringDateTimeArray     []time.Time
	StringDateArray         []time.Time
	StringDuration          time.Duration
	StringDurationArray     []time.Duration
	StringEmail             string
	StringEmailArray        []string
	StringHostname          string
	StringHostnameArray     []string
	StringInt32             int32
	StringInt32Array        []int32
	StringInt64             int64
	StringInt64Array        []int64
	StringIP                netip.Addr
	StringIPArray           []netip.Addr
	StringIpv4              netip.Addr
	StringIpv4Array         []netip.Addr
	StringIpv6              netip.Addr
	StringIpv6Array         []netip.Addr
	StringPassword          string
	StringPasswordArray     []string
	StringTime              time.Time
	StringTimeArray         []time.Time
	StringUnix              time.Time
	StringUnixMicro         time.Time
	StringUnixMicroArray    []time.Time
	StringUnixMilli         time.Time
	StringUnixMilliArray    []time.Time
	StringUnixNano          time.Time
	StringUnixNanoArray     []time.Time
	StringUnixSeconds       time.Time
	StringUnixSecondsArray  []time.Time
	StringUnixArray         []time.Time
	StringURI               url.URL
	StringURIArray          []url.URL
	StringUUID              uuid.UUID
	StringUUIDArray         []uuid.UUID
}

func unpackTestQueryParameterParams(packed map[string]any) (params TestQueryParameterParams) {
	params.Boolean = packed["boolean"].(bool)
	params.BooleanArray = packed["boolean_array"].([]bool)
	params.Integer = packed["integer"].(int)
	params.IntegerArray = packed["integer_array"].([]int)
	params.IntegerInt32 = packed["integer_int32"].(int32)
	params.IntegerInt32Array = packed["integer_int32_array"].([]int32)
	params.IntegerInt64 = packed["integer_int64"].(int64)
	params.IntegerInt64Array = packed["integer_int64_array"].([]int64)
	params.IntegerUint = packed["integer_uint"].(uint)
	params.IntegerUint32 = packed["integer_uint32"].(uint32)
	params.IntegerUint32Array = packed["integer_uint32_array"].([]uint32)
	params.IntegerUint64 = packed["integer_uint64"].(uint64)
	params.IntegerUint64Array = packed["integer_uint64_array"].([]uint64)
	params.IntegerUintArray = packed["integer_uint_array"].([]uint)
	params.IntegerUnix = packed["integer_unix"].(time.Time)
	params.IntegerUnixMicro = packed["integer_unix-micro"].(time.Time)
	params.IntegerUnixMicroArray = packed["integer_unix-micro_array"].([]time.Time)
	params.IntegerUnixMilli = packed["integer_unix-milli"].(time.Time)
	params.IntegerUnixMilliArray = packed["integer_unix-milli_array"].([]time.Time)
	params.IntegerUnixNano = packed["integer_unix-nano"].(time.Time)
	params.IntegerUnixNanoArray = packed["integer_unix-nano_array"].([]time.Time)
	params.IntegerUnixSeconds = packed["integer_unix-seconds"].(time.Time)
	params.IntegerUnixSecondsArray = packed["integer_unix-seconds_array"].([]time.Time)
	params.IntegerUnixArray = packed["integer_unix_array"].([]time.Time)
	params.Number = packed["number"].(float64)
	params.NumberArray = packed["number_array"].([]float64)
	params.NumberDouble = packed["number_double"].(float64)
	params.NumberDoubleArray = packed["number_double_array"].([]float64)
	params.NumberFloat = packed["number_float"].(float32)
	params.NumberFloatArray = packed["number_float_array"].([]float32)
	params.NumberInt32 = packed["number_int32"].(int32)
	params.NumberInt32Array = packed["number_int32_array"].([]int32)
	params.NumberInt64 = packed["number_int64"].(int64)
	params.NumberInt64Array = packed["number_int64_array"].([]int64)
	params.String = packed["string"].(string)
	params.StringArray = packed["string_array"].([]string)
	params.StringBinary = packed["string_binary"].(string)
	params.StringBinaryArray = packed["string_binary_array"].([]string)
	params.StringByte = packed["string_byte"].([]byte)
	params.StringByteArray = packed["string_byte_array"].([][]byte)
	params.StringDate = packed["string_date"].(time.Time)
	params.StringDateTime = packed["string_date-time"].(time.Time)
	params.StringDateTimeArray = packed["string_date-time_array"].([]time.Time)
	params.StringDateArray = packed["string_date_array"].([]time.Time)
	params.StringDuration = packed["string_duration"].(time.Duration)
	params.StringDurationArray = packed["string_duration_array"].([]time.Duration)
	params.StringEmail = packed["string_email"].(string)
	params.StringEmailArray = packed["string_email_array"].([]string)
	params.StringHostname = packed["string_hostname"].(string)
	params.StringHostnameArray = packed["string_hostname_array"].([]string)
	params.StringInt32 = packed["string_int32"].(int32)
	params.StringInt32Array = packed["string_int32_array"].([]int32)
	params.StringInt64 = packed["string_int64"].(int64)
	params.StringInt64Array = packed["string_int64_array"].([]int64)
	params.StringIP = packed["string_ip"].(netip.Addr)
	params.StringIPArray = packed["string_ip_array"].([]netip.Addr)
	params.StringIpv4 = packed["string_ipv4"].(netip.Addr)
	params.StringIpv4Array = packed["string_ipv4_array"].([]netip.Addr)
	params.StringIpv6 = packed["string_ipv6"].(netip.Addr)
	params.StringIpv6Array = packed["string_ipv6_array"].([]netip.Addr)
	params.StringPassword = packed["string_password"].(string)
	params.StringPasswordArray = packed["string_password_array"].([]string)
	params.StringTime = packed["string_time"].(time.Time)
	params.StringTimeArray = packed["string_time_array"].([]time.Time)
	params.StringUnix = packed["string_unix"].(time.Time)
	params.StringUnixMicro = packed["string_unix-micro"].(time.Time)
	params.StringUnixMicroArray = packed["string_unix-micro_array"].([]time.Time)
	params.StringUnixMilli = packed["string_unix-milli"].(time.Time)
	params.StringUnixMilliArray = packed["string_unix-milli_array"].([]time.Time)
	params.StringUnixNano = packed["string_unix-nano"].(time.Time)
	params.StringUnixNanoArray = packed["string_unix-nano_array"].([]time.Time)
	params.StringUnixSeconds = packed["string_unix-seconds"].(time.Time)
	params.StringUnixSecondsArray = packed["string_unix-seconds_array"].([]time.Time)
	params.StringUnixArray = packed["string_unix_array"].([]time.Time)
	params.StringURI = packed["string_uri"].(url.URL)
	params.StringURIArray = packed["string_uri_array"].([]url.URL)
	params.StringUUID = packed["string_uuid"].(uuid.UUID)
	params.StringUUIDArray = packed["string_uuid_array"].([]uuid.UUID)
	return params
}

func decodeTestQueryParameterParams(args [0]string, r *http.Request) (params TestQueryParameterParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: boolean.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "boolean",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToBool(val)
				if err != nil {
					return err
				}

				params.Boolean = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: boolean: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: boolean_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "boolean_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotBooleanArrayVal bool
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToBool(val)
						if err != nil {
							return err
						}

						paramsDotBooleanArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.BooleanArray = append(params.BooleanArray, paramsDotBooleanArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: boolean_array: parse")
			}
			if err := func() error {
				if params.BooleanArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: boolean_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Integer = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerArrayVal int
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt(val)
						if err != nil {
							return err
						}

						paramsDotIntegerArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerArray = append(params.IntegerArray, paramsDotIntegerArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_array: parse")
			}
			if err := func() error {
				if params.IntegerArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_int32.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.IntegerInt32 = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_int32: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_int32_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerInt32ArrayVal int32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt32(val)
						if err != nil {
							return err
						}

						paramsDotIntegerInt32ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerInt32Array = append(params.IntegerInt32Array, paramsDotIntegerInt32ArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_int32_array: parse")
			}
			if err := func() error {
				if params.IntegerInt32Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_int32_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_int64.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.IntegerInt64 = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_int64: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_int64_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerInt64ArrayVal int64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt64(val)
						if err != nil {
							return err
						}

						paramsDotIntegerInt64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerInt64Array = append(params.IntegerInt64Array, paramsDotIntegerInt64ArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_int64_array: parse")
			}
			if err := func() error {
				if params.IntegerInt64Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_int64_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_uint.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.IntegerUint = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_uint: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_uint32.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint32(val)
				if err != nil {
					return err
				}

				params.IntegerUint32 = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_uint32: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_uint32_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUint32ArrayVal uint32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUint32(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUint32ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUint32Array = append(params.IntegerUint32Array, paramsDotIntegerUint32ArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_uint32_array: parse")
			}
			if err := func() error {
				if params.IntegerUint32Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_uint32_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_uint64.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint64(val)
				if err != nil {
					return err
				}

				params.IntegerUint64 = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_uint64: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_uint64_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUint64ArrayVal uint64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUint64(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUint64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUint64Array = append(params.IntegerUint64Array, paramsDotIntegerUint64ArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_uint64_array: parse")
			}
			if err := func() error {
				if params.IntegerUint64Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_uint64_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_uint_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUintArrayVal uint
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUint(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUintArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUintArray = append(params.IntegerUintArray, paramsDotIntegerUintArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_uint_array: parse")
			}
			if err := func() error {
				if params.IntegerUintArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_uint_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_unix.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixSeconds(val)
				if err != nil {
					return err
				}

				params.IntegerUnix = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_unix: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_unix-micro.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-micro",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixMicro(val)
				if err != nil {
					return err
				}

				params.IntegerUnixMicro = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-micro: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_unix-micro_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-micro_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUnixMicroArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixMicro(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUnixMicroArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUnixMicroArray = append(params.IntegerUnixMicroArray, paramsDotIntegerUnixMicroArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-micro_array: parse")
			}
			if err := func() error {
				if params.IntegerUnixMicroArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-micro_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_unix-milli.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-milli",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixMilli(val)
				if err != nil {
					return err
				}

				params.IntegerUnixMilli = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-milli: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_unix-milli_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-milli_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUnixMilliArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixMilli(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUnixMilliArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUnixMilliArray = append(params.IntegerUnixMilliArray, paramsDotIntegerUnixMilliArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-milli_array: parse")
			}
			if err := func() error {
				if params.IntegerUnixMilliArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-milli_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_unix-nano.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-nano",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixNano(val)
				if err != nil {
					return err
				}

				params.IntegerUnixNano = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-nano: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_unix-nano_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-nano_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUnixNanoArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixNano(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUnixNanoArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUnixNanoArray = append(params.IntegerUnixNanoArray, paramsDotIntegerUnixNanoArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-nano_array: parse")
			}
			if err := func() error {
				if params.IntegerUnixNanoArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-nano_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_unix-seconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-seconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixSeconds(val)
				if err != nil {
					return err
				}

				params.IntegerUnixSeconds = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-seconds: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_unix-seconds_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-seconds_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUnixSecondsArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixSeconds(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUnixSecondsArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUnixSecondsArray = append(params.IntegerUnixSecondsArray, paramsDotIntegerUnixSecondsArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-seconds_array: parse")
			}
			if err := func() error {
				if params.IntegerUnixSecondsArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_unix-seconds_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: integer_unix_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUnixArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixSeconds(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUnixArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUnixArray = append(params.IntegerUnixArray, paramsDotIntegerUnixArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: integer_unix_array: parse")
			}
			if err := func() error {
				if params.IntegerUnixArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: integer_unix_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: number.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				params.Number = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: number: parse")
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.Number)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: number: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: number_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNumberArrayVal float64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToFloat64(val)
						if err != nil {
							return err
						}

						paramsDotNumberArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.NumberArray = append(params.NumberArray, paramsDotNumberArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: number_array: parse")
			}
			if err := func() error {
				if params.NumberArray == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.NumberArray {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: number_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: number_double.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_double",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				params.NumberDouble = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: number_double: parse")
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.NumberDouble)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: number_double: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: number_double_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_double_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNumberDoubleArrayVal float64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToFloat64(val)
						if err != nil {
							return err
						}

						paramsDotNumberDoubleArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.NumberDoubleArray = append(params.NumberDoubleArray, paramsDotNumberDoubleArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: number_double_array: parse")
			}
			if err := func() error {
				if params.NumberDoubleArray == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.NumberDoubleArray {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: number_double_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: number_float.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_float",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat32(val)
				if err != nil {
					return err
				}

				params.NumberFloat = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: number_float: parse")
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.NumberFloat)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: number_float: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: number_float_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_float_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNumberFloatArrayVal float32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToFloat32(val)
						if err != nil {
							return err
						}

						paramsDotNumberFloatArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.NumberFloatArray = append(params.NumberFloatArray, paramsDotNumberFloatArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: number_float_array: parse")
			}
			if err := func() error {
				if params.NumberFloatArray == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.NumberFloatArray {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: number_float_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: number_int32.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_int32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.NumberInt32 = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: number_int32: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: number_int32_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_int32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNumberInt32ArrayVal int32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt32(val)
						if err != nil {
							return err
						}

						paramsDotNumberInt32ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.NumberInt32Array = append(params.NumberInt32Array, paramsDotNumberInt32ArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: number_int32_array: parse")
			}
			if err := func() error {
				if params.NumberInt32Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: number_int32_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: number_int64.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_int64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.NumberInt64 = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: number_int64: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: number_int64_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_int64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNumberInt64ArrayVal int64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt64(val)
						if err != nil {
							return err
						}

						paramsDotNumberInt64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.NumberInt64Array = append(params.NumberInt64Array, paramsDotNumberInt64ArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: number_int64_array: parse")
			}
			if err := func() error {
				if params.NumberInt64Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: number_int64_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.String = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringArrayVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStringArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringArray = append(params.StringArray, paramsDotStringArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_array: parse")
			}
			if err := func() error {
				if params.StringArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_binary.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_binary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StringBinary = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_binary: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_binary_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_binary_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringBinaryArrayVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStringBinaryArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringBinaryArray = append(params.StringBinaryArray, paramsDotStringBinaryArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_binary_array: parse")
			}
			if err := func() error {
				if params.StringBinaryArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_binary_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_byte.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_byte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToBytes(val)
				if err != nil {
					return err
				}

				params.StringByte = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_byte: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_byte_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_byte_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringByteArrayVal []byte
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToBytes(val)
						if err != nil {
							return err
						}

						paramsDotStringByteArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringByteArray = append(params.StringByteArray, paramsDotStringByteArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_byte_array: parse")
			}
			if err := func() error {
				if params.StringByteArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_byte_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_date.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDate(val)
				if err != nil {
					return err
				}

				params.StringDate = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_date: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_date-time.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_date-time",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.StringDateTime = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_date-time: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_date-time_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_date-time_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringDateTimeArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToDateTime(val)
						if err != nil {
							return err
						}

						paramsDotStringDateTimeArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringDateTimeArray = append(params.StringDateTimeArray, paramsDotStringDateTimeArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_date-time_array: parse")
			}
			if err := func() error {
				if params.StringDateTimeArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_date-time_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_date_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_date_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringDateArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToDate(val)
						if err != nil {
							return err
						}

						paramsDotStringDateArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringDateArray = append(params.StringDateArray, paramsDotStringDateArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_date_array: parse")
			}
			if err := func() error {
				if params.StringDateArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_date_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_duration.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_duration",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDuration(val)
				if err != nil {
					return err
				}

				params.StringDuration = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_duration: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_duration_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_duration_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringDurationArrayVal time.Duration
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToDuration(val)
						if err != nil {
							return err
						}

						paramsDotStringDurationArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringDurationArray = append(params.StringDurationArray, paramsDotStringDurationArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_duration_array: parse")
			}
			if err := func() error {
				if params.StringDurationArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_duration_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_email.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_email",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StringEmail = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_email: parse")
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.StringEmail)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_email: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_email_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_email_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringEmailArrayVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStringEmailArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringEmailArray = append(params.StringEmailArray, paramsDotStringEmailArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_email_array: parse")
			}
			if err := func() error {
				if params.StringEmailArray == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.StringEmailArray {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_email_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_hostname.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_hostname",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StringHostname = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_hostname: parse")
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.StringHostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_hostname: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_hostname_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_hostname_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringHostnameArrayVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStringHostnameArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringHostnameArray = append(params.StringHostnameArray, paramsDotStringHostnameArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_hostname_array: parse")
			}
			if err := func() error {
				if params.StringHostnameArray == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.StringHostnameArray {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_hostname_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_int32.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringInt32(val)
				if err != nil {
					return err
				}

				params.StringInt32 = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_int32: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_int32_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringInt32ArrayVal int32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringInt32(val)
						if err != nil {
							return err
						}

						paramsDotStringInt32ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringInt32Array = append(params.StringInt32Array, paramsDotStringInt32ArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_int32_array: parse")
			}
			if err := func() error {
				if params.StringInt32Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_int32_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_int64.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringInt64(val)
				if err != nil {
					return err
				}

				params.StringInt64 = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_int64: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_int64_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringInt64ArrayVal int64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringInt64(val)
						if err != nil {
							return err
						}

						paramsDotStringInt64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringInt64Array = append(params.StringInt64Array, paramsDotStringInt64ArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_int64_array: parse")
			}
			if err := func() error {
				if params.StringInt64Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_int64_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_ip.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ip",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToAddr(val)
				if err != nil {
					return err
				}

				params.StringIP = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_ip: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_ip_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ip_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringIPArrayVal netip.Addr
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToAddr(val)
						if err != nil {
							return err
						}

						paramsDotStringIPArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringIPArray = append(params.StringIPArray, paramsDotStringIPArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_ip_array: parse")
			}
			if err := func() error {
				if params.StringIPArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_ip_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_ipv4.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ipv4",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToAddr(val)
				if err != nil {
					return err
				}

				params.StringIpv4 = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_ipv4: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_ipv4_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ipv4_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringIpv4ArrayVal netip.Addr
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToAddr(val)
						if err != nil {
							return err
						}

						paramsDotStringIpv4ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringIpv4Array = append(params.StringIpv4Array, paramsDotStringIpv4ArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_ipv4_array: parse")
			}
			if err := func() error {
				if params.StringIpv4Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_ipv4_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_ipv6.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ipv6",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToAddr(val)
				if err != nil {
					return err
				}

				params.StringIpv6 = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_ipv6: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_ipv6_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ipv6_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringIpv6ArrayVal netip.Addr
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToAddr(val)
						if err != nil {
							return err
						}

						paramsDotStringIpv6ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringIpv6Array = append(params.StringIpv6Array, paramsDotStringIpv6ArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_ipv6_array: parse")
			}
			if err := func() error {
				if params.StringIpv6Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_ipv6_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_password.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_password",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StringPassword = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_password: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_password_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_password_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringPasswordArrayVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStringPasswordArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringPasswordArray = append(params.StringPasswordArray, paramsDotStringPasswordArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_password_array: parse")
			}
			if err := func() error {
				if params.StringPasswordArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_password_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_time.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_time",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToTime(val)
				if err != nil {
					return err
				}

				params.StringTime = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_time: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_time_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_time_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringTimeArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToTime(val)
						if err != nil {
							return err
						}

						paramsDotStringTimeArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringTimeArray = append(params.StringTimeArray, paramsDotStringTimeArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_time_array: parse")
			}
			if err := func() error {
				if params.StringTimeArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_time_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_unix.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixSeconds(val)
				if err != nil {
					return err
				}

				params.StringUnix = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_unix: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_unix-micro.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-micro",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixMicro(val)
				if err != nil {
					return err
				}

				params.StringUnixMicro = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_unix-micro: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_unix-micro_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-micro_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUnixMicroArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixMicro(val)
						if err != nil {
							return err
						}

						paramsDotStringUnixMicroArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUnixMicroArray = append(params.StringUnixMicroArray, paramsDotStringUnixMicroArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_unix-micro_array: parse")
			}
			if err := func() error {
				if params.StringUnixMicroArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_unix-micro_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_unix-milli.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-milli",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixMilli(val)
				if err != nil {
					return err
				}

				params.StringUnixMilli = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_unix-milli: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_unix-milli_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-milli_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUnixMilliArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixMilli(val)
						if err != nil {
							return err
						}

						paramsDotStringUnixMilliArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUnixMilliArray = append(params.StringUnixMilliArray, paramsDotStringUnixMilliArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_unix-milli_array: parse")
			}
			if err := func() error {
				if params.StringUnixMilliArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_unix-milli_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_unix-nano.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-nano",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixNano(val)
				if err != nil {
					return err
				}

				params.StringUnixNano = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_unix-nano: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_unix-nano_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-nano_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUnixNanoArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixNano(val)
						if err != nil {
							return err
						}

						paramsDotStringUnixNanoArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUnixNanoArray = append(params.StringUnixNanoArray, paramsDotStringUnixNanoArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_unix-nano_array: parse")
			}
			if err := func() error {
				if params.StringUnixNanoArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_unix-nano_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_unix-seconds.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-seconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixSeconds(val)
				if err != nil {
					return err
				}

				params.StringUnixSeconds = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_unix-seconds: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_unix-seconds_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-seconds_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUnixSecondsArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixSeconds(val)
						if err != nil {
							return err
						}

						paramsDotStringUnixSecondsArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUnixSecondsArray = append(params.StringUnixSecondsArray, paramsDotStringUnixSecondsArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_unix-seconds_array: parse")
			}
			if err := func() error {
				if params.StringUnixSecondsArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_unix-seconds_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_unix_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUnixArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixSeconds(val)
						if err != nil {
							return err
						}

						paramsDotStringUnixArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUnixArray = append(params.StringUnixArray, paramsDotStringUnixArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_unix_array: parse")
			}
			if err := func() error {
				if params.StringUnixArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_unix_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_uri.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uri",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToURL(val)
				if err != nil {
					return err
				}

				params.StringURI = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_uri: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_uri_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uri_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringURIArrayVal url.URL
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToURL(val)
						if err != nil {
							return err
						}

						paramsDotStringURIArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringURIArray = append(params.StringURIArray, paramsDotStringURIArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_uri_array: parse")
			}
			if err := func() error {
				if params.StringURIArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_uri_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_uuid.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.StringUUID = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: string_uuid: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: string_uuid_array.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uuid_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUUIDArrayVal uuid.UUID
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUUID(val)
						if err != nil {
							return err
						}

						paramsDotStringUUIDArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUUIDArray = append(params.StringUUIDArray, paramsDotStringUUIDArrayVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: string_uuid_array: parse")
			}
			if err := func() error {
				if params.StringUUIDArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: string_uuid_array: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	return params, nil
}
