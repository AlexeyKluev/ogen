// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

// Error Response Schema.
type Error struct {
	Code   OptInt32  `json:"code"`
	Status OptString `json:"status"`
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBoolArray returns new OptBoolArray with value set to v.
func NewOptBoolArray(v [][]bool) OptBoolArray {
	return OptBoolArray{
		Value: v,
		Set:   true,
	}
}

// OptBoolArray is optional [][]bool.
type OptBoolArray struct {
	Value [][]bool
	Set   bool
}

// IsSet returns true if OptBoolArray was set.
func (o OptBoolArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBoolArray) Reset() {
	var v [][]bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBoolArray) SetTo(v [][]bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBoolArray) Get() (v [][]bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBoolArray) Or(d [][]bool) [][]bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptByte returns new OptByte with value set to v.
func NewOptByte(v []byte) OptByte {
	return OptByte{
		Value: v,
		Set:   true,
	}
}

// OptByte is optional []byte.
type OptByte struct {
	Value []byte
	Set   bool
}

// IsSet returns true if OptByte was set.
func (o OptByte) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptByte) Reset() {
	var v []byte
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptByte) SetTo(v []byte) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptByte) Get() (v []byte, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptByte) Or(d []byte) []byte {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptByteArray returns new OptByteArray with value set to v.
func NewOptByteArray(v [][]byte) OptByteArray {
	return OptByteArray{
		Value: v,
		Set:   true,
	}
}

// OptByteArray is optional [][]byte.
type OptByteArray struct {
	Value [][]byte
	Set   bool
}

// IsSet returns true if OptByteArray was set.
func (o OptByteArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptByteArray) Reset() {
	var v [][]byte
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptByteArray) SetTo(v [][]byte) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptByteArray) Get() (v [][]byte, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptByteArray) Or(d [][]byte) [][]byte {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDuration returns new OptDuration with value set to v.
func NewOptDuration(v time.Duration) OptDuration {
	return OptDuration{
		Value: v,
		Set:   true,
	}
}

// OptDuration is optional time.Duration.
type OptDuration struct {
	Value time.Duration
	Set   bool
}

// IsSet returns true if OptDuration was set.
func (o OptDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDuration) Reset() {
	var v time.Duration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDuration) SetTo(v time.Duration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDuration) Get() (v time.Duration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDuration) Or(d time.Duration) time.Duration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDurationArray returns new OptDurationArray with value set to v.
func NewOptDurationArray(v [][]time.Duration) OptDurationArray {
	return OptDurationArray{
		Value: v,
		Set:   true,
	}
}

// OptDurationArray is optional [][]time.Duration.
type OptDurationArray struct {
	Value [][]time.Duration
	Set   bool
}

// IsSet returns true if OptDurationArray was set.
func (o OptDurationArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDurationArray) Reset() {
	var v [][]time.Duration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDurationArray) SetTo(v [][]time.Duration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDurationArray) Get() (v [][]time.Duration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDurationArray) Or(d [][]time.Duration) [][]time.Duration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32Array returns new OptFloat32Array with value set to v.
func NewOptFloat32Array(v []float32) OptFloat32Array {
	return OptFloat32Array{
		Value: v,
		Set:   true,
	}
}

// OptFloat32Array is optional []float32.
type OptFloat32Array struct {
	Value []float32
	Set   bool
}

// IsSet returns true if OptFloat32Array was set.
func (o OptFloat32Array) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32Array) Reset() {
	var v []float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32Array) SetTo(v []float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32Array) Get() (v []float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32Array) Or(d []float32) []float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64Array returns new OptFloat64Array with value set to v.
func NewOptFloat64Array(v [][]float64) OptFloat64Array {
	return OptFloat64Array{
		Value: v,
		Set:   true,
	}
}

// OptFloat64Array is optional [][]float64.
type OptFloat64Array struct {
	Value [][]float64
	Set   bool
}

// IsSet returns true if OptFloat64Array was set.
func (o OptFloat64Array) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64Array) Reset() {
	var v [][]float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64Array) SetTo(v [][]float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64Array) Get() (v [][]float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64Array) Or(d [][]float64) [][]float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIP returns new OptIP with value set to v.
func NewOptIP(v net.IP) OptIP {
	return OptIP{
		Value: v,
		Set:   true,
	}
}

// OptIP is optional net.IP.
type OptIP struct {
	Value net.IP
	Set   bool
}

// IsSet returns true if OptIP was set.
func (o OptIP) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIP) Reset() {
	var v net.IP
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIP) SetTo(v net.IP) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIP) Get() (v net.IP, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIP) Or(d net.IP) net.IP {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIPArray returns new OptIPArray with value set to v.
func NewOptIPArray(v [][]net.IP) OptIPArray {
	return OptIPArray{
		Value: v,
		Set:   true,
	}
}

// OptIPArray is optional [][]net.IP.
type OptIPArray struct {
	Value [][]net.IP
	Set   bool
}

// IsSet returns true if OptIPArray was set.
func (o OptIPArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIPArray) Reset() {
	var v [][]net.IP
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIPArray) SetTo(v [][]net.IP) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIPArray) Get() (v [][]net.IP, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIPArray) Or(d [][]net.IP) [][]net.IP {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32Array returns new OptInt32Array with value set to v.
func NewOptInt32Array(v [][]int32) OptInt32Array {
	return OptInt32Array{
		Value: v,
		Set:   true,
	}
}

// OptInt32Array is optional [][]int32.
type OptInt32Array struct {
	Value [][]int32
	Set   bool
}

// IsSet returns true if OptInt32Array was set.
func (o OptInt32Array) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32Array) Reset() {
	var v [][]int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32Array) SetTo(v [][]int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32Array) Get() (v [][]int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32Array) Or(d [][]int32) [][]int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64Array returns new OptInt64Array with value set to v.
func NewOptInt64Array(v [][]int64) OptInt64Array {
	return OptInt64Array{
		Value: v,
		Set:   true,
	}
}

// OptInt64Array is optional [][]int64.
type OptInt64Array struct {
	Value [][]int64
	Set   bool
}

// IsSet returns true if OptInt64Array was set.
func (o OptInt64Array) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64Array) Reset() {
	var v [][]int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64Array) SetTo(v [][]int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64Array) Get() (v [][]int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64Array) Or(d [][]int64) [][]int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIntArray returns new OptIntArray with value set to v.
func NewOptIntArray(v [][]int) OptIntArray {
	return OptIntArray{
		Value: v,
		Set:   true,
	}
}

// OptIntArray is optional [][]int.
type OptIntArray struct {
	Value [][]int
	Set   bool
}

// IsSet returns true if OptIntArray was set.
func (o OptIntArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIntArray) Reset() {
	var v [][]int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIntArray) SetTo(v [][]int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIntArray) Get() (v [][]int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIntArray) Or(d [][]int) [][]int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRaw returns new OptRaw with value set to v.
func NewOptRaw(v jx.Raw) OptRaw {
	return OptRaw{
		Value: v,
		Set:   true,
	}
}

// OptRaw is optional jx.Raw.
type OptRaw struct {
	Value jx.Raw
	Set   bool
}

// IsSet returns true if OptRaw was set.
func (o OptRaw) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRaw) Reset() {
	var v jx.Raw
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRaw) SetTo(v jx.Raw) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRaw) Get() (v jx.Raw, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRaw) Or(d jx.Raw) jx.Raw {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringArray returns new OptStringArray with value set to v.
func NewOptStringArray(v []string) OptStringArray {
	return OptStringArray{
		Value: v,
		Set:   true,
	}
}

// OptStringArray is optional []string.
type OptStringArray struct {
	Value []string
	Set   bool
}

// IsSet returns true if OptStringArray was set.
func (o OptStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringArray) SetTo(v []string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringArray) Get() (v []string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestRequestFormatTestReq returns new OptTestRequestFormatTestReq with value set to v.
func NewOptTestRequestFormatTestReq(v TestRequestFormatTestReq) OptTestRequestFormatTestReq {
	return OptTestRequestFormatTestReq{
		Value: v,
		Set:   true,
	}
}

// OptTestRequestFormatTestReq is optional TestRequestFormatTestReq.
type OptTestRequestFormatTestReq struct {
	Value TestRequestFormatTestReq
	Set   bool
}

// IsSet returns true if OptTestRequestFormatTestReq was set.
func (o OptTestRequestFormatTestReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestRequestFormatTestReq) Reset() {
	var v TestRequestFormatTestReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestRequestFormatTestReq) SetTo(v TestRequestFormatTestReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestRequestFormatTestReq) Get() (v TestRequestFormatTestReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestRequestFormatTestReq) Or(d TestRequestFormatTestReq) TestRequestFormatTestReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTime returns new OptTime with value set to v.
func NewOptTime(v time.Time) OptTime {
	return OptTime{
		Value: v,
		Set:   true,
	}
}

// OptTime is optional time.Time.
type OptTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptTime was set.
func (o OptTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTimeArray returns new OptTimeArray with value set to v.
func NewOptTimeArray(v [][]time.Time) OptTimeArray {
	return OptTimeArray{
		Value: v,
		Set:   true,
	}
}

// OptTimeArray is optional [][]time.Time.
type OptTimeArray struct {
	Value [][]time.Time
	Set   bool
}

// IsSet returns true if OptTimeArray was set.
func (o OptTimeArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTimeArray) Reset() {
	var v [][]time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTimeArray) SetTo(v [][]time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTimeArray) Get() (v [][]time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTimeArray) Or(d [][]time.Time) [][]time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURL returns new OptURL with value set to v.
func NewOptURL(v url.URL) OptURL {
	return OptURL{
		Value: v,
		Set:   true,
	}
}

// OptURL is optional url.URL.
type OptURL struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURL was set.
func (o OptURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURL) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURL) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURL) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURL) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURLArray returns new OptURLArray with value set to v.
func NewOptURLArray(v [][]url.URL) OptURLArray {
	return OptURLArray{
		Value: v,
		Set:   true,
	}
}

// OptURLArray is optional [][]url.URL.
type OptURLArray struct {
	Value [][]url.URL
	Set   bool
}

// IsSet returns true if OptURLArray was set.
func (o OptURLArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURLArray) Reset() {
	var v [][]url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURLArray) SetTo(v [][]url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURLArray) Get() (v [][]url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURLArray) Or(d [][]url.URL) [][]url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUIDArray returns new OptUUIDArray with value set to v.
func NewOptUUIDArray(v [][]uuid.UUID) OptUUIDArray {
	return OptUUIDArray{
		Value: v,
		Set:   true,
	}
}

// OptUUIDArray is optional [][]uuid.UUID.
type OptUUIDArray struct {
	Value [][]uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUIDArray was set.
func (o OptUUIDArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUIDArray) Reset() {
	var v [][]uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUIDArray) SetTo(v [][]uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUIDArray) Get() (v [][]uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUIDArray) Or(d [][]uuid.UUID) [][]uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type TestRequestFormatTestReq struct {
	RequiredInteger                        int               `json:"required_integer"`
	RequiredArrayInteger                   []int             `json:"required_array_integer"`
	RequiredDoubleArrayInteger             [][]int           `json:"required_double_array_integer"`
	RequiredIntegerInt32                   int32             `json:"required_integer_int32"`
	RequiredArrayIntegerInt32              []int32           `json:"required_array_integer_int32"`
	RequiredDoubleArrayIntegerInt32        [][]int32         `json:"required_double_array_integer_int32"`
	RequiredIntegerInt64                   int64             `json:"required_integer_int64"`
	RequiredArrayIntegerInt64              []int64           `json:"required_array_integer_int64"`
	RequiredDoubleArrayIntegerInt64        [][]int64         `json:"required_double_array_integer_int64"`
	RequiredNumberInt64                    int64             `json:"required_number_int64"`
	RequiredArrayNumberInt64               []int64           `json:"required_array_number_int64"`
	RequiredDoubleArrayNumberInt64         [][]int64         `json:"required_double_array_number_int64"`
	RequiredNumber                         float64           `json:"required_number"`
	RequiredArrayNumber                    []float64         `json:"required_array_number"`
	RequiredDoubleArrayNumber              [][]float64       `json:"required_double_array_number"`
	RequiredNumberFloat                    float32           `json:"required_number_float"`
	RequiredArrayNumberFloat               []float32         `json:"required_array_number_float"`
	RequiredDoubleArrayNumberFloat         [][]float32       `json:"required_double_array_number_float"`
	RequiredNumberDouble                   float64           `json:"required_number_double"`
	RequiredArrayNumberDouble              []float64         `json:"required_array_number_double"`
	RequiredDoubleArrayNumberDouble        [][]float64       `json:"required_double_array_number_double"`
	RequiredNumberInt32                    int32             `json:"required_number_int32"`
	RequiredArrayNumberInt32               []int32           `json:"required_array_number_int32"`
	RequiredDoubleArrayNumberInt32         [][]int32         `json:"required_double_array_number_int32"`
	RequiredStringByte                     []byte            `json:"required_string_byte"`
	RequiredArrayStringByte                [][]byte          `json:"required_array_string_byte"`
	RequiredDoubleArrayStringByte          [][][]byte        `json:"required_double_array_string_byte"`
	RequiredStringIpv4                     net.IP            `json:"required_string_ipv4"`
	RequiredArrayStringIpv4                []net.IP          `json:"required_array_string_ipv4"`
	RequiredDoubleArrayStringIpv4          [][]net.IP        `json:"required_double_array_string_ipv4"`
	RequiredStringURI                      url.URL           `json:"required_string_uri"`
	RequiredArrayStringURI                 []url.URL         `json:"required_array_string_uri"`
	RequiredDoubleArrayStringURI           [][]url.URL       `json:"required_double_array_string_uri"`
	RequiredStringPassword                 string            `json:"required_string_password"`
	RequiredArrayStringPassword            []string          `json:"required_array_string_password"`
	RequiredDoubleArrayStringPassword      [][]string        `json:"required_double_array_string_password"`
	RequiredStringDateMinusTime            time.Time         `json:"required_string_date-time"`
	RequiredArrayStringDateMinusTime       []time.Time       `json:"required_array_string_date-time"`
	RequiredDoubleArrayStringDateMinusTime [][]time.Time     `json:"required_double_array_string_date-time"`
	RequiredStringDate                     time.Time         `json:"required_string_date"`
	RequiredArrayStringDate                []time.Time       `json:"required_array_string_date"`
	RequiredDoubleArrayStringDate          [][]time.Time     `json:"required_double_array_string_date"`
	RequiredStringTime                     time.Time         `json:"required_string_time"`
	RequiredArrayStringTime                []time.Time       `json:"required_array_string_time"`
	RequiredDoubleArrayStringTime          [][]time.Time     `json:"required_double_array_string_time"`
	RequiredStringDuration                 time.Duration     `json:"required_string_duration"`
	RequiredArrayStringDuration            []time.Duration   `json:"required_array_string_duration"`
	RequiredDoubleArrayStringDuration      [][]time.Duration `json:"required_double_array_string_duration"`
	RequiredStringUUID                     uuid.UUID         `json:"required_string_uuid"`
	RequiredArrayStringUUID                []uuid.UUID       `json:"required_array_string_uuid"`
	RequiredDoubleArrayStringUUID          [][]uuid.UUID     `json:"required_double_array_string_uuid"`
	RequiredStringIP                       net.IP            `json:"required_string_ip"`
	RequiredArrayStringIP                  []net.IP          `json:"required_array_string_ip"`
	RequiredDoubleArrayStringIP            [][]net.IP        `json:"required_double_array_string_ip"`
	RequiredStringIpv6                     net.IP            `json:"required_string_ipv6"`
	RequiredArrayStringIpv6                []net.IP          `json:"required_array_string_ipv6"`
	RequiredDoubleArrayStringIpv6          [][]net.IP        `json:"required_double_array_string_ipv6"`
	RequiredString                         string            `json:"required_string"`
	RequiredArrayString                    []string          `json:"required_array_string"`
	RequiredDoubleArrayString              [][]string        `json:"required_double_array_string"`
	RequiredBoolean                        bool              `json:"required_boolean"`
	RequiredArrayBoolean                   []bool            `json:"required_array_boolean"`
	RequiredDoubleArrayBoolean             [][]bool          `json:"required_double_array_boolean"`
	RequiredAny                            jx.Raw            `json:"required_any"`
	RequiredArrayAny                       []jx.Raw          `json:"required_array_any"`
	RequiredDoubleArrayAny                 [][]jx.Raw        `json:"required_double_array_any"`
	OptionalNumberFloat                    OptFloat32        `json:"optional_number_float"`
	OptionalArrayNumberFloat               []float32         `json:"optional_array_number_float"`
	OptionalDoubleArrayNumberFloat         [][]float32       `json:"optional_double_array_number_float"`
	OptionalNumberDouble                   OptFloat64        `json:"optional_number_double"`
	OptionalArrayNumberDouble              []float64         `json:"optional_array_number_double"`
	OptionalDoubleArrayNumberDouble        [][]float64       `json:"optional_double_array_number_double"`
	OptionalNumberInt32                    OptInt32          `json:"optional_number_int32"`
	OptionalArrayNumberInt32               []int32           `json:"optional_array_number_int32"`
	OptionalDoubleArrayNumberInt32         [][]int32         `json:"optional_double_array_number_int32"`
	OptionalNumberInt64                    OptInt64          `json:"optional_number_int64"`
	OptionalArrayNumberInt64               []int64           `json:"optional_array_number_int64"`
	OptionalDoubleArrayNumberInt64         [][]int64         `json:"optional_double_array_number_int64"`
	OptionalNumber                         OptFloat64        `json:"optional_number"`
	OptionalArrayNumber                    []float64         `json:"optional_array_number"`
	OptionalDoubleArrayNumber              [][]float64       `json:"optional_double_array_number"`
	OptionalStringByte                     []byte            `json:"optional_string_byte"`
	OptionalArrayStringByte                [][]byte          `json:"optional_array_string_byte"`
	OptionalDoubleArrayStringByte          [][][]byte        `json:"optional_double_array_string_byte"`
	OptionalStringIpv4                     OptIP             `json:"optional_string_ipv4"`
	OptionalArrayStringIpv4                []net.IP          `json:"optional_array_string_ipv4"`
	OptionalDoubleArrayStringIpv4          [][]net.IP        `json:"optional_double_array_string_ipv4"`
	OptionalStringURI                      OptURL            `json:"optional_string_uri"`
	OptionalArrayStringURI                 []url.URL         `json:"optional_array_string_uri"`
	OptionalDoubleArrayStringURI           [][]url.URL       `json:"optional_double_array_string_uri"`
	OptionalStringPassword                 OptString         `json:"optional_string_password"`
	OptionalArrayStringPassword            []string          `json:"optional_array_string_password"`
	OptionalDoubleArrayStringPassword      [][]string        `json:"optional_double_array_string_password"`
	OptionalStringIpv6                     OptIP             `json:"optional_string_ipv6"`
	OptionalArrayStringIpv6                []net.IP          `json:"optional_array_string_ipv6"`
	OptionalDoubleArrayStringIpv6          [][]net.IP        `json:"optional_double_array_string_ipv6"`
	OptionalString                         OptString         `json:"optional_string"`
	OptionalArrayString                    []string          `json:"optional_array_string"`
	OptionalDoubleArrayString              [][]string        `json:"optional_double_array_string"`
	OptionalStringDateMinusTime            OptTime           `json:"optional_string_date-time"`
	OptionalArrayStringDateMinusTime       []time.Time       `json:"optional_array_string_date-time"`
	OptionalDoubleArrayStringDateMinusTime [][]time.Time     `json:"optional_double_array_string_date-time"`
	OptionalStringDate                     OptTime           `json:"optional_string_date"`
	OptionalArrayStringDate                []time.Time       `json:"optional_array_string_date"`
	OptionalDoubleArrayStringDate          [][]time.Time     `json:"optional_double_array_string_date"`
	OptionalStringTime                     OptTime           `json:"optional_string_time"`
	OptionalArrayStringTime                []time.Time       `json:"optional_array_string_time"`
	OptionalDoubleArrayStringTime          [][]time.Time     `json:"optional_double_array_string_time"`
	OptionalStringDuration                 OptDuration       `json:"optional_string_duration"`
	OptionalArrayStringDuration            []time.Duration   `json:"optional_array_string_duration"`
	OptionalDoubleArrayStringDuration      [][]time.Duration `json:"optional_double_array_string_duration"`
	OptionalStringUUID                     OptUUID           `json:"optional_string_uuid"`
	OptionalArrayStringUUID                []uuid.UUID       `json:"optional_array_string_uuid"`
	OptionalDoubleArrayStringUUID          [][]uuid.UUID     `json:"optional_double_array_string_uuid"`
	OptionalStringIP                       OptIP             `json:"optional_string_ip"`
	OptionalArrayStringIP                  []net.IP          `json:"optional_array_string_ip"`
	OptionalDoubleArrayStringIP            [][]net.IP        `json:"optional_double_array_string_ip"`
	OptionalBoolean                        OptBool           `json:"optional_boolean"`
	OptionalArrayBoolean                   []bool            `json:"optional_array_boolean"`
	OptionalDoubleArrayBoolean             [][]bool          `json:"optional_double_array_boolean"`
	OptionalIntegerInt32                   OptInt32          `json:"optional_integer_int32"`
	OptionalArrayIntegerInt32              []int32           `json:"optional_array_integer_int32"`
	OptionalDoubleArrayIntegerInt32        [][]int32         `json:"optional_double_array_integer_int32"`
	OptionalIntegerInt64                   OptInt64          `json:"optional_integer_int64"`
	OptionalArrayIntegerInt64              []int64           `json:"optional_array_integer_int64"`
	OptionalDoubleArrayIntegerInt64        [][]int64         `json:"optional_double_array_integer_int64"`
	OptionalInteger                        OptInt            `json:"optional_integer"`
	OptionalArrayInteger                   []int             `json:"optional_array_integer"`
	OptionalDoubleArrayInteger             [][]int           `json:"optional_double_array_integer"`
	OptionalAny                            jx.Raw            `json:"optional_any"`
	OptionalArrayAny                       []jx.Raw          `json:"optional_array_any"`
	OptionalDoubleArrayAny                 [][]jx.Raw        `json:"optional_double_array_any"`
}

type TestResponseFormatTestOK struct {
	RequiredInteger                        int               `json:"required_integer"`
	RequiredArrayInteger                   []int             `json:"required_array_integer"`
	RequiredDoubleArrayInteger             [][]int           `json:"required_double_array_integer"`
	RequiredIntegerInt32                   int32             `json:"required_integer_int32"`
	RequiredArrayIntegerInt32              []int32           `json:"required_array_integer_int32"`
	RequiredDoubleArrayIntegerInt32        [][]int32         `json:"required_double_array_integer_int32"`
	RequiredIntegerInt64                   int64             `json:"required_integer_int64"`
	RequiredArrayIntegerInt64              []int64           `json:"required_array_integer_int64"`
	RequiredDoubleArrayIntegerInt64        [][]int64         `json:"required_double_array_integer_int64"`
	RequiredNumberInt64                    int64             `json:"required_number_int64"`
	RequiredArrayNumberInt64               []int64           `json:"required_array_number_int64"`
	RequiredDoubleArrayNumberInt64         [][]int64         `json:"required_double_array_number_int64"`
	RequiredNumber                         float64           `json:"required_number"`
	RequiredArrayNumber                    []float64         `json:"required_array_number"`
	RequiredDoubleArrayNumber              [][]float64       `json:"required_double_array_number"`
	RequiredNumberFloat                    float32           `json:"required_number_float"`
	RequiredArrayNumberFloat               []float32         `json:"required_array_number_float"`
	RequiredDoubleArrayNumberFloat         [][]float32       `json:"required_double_array_number_float"`
	RequiredNumberDouble                   float64           `json:"required_number_double"`
	RequiredArrayNumberDouble              []float64         `json:"required_array_number_double"`
	RequiredDoubleArrayNumberDouble        [][]float64       `json:"required_double_array_number_double"`
	RequiredNumberInt32                    int32             `json:"required_number_int32"`
	RequiredArrayNumberInt32               []int32           `json:"required_array_number_int32"`
	RequiredDoubleArrayNumberInt32         [][]int32         `json:"required_double_array_number_int32"`
	RequiredStringByte                     []byte            `json:"required_string_byte"`
	RequiredArrayStringByte                [][]byte          `json:"required_array_string_byte"`
	RequiredDoubleArrayStringByte          [][][]byte        `json:"required_double_array_string_byte"`
	RequiredStringIpv4                     net.IP            `json:"required_string_ipv4"`
	RequiredArrayStringIpv4                []net.IP          `json:"required_array_string_ipv4"`
	RequiredDoubleArrayStringIpv4          [][]net.IP        `json:"required_double_array_string_ipv4"`
	RequiredStringURI                      url.URL           `json:"required_string_uri"`
	RequiredArrayStringURI                 []url.URL         `json:"required_array_string_uri"`
	RequiredDoubleArrayStringURI           [][]url.URL       `json:"required_double_array_string_uri"`
	RequiredStringPassword                 string            `json:"required_string_password"`
	RequiredArrayStringPassword            []string          `json:"required_array_string_password"`
	RequiredDoubleArrayStringPassword      [][]string        `json:"required_double_array_string_password"`
	RequiredStringDateMinusTime            time.Time         `json:"required_string_date-time"`
	RequiredArrayStringDateMinusTime       []time.Time       `json:"required_array_string_date-time"`
	RequiredDoubleArrayStringDateMinusTime [][]time.Time     `json:"required_double_array_string_date-time"`
	RequiredStringDate                     time.Time         `json:"required_string_date"`
	RequiredArrayStringDate                []time.Time       `json:"required_array_string_date"`
	RequiredDoubleArrayStringDate          [][]time.Time     `json:"required_double_array_string_date"`
	RequiredStringTime                     time.Time         `json:"required_string_time"`
	RequiredArrayStringTime                []time.Time       `json:"required_array_string_time"`
	RequiredDoubleArrayStringTime          [][]time.Time     `json:"required_double_array_string_time"`
	RequiredStringDuration                 time.Duration     `json:"required_string_duration"`
	RequiredArrayStringDuration            []time.Duration   `json:"required_array_string_duration"`
	RequiredDoubleArrayStringDuration      [][]time.Duration `json:"required_double_array_string_duration"`
	RequiredStringUUID                     uuid.UUID         `json:"required_string_uuid"`
	RequiredArrayStringUUID                []uuid.UUID       `json:"required_array_string_uuid"`
	RequiredDoubleArrayStringUUID          [][]uuid.UUID     `json:"required_double_array_string_uuid"`
	RequiredStringIP                       net.IP            `json:"required_string_ip"`
	RequiredArrayStringIP                  []net.IP          `json:"required_array_string_ip"`
	RequiredDoubleArrayStringIP            [][]net.IP        `json:"required_double_array_string_ip"`
	RequiredStringIpv6                     net.IP            `json:"required_string_ipv6"`
	RequiredArrayStringIpv6                []net.IP          `json:"required_array_string_ipv6"`
	RequiredDoubleArrayStringIpv6          [][]net.IP        `json:"required_double_array_string_ipv6"`
	RequiredString                         string            `json:"required_string"`
	RequiredArrayString                    []string          `json:"required_array_string"`
	RequiredDoubleArrayString              [][]string        `json:"required_double_array_string"`
	RequiredBoolean                        bool              `json:"required_boolean"`
	RequiredArrayBoolean                   []bool            `json:"required_array_boolean"`
	RequiredDoubleArrayBoolean             [][]bool          `json:"required_double_array_boolean"`
	RequiredAny                            jx.Raw            `json:"required_any"`
	RequiredArrayAny                       []jx.Raw          `json:"required_array_any"`
	RequiredDoubleArrayAny                 [][]jx.Raw        `json:"required_double_array_any"`
	OptionalNumberFloat                    OptFloat32        `json:"optional_number_float"`
	OptionalArrayNumberFloat               []float32         `json:"optional_array_number_float"`
	OptionalDoubleArrayNumberFloat         [][]float32       `json:"optional_double_array_number_float"`
	OptionalNumberDouble                   OptFloat64        `json:"optional_number_double"`
	OptionalArrayNumberDouble              []float64         `json:"optional_array_number_double"`
	OptionalDoubleArrayNumberDouble        [][]float64       `json:"optional_double_array_number_double"`
	OptionalNumberInt32                    OptInt32          `json:"optional_number_int32"`
	OptionalArrayNumberInt32               []int32           `json:"optional_array_number_int32"`
	OptionalDoubleArrayNumberInt32         [][]int32         `json:"optional_double_array_number_int32"`
	OptionalNumberInt64                    OptInt64          `json:"optional_number_int64"`
	OptionalArrayNumberInt64               []int64           `json:"optional_array_number_int64"`
	OptionalDoubleArrayNumberInt64         [][]int64         `json:"optional_double_array_number_int64"`
	OptionalNumber                         OptFloat64        `json:"optional_number"`
	OptionalArrayNumber                    []float64         `json:"optional_array_number"`
	OptionalDoubleArrayNumber              [][]float64       `json:"optional_double_array_number"`
	OptionalStringByte                     []byte            `json:"optional_string_byte"`
	OptionalArrayStringByte                [][]byte          `json:"optional_array_string_byte"`
	OptionalDoubleArrayStringByte          [][][]byte        `json:"optional_double_array_string_byte"`
	OptionalStringIpv4                     OptIP             `json:"optional_string_ipv4"`
	OptionalArrayStringIpv4                []net.IP          `json:"optional_array_string_ipv4"`
	OptionalDoubleArrayStringIpv4          [][]net.IP        `json:"optional_double_array_string_ipv4"`
	OptionalStringURI                      OptURL            `json:"optional_string_uri"`
	OptionalArrayStringURI                 []url.URL         `json:"optional_array_string_uri"`
	OptionalDoubleArrayStringURI           [][]url.URL       `json:"optional_double_array_string_uri"`
	OptionalStringPassword                 OptString         `json:"optional_string_password"`
	OptionalArrayStringPassword            []string          `json:"optional_array_string_password"`
	OptionalDoubleArrayStringPassword      [][]string        `json:"optional_double_array_string_password"`
	OptionalStringIpv6                     OptIP             `json:"optional_string_ipv6"`
	OptionalArrayStringIpv6                []net.IP          `json:"optional_array_string_ipv6"`
	OptionalDoubleArrayStringIpv6          [][]net.IP        `json:"optional_double_array_string_ipv6"`
	OptionalString                         OptString         `json:"optional_string"`
	OptionalArrayString                    []string          `json:"optional_array_string"`
	OptionalDoubleArrayString              [][]string        `json:"optional_double_array_string"`
	OptionalStringDateMinusTime            OptTime           `json:"optional_string_date-time"`
	OptionalArrayStringDateMinusTime       []time.Time       `json:"optional_array_string_date-time"`
	OptionalDoubleArrayStringDateMinusTime [][]time.Time     `json:"optional_double_array_string_date-time"`
	OptionalStringDate                     OptTime           `json:"optional_string_date"`
	OptionalArrayStringDate                []time.Time       `json:"optional_array_string_date"`
	OptionalDoubleArrayStringDate          [][]time.Time     `json:"optional_double_array_string_date"`
	OptionalStringTime                     OptTime           `json:"optional_string_time"`
	OptionalArrayStringTime                []time.Time       `json:"optional_array_string_time"`
	OptionalDoubleArrayStringTime          [][]time.Time     `json:"optional_double_array_string_time"`
	OptionalStringDuration                 OptDuration       `json:"optional_string_duration"`
	OptionalArrayStringDuration            []time.Duration   `json:"optional_array_string_duration"`
	OptionalDoubleArrayStringDuration      [][]time.Duration `json:"optional_double_array_string_duration"`
	OptionalStringUUID                     OptUUID           `json:"optional_string_uuid"`
	OptionalArrayStringUUID                []uuid.UUID       `json:"optional_array_string_uuid"`
	OptionalDoubleArrayStringUUID          [][]uuid.UUID     `json:"optional_double_array_string_uuid"`
	OptionalStringIP                       OptIP             `json:"optional_string_ip"`
	OptionalArrayStringIP                  []net.IP          `json:"optional_array_string_ip"`
	OptionalDoubleArrayStringIP            [][]net.IP        `json:"optional_double_array_string_ip"`
	OptionalBoolean                        OptBool           `json:"optional_boolean"`
	OptionalArrayBoolean                   []bool            `json:"optional_array_boolean"`
	OptionalDoubleArrayBoolean             [][]bool          `json:"optional_double_array_boolean"`
	OptionalIntegerInt32                   OptInt32          `json:"optional_integer_int32"`
	OptionalArrayIntegerInt32              []int32           `json:"optional_array_integer_int32"`
	OptionalDoubleArrayIntegerInt32        [][]int32         `json:"optional_double_array_integer_int32"`
	OptionalIntegerInt64                   OptInt64          `json:"optional_integer_int64"`
	OptionalArrayIntegerInt64              []int64           `json:"optional_array_integer_int64"`
	OptionalDoubleArrayIntegerInt64        [][]int64         `json:"optional_double_array_integer_int64"`
	OptionalInteger                        OptInt            `json:"optional_integer"`
	OptionalArrayInteger                   []int             `json:"optional_array_integer"`
	OptionalDoubleArrayInteger             [][]int           `json:"optional_double_array_integer"`
	OptionalAny                            jx.Raw            `json:"optional_any"`
	OptionalArrayAny                       []jx.Raw          `json:"optional_array_any"`
	OptionalDoubleArrayAny                 [][]jx.Raw        `json:"optional_double_array_any"`
}
