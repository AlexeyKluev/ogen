// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

func encodeTestRequestAnyResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestBooleanResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestBooleanArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestBooleanArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestBooleanNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestBooleanNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestBooleanNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestFormatTestResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt32Response(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt32ArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt32ArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt32NullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt32NullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt32NullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt64Response(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt64ArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt64ArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt64NullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt64NullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerInt64NullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestIntegerNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberDoubleResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberDoubleArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberDoubleArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberDoubleNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberDoubleNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberDoubleNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberFloatResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberFloatArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberFloatArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberFloatNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberFloatNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberFloatNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt32Response(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt32ArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt32ArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt32NullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt32NullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt32NullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt64Response(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt64ArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt64ArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt64NullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt64NullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberInt64NullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestNumberNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringByteResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringByteArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringByteArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringByteNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringByteNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringByteNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateTimeResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateTimeArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateTimeArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateTimeNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateTimeNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDateTimeNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDurationResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDurationArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDurationArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDurationNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDurationNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringDurationNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIPResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIPArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIPArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIPNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIPNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIPNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv4Response(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv4ArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv4ArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv4NullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv4NullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv4NullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv6Response(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv6ArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv6ArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv6NullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv6NullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringIpv6NullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringPasswordResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringPasswordArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringPasswordArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringPasswordNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringPasswordNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringPasswordNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringTimeResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringTimeArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringTimeArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringTimeNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringTimeNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringTimeNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringURIResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringURIArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringURIArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringURINullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringURINullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringURINullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringUUIDResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringUUIDArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringUUIDArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringUUIDNullableResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringUUIDNullableArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestRequestStringUUIDNullableArrayArrayResponse(response Error, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseAnyResponse(response jx.Raw, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	if len(response) != 0 {
		e.Raw(response)
	}
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseBooleanResponse(response bool, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Bool(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseBooleanArrayResponse(response []bool, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Bool(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Bool(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseBooleanArrayArrayResponse(response [][]bool, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Bool(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Bool(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Bool(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Bool(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseBooleanNullableResponse(response bool, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Bool(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseBooleanNullableArrayResponse(response []bool, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Bool(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Bool(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseBooleanNullableArrayArrayResponse(response [][]bool, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Bool(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Bool(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Bool(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Bool(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseFormatTestResponse(response TestResponseFormatTestOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerResponse(response int, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Int(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerArrayResponse(response []int, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Int(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Int(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerArrayArrayResponse(response [][]int, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt32Response(response int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Int32(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt32ArrayResponse(response []int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Int32(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Int32(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt32ArrayArrayResponse(response [][]int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int32(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int32(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt32NullableResponse(response int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Int32(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt32NullableArrayResponse(response []int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Int32(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Int32(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt32NullableArrayArrayResponse(response [][]int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int32(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int32(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt64Response(response int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Int64(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt64ArrayResponse(response []int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Int64(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Int64(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt64ArrayArrayResponse(response [][]int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int64(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int64(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt64NullableResponse(response int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Int64(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt64NullableArrayResponse(response []int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Int64(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Int64(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerInt64NullableArrayArrayResponse(response [][]int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int64(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int64(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerNullableResponse(response int, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Int(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerNullableArrayResponse(response []int, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Int(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Int(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseIntegerNullableArrayArrayResponse(response [][]int, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberResponse(response float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Float64(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberArrayResponse(response []float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Float64(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Float64(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberArrayArrayResponse(response [][]float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float64(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float64(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberDoubleResponse(response float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Float64(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberDoubleArrayResponse(response []float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Float64(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Float64(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberDoubleArrayArrayResponse(response [][]float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float64(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float64(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberDoubleNullableResponse(response float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Float64(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberDoubleNullableArrayResponse(response []float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Float64(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Float64(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberDoubleNullableArrayArrayResponse(response [][]float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float64(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float64(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberFloatResponse(response float32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Float32(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberFloatArrayResponse(response []float32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Float32(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Float32(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberFloatArrayArrayResponse(response [][]float32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float32(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float32(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberFloatNullableResponse(response float32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Float32(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberFloatNullableArrayResponse(response []float32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Float32(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Float32(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberFloatNullableArrayArrayResponse(response [][]float32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float32(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float32(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt32Response(response int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Int32(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt32ArrayResponse(response []int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Int32(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Int32(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt32ArrayArrayResponse(response [][]int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int32(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int32(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt32NullableResponse(response int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Int32(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt32NullableArrayResponse(response []int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Int32(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Int32(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt32NullableArrayArrayResponse(response [][]int32, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int32(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int32(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int32(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt64Response(response int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Int64(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt64ArrayResponse(response []int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Int64(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Int64(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt64ArrayArrayResponse(response [][]int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int64(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int64(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt64NullableResponse(response int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Int64(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt64NullableArrayResponse(response []int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Int64(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Int64(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberInt64NullableArrayArrayResponse(response [][]int64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int64(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Int64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Int64(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberNullableResponse(response float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Float64(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberNullableArrayResponse(response []float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Float64(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Float64(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseNumberNullableArrayArrayResponse(response [][]float64, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float64(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Float64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Float64(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringResponse(response string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Str(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringArrayResponse(response []string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Str(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Str(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringArrayArrayResponse(response [][]string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Str(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Str(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Str(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Str(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringByteResponse(response []byte, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Base64(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringByteArrayResponse(response [][]byte, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Base64(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Base64(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringByteArrayArrayResponse(response [][][]byte, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Base64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Base64(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Base64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Base64(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringByteNullableResponse(response []byte, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Base64(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringByteNullableArrayResponse(response [][]byte, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Base64(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Base64(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringByteNullableArrayArrayResponse(response [][][]byte, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Base64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Base64(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Base64(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Base64(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateResponse(response time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeDate(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateArrayResponse(response []time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeDate(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeDate(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateArrayArrayResponse(response [][]time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDate(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDate(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDate(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDate(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateNullableResponse(response time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeDate(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateNullableArrayResponse(response []time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeDate(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeDate(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateNullableArrayArrayResponse(response [][]time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDate(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDate(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDate(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDate(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateTimeResponse(response time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeDateTime(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateTimeArrayResponse(response []time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeDateTime(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeDateTime(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateTimeArrayArrayResponse(response [][]time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDateTime(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDateTime(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDateTime(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDateTime(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateTimeNullableResponse(response time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeDateTime(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateTimeNullableArrayResponse(response []time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeDateTime(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeDateTime(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDateTimeNullableArrayArrayResponse(response [][]time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDateTime(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDateTime(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDateTime(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDateTime(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDurationResponse(response time.Duration, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeDuration(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDurationArrayResponse(response []time.Duration, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeDuration(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeDuration(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDurationArrayArrayResponse(response [][]time.Duration, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDuration(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDuration(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDuration(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDuration(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDurationNullableResponse(response time.Duration, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeDuration(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDurationNullableArrayResponse(response []time.Duration, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeDuration(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeDuration(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringDurationNullableArrayArrayResponse(response [][]time.Duration, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDuration(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDuration(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeDuration(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeDuration(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIPResponse(response net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeIP(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIPArrayResponse(response []net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeIP(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeIP(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIPArrayArrayResponse(response [][]net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIPNullableResponse(response net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeIP(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIPNullableArrayResponse(response []net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeIP(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeIP(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIPNullableArrayArrayResponse(response [][]net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv4Response(response net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeIP(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv4ArrayResponse(response []net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeIP(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeIP(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv4ArrayArrayResponse(response [][]net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv4NullableResponse(response net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeIP(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv4NullableArrayResponse(response []net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeIP(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeIP(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv4NullableArrayArrayResponse(response [][]net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv6Response(response net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeIP(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv6ArrayResponse(response []net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeIP(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeIP(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv6ArrayArrayResponse(response [][]net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv6NullableResponse(response net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeIP(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv6NullableArrayResponse(response []net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeIP(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeIP(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringIpv6NullableArrayArrayResponse(response [][]net.IP, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeIP(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeIP(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringNullableResponse(response string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Str(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringNullableArrayResponse(response []string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Str(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Str(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringNullableArrayArrayResponse(response [][]string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Str(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Str(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Str(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Str(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringPasswordResponse(response string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Str(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringPasswordArrayResponse(response []string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Str(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Str(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringPasswordArrayArrayResponse(response [][]string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Str(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Str(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Str(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Str(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringPasswordNullableResponse(response string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.Str(response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringPasswordNullableArrayResponse(response []string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.Str(elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.Str(elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringPasswordNullableArrayArrayResponse(response [][]string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Str(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Str(elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					e.Str(elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					e.Str(elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringTimeResponse(response time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeTime(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringTimeArrayResponse(response []time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeTime(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeTime(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringTimeArrayArrayResponse(response [][]time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeTime(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeTime(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeTime(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeTime(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringTimeNullableResponse(response time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeTime(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringTimeNullableArrayResponse(response []time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeTime(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeTime(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringTimeNullableArrayArrayResponse(response [][]time.Time, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeTime(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeTime(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeTime(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeTime(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringURIResponse(response url.URL, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeURI(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringURIArrayResponse(response []url.URL, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeURI(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeURI(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringURIArrayArrayResponse(response [][]url.URL, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeURI(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeURI(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeURI(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeURI(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringURINullableResponse(response url.URL, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeURI(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringURINullableArrayResponse(response []url.URL, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeURI(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeURI(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringURINullableArrayArrayResponse(response [][]url.URL, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeURI(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeURI(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeURI(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeURI(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringUUIDResponse(response uuid.UUID, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeUUID(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringUUIDArrayResponse(response []uuid.UUID, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeUUID(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeUUID(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringUUIDArrayArrayResponse(response [][]uuid.UUID, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeUUID(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeUUID(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeUUID(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeUUID(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringUUIDNullableResponse(response uuid.UUID, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	json.EncodeUUID(e, response)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringUUIDNullableArrayResponse(response []uuid.UUID, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			json.EncodeUUID(e, elem)
		}
		for _, elem := range response[1:] {
			e.Comma()
			json.EncodeUUID(e, elem)
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeTestResponseStringUUIDNullableArrayArrayResponse(response [][]uuid.UUID, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := jx.GetWriter()
	defer jx.PutWriter(e)

	e.ArrStart()
	if len(response) >= 1 {
		// Encode first element without comma.
		{
			elem := response[0]
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeUUID(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeUUID(e, elem)
				}
			}
			e.ArrEnd()
		}
		for _, elem := range response[1:] {
			e.Comma()
			e.ArrStart()
			if len(elem) >= 1 {
				// Encode first element without comma.
				{
					elem := elem[0]
					json.EncodeUUID(e, elem)
				}
				for _, elem := range elem[1:] {
					e.Comma()
					json.EncodeUUID(e, elem)
				}
			}
			e.ArrEnd()
		}
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}
