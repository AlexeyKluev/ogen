// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	http.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/test_re"
			if l := len("/test_re"); len(elem) >= l && elem[0:l] == "/test_re" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleTestResponseAnyRequest([0]string{}, w, r)

				return
			}
			switch elem[0] {
			case 'q': // Prefix: "quest_"
				if l := len("quest_"); len(elem) >= l && elem[0:l] == "quest_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleTestRequestBooleanRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case 'A': // Prefix: "Any"
					if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestRequestAny
						s.handleTestRequestAnyRequest([0]string{}, w, r)

						return
					}
				case 'F': // Prefix: "FormatTest"
					if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestRequestFormatTest
						s.handleTestRequestFormatTestRequest([0]string{}, w, r)

						return
					}
				case 'b': // Prefix: "boolean"
					if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestRequestBooleanRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestBooleanNullableRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestBooleanArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestBooleanArrayArray
									s.handleTestRequestBooleanArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestBooleanNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestBooleanNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestBooleanNullableArrayArray
										s.handleTestRequestBooleanNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						}
					}
				case 'i': // Prefix: "integer"
					if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestRequestIntegerRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestIntegerInt32Request([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestIntegerArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestIntegerArrayArray
									s.handleTestRequestIntegerArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestIntegerInt64Request([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestIntegerInt32Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestIntegerInt32NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestIntegerInt32ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestIntegerInt32ArrayArray
												s.handleTestRequestIntegerInt32ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestIntegerInt32NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestIntegerInt32NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestIntegerInt32NullableArrayArray
													s.handleTestRequestIntegerInt32NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestIntegerInt64Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestIntegerInt64NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestIntegerInt64ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestIntegerInt64ArrayArray
												s.handleTestRequestIntegerInt64ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestIntegerInt64NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestIntegerInt64NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestIntegerInt64NullableArrayArray
													s.handleTestRequestIntegerInt64NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestIntegerNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestIntegerNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestIntegerNullableArrayArray
										s.handleTestRequestIntegerNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						}
					}
				case 'n': // Prefix: "number"
					if l := len("number"); len(elem) >= l && elem[0:l] == "number" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestRequestNumberRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestNumberDoubleRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestNumberArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestNumberArrayArray
									s.handleTestRequestNumberArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'd': // Prefix: "double"
							if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestNumberDoubleRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNumberDoubleNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberDoubleArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestNumberDoubleArrayArray
											s.handleTestRequestNumberDoubleArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberDoubleNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberDoubleNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberDoubleNullableArrayArray
												s.handleTestRequestNumberDoubleNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'f': // Prefix: "float"
							if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestNumberFloatRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNumberFloatNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberFloatArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestNumberFloatArrayArray
											s.handleTestRequestNumberFloatArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberFloatNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberFloatNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberFloatNullableArrayArray
												s.handleTestRequestNumberFloatNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestNumberInt64Request([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNumberInt32Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberInt32NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberInt32ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberInt32ArrayArray
												s.handleTestRequestNumberInt32ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberInt32NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestNumberInt32NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberInt32NullableArrayArray
													s.handleTestRequestNumberInt32NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNumberInt64Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberInt64NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberInt64ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberInt64ArrayArray
												s.handleTestRequestNumberInt64ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberInt64NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestNumberInt64NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberInt64NullableArrayArray
													s.handleTestRequestNumberInt64NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestNumberNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNumberNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestNumberNullableArrayArray
										s.handleTestRequestNumberNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						}
					}
				case 's': // Prefix: "string"
					if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestRequestStringRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestStringByteRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestStringArrayArray
									s.handleTestRequestStringArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'b': // Prefix: "byte"
							if l := len("byte"); len(elem) >= l && elem[0:l] == "byte" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringByteRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringByteNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringByteArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringByteArrayArray
											s.handleTestRequestStringByteArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringByteNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringByteNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringByteNullableArrayArray
												s.handleTestRequestStringByteNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'd': // Prefix: "d"
							if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringDurationRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "ate"
								if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringDateRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '-': // Prefix: "-time"
									if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringDateTimeRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringDateTimeNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringDateTimeArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDateTimeArrayArray
													s.handleTestRequestStringDateTimeArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringDateTimeNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestStringDateTimeNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringDateTimeNullableArrayArray
														s.handleTestRequestStringDateTimeNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringDateNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringDateArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringDateArrayArray
												s.handleTestRequestStringDateArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringDateNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringDateNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDateNullableArrayArray
													s.handleTestRequestStringDateNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uration"
								if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringDurationRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringDurationNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringDurationArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringDurationArrayArray
												s.handleTestRequestStringDurationArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringDurationNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringDurationNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDurationNullableArrayArray
													s.handleTestRequestStringDurationNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'i': // Prefix: "ip"
							if l := len("ip"); len(elem) >= l && elem[0:l] == "ip" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringIPRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringIPNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringIPArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringIPArrayArray
											s.handleTestRequestStringIPArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringIPNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringIPNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringIPNullableArrayArray
												s.handleTestRequestStringIPNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							case 'v': // Prefix: "v"
								if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringIpv6Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '4': // Prefix: "4"
									if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringIpv4Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringIpv4NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringIpv4ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringIpv4ArrayArray
													s.handleTestRequestStringIpv4ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringIpv4NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestStringIpv4NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringIpv4NullableArrayArray
														s.handleTestRequestStringIpv4NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "6"
									if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringIpv6Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringIpv6NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringIpv6ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringIpv6ArrayArray
													s.handleTestRequestStringIpv6ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringIpv6NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestStringIpv6NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringIpv6NullableArrayArray
														s.handleTestRequestStringIpv6NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestStringNullableArrayArray
										s.handleTestRequestStringNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						case 'p': // Prefix: "password"
							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringPasswordRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringPasswordNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringPasswordArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringPasswordArrayArray
											s.handleTestRequestStringPasswordArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringPasswordNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringPasswordNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringPasswordNullableArrayArray
												s.handleTestRequestStringPasswordNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 't': // Prefix: "time"
							if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringTimeRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringTimeNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringTimeArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringTimeArrayArray
											s.handleTestRequestStringTimeArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringTimeNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringTimeNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringTimeNullableArrayArray
												s.handleTestRequestStringTimeNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'u': // Prefix: "u"
							if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringUUIDRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'r': // Prefix: "ri"
								if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringURIRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringURINullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringURIArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringURIArrayArray
												s.handleTestRequestStringURIArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringURINullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringURINullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringURINullableArrayArray
													s.handleTestRequestStringURINullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uid"
								if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringUUIDRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringUUIDNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringUUIDArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringUUIDArrayArray
												s.handleTestRequestStringUUIDArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringUUIDNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringUUIDNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringUUIDNullableArrayArray
													s.handleTestRequestStringUUIDNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						}
					}
				}
			case 's': // Prefix: "sponse_"
				if l := len("sponse_"); len(elem) >= l && elem[0:l] == "sponse_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleTestResponseBooleanRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case 'A': // Prefix: "Any"
					if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestResponseAny
						s.handleTestResponseAnyRequest([0]string{}, w, r)

						return
					}
				case 'F': // Prefix: "FormatTest"
					if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestResponseFormatTest
						s.handleTestResponseFormatTestRequest([0]string{}, w, r)

						return
					}
				case 'b': // Prefix: "boolean"
					if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestResponseBooleanRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestResponseBooleanNullableRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseBooleanArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseBooleanArrayArray
									s.handleTestResponseBooleanArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseBooleanNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseBooleanNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseBooleanNullableArrayArray
										s.handleTestResponseBooleanNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						}
					}
				case 'i': // Prefix: "integer"
					if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestResponseIntegerRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestResponseIntegerInt32Request([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseIntegerArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseIntegerArrayArray
									s.handleTestResponseIntegerArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseIntegerInt64Request([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseIntegerInt32Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseIntegerInt32NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseIntegerInt32ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseIntegerInt32ArrayArray
												s.handleTestResponseIntegerInt32ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseIntegerInt32NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseIntegerInt32NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseIntegerInt32NullableArrayArray
													s.handleTestResponseIntegerInt32NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseIntegerInt64Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseIntegerInt64NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseIntegerInt64ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseIntegerInt64ArrayArray
												s.handleTestResponseIntegerInt64ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseIntegerInt64NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseIntegerInt64NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseIntegerInt64NullableArrayArray
													s.handleTestResponseIntegerInt64NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseIntegerNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseIntegerNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseIntegerNullableArrayArray
										s.handleTestResponseIntegerNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						}
					}
				case 'n': // Prefix: "number"
					if l := len("number"); len(elem) >= l && elem[0:l] == "number" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestResponseNumberRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestResponseNumberDoubleRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseNumberArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseNumberArrayArray
									s.handleTestResponseNumberArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'd': // Prefix: "double"
							if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseNumberDoubleRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNumberDoubleNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberDoubleArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseNumberDoubleArrayArray
											s.handleTestResponseNumberDoubleArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberDoubleNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberDoubleNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberDoubleNullableArrayArray
												s.handleTestResponseNumberDoubleNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'f': // Prefix: "float"
							if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseNumberFloatRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNumberFloatNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberFloatArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseNumberFloatArrayArray
											s.handleTestResponseNumberFloatArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberFloatNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberFloatNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberFloatNullableArrayArray
												s.handleTestResponseNumberFloatNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseNumberInt64Request([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNumberInt32Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberInt32NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberInt32ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberInt32ArrayArray
												s.handleTestResponseNumberInt32ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberInt32NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseNumberInt32NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberInt32NullableArrayArray
													s.handleTestResponseNumberInt32NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNumberInt64Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberInt64NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberInt64ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberInt64ArrayArray
												s.handleTestResponseNumberInt64ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberInt64NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseNumberInt64NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberInt64NullableArrayArray
													s.handleTestResponseNumberInt64NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseNumberNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNumberNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseNumberNullableArrayArray
										s.handleTestResponseNumberNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						}
					}
				case 's': // Prefix: "string"
					if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestResponseStringRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestResponseStringByteRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseStringArrayArray
									s.handleTestResponseStringArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'b': // Prefix: "byte"
							if l := len("byte"); len(elem) >= l && elem[0:l] == "byte" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringByteRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringByteNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringByteArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringByteArrayArray
											s.handleTestResponseStringByteArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringByteNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringByteNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringByteNullableArrayArray
												s.handleTestResponseStringByteNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'd': // Prefix: "d"
							if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringDurationRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "ate"
								if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringDateRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '-': // Prefix: "-time"
									if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringDateTimeRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringDateTimeNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringDateTimeArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDateTimeArrayArray
													s.handleTestResponseStringDateTimeArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringDateTimeNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestResponseStringDateTimeNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringDateTimeNullableArrayArray
														s.handleTestResponseStringDateTimeNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringDateNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringDateArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringDateArrayArray
												s.handleTestResponseStringDateArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringDateNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringDateNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDateNullableArrayArray
													s.handleTestResponseStringDateNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uration"
								if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringDurationRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringDurationNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringDurationArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringDurationArrayArray
												s.handleTestResponseStringDurationArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringDurationNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringDurationNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDurationNullableArrayArray
													s.handleTestResponseStringDurationNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'i': // Prefix: "ip"
							if l := len("ip"); len(elem) >= l && elem[0:l] == "ip" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringIPRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringIPNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringIPArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringIPArrayArray
											s.handleTestResponseStringIPArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringIPNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringIPNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringIPNullableArrayArray
												s.handleTestResponseStringIPNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							case 'v': // Prefix: "v"
								if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringIpv6Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '4': // Prefix: "4"
									if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringIpv4Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringIpv4NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringIpv4ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringIpv4ArrayArray
													s.handleTestResponseStringIpv4ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringIpv4NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestResponseStringIpv4NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringIpv4NullableArrayArray
														s.handleTestResponseStringIpv4NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "6"
									if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringIpv6Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringIpv6NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringIpv6ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringIpv6ArrayArray
													s.handleTestResponseStringIpv6ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringIpv6NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestResponseStringIpv6NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringIpv6NullableArrayArray
														s.handleTestResponseStringIpv6NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseStringNullableArrayArray
										s.handleTestResponseStringNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						case 'p': // Prefix: "password"
							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringPasswordRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringPasswordNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringPasswordArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringPasswordArrayArray
											s.handleTestResponseStringPasswordArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringPasswordNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringPasswordNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringPasswordNullableArrayArray
												s.handleTestResponseStringPasswordNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 't': // Prefix: "time"
							if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringTimeRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringTimeNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringTimeArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringTimeArrayArray
											s.handleTestResponseStringTimeArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringTimeNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringTimeNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringTimeNullableArrayArray
												s.handleTestResponseStringTimeNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'u': // Prefix: "u"
							if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringUUIDRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'r': // Prefix: "ri"
								if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringURIRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringURINullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringURIArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringURIArrayArray
												s.handleTestResponseStringURIArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringURINullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringURINullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringURINullableArrayArray
													s.handleTestResponseStringURINullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uid"
								if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringUUIDRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringUUIDNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringUUIDArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringUUIDArrayArray
												s.handleTestResponseStringUUIDArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringUUIDNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringUUIDNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringUUIDNullableArrayArray
													s.handleTestResponseStringUUIDNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name  string
	count int
	args  [0]string
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.name
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [0]string{}
		elem = path
	)
	r.args = args

	// Static code generated router with unwrapped path search.
	switch method {
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/test_re"
			if l := len("/test_re"); len(elem) >= l && elem[0:l] == "/test_re" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "TestResponseAny"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case 'q': // Prefix: "quest_"
				if l := len("quest_"); len(elem) >= l && elem[0:l] == "quest_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "TestRequestBoolean"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case 'A': // Prefix: "Any"
					if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestRequestAny
						r.name = "TestRequestAny"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'F': // Prefix: "FormatTest"
					if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestRequestFormatTest
						r.name = "TestRequestFormatTest"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'b': // Prefix: "boolean"
					if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestRequestBoolean"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestBooleanNullable"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestBooleanArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestBooleanArrayArray
									r.name = "TestRequestBooleanArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestBooleanNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestBooleanNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestBooleanNullableArrayArray
										r.name = "TestRequestBooleanNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						}
					}
				case 'i': // Prefix: "integer"
					if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestRequestInteger"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestIntegerInt32"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestIntegerArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestIntegerArrayArray
									r.name = "TestRequestIntegerArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestIntegerInt64"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestIntegerInt32"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestIntegerInt32Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestIntegerInt32Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestIntegerInt32ArrayArray
												r.name = "TestRequestIntegerInt32ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestIntegerInt32Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestIntegerInt32NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestIntegerInt32NullableArrayArray
													r.name = "TestRequestIntegerInt32NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestIntegerInt64"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestIntegerInt64Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestIntegerInt64Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestIntegerInt64ArrayArray
												r.name = "TestRequestIntegerInt64ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestIntegerInt64Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestIntegerInt64NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestIntegerInt64NullableArrayArray
													r.name = "TestRequestIntegerInt64NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestIntegerNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestIntegerNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestIntegerNullableArrayArray
										r.name = "TestRequestIntegerNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						}
					}
				case 'n': // Prefix: "number"
					if l := len("number"); len(elem) >= l && elem[0:l] == "number" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestRequestNumber"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestNumberDouble"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestNumberArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestNumberArrayArray
									r.name = "TestRequestNumberArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'd': // Prefix: "double"
							if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestNumberDouble"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNumberDoubleNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberDoubleArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestNumberDoubleArrayArray
											r.name = "TestRequestNumberDoubleArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberDoubleNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberDoubleNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberDoubleNullableArrayArray
												r.name = "TestRequestNumberDoubleNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'f': // Prefix: "float"
							if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestNumberFloat"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNumberFloatNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberFloatArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestNumberFloatArrayArray
											r.name = "TestRequestNumberFloatArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberFloatNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberFloatNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberFloatNullableArrayArray
												r.name = "TestRequestNumberFloatNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestNumberInt64"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNumberInt32"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberInt32Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberInt32Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberInt32ArrayArray
												r.name = "TestRequestNumberInt32ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberInt32Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestNumberInt32NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberInt32NullableArrayArray
													r.name = "TestRequestNumberInt32NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNumberInt64"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberInt64Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberInt64Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberInt64ArrayArray
												r.name = "TestRequestNumberInt64ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberInt64Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestNumberInt64NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberInt64NullableArrayArray
													r.name = "TestRequestNumberInt64NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestNumberNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNumberNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestNumberNullableArrayArray
										r.name = "TestRequestNumberNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						}
					}
				case 's': // Prefix: "string"
					if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestRequestString"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestStringByte"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestStringArrayArray
									r.name = "TestRequestStringArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'b': // Prefix: "byte"
							if l := len("byte"); len(elem) >= l && elem[0:l] == "byte" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringByte"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringByteNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringByteArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringByteArrayArray
											r.name = "TestRequestStringByteArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringByteNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringByteNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringByteNullableArrayArray
												r.name = "TestRequestStringByteNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'd': // Prefix: "d"
							if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringDuration"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "ate"
								if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringDate"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '-': // Prefix: "-time"
									if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringDateTime"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringDateTimeNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringDateTimeArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDateTimeArrayArray
													r.name = "TestRequestStringDateTimeArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringDateTimeNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestStringDateTimeNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringDateTimeNullableArrayArray
														r.name = "TestRequestStringDateTimeNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringDateNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringDateArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringDateArrayArray
												r.name = "TestRequestStringDateArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringDateNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringDateNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDateNullableArrayArray
													r.name = "TestRequestStringDateNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uration"
								if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringDuration"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringDurationNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringDurationArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringDurationArrayArray
												r.name = "TestRequestStringDurationArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringDurationNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringDurationNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDurationNullableArrayArray
													r.name = "TestRequestStringDurationNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'i': // Prefix: "ip"
							if l := len("ip"); len(elem) >= l && elem[0:l] == "ip" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringIP"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringIPNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringIPArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringIPArrayArray
											r.name = "TestRequestStringIPArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringIPNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringIPNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringIPNullableArrayArray
												r.name = "TestRequestStringIPNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							case 'v': // Prefix: "v"
								if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringIpv6"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '4': // Prefix: "4"
									if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringIpv4"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringIpv4Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringIpv4Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringIpv4ArrayArray
													r.name = "TestRequestStringIpv4ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringIpv4Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestStringIpv4NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringIpv4NullableArrayArray
														r.name = "TestRequestStringIpv4NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '6': // Prefix: "6"
									if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringIpv6"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringIpv6Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringIpv6Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringIpv6ArrayArray
													r.name = "TestRequestStringIpv6ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringIpv6Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestStringIpv6NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringIpv6NullableArrayArray
														r.name = "TestRequestStringIpv6NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestStringNullableArrayArray
										r.name = "TestRequestStringNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						case 'p': // Prefix: "password"
							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringPassword"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringPasswordNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringPasswordArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringPasswordArrayArray
											r.name = "TestRequestStringPasswordArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringPasswordNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringPasswordNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringPasswordNullableArrayArray
												r.name = "TestRequestStringPasswordNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 't': // Prefix: "time"
							if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringTime"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringTimeNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringTimeArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringTimeArrayArray
											r.name = "TestRequestStringTimeArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringTimeNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringTimeNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringTimeNullableArrayArray
												r.name = "TestRequestStringTimeNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'u': // Prefix: "u"
							if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringUUID"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'r': // Prefix: "ri"
								if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringURI"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringURINullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringURIArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringURIArrayArray
												r.name = "TestRequestStringURIArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringURINullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringURINullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringURINullableArrayArray
													r.name = "TestRequestStringURINullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uid"
								if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringUUID"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringUUIDNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringUUIDArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringUUIDArrayArray
												r.name = "TestRequestStringUUIDArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringUUIDNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringUUIDNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringUUIDNullableArrayArray
													r.name = "TestRequestStringUUIDNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						}
					}
				}
			case 's': // Prefix: "sponse_"
				if l := len("sponse_"); len(elem) >= l && elem[0:l] == "sponse_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "TestResponseBoolean"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case 'A': // Prefix: "Any"
					if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestResponseAny
						r.name = "TestResponseAny"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'F': // Prefix: "FormatTest"
					if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestResponseFormatTest
						r.name = "TestResponseFormatTest"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'b': // Prefix: "boolean"
					if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestResponseBoolean"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestResponseBooleanNullable"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseBooleanArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseBooleanArrayArray
									r.name = "TestResponseBooleanArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseBooleanNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseBooleanNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseBooleanNullableArrayArray
										r.name = "TestResponseBooleanNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						}
					}
				case 'i': // Prefix: "integer"
					if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestResponseInteger"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestResponseIntegerInt32"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseIntegerArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseIntegerArrayArray
									r.name = "TestResponseIntegerArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseIntegerInt64"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseIntegerInt32"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseIntegerInt32Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseIntegerInt32Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseIntegerInt32ArrayArray
												r.name = "TestResponseIntegerInt32ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseIntegerInt32Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseIntegerInt32NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseIntegerInt32NullableArrayArray
													r.name = "TestResponseIntegerInt32NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseIntegerInt64"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseIntegerInt64Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseIntegerInt64Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseIntegerInt64ArrayArray
												r.name = "TestResponseIntegerInt64ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseIntegerInt64Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseIntegerInt64NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseIntegerInt64NullableArrayArray
													r.name = "TestResponseIntegerInt64NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseIntegerNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseIntegerNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseIntegerNullableArrayArray
										r.name = "TestResponseIntegerNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						}
					}
				case 'n': // Prefix: "number"
					if l := len("number"); len(elem) >= l && elem[0:l] == "number" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestResponseNumber"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestResponseNumberDouble"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseNumberArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseNumberArrayArray
									r.name = "TestResponseNumberArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'd': // Prefix: "double"
							if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseNumberDouble"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNumberDoubleNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberDoubleArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseNumberDoubleArrayArray
											r.name = "TestResponseNumberDoubleArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberDoubleNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberDoubleNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberDoubleNullableArrayArray
												r.name = "TestResponseNumberDoubleNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'f': // Prefix: "float"
							if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseNumberFloat"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNumberFloatNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberFloatArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseNumberFloatArrayArray
											r.name = "TestResponseNumberFloatArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberFloatNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberFloatNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberFloatNullableArrayArray
												r.name = "TestResponseNumberFloatNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseNumberInt64"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNumberInt32"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberInt32Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberInt32Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberInt32ArrayArray
												r.name = "TestResponseNumberInt32ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberInt32Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseNumberInt32NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberInt32NullableArrayArray
													r.name = "TestResponseNumberInt32NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNumberInt64"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberInt64Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberInt64Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberInt64ArrayArray
												r.name = "TestResponseNumberInt64ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberInt64Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseNumberInt64NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberInt64NullableArrayArray
													r.name = "TestResponseNumberInt64NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseNumberNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNumberNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseNumberNullableArrayArray
										r.name = "TestResponseNumberNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						}
					}
				case 's': // Prefix: "string"
					if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestResponseString"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestResponseStringByte"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseStringArrayArray
									r.name = "TestResponseStringArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'b': // Prefix: "byte"
							if l := len("byte"); len(elem) >= l && elem[0:l] == "byte" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringByte"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringByteNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringByteArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringByteArrayArray
											r.name = "TestResponseStringByteArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringByteNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringByteNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringByteNullableArrayArray
												r.name = "TestResponseStringByteNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'd': // Prefix: "d"
							if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringDuration"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "ate"
								if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringDate"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '-': // Prefix: "-time"
									if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringDateTime"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringDateTimeNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringDateTimeArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDateTimeArrayArray
													r.name = "TestResponseStringDateTimeArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringDateTimeNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestResponseStringDateTimeNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringDateTimeNullableArrayArray
														r.name = "TestResponseStringDateTimeNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringDateNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringDateArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringDateArrayArray
												r.name = "TestResponseStringDateArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringDateNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringDateNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDateNullableArrayArray
													r.name = "TestResponseStringDateNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uration"
								if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringDuration"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringDurationNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringDurationArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringDurationArrayArray
												r.name = "TestResponseStringDurationArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringDurationNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringDurationNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDurationNullableArrayArray
													r.name = "TestResponseStringDurationNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'i': // Prefix: "ip"
							if l := len("ip"); len(elem) >= l && elem[0:l] == "ip" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringIP"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringIPNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringIPArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringIPArrayArray
											r.name = "TestResponseStringIPArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringIPNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringIPNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringIPNullableArrayArray
												r.name = "TestResponseStringIPNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							case 'v': // Prefix: "v"
								if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringIpv6"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '4': // Prefix: "4"
									if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringIpv4"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringIpv4Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringIpv4Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringIpv4ArrayArray
													r.name = "TestResponseStringIpv4ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringIpv4Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestResponseStringIpv4NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringIpv4NullableArrayArray
														r.name = "TestResponseStringIpv4NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '6': // Prefix: "6"
									if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringIpv6"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringIpv6Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringIpv6Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringIpv6ArrayArray
													r.name = "TestResponseStringIpv6ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringIpv6Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestResponseStringIpv6NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringIpv6NullableArrayArray
														r.name = "TestResponseStringIpv6NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseStringNullableArrayArray
										r.name = "TestResponseStringNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						case 'p': // Prefix: "password"
							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringPassword"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringPasswordNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringPasswordArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringPasswordArrayArray
											r.name = "TestResponseStringPasswordArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringPasswordNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringPasswordNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringPasswordNullableArrayArray
												r.name = "TestResponseStringPasswordNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 't': // Prefix: "time"
							if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringTime"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringTimeNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringTimeArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringTimeArrayArray
											r.name = "TestResponseStringTimeArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringTimeNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringTimeNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringTimeNullableArrayArray
												r.name = "TestResponseStringTimeNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'u': // Prefix: "u"
							if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringUUID"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'r': // Prefix: "ri"
								if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringURI"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringURINullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringURIArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringURIArrayArray
												r.name = "TestResponseStringURIArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringURINullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringURINullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringURINullableArrayArray
													r.name = "TestResponseStringURINullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uid"
								if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringUUID"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringUUIDNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringUUIDArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringUUIDArrayArray
												r.name = "TestResponseStringUUIDArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringUUIDNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringUUIDNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringUUIDNullableArrayArray
													r.name = "TestResponseStringUUIDNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
