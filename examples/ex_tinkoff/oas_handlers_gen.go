// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

// HandleMarketBondsGetRequest handles  operation.
//
// GET /market/bonds
func (s *Server) handleMarketBondsGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `MarketBondsGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()

	response, err := s.h.MarketBondsGet(ctx)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeMarketBondsGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleMarketCandlesGetRequest handles  operation.
//
// GET /market/candles
func (s *Server) handleMarketCandlesGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `MarketCandlesGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeMarketCandlesGetParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.MarketCandlesGet(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeMarketCandlesGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleMarketCurrenciesGetRequest handles  operation.
//
// GET /market/currencies
func (s *Server) handleMarketCurrenciesGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `MarketCurrenciesGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()

	response, err := s.h.MarketCurrenciesGet(ctx)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeMarketCurrenciesGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleMarketEtfsGetRequest handles  operation.
//
// GET /market/etfs
func (s *Server) handleMarketEtfsGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `MarketEtfsGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()

	response, err := s.h.MarketEtfsGet(ctx)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeMarketEtfsGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleMarketOrderbookGetRequest handles  operation.
//
// GET /market/orderbook
func (s *Server) handleMarketOrderbookGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `MarketOrderbookGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeMarketOrderbookGetParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.MarketOrderbookGet(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeMarketOrderbookGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleMarketSearchByFigiGetRequest handles  operation.
//
// GET /market/search/by-figi
func (s *Server) handleMarketSearchByFigiGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `MarketSearchByFigiGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeMarketSearchByFigiGetParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.MarketSearchByFigiGet(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeMarketSearchByFigiGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleMarketSearchByTickerGetRequest handles  operation.
//
// GET /market/search/by-ticker
func (s *Server) handleMarketSearchByTickerGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `MarketSearchByTickerGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeMarketSearchByTickerGetParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.MarketSearchByTickerGet(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeMarketSearchByTickerGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleMarketStocksGetRequest handles  operation.
//
// GET /market/stocks
func (s *Server) handleMarketStocksGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `MarketStocksGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()

	response, err := s.h.MarketStocksGet(ctx)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeMarketStocksGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleOperationsGetRequest handles  operation.
//
// GET /operations
func (s *Server) handleOperationsGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `OperationsGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeOperationsGetParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.OperationsGet(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeOperationsGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleOrdersCancelPostRequest handles  operation.
//
// POST /orders/cancel
func (s *Server) handleOrdersCancelPostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `OrdersCancelPost`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeOrdersCancelPostParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.OrdersCancelPost(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeOrdersCancelPostResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleOrdersGetRequest handles  operation.
//
// GET /orders
func (s *Server) handleOrdersGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `OrdersGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeOrdersGetParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.OrdersGet(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeOrdersGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleOrdersLimitOrderPostRequest handles  operation.
//
// POST /orders/limit-order
func (s *Server) handleOrdersLimitOrderPostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `OrdersLimitOrderPost`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeOrdersLimitOrderPostParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}
	request, err := decodeOrdersLimitOrderPostRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.OrdersLimitOrderPost(ctx, request, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeOrdersLimitOrderPostResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleOrdersMarketOrderPostRequest handles  operation.
//
// POST /orders/market-order
func (s *Server) handleOrdersMarketOrderPostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `OrdersMarketOrderPost`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeOrdersMarketOrderPostParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}
	request, err := decodeOrdersMarketOrderPostRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.OrdersMarketOrderPost(ctx, request, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeOrdersMarketOrderPostResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandlePortfolioCurrenciesGetRequest handles  operation.
//
// GET /portfolio/currencies
func (s *Server) handlePortfolioCurrenciesGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `PortfolioCurrenciesGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodePortfolioCurrenciesGetParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.PortfolioCurrenciesGet(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodePortfolioCurrenciesGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandlePortfolioGetRequest handles  operation.
//
// GET /portfolio
func (s *Server) handlePortfolioGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `PortfolioGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodePortfolioGetParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.PortfolioGet(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodePortfolioGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleSandboxClearPostRequest handles  operation.
//
// POST /sandbox/clear
func (s *Server) handleSandboxClearPostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SandboxClearPost`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeSandboxClearPostParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.SandboxClearPost(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSandboxClearPostResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleSandboxCurrenciesBalancePostRequest handles  operation.
//
// POST /sandbox/currencies/balance
func (s *Server) handleSandboxCurrenciesBalancePostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SandboxCurrenciesBalancePost`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeSandboxCurrenciesBalancePostParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}
	request, err := decodeSandboxCurrenciesBalancePostRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.SandboxCurrenciesBalancePost(ctx, request, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSandboxCurrenciesBalancePostResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleSandboxPositionsBalancePostRequest handles  operation.
//
// POST /sandbox/positions/balance
func (s *Server) handleSandboxPositionsBalancePostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SandboxPositionsBalancePost`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeSandboxPositionsBalancePostParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}
	request, err := decodeSandboxPositionsBalancePostRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.SandboxPositionsBalancePost(ctx, request, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSandboxPositionsBalancePostResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleSandboxRegisterPostRequest handles  operation.
//
// POST /sandbox/register
func (s *Server) handleSandboxRegisterPostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SandboxRegisterPost`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSandboxRegisterPostRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.SandboxRegisterPost(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSandboxRegisterPostResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleSandboxRemovePostRequest handles  operation.
//
// POST /sandbox/remove
func (s *Server) handleSandboxRemovePostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SandboxRemovePost`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	params, err := decodeSandboxRemovePostParams(args, r)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.h.SandboxRemovePost(ctx, params)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSandboxRemovePostResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

// HandleUserAccountsGetRequest handles  operation.
//
// GET /user/accounts
func (s *Server) handleUserAccountsGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `UserAccountsGet`,
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()

	response, err := s.h.UserAccountsGet(ctx)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeUserAccountsGetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func respondError(w http.ResponseWriter, code int, err error) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	data, writeErr := json.Marshal(struct {
		ErrorMessage string `json:"error_message"`
	}{
		ErrorMessage: err.Error(),
	})
	if writeErr == nil {
		w.Write(data)
	}
}
