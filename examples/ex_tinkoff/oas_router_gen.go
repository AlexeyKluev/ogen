// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	http.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	args := map[string]string{}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleOperationsGetRequest(args, w, r)
				return
			}
			switch elem[0] {
			case 'm': // Prefix: "market/"
				if l := len("market/"); len(elem) >= l && elem[0:l] == "market/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleMarketCandlesGetRequest(args, w, r)
					return
				}
				switch elem[0] {
				case 'b': // Prefix: "bonds"
					if l := len("bonds"); len(elem) >= l && elem[0:l] == "bonds" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: MarketBondsGet
						s.handleMarketBondsGetRequest(args, w, r)
						return
					}
				case 'c': // Prefix: "c"
					if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleMarketCurrenciesGetRequest(args, w, r)
						return
					}
					switch elem[0] {
					case 'a': // Prefix: "andles"
						if l := len("andles"); len(elem) >= l && elem[0:l] == "andles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: MarketCandlesGet
							s.handleMarketCandlesGetRequest(args, w, r)
							return
						}
					case 'u': // Prefix: "urrencies"
						if l := len("urrencies"); len(elem) >= l && elem[0:l] == "urrencies" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: MarketCurrenciesGet
							s.handleMarketCurrenciesGetRequest(args, w, r)
							return
						}
					}
				case 'e': // Prefix: "etfs"
					if l := len("etfs"); len(elem) >= l && elem[0:l] == "etfs" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: MarketEtfsGet
						s.handleMarketEtfsGetRequest(args, w, r)
						return
					}
				case 'o': // Prefix: "orderbook"
					if l := len("orderbook"); len(elem) >= l && elem[0:l] == "orderbook" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: MarketOrderbookGet
						s.handleMarketOrderbookGetRequest(args, w, r)
						return
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleMarketStocksGetRequest(args, w, r)
						return
					}
					switch elem[0] {
					case 'e': // Prefix: "earch/by-"
						if l := len("earch/by-"); len(elem) >= l && elem[0:l] == "earch/by-" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleMarketSearchByTickerGetRequest(args, w, r)
							return
						}
						switch elem[0] {
						case 'f': // Prefix: "figi"
							if l := len("figi"); len(elem) >= l && elem[0:l] == "figi" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: MarketSearchByFigiGet
								s.handleMarketSearchByFigiGetRequest(args, w, r)
								return
							}
						case 't': // Prefix: "ticker"
							if l := len("ticker"); len(elem) >= l && elem[0:l] == "ticker" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: MarketSearchByTickerGet
								s.handleMarketSearchByTickerGetRequest(args, w, r)
								return
							}
						}
					case 't': // Prefix: "tocks"
						if l := len("tocks"); len(elem) >= l && elem[0:l] == "tocks" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: MarketStocksGet
							s.handleMarketStocksGetRequest(args, w, r)
							return
						}
					}
				}
			case 'o': // Prefix: "o"
				if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleOrdersGetRequest(args, w, r)
					return
				}
				switch elem[0] {
				case 'p': // Prefix: "perations"
					if l := len("perations"); len(elem) >= l && elem[0:l] == "perations" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: OperationsGet
						s.handleOperationsGetRequest(args, w, r)
						return
					}
				case 'r': // Prefix: "rders"
					if l := len("rders"); len(elem) >= l && elem[0:l] == "rders" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: OrdersGet
						s.handleOrdersGetRequest(args, w, r)
						return
					}
				}
			case 'p': // Prefix: "portfolio"
				if l := len("portfolio"); len(elem) >= l && elem[0:l] == "portfolio" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handlePortfolioGetRequest(args, w, r)
					return
				}
				switch elem[0] {
				case '/': // Prefix: "/currencies"
					if l := len("/currencies"); len(elem) >= l && elem[0:l] == "/currencies" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: PortfolioCurrenciesGet
						s.handlePortfolioCurrenciesGetRequest(args, w, r)
						return
					}
				}
			case 'u': // Prefix: "user/accounts"
				if l := len("user/accounts"); len(elem) >= l && elem[0:l] == "user/accounts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: UserAccountsGet
					s.handleUserAccountsGetRequest(args, w, r)
					return
				}
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleSandboxClearPostRequest(args, w, r)
				return
			}
			switch elem[0] {
			case 'o': // Prefix: "orders/"
				if l := len("orders/"); len(elem) >= l && elem[0:l] == "orders/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleOrdersLimitOrderPostRequest(args, w, r)
					return
				}
				switch elem[0] {
				case 'c': // Prefix: "cancel"
					if l := len("cancel"); len(elem) >= l && elem[0:l] == "cancel" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: OrdersCancelPost
						s.handleOrdersCancelPostRequest(args, w, r)
						return
					}
				case 'l': // Prefix: "limit-order"
					if l := len("limit-order"); len(elem) >= l && elem[0:l] == "limit-order" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: OrdersLimitOrderPost
						s.handleOrdersLimitOrderPostRequest(args, w, r)
						return
					}
				case 'm': // Prefix: "market-order"
					if l := len("market-order"); len(elem) >= l && elem[0:l] == "market-order" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: OrdersMarketOrderPost
						s.handleOrdersMarketOrderPostRequest(args, w, r)
						return
					}
				}
			case 's': // Prefix: "sandbox/"
				if l := len("sandbox/"); len(elem) >= l && elem[0:l] == "sandbox/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleSandboxPositionsBalancePostRequest(args, w, r)
					return
				}
				switch elem[0] {
				case 'c': // Prefix: "c"
					if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleSandboxCurrenciesBalancePostRequest(args, w, r)
						return
					}
					switch elem[0] {
					case 'l': // Prefix: "lear"
						if l := len("lear"); len(elem) >= l && elem[0:l] == "lear" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: SandboxClearPost
							s.handleSandboxClearPostRequest(args, w, r)
							return
						}
					case 'u': // Prefix: "urrencies/balance"
						if l := len("urrencies/balance"); len(elem) >= l && elem[0:l] == "urrencies/balance" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: SandboxCurrenciesBalancePost
							s.handleSandboxCurrenciesBalancePostRequest(args, w, r)
							return
						}
					}
				case 'p': // Prefix: "positions/balance"
					if l := len("positions/balance"); len(elem) >= l && elem[0:l] == "positions/balance" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: SandboxPositionsBalancePost
						s.handleSandboxPositionsBalancePostRequest(args, w, r)
						return
					}
				case 'r': // Prefix: "re"
					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleSandboxRemovePostRequest(args, w, r)
						return
					}
					switch elem[0] {
					case 'g': // Prefix: "gister"
						if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: SandboxRegisterPost
							s.handleSandboxRegisterPostRequest(args, w, r)
							return
						}
					case 'm': // Prefix: "move"
						if l := len("move"); len(elem) >= l && elem[0:l] == "move" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: SandboxRemovePost
							s.handleSandboxRemovePostRequest(args, w, r)
							return
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}
