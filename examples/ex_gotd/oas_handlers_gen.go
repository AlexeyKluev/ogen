// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-faster/errors"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func (s *HTTPServer) HandleAddStickerToSetRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `AddStickerToSet`,
		trace.WithAttributes(otelogen.OperationID(`addStickerToSet`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeAddStickerToSetRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.AddStickerToSet(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeAddStickerToSetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleAnswerCallbackQueryRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `AnswerCallbackQuery`,
		trace.WithAttributes(otelogen.OperationID(`answerCallbackQuery`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeAnswerCallbackQueryRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.AnswerCallbackQuery(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeAnswerCallbackQueryResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleAnswerInlineQueryRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `AnswerInlineQuery`,
		trace.WithAttributes(otelogen.OperationID(`answerInlineQuery`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeAnswerInlineQueryRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.AnswerInlineQuery(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeAnswerInlineQueryResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleAnswerPreCheckoutQueryRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `AnswerPreCheckoutQuery`,
		trace.WithAttributes(otelogen.OperationID(`answerPreCheckoutQuery`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeAnswerPreCheckoutQueryRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.AnswerPreCheckoutQuery(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeAnswerPreCheckoutQueryResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleAnswerShippingQueryRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `AnswerShippingQuery`,
		trace.WithAttributes(otelogen.OperationID(`answerShippingQuery`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeAnswerShippingQueryRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.AnswerShippingQuery(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeAnswerShippingQueryResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleBanChatMemberRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `BanChatMember`,
		trace.WithAttributes(otelogen.OperationID(`banChatMember`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeBanChatMemberRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.BanChatMember(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeBanChatMemberResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleCopyMessageRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `CopyMessage`,
		trace.WithAttributes(otelogen.OperationID(`copyMessage`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeCopyMessageRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.CopyMessage(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeCopyMessageResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleCreateChatInviteLinkRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `CreateChatInviteLink`,
		trace.WithAttributes(otelogen.OperationID(`createChatInviteLink`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeCreateChatInviteLinkRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.CreateChatInviteLink(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeCreateChatInviteLinkResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleCreateNewStickerSetRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `CreateNewStickerSet`,
		trace.WithAttributes(otelogen.OperationID(`createNewStickerSet`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeCreateNewStickerSetRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.CreateNewStickerSet(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeCreateNewStickerSetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleDeleteChatPhotoRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `DeleteChatPhoto`,
		trace.WithAttributes(otelogen.OperationID(`deleteChatPhoto`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeDeleteChatPhotoRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.DeleteChatPhoto(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeDeleteChatPhotoResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleDeleteChatStickerSetRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `DeleteChatStickerSet`,
		trace.WithAttributes(otelogen.OperationID(`deleteChatStickerSet`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeDeleteChatStickerSetRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.DeleteChatStickerSet(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeDeleteChatStickerSetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleDeleteMessageRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `DeleteMessage`,
		trace.WithAttributes(otelogen.OperationID(`deleteMessage`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeDeleteMessageRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.DeleteMessage(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeDeleteMessageResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleDeleteMyCommandsRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `DeleteMyCommands`,
		trace.WithAttributes(otelogen.OperationID(`deleteMyCommands`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeDeleteMyCommandsRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.DeleteMyCommands(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeDeleteMyCommandsResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleDeleteStickerFromSetRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `DeleteStickerFromSet`,
		trace.WithAttributes(otelogen.OperationID(`deleteStickerFromSet`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeDeleteStickerFromSetRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.DeleteStickerFromSet(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeDeleteStickerFromSetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleDeleteWebhookRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `DeleteWebhook`,
		trace.WithAttributes(otelogen.OperationID(`deleteWebhook`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeDeleteWebhookRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.DeleteWebhook(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeDeleteWebhookResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleEditChatInviteLinkRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `EditChatInviteLink`,
		trace.WithAttributes(otelogen.OperationID(`editChatInviteLink`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeEditChatInviteLinkRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.EditChatInviteLink(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeEditChatInviteLinkResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleEditMessageCaptionRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `EditMessageCaption`,
		trace.WithAttributes(otelogen.OperationID(`editMessageCaption`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeEditMessageCaptionRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.EditMessageCaption(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeEditMessageCaptionResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleEditMessageLiveLocationRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `EditMessageLiveLocation`,
		trace.WithAttributes(otelogen.OperationID(`editMessageLiveLocation`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeEditMessageLiveLocationRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.EditMessageLiveLocation(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeEditMessageLiveLocationResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleEditMessageMediaRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `EditMessageMedia`,
		trace.WithAttributes(otelogen.OperationID(`editMessageMedia`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeEditMessageMediaRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.EditMessageMedia(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeEditMessageMediaResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleEditMessageReplyMarkupRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `EditMessageReplyMarkup`,
		trace.WithAttributes(otelogen.OperationID(`editMessageReplyMarkup`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeEditMessageReplyMarkupRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.EditMessageReplyMarkup(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeEditMessageReplyMarkupResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleEditMessageTextRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `EditMessageText`,
		trace.WithAttributes(otelogen.OperationID(`editMessageText`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeEditMessageTextRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.EditMessageText(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeEditMessageTextResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleExportChatInviteLinkRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `ExportChatInviteLink`,
		trace.WithAttributes(otelogen.OperationID(`exportChatInviteLink`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeExportChatInviteLinkRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.ExportChatInviteLink(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeExportChatInviteLinkResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleForwardMessageRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `ForwardMessage`,
		trace.WithAttributes(otelogen.OperationID(`forwardMessage`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeForwardMessageRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.ForwardMessage(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeForwardMessageResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetChatRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetChat`,
		trace.WithAttributes(otelogen.OperationID(`getChat`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeGetChatRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.GetChat(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetChatResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetChatAdministratorsRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetChatAdministrators`,
		trace.WithAttributes(otelogen.OperationID(`getChatAdministrators`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeGetChatAdministratorsRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.GetChatAdministrators(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetChatAdministratorsResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetChatMemberRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetChatMember`,
		trace.WithAttributes(otelogen.OperationID(`getChatMember`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeGetChatMemberRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.GetChatMember(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetChatMemberResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetChatMemberCountRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetChatMemberCount`,
		trace.WithAttributes(otelogen.OperationID(`getChatMemberCount`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeGetChatMemberCountRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.GetChatMemberCount(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetChatMemberCountResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetFileRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetFile`,
		trace.WithAttributes(otelogen.OperationID(`getFile`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeGetFileRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.GetFile(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetFileResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetGameHighScoresRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetGameHighScores`,
		trace.WithAttributes(otelogen.OperationID(`getGameHighScores`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeGetGameHighScoresRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.GetGameHighScores(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetGameHighScoresResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetMeRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetMe`,
		trace.WithAttributes(otelogen.OperationID(`getMe`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()

	response, err := s.s.GetMe(ctx)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetMeResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetMyCommandsRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetMyCommands`,
		trace.WithAttributes(otelogen.OperationID(`getMyCommands`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeGetMyCommandsRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.GetMyCommands(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetMyCommandsResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetStickerSetRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetStickerSet`,
		trace.WithAttributes(otelogen.OperationID(`getStickerSet`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeGetStickerSetRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.GetStickerSet(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetStickerSetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetUpdatesRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetUpdates`,
		trace.WithAttributes(otelogen.OperationID(`getUpdates`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeGetUpdatesRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.GetUpdates(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetUpdatesResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleGetUserProfilePhotosRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `GetUserProfilePhotos`,
		trace.WithAttributes(otelogen.OperationID(`getUserProfilePhotos`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeGetUserProfilePhotosRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.GetUserProfilePhotos(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeGetUserProfilePhotosResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleLeaveChatRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `LeaveChat`,
		trace.WithAttributes(otelogen.OperationID(`leaveChat`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeLeaveChatRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.LeaveChat(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeLeaveChatResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandlePinChatMessageRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `PinChatMessage`,
		trace.WithAttributes(otelogen.OperationID(`pinChatMessage`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodePinChatMessageRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.PinChatMessage(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodePinChatMessageResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandlePromoteChatMemberRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `PromoteChatMember`,
		trace.WithAttributes(otelogen.OperationID(`promoteChatMember`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodePromoteChatMemberRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.PromoteChatMember(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodePromoteChatMemberResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleRestrictChatMemberRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `RestrictChatMember`,
		trace.WithAttributes(otelogen.OperationID(`restrictChatMember`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeRestrictChatMemberRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.RestrictChatMember(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeRestrictChatMemberResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleRevokeChatInviteLinkRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `RevokeChatInviteLink`,
		trace.WithAttributes(otelogen.OperationID(`revokeChatInviteLink`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeRevokeChatInviteLinkRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.RevokeChatInviteLink(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeRevokeChatInviteLinkResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendAnimationRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendAnimation`,
		trace.WithAttributes(otelogen.OperationID(`sendAnimation`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendAnimationRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendAnimation(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendAnimationResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendAudioRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendAudio`,
		trace.WithAttributes(otelogen.OperationID(`sendAudio`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendAudioRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendAudio(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendAudioResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendChatActionRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendChatAction`,
		trace.WithAttributes(otelogen.OperationID(`sendChatAction`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendChatActionRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendChatAction(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendChatActionResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendContactRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendContact`,
		trace.WithAttributes(otelogen.OperationID(`sendContact`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendContactRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendContact(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendContactResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendDiceRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendDice`,
		trace.WithAttributes(otelogen.OperationID(`sendDice`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendDiceRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendDice(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendDiceResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendDocumentRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendDocument`,
		trace.WithAttributes(otelogen.OperationID(`sendDocument`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendDocumentRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendDocument(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendDocumentResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendGameRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendGame`,
		trace.WithAttributes(otelogen.OperationID(`sendGame`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendGameRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendGame(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendGameResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendInvoiceRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendInvoice`,
		trace.WithAttributes(otelogen.OperationID(`sendInvoice`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendInvoiceRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendInvoice(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendInvoiceResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendLocationRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendLocation`,
		trace.WithAttributes(otelogen.OperationID(`sendLocation`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendLocationRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendLocation(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendLocationResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendMediaGroupRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendMediaGroup`,
		trace.WithAttributes(otelogen.OperationID(`sendMediaGroup`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendMediaGroupRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendMediaGroup(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendMediaGroupResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendMessageRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendMessage`,
		trace.WithAttributes(otelogen.OperationID(`sendMessage`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendMessageRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendMessage(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendMessageResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendPhotoRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendPhoto`,
		trace.WithAttributes(otelogen.OperationID(`sendPhoto`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendPhotoRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendPhoto(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendPhotoResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendPollRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendPoll`,
		trace.WithAttributes(otelogen.OperationID(`sendPoll`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendPollRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendPoll(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendPollResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendStickerRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendSticker`,
		trace.WithAttributes(otelogen.OperationID(`sendSticker`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendStickerRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendSticker(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendStickerResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendVenueRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendVenue`,
		trace.WithAttributes(otelogen.OperationID(`sendVenue`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendVenueRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendVenue(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendVenueResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendVideoRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendVideo`,
		trace.WithAttributes(otelogen.OperationID(`sendVideo`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendVideoRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendVideo(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendVideoResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendVideoNoteRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendVideoNote`,
		trace.WithAttributes(otelogen.OperationID(`sendVideoNote`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendVideoNoteRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendVideoNote(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendVideoNoteResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSendVoiceRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SendVoice`,
		trace.WithAttributes(otelogen.OperationID(`sendVoice`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSendVoiceRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SendVoice(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSendVoiceResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetChatAdministratorCustomTitleRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetChatAdministratorCustomTitle`,
		trace.WithAttributes(otelogen.OperationID(`setChatAdministratorCustomTitle`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetChatAdministratorCustomTitleRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetChatAdministratorCustomTitle(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetChatAdministratorCustomTitleResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetChatDescriptionRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetChatDescription`,
		trace.WithAttributes(otelogen.OperationID(`setChatDescription`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetChatDescriptionRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetChatDescription(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetChatDescriptionResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetChatPermissionsRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetChatPermissions`,
		trace.WithAttributes(otelogen.OperationID(`setChatPermissions`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetChatPermissionsRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetChatPermissions(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetChatPermissionsResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetChatPhotoRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetChatPhoto`,
		trace.WithAttributes(otelogen.OperationID(`setChatPhoto`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetChatPhotoRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetChatPhoto(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetChatPhotoResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetChatStickerSetRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetChatStickerSet`,
		trace.WithAttributes(otelogen.OperationID(`setChatStickerSet`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetChatStickerSetRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetChatStickerSet(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetChatStickerSetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetChatTitleRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetChatTitle`,
		trace.WithAttributes(otelogen.OperationID(`setChatTitle`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetChatTitleRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetChatTitle(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetChatTitleResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetGameScoreRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetGameScore`,
		trace.WithAttributes(otelogen.OperationID(`setGameScore`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetGameScoreRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetGameScore(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetGameScoreResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetMyCommandsRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetMyCommands`,
		trace.WithAttributes(otelogen.OperationID(`setMyCommands`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetMyCommandsRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetMyCommands(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetMyCommandsResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetPassportDataErrorsRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetPassportDataErrors`,
		trace.WithAttributes(otelogen.OperationID(`setPassportDataErrors`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetPassportDataErrorsRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetPassportDataErrors(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetPassportDataErrorsResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetStickerPositionInSetRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetStickerPositionInSet`,
		trace.WithAttributes(otelogen.OperationID(`setStickerPositionInSet`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetStickerPositionInSetRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetStickerPositionInSet(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetStickerPositionInSetResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetStickerSetThumbRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetStickerSetThumb`,
		trace.WithAttributes(otelogen.OperationID(`setStickerSetThumb`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetStickerSetThumbRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetStickerSetThumb(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetStickerSetThumbResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleSetWebhookRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `SetWebhook`,
		trace.WithAttributes(otelogen.OperationID(`setWebhook`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeSetWebhookRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.SetWebhook(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeSetWebhookResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleStopMessageLiveLocationRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `StopMessageLiveLocation`,
		trace.WithAttributes(otelogen.OperationID(`stopMessageLiveLocation`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeStopMessageLiveLocationRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.StopMessageLiveLocation(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeStopMessageLiveLocationResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleStopPollRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `StopPoll`,
		trace.WithAttributes(otelogen.OperationID(`stopPoll`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeStopPollRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.StopPoll(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeStopPollResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleUnbanChatMemberRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `UnbanChatMember`,
		trace.WithAttributes(otelogen.OperationID(`unbanChatMember`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeUnbanChatMemberRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.UnbanChatMember(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeUnbanChatMemberResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleUnpinAllChatMessagesRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `UnpinAllChatMessages`,
		trace.WithAttributes(otelogen.OperationID(`unpinAllChatMessages`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeUnpinAllChatMessagesRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.UnpinAllChatMessages(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeUnpinAllChatMessagesResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleUnpinChatMessageRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `UnpinChatMessage`,
		trace.WithAttributes(otelogen.OperationID(`unpinChatMessage`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeUnpinChatMessageRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.UnpinChatMessage(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeUnpinChatMessageResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func (s *HTTPServer) HandleUploadStickerFileRequest(w http.ResponseWriter, r *http.Request) {
	ctx, span := s.cfg.Tracer.Start(r.Context(), `UploadStickerFile`,
		trace.WithAttributes(otelogen.OperationID(`uploadStickerFile`)),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	defer span.End()
	request, err := decodeUploadStickerFileRequest(r, span)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusBadRequest, err)
		return
	}

	response, err := s.s.UploadStickerFile(ctx, request)
	if err != nil {
		span.RecordError(err)
		respondError(w, http.StatusInternalServerError, err)
		return
	}

	if err := encodeUploadStickerFileResponse(response, w, span); err != nil {
		span.RecordError(err)
		return
	}
}

func respondError(w http.ResponseWriter, code int, err error) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	data, writeErr := json.Marshal(struct {
		ErrorMessage string `json:"error_message"`
	}{
		ErrorMessage: err.Error(),
	})
	if writeErr == nil {
		w.Write(data)
	}
}
