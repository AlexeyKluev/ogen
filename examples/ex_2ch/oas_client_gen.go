// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric/instrument/syncint64"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	cfg       config
	requests  syncint64.Counter
	errors    syncint64.Counter
	duration  syncint64.Histogram
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...Option) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	c := &Client{
		cfg:       newConfig(opts...),
		serverURL: u,
	}
	if c.requests, err = c.cfg.Meter.SyncInt64().Counter(otelogen.ClientRequestCount); err != nil {
		return nil, err
	}
	if c.errors, err = c.cfg.Meter.SyncInt64().Counter(otelogen.ClientErrorsCount); err != nil {
		return nil, err
	}
	if c.duration, err = c.cfg.Meter.SyncInt64().Histogram(otelogen.ClientDuration); err != nil {
		return nil, err
	}
	return c, nil
}

// APICaptcha2chcaptchaIDGet invokes  operation.
//
// GET /api/captcha/2chcaptcha/id
func (c *Client) APICaptcha2chcaptchaIDGet(ctx context.Context, params APICaptcha2chcaptchaIDGetParams) (res Captcha, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APICaptcha2chcaptchaIDGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/captcha/2chcaptcha/id"

	q := u.Query()
	{
		// Encode "board" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			if val, ok := params.Board.Get(); ok {
				return e.EncodeValue(conv.StringToString(val))
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	{
		// Encode "thread" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "thread",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			if val, ok := params.Thread.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	u.RawQuery = q.Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPICaptcha2chcaptchaIDGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APICaptcha2chcaptchaShowGet invokes  operation.
//
// GET /api/captcha/2chcaptcha/show
func (c *Client) APICaptcha2chcaptchaShowGet(ctx context.Context, params APICaptcha2chcaptchaShowGetParams) (res APICaptcha2chcaptchaShowGetRes, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APICaptcha2chcaptchaShowGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/captcha/2chcaptcha/show"

	q := u.Query()
	{
		// Encode "id" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	u.RawQuery = q.Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPICaptcha2chcaptchaShowGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APICaptchaAppIDPublicKeyGet invokes  operation.
//
// Полученный id вам нужно отправить вместе с постом как
// app_response_id.
// При этом нужно отправить app_response = sha256(app_response_id + '|' +
// private key).
// Срок жизни id: 180 секунд.
//
// GET /api/captcha/app/id/{public_key}
func (c *Client) APICaptchaAppIDPublicKeyGet(ctx context.Context, params APICaptchaAppIDPublicKeyGetParams) (res Captcha, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APICaptchaAppIDPublicKeyGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/captcha/app/id/"
	{
		// Encode "public_key" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "public_key",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.PublicKey))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}

	q := u.Query()
	{
		// Encode "board" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			if val, ok := params.Board.Get(); ok {
				return e.EncodeValue(conv.StringToString(val))
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	{
		// Encode "thread" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "thread",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			if val, ok := params.Thread.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	u.RawQuery = q.Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPICaptchaAppIDPublicKeyGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APICaptchaInvisibleRecaptchaIDGet invokes  operation.
//
// GET /api/captcha/invisible_recaptcha/id
func (c *Client) APICaptchaInvisibleRecaptchaIDGet(ctx context.Context, params APICaptchaInvisibleRecaptchaIDGetParams) (res Captcha, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APICaptchaInvisibleRecaptchaIDGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/captcha/invisible_recaptcha/id"

	q := u.Query()
	{
		// Encode "board" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			if val, ok := params.Board.Get(); ok {
				return e.EncodeValue(conv.StringToString(val))
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	{
		// Encode "thread" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "thread",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			if val, ok := params.Thread.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	u.RawQuery = q.Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPICaptchaInvisibleRecaptchaIDGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APICaptchaInvisibleRecaptchaMobileGet invokes  operation.
//
// GET /api/captcha/invisible_recaptcha/mobile
func (c *Client) APICaptchaInvisibleRecaptchaMobileGet(ctx context.Context) (res APICaptchaInvisibleRecaptchaMobileGetOK, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APICaptchaInvisibleRecaptchaMobileGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/captcha/invisible_recaptcha/mobile"

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPICaptchaInvisibleRecaptchaMobileGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APICaptchaRecaptchaIDGet invokes  operation.
//
// GET /api/captcha/recaptcha/id
func (c *Client) APICaptchaRecaptchaIDGet(ctx context.Context, params APICaptchaRecaptchaIDGetParams) (res Captcha, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APICaptchaRecaptchaIDGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/captcha/recaptcha/id"

	q := u.Query()
	{
		// Encode "board" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			if val, ok := params.Board.Get(); ok {
				return e.EncodeValue(conv.StringToString(val))
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	{
		// Encode "thread" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "thread",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			if val, ok := params.Thread.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	u.RawQuery = q.Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPICaptchaRecaptchaIDGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APICaptchaRecaptchaMobileGet invokes  operation.
//
// GET /api/captcha/recaptcha/mobile
func (c *Client) APICaptchaRecaptchaMobileGet(ctx context.Context) (res APICaptchaRecaptchaMobileGetOK, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APICaptchaRecaptchaMobileGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/captcha/recaptcha/mobile"

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPICaptchaRecaptchaMobileGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APIDislikeGet invokes  operation.
//
// GET /api/dislike
func (c *Client) APIDislikeGet(ctx context.Context, params APIDislikeGetParams) (res Like, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APIDislikeGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/dislike"

	q := u.Query()
	{
		// Encode "board" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Board))
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	{
		// Encode "num" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "num",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.Num))
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	u.RawQuery = q.Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPIDislikeGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APILikeGet invokes  operation.
//
// GET /api/like
func (c *Client) APILikeGet(ctx context.Context, params APILikeGetParams) (res Like, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APILikeGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/like"

	q := u.Query()
	{
		// Encode "board" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Board))
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	{
		// Encode "num" parameter.
		e := uri.NewQueryEncoder(uri.QueryEncoderConfig{
			Param:   "num",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}, q)
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.Num))
		}(); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
		q = e.Result()
	}
	u.RawQuery = q.Encode()

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPILikeGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APIMobileV2AfterBoardThreadNumGet invokes  operation.
//
// GET /api/mobile/v2/after/{board}/{thread}/{num}
func (c *Client) APIMobileV2AfterBoardThreadNumGet(ctx context.Context, params APIMobileV2AfterBoardThreadNumGetParams) (res MobileThreadPostsAfter, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APIMobileV2AfterBoardThreadNumGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/mobile/v2/after/"
	{
		// Encode "board" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "board",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Board))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}
	u.Path += "/"
	{
		// Encode "thread" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "thread",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.Thread))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}
	u.Path += "/"
	{
		// Encode "num" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "num",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.Num))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPIMobileV2AfterBoardThreadNumGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APIMobileV2BoardsGet invokes  operation.
//
// GET /api/mobile/v2/boards
func (c *Client) APIMobileV2BoardsGet(ctx context.Context) (res Boards, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APIMobileV2BoardsGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/mobile/v2/boards"

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPIMobileV2BoardsGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APIMobileV2InfoBoardThreadGet invokes  operation.
//
// GET /api/mobile/v2/info/{board}/{thread}
func (c *Client) APIMobileV2InfoBoardThreadGet(ctx context.Context, params APIMobileV2InfoBoardThreadGetParams) (res MobileThreadLastInfo, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APIMobileV2InfoBoardThreadGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/mobile/v2/info/"
	{
		// Encode "board" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "board",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Board))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}
	u.Path += "/"
	{
		// Encode "thread" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "thread",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.Thread))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPIMobileV2InfoBoardThreadGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// APIMobileV2PostBoardNumGet invokes  operation.
//
// GET /api/mobile/v2/post/{board}/{num}
func (c *Client) APIMobileV2PostBoardNumGet(ctx context.Context, params APIMobileV2PostBoardNumGetParams) (res MobilePost, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{}
	ctx, span := c.cfg.Tracer.Start(ctx, "APIMobileV2PostBoardNumGet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/api/mobile/v2/post/"
	{
		// Encode "board" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "board",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Board))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}
	u.Path += "/"
	{
		// Encode "num" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "num",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.Num))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		u.Path += e.Result()
	}

	r := ht.NewRequest(ctx, "GET", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAPIMobileV2PostBoardNumGetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
