// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func decodeAPICaptcha2chcaptchaIDGetParams(args [0]string, r *http.Request) (APICaptcha2chcaptchaIDGetParams, error) {
	var (
		params    APICaptcha2chcaptchaIDGetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: board.
	{
		if queryArgs.Has("board") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "board",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotBoardVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotBoardVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Board.SetTo(paramsDotBoardVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: board: parse")
			}
		}
	}
	// Decode query: thread.
	{
		if queryArgs.Has("thread") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "thread",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotThreadVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotThreadVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Thread.SetTo(paramsDotThreadVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: thread: parse")
			}
			if err := func() error {
				if params.Thread.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Thread.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: thread: invalid")
			}
		}
	}
	return params, nil
}

func decodeAPICaptcha2chcaptchaShowGetParams(args [0]string, r *http.Request) (APICaptcha2chcaptchaShowGetParams, error) {
	var (
		params    APICaptcha2chcaptchaShowGetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: id.
	{
		if queryArgs.Has("id") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "id",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: id: parse")
			}
		} else {
			return params, errors.New("query: id: not specified")
		}
	}
	return params, nil
}

func decodeAPICaptchaAppIDPublicKeyGetParams(args [1]string, r *http.Request) (APICaptchaAppIDPublicKeyGetParams, error) {
	var (
		params    APICaptchaAppIDPublicKeyGetParams
		queryArgs = r.URL.Query()
	)
	// Decode path: public_key.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "public_key",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.PublicKey = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: public_key: not specified")
		}
	}
	// Decode query: board.
	{
		if queryArgs.Has("board") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "board",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotBoardVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotBoardVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Board.SetTo(paramsDotBoardVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: board: parse")
			}
		}
	}
	// Decode query: thread.
	{
		if queryArgs.Has("thread") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "thread",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotThreadVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotThreadVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Thread.SetTo(paramsDotThreadVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: thread: parse")
			}
			if err := func() error {
				if params.Thread.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Thread.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: thread: invalid")
			}
		}
	}
	return params, nil
}

func decodeAPICaptchaInvisibleRecaptchaIDGetParams(args [0]string, r *http.Request) (APICaptchaInvisibleRecaptchaIDGetParams, error) {
	var (
		params    APICaptchaInvisibleRecaptchaIDGetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: board.
	{
		if queryArgs.Has("board") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "board",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotBoardVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotBoardVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Board.SetTo(paramsDotBoardVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: board: parse")
			}
		}
	}
	// Decode query: thread.
	{
		if queryArgs.Has("thread") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "thread",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotThreadVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotThreadVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Thread.SetTo(paramsDotThreadVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: thread: parse")
			}
			if err := func() error {
				if params.Thread.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Thread.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: thread: invalid")
			}
		}
	}
	return params, nil
}

func decodeAPICaptchaRecaptchaIDGetParams(args [0]string, r *http.Request) (APICaptchaRecaptchaIDGetParams, error) {
	var (
		params    APICaptchaRecaptchaIDGetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: board.
	{
		if queryArgs.Has("board") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "board",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotBoardVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotBoardVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Board.SetTo(paramsDotBoardVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: board: parse")
			}
		}
	}
	// Decode query: thread.
	{
		if queryArgs.Has("thread") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "thread",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotThreadVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotThreadVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Thread.SetTo(paramsDotThreadVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: thread: parse")
			}
			if err := func() error {
				if params.Thread.Set {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(params.Thread.Value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: thread: invalid")
			}
		}
	}
	return params, nil
}

func decodeAPIDislikeGetParams(args [0]string, r *http.Request) (APIDislikeGetParams, error) {
	var (
		params    APIDislikeGetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: board.
	{
		if queryArgs.Has("board") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "board",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Board = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: board: parse")
			}
		} else {
			return params, errors.New("query: board: not specified")
		}
	}
	// Decode query: num.
	{
		if queryArgs.Has("num") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "num",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(s)
				if err != nil {
					return err
				}

				params.Num = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: num: parse")
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Num)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: num: invalid")
			}
		} else {
			return params, errors.New("query: num: not specified")
		}
	}
	return params, nil
}

func decodeAPILikeGetParams(args [0]string, r *http.Request) (APILikeGetParams, error) {
	var (
		params    APILikeGetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: board.
	{
		if queryArgs.Has("board") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "board",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Board = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: board: parse")
			}
		} else {
			return params, errors.New("query: board: not specified")
		}
	}
	// Decode query: num.
	{
		if queryArgs.Has("num") {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Param:   "num",
				Values:  queryArgs,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(s)
				if err != nil {
					return err
				}

				params.Num = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: num: parse")
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Num)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: num: invalid")
			}
		} else {
			return params, errors.New("query: num: not specified")
		}
	}
	return params, nil
}

func decodeAPIMobileV2AfterBoardThreadNumGetParams(args [3]string, r *http.Request) (APIMobileV2AfterBoardThreadNumGetParams, error) {
	var (
		params APIMobileV2AfterBoardThreadNumGetParams
	)
	// Decode path: board.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "board",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Board = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: board: not specified")
		}
	}
	// Decode path: thread.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(s)
				if err != nil {
					return err
				}

				params.Thread = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: thread: not specified")
		}
	}
	// Decode path: num.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "num",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(s)
				if err != nil {
					return err
				}

				params.Num = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: num: not specified")
		}
	}
	return params, nil
}

func decodeAPIMobileV2InfoBoardThreadGetParams(args [2]string, r *http.Request) (APIMobileV2InfoBoardThreadGetParams, error) {
	var (
		params APIMobileV2InfoBoardThreadGetParams
	)
	// Decode path: board.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "board",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Board = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: board: not specified")
		}
	}
	// Decode path: thread.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(s)
				if err != nil {
					return err
				}

				params.Thread = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: thread: not specified")
		}
	}
	return params, nil
}

func decodeAPIMobileV2PostBoardNumGetParams(args [2]string, r *http.Request) (APIMobileV2PostBoardNumGetParams, error) {
	var (
		params APIMobileV2PostBoardNumGetParams
	)
	// Decode path: board.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "board",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Board = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: board: not specified")
		}
	}
	// Decode path: num.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "num",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(s)
				if err != nil {
					return err
				}

				params.Num = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: num: not specified")
		}
	}
	return params, nil
}
