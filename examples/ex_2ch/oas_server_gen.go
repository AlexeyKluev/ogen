// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	"go.opentelemetry.io/otel/metric/instrument/syncint64"

	"github.com/ogen-go/ogen/otelogen"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// APICaptcha2chcaptchaIDGet implements  operation.
	//
	// GET /api/captcha/2chcaptcha/id
	APICaptcha2chcaptchaIDGet(ctx context.Context, params APICaptcha2chcaptchaIDGetParams) (Captcha, error)
	// APICaptcha2chcaptchaShowGet implements  operation.
	//
	// GET /api/captcha/2chcaptcha/show
	APICaptcha2chcaptchaShowGet(ctx context.Context, params APICaptcha2chcaptchaShowGetParams) (APICaptcha2chcaptchaShowGetRes, error)
	// APICaptchaAppIDPublicKeyGet implements  operation.
	//
	// Полученный id вам нужно отправить вместе с постом как
	// app_response_id.
	// При этом нужно отправить app_response = sha256(app_response_id + '|' +
	// private key).
	// Срок жизни id: 180 секунд.
	//
	// GET /api/captcha/app/id/{public_key}
	APICaptchaAppIDPublicKeyGet(ctx context.Context, params APICaptchaAppIDPublicKeyGetParams) (Captcha, error)
	// APICaptchaInvisibleRecaptchaIDGet implements  operation.
	//
	// GET /api/captcha/invisible_recaptcha/id
	APICaptchaInvisibleRecaptchaIDGet(ctx context.Context, params APICaptchaInvisibleRecaptchaIDGetParams) (Captcha, error)
	// APICaptchaInvisibleRecaptchaMobileGet implements  operation.
	//
	// GET /api/captcha/invisible_recaptcha/mobile
	APICaptchaInvisibleRecaptchaMobileGet(ctx context.Context) (APICaptchaInvisibleRecaptchaMobileGetOK, error)
	// APICaptchaRecaptchaIDGet implements  operation.
	//
	// GET /api/captcha/recaptcha/id
	APICaptchaRecaptchaIDGet(ctx context.Context, params APICaptchaRecaptchaIDGetParams) (Captcha, error)
	// APICaptchaRecaptchaMobileGet implements  operation.
	//
	// GET /api/captcha/recaptcha/mobile
	APICaptchaRecaptchaMobileGet(ctx context.Context) (APICaptchaRecaptchaMobileGetOK, error)
	// APIDislikeGet implements  operation.
	//
	// GET /api/dislike
	APIDislikeGet(ctx context.Context, params APIDislikeGetParams) (Like, error)
	// APILikeGet implements  operation.
	//
	// GET /api/like
	APILikeGet(ctx context.Context, params APILikeGetParams) (Like, error)
	// APIMobileV2AfterBoardThreadNumGet implements  operation.
	//
	// GET /api/mobile/v2/after/{board}/{thread}/{num}
	APIMobileV2AfterBoardThreadNumGet(ctx context.Context, params APIMobileV2AfterBoardThreadNumGetParams) (MobileThreadPostsAfter, error)
	// APIMobileV2BoardsGet implements  operation.
	//
	// GET /api/mobile/v2/boards
	APIMobileV2BoardsGet(ctx context.Context) (Boards, error)
	// APIMobileV2InfoBoardThreadGet implements  operation.
	//
	// GET /api/mobile/v2/info/{board}/{thread}
	APIMobileV2InfoBoardThreadGet(ctx context.Context, params APIMobileV2InfoBoardThreadGetParams) (MobileThreadLastInfo, error)
	// APIMobileV2PostBoardNumGet implements  operation.
	//
	// GET /api/mobile/v2/post/{board}/{num}
	APIMobileV2PostBoardNumGet(ctx context.Context, params APIMobileV2PostBoardNumGetParams) (MobilePost, error)
	// UserPassloginPost implements  operation.
	//
	// POST /user/passlogin
	UserPassloginPost(ctx context.Context, req UserPassloginPostReq, params UserPassloginPostParams) (Passcode, error)
	// UserPostingPost implements  operation.
	//
	// POST /user/posting
	UserPostingPost(ctx context.Context, req UserPostingPostReq) (UserPostingPostOK, error)
	// UserReportPost implements  operation.
	//
	// POST /user/report
	UserReportPost(ctx context.Context, req UserReportPostReq) (Report, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	cfg config

	requests syncint64.Counter
	errors   syncint64.Counter
	duration syncint64.Histogram
}

func NewServer(h Handler, opts ...Option) (*Server, error) {
	s := &Server{
		h:   h,
		cfg: newConfig(opts...),
	}
	var err error
	if s.requests, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerRequestCount); err != nil {
		return nil, err
	}
	if s.errors, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerErrorsCount); err != nil {
		return nil, err
	}
	if s.duration, err = s.cfg.Meter.SyncInt64().Histogram(otelogen.ServerDuration); err != nil {
		return nil, err
	}
	return s, nil
}
