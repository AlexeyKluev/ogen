// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

type GetBookParams struct {
	// ID of book.
	BookID int
}

func unpackGetBookParams(packed map[string]any) (params GetBookParams) {
	if v, ok := packed["book_id"]; ok {
		params.BookID, _ = v.(int)
	}
	return params
}

func decodeGetBookParams(args [1]string, r *http.Request) (params GetBookParams, _ error) {
	// Decode path: book_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "book_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.BookID = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: book_id: parse")
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.BookID)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: book_id: invalid")
			}
		} else {
			return params, errors.New("path: book_id: not specified")
		}
	}
	return params, nil
}

type GetPageCoverImageParams struct {
	// ID of book.
	MediaID int
	// Image format.
	Format string
}

func unpackGetPageCoverImageParams(packed map[string]any) (params GetPageCoverImageParams) {
	if v, ok := packed["media_id"]; ok {
		params.MediaID, _ = v.(int)
	}
	if v, ok := packed["format"]; ok {
		params.Format, _ = v.(string)
	}
	return params
}

func decodeGetPageCoverImageParams(args [2]string, r *http.Request) (params GetPageCoverImageParams, _ error) {
	// Decode path: media_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "media_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MediaID = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: media_id: parse")
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.MediaID)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: media_id: invalid")
			}
		} else {
			return params, errors.New("path: media_id: not specified")
		}
	}
	// Set default value for path: format.
	{
		val := string("jpg")
		params.Format = val
	}
	// Decode path: format.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "format",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Format = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: format: parse")
			}
		} else {
			return params, errors.New("path: format: not specified")
		}
	}
	return params, nil
}

type GetPageImageParams struct {
	// ID of book.
	MediaID int
	// Number of page.
	Page int
	// Image format.
	Format string
}

func unpackGetPageImageParams(packed map[string]any) (params GetPageImageParams) {
	if v, ok := packed["media_id"]; ok {
		params.MediaID, _ = v.(int)
	}
	if v, ok := packed["page"]; ok {
		params.Page, _ = v.(int)
	}
	if v, ok := packed["format"]; ok {
		params.Format, _ = v.(string)
	}
	return params
}

func decodeGetPageImageParams(args [3]string, r *http.Request) (params GetPageImageParams, _ error) {
	// Decode path: media_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "media_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MediaID = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: media_id: parse")
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.MediaID)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: media_id: invalid")
			}
		} else {
			return params, errors.New("path: media_id: not specified")
		}
	}
	// Decode path: page.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "page",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Page = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: page: parse")
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Page)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: page: invalid")
			}
		} else {
			return params, errors.New("path: page: not specified")
		}
	}
	// Set default value for path: format.
	{
		val := string("jpg")
		params.Format = val
	}
	// Decode path: format.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "format",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Format = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: format: parse")
			}
		} else {
			return params, errors.New("path: format: not specified")
		}
	}
	return params, nil
}

type GetPageThumbnailImageParams struct {
	// ID of book.
	MediaID int
	// Number of page.
	Page int
	// Image format.
	Format string
}

func unpackGetPageThumbnailImageParams(packed map[string]any) (params GetPageThumbnailImageParams) {
	if v, ok := packed["media_id"]; ok {
		params.MediaID, _ = v.(int)
	}
	if v, ok := packed["page"]; ok {
		params.Page, _ = v.(int)
	}
	if v, ok := packed["format"]; ok {
		params.Format, _ = v.(string)
	}
	return params
}

func decodeGetPageThumbnailImageParams(args [3]string, r *http.Request) (params GetPageThumbnailImageParams, _ error) {
	// Decode path: media_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "media_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MediaID = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: media_id: parse")
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.MediaID)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: media_id: invalid")
			}
		} else {
			return params, errors.New("path: media_id: not specified")
		}
	}
	// Decode path: page.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "page",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Page = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: page: parse")
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Page)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: page: invalid")
			}
		} else {
			return params, errors.New("path: page: not specified")
		}
	}
	// Set default value for path: format.
	{
		val := string("jpg")
		params.Format = val
	}
	// Decode path: format.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "format",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Format = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: format: parse")
			}
		} else {
			return params, errors.New("path: format: not specified")
		}
	}
	return params, nil
}

type SearchParams struct {
	// Search query.
	// * You can search for multiple terms at the same time, and this will return only galleries that
	// contain both terms. For example, rust cox finds all galleries that contain both rust and cox.
	// * You can exclude terms by prefixing them with -. For example, rust cox -tokio matches all
	// galleries matching rust and cox but not tokio.
	// * Exact searches can be performed by wrapping terms in double quotes. For example, "big dogs" only
	// matches galleries with "big dogs" somewhere in the title or in tags.
	// * These can be combined with tag namespaces for finer control over the query: parodies:railgun
	// -tag:"big dogs".
	Query string
	// Number of result page.
	Page OptInt
}

func unpackSearchParams(packed map[string]any) (params SearchParams) {
	if v, ok := packed["query"]; ok {
		params.Query, _ = v.(string)
	}
	if v, ok := packed["page"]; ok {
		params.Page, _ = v.(OptInt)
	}
	return params
}

func decodeSearchParams(args [0]string, r *http.Request) (params SearchParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: query.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Query = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: query: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type SearchByTagIDParams struct {
	// Tag ID.
	TagID int
	// Number of result page.
	Page OptInt
}

func unpackSearchByTagIDParams(packed map[string]any) (params SearchByTagIDParams) {
	if v, ok := packed["tag_id"]; ok {
		params.TagID, _ = v.(int)
	}
	if v, ok := packed["page"]; ok {
		params.Page, _ = v.(OptInt)
	}
	return params
}

func decodeSearchByTagIDParams(args [0]string, r *http.Request) (params SearchByTagIDParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: tag_id.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tag_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TagID = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: tag_id: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}
