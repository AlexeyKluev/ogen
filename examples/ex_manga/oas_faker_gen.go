// Code generated by ogen, DO NOT EDIT.

package api

// SetFake set fake values.
func (s *Book) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.MediaID.SetFake()
		}
	}
	{
		{
			s.Images.SetFake()
		}
	}
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Tags = nil
			for i := 0; i < 0; i++ {
				var elem Tag
				{
					elem.SetFake()
				}
				s.Tags = append(s.Tags, elem)
			}
		}
	}
	{
		{
			s.Scanlator.SetFake()
		}
	}
	{
		{
			s.UploadDate.SetFake()
		}
	}
	{
		{
			s.NumPages.SetFake()
		}
	}
	{
		{
			s.NumFavorites.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Image) SetFake() {
	{
		{
			s.T.SetFake()
		}
	}
	{
		{
			s.W.SetFake()
		}
	}
	{
		{
			s.H.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Images) SetFake() {
	{
		{
			s.Pages = nil
			for i := 0; i < 0; i++ {
				var elem Image
				{
					elem.SetFake()
				}
				s.Pages = append(s.Pages, elem)
			}
		}
	}
	{
		{
			s.Cover.SetFake()
		}
	}
	{
		{
			s.Thumbnail.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OptImage) SetFake() {
	var elem Image
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptImages) SetFake() {
	var elem Images
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt) SetFake() {
	var elem int
	{
		elem = int(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptString) SetFake() {
	var elem string
	{
		elem = "string"
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTagType) SetFake() {
	var elem TagType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTitle) SetFake() {
	var elem Title
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *SearchByTagIDOKApplicationJSON) SetFake() {
	var unwrapped []SearchResponse
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SearchResponse
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = SearchByTagIDOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *SearchOKApplicationJSON) SetFake() {
	var unwrapped []SearchResponse
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SearchResponse
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = SearchOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *SearchResponse) SetFake() {
	{
		{
			s.Result = nil
			for i := 0; i < 0; i++ {
				var elem Book
				{
					elem.SetFake()
				}
				s.Result = append(s.Result, elem)
			}
		}
	}
	{
		{
			s.NumPages.SetFake()
		}
	}
	{
		{
			s.PerPage.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Tag) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Count.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TagType) SetFake() {
	*s = TagTypeParody
}

// SetFake set fake values.
func (s *Title) SetFake() {
	{
		{
			s.English.SetFake()
		}
	}
	{
		{
			s.Japanese.SetFake()
		}
	}
	{
		{
			s.Pretty.SetFake()
		}
	}
}
