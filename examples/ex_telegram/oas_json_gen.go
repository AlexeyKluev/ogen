// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

// Encode implements json.Marshaler.
func (s Animation) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)

	e.FieldStart("file_unique_id")
	e.Str(s.FileUniqueID)

	e.FieldStart("width")
	e.Int(s.Width)

	e.FieldStart("height")
	e.Int(s.Height)

	e.FieldStart("duration")
	e.Int(s.Duration)
	if s.Thumb.Set {
		e.FieldStart("thumb")
		s.Thumb.Encode(e)
	}
	if s.FileName.Set {
		e.FieldStart("file_name")
		s.FileName.Encode(e)
	}
	if s.MimeType.Set {
		e.FieldStart("mime_type")
		s.MimeType.Encode(e)
	}
	if s.FileSize.Set {
		e.FieldStart("file_size")
		s.FileSize.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Animation from json.
func (s *Animation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Animation to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := d.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "width":
			v, err := d.Int()
			s.Width = int(v)
			if err != nil {
				return err
			}
		case "height":
			v, err := d.Int()
			s.Height = int(v)
			if err != nil {
				return err
			}
		case "duration":
			v, err := d.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.Decode(d); err != nil {
				return err
			}
		case "file_name":
			s.FileName.Reset()
			if err := s.FileName.Decode(d); err != nil {
				return err
			}
		case "mime_type":
			s.MimeType.Reset()
			if err := s.MimeType.Decode(d); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s AnswerCallbackQueryPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.Bool(s.Result)
	e.ObjEnd()
}

// Decode decodes AnswerCallbackQueryPostOK from json.
func (s *AnswerCallbackQueryPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode AnswerCallbackQueryPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			v, err := d.Bool()
			s.Result = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s AnswerCallbackQueryPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("callback_query_id")
	e.Str(s.CallbackQueryID)
	if s.Text.Set {
		e.FieldStart("text")
		s.Text.Encode(e)
	}
	if s.ShowAlert.Set {
		e.FieldStart("show_alert")
		s.ShowAlert.Encode(e)
	}
	if s.URL.Set {
		e.FieldStart("url")
		s.URL.Encode(e)
	}
	if s.CacheTime.Set {
		e.FieldStart("cache_time")
		s.CacheTime.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes AnswerCallbackQueryPostReqApplicationJSON from json.
func (s *AnswerCallbackQueryPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode AnswerCallbackQueryPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "callback_query_id":
			v, err := d.Str()
			s.CallbackQueryID = string(v)
			if err != nil {
				return err
			}
		case "text":
			s.Text.Reset()
			if err := s.Text.Decode(d); err != nil {
				return err
			}
		case "show_alert":
			s.ShowAlert.Reset()
			if err := s.ShowAlert.Decode(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.Decode(d); err != nil {
				return err
			}
		case "cache_time":
			s.CacheTime.Reset()
			if err := s.CacheTime.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s AnswerPreCheckoutQueryPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.Bool(s.Result)
	e.ObjEnd()
}

// Decode decodes AnswerPreCheckoutQueryPostOK from json.
func (s *AnswerPreCheckoutQueryPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode AnswerPreCheckoutQueryPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			v, err := d.Bool()
			s.Result = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s AnswerPreCheckoutQueryPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("pre_checkout_query_id")
	e.Str(s.PreCheckoutQueryID)

	e.FieldStart("ok")
	e.Bool(s.Ok)
	if s.ErrorMessage.Set {
		e.FieldStart("error_message")
		s.ErrorMessage.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes AnswerPreCheckoutQueryPostReqApplicationJSON from json.
func (s *AnswerPreCheckoutQueryPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode AnswerPreCheckoutQueryPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pre_checkout_query_id":
			v, err := d.Str()
			s.PreCheckoutQueryID = string(v)
			if err != nil {
				return err
			}
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "error_message":
			s.ErrorMessage.Reset()
			if err := s.ErrorMessage.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s AnswerShippingQueryPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.Bool(s.Result)
	e.ObjEnd()
}

// Decode decodes AnswerShippingQueryPostOK from json.
func (s *AnswerShippingQueryPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode AnswerShippingQueryPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			v, err := d.Bool()
			s.Result = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s AnswerShippingQueryPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("shipping_query_id")
	e.Str(s.ShippingQueryID)

	e.FieldStart("ok")
	e.Bool(s.Ok)
	if s.ShippingOptions != nil {
		e.FieldStart("shipping_options")
		e.ArrStart()
		for _, elem := range s.ShippingOptions {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	if s.ErrorMessage.Set {
		e.FieldStart("error_message")
		s.ErrorMessage.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes AnswerShippingQueryPostReqApplicationJSON from json.
func (s *AnswerShippingQueryPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode AnswerShippingQueryPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shipping_query_id":
			v, err := d.Str()
			s.ShippingQueryID = string(v)
			if err != nil {
				return err
			}
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "shipping_options":
			s.ShippingOptions = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem ShippingOption
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShippingOptions = append(s.ShippingOptions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "error_message":
			s.ErrorMessage.Reset()
			if err := s.ErrorMessage.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Audio) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)

	e.FieldStart("file_unique_id")
	e.Str(s.FileUniqueID)

	e.FieldStart("duration")
	e.Int(s.Duration)
	if s.Performer.Set {
		e.FieldStart("performer")
		s.Performer.Encode(e)
	}
	if s.Title.Set {
		e.FieldStart("title")
		s.Title.Encode(e)
	}
	if s.FileName.Set {
		e.FieldStart("file_name")
		s.FileName.Encode(e)
	}
	if s.MimeType.Set {
		e.FieldStart("mime_type")
		s.MimeType.Encode(e)
	}
	if s.FileSize.Set {
		e.FieldStart("file_size")
		s.FileSize.Encode(e)
	}
	if s.Thumb.Set {
		e.FieldStart("thumb")
		s.Thumb.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Audio from json.
func (s *Audio) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Audio to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := d.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "duration":
			v, err := d.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "performer":
			s.Performer.Reset()
			if err := s.Performer.Decode(d); err != nil {
				return err
			}
		case "title":
			s.Title.Reset()
			if err := s.Title.Decode(d); err != nil {
				return err
			}
		case "file_name":
			s.FileName.Reset()
			if err := s.FileName.Decode(d); err != nil {
				return err
			}
		case "mime_type":
			s.MimeType.Reset()
			if err := s.MimeType.Decode(d); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.Decode(d); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s BotCommand) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("command")
	e.Str(s.Command)

	e.FieldStart("description")
	e.Str(s.Description)
	e.ObjEnd()
}

// Decode decodes BotCommand from json.
func (s *BotCommand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode BotCommand to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "command":
			v, err := d.Str()
			s.Command = string(v)
			if err != nil {
				return err
			}
		case "description":
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode encodes CallbackGame as json.
func (s CallbackGame) Encode(e *jx.Encoder) {
	unwrapped := string(s)
	e.Str(unwrapped)
}

// Decode decodes CallbackGame from json.
func (s *CallbackGame) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CallbackGame to nil`)
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CallbackGame(unwrapped)
	return nil
}

// Encode implements json.Marshaler.
func (s CallbackQuery) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Str(s.ID)

	e.FieldStart("from")
	s.From.Encode(e)
	if s.Message.Set {
		e.FieldStart("message")
		s.Message.Encode(e)
	}
	if s.InlineMessageID.Set {
		e.FieldStart("inline_message_id")
		s.InlineMessageID.Encode(e)
	}

	e.FieldStart("chat_instance")
	e.Str(s.ChatInstance)
	if s.Data.Set {
		e.FieldStart("data")
		s.Data.Encode(e)
	}
	if s.GameShortName.Set {
		e.FieldStart("game_short_name")
		s.GameShortName.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes CallbackQuery from json.
func (s *CallbackQuery) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode CallbackQuery to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "from":
			if err := s.From.Decode(d); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.Decode(d); err != nil {
				return err
			}
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.Decode(d); err != nil {
				return err
			}
		case "chat_instance":
			v, err := d.Str()
			s.ChatInstance = string(v)
			if err != nil {
				return err
			}
		case "data":
			s.Data.Reset()
			if err := s.Data.Decode(d); err != nil {
				return err
			}
		case "game_short_name":
			s.GameShortName.Reset()
			if err := s.GameShortName.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Chat) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("type")
	s.Type.Encode(e)
	if s.Title.Set {
		e.FieldStart("title")
		s.Title.Encode(e)
	}
	if s.Username.Set {
		e.FieldStart("username")
		s.Username.Encode(e)
	}
	if s.FirstName.Set {
		e.FieldStart("first_name")
		s.FirstName.Encode(e)
	}
	if s.LastName.Set {
		e.FieldStart("last_name")
		s.LastName.Encode(e)
	}
	if s.Photo.Set {
		e.FieldStart("photo")
		s.Photo.Encode(e)
	}
	if s.Bio.Set {
		e.FieldStart("bio")
		s.Bio.Encode(e)
	}
	if s.Description.Set {
		e.FieldStart("description")
		s.Description.Encode(e)
	}
	if s.InviteLink.Set {
		e.FieldStart("invite_link")
		s.InviteLink.Encode(e)
	}
	if s.PinnedMessage != nil {
		e.FieldStart("pinned_message")
		s.PinnedMessage.Encode(e)
	}
	if s.Permissions.Set {
		e.FieldStart("permissions")
		s.Permissions.Encode(e)
	}
	if s.SlowModeDelay.Set {
		e.FieldStart("slow_mode_delay")
		s.SlowModeDelay.Encode(e)
	}
	if s.StickerSetName.Set {
		e.FieldStart("sticker_set_name")
		s.StickerSetName.Encode(e)
	}
	if s.CanSetStickerSet.Set {
		e.FieldStart("can_set_sticker_set")
		s.CanSetStickerSet.Encode(e)
	}
	if s.LinkedChatID.Set {
		e.FieldStart("linked_chat_id")
		s.LinkedChatID.Encode(e)
	}
	if s.Location.Set {
		e.FieldStart("location")
		s.Location.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Chat from json.
func (s *Chat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Chat to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "type":
			if err := s.Type.Decode(d); err != nil {
				return err
			}
		case "title":
			s.Title.Reset()
			if err := s.Title.Decode(d); err != nil {
				return err
			}
		case "username":
			s.Username.Reset()
			if err := s.Username.Decode(d); err != nil {
				return err
			}
		case "first_name":
			s.FirstName.Reset()
			if err := s.FirstName.Decode(d); err != nil {
				return err
			}
		case "last_name":
			s.LastName.Reset()
			if err := s.LastName.Decode(d); err != nil {
				return err
			}
		case "photo":
			s.Photo.Reset()
			if err := s.Photo.Decode(d); err != nil {
				return err
			}
		case "bio":
			s.Bio.Reset()
			if err := s.Bio.Decode(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.Decode(d); err != nil {
				return err
			}
		case "invite_link":
			s.InviteLink.Reset()
			if err := s.InviteLink.Decode(d); err != nil {
				return err
			}
		case "pinned_message":
			s.PinnedMessage = nil
			var elem Message
			if err := elem.Decode(d); err != nil {
				return err
			}
			s.PinnedMessage = &elem
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.Decode(d); err != nil {
				return err
			}
		case "slow_mode_delay":
			s.SlowModeDelay.Reset()
			if err := s.SlowModeDelay.Decode(d); err != nil {
				return err
			}
		case "sticker_set_name":
			s.StickerSetName.Reset()
			if err := s.StickerSetName.Decode(d); err != nil {
				return err
			}
		case "can_set_sticker_set":
			s.CanSetStickerSet.Reset()
			if err := s.CanSetStickerSet.Decode(d); err != nil {
				return err
			}
		case "linked_chat_id":
			s.LinkedChatID.Reset()
			if err := s.LinkedChatID.Decode(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s ChatLocation) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("location")
	s.Location.Encode(e)

	e.FieldStart("address")
	e.Str(s.Address)
	e.ObjEnd()
}

// Decode decodes ChatLocation from json.
func (s *ChatLocation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ChatLocation to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "location":
			if err := s.Location.Decode(d); err != nil {
				return err
			}
		case "address":
			v, err := d.Str()
			s.Address = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s ChatPermissions) Encode(e *jx.Encoder) {
	e.ObjStart()
	if s.CanSendMessages.Set {
		e.FieldStart("can_send_messages")
		s.CanSendMessages.Encode(e)
	}
	if s.CanSendMediaMessages.Set {
		e.FieldStart("can_send_media_messages")
		s.CanSendMediaMessages.Encode(e)
	}
	if s.CanSendPolls.Set {
		e.FieldStart("can_send_polls")
		s.CanSendPolls.Encode(e)
	}
	if s.CanSendOtherMessages.Set {
		e.FieldStart("can_send_other_messages")
		s.CanSendOtherMessages.Encode(e)
	}
	if s.CanAddWebPagePreviews.Set {
		e.FieldStart("can_add_web_page_previews")
		s.CanAddWebPagePreviews.Encode(e)
	}
	if s.CanChangeInfo.Set {
		e.FieldStart("can_change_info")
		s.CanChangeInfo.Encode(e)
	}
	if s.CanInviteUsers.Set {
		e.FieldStart("can_invite_users")
		s.CanInviteUsers.Encode(e)
	}
	if s.CanPinMessages.Set {
		e.FieldStart("can_pin_messages")
		s.CanPinMessages.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes ChatPermissions from json.
func (s *ChatPermissions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ChatPermissions to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "can_send_messages":
			s.CanSendMessages.Reset()
			if err := s.CanSendMessages.Decode(d); err != nil {
				return err
			}
		case "can_send_media_messages":
			s.CanSendMediaMessages.Reset()
			if err := s.CanSendMediaMessages.Decode(d); err != nil {
				return err
			}
		case "can_send_polls":
			s.CanSendPolls.Reset()
			if err := s.CanSendPolls.Decode(d); err != nil {
				return err
			}
		case "can_send_other_messages":
			s.CanSendOtherMessages.Reset()
			if err := s.CanSendOtherMessages.Decode(d); err != nil {
				return err
			}
		case "can_add_web_page_previews":
			s.CanAddWebPagePreviews.Reset()
			if err := s.CanAddWebPagePreviews.Decode(d); err != nil {
				return err
			}
		case "can_change_info":
			s.CanChangeInfo.Reset()
			if err := s.CanChangeInfo.Decode(d); err != nil {
				return err
			}
		case "can_invite_users":
			s.CanInviteUsers.Reset()
			if err := s.CanInviteUsers.Decode(d); err != nil {
				return err
			}
		case "can_pin_messages":
			s.CanPinMessages.Reset()
			if err := s.CanPinMessages.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s ChatPhoto) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("small_file_id")
	e.Str(s.SmallFileID)

	e.FieldStart("small_file_unique_id")
	e.Str(s.SmallFileUniqueID)

	e.FieldStart("big_file_id")
	e.Str(s.BigFileID)

	e.FieldStart("big_file_unique_id")
	e.Str(s.BigFileUniqueID)
	e.ObjEnd()
}

// Decode decodes ChatPhoto from json.
func (s *ChatPhoto) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ChatPhoto to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "small_file_id":
			v, err := d.Str()
			s.SmallFileID = string(v)
			if err != nil {
				return err
			}
		case "small_file_unique_id":
			v, err := d.Str()
			s.SmallFileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "big_file_id":
			v, err := d.Str()
			s.BigFileID = string(v)
			if err != nil {
				return err
			}
		case "big_file_unique_id":
			v, err := d.Str()
			s.BigFileUniqueID = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode encodes ChatType as json.
func (s ChatType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChatType from json.
func (s *ChatType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ChatType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ChatType(v)
	return nil
}

// Encode implements json.Marshaler.
func (s ChosenInlineResult) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("result_id")
	e.Str(s.ResultID)

	e.FieldStart("from")
	s.From.Encode(e)
	if s.Location.Set {
		e.FieldStart("location")
		s.Location.Encode(e)
	}
	if s.InlineMessageID.Set {
		e.FieldStart("inline_message_id")
		s.InlineMessageID.Encode(e)
	}

	e.FieldStart("query")
	e.Str(s.Query)
	e.ObjEnd()
}

// Decode decodes ChosenInlineResult from json.
func (s *ChosenInlineResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ChosenInlineResult to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result_id":
			v, err := d.Str()
			s.ResultID = string(v)
			if err != nil {
				return err
			}
		case "from":
			if err := s.From.Decode(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.Decode(d); err != nil {
				return err
			}
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.Decode(d); err != nil {
				return err
			}
		case "query":
			v, err := d.Str()
			s.Query = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s ClosePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.Bool(s.Result)
	e.ObjEnd()
}

// Decode decodes ClosePostOK from json.
func (s *ClosePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ClosePostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			v, err := d.Bool()
			s.Result = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Contact) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("phone_number")
	e.Str(s.PhoneNumber)

	e.FieldStart("first_name")
	e.Str(s.FirstName)
	if s.LastName.Set {
		e.FieldStart("last_name")
		s.LastName.Encode(e)
	}
	if s.UserID.Set {
		e.FieldStart("user_id")
		s.UserID.Encode(e)
	}
	if s.Vcard.Set {
		e.FieldStart("vcard")
		s.Vcard.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Contact from json.
func (s *Contact) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Contact to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_number":
			v, err := d.Str()
			s.PhoneNumber = string(v)
			if err != nil {
				return err
			}
		case "first_name":
			v, err := d.Str()
			s.FirstName = string(v)
			if err != nil {
				return err
			}
		case "last_name":
			s.LastName.Reset()
			if err := s.LastName.Decode(d); err != nil {
				return err
			}
		case "user_id":
			s.UserID.Reset()
			if err := s.UserID.Decode(d); err != nil {
				return err
			}
		case "vcard":
			s.Vcard.Reset()
			if err := s.Vcard.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s DeleteStickerFromSetPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.Bool(s.Result)
	e.ObjEnd()
}

// Decode decodes DeleteStickerFromSetPostOK from json.
func (s *DeleteStickerFromSetPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DeleteStickerFromSetPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			v, err := d.Bool()
			s.Result = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s DeleteStickerFromSetPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("sticker")
	e.Str(s.Sticker)
	e.ObjEnd()
}

// Decode decodes DeleteStickerFromSetPostReqApplicationJSON from json.
func (s *DeleteStickerFromSetPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DeleteStickerFromSetPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "sticker":
			v, err := d.Str()
			s.Sticker = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s DeleteWebhookPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.Bool(s.Result)
	e.ObjEnd()
}

// Decode decodes DeleteWebhookPostOK from json.
func (s *DeleteWebhookPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DeleteWebhookPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			v, err := d.Bool()
			s.Result = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s DeleteWebhookPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()
	if s.DropPendingUpdates.Set {
		e.FieldStart("drop_pending_updates")
		s.DropPendingUpdates.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes DeleteWebhookPostReqApplicationJSON from json.
func (s *DeleteWebhookPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode DeleteWebhookPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "drop_pending_updates":
			s.DropPendingUpdates.Reset()
			if err := s.DropPendingUpdates.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Dice) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("emoji")
	e.Str(s.Emoji)

	e.FieldStart("value")
	e.Int(s.Value)
	e.ObjEnd()
}

// Decode decodes Dice from json.
func (s *Dice) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Dice to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "emoji":
			v, err := d.Str()
			s.Emoji = string(v)
			if err != nil {
				return err
			}
		case "value":
			v, err := d.Int()
			s.Value = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Document) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)

	e.FieldStart("file_unique_id")
	e.Str(s.FileUniqueID)
	if s.Thumb.Set {
		e.FieldStart("thumb")
		s.Thumb.Encode(e)
	}
	if s.FileName.Set {
		e.FieldStart("file_name")
		s.FileName.Encode(e)
	}
	if s.MimeType.Set {
		e.FieldStart("mime_type")
		s.MimeType.Encode(e)
	}
	if s.FileSize.Set {
		e.FieldStart("file_size")
		s.FileSize.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Document from json.
func (s *Document) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Document to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := d.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.Decode(d); err != nil {
				return err
			}
		case "file_name":
			s.FileName.Reset()
			if err := s.FileName.Decode(d); err != nil {
				return err
			}
		case "mime_type":
			s.MimeType.Reset()
			if err := s.MimeType.Decode(d); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s EncryptedCredentials) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("data")
	e.Str(s.Data)

	e.FieldStart("hash")
	e.Str(s.Hash)

	e.FieldStart("secret")
	e.Str(s.Secret)
	e.ObjEnd()
}

// Decode decodes EncryptedCredentials from json.
func (s *EncryptedCredentials) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode EncryptedCredentials to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "data":
			v, err := d.Str()
			s.Data = string(v)
			if err != nil {
				return err
			}
		case "hash":
			v, err := d.Str()
			s.Hash = string(v)
			if err != nil {
				return err
			}
		case "secret":
			v, err := d.Str()
			s.Secret = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s EncryptedPassportElement) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("type")
	s.Type.Encode(e)
	if s.Data.Set {
		e.FieldStart("data")
		s.Data.Encode(e)
	}
	if s.PhoneNumber.Set {
		e.FieldStart("phone_number")
		s.PhoneNumber.Encode(e)
	}
	if s.Email.Set {
		e.FieldStart("email")
		s.Email.Encode(e)
	}
	if s.Files != nil {
		e.FieldStart("files")
		e.ArrStart()
		for _, elem := range s.Files {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	if s.FrontSide.Set {
		e.FieldStart("front_side")
		s.FrontSide.Encode(e)
	}
	if s.ReverseSide.Set {
		e.FieldStart("reverse_side")
		s.ReverseSide.Encode(e)
	}
	if s.Selfie.Set {
		e.FieldStart("selfie")
		s.Selfie.Encode(e)
	}
	if s.Translation != nil {
		e.FieldStart("translation")
		e.ArrStart()
		for _, elem := range s.Translation {
			elem.Encode(e)
		}
		e.ArrEnd()
	}

	e.FieldStart("hash")
	e.Str(s.Hash)
	e.ObjEnd()
}

// Decode decodes EncryptedPassportElement from json.
func (s *EncryptedPassportElement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode EncryptedPassportElement to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := s.Type.Decode(d); err != nil {
				return err
			}
		case "data":
			s.Data.Reset()
			if err := s.Data.Decode(d); err != nil {
				return err
			}
		case "phone_number":
			s.PhoneNumber.Reset()
			if err := s.PhoneNumber.Decode(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.Decode(d); err != nil {
				return err
			}
		case "files":
			s.Files = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem PassportFile
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Files = append(s.Files, elem)
				return nil
			}); err != nil {
				return err
			}
		case "front_side":
			s.FrontSide.Reset()
			if err := s.FrontSide.Decode(d); err != nil {
				return err
			}
		case "reverse_side":
			s.ReverseSide.Reset()
			if err := s.ReverseSide.Decode(d); err != nil {
				return err
			}
		case "selfie":
			s.Selfie.Reset()
			if err := s.Selfie.Decode(d); err != nil {
				return err
			}
		case "translation":
			s.Translation = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem PassportFile
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Translation = append(s.Translation, elem)
				return nil
			}); err != nil {
				return err
			}
		case "hash":
			v, err := d.Str()
			s.Hash = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode encodes EncryptedPassportElementType as json.
func (s EncryptedPassportElementType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes EncryptedPassportElementType from json.
func (s *EncryptedPassportElementType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode EncryptedPassportElementType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = EncryptedPassportElementType(v)
	return nil
}

// Encode implements json.Marshaler.
func (s Error) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("error_code")
	e.Int(s.ErrorCode)

	e.FieldStart("description")
	e.Str(s.Description)
	if s.Parameters.Set {
		e.FieldStart("parameters")
		s.Parameters.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Error from json.
func (s *Error) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Error to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "error_code":
			v, err := d.Int()
			s.ErrorCode = int(v)
			if err != nil {
				return err
			}
		case "description":
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "parameters":
			s.Parameters.Reset()
			if err := s.Parameters.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s ErrorStatusCode) Encode(e *jx.Encoder) {
	e.ObjStart()
	e.ObjEnd()
}

// Decode decodes ErrorStatusCode from json.
func (s *ErrorStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ErrorStatusCode to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s File) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)

	e.FieldStart("file_unique_id")
	e.Str(s.FileUniqueID)
	if s.FileSize.Set {
		e.FieldStart("file_size")
		s.FileSize.Encode(e)
	}
	if s.FilePath.Set {
		e.FieldStart("file_path")
		s.FilePath.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes File from json.
func (s *File) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode File to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := d.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.Decode(d); err != nil {
				return err
			}
		case "file_path":
			s.FilePath.Reset()
			if err := s.FilePath.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Game) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("title")
	e.Str(s.Title)

	e.FieldStart("description")
	e.Str(s.Description)

	e.FieldStart("photo")
	e.ArrStart()
	for _, elem := range s.Photo {
		elem.Encode(e)
	}
	e.ArrEnd()
	if s.Text.Set {
		e.FieldStart("text")
		s.Text.Encode(e)
	}
	if s.TextEntities != nil {
		e.FieldStart("text_entities")
		e.ArrStart()
		for _, elem := range s.TextEntities {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	if s.Animation.Set {
		e.FieldStart("animation")
		s.Animation.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Game from json.
func (s *Game) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Game to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "description":
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "photo":
			s.Photo = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem PhotoSize
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Photo = append(s.Photo, elem)
				return nil
			}); err != nil {
				return err
			}
		case "text":
			s.Text.Reset()
			if err := s.Text.Decode(d); err != nil {
				return err
			}
		case "text_entities":
			s.TextEntities = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem MessageEntity
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TextEntities = append(s.TextEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "animation":
			s.Animation.Reset()
			if err := s.Animation.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GameHighScore) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("position")
	e.Int(s.Position)

	e.FieldStart("user")
	s.User.Encode(e)

	e.FieldStart("score")
	e.Int(s.Score)
	e.ObjEnd()
}

// Decode decodes GameHighScore from json.
func (s *GameHighScore) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GameHighScore to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "position":
			v, err := d.Int()
			s.Position = int(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.Decode(d); err != nil {
				return err
			}
		case "score":
			v, err := d.Int()
			s.Score = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetFilePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	s.Result.Encode(e)
	e.ObjEnd()
}

// Decode decodes GetFilePostOK from json.
func (s *GetFilePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetFilePostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			if err := s.Result.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetFilePostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)
	e.ObjEnd()
}

// Decode decodes GetFilePostReqApplicationJSON from json.
func (s *GetFilePostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetFilePostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetGameHighScoresPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.ArrStart()
	for _, elem := range s.Result {
		elem.Encode(e)
	}
	e.ArrEnd()
	e.ObjEnd()
}

// Decode decodes GetGameHighScoresPostOK from json.
func (s *GetGameHighScoresPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetGameHighScoresPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			s.Result = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem GameHighScore
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Result = append(s.Result, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetGameHighScoresPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("user_id")
	e.Int(s.UserID)
	if s.ChatID.Set {
		e.FieldStart("chat_id")
		s.ChatID.Encode(e)
	}
	if s.MessageID.Set {
		e.FieldStart("message_id")
		s.MessageID.Encode(e)
	}
	if s.InlineMessageID.Set {
		e.FieldStart("inline_message_id")
		s.InlineMessageID.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes GetGameHighScoresPostReqApplicationJSON from json.
func (s *GetGameHighScoresPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetGameHighScoresPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "user_id":
			v, err := d.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		case "chat_id":
			s.ChatID.Reset()
			if err := s.ChatID.Decode(d); err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.Decode(d); err != nil {
				return err
			}
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetMePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	s.Result.Encode(e)
	e.ObjEnd()
}

// Decode decodes GetMePostOK from json.
func (s *GetMePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetMePostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			if err := s.Result.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetMyCommandsPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.ArrStart()
	for _, elem := range s.Result {
		elem.Encode(e)
	}
	e.ArrEnd()
	e.ObjEnd()
}

// Decode decodes GetMyCommandsPostOK from json.
func (s *GetMyCommandsPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetMyCommandsPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			s.Result = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem BotCommand
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Result = append(s.Result, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetStickerSetPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	s.Result.Encode(e)
	e.ObjEnd()
}

// Decode decodes GetStickerSetPostOK from json.
func (s *GetStickerSetPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetStickerSetPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			if err := s.Result.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetStickerSetPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// Decode decodes GetStickerSetPostReqApplicationJSON from json.
func (s *GetStickerSetPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetStickerSetPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetUpdatesPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.ArrStart()
	for _, elem := range s.Result {
		elem.Encode(e)
	}
	e.ArrEnd()
	e.ObjEnd()
}

// Decode decodes GetUpdatesPostOK from json.
func (s *GetUpdatesPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetUpdatesPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			s.Result = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem Update
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Result = append(s.Result, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetUpdatesPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()
	if s.Offset.Set {
		e.FieldStart("offset")
		s.Offset.Encode(e)
	}
	if s.Limit.Set {
		e.FieldStart("limit")
		s.Limit.Encode(e)
	}
	if s.Timeout.Set {
		e.FieldStart("timeout")
		s.Timeout.Encode(e)
	}
	if s.AllowedUpdates != nil {
		e.FieldStart("allowed_updates")
		e.ArrStart()
		for _, elem := range s.AllowedUpdates {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ObjEnd()
}

// Decode decodes GetUpdatesPostReqApplicationJSON from json.
func (s *GetUpdatesPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetUpdatesPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "offset":
			s.Offset.Reset()
			if err := s.Offset.Decode(d); err != nil {
				return err
			}
		case "limit":
			s.Limit.Reset()
			if err := s.Limit.Decode(d); err != nil {
				return err
			}
		case "timeout":
			s.Timeout.Reset()
			if err := s.Timeout.Decode(d); err != nil {
				return err
			}
		case "allowed_updates":
			s.AllowedUpdates = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AllowedUpdates = append(s.AllowedUpdates, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetUserProfilePhotosPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	s.Result.Encode(e)
	e.ObjEnd()
}

// Decode decodes GetUserProfilePhotosPostOK from json.
func (s *GetUserProfilePhotosPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetUserProfilePhotosPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			if err := s.Result.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetUserProfilePhotosPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("user_id")
	e.Int(s.UserID)
	if s.Offset.Set {
		e.FieldStart("offset")
		s.Offset.Encode(e)
	}
	if s.Limit.Set {
		e.FieldStart("limit")
		s.Limit.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes GetUserProfilePhotosPostReqApplicationJSON from json.
func (s *GetUserProfilePhotosPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetUserProfilePhotosPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "user_id":
			v, err := d.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		case "offset":
			s.Offset.Reset()
			if err := s.Offset.Decode(d); err != nil {
				return err
			}
		case "limit":
			s.Limit.Reset()
			if err := s.Limit.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s GetWebhookInfoPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	s.Result.Encode(e)
	e.ObjEnd()
}

// Decode decodes GetWebhookInfoPostOK from json.
func (s *GetWebhookInfoPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode GetWebhookInfoPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			if err := s.Result.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s InlineKeyboardButton) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("text")
	e.Str(s.Text)
	if s.URL.Set {
		e.FieldStart("url")
		s.URL.Encode(e)
	}
	if s.LoginURL.Set {
		e.FieldStart("login_url")
		s.LoginURL.Encode(e)
	}
	if s.CallbackData.Set {
		e.FieldStart("callback_data")
		s.CallbackData.Encode(e)
	}
	if s.SwitchInlineQuery.Set {
		e.FieldStart("switch_inline_query")
		s.SwitchInlineQuery.Encode(e)
	}
	if s.SwitchInlineQueryCurrentChat.Set {
		e.FieldStart("switch_inline_query_current_chat")
		s.SwitchInlineQueryCurrentChat.Encode(e)
	}
	if s.CallbackGame.Set {
		e.FieldStart("callback_game")
		s.CallbackGame.Encode(e)
	}
	if s.Pay.Set {
		e.FieldStart("pay")
		s.Pay.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes InlineKeyboardButton from json.
func (s *InlineKeyboardButton) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode InlineKeyboardButton to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "text":
			v, err := d.Str()
			s.Text = string(v)
			if err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.Decode(d); err != nil {
				return err
			}
		case "login_url":
			s.LoginURL.Reset()
			if err := s.LoginURL.Decode(d); err != nil {
				return err
			}
		case "callback_data":
			s.CallbackData.Reset()
			if err := s.CallbackData.Decode(d); err != nil {
				return err
			}
		case "switch_inline_query":
			s.SwitchInlineQuery.Reset()
			if err := s.SwitchInlineQuery.Decode(d); err != nil {
				return err
			}
		case "switch_inline_query_current_chat":
			s.SwitchInlineQueryCurrentChat.Reset()
			if err := s.SwitchInlineQueryCurrentChat.Decode(d); err != nil {
				return err
			}
		case "callback_game":
			s.CallbackGame.Reset()
			if err := s.CallbackGame.Decode(d); err != nil {
				return err
			}
		case "pay":
			s.Pay.Reset()
			if err := s.Pay.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s InlineKeyboardMarkup) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("inline_keyboard")
	e.ArrStart()
	for _, elem := range s.InlineKeyboard {
		e.ArrStart()
		for _, elem := range elem {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	e.ArrEnd()
	e.ObjEnd()
}

// Decode decodes InlineKeyboardMarkup from json.
func (s *InlineKeyboardMarkup) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode InlineKeyboardMarkup to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "inline_keyboard":
			s.InlineKeyboard = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem []InlineKeyboardButton
				elem = nil
				if err := d.Arr(func(d *jx.Decoder) error {
					var elemElem InlineKeyboardButton
					if err := elemElem.Decode(d); err != nil {
						return err
					}
					elem = append(elem, elemElem)
					return nil
				}); err != nil {
					return err
				}
				s.InlineKeyboard = append(s.InlineKeyboard, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s InlineQuery) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Str(s.ID)

	e.FieldStart("from")
	s.From.Encode(e)
	if s.Location.Set {
		e.FieldStart("location")
		s.Location.Encode(e)
	}

	e.FieldStart("query")
	e.Str(s.Query)

	e.FieldStart("offset")
	e.Str(s.Offset)
	e.ObjEnd()
}

// Decode decodes InlineQuery from json.
func (s *InlineQuery) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode InlineQuery to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "from":
			if err := s.From.Decode(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.Decode(d); err != nil {
				return err
			}
		case "query":
			v, err := d.Str()
			s.Query = string(v)
			if err != nil {
				return err
			}
		case "offset":
			v, err := d.Str()
			s.Offset = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Invoice) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("title")
	e.Str(s.Title)

	e.FieldStart("description")
	e.Str(s.Description)

	e.FieldStart("start_parameter")
	e.Str(s.StartParameter)

	e.FieldStart("currency")
	e.Str(s.Currency)

	e.FieldStart("total_amount")
	e.Int(s.TotalAmount)
	e.ObjEnd()
}

// Decode decodes Invoice from json.
func (s *Invoice) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Invoice to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "description":
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "start_parameter":
			v, err := d.Str()
			s.StartParameter = string(v)
			if err != nil {
				return err
			}
		case "currency":
			v, err := d.Str()
			s.Currency = string(v)
			if err != nil {
				return err
			}
		case "total_amount":
			v, err := d.Int()
			s.TotalAmount = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s LabeledPrice) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("label")
	e.Str(s.Label)

	e.FieldStart("amount")
	e.Int(s.Amount)
	e.ObjEnd()
}

// Decode decodes LabeledPrice from json.
func (s *LabeledPrice) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode LabeledPrice to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "label":
			v, err := d.Str()
			s.Label = string(v)
			if err != nil {
				return err
			}
		case "amount":
			v, err := d.Int()
			s.Amount = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Location) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("longitude")
	e.Float64(s.Longitude)

	e.FieldStart("latitude")
	e.Float64(s.Latitude)
	if s.HorizontalAccuracy.Set {
		e.FieldStart("horizontal_accuracy")
		s.HorizontalAccuracy.Encode(e)
	}
	if s.LivePeriod.Set {
		e.FieldStart("live_period")
		s.LivePeriod.Encode(e)
	}
	if s.Heading.Set {
		e.FieldStart("heading")
		s.Heading.Encode(e)
	}
	if s.ProximityAlertRadius.Set {
		e.FieldStart("proximity_alert_radius")
		s.ProximityAlertRadius.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Location from json.
func (s *Location) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Location to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "longitude":
			v, err := d.Float64()
			s.Longitude = float64(v)
			if err != nil {
				return err
			}
		case "latitude":
			v, err := d.Float64()
			s.Latitude = float64(v)
			if err != nil {
				return err
			}
		case "horizontal_accuracy":
			s.HorizontalAccuracy.Reset()
			if err := s.HorizontalAccuracy.Decode(d); err != nil {
				return err
			}
		case "live_period":
			s.LivePeriod.Reset()
			if err := s.LivePeriod.Decode(d); err != nil {
				return err
			}
		case "heading":
			s.Heading.Reset()
			if err := s.Heading.Decode(d); err != nil {
				return err
			}
		case "proximity_alert_radius":
			s.ProximityAlertRadius.Reset()
			if err := s.ProximityAlertRadius.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s LogOutPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.Bool(s.Result)
	e.ObjEnd()
}

// Decode decodes LogOutPostOK from json.
func (s *LogOutPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode LogOutPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			v, err := d.Bool()
			s.Result = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s LoginUrl) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("url")
	e.Str(s.URL)
	if s.ForwardText.Set {
		e.FieldStart("forward_text")
		s.ForwardText.Encode(e)
	}
	if s.BotUsername.Set {
		e.FieldStart("bot_username")
		s.BotUsername.Encode(e)
	}
	if s.RequestWriteAccess.Set {
		e.FieldStart("request_write_access")
		s.RequestWriteAccess.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes LoginUrl from json.
func (s *LoginUrl) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode LoginUrl to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "forward_text":
			s.ForwardText.Reset()
			if err := s.ForwardText.Decode(d); err != nil {
				return err
			}
		case "bot_username":
			s.BotUsername.Reset()
			if err := s.BotUsername.Decode(d); err != nil {
				return err
			}
		case "request_write_access":
			s.RequestWriteAccess.Reset()
			if err := s.RequestWriteAccess.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s MaskPosition) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("point")
	s.Point.Encode(e)

	e.FieldStart("x_shift")
	e.Float64(s.XShift)

	e.FieldStart("y_shift")
	e.Float64(s.YShift)

	e.FieldStart("scale")
	e.Float64(s.Scale)
	e.ObjEnd()
}

// Decode decodes MaskPosition from json.
func (s *MaskPosition) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MaskPosition to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "point":
			if err := s.Point.Decode(d); err != nil {
				return err
			}
		case "x_shift":
			v, err := d.Float64()
			s.XShift = float64(v)
			if err != nil {
				return err
			}
		case "y_shift":
			v, err := d.Float64()
			s.YShift = float64(v)
			if err != nil {
				return err
			}
		case "scale":
			v, err := d.Float64()
			s.Scale = float64(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode encodes MaskPositionPoint as json.
func (s MaskPositionPoint) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes MaskPositionPoint from json.
func (s *MaskPositionPoint) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MaskPositionPoint to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MaskPositionPoint(v)
	return nil
}

// Encode implements json.Marshaler.
func (s Message) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("message_id")
	e.Int(s.MessageID)
	if s.From.Set {
		e.FieldStart("from")
		s.From.Encode(e)
	}
	if s.SenderChat.Set {
		e.FieldStart("sender_chat")
		s.SenderChat.Encode(e)
	}

	e.FieldStart("date")
	e.Int(s.Date)

	e.FieldStart("chat")
	s.Chat.Encode(e)
	if s.ForwardFrom.Set {
		e.FieldStart("forward_from")
		s.ForwardFrom.Encode(e)
	}
	if s.ForwardFromChat.Set {
		e.FieldStart("forward_from_chat")
		s.ForwardFromChat.Encode(e)
	}
	if s.ForwardFromMessageID.Set {
		e.FieldStart("forward_from_message_id")
		s.ForwardFromMessageID.Encode(e)
	}
	if s.ForwardSignature.Set {
		e.FieldStart("forward_signature")
		s.ForwardSignature.Encode(e)
	}
	if s.ForwardSenderName.Set {
		e.FieldStart("forward_sender_name")
		s.ForwardSenderName.Encode(e)
	}
	if s.ForwardDate.Set {
		e.FieldStart("forward_date")
		s.ForwardDate.Encode(e)
	}
	if s.ReplyToMessage != nil {
		e.FieldStart("reply_to_message")
		s.ReplyToMessage.Encode(e)
	}
	if s.ViaBot.Set {
		e.FieldStart("via_bot")
		s.ViaBot.Encode(e)
	}
	if s.EditDate.Set {
		e.FieldStart("edit_date")
		s.EditDate.Encode(e)
	}
	if s.MediaGroupID.Set {
		e.FieldStart("media_group_id")
		s.MediaGroupID.Encode(e)
	}
	if s.AuthorSignature.Set {
		e.FieldStart("author_signature")
		s.AuthorSignature.Encode(e)
	}
	if s.Text.Set {
		e.FieldStart("text")
		s.Text.Encode(e)
	}
	if s.Entities != nil {
		e.FieldStart("entities")
		e.ArrStart()
		for _, elem := range s.Entities {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	if s.Animation.Set {
		e.FieldStart("animation")
		s.Animation.Encode(e)
	}
	if s.Audio.Set {
		e.FieldStart("audio")
		s.Audio.Encode(e)
	}
	if s.Document.Set {
		e.FieldStart("document")
		s.Document.Encode(e)
	}
	if s.Photo != nil {
		e.FieldStart("photo")
		e.ArrStart()
		for _, elem := range s.Photo {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	if s.Sticker.Set {
		e.FieldStart("sticker")
		s.Sticker.Encode(e)
	}
	if s.Video.Set {
		e.FieldStart("video")
		s.Video.Encode(e)
	}
	if s.VideoNote.Set {
		e.FieldStart("video_note")
		s.VideoNote.Encode(e)
	}
	if s.Voice.Set {
		e.FieldStart("voice")
		s.Voice.Encode(e)
	}
	if s.Caption.Set {
		e.FieldStart("caption")
		s.Caption.Encode(e)
	}
	if s.CaptionEntities != nil {
		e.FieldStart("caption_entities")
		e.ArrStart()
		for _, elem := range s.CaptionEntities {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	if s.Contact.Set {
		e.FieldStart("contact")
		s.Contact.Encode(e)
	}
	if s.Dice.Set {
		e.FieldStart("dice")
		s.Dice.Encode(e)
	}
	if s.Game.Set {
		e.FieldStart("game")
		s.Game.Encode(e)
	}
	if s.Poll.Set {
		e.FieldStart("poll")
		s.Poll.Encode(e)
	}
	if s.Venue.Set {
		e.FieldStart("venue")
		s.Venue.Encode(e)
	}
	if s.Location.Set {
		e.FieldStart("location")
		s.Location.Encode(e)
	}
	if s.NewChatMembers != nil {
		e.FieldStart("new_chat_members")
		e.ArrStart()
		for _, elem := range s.NewChatMembers {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	if s.LeftChatMember.Set {
		e.FieldStart("left_chat_member")
		s.LeftChatMember.Encode(e)
	}
	if s.NewChatTitle.Set {
		e.FieldStart("new_chat_title")
		s.NewChatTitle.Encode(e)
	}
	if s.NewChatPhoto != nil {
		e.FieldStart("new_chat_photo")
		e.ArrStart()
		for _, elem := range s.NewChatPhoto {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	if s.DeleteChatPhoto.Set {
		e.FieldStart("delete_chat_photo")
		s.DeleteChatPhoto.Encode(e)
	}
	if s.GroupChatCreated.Set {
		e.FieldStart("group_chat_created")
		s.GroupChatCreated.Encode(e)
	}
	if s.SupergroupChatCreated.Set {
		e.FieldStart("supergroup_chat_created")
		s.SupergroupChatCreated.Encode(e)
	}
	if s.ChannelChatCreated.Set {
		e.FieldStart("channel_chat_created")
		s.ChannelChatCreated.Encode(e)
	}
	if s.MigrateToChatID.Set {
		e.FieldStart("migrate_to_chat_id")
		s.MigrateToChatID.Encode(e)
	}
	if s.MigrateFromChatID.Set {
		e.FieldStart("migrate_from_chat_id")
		s.MigrateFromChatID.Encode(e)
	}
	if s.PinnedMessage != nil {
		e.FieldStart("pinned_message")
		s.PinnedMessage.Encode(e)
	}
	if s.Invoice.Set {
		e.FieldStart("invoice")
		s.Invoice.Encode(e)
	}
	if s.SuccessfulPayment.Set {
		e.FieldStart("successful_payment")
		s.SuccessfulPayment.Encode(e)
	}
	if s.ConnectedWebsite.Set {
		e.FieldStart("connected_website")
		s.ConnectedWebsite.Encode(e)
	}
	if s.PassportData.Set {
		e.FieldStart("passport_data")
		s.PassportData.Encode(e)
	}
	if s.ProximityAlertTriggered.Set {
		e.FieldStart("proximity_alert_triggered")
		s.ProximityAlertTriggered.Encode(e)
	}
	if s.ReplyMarkup.Set {
		e.FieldStart("reply_markup")
		s.ReplyMarkup.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Message from json.
func (s *Message) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Message to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message_id":
			v, err := d.Int()
			s.MessageID = int(v)
			if err != nil {
				return err
			}
		case "from":
			s.From.Reset()
			if err := s.From.Decode(d); err != nil {
				return err
			}
		case "sender_chat":
			s.SenderChat.Reset()
			if err := s.SenderChat.Decode(d); err != nil {
				return err
			}
		case "date":
			v, err := d.Int()
			s.Date = int(v)
			if err != nil {
				return err
			}
		case "chat":
			if err := s.Chat.Decode(d); err != nil {
				return err
			}
		case "forward_from":
			s.ForwardFrom.Reset()
			if err := s.ForwardFrom.Decode(d); err != nil {
				return err
			}
		case "forward_from_chat":
			s.ForwardFromChat.Reset()
			if err := s.ForwardFromChat.Decode(d); err != nil {
				return err
			}
		case "forward_from_message_id":
			s.ForwardFromMessageID.Reset()
			if err := s.ForwardFromMessageID.Decode(d); err != nil {
				return err
			}
		case "forward_signature":
			s.ForwardSignature.Reset()
			if err := s.ForwardSignature.Decode(d); err != nil {
				return err
			}
		case "forward_sender_name":
			s.ForwardSenderName.Reset()
			if err := s.ForwardSenderName.Decode(d); err != nil {
				return err
			}
		case "forward_date":
			s.ForwardDate.Reset()
			if err := s.ForwardDate.Decode(d); err != nil {
				return err
			}
		case "reply_to_message":
			s.ReplyToMessage = nil
			var elem Message
			if err := elem.Decode(d); err != nil {
				return err
			}
			s.ReplyToMessage = &elem
		case "via_bot":
			s.ViaBot.Reset()
			if err := s.ViaBot.Decode(d); err != nil {
				return err
			}
		case "edit_date":
			s.EditDate.Reset()
			if err := s.EditDate.Decode(d); err != nil {
				return err
			}
		case "media_group_id":
			s.MediaGroupID.Reset()
			if err := s.MediaGroupID.Decode(d); err != nil {
				return err
			}
		case "author_signature":
			s.AuthorSignature.Reset()
			if err := s.AuthorSignature.Decode(d); err != nil {
				return err
			}
		case "text":
			s.Text.Reset()
			if err := s.Text.Decode(d); err != nil {
				return err
			}
		case "entities":
			s.Entities = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem MessageEntity
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Entities = append(s.Entities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "animation":
			s.Animation.Reset()
			if err := s.Animation.Decode(d); err != nil {
				return err
			}
		case "audio":
			s.Audio.Reset()
			if err := s.Audio.Decode(d); err != nil {
				return err
			}
		case "document":
			s.Document.Reset()
			if err := s.Document.Decode(d); err != nil {
				return err
			}
		case "photo":
			s.Photo = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem PhotoSize
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Photo = append(s.Photo, elem)
				return nil
			}); err != nil {
				return err
			}
		case "sticker":
			s.Sticker.Reset()
			if err := s.Sticker.Decode(d); err != nil {
				return err
			}
		case "video":
			s.Video.Reset()
			if err := s.Video.Decode(d); err != nil {
				return err
			}
		case "video_note":
			s.VideoNote.Reset()
			if err := s.VideoNote.Decode(d); err != nil {
				return err
			}
		case "voice":
			s.Voice.Reset()
			if err := s.Voice.Decode(d); err != nil {
				return err
			}
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.Decode(d); err != nil {
				return err
			}
		case "caption_entities":
			s.CaptionEntities = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem MessageEntity
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CaptionEntities = append(s.CaptionEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "contact":
			s.Contact.Reset()
			if err := s.Contact.Decode(d); err != nil {
				return err
			}
		case "dice":
			s.Dice.Reset()
			if err := s.Dice.Decode(d); err != nil {
				return err
			}
		case "game":
			s.Game.Reset()
			if err := s.Game.Decode(d); err != nil {
				return err
			}
		case "poll":
			s.Poll.Reset()
			if err := s.Poll.Decode(d); err != nil {
				return err
			}
		case "venue":
			s.Venue.Reset()
			if err := s.Venue.Decode(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.Decode(d); err != nil {
				return err
			}
		case "new_chat_members":
			s.NewChatMembers = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem User
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.NewChatMembers = append(s.NewChatMembers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "left_chat_member":
			s.LeftChatMember.Reset()
			if err := s.LeftChatMember.Decode(d); err != nil {
				return err
			}
		case "new_chat_title":
			s.NewChatTitle.Reset()
			if err := s.NewChatTitle.Decode(d); err != nil {
				return err
			}
		case "new_chat_photo":
			s.NewChatPhoto = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem PhotoSize
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.NewChatPhoto = append(s.NewChatPhoto, elem)
				return nil
			}); err != nil {
				return err
			}
		case "delete_chat_photo":
			s.DeleteChatPhoto.Reset()
			if err := s.DeleteChatPhoto.Decode(d); err != nil {
				return err
			}
		case "group_chat_created":
			s.GroupChatCreated.Reset()
			if err := s.GroupChatCreated.Decode(d); err != nil {
				return err
			}
		case "supergroup_chat_created":
			s.SupergroupChatCreated.Reset()
			if err := s.SupergroupChatCreated.Decode(d); err != nil {
				return err
			}
		case "channel_chat_created":
			s.ChannelChatCreated.Reset()
			if err := s.ChannelChatCreated.Decode(d); err != nil {
				return err
			}
		case "migrate_to_chat_id":
			s.MigrateToChatID.Reset()
			if err := s.MigrateToChatID.Decode(d); err != nil {
				return err
			}
		case "migrate_from_chat_id":
			s.MigrateFromChatID.Reset()
			if err := s.MigrateFromChatID.Decode(d); err != nil {
				return err
			}
		case "pinned_message":
			s.PinnedMessage = nil
			var elem Message
			if err := elem.Decode(d); err != nil {
				return err
			}
			s.PinnedMessage = &elem
		case "invoice":
			s.Invoice.Reset()
			if err := s.Invoice.Decode(d); err != nil {
				return err
			}
		case "successful_payment":
			s.SuccessfulPayment.Reset()
			if err := s.SuccessfulPayment.Decode(d); err != nil {
				return err
			}
		case "connected_website":
			s.ConnectedWebsite.Reset()
			if err := s.ConnectedWebsite.Decode(d); err != nil {
				return err
			}
		case "passport_data":
			s.PassportData.Reset()
			if err := s.PassportData.Decode(d); err != nil {
				return err
			}
		case "proximity_alert_triggered":
			s.ProximityAlertTriggered.Reset()
			if err := s.ProximityAlertTriggered.Decode(d); err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s MessageEntity) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("type")
	s.Type.Encode(e)

	e.FieldStart("offset")
	e.Int(s.Offset)

	e.FieldStart("length")
	e.Int(s.Length)
	if s.URL.Set {
		e.FieldStart("url")
		s.URL.Encode(e)
	}
	if s.User.Set {
		e.FieldStart("user")
		s.User.Encode(e)
	}
	if s.Language.Set {
		e.FieldStart("language")
		s.Language.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes MessageEntity from json.
func (s *MessageEntity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MessageEntity to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := s.Type.Decode(d); err != nil {
				return err
			}
		case "offset":
			v, err := d.Int()
			s.Offset = int(v)
			if err != nil {
				return err
			}
		case "length":
			v, err := d.Int()
			s.Length = int(v)
			if err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.Decode(d); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.Decode(d); err != nil {
				return err
			}
		case "language":
			s.Language.Reset()
			if err := s.Language.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode encodes MessageEntityType as json.
func (s MessageEntityType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes MessageEntityType from json.
func (s *MessageEntityType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode MessageEntityType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MessageEntityType(v)
	return nil
}

// Encode encodes Animation as json.
func (o OptAnimation) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Animation from json.
func (o *OptAnimation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptAnimation to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptAnimation`, d.Next())
	}
}

// Encode encodes Audio as json.
func (o OptAudio) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Audio from json.
func (o *OptAudio) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptAudio to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptAudio`, d.Next())
	}
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptBool to nil`)
	}
	switch d.Next() {
	case jx.Bool:
		o.Set = true
		v, err := d.Bool()
		if err != nil {
			return err
		}
		o.Value = bool(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptBool`, d.Next())
	}
}

// Encode encodes CallbackGame as json.
func (o OptCallbackGame) Encode(e *jx.Encoder) {
}

// Decode decodes CallbackGame from json.
func (o *OptCallbackGame) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptCallbackGame to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptCallbackGame`, d.Next())
	}
}

// Encode encodes CallbackQuery as json.
func (o OptCallbackQuery) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes CallbackQuery from json.
func (o *OptCallbackQuery) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptCallbackQuery to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptCallbackQuery`, d.Next())
	}
}

// Encode encodes Chat as json.
func (o OptChat) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Chat from json.
func (o *OptChat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptChat to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptChat`, d.Next())
	}
}

// Encode encodes ChatLocation as json.
func (o OptChatLocation) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes ChatLocation from json.
func (o *OptChatLocation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptChatLocation to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptChatLocation`, d.Next())
	}
}

// Encode encodes ChatPermissions as json.
func (o OptChatPermissions) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes ChatPermissions from json.
func (o *OptChatPermissions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptChatPermissions to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptChatPermissions`, d.Next())
	}
}

// Encode encodes ChatPhoto as json.
func (o OptChatPhoto) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes ChatPhoto from json.
func (o *OptChatPhoto) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptChatPhoto to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptChatPhoto`, d.Next())
	}
}

// Encode encodes ChosenInlineResult as json.
func (o OptChosenInlineResult) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes ChosenInlineResult from json.
func (o *OptChosenInlineResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptChosenInlineResult to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptChosenInlineResult`, d.Next())
	}
}

// Encode encodes Contact as json.
func (o OptContact) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Contact from json.
func (o *OptContact) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptContact to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptContact`, d.Next())
	}
}

// Encode encodes Dice as json.
func (o OptDice) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Dice from json.
func (o *OptDice) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptDice to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptDice`, d.Next())
	}
}

// Encode encodes Document as json.
func (o OptDocument) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Document from json.
func (o *OptDocument) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptDocument to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptDocument`, d.Next())
	}
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptFloat64 to nil`)
	}
	switch d.Next() {
	case jx.Number:
		o.Set = true
		v, err := d.Float64()
		if err != nil {
			return err
		}
		o.Value = float64(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptFloat64`, d.Next())
	}
}

// Encode encodes Game as json.
func (o OptGame) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Game from json.
func (o *OptGame) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptGame to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptGame`, d.Next())
	}
}

// Encode encodes InlineKeyboardMarkup as json.
func (o OptInlineKeyboardMarkup) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes InlineKeyboardMarkup from json.
func (o *OptInlineKeyboardMarkup) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptInlineKeyboardMarkup to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptInlineKeyboardMarkup`, d.Next())
	}
}

// Encode encodes InlineQuery as json.
func (o OptInlineQuery) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes InlineQuery from json.
func (o *OptInlineQuery) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptInlineQuery to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptInlineQuery`, d.Next())
	}
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptInt to nil`)
	}
	switch d.Next() {
	case jx.Number:
		o.Set = true
		v, err := d.Int()
		if err != nil {
			return err
		}
		o.Value = int(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptInt`, d.Next())
	}
}

// Encode encodes Invoice as json.
func (o OptInvoice) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Invoice from json.
func (o *OptInvoice) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptInvoice to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptInvoice`, d.Next())
	}
}

// Encode encodes Location as json.
func (o OptLocation) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Location from json.
func (o *OptLocation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptLocation to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptLocation`, d.Next())
	}
}

// Encode encodes LoginUrl as json.
func (o OptLoginUrl) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes LoginUrl from json.
func (o *OptLoginUrl) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptLoginUrl to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptLoginUrl`, d.Next())
	}
}

// Encode encodes MaskPosition as json.
func (o OptMaskPosition) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes MaskPosition from json.
func (o *OptMaskPosition) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptMaskPosition to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptMaskPosition`, d.Next())
	}
}

// Encode encodes Message as json.
func (o OptMessage) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Message from json.
func (o *OptMessage) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptMessage to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptMessage`, d.Next())
	}
}

// Encode encodes OrderInfo as json.
func (o OptOrderInfo) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes OrderInfo from json.
func (o *OptOrderInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptOrderInfo to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptOrderInfo`, d.Next())
	}
}

// Encode encodes PassportData as json.
func (o OptPassportData) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes PassportData from json.
func (o *OptPassportData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptPassportData to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptPassportData`, d.Next())
	}
}

// Encode encodes PassportFile as json.
func (o OptPassportFile) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes PassportFile from json.
func (o *OptPassportFile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptPassportFile to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptPassportFile`, d.Next())
	}
}

// Encode encodes PhotoSize as json.
func (o OptPhotoSize) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes PhotoSize from json.
func (o *OptPhotoSize) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptPhotoSize to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptPhotoSize`, d.Next())
	}
}

// Encode encodes Poll as json.
func (o OptPoll) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Poll from json.
func (o *OptPoll) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptPoll to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptPoll`, d.Next())
	}
}

// Encode encodes PollAnswer as json.
func (o OptPollAnswer) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes PollAnswer from json.
func (o *OptPollAnswer) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptPollAnswer to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptPollAnswer`, d.Next())
	}
}

// Encode encodes PreCheckoutQuery as json.
func (o OptPreCheckoutQuery) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes PreCheckoutQuery from json.
func (o *OptPreCheckoutQuery) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptPreCheckoutQuery to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptPreCheckoutQuery`, d.Next())
	}
}

// Encode encodes ProximityAlertTriggered as json.
func (o OptProximityAlertTriggered) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes ProximityAlertTriggered from json.
func (o *OptProximityAlertTriggered) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptProximityAlertTriggered to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptProximityAlertTriggered`, d.Next())
	}
}

// Encode encodes ResponseParameters as json.
func (o OptResponseParameters) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes ResponseParameters from json.
func (o *OptResponseParameters) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptResponseParameters to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptResponseParameters`, d.Next())
	}
}

// Encode encodes ShippingAddress as json.
func (o OptShippingAddress) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes ShippingAddress from json.
func (o *OptShippingAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptShippingAddress to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptShippingAddress`, d.Next())
	}
}

// Encode encodes ShippingQuery as json.
func (o OptShippingQuery) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes ShippingQuery from json.
func (o *OptShippingQuery) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptShippingQuery to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptShippingQuery`, d.Next())
	}
}

// Encode encodes Sticker as json.
func (o OptSticker) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Sticker from json.
func (o *OptSticker) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptSticker to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptSticker`, d.Next())
	}
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptString to nil`)
	}
	switch d.Next() {
	case jx.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptString`, d.Next())
	}
}

// Encode encodes SuccessfulPayment as json.
func (o OptSuccessfulPayment) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes SuccessfulPayment from json.
func (o *OptSuccessfulPayment) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptSuccessfulPayment to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptSuccessfulPayment`, d.Next())
	}
}

// Encode encodes User as json.
func (o OptUser) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes User from json.
func (o *OptUser) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptUser to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptUser`, d.Next())
	}
}

// Encode encodes Venue as json.
func (o OptVenue) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Venue from json.
func (o *OptVenue) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptVenue to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptVenue`, d.Next())
	}
}

// Encode encodes Video as json.
func (o OptVideo) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Video from json.
func (o *OptVideo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptVideo to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptVideo`, d.Next())
	}
}

// Encode encodes VideoNote as json.
func (o OptVideoNote) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes VideoNote from json.
func (o *OptVideoNote) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptVideoNote to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptVideoNote`, d.Next())
	}
}

// Encode encodes Voice as json.
func (o OptVoice) Encode(e *jx.Encoder) {
	o.Value.Encode(e)
}

// Decode decodes Voice from json.
func (o *OptVoice) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New(`invalid: unable to decode OptVoice to nil`)
	}
	switch d.Next() {
	case jx.Object:
		o.Set = true
		if err := o.Value.Decode(d); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf(`unexpected type %q while reading OptVoice`, d.Next())
	}
}

// Encode implements json.Marshaler.
func (s OrderInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	if s.Name.Set {
		e.FieldStart("name")
		s.Name.Encode(e)
	}
	if s.PhoneNumber.Set {
		e.FieldStart("phone_number")
		s.PhoneNumber.Encode(e)
	}
	if s.Email.Set {
		e.FieldStart("email")
		s.Email.Encode(e)
	}
	if s.ShippingAddress.Set {
		e.FieldStart("shipping_address")
		s.ShippingAddress.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes OrderInfo from json.
func (s *OrderInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode OrderInfo to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.Decode(d); err != nil {
				return err
			}
		case "phone_number":
			s.PhoneNumber.Reset()
			if err := s.PhoneNumber.Decode(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.Decode(d); err != nil {
				return err
			}
		case "shipping_address":
			s.ShippingAddress.Reset()
			if err := s.ShippingAddress.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PassportData) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("data")
	e.ArrStart()
	for _, elem := range s.Data {
		elem.Encode(e)
	}
	e.ArrEnd()

	e.FieldStart("credentials")
	s.Credentials.Encode(e)
	e.ObjEnd()
}

// Decode decodes PassportData from json.
func (s *PassportData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PassportData to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "data":
			s.Data = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem EncryptedPassportElement
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Data = append(s.Data, elem)
				return nil
			}); err != nil {
				return err
			}
		case "credentials":
			if err := s.Credentials.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PassportFile) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)

	e.FieldStart("file_unique_id")
	e.Str(s.FileUniqueID)

	e.FieldStart("file_size")
	e.Int(s.FileSize)

	e.FieldStart("file_date")
	e.Int(s.FileDate)
	e.ObjEnd()
}

// Decode decodes PassportFile from json.
func (s *PassportFile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PassportFile to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := d.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "file_size":
			v, err := d.Int()
			s.FileSize = int(v)
			if err != nil {
				return err
			}
		case "file_date":
			v, err := d.Int()
			s.FileDate = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PhotoSize) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)

	e.FieldStart("file_unique_id")
	e.Str(s.FileUniqueID)

	e.FieldStart("width")
	e.Int(s.Width)

	e.FieldStart("height")
	e.Int(s.Height)
	if s.FileSize.Set {
		e.FieldStart("file_size")
		s.FileSize.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes PhotoSize from json.
func (s *PhotoSize) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PhotoSize to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := d.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "width":
			v, err := d.Int()
			s.Width = int(v)
			if err != nil {
				return err
			}
		case "height":
			v, err := d.Int()
			s.Height = int(v)
			if err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Poll) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Str(s.ID)

	e.FieldStart("question")
	e.Str(s.Question)

	e.FieldStart("options")
	e.ArrStart()
	for _, elem := range s.Options {
		elem.Encode(e)
	}
	e.ArrEnd()

	e.FieldStart("total_voter_count")
	e.Int(s.TotalVoterCount)

	e.FieldStart("is_closed")
	e.Bool(s.IsClosed)

	e.FieldStart("is_anonymous")
	e.Bool(s.IsAnonymous)

	e.FieldStart("type")
	e.Str(s.Type)

	e.FieldStart("allows_multiple_answers")
	e.Bool(s.AllowsMultipleAnswers)
	if s.CorrectOptionID.Set {
		e.FieldStart("correct_option_id")
		s.CorrectOptionID.Encode(e)
	}
	if s.Explanation.Set {
		e.FieldStart("explanation")
		s.Explanation.Encode(e)
	}
	if s.ExplanationEntities != nil {
		e.FieldStart("explanation_entities")
		e.ArrStart()
		for _, elem := range s.ExplanationEntities {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	if s.OpenPeriod.Set {
		e.FieldStart("open_period")
		s.OpenPeriod.Encode(e)
	}
	if s.CloseDate.Set {
		e.FieldStart("close_date")
		s.CloseDate.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Poll from json.
func (s *Poll) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Poll to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "question":
			v, err := d.Str()
			s.Question = string(v)
			if err != nil {
				return err
			}
		case "options":
			s.Options = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem PollOption
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Options = append(s.Options, elem)
				return nil
			}); err != nil {
				return err
			}
		case "total_voter_count":
			v, err := d.Int()
			s.TotalVoterCount = int(v)
			if err != nil {
				return err
			}
		case "is_closed":
			v, err := d.Bool()
			s.IsClosed = bool(v)
			if err != nil {
				return err
			}
		case "is_anonymous":
			v, err := d.Bool()
			s.IsAnonymous = bool(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "allows_multiple_answers":
			v, err := d.Bool()
			s.AllowsMultipleAnswers = bool(v)
			if err != nil {
				return err
			}
		case "correct_option_id":
			s.CorrectOptionID.Reset()
			if err := s.CorrectOptionID.Decode(d); err != nil {
				return err
			}
		case "explanation":
			s.Explanation.Reset()
			if err := s.Explanation.Decode(d); err != nil {
				return err
			}
		case "explanation_entities":
			s.ExplanationEntities = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem MessageEntity
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ExplanationEntities = append(s.ExplanationEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "open_period":
			s.OpenPeriod.Reset()
			if err := s.OpenPeriod.Decode(d); err != nil {
				return err
			}
		case "close_date":
			s.CloseDate.Reset()
			if err := s.CloseDate.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PollAnswer) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("poll_id")
	e.Str(s.PollID)

	e.FieldStart("user")
	s.User.Encode(e)

	e.FieldStart("option_ids")
	e.ArrStart()
	for _, elem := range s.OptionIds {
		e.Int(elem)
	}
	e.ArrEnd()
	e.ObjEnd()
}

// Decode decodes PollAnswer from json.
func (s *PollAnswer) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PollAnswer to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "poll_id":
			v, err := d.Str()
			s.PollID = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.Decode(d); err != nil {
				return err
			}
		case "option_ids":
			s.OptionIds = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.OptionIds = append(s.OptionIds, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PollOption) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("text")
	e.Str(s.Text)

	e.FieldStart("voter_count")
	e.Int(s.VoterCount)
	e.ObjEnd()
}

// Decode decodes PollOption from json.
func (s *PollOption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PollOption to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "text":
			v, err := d.Str()
			s.Text = string(v)
			if err != nil {
				return err
			}
		case "voter_count":
			v, err := d.Int()
			s.VoterCount = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s PreCheckoutQuery) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Str(s.ID)

	e.FieldStart("from")
	s.From.Encode(e)

	e.FieldStart("currency")
	e.Str(s.Currency)

	e.FieldStart("total_amount")
	e.Int(s.TotalAmount)

	e.FieldStart("invoice_payload")
	e.Str(s.InvoicePayload)
	if s.ShippingOptionID.Set {
		e.FieldStart("shipping_option_id")
		s.ShippingOptionID.Encode(e)
	}
	if s.OrderInfo.Set {
		e.FieldStart("order_info")
		s.OrderInfo.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes PreCheckoutQuery from json.
func (s *PreCheckoutQuery) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode PreCheckoutQuery to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "from":
			if err := s.From.Decode(d); err != nil {
				return err
			}
		case "currency":
			v, err := d.Str()
			s.Currency = string(v)
			if err != nil {
				return err
			}
		case "total_amount":
			v, err := d.Int()
			s.TotalAmount = int(v)
			if err != nil {
				return err
			}
		case "invoice_payload":
			v, err := d.Str()
			s.InvoicePayload = string(v)
			if err != nil {
				return err
			}
		case "shipping_option_id":
			s.ShippingOptionID.Reset()
			if err := s.ShippingOptionID.Decode(d); err != nil {
				return err
			}
		case "order_info":
			s.OrderInfo.Reset()
			if err := s.OrderInfo.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s ProximityAlertTriggered) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("traveler")
	s.Traveler.Encode(e)

	e.FieldStart("watcher")
	s.Watcher.Encode(e)

	e.FieldStart("distance")
	e.Int(s.Distance)
	e.ObjEnd()
}

// Decode decodes ProximityAlertTriggered from json.
func (s *ProximityAlertTriggered) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ProximityAlertTriggered to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "traveler":
			if err := s.Traveler.Decode(d); err != nil {
				return err
			}
		case "watcher":
			if err := s.Watcher.Decode(d); err != nil {
				return err
			}
		case "distance":
			v, err := d.Int()
			s.Distance = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s ResponseParameters) Encode(e *jx.Encoder) {
	e.ObjStart()
	if s.MigrateToChatID.Set {
		e.FieldStart("migrate_to_chat_id")
		s.MigrateToChatID.Encode(e)
	}
	if s.RetryAfter.Set {
		e.FieldStart("retry_after")
		s.RetryAfter.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes ResponseParameters from json.
func (s *ResponseParameters) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ResponseParameters to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "migrate_to_chat_id":
			s.MigrateToChatID.Reset()
			if err := s.MigrateToChatID.Decode(d); err != nil {
				return err
			}
		case "retry_after":
			s.RetryAfter.Reset()
			if err := s.RetryAfter.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s SendGamePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	s.Result.Encode(e)
	e.ObjEnd()
}

// Decode decodes SendGamePostOK from json.
func (s *SendGamePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SendGamePostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			if err := s.Result.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s SendGamePostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("chat_id")
	e.Int(s.ChatID)

	e.FieldStart("game_short_name")
	e.Str(s.GameShortName)
	if s.DisableNotification.Set {
		e.FieldStart("disable_notification")
		s.DisableNotification.Encode(e)
	}
	if s.ReplyToMessageID.Set {
		e.FieldStart("reply_to_message_id")
		s.ReplyToMessageID.Encode(e)
	}
	if s.AllowSendingWithoutReply.Set {
		e.FieldStart("allow_sending_without_reply")
		s.AllowSendingWithoutReply.Encode(e)
	}
	if s.ReplyMarkup.Set {
		e.FieldStart("reply_markup")
		s.ReplyMarkup.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes SendGamePostReqApplicationJSON from json.
func (s *SendGamePostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SendGamePostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "chat_id":
			v, err := d.Int()
			s.ChatID = int(v)
			if err != nil {
				return err
			}
		case "game_short_name":
			v, err := d.Str()
			s.GameShortName = string(v)
			if err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.Decode(d); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.Decode(d); err != nil {
				return err
			}
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.Decode(d); err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s SendInvoicePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	s.Result.Encode(e)
	e.ObjEnd()
}

// Decode decodes SendInvoicePostOK from json.
func (s *SendInvoicePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SendInvoicePostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			if err := s.Result.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s SendInvoicePostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("chat_id")
	e.Int(s.ChatID)

	e.FieldStart("title")
	e.Str(s.Title)

	e.FieldStart("description")
	e.Str(s.Description)

	e.FieldStart("payload")
	e.Str(s.Payload)

	e.FieldStart("provider_token")
	e.Str(s.ProviderToken)

	e.FieldStart("start_parameter")
	e.Str(s.StartParameter)

	e.FieldStart("currency")
	e.Str(s.Currency)

	e.FieldStart("prices")
	e.ArrStart()
	for _, elem := range s.Prices {
		elem.Encode(e)
	}
	e.ArrEnd()
	if s.ProviderData.Set {
		e.FieldStart("provider_data")
		s.ProviderData.Encode(e)
	}
	if s.PhotoURL.Set {
		e.FieldStart("photo_url")
		s.PhotoURL.Encode(e)
	}
	if s.PhotoSize.Set {
		e.FieldStart("photo_size")
		s.PhotoSize.Encode(e)
	}
	if s.PhotoWidth.Set {
		e.FieldStart("photo_width")
		s.PhotoWidth.Encode(e)
	}
	if s.PhotoHeight.Set {
		e.FieldStart("photo_height")
		s.PhotoHeight.Encode(e)
	}
	if s.NeedName.Set {
		e.FieldStart("need_name")
		s.NeedName.Encode(e)
	}
	if s.NeedPhoneNumber.Set {
		e.FieldStart("need_phone_number")
		s.NeedPhoneNumber.Encode(e)
	}
	if s.NeedEmail.Set {
		e.FieldStart("need_email")
		s.NeedEmail.Encode(e)
	}
	if s.NeedShippingAddress.Set {
		e.FieldStart("need_shipping_address")
		s.NeedShippingAddress.Encode(e)
	}
	if s.SendPhoneNumberToProvider.Set {
		e.FieldStart("send_phone_number_to_provider")
		s.SendPhoneNumberToProvider.Encode(e)
	}
	if s.SendEmailToProvider.Set {
		e.FieldStart("send_email_to_provider")
		s.SendEmailToProvider.Encode(e)
	}
	if s.IsFlexible.Set {
		e.FieldStart("is_flexible")
		s.IsFlexible.Encode(e)
	}
	if s.DisableNotification.Set {
		e.FieldStart("disable_notification")
		s.DisableNotification.Encode(e)
	}
	if s.ReplyToMessageID.Set {
		e.FieldStart("reply_to_message_id")
		s.ReplyToMessageID.Encode(e)
	}
	if s.AllowSendingWithoutReply.Set {
		e.FieldStart("allow_sending_without_reply")
		s.AllowSendingWithoutReply.Encode(e)
	}
	if s.ReplyMarkup.Set {
		e.FieldStart("reply_markup")
		s.ReplyMarkup.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes SendInvoicePostReqApplicationJSON from json.
func (s *SendInvoicePostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SendInvoicePostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "chat_id":
			v, err := d.Int()
			s.ChatID = int(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "description":
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "payload":
			v, err := d.Str()
			s.Payload = string(v)
			if err != nil {
				return err
			}
		case "provider_token":
			v, err := d.Str()
			s.ProviderToken = string(v)
			if err != nil {
				return err
			}
		case "start_parameter":
			v, err := d.Str()
			s.StartParameter = string(v)
			if err != nil {
				return err
			}
		case "currency":
			v, err := d.Str()
			s.Currency = string(v)
			if err != nil {
				return err
			}
		case "prices":
			s.Prices = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem LabeledPrice
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Prices = append(s.Prices, elem)
				return nil
			}); err != nil {
				return err
			}
		case "provider_data":
			s.ProviderData.Reset()
			if err := s.ProviderData.Decode(d); err != nil {
				return err
			}
		case "photo_url":
			s.PhotoURL.Reset()
			if err := s.PhotoURL.Decode(d); err != nil {
				return err
			}
		case "photo_size":
			s.PhotoSize.Reset()
			if err := s.PhotoSize.Decode(d); err != nil {
				return err
			}
		case "photo_width":
			s.PhotoWidth.Reset()
			if err := s.PhotoWidth.Decode(d); err != nil {
				return err
			}
		case "photo_height":
			s.PhotoHeight.Reset()
			if err := s.PhotoHeight.Decode(d); err != nil {
				return err
			}
		case "need_name":
			s.NeedName.Reset()
			if err := s.NeedName.Decode(d); err != nil {
				return err
			}
		case "need_phone_number":
			s.NeedPhoneNumber.Reset()
			if err := s.NeedPhoneNumber.Decode(d); err != nil {
				return err
			}
		case "need_email":
			s.NeedEmail.Reset()
			if err := s.NeedEmail.Decode(d); err != nil {
				return err
			}
		case "need_shipping_address":
			s.NeedShippingAddress.Reset()
			if err := s.NeedShippingAddress.Decode(d); err != nil {
				return err
			}
		case "send_phone_number_to_provider":
			s.SendPhoneNumberToProvider.Reset()
			if err := s.SendPhoneNumberToProvider.Decode(d); err != nil {
				return err
			}
		case "send_email_to_provider":
			s.SendEmailToProvider.Reset()
			if err := s.SendEmailToProvider.Decode(d); err != nil {
				return err
			}
		case "is_flexible":
			s.IsFlexible.Reset()
			if err := s.IsFlexible.Decode(d); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.Decode(d); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.Decode(d); err != nil {
				return err
			}
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.Decode(d); err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s SetGameScorePostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("user_id")
	e.Int(s.UserID)

	e.FieldStart("score")
	e.Int(s.Score)
	if s.Force.Set {
		e.FieldStart("force")
		s.Force.Encode(e)
	}
	if s.DisableEditMessage.Set {
		e.FieldStart("disable_edit_message")
		s.DisableEditMessage.Encode(e)
	}
	if s.ChatID.Set {
		e.FieldStart("chat_id")
		s.ChatID.Encode(e)
	}
	if s.MessageID.Set {
		e.FieldStart("message_id")
		s.MessageID.Encode(e)
	}
	if s.InlineMessageID.Set {
		e.FieldStart("inline_message_id")
		s.InlineMessageID.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes SetGameScorePostReqApplicationJSON from json.
func (s *SetGameScorePostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SetGameScorePostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "user_id":
			v, err := d.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		case "score":
			v, err := d.Int()
			s.Score = int(v)
			if err != nil {
				return err
			}
		case "force":
			s.Force.Reset()
			if err := s.Force.Decode(d); err != nil {
				return err
			}
		case "disable_edit_message":
			s.DisableEditMessage.Reset()
			if err := s.DisableEditMessage.Decode(d); err != nil {
				return err
			}
		case "chat_id":
			s.ChatID.Reset()
			if err := s.ChatID.Decode(d); err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.Decode(d); err != nil {
				return err
			}
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s SetMyCommandsPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.Bool(s.Result)
	e.ObjEnd()
}

// Decode decodes SetMyCommandsPostOK from json.
func (s *SetMyCommandsPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SetMyCommandsPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			v, err := d.Bool()
			s.Result = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s SetMyCommandsPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("commands")
	e.ArrStart()
	for _, elem := range s.Commands {
		elem.Encode(e)
	}
	e.ArrEnd()
	e.ObjEnd()
}

// Decode decodes SetMyCommandsPostReqApplicationJSON from json.
func (s *SetMyCommandsPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SetMyCommandsPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "commands":
			s.Commands = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem BotCommand
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Commands = append(s.Commands, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s SetStickerPositionInSetPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("ok")
	e.Bool(s.Ok)

	e.FieldStart("result")
	e.Bool(s.Result)
	e.ObjEnd()
}

// Decode decodes SetStickerPositionInSetPostOK from json.
func (s *SetStickerPositionInSetPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SetStickerPositionInSetPostOK to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := d.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			v, err := d.Bool()
			s.Result = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s SetStickerPositionInSetPostReqApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("sticker")
	e.Str(s.Sticker)

	e.FieldStart("position")
	e.Int(s.Position)
	e.ObjEnd()
}

// Decode decodes SetStickerPositionInSetPostReqApplicationJSON from json.
func (s *SetStickerPositionInSetPostReqApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SetStickerPositionInSetPostReqApplicationJSON to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "sticker":
			v, err := d.Str()
			s.Sticker = string(v)
			if err != nil {
				return err
			}
		case "position":
			v, err := d.Int()
			s.Position = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s ShippingAddress) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("country_code")
	e.Str(s.CountryCode)

	e.FieldStart("state")
	e.Str(s.State)

	e.FieldStart("city")
	e.Str(s.City)

	e.FieldStart("street_line1")
	e.Str(s.StreetLine1)

	e.FieldStart("street_line2")
	e.Str(s.StreetLine2)

	e.FieldStart("post_code")
	e.Str(s.PostCode)
	e.ObjEnd()
}

// Decode decodes ShippingAddress from json.
func (s *ShippingAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ShippingAddress to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "country_code":
			v, err := d.Str()
			s.CountryCode = string(v)
			if err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "city":
			v, err := d.Str()
			s.City = string(v)
			if err != nil {
				return err
			}
		case "street_line1":
			v, err := d.Str()
			s.StreetLine1 = string(v)
			if err != nil {
				return err
			}
		case "street_line2":
			v, err := d.Str()
			s.StreetLine2 = string(v)
			if err != nil {
				return err
			}
		case "post_code":
			v, err := d.Str()
			s.PostCode = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s ShippingOption) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Str(s.ID)

	e.FieldStart("title")
	e.Str(s.Title)

	e.FieldStart("prices")
	e.ArrStart()
	for _, elem := range s.Prices {
		elem.Encode(e)
	}
	e.ArrEnd()
	e.ObjEnd()
}

// Decode decodes ShippingOption from json.
func (s *ShippingOption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ShippingOption to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "prices":
			s.Prices = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem LabeledPrice
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Prices = append(s.Prices, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s ShippingQuery) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Str(s.ID)

	e.FieldStart("from")
	s.From.Encode(e)

	e.FieldStart("invoice_payload")
	e.Str(s.InvoicePayload)

	e.FieldStart("shipping_address")
	s.ShippingAddress.Encode(e)
	e.ObjEnd()
}

// Decode decodes ShippingQuery from json.
func (s *ShippingQuery) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode ShippingQuery to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "from":
			if err := s.From.Decode(d); err != nil {
				return err
			}
		case "invoice_payload":
			v, err := d.Str()
			s.InvoicePayload = string(v)
			if err != nil {
				return err
			}
		case "shipping_address":
			if err := s.ShippingAddress.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Sticker) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)

	e.FieldStart("file_unique_id")
	e.Str(s.FileUniqueID)

	e.FieldStart("width")
	e.Int(s.Width)

	e.FieldStart("height")
	e.Int(s.Height)

	e.FieldStart("is_animated")
	e.Bool(s.IsAnimated)
	if s.Thumb.Set {
		e.FieldStart("thumb")
		s.Thumb.Encode(e)
	}
	if s.Emoji.Set {
		e.FieldStart("emoji")
		s.Emoji.Encode(e)
	}
	if s.SetName.Set {
		e.FieldStart("set_name")
		s.SetName.Encode(e)
	}
	if s.MaskPosition.Set {
		e.FieldStart("mask_position")
		s.MaskPosition.Encode(e)
	}
	if s.FileSize.Set {
		e.FieldStart("file_size")
		s.FileSize.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Sticker from json.
func (s *Sticker) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Sticker to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := d.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "width":
			v, err := d.Int()
			s.Width = int(v)
			if err != nil {
				return err
			}
		case "height":
			v, err := d.Int()
			s.Height = int(v)
			if err != nil {
				return err
			}
		case "is_animated":
			v, err := d.Bool()
			s.IsAnimated = bool(v)
			if err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.Decode(d); err != nil {
				return err
			}
		case "emoji":
			s.Emoji.Reset()
			if err := s.Emoji.Decode(d); err != nil {
				return err
			}
		case "set_name":
			s.SetName.Reset()
			if err := s.SetName.Decode(d); err != nil {
				return err
			}
		case "mask_position":
			s.MaskPosition.Reset()
			if err := s.MaskPosition.Decode(d); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s StickerSet) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("name")
	e.Str(s.Name)

	e.FieldStart("title")
	e.Str(s.Title)

	e.FieldStart("is_animated")
	e.Bool(s.IsAnimated)

	e.FieldStart("contains_masks")
	e.Bool(s.ContainsMasks)

	e.FieldStart("stickers")
	e.ArrStart()
	for _, elem := range s.Stickers {
		elem.Encode(e)
	}
	e.ArrEnd()
	if s.Thumb.Set {
		e.FieldStart("thumb")
		s.Thumb.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes StickerSet from json.
func (s *StickerSet) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode StickerSet to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "is_animated":
			v, err := d.Bool()
			s.IsAnimated = bool(v)
			if err != nil {
				return err
			}
		case "contains_masks":
			v, err := d.Bool()
			s.ContainsMasks = bool(v)
			if err != nil {
				return err
			}
		case "stickers":
			s.Stickers = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem Sticker
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Stickers = append(s.Stickers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s SuccessfulPayment) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("currency")
	e.Str(s.Currency)

	e.FieldStart("total_amount")
	e.Int(s.TotalAmount)

	e.FieldStart("invoice_payload")
	e.Str(s.InvoicePayload)
	if s.ShippingOptionID.Set {
		e.FieldStart("shipping_option_id")
		s.ShippingOptionID.Encode(e)
	}
	if s.OrderInfo.Set {
		e.FieldStart("order_info")
		s.OrderInfo.Encode(e)
	}

	e.FieldStart("telegram_payment_charge_id")
	e.Str(s.TelegramPaymentChargeID)

	e.FieldStart("provider_payment_charge_id")
	e.Str(s.ProviderPaymentChargeID)
	e.ObjEnd()
}

// Decode decodes SuccessfulPayment from json.
func (s *SuccessfulPayment) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode SuccessfulPayment to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "currency":
			v, err := d.Str()
			s.Currency = string(v)
			if err != nil {
				return err
			}
		case "total_amount":
			v, err := d.Int()
			s.TotalAmount = int(v)
			if err != nil {
				return err
			}
		case "invoice_payload":
			v, err := d.Str()
			s.InvoicePayload = string(v)
			if err != nil {
				return err
			}
		case "shipping_option_id":
			s.ShippingOptionID.Reset()
			if err := s.ShippingOptionID.Decode(d); err != nil {
				return err
			}
		case "order_info":
			s.OrderInfo.Reset()
			if err := s.OrderInfo.Decode(d); err != nil {
				return err
			}
		case "telegram_payment_charge_id":
			v, err := d.Str()
			s.TelegramPaymentChargeID = string(v)
			if err != nil {
				return err
			}
		case "provider_payment_charge_id":
			v, err := d.Str()
			s.ProviderPaymentChargeID = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Update) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("update_id")
	e.Int(s.UpdateID)
	if s.Message.Set {
		e.FieldStart("message")
		s.Message.Encode(e)
	}
	if s.EditedMessage.Set {
		e.FieldStart("edited_message")
		s.EditedMessage.Encode(e)
	}
	if s.ChannelPost.Set {
		e.FieldStart("channel_post")
		s.ChannelPost.Encode(e)
	}
	if s.EditedChannelPost.Set {
		e.FieldStart("edited_channel_post")
		s.EditedChannelPost.Encode(e)
	}
	if s.InlineQuery.Set {
		e.FieldStart("inline_query")
		s.InlineQuery.Encode(e)
	}
	if s.ChosenInlineResult.Set {
		e.FieldStart("chosen_inline_result")
		s.ChosenInlineResult.Encode(e)
	}
	if s.CallbackQuery.Set {
		e.FieldStart("callback_query")
		s.CallbackQuery.Encode(e)
	}
	if s.ShippingQuery.Set {
		e.FieldStart("shipping_query")
		s.ShippingQuery.Encode(e)
	}
	if s.PreCheckoutQuery.Set {
		e.FieldStart("pre_checkout_query")
		s.PreCheckoutQuery.Encode(e)
	}
	if s.Poll.Set {
		e.FieldStart("poll")
		s.Poll.Encode(e)
	}
	if s.PollAnswer.Set {
		e.FieldStart("poll_answer")
		s.PollAnswer.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Update from json.
func (s *Update) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Update to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "update_id":
			v, err := d.Int()
			s.UpdateID = int(v)
			if err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.Decode(d); err != nil {
				return err
			}
		case "edited_message":
			s.EditedMessage.Reset()
			if err := s.EditedMessage.Decode(d); err != nil {
				return err
			}
		case "channel_post":
			s.ChannelPost.Reset()
			if err := s.ChannelPost.Decode(d); err != nil {
				return err
			}
		case "edited_channel_post":
			s.EditedChannelPost.Reset()
			if err := s.EditedChannelPost.Decode(d); err != nil {
				return err
			}
		case "inline_query":
			s.InlineQuery.Reset()
			if err := s.InlineQuery.Decode(d); err != nil {
				return err
			}
		case "chosen_inline_result":
			s.ChosenInlineResult.Reset()
			if err := s.ChosenInlineResult.Decode(d); err != nil {
				return err
			}
		case "callback_query":
			s.CallbackQuery.Reset()
			if err := s.CallbackQuery.Decode(d); err != nil {
				return err
			}
		case "shipping_query":
			s.ShippingQuery.Reset()
			if err := s.ShippingQuery.Decode(d); err != nil {
				return err
			}
		case "pre_checkout_query":
			s.PreCheckoutQuery.Reset()
			if err := s.PreCheckoutQuery.Decode(d); err != nil {
				return err
			}
		case "poll":
			s.Poll.Reset()
			if err := s.Poll.Decode(d); err != nil {
				return err
			}
		case "poll_answer":
			s.PollAnswer.Reset()
			if err := s.PollAnswer.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s User) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("id")
	e.Int(s.ID)

	e.FieldStart("is_bot")
	e.Bool(s.IsBot)

	e.FieldStart("first_name")
	e.Str(s.FirstName)
	if s.LastName.Set {
		e.FieldStart("last_name")
		s.LastName.Encode(e)
	}
	if s.Username.Set {
		e.FieldStart("username")
		s.Username.Encode(e)
	}
	if s.LanguageCode.Set {
		e.FieldStart("language_code")
		s.LanguageCode.Encode(e)
	}
	if s.CanJoinGroups.Set {
		e.FieldStart("can_join_groups")
		s.CanJoinGroups.Encode(e)
	}
	if s.CanReadAllGroupMessages.Set {
		e.FieldStart("can_read_all_group_messages")
		s.CanReadAllGroupMessages.Encode(e)
	}
	if s.SupportsInlineQueries.Set {
		e.FieldStart("supports_inline_queries")
		s.SupportsInlineQueries.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes User from json.
func (s *User) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode User to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "is_bot":
			v, err := d.Bool()
			s.IsBot = bool(v)
			if err != nil {
				return err
			}
		case "first_name":
			v, err := d.Str()
			s.FirstName = string(v)
			if err != nil {
				return err
			}
		case "last_name":
			s.LastName.Reset()
			if err := s.LastName.Decode(d); err != nil {
				return err
			}
		case "username":
			s.Username.Reset()
			if err := s.Username.Decode(d); err != nil {
				return err
			}
		case "language_code":
			s.LanguageCode.Reset()
			if err := s.LanguageCode.Decode(d); err != nil {
				return err
			}
		case "can_join_groups":
			s.CanJoinGroups.Reset()
			if err := s.CanJoinGroups.Decode(d); err != nil {
				return err
			}
		case "can_read_all_group_messages":
			s.CanReadAllGroupMessages.Reset()
			if err := s.CanReadAllGroupMessages.Decode(d); err != nil {
				return err
			}
		case "supports_inline_queries":
			s.SupportsInlineQueries.Reset()
			if err := s.SupportsInlineQueries.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s UserProfilePhotos) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("total_count")
	e.Int(s.TotalCount)

	e.FieldStart("photos")
	e.ArrStart()
	for _, elem := range s.Photos {
		e.ArrStart()
		for _, elem := range elem {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	e.ArrEnd()
	e.ObjEnd()
}

// Decode decodes UserProfilePhotos from json.
func (s *UserProfilePhotos) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode UserProfilePhotos to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "photos":
			s.Photos = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem []PhotoSize
				elem = nil
				if err := d.Arr(func(d *jx.Decoder) error {
					var elemElem PhotoSize
					if err := elemElem.Decode(d); err != nil {
						return err
					}
					elem = append(elem, elemElem)
					return nil
				}); err != nil {
					return err
				}
				s.Photos = append(s.Photos, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Venue) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("location")
	s.Location.Encode(e)

	e.FieldStart("title")
	e.Str(s.Title)

	e.FieldStart("address")
	e.Str(s.Address)
	if s.FoursquareID.Set {
		e.FieldStart("foursquare_id")
		s.FoursquareID.Encode(e)
	}
	if s.FoursquareType.Set {
		e.FieldStart("foursquare_type")
		s.FoursquareType.Encode(e)
	}
	if s.GooglePlaceID.Set {
		e.FieldStart("google_place_id")
		s.GooglePlaceID.Encode(e)
	}
	if s.GooglePlaceType.Set {
		e.FieldStart("google_place_type")
		s.GooglePlaceType.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Venue from json.
func (s *Venue) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Venue to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "location":
			if err := s.Location.Decode(d); err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "address":
			v, err := d.Str()
			s.Address = string(v)
			if err != nil {
				return err
			}
		case "foursquare_id":
			s.FoursquareID.Reset()
			if err := s.FoursquareID.Decode(d); err != nil {
				return err
			}
		case "foursquare_type":
			s.FoursquareType.Reset()
			if err := s.FoursquareType.Decode(d); err != nil {
				return err
			}
		case "google_place_id":
			s.GooglePlaceID.Reset()
			if err := s.GooglePlaceID.Decode(d); err != nil {
				return err
			}
		case "google_place_type":
			s.GooglePlaceType.Reset()
			if err := s.GooglePlaceType.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Video) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)

	e.FieldStart("file_unique_id")
	e.Str(s.FileUniqueID)

	e.FieldStart("width")
	e.Int(s.Width)

	e.FieldStart("height")
	e.Int(s.Height)

	e.FieldStart("duration")
	e.Int(s.Duration)
	if s.Thumb.Set {
		e.FieldStart("thumb")
		s.Thumb.Encode(e)
	}
	if s.FileName.Set {
		e.FieldStart("file_name")
		s.FileName.Encode(e)
	}
	if s.MimeType.Set {
		e.FieldStart("mime_type")
		s.MimeType.Encode(e)
	}
	if s.FileSize.Set {
		e.FieldStart("file_size")
		s.FileSize.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Video from json.
func (s *Video) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Video to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := d.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "width":
			v, err := d.Int()
			s.Width = int(v)
			if err != nil {
				return err
			}
		case "height":
			v, err := d.Int()
			s.Height = int(v)
			if err != nil {
				return err
			}
		case "duration":
			v, err := d.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.Decode(d); err != nil {
				return err
			}
		case "file_name":
			s.FileName.Reset()
			if err := s.FileName.Decode(d); err != nil {
				return err
			}
		case "mime_type":
			s.MimeType.Reset()
			if err := s.MimeType.Decode(d); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s VideoNote) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)

	e.FieldStart("file_unique_id")
	e.Str(s.FileUniqueID)

	e.FieldStart("length")
	e.Int(s.Length)

	e.FieldStart("duration")
	e.Int(s.Duration)
	if s.Thumb.Set {
		e.FieldStart("thumb")
		s.Thumb.Encode(e)
	}
	if s.FileSize.Set {
		e.FieldStart("file_size")
		s.FileSize.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes VideoNote from json.
func (s *VideoNote) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode VideoNote to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := d.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "length":
			v, err := d.Int()
			s.Length = int(v)
			if err != nil {
				return err
			}
		case "duration":
			v, err := d.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.Decode(d); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s Voice) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("file_id")
	e.Str(s.FileID)

	e.FieldStart("file_unique_id")
	e.Str(s.FileUniqueID)

	e.FieldStart("duration")
	e.Int(s.Duration)
	if s.MimeType.Set {
		e.FieldStart("mime_type")
		s.MimeType.Encode(e)
	}
	if s.FileSize.Set {
		e.FieldStart("file_size")
		s.FileSize.Encode(e)
	}
	e.ObjEnd()
}

// Decode decodes Voice from json.
func (s *Voice) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode Voice to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := d.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := d.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "duration":
			v, err := d.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "mime_type":
			s.MimeType.Reset()
			if err := s.MimeType.Decode(d); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.Decode(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// Encode implements json.Marshaler.
func (s WebhookInfo) Encode(e *jx.Encoder) {
	e.ObjStart()

	e.FieldStart("url")
	e.Str(s.URL)

	e.FieldStart("has_custom_certificate")
	e.Bool(s.HasCustomCertificate)

	e.FieldStart("pending_update_count")
	e.Int(s.PendingUpdateCount)
	if s.IPAddress.Set {
		e.FieldStart("ip_address")
		s.IPAddress.Encode(e)
	}
	if s.LastErrorDate.Set {
		e.FieldStart("last_error_date")
		s.LastErrorDate.Encode(e)
	}
	if s.LastErrorMessage.Set {
		e.FieldStart("last_error_message")
		s.LastErrorMessage.Encode(e)
	}
	if s.MaxConnections.Set {
		e.FieldStart("max_connections")
		s.MaxConnections.Encode(e)
	}
	if s.AllowedUpdates != nil {
		e.FieldStart("allowed_updates")
		e.ArrStart()
		for _, elem := range s.AllowedUpdates {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ObjEnd()
}

// Decode decodes WebhookInfo from json.
func (s *WebhookInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New(`invalid: unable to decode WebhookInfo to nil`)
	}
	return d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "has_custom_certificate":
			v, err := d.Bool()
			s.HasCustomCertificate = bool(v)
			if err != nil {
				return err
			}
		case "pending_update_count":
			v, err := d.Int()
			s.PendingUpdateCount = int(v)
			if err != nil {
				return err
			}
		case "ip_address":
			s.IPAddress.Reset()
			if err := s.IPAddress.Decode(d); err != nil {
				return err
			}
		case "last_error_date":
			s.LastErrorDate.Reset()
			if err := s.LastErrorDate.Decode(d); err != nil {
				return err
			}
		case "last_error_message":
			s.LastErrorMessage.Reset()
			if err := s.LastErrorMessage.Decode(d); err != nil {
				return err
			}
		case "max_connections":
			s.MaxConnections.Reset()
			if err := s.MaxConnections.Decode(d); err != nil {
				return err
			}
		case "allowed_updates":
			s.AllowedUpdates = nil
			if err := d.Arr(func(d *jx.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AllowedUpdates = append(s.AllowedUpdates, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}
