// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func (s *AnswerShippingQueryPostReqApplicationJSON) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ShippingOptions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ShippingOptions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shipping_options",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *AnswerShippingQueryPostReqApplicationXWwwFormUrlencoded) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ShippingOptions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ShippingOptions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shipping_options",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *AnswerShippingQueryPostReqMultipartFormData) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ShippingOptions {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ShippingOptions
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shipping_options",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CallbackQuery) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Message
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Chat) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.PinnedMessage
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pinned_message",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Type
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EncryptedPassportElement) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Type
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Game) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Photo == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Photo {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Photo
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "photo",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.TextEntities {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.TextEntities
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_entities",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetGameHighScoresPostResOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Result == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Result {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Result
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetMyCommandsPostResOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Result == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Result {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Result
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetStickerSetPostResOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Result
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetUpdatesPostReqApplicationJSON) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Limit
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetUpdatesPostReqApplicationXWwwFormUrlencoded) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Limit
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetUpdatesPostReqMultipartFormData) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Limit
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetUpdatesPostResOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Result == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Result {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Result
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetUserProfilePhotosPostReqApplicationJSON) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Limit
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetUserProfilePhotosPostReqApplicationXWwwFormUrlencoded) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Limit
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetUserProfilePhotosPostReqMultipartFormData) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Limit
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GetUserProfilePhotosPostResOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Result
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *InlineKeyboardMarkup) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InlineKeyboard == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.InlineKeyboard {
			if err := func() error {
				if elem == nil {
					return fmt.Errorf("required, can't be nil")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						_ = elem
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
					if len(failures) > 0 {
						return &validate.Error{Fields: failures}
					}
				}
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.InlineKeyboard
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "inline_keyboard",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MaskPosition) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Point
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "point",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Message) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CaptionEntities {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.CaptionEntities
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caption_entities",
			Error: err,
		})
	}
	if err := func() error {
		if s.Chat == nil {
			return fmt.Errorf("required, can't be nil")
		}
		_ = s.Chat
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "chat",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Entities {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Entities
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "entities",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ForwardFromChat
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward_from_chat",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Game
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "game",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.PassportData
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "passport_data",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.PinnedMessage
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pinned_message",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Poll
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "poll",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ReplyMarkup
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reply_markup",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ReplyToMessage
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reply_to_message",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.SenderChat
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sender_chat",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Sticker
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sticker",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MessageEntity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Type
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PassportData) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Data == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Data {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Data
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "data",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Poll) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ExplanationEntities {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.ExplanationEntities
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "explanation_entities",
			Error: err,
		})
	}
	if err := func() error {
		if s.Options == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Options {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Options
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "options",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PollAnswer) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.OptionIds == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.OptionIds {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.OptionIds
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "option_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SendGamePostReqApplicationJSON) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.ReplyMarkup
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reply_markup",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SendGamePostReqApplicationXWwwFormUrlencoded) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.ReplyMarkup
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reply_markup",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SendGamePostReqMultipartFormData) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.ReplyMarkup
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reply_markup",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SendGamePostResOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Result
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SendInvoicePostReqApplicationJSON) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Prices == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Prices {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Prices
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prices",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ReplyMarkup
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reply_markup",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SendInvoicePostReqApplicationXWwwFormUrlencoded) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Prices == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Prices {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Prices
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prices",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ReplyMarkup
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reply_markup",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SendInvoicePostReqMultipartFormData) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Prices == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Prices {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Prices
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prices",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ReplyMarkup
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reply_markup",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SendInvoicePostResOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Result
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SetMyCommandsPostReqApplicationJSON) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Commands == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Commands {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Commands
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commands",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SetMyCommandsPostReqApplicationXWwwFormUrlencoded) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Commands == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Commands {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Commands
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commands",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SetMyCommandsPostReqMultipartFormData) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Commands == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Commands {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Commands
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commands",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ShippingOption) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Prices == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Prices {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Prices
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prices",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Sticker) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.MaskPosition
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mask_position",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *StickerSet) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Stickers == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Stickers {
			if err := func() error {
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Stickers
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "stickers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Update) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.CallbackQuery
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callback_query",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ChannelPost
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "channel_post",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.EditedChannelPost
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "edited_channel_post",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.EditedMessage
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "edited_message",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Message
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Poll
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "poll",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.PollAnswer
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "poll_answer",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *UserProfilePhotos) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Photos == nil {
			return fmt.Errorf("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Photos {
			if err := func() error {
				if elem == nil {
					return fmt.Errorf("required, can't be nil")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						_ = elem
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
					if len(failures) > 0 {
						return &validate.Error{Fields: failures}
					}
				}
				_ = elem
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
		}
		_ = s.Photos
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "photos",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
