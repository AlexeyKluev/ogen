// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
)

func NewAnswerCallbackQueryPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeAnswerCallbackQueryPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AnswerCallbackQueryPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAnswerCallbackQueryPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAnswerPreCheckoutQueryPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeAnswerPreCheckoutQueryPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AnswerPreCheckoutQueryPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAnswerPreCheckoutQueryPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAnswerShippingQueryPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeAnswerShippingQueryPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AnswerShippingQueryPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAnswerShippingQueryPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewClosePostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ClosePost(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeClosePostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteStickerFromSetPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeDeleteStickerFromSetPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteStickerFromSetPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteStickerFromSetPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewDeleteWebhookPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeDeleteWebhookPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.DeleteWebhookPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeDeleteWebhookPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetFilePostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeGetFilePostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GetFilePost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetFilePostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetGameHighScoresPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeGetGameHighScoresPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GetGameHighScoresPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetGameHighScoresPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetMePostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetMePost(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetMePostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetMyCommandsPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetMyCommandsPost(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetMyCommandsPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetStickerSetPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeGetStickerSetPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GetStickerSetPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetStickerSetPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetUpdatesPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeGetUpdatesPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GetUpdatesPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetUpdatesPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetUserProfilePhotosPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeGetUserProfilePhotosPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GetUserProfilePhotosPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetUserProfilePhotosPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGetWebhookInfoPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GetWebhookInfoPost(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGetWebhookInfoPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewLogOutPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.LogOutPost(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeLogOutPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewSendGamePostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeSendGamePostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.SendGamePost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeSendGamePostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewSendInvoicePostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeSendInvoicePostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.SendInvoicePost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeSendInvoicePostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewSetMyCommandsPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeSetMyCommandsPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.SetMyCommandsPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeSetMyCommandsPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewSetStickerPositionInSetPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeSetStickerPositionInSetPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.SetStickerPositionInSetPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeSetStickerPositionInSetPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewSetWebhookPostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeSetWebhookPostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.SetWebhookPost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeSetWebhookPostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUploadStickerFilePostHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeUploadStickerFilePostRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UploadStickerFilePost(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUploadStickerFilePostResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func respondError(w http.ResponseWriter, code int, err error) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	data, writeErr := json.Marshal(struct {
		ErrorMessage string `json:"error_message"`
	}{
		ErrorMessage: err.Error(),
	})
	if writeErr == nil {
		w.Write(data)
	}
}
