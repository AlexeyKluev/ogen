// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"github.com/valyala/fasthttp"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = fasthttp.Client{}
)

func encodeAnswerCallbackQueryPostRequest(req AnswerCallbackQueryPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *AnswerCallbackQueryPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *AnswerCallbackQueryPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *AnswerCallbackQueryPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeAnswerPreCheckoutQueryPostRequest(req AnswerPreCheckoutQueryPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *AnswerPreCheckoutQueryPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *AnswerPreCheckoutQueryPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *AnswerPreCheckoutQueryPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeAnswerShippingQueryPostRequest(req AnswerShippingQueryPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *AnswerShippingQueryPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *AnswerShippingQueryPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *AnswerShippingQueryPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeDeleteStickerFromSetPostRequest(req DeleteStickerFromSetPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *DeleteStickerFromSetPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *DeleteStickerFromSetPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *DeleteStickerFromSetPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeDeleteWebhookPostRequest(req DeleteWebhookPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *DeleteWebhookPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *DeleteWebhookPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *DeleteWebhookPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeGetFilePostRequest(req GetFilePostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *GetFilePostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *GetFilePostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *GetFilePostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeGetGameHighScoresPostRequest(req GetGameHighScoresPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *GetGameHighScoresPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *GetGameHighScoresPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *GetGameHighScoresPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeGetStickerSetPostRequest(req GetStickerSetPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *GetStickerSetPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *GetStickerSetPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *GetStickerSetPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeGetUpdatesPostRequest(req GetUpdatesPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *GetUpdatesPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *GetUpdatesPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *GetUpdatesPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeGetUserProfilePhotosPostRequest(req GetUserProfilePhotosPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *GetUserProfilePhotosPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *GetUserProfilePhotosPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *GetUserProfilePhotosPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeSendGamePostRequest(req SendGamePostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *SendGamePostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *SendGamePostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *SendGamePostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeSendInvoicePostRequest(req SendInvoicePostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *SendInvoicePostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *SendInvoicePostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *SendInvoicePostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeSetMyCommandsPostRequest(req SetMyCommandsPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *SetMyCommandsPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *SetMyCommandsPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *SetMyCommandsPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeSetStickerPositionInSetPostRequest(req SetStickerPositionInSetPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *SetStickerPositionInSetPostReqApplicationJSON:
		buf := json.GetBuffer()
		j := json.GetStream(buf)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		req.WriteJSON(j)
		if err := j.Flush(); err != nil {
			json.PutBuffer(buf)
			return nil, "", err
		}

		return buf, "application/json", nil
	case *SetStickerPositionInSetPostReqApplicationXWwwFormUrlencoded:
		return nil, "", fmt.Errorf("application/x-www-form-urlencoded encoder not implemented")
	case *SetStickerPositionInSetPostReqMultipartFormData:
		return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeSetWebhookPostRequest(req SetWebhookPostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
}

func encodeUploadStickerFilePostRequest(req UploadStickerFilePostReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	return nil, "", fmt.Errorf("multipart/form-data encoder not implemented")
}
