// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func encodeAnswerCallbackQueryPostResponse(response AnswerCallbackQueryPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AnswerCallbackQueryPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/answerCallbackQuery: unexpected response type: %T", response)
	}
}

func encodeAnswerPreCheckoutQueryPostResponse(response AnswerPreCheckoutQueryPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AnswerPreCheckoutQueryPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/answerPreCheckoutQuery: unexpected response type: %T", response)
	}
}

func encodeAnswerShippingQueryPostResponse(response AnswerShippingQueryPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AnswerShippingQueryPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/answerShippingQuery: unexpected response type: %T", response)
	}
}

func encodeClosePostResponse(response ClosePostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ClosePostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/close: unexpected response type: %T", response)
	}
}

func encodeDeleteStickerFromSetPostResponse(response DeleteStickerFromSetPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *DeleteStickerFromSetPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/deleteStickerFromSet: unexpected response type: %T", response)
	}
}

func encodeDeleteWebhookPostResponse(response DeleteWebhookPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *DeleteWebhookPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/deleteWebhook: unexpected response type: %T", response)
	}
}

func encodeGetFilePostResponse(response GetFilePostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetFilePostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getFile: unexpected response type: %T", response)
	}
}

func encodeGetGameHighScoresPostResponse(response GetGameHighScoresPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetGameHighScoresPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getGameHighScores: unexpected response type: %T", response)
	}
}

func encodeGetMePostResponse(response GetMePostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetMePostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getMe: unexpected response type: %T", response)
	}
}

func encodeGetMyCommandsPostResponse(response GetMyCommandsPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetMyCommandsPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getMyCommands: unexpected response type: %T", response)
	}
}

func encodeGetStickerSetPostResponse(response GetStickerSetPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetStickerSetPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getStickerSet: unexpected response type: %T", response)
	}
}

func encodeGetUpdatesPostResponse(response GetUpdatesPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetUpdatesPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getUpdates: unexpected response type: %T", response)
	}
}

func encodeGetUserProfilePhotosPostResponse(response GetUserProfilePhotosPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetUserProfilePhotosPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getUserProfilePhotos: unexpected response type: %T", response)
	}
}

func encodeGetWebhookInfoPostResponse(response GetWebhookInfoPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GetWebhookInfoPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getWebhookInfo: unexpected response type: %T", response)
	}
}

func encodeLogOutPostResponse(response LogOutPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *LogOutPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/logOut: unexpected response type: %T", response)
	}
}

func encodeSendGamePostResponse(response SendGamePostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *SendGamePostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendGame: unexpected response type: %T", response)
	}
}

func encodeSendInvoicePostResponse(response SendInvoicePostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *SendInvoicePostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendInvoice: unexpected response type: %T", response)
	}
}

func encodeSetMyCommandsPostResponse(response SetMyCommandsPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *SetMyCommandsPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setMyCommands: unexpected response type: %T", response)
	}
}

func encodeSetStickerPositionInSetPostResponse(response SetStickerPositionInSetPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *SetStickerPositionInSetPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setStickerPositionInSet: unexpected response type: %T", response)
	}
}

func encodeSetWebhookPostResponse(response SetWebhookPostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *SetWebhookPostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setWebhook: unexpected response type: %T", response)
	}
}

func encodeUploadStickerFilePostResponse(response UploadStickerFilePostRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UploadStickerFilePostOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		if err := response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		if err := response.Response.WriteJSONTo(w); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/uploadStickerFile: unexpected response type: %T", response)
	}
}
