// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

// WriteJSON implements json.Marshaler.
func (s Animation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileName.Set {
		more.More()
		j.WriteObjectField("file_name")
		s.FileName.WriteJSON(j)
	}
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	more.More()
	j.WriteObjectField("height")
	j.WriteInt(s.Height)
	if s.MimeType.Set {
		more.More()
		j.WriteObjectField("mime_type")
		s.MimeType.WriteJSON(j)
	}
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("width")
	j.WriteInt(s.Width)
	j.WriteObjectEnd()
}

// ReadJSON reads Animation from json stream.
func (s *Animation) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "height":
			if err := func() error {
				s.Height = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mime_type":
			if err := func() error {
				s.MimeType.Reset()
				if err := s.MimeType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "width":
			if err := func() error {
				s.Width = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerCallbackQueryPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CacheTime.Set {
		more.More()
		j.WriteObjectField("cache_time")
		s.CacheTime.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("callback_query_id")
	j.WriteString(s.CallbackQueryID)
	if s.ShowAlert.Set {
		more.More()
		j.WriteObjectField("show_alert")
		s.ShowAlert.WriteJSON(j)
	}
	if s.Text.Set {
		more.More()
		j.WriteObjectField("text")
		s.Text.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerCallbackQueryPostReqApplicationJSON from json stream.
func (s *AnswerCallbackQueryPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cache_time":
			if err := func() error {
				s.CacheTime.Reset()
				if err := s.CacheTime.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "callback_query_id":
			if err := func() error {
				s.CallbackQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "show_alert":
			if err := func() error {
				s.ShowAlert.Reset()
				if err := s.ShowAlert.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text.Reset()
				if err := s.Text.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerCallbackQueryPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CacheTime.Set {
		more.More()
		j.WriteObjectField("cache_time")
		s.CacheTime.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("callback_query_id")
	j.WriteString(s.CallbackQueryID)
	if s.ShowAlert.Set {
		more.More()
		j.WriteObjectField("show_alert")
		s.ShowAlert.WriteJSON(j)
	}
	if s.Text.Set {
		more.More()
		j.WriteObjectField("text")
		s.Text.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerCallbackQueryPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *AnswerCallbackQueryPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cache_time":
			if err := func() error {
				s.CacheTime.Reset()
				if err := s.CacheTime.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "callback_query_id":
			if err := func() error {
				s.CallbackQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "show_alert":
			if err := func() error {
				s.ShowAlert.Reset()
				if err := s.ShowAlert.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text.Reset()
				if err := s.Text.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerCallbackQueryPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CacheTime.Set {
		more.More()
		j.WriteObjectField("cache_time")
		s.CacheTime.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("callback_query_id")
	j.WriteString(s.CallbackQueryID)
	if s.ShowAlert.Set {
		more.More()
		j.WriteObjectField("show_alert")
		s.ShowAlert.WriteJSON(j)
	}
	if s.Text.Set {
		more.More()
		j.WriteObjectField("text")
		s.Text.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerCallbackQueryPostReqMultipartFormData from json stream.
func (s *AnswerCallbackQueryPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cache_time":
			if err := func() error {
				s.CacheTime.Reset()
				if err := s.CacheTime.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "callback_query_id":
			if err := func() error {
				s.CallbackQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "show_alert":
			if err := func() error {
				s.ShowAlert.Reset()
				if err := s.ShowAlert.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text.Reset()
				if err := s.Text.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerCallbackQueryPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	j.WriteBool(s.Result)
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerCallbackQueryPostResOK from json stream.
func (s *AnswerCallbackQueryPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerPreCheckoutQueryPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("pre_checkout_query_id")
	j.WriteString(s.PreCheckoutQueryID)
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerPreCheckoutQueryPostReqApplicationJSON from json stream.
func (s *AnswerPreCheckoutQueryPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pre_checkout_query_id":
			if err := func() error {
				s.PreCheckoutQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerPreCheckoutQueryPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("pre_checkout_query_id")
	j.WriteString(s.PreCheckoutQueryID)
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerPreCheckoutQueryPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *AnswerPreCheckoutQueryPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pre_checkout_query_id":
			if err := func() error {
				s.PreCheckoutQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerPreCheckoutQueryPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("pre_checkout_query_id")
	j.WriteString(s.PreCheckoutQueryID)
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerPreCheckoutQueryPostReqMultipartFormData from json stream.
func (s *AnswerPreCheckoutQueryPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pre_checkout_query_id":
			if err := func() error {
				s.PreCheckoutQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerPreCheckoutQueryPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	j.WriteBool(s.Result)
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerPreCheckoutQueryPostResOK from json stream.
func (s *AnswerPreCheckoutQueryPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerShippingQueryPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	if s.ShippingOptions != nil {
		more.More()
		j.WriteObjectField("shipping_options")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ShippingOptions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("shipping_query_id")
	j.WriteString(s.ShippingQueryID)
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerShippingQueryPostReqApplicationJSON from json stream.
func (s *AnswerShippingQueryPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_options":
			if err := func() error {
				s.ShippingOptions = s.ShippingOptions[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem ShippingOption
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ShippingOptions = append(s.ShippingOptions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_query_id":
			if err := func() error {
				s.ShippingQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerShippingQueryPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	if s.ShippingOptions != nil {
		more.More()
		j.WriteObjectField("shipping_options")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ShippingOptions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("shipping_query_id")
	j.WriteString(s.ShippingQueryID)
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerShippingQueryPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *AnswerShippingQueryPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_options":
			if err := func() error {
				s.ShippingOptions = s.ShippingOptions[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem ShippingOption
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ShippingOptions = append(s.ShippingOptions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_query_id":
			if err := func() error {
				s.ShippingQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerShippingQueryPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	if s.ShippingOptions != nil {
		more.More()
		j.WriteObjectField("shipping_options")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ShippingOptions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("shipping_query_id")
	j.WriteString(s.ShippingQueryID)
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerShippingQueryPostReqMultipartFormData from json stream.
func (s *AnswerShippingQueryPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_options":
			if err := func() error {
				s.ShippingOptions = s.ShippingOptions[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem ShippingOption
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ShippingOptions = append(s.ShippingOptions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_query_id":
			if err := func() error {
				s.ShippingQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerShippingQueryPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	j.WriteBool(s.Result)
	j.WriteObjectEnd()
}

// ReadJSON reads AnswerShippingQueryPostResOK from json stream.
func (s *AnswerShippingQueryPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Audio) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileName.Set {
		more.More()
		j.WriteObjectField("file_name")
		s.FileName.WriteJSON(j)
	}
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	if s.MimeType.Set {
		more.More()
		j.WriteObjectField("mime_type")
		s.MimeType.WriteJSON(j)
	}
	if s.Performer.Set {
		more.More()
		j.WriteObjectField("performer")
		s.Performer.WriteJSON(j)
	}
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads Audio from json stream.
func (s *Audio) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mime_type":
			if err := func() error {
				s.MimeType.Reset()
				if err := s.MimeType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "performer":
			if err := func() error {
				s.Performer.Reset()
				if err := s.Performer.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BotCommand) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("command")
	j.WriteString(s.Command)
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	j.WriteObjectEnd()
}

// ReadJSON reads BotCommand from json stream.
func (s *BotCommand) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "command":
			if err := func() error {
				s.Command = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CallbackGame) WriteJSON(j *json.Stream)        {}
func (CallbackGame) ReadJSON(i *json.Iterator) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CallbackQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("chat_instance")
	j.WriteString(s.ChatInstance)
	if s.Data.Set {
		more.More()
		j.WriteObjectField("data")
		s.Data.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("from")
	s.From.WriteJSON(j)
	if s.GameShortName.Set {
		more.More()
		j.WriteObjectField("game_short_name")
		s.GameShortName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads CallbackQuery from json stream.
func (s *CallbackQuery) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_instance":
			if err := func() error {
				s.ChatInstance = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "from":
			if err := func() error {
				if err := s.From.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "game_short_name":
			if err := func() error {
				s.GameShortName.Reset()
				if err := s.GameShortName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Chat) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Bio.Set {
		more.More()
		j.WriteObjectField("bio")
		s.Bio.WriteJSON(j)
	}
	if s.CanSetStickerSet.Set {
		more.More()
		j.WriteObjectField("can_set_sticker_set")
		s.CanSetStickerSet.WriteJSON(j)
	}
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.FirstName.Set {
		more.More()
		j.WriteObjectField("first_name")
		s.FirstName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)
	if s.InviteLink.Set {
		more.More()
		j.WriteObjectField("invite_link")
		s.InviteLink.WriteJSON(j)
	}
	if s.LastName.Set {
		more.More()
		j.WriteObjectField("last_name")
		s.LastName.WriteJSON(j)
	}
	if s.LinkedChatID.Set {
		more.More()
		j.WriteObjectField("linked_chat_id")
		s.LinkedChatID.WriteJSON(j)
	}
	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}
	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}
	if s.Photo.Set {
		more.More()
		j.WriteObjectField("photo")
		s.Photo.WriteJSON(j)
	}
	if s.PinnedMessage.Set {
		more.More()
		j.WriteObjectField("pinned_message")
		s.PinnedMessage.WriteJSON(j)
	}
	if s.SlowModeDelay.Set {
		more.More()
		j.WriteObjectField("slow_mode_delay")
		s.SlowModeDelay.WriteJSON(j)
	}
	if s.StickerSetName.Set {
		more.More()
		j.WriteObjectField("sticker_set_name")
		s.StickerSetName.WriteJSON(j)
	}
	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	s.Type.WriteJSON(j)
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads Chat from json stream.
func (s *Chat) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "bio":
			if err := func() error {
				s.Bio.Reset()
				if err := s.Bio.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_set_sticker_set":
			if err := func() error {
				s.CanSetStickerSet.Reset()
				if err := s.CanSetStickerSet.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "first_name":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "invite_link":
			if err := func() error {
				s.InviteLink.Reset()
				if err := s.InviteLink.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "linked_chat_id":
			if err := func() error {
				s.LinkedChatID.Reset()
				if err := s.LinkedChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "permissions":
			if err := func() error {
				s.Permissions.Reset()
				if err := s.Permissions.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo":
			if err := func() error {
				s.Photo.Reset()
				if err := s.Photo.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pinned_message":
			if err := func() error {
				s.PinnedMessage.Reset()
				if err := s.PinnedMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "slow_mode_delay":
			if err := func() error {
				s.SlowModeDelay.Reset()
				if err := s.SlowModeDelay.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sticker_set_name":
			if err := func() error {
				s.StickerSetName.Reset()
				if err := s.StickerSetName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = ChatType(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChatLocation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("address")
	j.WriteString(s.Address)
	more.More()
	j.WriteObjectField("location")
	s.Location.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads ChatLocation from json stream.
func (s *ChatLocation) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "address":
			if err := func() error {
				s.Address = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "location":
			if err := func() error {
				if err := s.Location.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChatPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CanAddWebPagePreviews.Set {
		more.More()
		j.WriteObjectField("can_add_web_page_previews")
		s.CanAddWebPagePreviews.WriteJSON(j)
	}
	if s.CanChangeInfo.Set {
		more.More()
		j.WriteObjectField("can_change_info")
		s.CanChangeInfo.WriteJSON(j)
	}
	if s.CanInviteUsers.Set {
		more.More()
		j.WriteObjectField("can_invite_users")
		s.CanInviteUsers.WriteJSON(j)
	}
	if s.CanPinMessages.Set {
		more.More()
		j.WriteObjectField("can_pin_messages")
		s.CanPinMessages.WriteJSON(j)
	}
	if s.CanSendMediaMessages.Set {
		more.More()
		j.WriteObjectField("can_send_media_messages")
		s.CanSendMediaMessages.WriteJSON(j)
	}
	if s.CanSendMessages.Set {
		more.More()
		j.WriteObjectField("can_send_messages")
		s.CanSendMessages.WriteJSON(j)
	}
	if s.CanSendOtherMessages.Set {
		more.More()
		j.WriteObjectField("can_send_other_messages")
		s.CanSendOtherMessages.WriteJSON(j)
	}
	if s.CanSendPolls.Set {
		more.More()
		j.WriteObjectField("can_send_polls")
		s.CanSendPolls.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads ChatPermissions from json stream.
func (s *ChatPermissions) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_add_web_page_previews":
			if err := func() error {
				s.CanAddWebPagePreviews.Reset()
				if err := s.CanAddWebPagePreviews.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_change_info":
			if err := func() error {
				s.CanChangeInfo.Reset()
				if err := s.CanChangeInfo.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_invite_users":
			if err := func() error {
				s.CanInviteUsers.Reset()
				if err := s.CanInviteUsers.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_pin_messages":
			if err := func() error {
				s.CanPinMessages.Reset()
				if err := s.CanPinMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_send_media_messages":
			if err := func() error {
				s.CanSendMediaMessages.Reset()
				if err := s.CanSendMediaMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_send_messages":
			if err := func() error {
				s.CanSendMessages.Reset()
				if err := s.CanSendMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_send_other_messages":
			if err := func() error {
				s.CanSendOtherMessages.Reset()
				if err := s.CanSendOtherMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_send_polls":
			if err := func() error {
				s.CanSendPolls.Reset()
				if err := s.CanSendPolls.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChatPhoto) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("big_file_id")
	j.WriteString(s.BigFileID)
	more.More()
	j.WriteObjectField("big_file_unique_id")
	j.WriteString(s.BigFileUniqueID)
	more.More()
	j.WriteObjectField("small_file_id")
	j.WriteString(s.SmallFileID)
	more.More()
	j.WriteObjectField("small_file_unique_id")
	j.WriteString(s.SmallFileUniqueID)
	j.WriteObjectEnd()
}

// ReadJSON reads ChatPhoto from json stream.
func (s *ChatPhoto) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "big_file_id":
			if err := func() error {
				s.BigFileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "big_file_unique_id":
			if err := func() error {
				s.BigFileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "small_file_id":
			if err := func() error {
				s.SmallFileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "small_file_unique_id":
			if err := func() error {
				s.SmallFileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChatType) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ChatType from json stream.
func (s *ChatType) ReadJSON(i *json.Iterator) error {
	*s = ChatType(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChosenInlineResult) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("from")
	s.From.WriteJSON(j)
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("query")
	j.WriteString(s.Query)
	more.More()
	j.WriteObjectField("result_id")
	j.WriteString(s.ResultID)
	j.WriteObjectEnd()
}

// ReadJSON reads ChosenInlineResult from json stream.
func (s *ChosenInlineResult) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "from":
			if err := func() error {
				if err := s.From.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "query":
			if err := func() error {
				s.Query = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result_id":
			if err := func() error {
				s.ResultID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ClosePostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	j.WriteBool(s.Result)
	j.WriteObjectEnd()
}

// ReadJSON reads ClosePostResOK from json stream.
func (s *ClosePostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Contact) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("first_name")
	j.WriteString(s.FirstName)
	if s.LastName.Set {
		more.More()
		j.WriteObjectField("last_name")
		s.LastName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("phone_number")
	j.WriteString(s.PhoneNumber)
	if s.UserID.Set {
		more.More()
		j.WriteObjectField("user_id")
		s.UserID.WriteJSON(j)
	}
	if s.Vcard.Set {
		more.More()
		j.WriteObjectField("vcard")
		s.Vcard.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads Contact from json stream.
func (s *Contact) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "first_name":
			if err := func() error {
				s.FirstName = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phone_number":
			if err := func() error {
				s.PhoneNumber = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID.Reset()
				if err := s.UserID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "vcard":
			if err := func() error {
				s.Vcard.Reset()
				if err := s.Vcard.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteStickerFromSetPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sticker")
	j.WriteString(s.Sticker)
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStickerFromSetPostReqApplicationJSON from json stream.
func (s *DeleteStickerFromSetPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sticker":
			if err := func() error {
				s.Sticker = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteStickerFromSetPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sticker")
	j.WriteString(s.Sticker)
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStickerFromSetPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *DeleteStickerFromSetPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sticker":
			if err := func() error {
				s.Sticker = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteStickerFromSetPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sticker")
	j.WriteString(s.Sticker)
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStickerFromSetPostReqMultipartFormData from json stream.
func (s *DeleteStickerFromSetPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sticker":
			if err := func() error {
				s.Sticker = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteStickerFromSetPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	j.WriteBool(s.Result)
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStickerFromSetPostResOK from json stream.
func (s *DeleteStickerFromSetPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteWebhookPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DropPendingUpdates.Set {
		more.More()
		j.WriteObjectField("drop_pending_updates")
		s.DropPendingUpdates.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteWebhookPostReqApplicationJSON from json stream.
func (s *DeleteWebhookPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "drop_pending_updates":
			if err := func() error {
				s.DropPendingUpdates.Reset()
				if err := s.DropPendingUpdates.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteWebhookPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DropPendingUpdates.Set {
		more.More()
		j.WriteObjectField("drop_pending_updates")
		s.DropPendingUpdates.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteWebhookPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *DeleteWebhookPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "drop_pending_updates":
			if err := func() error {
				s.DropPendingUpdates.Reset()
				if err := s.DropPendingUpdates.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteWebhookPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DropPendingUpdates.Set {
		more.More()
		j.WriteObjectField("drop_pending_updates")
		s.DropPendingUpdates.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteWebhookPostReqMultipartFormData from json stream.
func (s *DeleteWebhookPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "drop_pending_updates":
			if err := func() error {
				s.DropPendingUpdates.Reset()
				if err := s.DropPendingUpdates.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteWebhookPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	j.WriteBool(s.Result)
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteWebhookPostResOK from json stream.
func (s *DeleteWebhookPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Dice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("emoji")
	j.WriteString(s.Emoji)
	more.More()
	j.WriteObjectField("value")
	j.WriteInt(s.Value)
	j.WriteObjectEnd()
}

// ReadJSON reads Dice from json stream.
func (s *Dice) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "emoji":
			if err := func() error {
				s.Emoji = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Document) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileName.Set {
		more.More()
		j.WriteObjectField("file_name")
		s.FileName.WriteJSON(j)
	}
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	if s.MimeType.Set {
		more.More()
		j.WriteObjectField("mime_type")
		s.MimeType.WriteJSON(j)
	}
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads Document from json stream.
func (s *Document) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mime_type":
			if err := func() error {
				s.MimeType.Reset()
				if err := s.MimeType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EncryptedCredentials) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("data")
	j.WriteString(s.Data)
	more.More()
	j.WriteObjectField("hash")
	j.WriteString(s.Hash)
	more.More()
	j.WriteObjectField("secret")
	j.WriteString(s.Secret)
	j.WriteObjectEnd()
}

// ReadJSON reads EncryptedCredentials from json stream.
func (s *EncryptedCredentials) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "data":
			if err := func() error {
				s.Data = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hash":
			if err := func() error {
				s.Hash = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secret":
			if err := func() error {
				s.Secret = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EncryptedPassportElement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Data.Set {
		more.More()
		j.WriteObjectField("data")
		s.Data.WriteJSON(j)
	}
	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}
	if s.Files != nil {
		more.More()
		j.WriteObjectField("files")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Files {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.FrontSide.Set {
		more.More()
		j.WriteObjectField("front_side")
		s.FrontSide.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("hash")
	j.WriteString(s.Hash)
	if s.PhoneNumber.Set {
		more.More()
		j.WriteObjectField("phone_number")
		s.PhoneNumber.WriteJSON(j)
	}
	if s.ReverseSide.Set {
		more.More()
		j.WriteObjectField("reverse_side")
		s.ReverseSide.WriteJSON(j)
	}
	if s.Selfie.Set {
		more.More()
		j.WriteObjectField("selfie")
		s.Selfie.WriteJSON(j)
	}
	if s.Translation != nil {
		more.More()
		j.WriteObjectField("translation")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Translation {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("type")
	s.Type.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads EncryptedPassportElement from json stream.
func (s *EncryptedPassportElement) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "files":
			if err := func() error {
				s.Files = s.Files[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem PassportFile
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Files = append(s.Files, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "front_side":
			if err := func() error {
				s.FrontSide.Reset()
				if err := s.FrontSide.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hash":
			if err := func() error {
				s.Hash = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reverse_side":
			if err := func() error {
				s.ReverseSide.Reset()
				if err := s.ReverseSide.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selfie":
			if err := func() error {
				s.Selfie.Reset()
				if err := s.Selfie.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "translation":
			if err := func() error {
				s.Translation = s.Translation[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem PassportFile
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Translation = append(s.Translation, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = EncryptedPassportElementType(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EncryptedPassportElementType) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads EncryptedPassportElementType from json stream.
func (s *EncryptedPassportElementType) ReadJSON(i *json.Iterator) error {
	*s = EncryptedPassportElementType(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Error) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	more.More()
	j.WriteObjectField("error_code")
	j.WriteInt(s.ErrorCode)
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	if s.Parameters.Set {
		more.More()
		j.WriteObjectField("parameters")
		s.Parameters.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads Error from json stream.
func (s *Error) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "error_code":
			if err := func() error {
				s.ErrorCode = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parameters":
			if err := func() error {
				s.Parameters.Reset()
				if err := s.Parameters.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ErrorStatusCode) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ErrorStatusCode from json stream.
func (s *ErrorStatusCode) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s File) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FilePath.Set {
		more.More()
		j.WriteObjectField("file_path")
		s.FilePath.WriteJSON(j)
	}
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	j.WriteObjectEnd()
}

// ReadJSON reads File from json stream.
func (s *File) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Game) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Animation.Set {
		more.More()
		j.WriteObjectField("animation")
		s.Animation.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	more.More()
	j.WriteObjectField("photo")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Photo {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Text.Set {
		more.More()
		j.WriteObjectField("text")
		s.Text.WriteJSON(j)
	}
	if s.TextEntities != nil {
		more.More()
		j.WriteObjectField("text_entities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TextEntities {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// ReadJSON reads Game from json stream.
func (s *Game) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "animation":
			if err := func() error {
				s.Animation.Reset()
				if err := s.Animation.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo":
			if err := func() error {
				s.Photo = s.Photo[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem PhotoSize
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Photo = append(s.Photo, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text.Reset()
				if err := s.Text.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text_entities":
			if err := func() error {
				s.TextEntities = s.TextEntities[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem MessageEntity
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.TextEntities = append(s.TextEntities, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GameHighScore) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("position")
	j.WriteInt(s.Position)
	more.More()
	j.WriteObjectField("score")
	j.WriteInt(s.Score)
	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads GameHighScore from json stream.
func (s *GameHighScore) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "position":
			if err := func() error {
				s.Position = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "score":
			if err := func() error {
				s.Score = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetFilePostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	j.WriteObjectEnd()
}

// ReadJSON reads GetFilePostReqApplicationJSON from json stream.
func (s *GetFilePostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetFilePostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	j.WriteObjectEnd()
}

// ReadJSON reads GetFilePostReqApplicationXWwwFormUrlencoded from json stream.
func (s *GetFilePostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetFilePostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	j.WriteObjectEnd()
}

// ReadJSON reads GetFilePostReqMultipartFormData from json stream.
func (s *GetFilePostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetFilePostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	s.Result.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads GetFilePostResOK from json stream.
func (s *GetFilePostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetGameHighScoresPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		j.WriteObjectField("chat_id")
		s.ChatID.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// ReadJSON reads GetGameHighScoresPostReqApplicationJSON from json stream.
func (s *GetGameHighScoresPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_id":
			if err := func() error {
				s.ChatID.Reset()
				if err := s.ChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetGameHighScoresPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		j.WriteObjectField("chat_id")
		s.ChatID.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// ReadJSON reads GetGameHighScoresPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *GetGameHighScoresPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_id":
			if err := func() error {
				s.ChatID.Reset()
				if err := s.ChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetGameHighScoresPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		j.WriteObjectField("chat_id")
		s.ChatID.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// ReadJSON reads GetGameHighScoresPostReqMultipartFormData from json stream.
func (s *GetGameHighScoresPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_id":
			if err := func() error {
				s.ChatID.Reset()
				if err := s.ChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetGameHighScoresPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Result {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads GetGameHighScoresPostResOK from json stream.
func (s *GetGameHighScoresPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = s.Result[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem GameHighScore
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Result = append(s.Result, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetMePostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	s.Result.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads GetMePostResOK from json stream.
func (s *GetMePostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetMyCommandsPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Result {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads GetMyCommandsPostResOK from json stream.
func (s *GetMyCommandsPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = s.Result[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem BotCommand
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Result = append(s.Result, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetStickerSetPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads GetStickerSetPostReqApplicationJSON from json stream.
func (s *GetStickerSetPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetStickerSetPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads GetStickerSetPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *GetStickerSetPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetStickerSetPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads GetStickerSetPostReqMultipartFormData from json stream.
func (s *GetStickerSetPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetStickerSetPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	s.Result.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads GetStickerSetPostResOK from json stream.
func (s *GetStickerSetPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUpdatesPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedUpdates != nil {
		more.More()
		j.WriteObjectField("allowed_updates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedUpdates {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Limit.Set {
		more.More()
		j.WriteObjectField("limit")
		s.Limit.WriteJSON(j)
	}
	if s.Offset.Set {
		more.More()
		j.WriteObjectField("offset")
		s.Offset.WriteJSON(j)
	}
	if s.Timeout.Set {
		more.More()
		j.WriteObjectField("timeout")
		s.Timeout.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads GetUpdatesPostReqApplicationJSON from json stream.
func (s *GetUpdatesPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_updates":
			if err := func() error {
				s.AllowedUpdates = s.AllowedUpdates[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem string
					if err := func() error {
						elem = string(i.ReadString())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedUpdates = append(s.AllowedUpdates, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "offset":
			if err := func() error {
				s.Offset.Reset()
				if err := s.Offset.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "timeout":
			if err := func() error {
				s.Timeout.Reset()
				if err := s.Timeout.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUpdatesPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedUpdates != nil {
		more.More()
		j.WriteObjectField("allowed_updates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedUpdates {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Limit.Set {
		more.More()
		j.WriteObjectField("limit")
		s.Limit.WriteJSON(j)
	}
	if s.Offset.Set {
		more.More()
		j.WriteObjectField("offset")
		s.Offset.WriteJSON(j)
	}
	if s.Timeout.Set {
		more.More()
		j.WriteObjectField("timeout")
		s.Timeout.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads GetUpdatesPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *GetUpdatesPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_updates":
			if err := func() error {
				s.AllowedUpdates = s.AllowedUpdates[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem string
					if err := func() error {
						elem = string(i.ReadString())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedUpdates = append(s.AllowedUpdates, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "offset":
			if err := func() error {
				s.Offset.Reset()
				if err := s.Offset.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "timeout":
			if err := func() error {
				s.Timeout.Reset()
				if err := s.Timeout.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUpdatesPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedUpdates != nil {
		more.More()
		j.WriteObjectField("allowed_updates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedUpdates {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Limit.Set {
		more.More()
		j.WriteObjectField("limit")
		s.Limit.WriteJSON(j)
	}
	if s.Offset.Set {
		more.More()
		j.WriteObjectField("offset")
		s.Offset.WriteJSON(j)
	}
	if s.Timeout.Set {
		more.More()
		j.WriteObjectField("timeout")
		s.Timeout.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads GetUpdatesPostReqMultipartFormData from json stream.
func (s *GetUpdatesPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_updates":
			if err := func() error {
				s.AllowedUpdates = s.AllowedUpdates[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem string
					if err := func() error {
						elem = string(i.ReadString())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedUpdates = append(s.AllowedUpdates, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "offset":
			if err := func() error {
				s.Offset.Reset()
				if err := s.Offset.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "timeout":
			if err := func() error {
				s.Timeout.Reset()
				if err := s.Timeout.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUpdatesPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Result {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads GetUpdatesPostResOK from json stream.
func (s *GetUpdatesPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = s.Result[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem Update
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Result = append(s.Result, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUserProfilePhotosPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limit.Set {
		more.More()
		j.WriteObjectField("limit")
		s.Limit.WriteJSON(j)
	}
	if s.Offset.Set {
		more.More()
		j.WriteObjectField("offset")
		s.Offset.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// ReadJSON reads GetUserProfilePhotosPostReqApplicationJSON from json stream.
func (s *GetUserProfilePhotosPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "offset":
			if err := func() error {
				s.Offset.Reset()
				if err := s.Offset.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUserProfilePhotosPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limit.Set {
		more.More()
		j.WriteObjectField("limit")
		s.Limit.WriteJSON(j)
	}
	if s.Offset.Set {
		more.More()
		j.WriteObjectField("offset")
		s.Offset.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// ReadJSON reads GetUserProfilePhotosPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *GetUserProfilePhotosPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "offset":
			if err := func() error {
				s.Offset.Reset()
				if err := s.Offset.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUserProfilePhotosPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limit.Set {
		more.More()
		j.WriteObjectField("limit")
		s.Limit.WriteJSON(j)
	}
	if s.Offset.Set {
		more.More()
		j.WriteObjectField("offset")
		s.Offset.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// ReadJSON reads GetUserProfilePhotosPostReqMultipartFormData from json stream.
func (s *GetUserProfilePhotosPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "offset":
			if err := func() error {
				s.Offset.Reset()
				if err := s.Offset.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUserProfilePhotosPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	s.Result.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads GetUserProfilePhotosPostResOK from json stream.
func (s *GetUserProfilePhotosPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetWebhookInfoPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	s.Result.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads GetWebhookInfoPostResOK from json stream.
func (s *GetWebhookInfoPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InlineKeyboardButton) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CallbackData.Set {
		more.More()
		j.WriteObjectField("callback_data")
		s.CallbackData.WriteJSON(j)
	}
	if s.CallbackGame.Set {
		more.More()
		j.WriteObjectField("callback_game")
		s.CallbackGame.WriteJSON(j)
	}
	if s.LoginURL.Set {
		more.More()
		j.WriteObjectField("login_url")
		s.LoginURL.WriteJSON(j)
	}
	if s.Pay.Set {
		more.More()
		j.WriteObjectField("pay")
		s.Pay.WriteJSON(j)
	}
	if s.SwitchInlineQuery.Set {
		more.More()
		j.WriteObjectField("switch_inline_query")
		s.SwitchInlineQuery.WriteJSON(j)
	}
	if s.SwitchInlineQueryCurrentChat.Set {
		more.More()
		j.WriteObjectField("switch_inline_query_current_chat")
		s.SwitchInlineQueryCurrentChat.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("text")
	j.WriteString(s.Text)
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads InlineKeyboardButton from json stream.
func (s *InlineKeyboardButton) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "callback_data":
			if err := func() error {
				s.CallbackData.Reset()
				if err := s.CallbackData.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "callback_game":
			if err := func() error {
				s.CallbackGame.Reset()
				if err := s.CallbackGame.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "login_url":
			if err := func() error {
				s.LoginURL.Reset()
				if err := s.LoginURL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pay":
			if err := func() error {
				s.Pay.Reset()
				if err := s.Pay.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "switch_inline_query":
			if err := func() error {
				s.SwitchInlineQuery.Reset()
				if err := s.SwitchInlineQuery.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "switch_inline_query_current_chat":
			if err := func() error {
				s.SwitchInlineQueryCurrentChat.Reset()
				if err := s.SwitchInlineQueryCurrentChat.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InlineKeyboardMarkup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("inline_keyboard")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.InlineKeyboard {
		more.More()
		more.Down()
		j.WriteArrayStart()
		for _, elem := range elem {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads InlineKeyboardMarkup from json stream.
func (s *InlineKeyboardMarkup) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "inline_keyboard":
			if err := func() error {
				s.InlineKeyboard = s.InlineKeyboard[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem []InlineKeyboardButton
					if err := func() error {
						elem = elem[:0]
						var retErr error
						i.ReadArrayCB(func(i *json.Iterator) bool {
							var elemElem InlineKeyboardButton
							if err := func() error {
								if err := elemElem.ReadJSON(i); err != nil {
									return err
								}
								return i.Error
							}(); err != nil {
								retErr = err
								return false
							}
							elem = append(elem, elemElem)
							return true
						})
						if retErr != nil {
							return retErr
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.InlineKeyboard = append(s.InlineKeyboard, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InlineQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("from")
	s.From.WriteJSON(j)
	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)
	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("offset")
	j.WriteString(s.Offset)
	more.More()
	j.WriteObjectField("query")
	j.WriteString(s.Query)
	j.WriteObjectEnd()
}

// ReadJSON reads InlineQuery from json stream.
func (s *InlineQuery) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "from":
			if err := func() error {
				if err := s.From.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "offset":
			if err := func() error {
				s.Offset = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "query":
			if err := func() error {
				s.Query = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (InputFile) WriteJSON(j *json.Stream)        {}
func (InputFile) ReadJSON(i *json.Iterator) error { return nil }

// WriteJSON implements json.Marshaler.
func (s Invoice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("currency")
	j.WriteString(s.Currency)
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	more.More()
	j.WriteObjectField("start_parameter")
	j.WriteString(s.StartParameter)
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	more.More()
	j.WriteObjectField("total_amount")
	j.WriteInt(s.TotalAmount)
	j.WriteObjectEnd()
}

// ReadJSON reads Invoice from json stream.
func (s *Invoice) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currency":
			if err := func() error {
				s.Currency = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "start_parameter":
			if err := func() error {
				s.StartParameter = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "total_amount":
			if err := func() error {
				s.TotalAmount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s LabeledPrice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("amount")
	j.WriteInt(s.Amount)
	more.More()
	j.WriteObjectField("label")
	j.WriteString(s.Label)
	j.WriteObjectEnd()
}

// ReadJSON reads LabeledPrice from json stream.
func (s *LabeledPrice) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "amount":
			if err := func() error {
				s.Amount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "label":
			if err := func() error {
				s.Label = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Location) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Heading.Set {
		more.More()
		j.WriteObjectField("heading")
		s.Heading.WriteJSON(j)
	}
	if s.HorizontalAccuracy.Set {
		more.More()
		j.WriteObjectField("horizontal_accuracy")
		s.HorizontalAccuracy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("latitude")
	j.WriteFloat64(s.Latitude)
	if s.LivePeriod.Set {
		more.More()
		j.WriteObjectField("live_period")
		s.LivePeriod.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("longitude")
	j.WriteFloat64(s.Longitude)
	if s.ProximityAlertRadius.Set {
		more.More()
		j.WriteObjectField("proximity_alert_radius")
		s.ProximityAlertRadius.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads Location from json stream.
func (s *Location) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "heading":
			if err := func() error {
				s.Heading.Reset()
				if err := s.Heading.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "horizontal_accuracy":
			if err := func() error {
				s.HorizontalAccuracy.Reset()
				if err := s.HorizontalAccuracy.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "latitude":
			if err := func() error {
				s.Latitude = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "live_period":
			if err := func() error {
				s.LivePeriod.Reset()
				if err := s.LivePeriod.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "longitude":
			if err := func() error {
				s.Longitude = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "proximity_alert_radius":
			if err := func() error {
				s.ProximityAlertRadius.Reset()
				if err := s.ProximityAlertRadius.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s LogOutPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	j.WriteBool(s.Result)
	j.WriteObjectEnd()
}

// ReadJSON reads LogOutPostResOK from json stream.
func (s *LogOutPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s LoginUrl) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.BotUsername.Set {
		more.More()
		j.WriteObjectField("bot_username")
		s.BotUsername.WriteJSON(j)
	}
	if s.ForwardText.Set {
		more.More()
		j.WriteObjectField("forward_text")
		s.ForwardText.WriteJSON(j)
	}
	if s.RequestWriteAccess.Set {
		more.More()
		j.WriteObjectField("request_write_access")
		s.RequestWriteAccess.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)
	j.WriteObjectEnd()
}

// ReadJSON reads LoginUrl from json stream.
func (s *LoginUrl) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "bot_username":
			if err := func() error {
				s.BotUsername.Reset()
				if err := s.BotUsername.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_text":
			if err := func() error {
				s.ForwardText.Reset()
				if err := s.ForwardText.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "request_write_access":
			if err := func() error {
				s.RequestWriteAccess.Reset()
				if err := s.RequestWriteAccess.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MaskPosition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("point")
	s.Point.WriteJSON(j)
	more.More()
	j.WriteObjectField("scale")
	j.WriteFloat64(s.Scale)
	more.More()
	j.WriteObjectField("x_shift")
	j.WriteFloat64(s.XShift)
	more.More()
	j.WriteObjectField("y_shift")
	j.WriteFloat64(s.YShift)
	j.WriteObjectEnd()
}

// ReadJSON reads MaskPosition from json stream.
func (s *MaskPosition) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "point":
			if err := func() error {
				s.Point = MaskPositionPoint(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scale":
			if err := func() error {
				s.Scale = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "x_shift":
			if err := func() error {
				s.XShift = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "y_shift":
			if err := func() error {
				s.YShift = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MaskPositionPoint) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MaskPositionPoint from json stream.
func (s *MaskPositionPoint) ReadJSON(i *json.Iterator) error {
	*s = MaskPositionPoint(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Message) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Animation.Set {
		more.More()
		j.WriteObjectField("animation")
		s.Animation.WriteJSON(j)
	}
	if s.Audio.Set {
		more.More()
		j.WriteObjectField("audio")
		s.Audio.WriteJSON(j)
	}
	if s.AuthorSignature.Set {
		more.More()
		j.WriteObjectField("author_signature")
		s.AuthorSignature.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.CaptionEntities != nil {
		more.More()
		j.WriteObjectField("caption_entities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CaptionEntities {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ChannelChatCreated.Set {
		more.More()
		j.WriteObjectField("channel_chat_created")
		s.ChannelChatCreated.WriteJSON(j)
	}
	if s.Chat != nil {
		more.More()
		j.WriteObjectField("chat")
		s.Chat.WriteJSON(j)
	}
	if s.ConnectedWebsite.Set {
		more.More()
		j.WriteObjectField("connected_website")
		s.ConnectedWebsite.WriteJSON(j)
	}
	if s.Contact.Set {
		more.More()
		j.WriteObjectField("contact")
		s.Contact.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("date")
	j.WriteInt(s.Date)
	if s.DeleteChatPhoto.Set {
		more.More()
		j.WriteObjectField("delete_chat_photo")
		s.DeleteChatPhoto.WriteJSON(j)
	}
	if s.Dice.Set {
		more.More()
		j.WriteObjectField("dice")
		s.Dice.WriteJSON(j)
	}
	if s.Document.Set {
		more.More()
		j.WriteObjectField("document")
		s.Document.WriteJSON(j)
	}
	if s.EditDate.Set {
		more.More()
		j.WriteObjectField("edit_date")
		s.EditDate.WriteJSON(j)
	}
	if s.Entities != nil {
		more.More()
		j.WriteObjectField("entities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Entities {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ForwardDate.Set {
		more.More()
		j.WriteObjectField("forward_date")
		s.ForwardDate.WriteJSON(j)
	}
	if s.ForwardFrom.Set {
		more.More()
		j.WriteObjectField("forward_from")
		s.ForwardFrom.WriteJSON(j)
	}
	if s.ForwardFromChat != nil {
		more.More()
		j.WriteObjectField("forward_from_chat")
		s.ForwardFromChat.WriteJSON(j)
	}
	if s.ForwardFromMessageID.Set {
		more.More()
		j.WriteObjectField("forward_from_message_id")
		s.ForwardFromMessageID.WriteJSON(j)
	}
	if s.ForwardSenderName.Set {
		more.More()
		j.WriteObjectField("forward_sender_name")
		s.ForwardSenderName.WriteJSON(j)
	}
	if s.ForwardSignature.Set {
		more.More()
		j.WriteObjectField("forward_signature")
		s.ForwardSignature.WriteJSON(j)
	}
	if s.From.Set {
		more.More()
		j.WriteObjectField("from")
		s.From.WriteJSON(j)
	}
	if s.Game.Set {
		more.More()
		j.WriteObjectField("game")
		s.Game.WriteJSON(j)
	}
	if s.GroupChatCreated.Set {
		more.More()
		j.WriteObjectField("group_chat_created")
		s.GroupChatCreated.WriteJSON(j)
	}
	if s.Invoice.Set {
		more.More()
		j.WriteObjectField("invoice")
		s.Invoice.WriteJSON(j)
	}
	if s.LeftChatMember.Set {
		more.More()
		j.WriteObjectField("left_chat_member")
		s.LeftChatMember.WriteJSON(j)
	}
	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}
	if s.MediaGroupID.Set {
		more.More()
		j.WriteObjectField("media_group_id")
		s.MediaGroupID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	if s.MigrateFromChatID.Set {
		more.More()
		j.WriteObjectField("migrate_from_chat_id")
		s.MigrateFromChatID.WriteJSON(j)
	}
	if s.MigrateToChatID.Set {
		more.More()
		j.WriteObjectField("migrate_to_chat_id")
		s.MigrateToChatID.WriteJSON(j)
	}
	if s.NewChatMembers != nil {
		more.More()
		j.WriteObjectField("new_chat_members")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NewChatMembers {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NewChatPhoto != nil {
		more.More()
		j.WriteObjectField("new_chat_photo")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NewChatPhoto {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NewChatTitle.Set {
		more.More()
		j.WriteObjectField("new_chat_title")
		s.NewChatTitle.WriteJSON(j)
	}
	if s.PassportData.Set {
		more.More()
		j.WriteObjectField("passport_data")
		s.PassportData.WriteJSON(j)
	}
	if s.Photo != nil {
		more.More()
		j.WriteObjectField("photo")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Photo {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.PinnedMessage != nil {
		more.More()
		j.WriteObjectField("pinned_message")
		s.PinnedMessage.WriteJSON(j)
	}
	if s.Poll.Set {
		more.More()
		j.WriteObjectField("poll")
		s.Poll.WriteJSON(j)
	}
	if s.ProximityAlertTriggered.Set {
		more.More()
		j.WriteObjectField("proximity_alert_triggered")
		s.ProximityAlertTriggered.WriteJSON(j)
	}
	if s.ReplyMarkup.Set {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	if s.ReplyToMessage != nil {
		more.More()
		j.WriteObjectField("reply_to_message")
		s.ReplyToMessage.WriteJSON(j)
	}
	if s.SenderChat != nil {
		more.More()
		j.WriteObjectField("sender_chat")
		s.SenderChat.WriteJSON(j)
	}
	if s.Sticker.Set {
		more.More()
		j.WriteObjectField("sticker")
		s.Sticker.WriteJSON(j)
	}
	if s.SuccessfulPayment.Set {
		more.More()
		j.WriteObjectField("successful_payment")
		s.SuccessfulPayment.WriteJSON(j)
	}
	if s.SupergroupChatCreated.Set {
		more.More()
		j.WriteObjectField("supergroup_chat_created")
		s.SupergroupChatCreated.WriteJSON(j)
	}
	if s.Text.Set {
		more.More()
		j.WriteObjectField("text")
		s.Text.WriteJSON(j)
	}
	if s.Venue.Set {
		more.More()
		j.WriteObjectField("venue")
		s.Venue.WriteJSON(j)
	}
	if s.ViaBot.Set {
		more.More()
		j.WriteObjectField("via_bot")
		s.ViaBot.WriteJSON(j)
	}
	if s.Video.Set {
		more.More()
		j.WriteObjectField("video")
		s.Video.WriteJSON(j)
	}
	if s.VideoNote.Set {
		more.More()
		j.WriteObjectField("video_note")
		s.VideoNote.WriteJSON(j)
	}
	if s.Voice.Set {
		more.More()
		j.WriteObjectField("voice")
		s.Voice.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads Message from json stream.
func (s *Message) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "animation":
			if err := func() error {
				s.Animation.Reset()
				if err := s.Animation.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "audio":
			if err := func() error {
				s.Audio.Reset()
				if err := s.Audio.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "author_signature":
			if err := func() error {
				s.AuthorSignature.Reset()
				if err := s.AuthorSignature.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "caption_entities":
			if err := func() error {
				s.CaptionEntities = s.CaptionEntities[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem MessageEntity
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.CaptionEntities = append(s.CaptionEntities, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "channel_chat_created":
			if err := func() error {
				s.ChannelChatCreated.Reset()
				if err := s.ChannelChatCreated.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chat":
			if err := func() error {
				s.Chat = nil
				var elem Chat
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Chat = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "connected_website":
			if err := func() error {
				s.ConnectedWebsite.Reset()
				if err := s.ConnectedWebsite.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "contact":
			if err := func() error {
				s.Contact.Reset()
				if err := s.Contact.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "date":
			if err := func() error {
				s.Date = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "delete_chat_photo":
			if err := func() error {
				s.DeleteChatPhoto.Reset()
				if err := s.DeleteChatPhoto.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "dice":
			if err := func() error {
				s.Dice.Reset()
				if err := s.Dice.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "document":
			if err := func() error {
				s.Document.Reset()
				if err := s.Document.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "edit_date":
			if err := func() error {
				s.EditDate.Reset()
				if err := s.EditDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "entities":
			if err := func() error {
				s.Entities = s.Entities[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem MessageEntity
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Entities = append(s.Entities, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_date":
			if err := func() error {
				s.ForwardDate.Reset()
				if err := s.ForwardDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_from":
			if err := func() error {
				s.ForwardFrom.Reset()
				if err := s.ForwardFrom.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_from_chat":
			if err := func() error {
				s.ForwardFromChat = nil
				var elem Chat
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.ForwardFromChat = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_from_message_id":
			if err := func() error {
				s.ForwardFromMessageID.Reset()
				if err := s.ForwardFromMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_sender_name":
			if err := func() error {
				s.ForwardSenderName.Reset()
				if err := s.ForwardSenderName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_signature":
			if err := func() error {
				s.ForwardSignature.Reset()
				if err := s.ForwardSignature.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "game":
			if err := func() error {
				s.Game.Reset()
				if err := s.Game.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "group_chat_created":
			if err := func() error {
				s.GroupChatCreated.Reset()
				if err := s.GroupChatCreated.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "invoice":
			if err := func() error {
				s.Invoice.Reset()
				if err := s.Invoice.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "left_chat_member":
			if err := func() error {
				s.LeftChatMember.Reset()
				if err := s.LeftChatMember.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "media_group_id":
			if err := func() error {
				s.MediaGroupID.Reset()
				if err := s.MediaGroupID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "migrate_from_chat_id":
			if err := func() error {
				s.MigrateFromChatID.Reset()
				if err := s.MigrateFromChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "migrate_to_chat_id":
			if err := func() error {
				s.MigrateToChatID.Reset()
				if err := s.MigrateToChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "new_chat_members":
			if err := func() error {
				s.NewChatMembers = s.NewChatMembers[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem User
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NewChatMembers = append(s.NewChatMembers, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "new_chat_photo":
			if err := func() error {
				s.NewChatPhoto = s.NewChatPhoto[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem PhotoSize
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NewChatPhoto = append(s.NewChatPhoto, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "new_chat_title":
			if err := func() error {
				s.NewChatTitle.Reset()
				if err := s.NewChatTitle.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "passport_data":
			if err := func() error {
				s.PassportData.Reset()
				if err := s.PassportData.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo":
			if err := func() error {
				s.Photo = s.Photo[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem PhotoSize
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Photo = append(s.Photo, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pinned_message":
			if err := func() error {
				s.PinnedMessage = nil
				var elem Message
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.PinnedMessage = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "poll":
			if err := func() error {
				s.Poll.Reset()
				if err := s.Poll.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "proximity_alert_triggered":
			if err := func() error {
				s.ProximityAlertTriggered.Reset()
				if err := s.ProximityAlertTriggered.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_markup":
			if err := func() error {
				s.ReplyMarkup.Reset()
				if err := s.ReplyMarkup.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message":
			if err := func() error {
				s.ReplyToMessage = nil
				var elem Message
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.ReplyToMessage = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sender_chat":
			if err := func() error {
				s.SenderChat = nil
				var elem Chat
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.SenderChat = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sticker":
			if err := func() error {
				s.Sticker.Reset()
				if err := s.Sticker.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "successful_payment":
			if err := func() error {
				s.SuccessfulPayment.Reset()
				if err := s.SuccessfulPayment.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "supergroup_chat_created":
			if err := func() error {
				s.SupergroupChatCreated.Reset()
				if err := s.SupergroupChatCreated.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text.Reset()
				if err := s.Text.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "venue":
			if err := func() error {
				s.Venue.Reset()
				if err := s.Venue.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "via_bot":
			if err := func() error {
				s.ViaBot.Reset()
				if err := s.ViaBot.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "video_note":
			if err := func() error {
				s.VideoNote.Reset()
				if err := s.VideoNote.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "voice":
			if err := func() error {
				s.Voice.Reset()
				if err := s.Voice.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MessageEntity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Language.Set {
		more.More()
		j.WriteObjectField("language")
		s.Language.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("length")
	j.WriteInt(s.Length)
	more.More()
	j.WriteObjectField("offset")
	j.WriteInt(s.Offset)
	more.More()
	j.WriteObjectField("type")
	s.Type.WriteJSON(j)
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads MessageEntity from json stream.
func (s *MessageEntity) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "language":
			if err := func() error {
				s.Language.Reset()
				if err := s.Language.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "length":
			if err := func() error {
				s.Length = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "offset":
			if err := func() error {
				s.Offset = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = MessageEntityType(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MessageEntityType) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MessageEntityType from json stream.
func (s *MessageEntityType) ReadJSON(i *json.Iterator) error {
	*s = MessageEntityType(i.ReadString())
	return i.Error
}

// WriteJSON writes json value of Animation to json stream.
func (o OptAnimation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Animation from json iterator.
func (o *OptAnimation) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAnimation", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Audio to json stream.
func (o OptAudio) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Audio from json iterator.
func (o *OptAudio) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAudio", i.WhatIsNext())
	}
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(j *json.Stream) {
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.BoolValue:
		o.Set = true
		o.Value = bool(i.ReadBool())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBool", i.WhatIsNext())
	}
}

// WriteJSON writes json value of CallbackGame to json stream.
func (o OptCallbackGame) WriteJSON(j *json.Stream) {
}

// ReadJSON reads json value of CallbackGame from json iterator.
func (o *OptCallbackGame) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCallbackGame", i.WhatIsNext())
	}
}

// WriteJSON writes json value of CallbackQuery to json stream.
func (o OptCallbackQuery) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of CallbackQuery from json iterator.
func (o *OptCallbackQuery) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCallbackQuery", i.WhatIsNext())
	}
}

// WriteJSON writes json value of ChatLocation to json stream.
func (o OptChatLocation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ChatLocation from json iterator.
func (o *OptChatLocation) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptChatLocation", i.WhatIsNext())
	}
}

// WriteJSON writes json value of ChatPermissions to json stream.
func (o OptChatPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ChatPermissions from json iterator.
func (o *OptChatPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptChatPermissions", i.WhatIsNext())
	}
}

// WriteJSON writes json value of ChatPhoto to json stream.
func (o OptChatPhoto) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ChatPhoto from json iterator.
func (o *OptChatPhoto) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptChatPhoto", i.WhatIsNext())
	}
}

// WriteJSON writes json value of ChosenInlineResult to json stream.
func (o OptChosenInlineResult) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ChosenInlineResult from json iterator.
func (o *OptChosenInlineResult) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptChosenInlineResult", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Contact to json stream.
func (o OptContact) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Contact from json iterator.
func (o *OptContact) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptContact", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Dice to json stream.
func (o OptDice) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Dice from json iterator.
func (o *OptDice) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptDice", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Document to json stream.
func (o OptDocument) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Document from json iterator.
func (o *OptDocument) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptDocument", i.WhatIsNext())
	}
}

// WriteJSON writes json value of float64 to json stream.
func (o OptFloat64) WriteJSON(j *json.Stream) {
	j.WriteFloat64(float64(o.Value))
}

// ReadJSON reads json value of float64 from json iterator.
func (o *OptFloat64) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = float64(i.ReadFloat64())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFloat64", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Game to json stream.
func (o OptGame) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Game from json iterator.
func (o *OptGame) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptGame", i.WhatIsNext())
	}
}

// WriteJSON writes json value of InlineKeyboardMarkup to json stream.
func (o OptInlineKeyboardMarkup) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of InlineKeyboardMarkup from json iterator.
func (o *OptInlineKeyboardMarkup) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInlineKeyboardMarkup", i.WhatIsNext())
	}
}

// WriteJSON writes json value of InlineQuery to json stream.
func (o OptInlineQuery) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of InlineQuery from json iterator.
func (o *OptInlineQuery) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInlineQuery", i.WhatIsNext())
	}
}

// WriteJSON writes json value of InputFile to json stream.
func (o OptInputFile) WriteJSON(j *json.Stream) {
}

// ReadJSON reads json value of InputFile from json iterator.
func (o *OptInputFile) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInputFile", i.WhatIsNext())
	}
}

// WriteJSON writes json value of int to json stream.
func (o OptInt) WriteJSON(j *json.Stream) {
	j.WriteInt(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptInt) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = int(i.ReadInt())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInt", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Invoice to json stream.
func (o OptInvoice) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Invoice from json iterator.
func (o *OptInvoice) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInvoice", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Location to json stream.
func (o OptLocation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Location from json iterator.
func (o *OptLocation) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptLocation", i.WhatIsNext())
	}
}

// WriteJSON writes json value of LoginUrl to json stream.
func (o OptLoginUrl) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of LoginUrl from json iterator.
func (o *OptLoginUrl) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptLoginUrl", i.WhatIsNext())
	}
}

// WriteJSON writes json value of MaskPosition to json stream.
func (o OptMaskPosition) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of MaskPosition from json iterator.
func (o *OptMaskPosition) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMaskPosition", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Message to json stream.
func (o OptMessage) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Message from json iterator.
func (o *OptMessage) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMessage", i.WhatIsNext())
	}
}

// WriteJSON writes json value of OrderInfo to json stream.
func (o OptOrderInfo) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of OrderInfo from json iterator.
func (o *OptOrderInfo) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptOrderInfo", i.WhatIsNext())
	}
}

// WriteJSON writes json value of PassportData to json stream.
func (o OptPassportData) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PassportData from json iterator.
func (o *OptPassportData) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPassportData", i.WhatIsNext())
	}
}

// WriteJSON writes json value of PassportFile to json stream.
func (o OptPassportFile) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PassportFile from json iterator.
func (o *OptPassportFile) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPassportFile", i.WhatIsNext())
	}
}

// WriteJSON writes json value of PhotoSize to json stream.
func (o OptPhotoSize) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PhotoSize from json iterator.
func (o *OptPhotoSize) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPhotoSize", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Poll to json stream.
func (o OptPoll) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Poll from json iterator.
func (o *OptPoll) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPoll", i.WhatIsNext())
	}
}

// WriteJSON writes json value of PollAnswer to json stream.
func (o OptPollAnswer) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PollAnswer from json iterator.
func (o *OptPollAnswer) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPollAnswer", i.WhatIsNext())
	}
}

// WriteJSON writes json value of PreCheckoutQuery to json stream.
func (o OptPreCheckoutQuery) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PreCheckoutQuery from json iterator.
func (o *OptPreCheckoutQuery) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPreCheckoutQuery", i.WhatIsNext())
	}
}

// WriteJSON writes json value of ProximityAlertTriggered to json stream.
func (o OptProximityAlertTriggered) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProximityAlertTriggered from json iterator.
func (o *OptProximityAlertTriggered) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProximityAlertTriggered", i.WhatIsNext())
	}
}

// WriteJSON writes json value of ResponseParameters to json stream.
func (o OptResponseParameters) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ResponseParameters from json iterator.
func (o *OptResponseParameters) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptResponseParameters", i.WhatIsNext())
	}
}

// WriteJSON writes json value of ShippingAddress to json stream.
func (o OptShippingAddress) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ShippingAddress from json iterator.
func (o *OptShippingAddress) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptShippingAddress", i.WhatIsNext())
	}
}

// WriteJSON writes json value of ShippingQuery to json stream.
func (o OptShippingQuery) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ShippingQuery from json iterator.
func (o *OptShippingQuery) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptShippingQuery", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Sticker to json stream.
func (o OptSticker) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Sticker from json iterator.
func (o *OptSticker) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptSticker", i.WhatIsNext())
	}
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = string(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptString", i.WhatIsNext())
	}
}

// WriteJSON writes json value of SuccessfulPayment to json stream.
func (o OptSuccessfulPayment) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of SuccessfulPayment from json iterator.
func (o *OptSuccessfulPayment) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptSuccessfulPayment", i.WhatIsNext())
	}
}

// WriteJSON writes json value of User to json stream.
func (o OptUser) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of User from json iterator.
func (o *OptUser) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptUser", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Venue to json stream.
func (o OptVenue) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Venue from json iterator.
func (o *OptVenue) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVenue", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Video to json stream.
func (o OptVideo) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Video from json iterator.
func (o *OptVideo) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVideo", i.WhatIsNext())
	}
}

// WriteJSON writes json value of VideoNote to json stream.
func (o OptVideoNote) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of VideoNote from json iterator.
func (o *OptVideoNote) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVideoNote", i.WhatIsNext())
	}
}

// WriteJSON writes json value of Voice to json stream.
func (o OptVoice) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Voice from json iterator.
func (o *OptVoice) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVoice", i.WhatIsNext())
	}
}

// WriteJSON implements json.Marshaler.
func (s OrderInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.PhoneNumber.Set {
		more.More()
		j.WriteObjectField("phone_number")
		s.PhoneNumber.WriteJSON(j)
	}
	if s.ShippingAddress.Set {
		more.More()
		j.WriteObjectField("shipping_address")
		s.ShippingAddress.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads OrderInfo from json stream.
func (s *OrderInfo) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_address":
			if err := func() error {
				s.ShippingAddress.Reset()
				if err := s.ShippingAddress.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PassportData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("credentials")
	s.Credentials.WriteJSON(j)
	more.More()
	j.WriteObjectField("data")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Data {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads PassportData from json stream.
func (s *PassportData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "credentials":
			if err := func() error {
				if err := s.Credentials.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "data":
			if err := func() error {
				s.Data = s.Data[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem EncryptedPassportElement
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Data = append(s.Data, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PassportFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_date")
	j.WriteInt(s.FileDate)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	more.More()
	j.WriteObjectField("file_size")
	j.WriteInt(s.FileSize)
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	j.WriteObjectEnd()
}

// ReadJSON reads PassportFile from json stream.
func (s *PassportFile) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_date":
			if err := func() error {
				s.FileDate = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PhotoSize) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	more.More()
	j.WriteObjectField("height")
	j.WriteInt(s.Height)
	more.More()
	j.WriteObjectField("width")
	j.WriteInt(s.Width)
	j.WriteObjectEnd()
}

// ReadJSON reads PhotoSize from json stream.
func (s *PhotoSize) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "height":
			if err := func() error {
				s.Height = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "width":
			if err := func() error {
				s.Width = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Poll) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("allows_multiple_answers")
	j.WriteBool(s.AllowsMultipleAnswers)
	if s.CloseDate.Set {
		more.More()
		j.WriteObjectField("close_date")
		s.CloseDate.WriteJSON(j)
	}
	if s.CorrectOptionID.Set {
		more.More()
		j.WriteObjectField("correct_option_id")
		s.CorrectOptionID.WriteJSON(j)
	}
	if s.Explanation.Set {
		more.More()
		j.WriteObjectField("explanation")
		s.Explanation.WriteJSON(j)
	}
	if s.ExplanationEntities != nil {
		more.More()
		j.WriteObjectField("explanation_entities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ExplanationEntities {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)
	more.More()
	j.WriteObjectField("is_anonymous")
	j.WriteBool(s.IsAnonymous)
	more.More()
	j.WriteObjectField("is_closed")
	j.WriteBool(s.IsClosed)
	if s.OpenPeriod.Set {
		more.More()
		j.WriteObjectField("open_period")
		s.OpenPeriod.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("options")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Options {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("question")
	j.WriteString(s.Question)
	more.More()
	j.WriteObjectField("total_voter_count")
	j.WriteInt(s.TotalVoterCount)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads Poll from json stream.
func (s *Poll) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allows_multiple_answers":
			if err := func() error {
				s.AllowsMultipleAnswers = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "close_date":
			if err := func() error {
				s.CloseDate.Reset()
				if err := s.CloseDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "correct_option_id":
			if err := func() error {
				s.CorrectOptionID.Reset()
				if err := s.CorrectOptionID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "explanation":
			if err := func() error {
				s.Explanation.Reset()
				if err := s.Explanation.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "explanation_entities":
			if err := func() error {
				s.ExplanationEntities = s.ExplanationEntities[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem MessageEntity
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ExplanationEntities = append(s.ExplanationEntities, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_anonymous":
			if err := func() error {
				s.IsAnonymous = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_closed":
			if err := func() error {
				s.IsClosed = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "open_period":
			if err := func() error {
				s.OpenPeriod.Reset()
				if err := s.OpenPeriod.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "options":
			if err := func() error {
				s.Options = s.Options[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem PollOption
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Options = append(s.Options, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "question":
			if err := func() error {
				s.Question = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "total_voter_count":
			if err := func() error {
				s.TotalVoterCount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PollAnswer) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("option_ids")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.OptionIds {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("poll_id")
	j.WriteString(s.PollID)
	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads PollAnswer from json stream.
func (s *PollAnswer) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "option_ids":
			if err := func() error {
				s.OptionIds = s.OptionIds[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem int
					if err := func() error {
						elem = int(i.ReadInt())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.OptionIds = append(s.OptionIds, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "poll_id":
			if err := func() error {
				s.PollID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PollOption) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("text")
	j.WriteString(s.Text)
	more.More()
	j.WriteObjectField("voter_count")
	j.WriteInt(s.VoterCount)
	j.WriteObjectEnd()
}

// ReadJSON reads PollOption from json stream.
func (s *PollOption) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "text":
			if err := func() error {
				s.Text = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "voter_count":
			if err := func() error {
				s.VoterCount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PreCheckoutQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("currency")
	j.WriteString(s.Currency)
	more.More()
	j.WriteObjectField("from")
	s.From.WriteJSON(j)
	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)
	more.More()
	j.WriteObjectField("invoice_payload")
	j.WriteString(s.InvoicePayload)
	if s.OrderInfo.Set {
		more.More()
		j.WriteObjectField("order_info")
		s.OrderInfo.WriteJSON(j)
	}
	if s.ShippingOptionID.Set {
		more.More()
		j.WriteObjectField("shipping_option_id")
		s.ShippingOptionID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("total_amount")
	j.WriteInt(s.TotalAmount)
	j.WriteObjectEnd()
}

// ReadJSON reads PreCheckoutQuery from json stream.
func (s *PreCheckoutQuery) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currency":
			if err := func() error {
				s.Currency = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "from":
			if err := func() error {
				if err := s.From.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "invoice_payload":
			if err := func() error {
				s.InvoicePayload = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "order_info":
			if err := func() error {
				s.OrderInfo.Reset()
				if err := s.OrderInfo.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_option_id":
			if err := func() error {
				s.ShippingOptionID.Reset()
				if err := s.ShippingOptionID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "total_amount":
			if err := func() error {
				s.TotalAmount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProximityAlertTriggered) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("distance")
	j.WriteInt(s.Distance)
	more.More()
	j.WriteObjectField("traveler")
	s.Traveler.WriteJSON(j)
	more.More()
	j.WriteObjectField("watcher")
	s.Watcher.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads ProximityAlertTriggered from json stream.
func (s *ProximityAlertTriggered) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "distance":
			if err := func() error {
				s.Distance = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "traveler":
			if err := func() error {
				if err := s.Traveler.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "watcher":
			if err := func() error {
				if err := s.Watcher.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ResponseParameters) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MigrateToChatID.Set {
		more.More()
		j.WriteObjectField("migrate_to_chat_id")
		s.MigrateToChatID.WriteJSON(j)
	}
	if s.RetryAfter.Set {
		more.More()
		j.WriteObjectField("retry_after")
		s.RetryAfter.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads ResponseParameters from json stream.
func (s *ResponseParameters) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "migrate_to_chat_id":
			if err := func() error {
				s.MigrateToChatID.Reset()
				if err := s.MigrateToChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "retry_after":
			if err := func() error {
				s.RetryAfter.Reset()
				if err := s.RetryAfter.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendGamePostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("chat_id")
	j.WriteInt(s.ChatID)
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("game_short_name")
	j.WriteString(s.GameShortName)
	if s.ReplyMarkup.Set {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads SendGamePostReqApplicationJSON from json stream.
func (s *SendGamePostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chat_id":
			if err := func() error {
				s.ChatID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "game_short_name":
			if err := func() error {
				s.GameShortName = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_markup":
			if err := func() error {
				s.ReplyMarkup.Reset()
				if err := s.ReplyMarkup.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendGamePostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("chat_id")
	j.WriteInt(s.ChatID)
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("game_short_name")
	j.WriteString(s.GameShortName)
	if s.ReplyMarkup.Set {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads SendGamePostReqApplicationXWwwFormUrlencoded from json stream.
func (s *SendGamePostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chat_id":
			if err := func() error {
				s.ChatID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "game_short_name":
			if err := func() error {
				s.GameShortName = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_markup":
			if err := func() error {
				s.ReplyMarkup.Reset()
				if err := s.ReplyMarkup.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendGamePostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("chat_id")
	j.WriteInt(s.ChatID)
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("game_short_name")
	j.WriteString(s.GameShortName)
	if s.ReplyMarkup.Set {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads SendGamePostReqMultipartFormData from json stream.
func (s *SendGamePostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chat_id":
			if err := func() error {
				s.ChatID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "game_short_name":
			if err := func() error {
				s.GameShortName = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_markup":
			if err := func() error {
				s.ReplyMarkup.Reset()
				if err := s.ReplyMarkup.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendGamePostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	s.Result.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads SendGamePostResOK from json stream.
func (s *SendGamePostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendInvoicePostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("chat_id")
	j.WriteInt(s.ChatID)
	more.More()
	j.WriteObjectField("currency")
	j.WriteString(s.Currency)
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.IsFlexible.Set {
		more.More()
		j.WriteObjectField("is_flexible")
		s.IsFlexible.WriteJSON(j)
	}
	if s.NeedEmail.Set {
		more.More()
		j.WriteObjectField("need_email")
		s.NeedEmail.WriteJSON(j)
	}
	if s.NeedName.Set {
		more.More()
		j.WriteObjectField("need_name")
		s.NeedName.WriteJSON(j)
	}
	if s.NeedPhoneNumber.Set {
		more.More()
		j.WriteObjectField("need_phone_number")
		s.NeedPhoneNumber.WriteJSON(j)
	}
	if s.NeedShippingAddress.Set {
		more.More()
		j.WriteObjectField("need_shipping_address")
		s.NeedShippingAddress.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("payload")
	j.WriteString(s.Payload)
	if s.PhotoHeight.Set {
		more.More()
		j.WriteObjectField("photo_height")
		s.PhotoHeight.WriteJSON(j)
	}
	if s.PhotoSize.Set {
		more.More()
		j.WriteObjectField("photo_size")
		s.PhotoSize.WriteJSON(j)
	}
	if s.PhotoURL.Set {
		more.More()
		j.WriteObjectField("photo_url")
		s.PhotoURL.WriteJSON(j)
	}
	if s.PhotoWidth.Set {
		more.More()
		j.WriteObjectField("photo_width")
		s.PhotoWidth.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("prices")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Prices {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.ProviderData.Set {
		more.More()
		j.WriteObjectField("provider_data")
		s.ProviderData.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("provider_token")
	j.WriteString(s.ProviderToken)
	if s.ReplyMarkup.Set {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.SendEmailToProvider.Set {
		more.More()
		j.WriteObjectField("send_email_to_provider")
		s.SendEmailToProvider.WriteJSON(j)
	}
	if s.SendPhoneNumberToProvider.Set {
		more.More()
		j.WriteObjectField("send_phone_number_to_provider")
		s.SendPhoneNumberToProvider.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("start_parameter")
	j.WriteString(s.StartParameter)
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// ReadJSON reads SendInvoicePostReqApplicationJSON from json stream.
func (s *SendInvoicePostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chat_id":
			if err := func() error {
				s.ChatID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currency":
			if err := func() error {
				s.Currency = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_flexible":
			if err := func() error {
				s.IsFlexible.Reset()
				if err := s.IsFlexible.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_email":
			if err := func() error {
				s.NeedEmail.Reset()
				if err := s.NeedEmail.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_name":
			if err := func() error {
				s.NeedName.Reset()
				if err := s.NeedName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_phone_number":
			if err := func() error {
				s.NeedPhoneNumber.Reset()
				if err := s.NeedPhoneNumber.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_shipping_address":
			if err := func() error {
				s.NeedShippingAddress.Reset()
				if err := s.NeedShippingAddress.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "payload":
			if err := func() error {
				s.Payload = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_height":
			if err := func() error {
				s.PhotoHeight.Reset()
				if err := s.PhotoHeight.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_size":
			if err := func() error {
				s.PhotoSize.Reset()
				if err := s.PhotoSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_url":
			if err := func() error {
				s.PhotoURL.Reset()
				if err := s.PhotoURL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_width":
			if err := func() error {
				s.PhotoWidth.Reset()
				if err := s.PhotoWidth.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "prices":
			if err := func() error {
				s.Prices = s.Prices[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem LabeledPrice
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Prices = append(s.Prices, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provider_data":
			if err := func() error {
				s.ProviderData.Reset()
				if err := s.ProviderData.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provider_token":
			if err := func() error {
				s.ProviderToken = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_markup":
			if err := func() error {
				s.ReplyMarkup.Reset()
				if err := s.ReplyMarkup.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "send_email_to_provider":
			if err := func() error {
				s.SendEmailToProvider.Reset()
				if err := s.SendEmailToProvider.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "send_phone_number_to_provider":
			if err := func() error {
				s.SendPhoneNumberToProvider.Reset()
				if err := s.SendPhoneNumberToProvider.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "start_parameter":
			if err := func() error {
				s.StartParameter = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendInvoicePostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("chat_id")
	j.WriteInt(s.ChatID)
	more.More()
	j.WriteObjectField("currency")
	j.WriteString(s.Currency)
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.IsFlexible.Set {
		more.More()
		j.WriteObjectField("is_flexible")
		s.IsFlexible.WriteJSON(j)
	}
	if s.NeedEmail.Set {
		more.More()
		j.WriteObjectField("need_email")
		s.NeedEmail.WriteJSON(j)
	}
	if s.NeedName.Set {
		more.More()
		j.WriteObjectField("need_name")
		s.NeedName.WriteJSON(j)
	}
	if s.NeedPhoneNumber.Set {
		more.More()
		j.WriteObjectField("need_phone_number")
		s.NeedPhoneNumber.WriteJSON(j)
	}
	if s.NeedShippingAddress.Set {
		more.More()
		j.WriteObjectField("need_shipping_address")
		s.NeedShippingAddress.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("payload")
	j.WriteString(s.Payload)
	if s.PhotoHeight.Set {
		more.More()
		j.WriteObjectField("photo_height")
		s.PhotoHeight.WriteJSON(j)
	}
	if s.PhotoSize.Set {
		more.More()
		j.WriteObjectField("photo_size")
		s.PhotoSize.WriteJSON(j)
	}
	if s.PhotoURL.Set {
		more.More()
		j.WriteObjectField("photo_url")
		s.PhotoURL.WriteJSON(j)
	}
	if s.PhotoWidth.Set {
		more.More()
		j.WriteObjectField("photo_width")
		s.PhotoWidth.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("prices")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Prices {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.ProviderData.Set {
		more.More()
		j.WriteObjectField("provider_data")
		s.ProviderData.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("provider_token")
	j.WriteString(s.ProviderToken)
	if s.ReplyMarkup.Set {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.SendEmailToProvider.Set {
		more.More()
		j.WriteObjectField("send_email_to_provider")
		s.SendEmailToProvider.WriteJSON(j)
	}
	if s.SendPhoneNumberToProvider.Set {
		more.More()
		j.WriteObjectField("send_phone_number_to_provider")
		s.SendPhoneNumberToProvider.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("start_parameter")
	j.WriteString(s.StartParameter)
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// ReadJSON reads SendInvoicePostReqApplicationXWwwFormUrlencoded from json stream.
func (s *SendInvoicePostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chat_id":
			if err := func() error {
				s.ChatID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currency":
			if err := func() error {
				s.Currency = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_flexible":
			if err := func() error {
				s.IsFlexible.Reset()
				if err := s.IsFlexible.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_email":
			if err := func() error {
				s.NeedEmail.Reset()
				if err := s.NeedEmail.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_name":
			if err := func() error {
				s.NeedName.Reset()
				if err := s.NeedName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_phone_number":
			if err := func() error {
				s.NeedPhoneNumber.Reset()
				if err := s.NeedPhoneNumber.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_shipping_address":
			if err := func() error {
				s.NeedShippingAddress.Reset()
				if err := s.NeedShippingAddress.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "payload":
			if err := func() error {
				s.Payload = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_height":
			if err := func() error {
				s.PhotoHeight.Reset()
				if err := s.PhotoHeight.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_size":
			if err := func() error {
				s.PhotoSize.Reset()
				if err := s.PhotoSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_url":
			if err := func() error {
				s.PhotoURL.Reset()
				if err := s.PhotoURL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_width":
			if err := func() error {
				s.PhotoWidth.Reset()
				if err := s.PhotoWidth.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "prices":
			if err := func() error {
				s.Prices = s.Prices[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem LabeledPrice
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Prices = append(s.Prices, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provider_data":
			if err := func() error {
				s.ProviderData.Reset()
				if err := s.ProviderData.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provider_token":
			if err := func() error {
				s.ProviderToken = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_markup":
			if err := func() error {
				s.ReplyMarkup.Reset()
				if err := s.ReplyMarkup.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "send_email_to_provider":
			if err := func() error {
				s.SendEmailToProvider.Reset()
				if err := s.SendEmailToProvider.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "send_phone_number_to_provider":
			if err := func() error {
				s.SendPhoneNumberToProvider.Reset()
				if err := s.SendPhoneNumberToProvider.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "start_parameter":
			if err := func() error {
				s.StartParameter = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendInvoicePostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("chat_id")
	j.WriteInt(s.ChatID)
	more.More()
	j.WriteObjectField("currency")
	j.WriteString(s.Currency)
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.IsFlexible.Set {
		more.More()
		j.WriteObjectField("is_flexible")
		s.IsFlexible.WriteJSON(j)
	}
	if s.NeedEmail.Set {
		more.More()
		j.WriteObjectField("need_email")
		s.NeedEmail.WriteJSON(j)
	}
	if s.NeedName.Set {
		more.More()
		j.WriteObjectField("need_name")
		s.NeedName.WriteJSON(j)
	}
	if s.NeedPhoneNumber.Set {
		more.More()
		j.WriteObjectField("need_phone_number")
		s.NeedPhoneNumber.WriteJSON(j)
	}
	if s.NeedShippingAddress.Set {
		more.More()
		j.WriteObjectField("need_shipping_address")
		s.NeedShippingAddress.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("payload")
	j.WriteString(s.Payload)
	if s.PhotoHeight.Set {
		more.More()
		j.WriteObjectField("photo_height")
		s.PhotoHeight.WriteJSON(j)
	}
	if s.PhotoSize.Set {
		more.More()
		j.WriteObjectField("photo_size")
		s.PhotoSize.WriteJSON(j)
	}
	if s.PhotoURL.Set {
		more.More()
		j.WriteObjectField("photo_url")
		s.PhotoURL.WriteJSON(j)
	}
	if s.PhotoWidth.Set {
		more.More()
		j.WriteObjectField("photo_width")
		s.PhotoWidth.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("prices")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Prices {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.ProviderData.Set {
		more.More()
		j.WriteObjectField("provider_data")
		s.ProviderData.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("provider_token")
	j.WriteString(s.ProviderToken)
	if s.ReplyMarkup.Set {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.SendEmailToProvider.Set {
		more.More()
		j.WriteObjectField("send_email_to_provider")
		s.SendEmailToProvider.WriteJSON(j)
	}
	if s.SendPhoneNumberToProvider.Set {
		more.More()
		j.WriteObjectField("send_phone_number_to_provider")
		s.SendPhoneNumberToProvider.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("start_parameter")
	j.WriteString(s.StartParameter)
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// ReadJSON reads SendInvoicePostReqMultipartFormData from json stream.
func (s *SendInvoicePostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chat_id":
			if err := func() error {
				s.ChatID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currency":
			if err := func() error {
				s.Currency = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_flexible":
			if err := func() error {
				s.IsFlexible.Reset()
				if err := s.IsFlexible.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_email":
			if err := func() error {
				s.NeedEmail.Reset()
				if err := s.NeedEmail.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_name":
			if err := func() error {
				s.NeedName.Reset()
				if err := s.NeedName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_phone_number":
			if err := func() error {
				s.NeedPhoneNumber.Reset()
				if err := s.NeedPhoneNumber.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_shipping_address":
			if err := func() error {
				s.NeedShippingAddress.Reset()
				if err := s.NeedShippingAddress.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "payload":
			if err := func() error {
				s.Payload = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_height":
			if err := func() error {
				s.PhotoHeight.Reset()
				if err := s.PhotoHeight.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_size":
			if err := func() error {
				s.PhotoSize.Reset()
				if err := s.PhotoSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_url":
			if err := func() error {
				s.PhotoURL.Reset()
				if err := s.PhotoURL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_width":
			if err := func() error {
				s.PhotoWidth.Reset()
				if err := s.PhotoWidth.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "prices":
			if err := func() error {
				s.Prices = s.Prices[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem LabeledPrice
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Prices = append(s.Prices, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provider_data":
			if err := func() error {
				s.ProviderData.Reset()
				if err := s.ProviderData.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provider_token":
			if err := func() error {
				s.ProviderToken = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_markup":
			if err := func() error {
				s.ReplyMarkup.Reset()
				if err := s.ReplyMarkup.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "send_email_to_provider":
			if err := func() error {
				s.SendEmailToProvider.Reset()
				if err := s.SendEmailToProvider.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "send_phone_number_to_provider":
			if err := func() error {
				s.SendPhoneNumberToProvider.Reset()
				if err := s.SendPhoneNumberToProvider.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "start_parameter":
			if err := func() error {
				s.StartParameter = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendInvoicePostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	s.Result.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads SendInvoicePostResOK from json stream.
func (s *SendInvoicePostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetGameScorePostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		j.WriteObjectField("chat_id")
		s.ChatID.WriteJSON(j)
	}
	if s.DisableEditMessage.Set {
		more.More()
		j.WriteObjectField("disable_edit_message")
		s.DisableEditMessage.WriteJSON(j)
	}
	if s.Force.Set {
		more.More()
		j.WriteObjectField("force")
		s.Force.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("score")
	j.WriteInt(s.Score)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// ReadJSON reads SetGameScorePostReqApplicationJSON from json stream.
func (s *SetGameScorePostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_id":
			if err := func() error {
				s.ChatID.Reset()
				if err := s.ChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_edit_message":
			if err := func() error {
				s.DisableEditMessage.Reset()
				if err := s.DisableEditMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "force":
			if err := func() error {
				s.Force.Reset()
				if err := s.Force.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "score":
			if err := func() error {
				s.Score = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetGameScorePostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		j.WriteObjectField("chat_id")
		s.ChatID.WriteJSON(j)
	}
	if s.DisableEditMessage.Set {
		more.More()
		j.WriteObjectField("disable_edit_message")
		s.DisableEditMessage.WriteJSON(j)
	}
	if s.Force.Set {
		more.More()
		j.WriteObjectField("force")
		s.Force.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("score")
	j.WriteInt(s.Score)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// ReadJSON reads SetGameScorePostReqApplicationXWwwFormUrlencoded from json stream.
func (s *SetGameScorePostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_id":
			if err := func() error {
				s.ChatID.Reset()
				if err := s.ChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_edit_message":
			if err := func() error {
				s.DisableEditMessage.Reset()
				if err := s.DisableEditMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "force":
			if err := func() error {
				s.Force.Reset()
				if err := s.Force.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "score":
			if err := func() error {
				s.Score = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetGameScorePostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		j.WriteObjectField("chat_id")
		s.ChatID.WriteJSON(j)
	}
	if s.DisableEditMessage.Set {
		more.More()
		j.WriteObjectField("disable_edit_message")
		s.DisableEditMessage.WriteJSON(j)
	}
	if s.Force.Set {
		more.More()
		j.WriteObjectField("force")
		s.Force.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("score")
	j.WriteInt(s.Score)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// ReadJSON reads SetGameScorePostReqMultipartFormData from json stream.
func (s *SetGameScorePostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_id":
			if err := func() error {
				s.ChatID.Reset()
				if err := s.ChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_edit_message":
			if err := func() error {
				s.DisableEditMessage.Reset()
				if err := s.DisableEditMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "force":
			if err := func() error {
				s.Force.Reset()
				if err := s.Force.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "score":
			if err := func() error {
				s.Score = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetMyCommandsPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("commands")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Commands {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads SetMyCommandsPostReqApplicationJSON from json stream.
func (s *SetMyCommandsPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commands":
			if err := func() error {
				s.Commands = s.Commands[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem BotCommand
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Commands = append(s.Commands, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetMyCommandsPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("commands")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Commands {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads SetMyCommandsPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *SetMyCommandsPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commands":
			if err := func() error {
				s.Commands = s.Commands[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem BotCommand
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Commands = append(s.Commands, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetMyCommandsPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("commands")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Commands {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads SetMyCommandsPostReqMultipartFormData from json stream.
func (s *SetMyCommandsPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commands":
			if err := func() error {
				s.Commands = s.Commands[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem BotCommand
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Commands = append(s.Commands, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetMyCommandsPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	j.WriteBool(s.Result)
	j.WriteObjectEnd()
}

// ReadJSON reads SetMyCommandsPostResOK from json stream.
func (s *SetMyCommandsPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetStickerPositionInSetPostReqApplicationJSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("position")
	j.WriteInt(s.Position)
	more.More()
	j.WriteObjectField("sticker")
	j.WriteString(s.Sticker)
	j.WriteObjectEnd()
}

// ReadJSON reads SetStickerPositionInSetPostReqApplicationJSON from json stream.
func (s *SetStickerPositionInSetPostReqApplicationJSON) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "position":
			if err := func() error {
				s.Position = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sticker":
			if err := func() error {
				s.Sticker = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetStickerPositionInSetPostReqApplicationXWwwFormUrlencoded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("position")
	j.WriteInt(s.Position)
	more.More()
	j.WriteObjectField("sticker")
	j.WriteString(s.Sticker)
	j.WriteObjectEnd()
}

// ReadJSON reads SetStickerPositionInSetPostReqApplicationXWwwFormUrlencoded from json stream.
func (s *SetStickerPositionInSetPostReqApplicationXWwwFormUrlencoded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "position":
			if err := func() error {
				s.Position = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sticker":
			if err := func() error {
				s.Sticker = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetStickerPositionInSetPostReqMultipartFormData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("position")
	j.WriteInt(s.Position)
	more.More()
	j.WriteObjectField("sticker")
	j.WriteString(s.Sticker)
	j.WriteObjectEnd()
}

// ReadJSON reads SetStickerPositionInSetPostReqMultipartFormData from json stream.
func (s *SetStickerPositionInSetPostReqMultipartFormData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "position":
			if err := func() error {
				s.Position = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sticker":
			if err := func() error {
				s.Sticker = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetStickerPositionInSetPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	j.WriteBool(s.Result)
	j.WriteObjectEnd()
}

// ReadJSON reads SetStickerPositionInSetPostResOK from json stream.
func (s *SetStickerPositionInSetPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetWebhookPostReq) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedUpdates != nil {
		more.More()
		j.WriteObjectField("allowed_updates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedUpdates {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Certificate.Set {
		more.More()
		j.WriteObjectField("certificate")
		s.Certificate.WriteJSON(j)
	}
	if s.DropPendingUpdates.Set {
		more.More()
		j.WriteObjectField("drop_pending_updates")
		s.DropPendingUpdates.WriteJSON(j)
	}
	if s.IPAddress.Set {
		more.More()
		j.WriteObjectField("ip_address")
		s.IPAddress.WriteJSON(j)
	}
	if s.MaxConnections.Set {
		more.More()
		j.WriteObjectField("max_connections")
		s.MaxConnections.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)
	j.WriteObjectEnd()
}

// ReadJSON reads SetWebhookPostReq from json stream.
func (s *SetWebhookPostReq) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_updates":
			if err := func() error {
				s.AllowedUpdates = s.AllowedUpdates[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem string
					if err := func() error {
						elem = string(i.ReadString())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedUpdates = append(s.AllowedUpdates, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "certificate":
			if err := func() error {
				s.Certificate.Reset()
				if err := s.Certificate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "drop_pending_updates":
			if err := func() error {
				s.DropPendingUpdates.Reset()
				if err := s.DropPendingUpdates.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ip_address":
			if err := func() error {
				s.IPAddress.Reset()
				if err := s.IPAddress.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "max_connections":
			if err := func() error {
				s.MaxConnections.Reset()
				if err := s.MaxConnections.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetWebhookPostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	j.WriteBool(s.Result)
	j.WriteObjectEnd()
}

// ReadJSON reads SetWebhookPostResOK from json stream.
func (s *SetWebhookPostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ShippingAddress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("city")
	j.WriteString(s.City)
	more.More()
	j.WriteObjectField("country_code")
	j.WriteString(s.CountryCode)
	more.More()
	j.WriteObjectField("post_code")
	j.WriteString(s.PostCode)
	more.More()
	j.WriteObjectField("state")
	j.WriteString(s.State)
	more.More()
	j.WriteObjectField("street_line1")
	j.WriteString(s.StreetLine1)
	more.More()
	j.WriteObjectField("street_line2")
	j.WriteString(s.StreetLine2)
	j.WriteObjectEnd()
}

// ReadJSON reads ShippingAddress from json stream.
func (s *ShippingAddress) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "city":
			if err := func() error {
				s.City = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "country_code":
			if err := func() error {
				s.CountryCode = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "post_code":
			if err := func() error {
				s.PostCode = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "state":
			if err := func() error {
				s.State = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "street_line1":
			if err := func() error {
				s.StreetLine1 = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "street_line2":
			if err := func() error {
				s.StreetLine2 = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ShippingOption) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)
	more.More()
	j.WriteObjectField("prices")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Prices {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// ReadJSON reads ShippingOption from json stream.
func (s *ShippingOption) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "id":
			if err := func() error {
				s.ID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "prices":
			if err := func() error {
				s.Prices = s.Prices[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem LabeledPrice
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Prices = append(s.Prices, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ShippingQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("from")
	s.From.WriteJSON(j)
	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)
	more.More()
	j.WriteObjectField("invoice_payload")
	j.WriteString(s.InvoicePayload)
	more.More()
	j.WriteObjectField("shipping_address")
	s.ShippingAddress.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads ShippingQuery from json stream.
func (s *ShippingQuery) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "from":
			if err := func() error {
				if err := s.From.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "invoice_payload":
			if err := func() error {
				s.InvoicePayload = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_address":
			if err := func() error {
				if err := s.ShippingAddress.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Sticker) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Emoji.Set {
		more.More()
		j.WriteObjectField("emoji")
		s.Emoji.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	more.More()
	j.WriteObjectField("height")
	j.WriteInt(s.Height)
	more.More()
	j.WriteObjectField("is_animated")
	j.WriteBool(s.IsAnimated)
	if s.MaskPosition.Set {
		more.More()
		j.WriteObjectField("mask_position")
		s.MaskPosition.WriteJSON(j)
	}
	if s.SetName.Set {
		more.More()
		j.WriteObjectField("set_name")
		s.SetName.WriteJSON(j)
	}
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("width")
	j.WriteInt(s.Width)
	j.WriteObjectEnd()
}

// ReadJSON reads Sticker from json stream.
func (s *Sticker) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "emoji":
			if err := func() error {
				s.Emoji.Reset()
				if err := s.Emoji.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "height":
			if err := func() error {
				s.Height = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_animated":
			if err := func() error {
				s.IsAnimated = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mask_position":
			if err := func() error {
				s.MaskPosition.Reset()
				if err := s.MaskPosition.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "set_name":
			if err := func() error {
				s.SetName.Reset()
				if err := s.SetName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "width":
			if err := func() error {
				s.Width = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s StickerSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("contains_masks")
	j.WriteBool(s.ContainsMasks)
	more.More()
	j.WriteObjectField("is_animated")
	j.WriteBool(s.IsAnimated)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("stickers")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Stickers {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// ReadJSON reads StickerSet from json stream.
func (s *StickerSet) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "contains_masks":
			if err := func() error {
				s.ContainsMasks = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_animated":
			if err := func() error {
				s.IsAnimated = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "stickers":
			if err := func() error {
				s.Stickers = s.Stickers[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem Sticker
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Stickers = append(s.Stickers, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SuccessfulPayment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("currency")
	j.WriteString(s.Currency)
	more.More()
	j.WriteObjectField("invoice_payload")
	j.WriteString(s.InvoicePayload)
	if s.OrderInfo.Set {
		more.More()
		j.WriteObjectField("order_info")
		s.OrderInfo.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("provider_payment_charge_id")
	j.WriteString(s.ProviderPaymentChargeID)
	if s.ShippingOptionID.Set {
		more.More()
		j.WriteObjectField("shipping_option_id")
		s.ShippingOptionID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("telegram_payment_charge_id")
	j.WriteString(s.TelegramPaymentChargeID)
	more.More()
	j.WriteObjectField("total_amount")
	j.WriteInt(s.TotalAmount)
	j.WriteObjectEnd()
}

// ReadJSON reads SuccessfulPayment from json stream.
func (s *SuccessfulPayment) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currency":
			if err := func() error {
				s.Currency = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "invoice_payload":
			if err := func() error {
				s.InvoicePayload = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "order_info":
			if err := func() error {
				s.OrderInfo.Reset()
				if err := s.OrderInfo.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provider_payment_charge_id":
			if err := func() error {
				s.ProviderPaymentChargeID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_option_id":
			if err := func() error {
				s.ShippingOptionID.Reset()
				if err := s.ShippingOptionID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "telegram_payment_charge_id":
			if err := func() error {
				s.TelegramPaymentChargeID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "total_amount":
			if err := func() error {
				s.TotalAmount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Update) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CallbackQuery.Set {
		more.More()
		j.WriteObjectField("callback_query")
		s.CallbackQuery.WriteJSON(j)
	}
	if s.ChannelPost.Set {
		more.More()
		j.WriteObjectField("channel_post")
		s.ChannelPost.WriteJSON(j)
	}
	if s.ChosenInlineResult.Set {
		more.More()
		j.WriteObjectField("chosen_inline_result")
		s.ChosenInlineResult.WriteJSON(j)
	}
	if s.EditedChannelPost.Set {
		more.More()
		j.WriteObjectField("edited_channel_post")
		s.EditedChannelPost.WriteJSON(j)
	}
	if s.EditedMessage.Set {
		more.More()
		j.WriteObjectField("edited_message")
		s.EditedMessage.WriteJSON(j)
	}
	if s.InlineQuery.Set {
		more.More()
		j.WriteObjectField("inline_query")
		s.InlineQuery.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Poll.Set {
		more.More()
		j.WriteObjectField("poll")
		s.Poll.WriteJSON(j)
	}
	if s.PollAnswer.Set {
		more.More()
		j.WriteObjectField("poll_answer")
		s.PollAnswer.WriteJSON(j)
	}
	if s.PreCheckoutQuery.Set {
		more.More()
		j.WriteObjectField("pre_checkout_query")
		s.PreCheckoutQuery.WriteJSON(j)
	}
	if s.ShippingQuery.Set {
		more.More()
		j.WriteObjectField("shipping_query")
		s.ShippingQuery.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("update_id")
	j.WriteInt(s.UpdateID)
	j.WriteObjectEnd()
}

// ReadJSON reads Update from json stream.
func (s *Update) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "callback_query":
			if err := func() error {
				s.CallbackQuery.Reset()
				if err := s.CallbackQuery.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "channel_post":
			if err := func() error {
				s.ChannelPost.Reset()
				if err := s.ChannelPost.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chosen_inline_result":
			if err := func() error {
				s.ChosenInlineResult.Reset()
				if err := s.ChosenInlineResult.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "edited_channel_post":
			if err := func() error {
				s.EditedChannelPost.Reset()
				if err := s.EditedChannelPost.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "edited_message":
			if err := func() error {
				s.EditedMessage.Reset()
				if err := s.EditedMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_query":
			if err := func() error {
				s.InlineQuery.Reset()
				if err := s.InlineQuery.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "poll":
			if err := func() error {
				s.Poll.Reset()
				if err := s.Poll.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "poll_answer":
			if err := func() error {
				s.PollAnswer.Reset()
				if err := s.PollAnswer.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pre_checkout_query":
			if err := func() error {
				s.PreCheckoutQuery.Reset()
				if err := s.PreCheckoutQuery.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_query":
			if err := func() error {
				s.ShippingQuery.Reset()
				if err := s.ShippingQuery.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "update_id":
			if err := func() error {
				s.UpdateID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UploadStickerFilePostReq) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// ReadJSON reads UploadStickerFilePostReq from json stream.
func (s *UploadStickerFilePostReq) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "png_sticker":
			if err := func() error {
				return fmt.Errorf(`decoding of "InputFile" (alias) is not implemented`)
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UploadStickerFilePostResOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("result")
	s.Result.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads UploadStickerFilePostResOK from json stream.
func (s *UploadStickerFilePostResOK) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s User) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CanJoinGroups.Set {
		more.More()
		j.WriteObjectField("can_join_groups")
		s.CanJoinGroups.WriteJSON(j)
	}
	if s.CanReadAllGroupMessages.Set {
		more.More()
		j.WriteObjectField("can_read_all_group_messages")
		s.CanReadAllGroupMessages.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("first_name")
	j.WriteString(s.FirstName)
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)
	more.More()
	j.WriteObjectField("is_bot")
	j.WriteBool(s.IsBot)
	if s.LanguageCode.Set {
		more.More()
		j.WriteObjectField("language_code")
		s.LanguageCode.WriteJSON(j)
	}
	if s.LastName.Set {
		more.More()
		j.WriteObjectField("last_name")
		s.LastName.WriteJSON(j)
	}
	if s.SupportsInlineQueries.Set {
		more.More()
		j.WriteObjectField("supports_inline_queries")
		s.SupportsInlineQueries.WriteJSON(j)
	}
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads User from json stream.
func (s *User) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_join_groups":
			if err := func() error {
				s.CanJoinGroups.Reset()
				if err := s.CanJoinGroups.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_read_all_group_messages":
			if err := func() error {
				s.CanReadAllGroupMessages.Reset()
				if err := s.CanReadAllGroupMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "first_name":
			if err := func() error {
				s.FirstName = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_bot":
			if err := func() error {
				s.IsBot = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "language_code":
			if err := func() error {
				s.LanguageCode.Reset()
				if err := s.LanguageCode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "supports_inline_queries":
			if err := func() error {
				s.SupportsInlineQueries.Reset()
				if err := s.SupportsInlineQueries.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UserProfilePhotos) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("photos")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Photos {
		more.More()
		more.Down()
		j.WriteArrayStart()
		for _, elem := range elem {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)
	j.WriteObjectEnd()
}

// ReadJSON reads UserProfilePhotos from json stream.
func (s *UserProfilePhotos) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "photos":
			if err := func() error {
				s.Photos = s.Photos[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem []PhotoSize
					if err := func() error {
						elem = elem[:0]
						var retErr error
						i.ReadArrayCB(func(i *json.Iterator) bool {
							var elemElem PhotoSize
							if err := func() error {
								if err := elemElem.ReadJSON(i); err != nil {
									return err
								}
								return i.Error
							}(); err != nil {
								retErr = err
								return false
							}
							elem = append(elem, elemElem)
							return true
						})
						if retErr != nil {
							return retErr
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Photos = append(s.Photos, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "total_count":
			if err := func() error {
				s.TotalCount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Venue) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("address")
	j.WriteString(s.Address)
	if s.FoursquareID.Set {
		more.More()
		j.WriteObjectField("foursquare_id")
		s.FoursquareID.WriteJSON(j)
	}
	if s.FoursquareType.Set {
		more.More()
		j.WriteObjectField("foursquare_type")
		s.FoursquareType.WriteJSON(j)
	}
	if s.GooglePlaceID.Set {
		more.More()
		j.WriteObjectField("google_place_id")
		s.GooglePlaceID.WriteJSON(j)
	}
	if s.GooglePlaceType.Set {
		more.More()
		j.WriteObjectField("google_place_type")
		s.GooglePlaceType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("location")
	s.Location.WriteJSON(j)
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// ReadJSON reads Venue from json stream.
func (s *Venue) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "address":
			if err := func() error {
				s.Address = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "foursquare_id":
			if err := func() error {
				s.FoursquareID.Reset()
				if err := s.FoursquareID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "foursquare_type":
			if err := func() error {
				s.FoursquareType.Reset()
				if err := s.FoursquareType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "google_place_id":
			if err := func() error {
				s.GooglePlaceID.Reset()
				if err := s.GooglePlaceID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "google_place_type":
			if err := func() error {
				s.GooglePlaceType.Reset()
				if err := s.GooglePlaceType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "location":
			if err := func() error {
				if err := s.Location.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Video) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileName.Set {
		more.More()
		j.WriteObjectField("file_name")
		s.FileName.WriteJSON(j)
	}
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	more.More()
	j.WriteObjectField("height")
	j.WriteInt(s.Height)
	if s.MimeType.Set {
		more.More()
		j.WriteObjectField("mime_type")
		s.MimeType.WriteJSON(j)
	}
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("width")
	j.WriteInt(s.Width)
	j.WriteObjectEnd()
}

// ReadJSON reads Video from json stream.
func (s *Video) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "height":
			if err := func() error {
				s.Height = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mime_type":
			if err := func() error {
				s.MimeType.Reset()
				if err := s.MimeType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "width":
			if err := func() error {
				s.Width = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s VideoNote) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	more.More()
	j.WriteObjectField("length")
	j.WriteInt(s.Length)
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads VideoNote from json stream.
func (s *VideoNote) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "length":
			if err := func() error {
				s.Length = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Voice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	if s.MimeType.Set {
		more.More()
		j.WriteObjectField("mime_type")
		s.MimeType.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads Voice from json stream.
func (s *Voice) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mime_type":
			if err := func() error {
				s.MimeType.Reset()
				if err := s.MimeType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s WebhookInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedUpdates != nil {
		more.More()
		j.WriteObjectField("allowed_updates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedUpdates {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("has_custom_certificate")
	j.WriteBool(s.HasCustomCertificate)
	if s.IPAddress.Set {
		more.More()
		j.WriteObjectField("ip_address")
		s.IPAddress.WriteJSON(j)
	}
	if s.LastErrorDate.Set {
		more.More()
		j.WriteObjectField("last_error_date")
		s.LastErrorDate.WriteJSON(j)
	}
	if s.LastErrorMessage.Set {
		more.More()
		j.WriteObjectField("last_error_message")
		s.LastErrorMessage.WriteJSON(j)
	}
	if s.MaxConnections.Set {
		more.More()
		j.WriteObjectField("max_connections")
		s.MaxConnections.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("pending_update_count")
	j.WriteInt(s.PendingUpdateCount)
	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)
	j.WriteObjectEnd()
}

// ReadJSON reads WebhookInfo from json stream.
func (s *WebhookInfo) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_updates":
			if err := func() error {
				s.AllowedUpdates = s.AllowedUpdates[:0]
				var retErr error
				i.ReadArrayCB(func(i *json.Iterator) bool {
					var elem string
					if err := func() error {
						elem = string(i.ReadString())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedUpdates = append(s.AllowedUpdates, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "has_custom_certificate":
			if err := func() error {
				s.HasCustomCertificate = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ip_address":
			if err := func() error {
				s.IPAddress.Reset()
				if err := s.IPAddress.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "last_error_date":
			if err := func() error {
				s.LastErrorDate.Reset()
				if err := s.LastErrorDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "last_error_message":
			if err := func() error {
				s.LastErrorMessage.Reset()
				if err := s.LastErrorMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "max_connections":
			if err := func() error {
				s.MaxConnections.Reset()
				if err := s.MaxConnections.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pending_update_count":
			if err := func() error {
				s.PendingUpdateCount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}
