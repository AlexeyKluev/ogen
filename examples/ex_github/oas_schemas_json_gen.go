// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

// WriteJSON implements json.Marshaler.
func (s APIOverview) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("verifiable_password_authentication")
	e.Bool(s.VerifiablePasswordAuthentication)
	if s.SSHKeyFingerprints.Set {
		more.More()
		e.ObjField("ssh_key_fingerprints")
		s.SSHKeyFingerprints.WriteJSON(e)
	}
	if s.Hooks != nil {
		more.More()
		e.ObjField("hooks")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Hooks {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Web != nil {
		more.More()
		e.ObjField("web")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Web {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.API != nil {
		more.More()
		e.ObjField("api")
		more.Down()
		e.ArrStart()
		for _, elem := range s.API {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Git != nil {
		more.More()
		e.ObjField("git")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Git {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Packages != nil {
		more.More()
		e.ObjField("packages")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Packages {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Pages != nil {
		more.More()
		e.ObjField("pages")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Pages {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Importer != nil {
		more.More()
		e.ObjField("importer")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Importer {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Actions != nil {
		more.More()
		e.ObjField("actions")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Actions {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Dependabot != nil {
		more.More()
		e.ObjField("dependabot")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Dependabot {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads APIOverview from json stream.
func (s *APIOverview) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode APIOverview to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "verifiable_password_authentication":
			v, err := d.Bool()
			s.VerifiablePasswordAuthentication = bool(v)
			if err != nil {
				return err
			}
		case "ssh_key_fingerprints":
			s.SSHKeyFingerprints.Reset()
			if err := s.SSHKeyFingerprints.ReadJSON(d); err != nil {
				return err
			}
		case "hooks":
			s.Hooks = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Hooks = append(s.Hooks, elem)
				return nil
			}); err != nil {
				return err
			}
		case "web":
			s.Web = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Web = append(s.Web, elem)
				return nil
			}); err != nil {
				return err
			}
		case "api":
			s.API = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.API = append(s.API, elem)
				return nil
			}); err != nil {
				return err
			}
		case "git":
			s.Git = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Git = append(s.Git, elem)
				return nil
			}); err != nil {
				return err
			}
		case "packages":
			s.Packages = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Packages = append(s.Packages, elem)
				return nil
			}); err != nil {
				return err
			}
		case "pages":
			s.Pages = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Pages = append(s.Pages, elem)
				return nil
			}); err != nil {
				return err
			}
		case "importer":
			s.Importer = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Importer = append(s.Importer, elem)
				return nil
			}); err != nil {
				return err
			}
		case "actions":
			s.Actions = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Actions = append(s.Actions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "dependabot":
			s.Dependabot = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Dependabot = append(s.Dependabot, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s APIOverviewSSHKeyFingerprints) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.SHA256RSA.Set {
		more.More()
		e.ObjField("SHA256_RSA")
		s.SHA256RSA.WriteJSON(e)
	}
	if s.SHA256DSA.Set {
		more.More()
		e.ObjField("SHA256_DSA")
		s.SHA256DSA.WriteJSON(e)
	}
	if s.SHA256ECDSA.Set {
		more.More()
		e.ObjField("SHA256_ECDSA")
		s.SHA256ECDSA.WriteJSON(e)
	}
	if s.SHA256ED25519.Set {
		more.More()
		e.ObjField("SHA256_ED25519")
		s.SHA256ED25519.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads APIOverviewSSHKeyFingerprints from json stream.
func (s *APIOverviewSSHKeyFingerprints) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode APIOverviewSSHKeyFingerprints to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "SHA256_RSA":
			s.SHA256RSA.Reset()
			if err := s.SHA256RSA.ReadJSON(d); err != nil {
				return err
			}
		case "SHA256_DSA":
			s.SHA256DSA.Reset()
			if err := s.SHA256DSA.ReadJSON(d); err != nil {
				return err
			}
		case "SHA256_ECDSA":
			s.SHA256ECDSA.Reset()
			if err := s.SHA256ECDSA.ReadJSON(d); err != nil {
				return err
			}
		case "SHA256_ED25519":
			s.SHA256ED25519.Reset()
			if err := s.SHA256ED25519.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Accepted) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads Accepted from json stream.
func (s *Accepted) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Accepted to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgNoContent from json stream.
func (s *ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsAddSelectedRepoToOrgSecretConflict) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsAddSelectedRepoToOrgSecretConflict from json stream.
func (s *ActionsAddSelectedRepoToOrgSecretConflict) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsAddSelectedRepoToOrgSecretConflict to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsAddSelectedRepoToOrgSecretNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsAddSelectedRepoToOrgSecretNoContent from json stream.
func (s *ActionsAddSelectedRepoToOrgSecretNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsAddSelectedRepoToOrgSecretNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsAddSelfHostedRunnerToGroupForOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsAddSelfHostedRunnerToGroupForOrgNoContent from json stream.
func (s *ActionsAddSelfHostedRunnerToGroupForOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsAddSelfHostedRunnerToGroupForOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ActionsApproveWorkflowRunApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ActionsApproveWorkflowRunApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ActionsApproveWorkflowRunApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ActionsApproveWorkflowRunApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ActionsBillingUsage) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_minutes_used")
	e.Int(s.TotalMinutesUsed)
	more.More()
	e.ObjField("total_paid_minutes_used")
	e.Int(s.TotalPaidMinutesUsed)
	more.More()
	e.ObjField("included_minutes")
	e.Int(s.IncludedMinutes)
	more.More()
	e.ObjField("minutes_used_breakdown")
	s.MinutesUsedBreakdown.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ActionsBillingUsage from json stream.
func (s *ActionsBillingUsage) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsBillingUsage to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_minutes_used":
			v, err := d.Int()
			s.TotalMinutesUsed = int(v)
			if err != nil {
				return err
			}
		case "total_paid_minutes_used":
			v, err := d.Int()
			s.TotalPaidMinutesUsed = int(v)
			if err != nil {
				return err
			}
		case "included_minutes":
			v, err := d.Int()
			s.IncludedMinutes = int(v)
			if err != nil {
				return err
			}
		case "minutes_used_breakdown":
			if err := s.MinutesUsedBreakdown.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsBillingUsageMinutesUsedBreakdown) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.UBUNTU.Set {
		more.More()
		e.ObjField("UBUNTU")
		s.UBUNTU.WriteJSON(e)
	}
	if s.MACOS.Set {
		more.More()
		e.ObjField("MACOS")
		s.MACOS.WriteJSON(e)
	}
	if s.WINDOWS.Set {
		more.More()
		e.ObjField("WINDOWS")
		s.WINDOWS.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsBillingUsageMinutesUsedBreakdown from json stream.
func (s *ActionsBillingUsageMinutesUsedBreakdown) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsBillingUsageMinutesUsedBreakdown to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "UBUNTU":
			s.UBUNTU.Reset()
			if err := s.UBUNTU.ReadJSON(d); err != nil {
				return err
			}
		case "MACOS":
			s.MACOS.Reset()
			if err := s.MACOS.ReadJSON(d); err != nil {
				return err
			}
		case "WINDOWS":
			s.WINDOWS.Reset()
			if err := s.WINDOWS.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsCancelWorkflowRunAccepted) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsCancelWorkflowRunAccepted from json stream.
func (s *ActionsCancelWorkflowRunAccepted) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCancelWorkflowRunAccepted to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateEnvironmentSecretNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsCreateOrUpdateEnvironmentSecretNoContent from json stream.
func (s *ActionsCreateOrUpdateEnvironmentSecretNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateOrUpdateEnvironmentSecretNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateEnvironmentSecretReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("encrypted_value")
	e.Str(s.EncryptedValue)
	more.More()
	e.ObjField("key_id")
	e.Str(s.KeyID)
	e.ObjEnd()
}

// ReadJSON reads ActionsCreateOrUpdateEnvironmentSecretReq from json stream.
func (s *ActionsCreateOrUpdateEnvironmentSecretReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateOrUpdateEnvironmentSecretReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "encrypted_value":
			v, err := d.Str()
			s.EncryptedValue = string(v)
			if err != nil {
				return err
			}
		case "key_id":
			v, err := d.Str()
			s.KeyID = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateOrgSecretNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsCreateOrUpdateOrgSecretNoContent from json stream.
func (s *ActionsCreateOrUpdateOrgSecretNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateOrUpdateOrgSecretNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateOrgSecretReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.EncryptedValue.Set {
		more.More()
		e.ObjField("encrypted_value")
		s.EncryptedValue.WriteJSON(e)
	}
	if s.KeyID.Set {
		more.More()
		e.ObjField("key_id")
		s.KeyID.WriteJSON(e)
	}
	more.More()
	e.ObjField("visibility")
	s.Visibility.WriteJSON(e)
	if s.SelectedRepositoryIds != nil {
		more.More()
		e.ObjField("selected_repository_ids")
		more.Down()
		e.ArrStart()
		for _, elem := range s.SelectedRepositoryIds {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsCreateOrUpdateOrgSecretReq from json stream.
func (s *ActionsCreateOrUpdateOrgSecretReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateOrUpdateOrgSecretReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "encrypted_value":
			s.EncryptedValue.Reset()
			if err := s.EncryptedValue.ReadJSON(d); err != nil {
				return err
			}
		case "key_id":
			s.KeyID.Reset()
			if err := s.KeyID.ReadJSON(d); err != nil {
				return err
			}
		case "visibility":
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "selected_repository_ids":
			s.SelectedRepositoryIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.SelectedRepositoryIds = append(s.SelectedRepositoryIds, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateOrgSecretReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ActionsCreateOrUpdateOrgSecretReqVisibility from json reader.
func (s *ActionsCreateOrUpdateOrgSecretReqVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateOrUpdateOrgSecretReqVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ActionsCreateOrUpdateOrgSecretReqVisibility(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateRepoSecretCreated) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsCreateOrUpdateRepoSecretCreated from json stream.
func (s *ActionsCreateOrUpdateRepoSecretCreated) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateOrUpdateRepoSecretCreated to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateRepoSecretNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsCreateOrUpdateRepoSecretNoContent from json stream.
func (s *ActionsCreateOrUpdateRepoSecretNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateOrUpdateRepoSecretNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateRepoSecretReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.EncryptedValue.Set {
		more.More()
		e.ObjField("encrypted_value")
		s.EncryptedValue.WriteJSON(e)
	}
	if s.KeyID.Set {
		more.More()
		e.ObjField("key_id")
		s.KeyID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsCreateOrUpdateRepoSecretReq from json stream.
func (s *ActionsCreateOrUpdateRepoSecretReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateOrUpdateRepoSecretReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "encrypted_value":
			s.EncryptedValue.Reset()
			if err := s.EncryptedValue.ReadJSON(d); err != nil {
				return err
			}
		case "key_id":
			s.KeyID.Reset()
			if err := s.KeyID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateSelfHostedRunnerGroupForOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	if s.SelectedRepositoryIds != nil {
		more.More()
		e.ObjField("selected_repository_ids")
		more.Down()
		e.ArrStart()
		for _, elem := range s.SelectedRepositoryIds {
			more.More()
			e.Int(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Runners != nil {
		more.More()
		e.ObjField("runners")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Runners {
			more.More()
			e.Int(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsCreateSelfHostedRunnerGroupForOrgReq from json stream.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateSelfHostedRunnerGroupForOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "selected_repository_ids":
			s.SelectedRepositoryIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.SelectedRepositoryIds = append(s.SelectedRepositoryIds, elem)
				return nil
			}); err != nil {
				return err
			}
		case "runners":
			s.Runners = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Runners = append(s.Runners, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility from json reader.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateWorkflowDispatchWorkflowID) WriteJSON(e *json.Encoder) {
	switch s.Type {
	case IntActionsCreateWorkflowDispatchWorkflowID:
		e.Int(s.Int)
	case StringActionsCreateWorkflowDispatchWorkflowID:
		e.Str(s.String)
	}
}

// ReadJSON reads value from json reader.
func (s *ActionsCreateWorkflowDispatchWorkflowID) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsCreateWorkflowDispatchWorkflowID to nil`)
	}
	switch t := d.Next(); t {
	case json.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntActionsCreateWorkflowDispatchWorkflowID
	case json.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringActionsCreateWorkflowDispatchWorkflowID
	default:
		return fmt.Errorf("unexpected json type %q", t)
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActionsDeleteArtifactNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDeleteArtifactNoContent from json stream.
func (s *ActionsDeleteArtifactNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDeleteArtifactNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDeleteEnvironmentSecretNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDeleteEnvironmentSecretNoContent from json stream.
func (s *ActionsDeleteEnvironmentSecretNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDeleteEnvironmentSecretNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDeleteOrgSecretNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDeleteOrgSecretNoContent from json stream.
func (s *ActionsDeleteOrgSecretNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDeleteOrgSecretNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDeleteRepoSecretNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDeleteRepoSecretNoContent from json stream.
func (s *ActionsDeleteRepoSecretNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDeleteRepoSecretNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDeleteSelfHostedRunnerFromOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDeleteSelfHostedRunnerFromOrgNoContent from json stream.
func (s *ActionsDeleteSelfHostedRunnerFromOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDeleteSelfHostedRunnerFromOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDeleteSelfHostedRunnerFromRepoNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDeleteSelfHostedRunnerFromRepoNoContent from json stream.
func (s *ActionsDeleteSelfHostedRunnerFromRepoNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDeleteSelfHostedRunnerFromRepoNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDeleteSelfHostedRunnerGroupFromOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDeleteSelfHostedRunnerGroupFromOrgNoContent from json stream.
func (s *ActionsDeleteSelfHostedRunnerGroupFromOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDeleteSelfHostedRunnerGroupFromOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDeleteWorkflowRunLogsNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDeleteWorkflowRunLogsNoContent from json stream.
func (s *ActionsDeleteWorkflowRunLogsNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDeleteWorkflowRunLogsNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDeleteWorkflowRunNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDeleteWorkflowRunNoContent from json stream.
func (s *ActionsDeleteWorkflowRunNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDeleteWorkflowRunNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDisableSelectedRepositoryGithubActionsOrganizationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDisableSelectedRepositoryGithubActionsOrganizationNoContent from json stream.
func (s *ActionsDisableSelectedRepositoryGithubActionsOrganizationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDisableSelectedRepositoryGithubActionsOrganizationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDisableWorkflowWorkflowID) WriteJSON(e *json.Encoder) {
	switch s.Type {
	case IntActionsDisableWorkflowWorkflowID:
		e.Int(s.Int)
	case StringActionsDisableWorkflowWorkflowID:
		e.Str(s.String)
	}
}

// ReadJSON reads value from json reader.
func (s *ActionsDisableWorkflowWorkflowID) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDisableWorkflowWorkflowID to nil`)
	}
	switch t := d.Next(); t {
	case json.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntActionsDisableWorkflowWorkflowID
	case json.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringActionsDisableWorkflowWorkflowID
	default:
		return fmt.Errorf("unexpected json type %q", t)
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActionsDownloadArtifactFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDownloadArtifactFound from json stream.
func (s *ActionsDownloadArtifactFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDownloadArtifactFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDownloadJobLogsForWorkflowRunFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDownloadJobLogsForWorkflowRunFound from json stream.
func (s *ActionsDownloadJobLogsForWorkflowRunFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDownloadJobLogsForWorkflowRunFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsDownloadWorkflowRunLogsFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsDownloadWorkflowRunLogsFound from json stream.
func (s *ActionsDownloadWorkflowRunLogsFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsDownloadWorkflowRunLogsFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsEnableSelectedRepositoryGithubActionsOrganizationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsEnableSelectedRepositoryGithubActionsOrganizationNoContent from json stream.
func (s *ActionsEnableSelectedRepositoryGithubActionsOrganizationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsEnableSelectedRepositoryGithubActionsOrganizationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsEnableWorkflowWorkflowID) WriteJSON(e *json.Encoder) {
	switch s.Type {
	case IntActionsEnableWorkflowWorkflowID:
		e.Int(s.Int)
	case StringActionsEnableWorkflowWorkflowID:
		e.Str(s.String)
	}
}

// ReadJSON reads value from json reader.
func (s *ActionsEnableWorkflowWorkflowID) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsEnableWorkflowWorkflowID to nil`)
	}
	switch t := d.Next(); t {
	case json.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntActionsEnableWorkflowWorkflowID
	case json.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringActionsEnableWorkflowWorkflowID
	default:
		return fmt.Errorf("unexpected json type %q", t)
	}
	return nil
}

func (ActionsEnabled) WriteJSON(e *json.Encoder)      {}
func (ActionsEnabled) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ActionsEnterprisePermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("enabled_organizations")
	s.EnabledOrganizations.WriteJSON(e)
	if s.SelectedOrganizationsURL.Set {
		more.More()
		e.ObjField("selected_organizations_url")
		s.SelectedOrganizationsURL.WriteJSON(e)
	}
	if s.AllowedActions.Set {
		more.More()
		e.ObjField("allowed_actions")
		s.AllowedActions.WriteJSON(e)
	}
	if s.SelectedActionsURL.Set {
		more.More()
		e.ObjField("selected_actions_url")
		s.SelectedActionsURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsEnterprisePermissions from json stream.
func (s *ActionsEnterprisePermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsEnterprisePermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled_organizations":
			if err := s.EnabledOrganizations.ReadJSON(d); err != nil {
				return err
			}
		case "selected_organizations_url":
			s.SelectedOrganizationsURL.Reset()
			if err := s.SelectedOrganizationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(d); err != nil {
				return err
			}
		case "selected_actions_url":
			s.SelectedActionsURL.Reset()
			if err := s.SelectedActionsURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsGetWorkflowUsageWorkflowID) WriteJSON(e *json.Encoder) {
	switch s.Type {
	case IntActionsGetWorkflowUsageWorkflowID:
		e.Int(s.Int)
	case StringActionsGetWorkflowUsageWorkflowID:
		e.Str(s.String)
	}
}

// ReadJSON reads value from json reader.
func (s *ActionsGetWorkflowUsageWorkflowID) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsGetWorkflowUsageWorkflowID to nil`)
	}
	switch t := d.Next(); t {
	case json.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntActionsGetWorkflowUsageWorkflowID
	case json.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringActionsGetWorkflowUsageWorkflowID
	default:
		return fmt.Errorf("unexpected json type %q", t)
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActionsGetWorkflowWorkflowID) WriteJSON(e *json.Encoder) {
	switch s.Type {
	case IntActionsGetWorkflowWorkflowID:
		e.Int(s.Int)
	case StringActionsGetWorkflowWorkflowID:
		e.Str(s.String)
	}
}

// ReadJSON reads value from json reader.
func (s *ActionsGetWorkflowWorkflowID) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsGetWorkflowWorkflowID to nil`)
	}
	switch t := d.Next(); t {
	case json.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntActionsGetWorkflowWorkflowID
	case json.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringActionsGetWorkflowWorkflowID
	default:
		return fmt.Errorf("unexpected json type %q", t)
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActionsListArtifactsForRepoOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("artifacts")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Artifacts {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListArtifactsForRepoOK from json stream.
func (s *ActionsListArtifactsForRepoOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListArtifactsForRepoOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "artifacts":
			s.Artifacts = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Artifact
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Artifacts = append(s.Artifacts, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListEnvironmentSecretsOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("secrets")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Secrets {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListEnvironmentSecretsOK from json stream.
func (s *ActionsListEnvironmentSecretsOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListEnvironmentSecretsOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "secrets":
			s.Secrets = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ActionsSecret
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Secrets = append(s.Secrets, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListJobsForWorkflowRunFilter) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ActionsListJobsForWorkflowRunFilter from json reader.
func (s *ActionsListJobsForWorkflowRunFilter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListJobsForWorkflowRunFilter to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ActionsListJobsForWorkflowRunFilter(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActionsListJobsForWorkflowRunOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("jobs")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Jobs {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListJobsForWorkflowRunOK from json stream.
func (s *ActionsListJobsForWorkflowRunOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListJobsForWorkflowRunOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "jobs":
			s.Jobs = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Job
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Jobs = append(s.Jobs, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListOrgSecretsOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("secrets")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Secrets {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListOrgSecretsOK from json stream.
func (s *ActionsListOrgSecretsOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListOrgSecretsOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "secrets":
			s.Secrets = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem OrganizationActionsSecret
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Secrets = append(s.Secrets, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Float64(s.TotalCount)
	more.More()
	e.ObjField("repositories")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK from json stream.
func (s *ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Float64()
			s.TotalCount = float64(v)
			if err != nil {
				return err
			}
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem MinimalRepository
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListRepoSecretsOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("secrets")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Secrets {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListRepoSecretsOK from json stream.
func (s *ActionsListRepoSecretsOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListRepoSecretsOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "secrets":
			s.Secrets = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ActionsSecret
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Secrets = append(s.Secrets, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListRepoWorkflowsOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("workflows")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Workflows {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListRepoWorkflowsOK from json stream.
func (s *ActionsListRepoWorkflowsOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListRepoWorkflowsOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "workflows":
			s.Workflows = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Workflow
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Workflows = append(s.Workflows, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelectedReposForOrgSecretOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("repositories")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListSelectedReposForOrgSecretOK from json stream.
func (s *ActionsListSelectedReposForOrgSecretOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListSelectedReposForOrgSecretOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem MinimalRepository
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Float64(s.TotalCount)
	more.More()
	e.ObjField("repositories")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK from json stream.
func (s *ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Float64()
			s.TotalCount = float64(v)
			if err != nil {
				return err
			}
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Repository
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelfHostedRunnerGroupsForOrgOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Float64(s.TotalCount)
	more.More()
	e.ObjField("runner_groups")
	more.Down()
	e.ArrStart()
	for _, elem := range s.RunnerGroups {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListSelfHostedRunnerGroupsForOrgOK from json stream.
func (s *ActionsListSelfHostedRunnerGroupsForOrgOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListSelfHostedRunnerGroupsForOrgOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Float64()
			s.TotalCount = float64(v)
			if err != nil {
				return err
			}
		case "runner_groups":
			s.RunnerGroups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem RunnerGroupsOrg
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.RunnerGroups = append(s.RunnerGroups, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelfHostedRunnersForOrgOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("runners")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Runners {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListSelfHostedRunnersForOrgOK from json stream.
func (s *ActionsListSelfHostedRunnersForOrgOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListSelfHostedRunnersForOrgOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "runners":
			s.Runners = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Runner
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Runners = append(s.Runners, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelfHostedRunnersForRepoOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("runners")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Runners {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListSelfHostedRunnersForRepoOK from json stream.
func (s *ActionsListSelfHostedRunnersForRepoOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListSelfHostedRunnersForRepoOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "runners":
			s.Runners = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Runner
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Runners = append(s.Runners, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelfHostedRunnersInGroupForOrgOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Float64(s.TotalCount)
	more.More()
	e.ObjField("runners")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Runners {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListSelfHostedRunnersInGroupForOrgOK from json stream.
func (s *ActionsListSelfHostedRunnersInGroupForOrgOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListSelfHostedRunnersInGroupForOrgOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Float64()
			s.TotalCount = float64(v)
			if err != nil {
				return err
			}
		case "runners":
			s.Runners = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Runner
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Runners = append(s.Runners, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListWorkflowRunArtifactsOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("artifacts")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Artifacts {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListWorkflowRunArtifactsOK from json stream.
func (s *ActionsListWorkflowRunArtifactsOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListWorkflowRunArtifactsOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "artifacts":
			s.Artifacts = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Artifact
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Artifacts = append(s.Artifacts, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListWorkflowRunsForRepoOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("workflow_runs")
	more.Down()
	e.ArrStart()
	for _, elem := range s.WorkflowRuns {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsListWorkflowRunsForRepoOK from json stream.
func (s *ActionsListWorkflowRunsForRepoOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListWorkflowRunsForRepoOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "workflow_runs":
			s.WorkflowRuns = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem WorkflowRun
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.WorkflowRuns = append(s.WorkflowRuns, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsListWorkflowRunsForRepoStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ActionsListWorkflowRunsForRepoStatus from json reader.
func (s *ActionsListWorkflowRunsForRepoStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListWorkflowRunsForRepoStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ActionsListWorkflowRunsForRepoStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActionsListWorkflowRunsWorkflowID) WriteJSON(e *json.Encoder) {
	switch s.Type {
	case IntActionsListWorkflowRunsWorkflowID:
		e.Int(s.Int)
	case StringActionsListWorkflowRunsWorkflowID:
		e.Str(s.String)
	}
}

// ReadJSON reads value from json reader.
func (s *ActionsListWorkflowRunsWorkflowID) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsListWorkflowRunsWorkflowID to nil`)
	}
	switch t := d.Next(); t {
	case json.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntActionsListWorkflowRunsWorkflowID
	case json.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringActionsListWorkflowRunsWorkflowID
	default:
		return fmt.Errorf("unexpected json type %q", t)
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActionsOrganizationPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("enabled_repositories")
	s.EnabledRepositories.WriteJSON(e)
	if s.SelectedRepositoriesURL.Set {
		more.More()
		e.ObjField("selected_repositories_url")
		s.SelectedRepositoriesURL.WriteJSON(e)
	}
	if s.AllowedActions.Set {
		more.More()
		e.ObjField("allowed_actions")
		s.AllowedActions.WriteJSON(e)
	}
	if s.SelectedActionsURL.Set {
		more.More()
		e.ObjField("selected_actions_url")
		s.SelectedActionsURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsOrganizationPermissions from json stream.
func (s *ActionsOrganizationPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsOrganizationPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled_repositories":
			if err := s.EnabledRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "selected_repositories_url":
			s.SelectedRepositoriesURL.Reset()
			if err := s.SelectedRepositoriesURL.ReadJSON(d); err != nil {
				return err
			}
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(d); err != nil {
				return err
			}
		case "selected_actions_url":
			s.SelectedActionsURL.Reset()
			if err := s.SelectedActionsURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsPublicKey) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("key_id")
	e.Str(s.KeyID)
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.Title.Set {
		more.More()
		e.ObjField("title")
		s.Title.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsPublicKey from json stream.
func (s *ActionsPublicKey) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsPublicKey to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "key_id":
			v, err := d.Str()
			s.KeyID = string(v)
			if err != nil {
				return err
			}
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsReRunWorkflowCreated) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsReRunWorkflowCreated from json stream.
func (s *ActionsReRunWorkflowCreated) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsReRunWorkflowCreated to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgNoContent from json stream.
func (s *ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsRemoveSelectedRepoFromOrgSecretConflict) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsRemoveSelectedRepoFromOrgSecretConflict from json stream.
func (s *ActionsRemoveSelectedRepoFromOrgSecretConflict) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsRemoveSelectedRepoFromOrgSecretConflict to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsRemoveSelectedRepoFromOrgSecretNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsRemoveSelectedRepoFromOrgSecretNoContent from json stream.
func (s *ActionsRemoveSelectedRepoFromOrgSecretNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsRemoveSelectedRepoFromOrgSecretNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsRemoveSelfHostedRunnerFromGroupForOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsRemoveSelfHostedRunnerFromGroupForOrgNoContent from json stream.
func (s *ActionsRemoveSelfHostedRunnerFromGroupForOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsRemoveSelfHostedRunnerFromGroupForOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsRepositoryPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	// Unsupported kind "alias".
	if s.AllowedActions.Set {
		more.More()
		e.ObjField("allowed_actions")
		s.AllowedActions.WriteJSON(e)
	}
	if s.SelectedActionsURL.Set {
		more.More()
		e.ObjField("selected_actions_url")
		s.SelectedActionsURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsRepositoryPermissions from json stream.
func (s *ActionsRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsRepositoryPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			if err := fmt.Errorf(`decoding of "ActionsEnabled" (alias) is not implemented`); err != nil {
				return err
			}
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(d); err != nil {
				return err
			}
		case "selected_actions_url":
			s.SelectedActionsURL.Reset()
			if err := s.SelectedActionsURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsRetryWorkflowCreated) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsRetryWorkflowCreated from json stream.
func (s *ActionsRetryWorkflowCreated) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsRetryWorkflowCreated to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsReviewPendingDeploymentsForRunReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("environment_ids")
	more.Down()
	e.ArrStart()
	for _, elem := range s.EnvironmentIds {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("comment")
	e.Str(s.Comment)
	e.ObjEnd()
}

// ReadJSON reads ActionsReviewPendingDeploymentsForRunReq from json stream.
func (s *ActionsReviewPendingDeploymentsForRunReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsReviewPendingDeploymentsForRunReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "environment_ids":
			s.EnvironmentIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.EnvironmentIds = append(s.EnvironmentIds, elem)
				return nil
			}); err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "comment":
			v, err := d.Str()
			s.Comment = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsReviewPendingDeploymentsForRunReqState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ActionsReviewPendingDeploymentsForRunReqState from json reader.
func (s *ActionsReviewPendingDeploymentsForRunReqState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsReviewPendingDeploymentsForRunReqState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ActionsReviewPendingDeploymentsForRunReqState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActionsSecret) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	e.ObjEnd()
}

// ReadJSON reads ActionsSecret from json stream.
func (s *ActionsSecret) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSecret to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetAllowedActionsOrganizationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetAllowedActionsOrganizationNoContent from json stream.
func (s *ActionsSetAllowedActionsOrganizationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetAllowedActionsOrganizationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetAllowedActionsRepositoryNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetAllowedActionsRepositoryNoContent from json stream.
func (s *ActionsSetAllowedActionsRepositoryNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetAllowedActionsRepositoryNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetGithubActionsPermissionsOrganizationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetGithubActionsPermissionsOrganizationNoContent from json stream.
func (s *ActionsSetGithubActionsPermissionsOrganizationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetGithubActionsPermissionsOrganizationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetGithubActionsPermissionsOrganizationReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("enabled_repositories")
	s.EnabledRepositories.WriteJSON(e)
	if s.AllowedActions.Set {
		more.More()
		e.ObjField("allowed_actions")
		s.AllowedActions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsSetGithubActionsPermissionsOrganizationReq from json stream.
func (s *ActionsSetGithubActionsPermissionsOrganizationReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetGithubActionsPermissionsOrganizationReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled_repositories":
			if err := s.EnabledRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetGithubActionsPermissionsRepositoryNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetGithubActionsPermissionsRepositoryNoContent from json stream.
func (s *ActionsSetGithubActionsPermissionsRepositoryNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetGithubActionsPermissionsRepositoryNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetGithubActionsPermissionsRepositoryReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	// Unsupported kind "alias".
	if s.AllowedActions.Set {
		more.More()
		e.ObjField("allowed_actions")
		s.AllowedActions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsSetGithubActionsPermissionsRepositoryReq from json stream.
func (s *ActionsSetGithubActionsPermissionsRepositoryReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetGithubActionsPermissionsRepositoryReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			if err := fmt.Errorf(`decoding of "ActionsEnabled" (alias) is not implemented`); err != nil {
				return err
			}
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgNoContent from json stream.
func (s *ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("selected_repository_ids")
	more.Down()
	e.ArrStart()
	for _, elem := range s.SelectedRepositoryIds {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq from json stream.
func (s *ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "selected_repository_ids":
			s.SelectedRepositoryIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.SelectedRepositoryIds = append(s.SelectedRepositoryIds, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetSelectedReposForOrgSecretNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetSelectedReposForOrgSecretNoContent from json stream.
func (s *ActionsSetSelectedReposForOrgSecretNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetSelectedReposForOrgSecretNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetSelectedReposForOrgSecretReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("selected_repository_ids")
	more.Down()
	e.ArrStart()
	for _, elem := range s.SelectedRepositoryIds {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetSelectedReposForOrgSecretReq from json stream.
func (s *ActionsSetSelectedReposForOrgSecretReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetSelectedReposForOrgSecretReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "selected_repository_ids":
			s.SelectedRepositoryIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.SelectedRepositoryIds = append(s.SelectedRepositoryIds, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationNoContent from json stream.
func (s *ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("selected_repository_ids")
	more.Down()
	e.ArrStart()
	for _, elem := range s.SelectedRepositoryIds {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq from json stream.
func (s *ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "selected_repository_ids":
			s.SelectedRepositoryIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.SelectedRepositoryIds = append(s.SelectedRepositoryIds, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetSelfHostedRunnersInGroupForOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetSelfHostedRunnersInGroupForOrgNoContent from json stream.
func (s *ActionsSetSelfHostedRunnersInGroupForOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetSelfHostedRunnersInGroupForOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetSelfHostedRunnersInGroupForOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("runners")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Runners {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ActionsSetSelfHostedRunnersInGroupForOrgReq from json stream.
func (s *ActionsSetSelfHostedRunnersInGroupForOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsSetSelfHostedRunnersInGroupForOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "runners":
			s.Runners = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Runners = append(s.Runners, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsUpdateSelfHostedRunnerGroupForOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActionsUpdateSelfHostedRunnerGroupForOrgReq from json stream.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsUpdateSelfHostedRunnerGroupForOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility from json reader.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility(v)
	return nil
}

func (ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {
}
func (ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivityCheckRepoIsStarredByAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActivityCheckRepoIsStarredByAuthenticatedUserNoContent from json stream.
func (s *ActivityCheckRepoIsStarredByAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityCheckRepoIsStarredByAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActivityDeleteRepoSubscriptionNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActivityDeleteRepoSubscriptionNoContent from json stream.
func (s *ActivityDeleteRepoSubscriptionNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityDeleteRepoSubscriptionNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ActivityDeleteThreadSubscriptionApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (ActivityDeleteThreadSubscriptionApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivityDeleteThreadSubscriptionNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActivityDeleteThreadSubscriptionNoContent from json stream.
func (s *ActivityDeleteThreadSubscriptionNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityDeleteThreadSubscriptionNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActivityGetRepoSubscriptionNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActivityGetRepoSubscriptionNotFound from json stream.
func (s *ActivityGetRepoSubscriptionNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityGetRepoSubscriptionNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ActivityGetThreadApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ActivityGetThreadApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ActivityGetThreadApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ActivityGetThreadApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

func (ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently) WriteJSON(e *json.Encoder) {
}
func (ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityListPublicEventsForRepoNetworkOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (ActivityListPublicEventsForRepoNetworkOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityListPublicEventsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ActivityListPublicEventsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ActivityListReposStarredByAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (ActivityListReposStarredByAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityListReposStarredByAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (ActivityListReposStarredByAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivityListReposStarredByAuthenticatedUserDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ActivityListReposStarredByAuthenticatedUserDirection from json reader.
func (s *ActivityListReposStarredByAuthenticatedUserDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityListReposStarredByAuthenticatedUserDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ActivityListReposStarredByAuthenticatedUserDirection(v)
	return nil
}

func (ActivityListReposStarredByAuthenticatedUserOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (ActivityListReposStarredByAuthenticatedUserOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityListReposStarredByAuthenticatedUserOKApplicationVndGithubV3StarJSON) WriteJSON(e *json.Encoder) {
}
func (ActivityListReposStarredByAuthenticatedUserOKApplicationVndGithubV3StarJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivityListReposStarredByAuthenticatedUserSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ActivityListReposStarredByAuthenticatedUserSort from json reader.
func (s *ActivityListReposStarredByAuthenticatedUserSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityListReposStarredByAuthenticatedUserSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ActivityListReposStarredByAuthenticatedUserSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivityListReposStarredByUserDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ActivityListReposStarredByUserDirection from json reader.
func (s *ActivityListReposStarredByUserDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityListReposStarredByUserDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ActivityListReposStarredByUserDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivityListReposStarredByUserSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ActivityListReposStarredByUserSort from json reader.
func (s *ActivityListReposStarredByUserSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityListReposStarredByUserSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ActivityListReposStarredByUserSort(v)
	return nil
}

func (ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityListWatchedReposForAuthenticatedUserOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (ActivityListWatchedReposForAuthenticatedUserOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkNotificationsAsReadAccepted) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActivityMarkNotificationsAsReadAccepted from json stream.
func (s *ActivityMarkNotificationsAsReadAccepted) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityMarkNotificationsAsReadAccepted to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ActivityMarkNotificationsAsReadApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (ActivityMarkNotificationsAsReadApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityMarkNotificationsAsReadApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (ActivityMarkNotificationsAsReadApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkNotificationsAsReadReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.LastReadAt.Set {
		more.More()
		e.ObjField("last_read_at")
		s.LastReadAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.Read.Set {
		more.More()
		e.ObjField("read")
		s.Read.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActivityMarkNotificationsAsReadReq from json stream.
func (s *ActivityMarkNotificationsAsReadReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityMarkNotificationsAsReadReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "last_read_at":
			s.LastReadAt.Reset()
			if err := s.LastReadAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "read":
			s.Read.Reset()
			if err := s.Read.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkNotificationsAsReadResetContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActivityMarkNotificationsAsReadResetContent from json stream.
func (s *ActivityMarkNotificationsAsReadResetContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityMarkNotificationsAsReadResetContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkRepoNotificationsAsReadAccepted) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActivityMarkRepoNotificationsAsReadAccepted from json stream.
func (s *ActivityMarkRepoNotificationsAsReadAccepted) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityMarkRepoNotificationsAsReadAccepted to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkRepoNotificationsAsReadReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.LastReadAt.Set {
		more.More()
		e.ObjField("last_read_at")
		s.LastReadAt.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads ActivityMarkRepoNotificationsAsReadReq from json stream.
func (s *ActivityMarkRepoNotificationsAsReadReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityMarkRepoNotificationsAsReadReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "last_read_at":
			s.LastReadAt.Reset()
			if err := s.LastReadAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkRepoNotificationsAsReadResetContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActivityMarkRepoNotificationsAsReadResetContent from json stream.
func (s *ActivityMarkRepoNotificationsAsReadResetContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityMarkRepoNotificationsAsReadResetContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkThreadAsReadResetContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActivityMarkThreadAsReadResetContent from json stream.
func (s *ActivityMarkThreadAsReadResetContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityMarkThreadAsReadResetContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ActivitySetRepoSubscriptionReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Subscribed.Set {
		more.More()
		e.ObjField("subscribed")
		s.Subscribed.WriteJSON(e)
	}
	if s.Ignored.Set {
		more.More()
		e.ObjField("ignored")
		s.Ignored.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActivitySetRepoSubscriptionReq from json stream.
func (s *ActivitySetRepoSubscriptionReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivitySetRepoSubscriptionReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "subscribed":
			s.Subscribed.Reset()
			if err := s.Subscribed.ReadJSON(d); err != nil {
				return err
			}
		case "ignored":
			s.Ignored.Reset()
			if err := s.Ignored.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ActivitySetThreadSubscriptionApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (ActivitySetThreadSubscriptionApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivitySetThreadSubscriptionApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (ActivitySetThreadSubscriptionApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivitySetThreadSubscriptionReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Ignored.Set {
		more.More()
		e.ObjField("ignored")
		s.Ignored.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ActivitySetThreadSubscriptionReq from json stream.
func (s *ActivitySetThreadSubscriptionReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivitySetThreadSubscriptionReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "ignored":
			s.Ignored.Reset()
			if err := s.Ignored.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivityStarRepoForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActivityStarRepoForAuthenticatedUserNoContent from json stream.
func (s *ActivityStarRepoForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityStarRepoForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ActivityUnstarRepoForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ActivityUnstarRepoForAuthenticatedUserNoContent from json stream.
func (s *ActivityUnstarRepoForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ActivityUnstarRepoForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Actor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	if s.DisplayLogin.Set {
		more.More()
		e.ObjField("display_login")
		s.DisplayLogin.WriteJSON(e)
	}
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	e.ObjEnd()
}

// ReadJSON reads Actor from json stream.
func (s *Actor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Actor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "display_login":
			s.DisplayLogin.Reset()
			if err := s.DisplayLogin.ReadJSON(d); err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (AlertCreatedAt) WriteJSON(e *json.Encoder)      {}
func (AlertCreatedAt) ReadJSON(d *json.Decoder) error { return nil }

func (AlertHTMLURL) WriteJSON(e *json.Encoder)      {}
func (AlertHTMLURL) ReadJSON(d *json.Decoder) error { return nil }

func (AlertInstancesURL) WriteJSON(e *json.Encoder)      {}
func (AlertInstancesURL) ReadJSON(d *json.Decoder) error { return nil }

func (AlertNumber) WriteJSON(e *json.Encoder)      {}
func (AlertNumber) ReadJSON(d *json.Decoder) error { return nil }

func (AlertURL) WriteJSON(e *json.Encoder)      {}
func (AlertURL) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s AllowedActions) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AllowedActions from json reader.
func (s *AllowedActions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AllowedActions to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AllowedActions(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Actions.Set {
		more.More()
		e.ObjField("actions")
		s.Actions.WriteJSON(e)
	}
	if s.Administration.Set {
		more.More()
		e.ObjField("administration")
		s.Administration.WriteJSON(e)
	}
	if s.Checks.Set {
		more.More()
		e.ObjField("checks")
		s.Checks.WriteJSON(e)
	}
	if s.ContentReferences.Set {
		more.More()
		e.ObjField("content_references")
		s.ContentReferences.WriteJSON(e)
	}
	if s.Contents.Set {
		more.More()
		e.ObjField("contents")
		s.Contents.WriteJSON(e)
	}
	if s.Deployments.Set {
		more.More()
		e.ObjField("deployments")
		s.Deployments.WriteJSON(e)
	}
	if s.Environments.Set {
		more.More()
		e.ObjField("environments")
		s.Environments.WriteJSON(e)
	}
	if s.Issues.Set {
		more.More()
		e.ObjField("issues")
		s.Issues.WriteJSON(e)
	}
	if s.Metadata.Set {
		more.More()
		e.ObjField("metadata")
		s.Metadata.WriteJSON(e)
	}
	if s.Packages.Set {
		more.More()
		e.ObjField("packages")
		s.Packages.WriteJSON(e)
	}
	if s.Pages.Set {
		more.More()
		e.ObjField("pages")
		s.Pages.WriteJSON(e)
	}
	if s.PullRequests.Set {
		more.More()
		e.ObjField("pull_requests")
		s.PullRequests.WriteJSON(e)
	}
	if s.RepositoryHooks.Set {
		more.More()
		e.ObjField("repository_hooks")
		s.RepositoryHooks.WriteJSON(e)
	}
	if s.RepositoryProjects.Set {
		more.More()
		e.ObjField("repository_projects")
		s.RepositoryProjects.WriteJSON(e)
	}
	if s.SecretScanningAlerts.Set {
		more.More()
		e.ObjField("secret_scanning_alerts")
		s.SecretScanningAlerts.WriteJSON(e)
	}
	if s.Secrets.Set {
		more.More()
		e.ObjField("secrets")
		s.Secrets.WriteJSON(e)
	}
	if s.SecurityEvents.Set {
		more.More()
		e.ObjField("security_events")
		s.SecurityEvents.WriteJSON(e)
	}
	if s.SingleFile.Set {
		more.More()
		e.ObjField("single_file")
		s.SingleFile.WriteJSON(e)
	}
	if s.Statuses.Set {
		more.More()
		e.ObjField("statuses")
		s.Statuses.WriteJSON(e)
	}
	if s.VulnerabilityAlerts.Set {
		more.More()
		e.ObjField("vulnerability_alerts")
		s.VulnerabilityAlerts.WriteJSON(e)
	}
	if s.Workflows.Set {
		more.More()
		e.ObjField("workflows")
		s.Workflows.WriteJSON(e)
	}
	if s.Members.Set {
		more.More()
		e.ObjField("members")
		s.Members.WriteJSON(e)
	}
	if s.OrganizationAdministration.Set {
		more.More()
		e.ObjField("organization_administration")
		s.OrganizationAdministration.WriteJSON(e)
	}
	if s.OrganizationHooks.Set {
		more.More()
		e.ObjField("organization_hooks")
		s.OrganizationHooks.WriteJSON(e)
	}
	if s.OrganizationPlan.Set {
		more.More()
		e.ObjField("organization_plan")
		s.OrganizationPlan.WriteJSON(e)
	}
	if s.OrganizationProjects.Set {
		more.More()
		e.ObjField("organization_projects")
		s.OrganizationProjects.WriteJSON(e)
	}
	if s.OrganizationPackages.Set {
		more.More()
		e.ObjField("organization_packages")
		s.OrganizationPackages.WriteJSON(e)
	}
	if s.OrganizationSecrets.Set {
		more.More()
		e.ObjField("organization_secrets")
		s.OrganizationSecrets.WriteJSON(e)
	}
	if s.OrganizationSelfHostedRunners.Set {
		more.More()
		e.ObjField("organization_self_hosted_runners")
		s.OrganizationSelfHostedRunners.WriteJSON(e)
	}
	if s.OrganizationUserBlocking.Set {
		more.More()
		e.ObjField("organization_user_blocking")
		s.OrganizationUserBlocking.WriteJSON(e)
	}
	if s.TeamDiscussions.Set {
		more.More()
		e.ObjField("team_discussions")
		s.TeamDiscussions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads AppPermissions from json stream.
func (s *AppPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "actions":
			s.Actions.Reset()
			if err := s.Actions.ReadJSON(d); err != nil {
				return err
			}
		case "administration":
			s.Administration.Reset()
			if err := s.Administration.ReadJSON(d); err != nil {
				return err
			}
		case "checks":
			s.Checks.Reset()
			if err := s.Checks.ReadJSON(d); err != nil {
				return err
			}
		case "content_references":
			s.ContentReferences.Reset()
			if err := s.ContentReferences.ReadJSON(d); err != nil {
				return err
			}
		case "contents":
			s.Contents.Reset()
			if err := s.Contents.ReadJSON(d); err != nil {
				return err
			}
		case "deployments":
			s.Deployments.Reset()
			if err := s.Deployments.ReadJSON(d); err != nil {
				return err
			}
		case "environments":
			s.Environments.Reset()
			if err := s.Environments.ReadJSON(d); err != nil {
				return err
			}
		case "issues":
			s.Issues.Reset()
			if err := s.Issues.ReadJSON(d); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(d); err != nil {
				return err
			}
		case "packages":
			s.Packages.Reset()
			if err := s.Packages.ReadJSON(d); err != nil {
				return err
			}
		case "pages":
			s.Pages.Reset()
			if err := s.Pages.ReadJSON(d); err != nil {
				return err
			}
		case "pull_requests":
			s.PullRequests.Reset()
			if err := s.PullRequests.ReadJSON(d); err != nil {
				return err
			}
		case "repository_hooks":
			s.RepositoryHooks.Reset()
			if err := s.RepositoryHooks.ReadJSON(d); err != nil {
				return err
			}
		case "repository_projects":
			s.RepositoryProjects.Reset()
			if err := s.RepositoryProjects.ReadJSON(d); err != nil {
				return err
			}
		case "secret_scanning_alerts":
			s.SecretScanningAlerts.Reset()
			if err := s.SecretScanningAlerts.ReadJSON(d); err != nil {
				return err
			}
		case "secrets":
			s.Secrets.Reset()
			if err := s.Secrets.ReadJSON(d); err != nil {
				return err
			}
		case "security_events":
			s.SecurityEvents.Reset()
			if err := s.SecurityEvents.ReadJSON(d); err != nil {
				return err
			}
		case "single_file":
			s.SingleFile.Reset()
			if err := s.SingleFile.ReadJSON(d); err != nil {
				return err
			}
		case "statuses":
			s.Statuses.Reset()
			if err := s.Statuses.ReadJSON(d); err != nil {
				return err
			}
		case "vulnerability_alerts":
			s.VulnerabilityAlerts.Reset()
			if err := s.VulnerabilityAlerts.ReadJSON(d); err != nil {
				return err
			}
		case "workflows":
			s.Workflows.Reset()
			if err := s.Workflows.ReadJSON(d); err != nil {
				return err
			}
		case "members":
			s.Members.Reset()
			if err := s.Members.ReadJSON(d); err != nil {
				return err
			}
		case "organization_administration":
			s.OrganizationAdministration.Reset()
			if err := s.OrganizationAdministration.ReadJSON(d); err != nil {
				return err
			}
		case "organization_hooks":
			s.OrganizationHooks.Reset()
			if err := s.OrganizationHooks.ReadJSON(d); err != nil {
				return err
			}
		case "organization_plan":
			s.OrganizationPlan.Reset()
			if err := s.OrganizationPlan.ReadJSON(d); err != nil {
				return err
			}
		case "organization_projects":
			s.OrganizationProjects.Reset()
			if err := s.OrganizationProjects.ReadJSON(d); err != nil {
				return err
			}
		case "organization_packages":
			s.OrganizationPackages.Reset()
			if err := s.OrganizationPackages.ReadJSON(d); err != nil {
				return err
			}
		case "organization_secrets":
			s.OrganizationSecrets.Reset()
			if err := s.OrganizationSecrets.ReadJSON(d); err != nil {
				return err
			}
		case "organization_self_hosted_runners":
			s.OrganizationSelfHostedRunners.Reset()
			if err := s.OrganizationSelfHostedRunners.ReadJSON(d); err != nil {
				return err
			}
		case "organization_user_blocking":
			s.OrganizationUserBlocking.Reset()
			if err := s.OrganizationUserBlocking.ReadJSON(d); err != nil {
				return err
			}
		case "team_discussions":
			s.TeamDiscussions.Reset()
			if err := s.TeamDiscussions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsActions) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsActions from json reader.
func (s *AppPermissionsActions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsActions to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsActions(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsAdministration) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsAdministration from json reader.
func (s *AppPermissionsAdministration) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsAdministration to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsAdministration(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsChecks) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsChecks from json reader.
func (s *AppPermissionsChecks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsChecks to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsChecks(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsContentReferences) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsContentReferences from json reader.
func (s *AppPermissionsContentReferences) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsContentReferences to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsContentReferences(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsContents) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsContents from json reader.
func (s *AppPermissionsContents) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsContents to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsContents(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsDeployments) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsDeployments from json reader.
func (s *AppPermissionsDeployments) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsDeployments to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsDeployments(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsEnvironments) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsEnvironments from json reader.
func (s *AppPermissionsEnvironments) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsEnvironments to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsEnvironments(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsIssues) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsIssues from json reader.
func (s *AppPermissionsIssues) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsIssues to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsIssues(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsMembers) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsMembers from json reader.
func (s *AppPermissionsMembers) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsMembers to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsMembers(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsMetadata) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsMetadata from json reader.
func (s *AppPermissionsMetadata) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsMetadata to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsMetadata(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationAdministration) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsOrganizationAdministration from json reader.
func (s *AppPermissionsOrganizationAdministration) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsOrganizationAdministration to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsOrganizationAdministration(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationHooks) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsOrganizationHooks from json reader.
func (s *AppPermissionsOrganizationHooks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsOrganizationHooks to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsOrganizationHooks(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationPackages) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsOrganizationPackages from json reader.
func (s *AppPermissionsOrganizationPackages) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsOrganizationPackages to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsOrganizationPackages(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationPlan) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsOrganizationPlan from json reader.
func (s *AppPermissionsOrganizationPlan) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsOrganizationPlan to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsOrganizationPlan(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationProjects) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsOrganizationProjects from json reader.
func (s *AppPermissionsOrganizationProjects) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsOrganizationProjects to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsOrganizationProjects(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationSecrets) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsOrganizationSecrets from json reader.
func (s *AppPermissionsOrganizationSecrets) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsOrganizationSecrets to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsOrganizationSecrets(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationSelfHostedRunners) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsOrganizationSelfHostedRunners from json reader.
func (s *AppPermissionsOrganizationSelfHostedRunners) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsOrganizationSelfHostedRunners to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsOrganizationSelfHostedRunners(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationUserBlocking) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsOrganizationUserBlocking from json reader.
func (s *AppPermissionsOrganizationUserBlocking) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsOrganizationUserBlocking to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsOrganizationUserBlocking(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsPackages) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsPackages from json reader.
func (s *AppPermissionsPackages) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsPackages to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsPackages(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsPages) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsPages from json reader.
func (s *AppPermissionsPages) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsPages to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsPages(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsPullRequests) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsPullRequests from json reader.
func (s *AppPermissionsPullRequests) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsPullRequests to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsPullRequests(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsRepositoryHooks) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsRepositoryHooks from json reader.
func (s *AppPermissionsRepositoryHooks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsRepositoryHooks to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsRepositoryHooks(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsRepositoryProjects) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsRepositoryProjects from json reader.
func (s *AppPermissionsRepositoryProjects) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsRepositoryProjects to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsRepositoryProjects(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsSecretScanningAlerts) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsSecretScanningAlerts from json reader.
func (s *AppPermissionsSecretScanningAlerts) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsSecretScanningAlerts to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsSecretScanningAlerts(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsSecrets) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsSecrets from json reader.
func (s *AppPermissionsSecrets) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsSecrets to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsSecrets(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsSecurityEvents) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsSecurityEvents from json reader.
func (s *AppPermissionsSecurityEvents) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsSecurityEvents to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsSecurityEvents(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsSingleFile) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsSingleFile from json reader.
func (s *AppPermissionsSingleFile) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsSingleFile to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsSingleFile(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsStatuses) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsStatuses from json reader.
func (s *AppPermissionsStatuses) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsStatuses to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsStatuses(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsTeamDiscussions) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsTeamDiscussions from json reader.
func (s *AppPermissionsTeamDiscussions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsTeamDiscussions to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsTeamDiscussions(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsVulnerabilityAlerts) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsVulnerabilityAlerts from json reader.
func (s *AppPermissionsVulnerabilityAlerts) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsVulnerabilityAlerts to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsVulnerabilityAlerts(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsWorkflows) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppPermissionsWorkflows from json reader.
func (s *AppPermissionsWorkflows) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppPermissionsWorkflows to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppPermissionsWorkflows(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ApplicationGrant) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("app")
	s.App.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("scopes")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Scopes {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	if s.User.Set {
		more.More()
		e.ObjField("user")
		s.User.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ApplicationGrant from json stream.
func (s *ApplicationGrant) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ApplicationGrant to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "app":
			if err := s.App.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "scopes":
			s.Scopes = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Scopes = append(s.Scopes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ApplicationGrantApp) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("client_id")
	e.Str(s.ClientID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads ApplicationGrantApp from json stream.
func (s *ApplicationGrantApp) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ApplicationGrantApp to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "client_id":
			v, err := d.Str()
			s.ClientID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (AppsAddRepoToInstallationApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (AppsAddRepoToInstallationApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (AppsAddRepoToInstallationApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (AppsAddRepoToInstallationApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s AppsAddRepoToInstallationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AppsAddRepoToInstallationNoContent from json stream.
func (s *AppsAddRepoToInstallationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsAddRepoToInstallationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsCheckTokenReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("access_token")
	e.Str(s.AccessToken)
	e.ObjEnd()
}

// ReadJSON reads AppsCheckTokenReq from json stream.
func (s *AppsCheckTokenReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsCheckTokenReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "access_token":
			v, err := d.Str()
			s.AccessToken = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsCreateContentAttachmentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads AppsCreateContentAttachmentReq from json stream.
func (s *AppsCreateContentAttachmentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsCreateContentAttachmentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsCreateFromManifestReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AppsCreateFromManifestReq from json stream.
func (s *AppsCreateFromManifestReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsCreateFromManifestReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsCreateInstallationAccessTokenReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Repositories != nil {
		more.More()
		e.ObjField("repositories")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Repositories {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.RepositoryIds != nil {
		more.More()
		e.ObjField("repository_ids")
		more.Down()
		e.ArrStart()
		for _, elem := range s.RepositoryIds {
			more.More()
			e.Int(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads AppsCreateInstallationAccessTokenReq from json stream.
func (s *AppsCreateInstallationAccessTokenReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsCreateInstallationAccessTokenReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "repository_ids":
			s.RepositoryIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.RepositoryIds = append(s.RepositoryIds, elem)
				return nil
			}); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsDeleteAuthorizationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AppsDeleteAuthorizationNoContent from json stream.
func (s *AppsDeleteAuthorizationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsDeleteAuthorizationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsDeleteAuthorizationReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("access_token")
	e.Str(s.AccessToken)
	e.ObjEnd()
}

// ReadJSON reads AppsDeleteAuthorizationReq from json stream.
func (s *AppsDeleteAuthorizationReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsDeleteAuthorizationReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "access_token":
			v, err := d.Str()
			s.AccessToken = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsDeleteInstallationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AppsDeleteInstallationNoContent from json stream.
func (s *AppsDeleteInstallationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsDeleteInstallationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsDeleteTokenNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AppsDeleteTokenNoContent from json stream.
func (s *AppsDeleteTokenNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsDeleteTokenNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsDeleteTokenReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("access_token")
	e.Str(s.AccessToken)
	e.ObjEnd()
}

// ReadJSON reads AppsDeleteTokenReq from json stream.
func (s *AppsDeleteTokenReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsDeleteTokenReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "access_token":
			v, err := d.Str()
			s.AccessToken = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (AppsGetBySlugApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (AppsGetBySlugApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (AppsGetBySlugApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (AppsGetBySlugApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (AppsGetSubscriptionPlanForAccountApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (AppsGetSubscriptionPlanForAccountApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppsGetSubscriptionPlanForAccountStubbedNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AppsGetSubscriptionPlanForAccountStubbedNotFound from json stream.
func (s *AppsGetSubscriptionPlanForAccountStubbedNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsGetSubscriptionPlanForAccountStubbedNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsListAccountsForPlanDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppsListAccountsForPlanDirection from json reader.
func (s *AppsListAccountsForPlanDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsListAccountsForPlanDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppsListAccountsForPlanDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppsListAccountsForPlanSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppsListAccountsForPlanSort from json reader.
func (s *AppsListAccountsForPlanSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsListAccountsForPlanSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppsListAccountsForPlanSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppsListAccountsForPlanStubbedDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppsListAccountsForPlanStubbedDirection from json reader.
func (s *AppsListAccountsForPlanStubbedDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsListAccountsForPlanStubbedDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppsListAccountsForPlanStubbedDirection(v)
	return nil
}

func (AppsListAccountsForPlanStubbedOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (AppsListAccountsForPlanStubbedOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s AppsListAccountsForPlanStubbedSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AppsListAccountsForPlanStubbedSort from json reader.
func (s *AppsListAccountsForPlanStubbedSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsListAccountsForPlanStubbedSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AppsListAccountsForPlanStubbedSort(v)
	return nil
}

func (AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {
}
func (AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppsListInstallationReposForAuthenticatedUserOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	if s.RepositorySelection.Set {
		more.More()
		e.ObjField("repository_selection")
		s.RepositorySelection.WriteJSON(e)
	}
	more.More()
	e.ObjField("repositories")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads AppsListInstallationReposForAuthenticatedUserOK from json stream.
func (s *AppsListInstallationReposForAuthenticatedUserOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsListInstallationReposForAuthenticatedUserOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "repository_selection":
			s.RepositorySelection.Reset()
			if err := s.RepositorySelection.ReadJSON(d); err != nil {
				return err
			}
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Repository
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (AppsListPlansApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (AppsListPlansApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (AppsListPlansApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (AppsListPlansApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

func (AppsListPlansOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (AppsListPlansOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (AppsListPlansStubbedOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (AppsListPlansStubbedOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (AppsListReposAccessibleToInstallationApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (AppsListReposAccessibleToInstallationApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (AppsListReposAccessibleToInstallationApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (AppsListReposAccessibleToInstallationApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppsListReposAccessibleToInstallationOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("repositories")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if s.RepositorySelection.Set {
		more.More()
		e.ObjField("repository_selection")
		s.RepositorySelection.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads AppsListReposAccessibleToInstallationOK from json stream.
func (s *AppsListReposAccessibleToInstallationOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsListReposAccessibleToInstallationOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Repository
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "repository_selection":
			s.RepositorySelection.Reset()
			if err := s.RepositorySelection.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (AppsListSubscriptionsForAuthenticatedUserOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (AppsListSubscriptionsForAuthenticatedUserOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

func (AppsListSubscriptionsForAuthenticatedUserStubbedOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (AppsListSubscriptionsForAuthenticatedUserStubbedOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

func (AppsRemoveRepoFromInstallationApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (AppsRemoveRepoFromInstallationApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (AppsRemoveRepoFromInstallationApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (AppsRemoveRepoFromInstallationApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AppsRemoveRepoFromInstallationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AppsRemoveRepoFromInstallationNoContent from json stream.
func (s *AppsRemoveRepoFromInstallationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsRemoveRepoFromInstallationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsResetTokenReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("access_token")
	e.Str(s.AccessToken)
	e.ObjEnd()
}

// ReadJSON reads AppsResetTokenReq from json stream.
func (s *AppsResetTokenReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsResetTokenReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "access_token":
			v, err := d.Str()
			s.AccessToken = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsRevokeInstallationAccessTokenNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AppsRevokeInstallationAccessTokenNoContent from json stream.
func (s *AppsRevokeInstallationAccessTokenNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsRevokeInstallationAccessTokenNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsScopeTokenReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("access_token")
	e.Str(s.AccessToken)
	if s.Target.Set {
		more.More()
		e.ObjField("target")
		s.Target.WriteJSON(e)
	}
	if s.TargetID.Set {
		more.More()
		e.ObjField("target_id")
		s.TargetID.WriteJSON(e)
	}
	if s.Repositories != nil {
		more.More()
		e.ObjField("repositories")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Repositories {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.RepositoryIds != nil {
		more.More()
		e.ObjField("repository_ids")
		more.Down()
		e.ArrStart()
		for _, elem := range s.RepositoryIds {
			more.More()
			e.Int(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads AppsScopeTokenReq from json stream.
func (s *AppsScopeTokenReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsScopeTokenReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "access_token":
			v, err := d.Str()
			s.AccessToken = string(v)
			if err != nil {
				return err
			}
		case "target":
			s.Target.Reset()
			if err := s.Target.ReadJSON(d); err != nil {
				return err
			}
		case "target_id":
			s.TargetID.Reset()
			if err := s.TargetID.ReadJSON(d); err != nil {
				return err
			}
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "repository_ids":
			s.RepositoryIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.RepositoryIds = append(s.RepositoryIds, elem)
				return nil
			}); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsSuspendInstallationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AppsSuspendInstallationNoContent from json stream.
func (s *AppsSuspendInstallationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsSuspendInstallationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsUnsuspendInstallationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AppsUnsuspendInstallationNoContent from json stream.
func (s *AppsUnsuspendInstallationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsUnsuspendInstallationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AppsUpdateWebhookConfigForAppReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	if s.InsecureSsl != nil {
		more.More()
		e.ObjField("insecure_ssl")
		s.InsecureSsl.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads AppsUpdateWebhookConfigForAppReq from json stream.
func (s *AppsUpdateWebhookConfigForAppReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AppsUpdateWebhookConfigForAppReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		case "insecure_ssl":
			s.InsecureSsl = nil
			var elem WebhookConfigInsecureSsl
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.InsecureSsl = &elem
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Artifact) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("size_in_bytes")
	e.Int(s.SizeInBytes)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("archive_download_url")
	e.Str(s.ArchiveDownloadURL)
	more.More()
	e.ObjField("expired")
	e.Bool(s.Expired)
	more.More()
	e.ObjField("created_at")
	s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("expires_at")
	s.ExpiresAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("updated_at")
	s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	e.ObjEnd()
}

// ReadJSON reads Artifact from json stream.
func (s *Artifact) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Artifact to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "size_in_bytes":
			v, err := d.Int()
			s.SizeInBytes = int(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "archive_download_url":
			v, err := d.Str()
			s.ArchiveDownloadURL = string(v)
			if err != nil {
				return err
			}
		case "expired":
			v, err := d.Bool()
			s.Expired = bool(v)
			if err != nil {
				return err
			}
		case "created_at":
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "expires_at":
			if err := s.ExpiresAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AuditLogEvent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Timestamp.Set {
		more.More()
		e.ObjField("@timestamp")
		s.Timestamp.WriteJSON(e)
	}
	if s.Action.Set {
		more.More()
		e.ObjField("action")
		s.Action.WriteJSON(e)
	}
	if s.Active.Set {
		more.More()
		e.ObjField("active")
		s.Active.WriteJSON(e)
	}
	if s.ActiveWas.Set {
		more.More()
		e.ObjField("active_was")
		s.ActiveWas.WriteJSON(e)
	}
	if s.Actor.Set {
		more.More()
		e.ObjField("actor")
		s.Actor.WriteJSON(e)
	}
	if s.ActorID.Set {
		more.More()
		e.ObjField("actor_id")
		s.ActorID.WriteJSON(e)
	}
	if s.ActorLocation.Set {
		more.More()
		e.ObjField("actor_location")
		s.ActorLocation.WriteJSON(e)
	}
	if s.Data != nil {
		more.More()
		e.ObjField("data")
		s.Data.WriteJSON(e)
	}
	if s.OrgID.Set {
		more.More()
		e.ObjField("org_id")
		s.OrgID.WriteJSON(e)
	}
	if s.BlockedUser.Set {
		more.More()
		e.ObjField("blocked_user")
		s.BlockedUser.WriteJSON(e)
	}
	if s.Business.Set {
		more.More()
		e.ObjField("business")
		s.Business.WriteJSON(e)
	}
	if s.Config != nil {
		more.More()
		e.ObjField("config")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Config {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.ConfigWas != nil {
		more.More()
		e.ObjField("config_was")
		more.Down()
		e.ArrStart()
		for _, elem := range s.ConfigWas {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e)
	}
	if s.DeployKeyFingerprint.Set {
		more.More()
		e.ObjField("deploy_key_fingerprint")
		s.DeployKeyFingerprint.WriteJSON(e)
	}
	if s.DocumentID.Set {
		more.More()
		e.ObjField("_document_id")
		s.DocumentID.WriteJSON(e)
	}
	if s.Emoji.Set {
		more.More()
		e.ObjField("emoji")
		s.Emoji.WriteJSON(e)
	}
	if s.Events != nil {
		more.More()
		e.ObjField("events")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Events {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.EventsWere != nil {
		more.More()
		e.ObjField("events_were")
		more.Down()
		e.ArrStart()
		for _, elem := range s.EventsWere {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Explanation.Set {
		more.More()
		e.ObjField("explanation")
		s.Explanation.WriteJSON(e)
	}
	if s.Fingerprint.Set {
		more.More()
		e.ObjField("fingerprint")
		s.Fingerprint.WriteJSON(e)
	}
	if s.HookID.Set {
		more.More()
		e.ObjField("hook_id")
		s.HookID.WriteJSON(e)
	}
	if s.LimitedAvailability.Set {
		more.More()
		e.ObjField("limited_availability")
		s.LimitedAvailability.WriteJSON(e)
	}
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.OldUser.Set {
		more.More()
		e.ObjField("old_user")
		s.OldUser.WriteJSON(e)
	}
	if s.OpensshPublicKey.Set {
		more.More()
		e.ObjField("openssh_public_key")
		s.OpensshPublicKey.WriteJSON(e)
	}
	if s.Org.Set {
		more.More()
		e.ObjField("org")
		s.Org.WriteJSON(e)
	}
	if s.PreviousVisibility.Set {
		more.More()
		e.ObjField("previous_visibility")
		s.PreviousVisibility.WriteJSON(e)
	}
	if s.ReadOnly.Set {
		more.More()
		e.ObjField("read_only")
		s.ReadOnly.WriteJSON(e)
	}
	if s.Repo.Set {
		more.More()
		e.ObjField("repo")
		s.Repo.WriteJSON(e)
	}
	if s.Repository.Set {
		more.More()
		e.ObjField("repository")
		s.Repository.WriteJSON(e)
	}
	if s.RepositoryPublic.Set {
		more.More()
		e.ObjField("repository_public")
		s.RepositoryPublic.WriteJSON(e)
	}
	if s.TargetLogin.Set {
		more.More()
		e.ObjField("target_login")
		s.TargetLogin.WriteJSON(e)
	}
	if s.Team.Set {
		more.More()
		e.ObjField("team")
		s.Team.WriteJSON(e)
	}
	if s.TransportProtocol.Set {
		more.More()
		e.ObjField("transport_protocol")
		s.TransportProtocol.WriteJSON(e)
	}
	if s.TransportProtocolName.Set {
		more.More()
		e.ObjField("transport_protocol_name")
		s.TransportProtocolName.WriteJSON(e)
	}
	if s.User.Set {
		more.More()
		e.ObjField("user")
		s.User.WriteJSON(e)
	}
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads AuditLogEvent from json stream.
func (s *AuditLogEvent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AuditLogEvent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "@timestamp":
			s.Timestamp.Reset()
			if err := s.Timestamp.ReadJSON(d); err != nil {
				return err
			}
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(d); err != nil {
				return err
			}
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(d); err != nil {
				return err
			}
		case "active_was":
			s.ActiveWas.Reset()
			if err := s.ActiveWas.ReadJSON(d); err != nil {
				return err
			}
		case "actor":
			s.Actor.Reset()
			if err := s.Actor.ReadJSON(d); err != nil {
				return err
			}
		case "actor_id":
			s.ActorID.Reset()
			if err := s.ActorID.ReadJSON(d); err != nil {
				return err
			}
		case "actor_location":
			s.ActorLocation.Reset()
			if err := s.ActorLocation.ReadJSON(d); err != nil {
				return err
			}
		case "data":
			s.Data = nil
			var elem AuditLogEventData
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.Data = &elem
		case "org_id":
			s.OrgID.Reset()
			if err := s.OrgID.ReadJSON(d); err != nil {
				return err
			}
		case "blocked_user":
			s.BlockedUser.Reset()
			if err := s.BlockedUser.ReadJSON(d); err != nil {
				return err
			}
		case "business":
			s.Business.Reset()
			if err := s.Business.ReadJSON(d); err != nil {
				return err
			}
		case "config":
			s.Config = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Config = append(s.Config, elem)
				return nil
			}); err != nil {
				return err
			}
		case "config_was":
			s.ConfigWas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ConfigWas = append(s.ConfigWas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "deploy_key_fingerprint":
			s.DeployKeyFingerprint.Reset()
			if err := s.DeployKeyFingerprint.ReadJSON(d); err != nil {
				return err
			}
		case "_document_id":
			s.DocumentID.Reset()
			if err := s.DocumentID.ReadJSON(d); err != nil {
				return err
			}
		case "emoji":
			s.Emoji.Reset()
			if err := s.Emoji.ReadJSON(d); err != nil {
				return err
			}
		case "events":
			s.Events = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Events = append(s.Events, elem)
				return nil
			}); err != nil {
				return err
			}
		case "events_were":
			s.EventsWere = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.EventsWere = append(s.EventsWere, elem)
				return nil
			}); err != nil {
				return err
			}
		case "explanation":
			s.Explanation.Reset()
			if err := s.Explanation.ReadJSON(d); err != nil {
				return err
			}
		case "fingerprint":
			s.Fingerprint.Reset()
			if err := s.Fingerprint.ReadJSON(d); err != nil {
				return err
			}
		case "hook_id":
			s.HookID.Reset()
			if err := s.HookID.ReadJSON(d); err != nil {
				return err
			}
		case "limited_availability":
			s.LimitedAvailability.Reset()
			if err := s.LimitedAvailability.ReadJSON(d); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "old_user":
			s.OldUser.Reset()
			if err := s.OldUser.ReadJSON(d); err != nil {
				return err
			}
		case "openssh_public_key":
			s.OpensshPublicKey.Reset()
			if err := s.OpensshPublicKey.ReadJSON(d); err != nil {
				return err
			}
		case "org":
			s.Org.Reset()
			if err := s.Org.ReadJSON(d); err != nil {
				return err
			}
		case "previous_visibility":
			s.PreviousVisibility.Reset()
			if err := s.PreviousVisibility.ReadJSON(d); err != nil {
				return err
			}
		case "read_only":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(d); err != nil {
				return err
			}
		case "repo":
			s.Repo.Reset()
			if err := s.Repo.ReadJSON(d); err != nil {
				return err
			}
		case "repository":
			s.Repository.Reset()
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "repository_public":
			s.RepositoryPublic.Reset()
			if err := s.RepositoryPublic.ReadJSON(d); err != nil {
				return err
			}
		case "target_login":
			s.TargetLogin.Reset()
			if err := s.TargetLogin.ReadJSON(d); err != nil {
				return err
			}
		case "team":
			s.Team.Reset()
			if err := s.Team.ReadJSON(d); err != nil {
				return err
			}
		case "transport_protocol":
			s.TransportProtocol.Reset()
			if err := s.TransportProtocol.ReadJSON(d); err != nil {
				return err
			}
		case "transport_protocol_name":
			s.TransportProtocolName.Reset()
			if err := s.TransportProtocolName.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AuditLogEventActorLocation) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.CountryName.Set {
		more.More()
		e.ObjField("country_name")
		s.CountryName.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads AuditLogEventActorLocation from json stream.
func (s *AuditLogEventActorLocation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AuditLogEventActorLocation to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "country_name":
			s.CountryName.Reset()
			if err := s.CountryName.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AuditLogEventData) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AuditLogEventData from json stream.
func (s *AuditLogEventData) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AuditLogEventData to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AuthenticationToken) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("token")
	e.Str(s.Token)
	more.More()
	e.ObjField("expires_at")
	json.WriteDateTime(e, s.ExpiresAt)
	if s.Permissions != nil {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.Repositories != nil {
		more.More()
		e.ObjField("repositories")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Repositories {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.SingleFile.Set {
		more.More()
		e.ObjField("single_file")
		s.SingleFile.WriteJSON(e)
	}
	if s.RepositorySelection.Set {
		more.More()
		e.ObjField("repository_selection")
		s.RepositorySelection.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads AuthenticationToken from json stream.
func (s *AuthenticationToken) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AuthenticationToken to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			v, err := d.Str()
			s.Token = string(v)
			if err != nil {
				return err
			}
		case "expires_at":
			v, err := json.ReadDateTime(d)
			s.ExpiresAt = v
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions = nil
			var elem AuthenticationTokenPermissions
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.Permissions = &elem
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Repository
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "single_file":
			s.SingleFile.Reset()
			if err := s.SingleFile.ReadJSON(d); err != nil {
				return err
			}
		case "repository_selection":
			s.RepositorySelection.Reset()
			if err := s.RepositorySelection.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AuthenticationTokenPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads AuthenticationTokenPermissions from json stream.
func (s *AuthenticationTokenPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AuthenticationTokenPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AuthenticationTokenRepositorySelection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AuthenticationTokenRepositorySelection from json reader.
func (s *AuthenticationTokenRepositorySelection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AuthenticationTokenRepositorySelection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AuthenticationTokenRepositorySelection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s AuthorAssociation) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AuthorAssociation from json reader.
func (s *AuthorAssociation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AuthorAssociation to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AuthorAssociation(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Authorization) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("scopes")
	if s.Scopes == nil {
		e.Null()
	} else {
		more.Down()
		e.ArrStart()
		for _, elem := range s.Scopes {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("token")
	e.Str(s.Token)
	more.More()
	e.ObjField("token_last_eight")
	s.TokenLastEight.WriteJSON(e)
	more.More()
	e.ObjField("hashed_token")
	s.HashedToken.WriteJSON(e)
	more.More()
	e.ObjField("app")
	s.App.WriteJSON(e)
	more.More()
	e.ObjField("note")
	s.Note.WriteJSON(e)
	more.More()
	e.ObjField("note_url")
	s.NoteURL.WriteJSON(e)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("fingerprint")
	s.Fingerprint.WriteJSON(e)
	if s.User.Set {
		more.More()
		e.ObjField("user")
		s.User.WriteJSON(e)
	}
	if s.Installation.Set {
		more.More()
		e.ObjField("installation")
		s.Installation.WriteJSON(e)
	}
	more.More()
	e.ObjField("expires_at")
	s.ExpiresAt.WriteJSON(e, json.WriteDateTime)
	e.ObjEnd()
}

// ReadJSON reads Authorization from json stream.
func (s *Authorization) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Authorization to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "scopes":
			s.Scopes = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Scopes = append(s.Scopes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "token":
			v, err := d.Str()
			s.Token = string(v)
			if err != nil {
				return err
			}
		case "token_last_eight":
			if err := s.TokenLastEight.ReadJSON(d); err != nil {
				return err
			}
		case "hashed_token":
			if err := s.HashedToken.ReadJSON(d); err != nil {
				return err
			}
		case "app":
			if err := s.App.ReadJSON(d); err != nil {
				return err
			}
		case "note":
			if err := s.Note.ReadJSON(d); err != nil {
				return err
			}
		case "note_url":
			if err := s.NoteURL.ReadJSON(d); err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "fingerprint":
			if err := s.Fingerprint.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "installation":
			s.Installation.Reset()
			if err := s.Installation.ReadJSON(d); err != nil {
				return err
			}
		case "expires_at":
			if err := s.ExpiresAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AuthorizationApp) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("client_id")
	e.Str(s.ClientID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads AuthorizationApp from json stream.
func (s *AuthorizationApp) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AuthorizationApp to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "client_id":
			v, err := d.Str()
			s.ClientID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AutoMerge) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("enabled_by")
	s.EnabledBy.WriteJSON(e)
	more.More()
	e.ObjField("merge_method")
	s.MergeMethod.WriteJSON(e)
	more.More()
	e.ObjField("commit_title")
	e.Str(s.CommitTitle)
	more.More()
	e.ObjField("commit_message")
	e.Str(s.CommitMessage)
	e.ObjEnd()
}

// ReadJSON reads AutoMerge from json stream.
func (s *AutoMerge) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AutoMerge to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled_by":
			if err := s.EnabledBy.ReadJSON(d); err != nil {
				return err
			}
		case "merge_method":
			if err := s.MergeMethod.ReadJSON(d); err != nil {
				return err
			}
		case "commit_title":
			v, err := d.Str()
			s.CommitTitle = string(v)
			if err != nil {
				return err
			}
		case "commit_message":
			v, err := d.Str()
			s.CommitMessage = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AutoMergeMergeMethod) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads AutoMergeMergeMethod from json reader.
func (s *AutoMergeMergeMethod) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AutoMergeMergeMethod to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = AutoMergeMergeMethod(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Autolink) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("key_prefix")
	e.Str(s.KeyPrefix)
	more.More()
	e.ObjField("url_template")
	e.Str(s.URLTemplate)
	e.ObjEnd()
}

// ReadJSON reads Autolink from json stream.
func (s *Autolink) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Autolink to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "key_prefix":
			v, err := d.Str()
			s.KeyPrefix = string(v)
			if err != nil {
				return err
			}
		case "url_template":
			v, err := d.Str()
			s.URLTemplate = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BaseGist) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("commits_url")
	json.WriteURI(e, s.CommitsURL)
	more.More()
	e.ObjField("id")
	e.Str(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("git_pull_url")
	json.WriteURI(e, s.GitPullURL)
	more.More()
	e.ObjField("git_push_url")
	json.WriteURI(e, s.GitPushURL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("files")
	s.Files.WriteJSON(e)
	more.More()
	e.ObjField("public")
	e.Bool(s.Public)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("comments")
	e.Int(s.Comments)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("comments_url")
	json.WriteURI(e, s.CommentsURL)
	if s.Owner.Set {
		more.More()
		e.ObjField("owner")
		s.Owner.WriteJSON(e)
	}
	if s.Truncated.Set {
		more.More()
		e.ObjField("truncated")
		s.Truncated.WriteJSON(e)
	}
	if s.Forks != nil {
		more.More()
		e.ObjField("forks")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Forks {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.History != nil {
		more.More()
		e.ObjField("history")
		more.Down()
		e.ArrStart()
		for _, elem := range s.History {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads BaseGist from json stream.
func (s *BaseGist) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BaseGist to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := json.ReadURI(d)
			s.CommitsURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "git_pull_url":
			v, err := json.ReadURI(d)
			s.GitPullURL = v
			if err != nil {
				return err
			}
		case "git_push_url":
			v, err := json.ReadURI(d)
			s.GitPushURL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "files":
			if err := s.Files.ReadJSON(d); err != nil {
				return err
			}
		case "public":
			v, err := d.Bool()
			s.Public = bool(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "comments":
			v, err := d.Int()
			s.Comments = int(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "comments_url":
			v, err := json.ReadURI(d)
			s.CommentsURL = v
			if err != nil {
				return err
			}
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "truncated":
			s.Truncated.Reset()
			if err := s.Truncated.ReadJSON(d); err != nil {
				return err
			}
		case "forks":
			s.Forks = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Forks = append(s.Forks, elem)
				return nil
			}); err != nil {
				return err
			}
		case "history":
			s.History = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.History = append(s.History, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BaseGistFiles) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads BaseGistFiles from json stream.
func (s *BaseGistFiles) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BaseGistFiles to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BasicError) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.Status.Set {
		more.More()
		e.ObjField("status")
		s.Status.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BasicError from json stream.
func (s *BasicError) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BasicError to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Blob) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	e.Str(s.Content)
	more.More()
	e.ObjField("encoding")
	e.Str(s.Encoding)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("size")
	s.Size.WriteJSON(e)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	if s.HighlightedContent.Set {
		more.More()
		e.ObjField("highlighted_content")
		s.HighlightedContent.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Blob from json stream.
func (s *Blob) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Blob to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			v, err := d.Str()
			s.Content = string(v)
			if err != nil {
				return err
			}
		case "encoding":
			v, err := d.Str()
			s.Encoding = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "size":
			if err := s.Size.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "highlighted_content":
			s.HighlightedContent.Reset()
			if err := s.HighlightedContent.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchProtection) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.Enabled.Set {
		more.More()
		e.ObjField("enabled")
		s.Enabled.WriteJSON(e)
	}
	if s.RequiredStatusChecks.Set {
		more.More()
		e.ObjField("required_status_checks")
		s.RequiredStatusChecks.WriteJSON(e)
	}
	if s.EnforceAdmins.Set {
		more.More()
		e.ObjField("enforce_admins")
		s.EnforceAdmins.WriteJSON(e)
	}
	if s.RequiredPullRequestReviews.Set {
		more.More()
		e.ObjField("required_pull_request_reviews")
		s.RequiredPullRequestReviews.WriteJSON(e)
	}
	if s.Restrictions.Set {
		more.More()
		e.ObjField("restrictions")
		s.Restrictions.WriteJSON(e)
	}
	if s.RequiredLinearHistory.Set {
		more.More()
		e.ObjField("required_linear_history")
		s.RequiredLinearHistory.WriteJSON(e)
	}
	if s.AllowForcePushes.Set {
		more.More()
		e.ObjField("allow_force_pushes")
		s.AllowForcePushes.WriteJSON(e)
	}
	if s.AllowDeletions.Set {
		more.More()
		e.ObjField("allow_deletions")
		s.AllowDeletions.WriteJSON(e)
	}
	if s.RequiredConversationResolution.Set {
		more.More()
		e.ObjField("required_conversation_resolution")
		s.RequiredConversationResolution.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.ProtectionURL.Set {
		more.More()
		e.ObjField("protection_url")
		s.ProtectionURL.WriteJSON(e)
	}
	if s.RequiredSignatures.Set {
		more.More()
		e.ObjField("required_signatures")
		s.RequiredSignatures.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchProtection from json stream.
func (s *BranchProtection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchProtection to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(d); err != nil {
				return err
			}
		case "required_status_checks":
			s.RequiredStatusChecks.Reset()
			if err := s.RequiredStatusChecks.ReadJSON(d); err != nil {
				return err
			}
		case "enforce_admins":
			s.EnforceAdmins.Reset()
			if err := s.EnforceAdmins.ReadJSON(d); err != nil {
				return err
			}
		case "required_pull_request_reviews":
			s.RequiredPullRequestReviews.Reset()
			if err := s.RequiredPullRequestReviews.ReadJSON(d); err != nil {
				return err
			}
		case "restrictions":
			s.Restrictions.Reset()
			if err := s.Restrictions.ReadJSON(d); err != nil {
				return err
			}
		case "required_linear_history":
			s.RequiredLinearHistory.Reset()
			if err := s.RequiredLinearHistory.ReadJSON(d); err != nil {
				return err
			}
		case "allow_force_pushes":
			s.AllowForcePushes.Reset()
			if err := s.AllowForcePushes.ReadJSON(d); err != nil {
				return err
			}
		case "allow_deletions":
			s.AllowDeletions.Reset()
			if err := s.AllowDeletions.ReadJSON(d); err != nil {
				return err
			}
		case "required_conversation_resolution":
			s.RequiredConversationResolution.Reset()
			if err := s.RequiredConversationResolution.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "protection_url":
			s.ProtectionURL.Reset()
			if err := s.ProtectionURL.ReadJSON(d); err != nil {
				return err
			}
		case "required_signatures":
			s.RequiredSignatures.Reset()
			if err := s.RequiredSignatures.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionAllowDeletions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Enabled.Set {
		more.More()
		e.ObjField("enabled")
		s.Enabled.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchProtectionAllowDeletions from json stream.
func (s *BranchProtectionAllowDeletions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchProtectionAllowDeletions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionAllowForcePushes) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Enabled.Set {
		more.More()
		e.ObjField("enabled")
		s.Enabled.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchProtectionAllowForcePushes from json stream.
func (s *BranchProtectionAllowForcePushes) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchProtectionAllowForcePushes to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionRequiredConversationResolution) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Enabled.Set {
		more.More()
		e.ObjField("enabled")
		s.Enabled.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchProtectionRequiredConversationResolution from json stream.
func (s *BranchProtectionRequiredConversationResolution) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchProtectionRequiredConversationResolution to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionRequiredLinearHistory) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Enabled.Set {
		more.More()
		e.ObjField("enabled")
		s.Enabled.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchProtectionRequiredLinearHistory from json stream.
func (s *BranchProtectionRequiredLinearHistory) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchProtectionRequiredLinearHistory to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionRequiredSignatures) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("enabled")
	e.Bool(s.Enabled)
	e.ObjEnd()
}

// ReadJSON reads BranchProtectionRequiredSignatures from json stream.
func (s *BranchProtectionRequiredSignatures) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchProtectionRequiredSignatures to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "enabled":
			v, err := d.Bool()
			s.Enabled = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionRequiredStatusChecks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.EnforcementLevel.Set {
		more.More()
		e.ObjField("enforcement_level")
		s.EnforcementLevel.WriteJSON(e)
	}
	more.More()
	e.ObjField("contexts")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Contexts {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	if s.ContextsURL.Set {
		more.More()
		e.ObjField("contexts_url")
		s.ContextsURL.WriteJSON(e)
	}
	if s.Strict.Set {
		more.More()
		e.ObjField("strict")
		s.Strict.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchProtectionRequiredStatusChecks from json stream.
func (s *BranchProtectionRequiredStatusChecks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchProtectionRequiredStatusChecks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "enforcement_level":
			s.EnforcementLevel.Reset()
			if err := s.EnforcementLevel.ReadJSON(d); err != nil {
				return err
			}
		case "contexts":
			s.Contexts = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Contexts = append(s.Contexts, elem)
				return nil
			}); err != nil {
				return err
			}
		case "contexts_url":
			s.ContextsURL.Reset()
			if err := s.ContextsURL.ReadJSON(d); err != nil {
				return err
			}
		case "strict":
			s.Strict.Reset()
			if err := s.Strict.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicy) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("users_url")
	json.WriteURI(e, s.UsersURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("apps_url")
	json.WriteURI(e, s.AppsURL)
	more.More()
	e.ObjField("users")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Users {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("teams")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Teams {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("apps")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Apps {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads BranchRestrictionPolicy from json stream.
func (s *BranchRestrictionPolicy) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchRestrictionPolicy to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "users_url":
			v, err := json.ReadURI(d)
			s.UsersURL = v
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "apps_url":
			v, err := json.ReadURI(d)
			s.AppsURL = v
			if err != nil {
				return err
			}
		case "users":
			s.Users = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem BranchRestrictionPolicyUsersItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Users = append(s.Users, elem)
				return nil
			}); err != nil {
				return err
			}
		case "teams":
			s.Teams = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem BranchRestrictionPolicyTeamsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Teams = append(s.Teams, elem)
				return nil
			}); err != nil {
				return err
			}
		case "apps":
			s.Apps = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem BranchRestrictionPolicyAppsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Apps = append(s.Apps, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicyAppsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.Slug.Set {
		more.More()
		e.ObjField("slug")
		s.Slug.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.Owner.Set {
		more.More()
		e.ObjField("owner")
		s.Owner.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.ExternalURL.Set {
		more.More()
		e.ObjField("external_url")
		s.ExternalURL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e)
	}
	if s.UpdatedAt.Set {
		more.More()
		e.ObjField("updated_at")
		s.UpdatedAt.WriteJSON(e)
	}
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.Events != nil {
		more.More()
		e.ObjField("events")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Events {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads BranchRestrictionPolicyAppsItem from json stream.
func (s *BranchRestrictionPolicyAppsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchRestrictionPolicyAppsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "slug":
			s.Slug.Reset()
			if err := s.Slug.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "external_url":
			s.ExternalURL.Reset()
			if err := s.ExternalURL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "events":
			s.Events = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Events = append(s.Events, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicyAppsItemOwner) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Login.Set {
		more.More()
		e.ObjField("login")
		s.Login.WriteJSON(e)
	}
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.ReposURL.Set {
		more.More()
		e.ObjField("repos_url")
		s.ReposURL.WriteJSON(e)
	}
	if s.EventsURL.Set {
		more.More()
		e.ObjField("events_url")
		s.EventsURL.WriteJSON(e)
	}
	if s.HooksURL.Set {
		more.More()
		e.ObjField("hooks_url")
		s.HooksURL.WriteJSON(e)
	}
	if s.IssuesURL.Set {
		more.More()
		e.ObjField("issues_url")
		s.IssuesURL.WriteJSON(e)
	}
	if s.MembersURL.Set {
		more.More()
		e.ObjField("members_url")
		s.MembersURL.WriteJSON(e)
	}
	if s.PublicMembersURL.Set {
		more.More()
		e.ObjField("public_members_url")
		s.PublicMembersURL.WriteJSON(e)
	}
	if s.AvatarURL.Set {
		more.More()
		e.ObjField("avatar_url")
		s.AvatarURL.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.GravatarID.Set {
		more.More()
		e.ObjField("gravatar_id")
		s.GravatarID.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.FollowersURL.Set {
		more.More()
		e.ObjField("followers_url")
		s.FollowersURL.WriteJSON(e)
	}
	if s.FollowingURL.Set {
		more.More()
		e.ObjField("following_url")
		s.FollowingURL.WriteJSON(e)
	}
	if s.GistsURL.Set {
		more.More()
		e.ObjField("gists_url")
		s.GistsURL.WriteJSON(e)
	}
	if s.StarredURL.Set {
		more.More()
		e.ObjField("starred_url")
		s.StarredURL.WriteJSON(e)
	}
	if s.SubscriptionsURL.Set {
		more.More()
		e.ObjField("subscriptions_url")
		s.SubscriptionsURL.WriteJSON(e)
	}
	if s.OrganizationsURL.Set {
		more.More()
		e.ObjField("organizations_url")
		s.OrganizationsURL.WriteJSON(e)
	}
	if s.ReceivedEventsURL.Set {
		more.More()
		e.ObjField("received_events_url")
		s.ReceivedEventsURL.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	if s.SiteAdmin.Set {
		more.More()
		e.ObjField("site_admin")
		s.SiteAdmin.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchRestrictionPolicyAppsItemOwner from json stream.
func (s *BranchRestrictionPolicyAppsItemOwner) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchRestrictionPolicyAppsItemOwner to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			s.Login.Reset()
			if err := s.Login.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "repos_url":
			s.ReposURL.Reset()
			if err := s.ReposURL.ReadJSON(d); err != nil {
				return err
			}
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "hooks_url":
			s.HooksURL.Reset()
			if err := s.HooksURL.ReadJSON(d); err != nil {
				return err
			}
		case "issues_url":
			s.IssuesURL.Reset()
			if err := s.IssuesURL.ReadJSON(d); err != nil {
				return err
			}
		case "members_url":
			s.MembersURL.Reset()
			if err := s.MembersURL.ReadJSON(d); err != nil {
				return err
			}
		case "public_members_url":
			s.PublicMembersURL.Reset()
			if err := s.PublicMembersURL.ReadJSON(d); err != nil {
				return err
			}
		case "avatar_url":
			s.AvatarURL.Reset()
			if err := s.AvatarURL.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "gravatar_id":
			s.GravatarID.Reset()
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "followers_url":
			s.FollowersURL.Reset()
			if err := s.FollowersURL.ReadJSON(d); err != nil {
				return err
			}
		case "following_url":
			s.FollowingURL.Reset()
			if err := s.FollowingURL.ReadJSON(d); err != nil {
				return err
			}
		case "gists_url":
			s.GistsURL.Reset()
			if err := s.GistsURL.ReadJSON(d); err != nil {
				return err
			}
		case "starred_url":
			s.StarredURL.Reset()
			if err := s.StarredURL.ReadJSON(d); err != nil {
				return err
			}
		case "subscriptions_url":
			s.SubscriptionsURL.Reset()
			if err := s.SubscriptionsURL.ReadJSON(d); err != nil {
				return err
			}
		case "organizations_url":
			s.OrganizationsURL.Reset()
			if err := s.OrganizationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "received_events_url":
			s.ReceivedEventsURL.Reset()
			if err := s.ReceivedEventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "site_admin":
			s.SiteAdmin.Reset()
			if err := s.SiteAdmin.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicyAppsItemPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		e.ObjField("metadata")
		s.Metadata.WriteJSON(e)
	}
	if s.Contents.Set {
		more.More()
		e.ObjField("contents")
		s.Contents.WriteJSON(e)
	}
	if s.Issues.Set {
		more.More()
		e.ObjField("issues")
		s.Issues.WriteJSON(e)
	}
	if s.SingleFile.Set {
		more.More()
		e.ObjField("single_file")
		s.SingleFile.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchRestrictionPolicyAppsItemPermissions from json stream.
func (s *BranchRestrictionPolicyAppsItemPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchRestrictionPolicyAppsItemPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(d); err != nil {
				return err
			}
		case "contents":
			s.Contents.Reset()
			if err := s.Contents.ReadJSON(d); err != nil {
				return err
			}
		case "issues":
			s.Issues.Reset()
			if err := s.Issues.ReadJSON(d); err != nil {
				return err
			}
		case "single_file":
			s.SingleFile.Reset()
			if err := s.SingleFile.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicyTeamsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Slug.Set {
		more.More()
		e.ObjField("slug")
		s.Slug.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Privacy.Set {
		more.More()
		e.ObjField("privacy")
		s.Privacy.WriteJSON(e)
	}
	if s.Permission.Set {
		more.More()
		e.ObjField("permission")
		s.Permission.WriteJSON(e)
	}
	if s.MembersURL.Set {
		more.More()
		e.ObjField("members_url")
		s.MembersURL.WriteJSON(e)
	}
	if s.RepositoriesURL.Set {
		more.More()
		e.ObjField("repositories_url")
		s.RepositoriesURL.WriteJSON(e)
	}
	if s.Parent.Set {
		more.More()
		e.ObjField("parent")
		s.Parent.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchRestrictionPolicyTeamsItem from json stream.
func (s *BranchRestrictionPolicyTeamsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchRestrictionPolicyTeamsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "slug":
			s.Slug.Reset()
			if err := s.Slug.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(d); err != nil {
				return err
			}
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(d); err != nil {
				return err
			}
		case "members_url":
			s.MembersURL.Reset()
			if err := s.MembersURL.ReadJSON(d); err != nil {
				return err
			}
		case "repositories_url":
			s.RepositoriesURL.Reset()
			if err := s.RepositoriesURL.ReadJSON(d); err != nil {
				return err
			}
		case "parent":
			s.Parent.Reset()
			if err := s.Parent.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicyUsersItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Login.Set {
		more.More()
		e.ObjField("login")
		s.Login.WriteJSON(e)
	}
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.AvatarURL.Set {
		more.More()
		e.ObjField("avatar_url")
		s.AvatarURL.WriteJSON(e)
	}
	if s.GravatarID.Set {
		more.More()
		e.ObjField("gravatar_id")
		s.GravatarID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.FollowersURL.Set {
		more.More()
		e.ObjField("followers_url")
		s.FollowersURL.WriteJSON(e)
	}
	if s.FollowingURL.Set {
		more.More()
		e.ObjField("following_url")
		s.FollowingURL.WriteJSON(e)
	}
	if s.GistsURL.Set {
		more.More()
		e.ObjField("gists_url")
		s.GistsURL.WriteJSON(e)
	}
	if s.StarredURL.Set {
		more.More()
		e.ObjField("starred_url")
		s.StarredURL.WriteJSON(e)
	}
	if s.SubscriptionsURL.Set {
		more.More()
		e.ObjField("subscriptions_url")
		s.SubscriptionsURL.WriteJSON(e)
	}
	if s.OrganizationsURL.Set {
		more.More()
		e.ObjField("organizations_url")
		s.OrganizationsURL.WriteJSON(e)
	}
	if s.ReposURL.Set {
		more.More()
		e.ObjField("repos_url")
		s.ReposURL.WriteJSON(e)
	}
	if s.EventsURL.Set {
		more.More()
		e.ObjField("events_url")
		s.EventsURL.WriteJSON(e)
	}
	if s.ReceivedEventsURL.Set {
		more.More()
		e.ObjField("received_events_url")
		s.ReceivedEventsURL.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	if s.SiteAdmin.Set {
		more.More()
		e.ObjField("site_admin")
		s.SiteAdmin.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchRestrictionPolicyUsersItem from json stream.
func (s *BranchRestrictionPolicyUsersItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchRestrictionPolicyUsersItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			s.Login.Reset()
			if err := s.Login.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "avatar_url":
			s.AvatarURL.Reset()
			if err := s.AvatarURL.ReadJSON(d); err != nil {
				return err
			}
		case "gravatar_id":
			s.GravatarID.Reset()
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "followers_url":
			s.FollowersURL.Reset()
			if err := s.FollowersURL.ReadJSON(d); err != nil {
				return err
			}
		case "following_url":
			s.FollowingURL.Reset()
			if err := s.FollowingURL.ReadJSON(d); err != nil {
				return err
			}
		case "gists_url":
			s.GistsURL.Reset()
			if err := s.GistsURL.ReadJSON(d); err != nil {
				return err
			}
		case "starred_url":
			s.StarredURL.Reset()
			if err := s.StarredURL.ReadJSON(d); err != nil {
				return err
			}
		case "subscriptions_url":
			s.SubscriptionsURL.Reset()
			if err := s.SubscriptionsURL.ReadJSON(d); err != nil {
				return err
			}
		case "organizations_url":
			s.OrganizationsURL.Reset()
			if err := s.OrganizationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "repos_url":
			s.ReposURL.Reset()
			if err := s.ReposURL.ReadJSON(d); err != nil {
				return err
			}
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "received_events_url":
			s.ReceivedEventsURL.Reset()
			if err := s.ReceivedEventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "site_admin":
			s.SiteAdmin.Reset()
			if err := s.SiteAdmin.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchShort) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("commit")
	s.Commit.WriteJSON(e)
	more.More()
	e.ObjField("protected")
	e.Bool(s.Protected)
	e.ObjEnd()
}

// ReadJSON reads BranchShort from json stream.
func (s *BranchShort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchShort to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "commit":
			if err := s.Commit.ReadJSON(d); err != nil {
				return err
			}
		case "protected":
			v, err := d.Bool()
			s.Protected = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchShortCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	e.ObjEnd()
}

// ReadJSON reads BranchShortCommit from json stream.
func (s *BranchShortCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchShortCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchWithProtection) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("commit")
	s.Commit.WriteJSON(e)
	more.More()
	e.ObjField("_links")
	s.Links.WriteJSON(e)
	more.More()
	e.ObjField("protected")
	e.Bool(s.Protected)
	more.More()
	e.ObjField("protection")
	s.Protection.WriteJSON(e)
	more.More()
	e.ObjField("protection_url")
	json.WriteURI(e, s.ProtectionURL)
	if s.Pattern.Set {
		more.More()
		e.ObjField("pattern")
		s.Pattern.WriteJSON(e)
	}
	if s.RequiredApprovingReviewCount.Set {
		more.More()
		e.ObjField("required_approving_review_count")
		s.RequiredApprovingReviewCount.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads BranchWithProtection from json stream.
func (s *BranchWithProtection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchWithProtection to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "commit":
			if err := s.Commit.ReadJSON(d); err != nil {
				return err
			}
		case "_links":
			if err := s.Links.ReadJSON(d); err != nil {
				return err
			}
		case "protected":
			v, err := d.Bool()
			s.Protected = bool(v)
			if err != nil {
				return err
			}
		case "protection":
			if err := s.Protection.ReadJSON(d); err != nil {
				return err
			}
		case "protection_url":
			v, err := json.ReadURI(d)
			s.ProtectionURL = v
			if err != nil {
				return err
			}
		case "pattern":
			s.Pattern.Reset()
			if err := s.Pattern.ReadJSON(d); err != nil {
				return err
			}
		case "required_approving_review_count":
			s.RequiredApprovingReviewCount.Reset()
			if err := s.RequiredApprovingReviewCount.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BranchWithProtectionLinks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("html")
	e.Str(s.HTML)
	more.More()
	e.ObjField("self")
	json.WriteURI(e, s.Self)
	e.ObjEnd()
}

// ReadJSON reads BranchWithProtectionLinks from json stream.
func (s *BranchWithProtectionLinks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BranchWithProtectionLinks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "html":
			v, err := d.Str()
			s.HTML = string(v)
			if err != nil {
				return err
			}
		case "self":
			v, err := json.ReadURI(d)
			s.Self = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CheckAnnotation) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	more.More()
	e.ObjField("start_line")
	e.Int(s.StartLine)
	more.More()
	e.ObjField("end_line")
	e.Int(s.EndLine)
	more.More()
	e.ObjField("start_column")
	s.StartColumn.WriteJSON(e)
	more.More()
	e.ObjField("end_column")
	s.EndColumn.WriteJSON(e)
	more.More()
	e.ObjField("annotation_level")
	s.AnnotationLevel.WriteJSON(e)
	more.More()
	e.ObjField("title")
	s.Title.WriteJSON(e)
	more.More()
	e.ObjField("message")
	s.Message.WriteJSON(e)
	more.More()
	e.ObjField("raw_details")
	s.RawDetails.WriteJSON(e)
	more.More()
	e.ObjField("blob_href")
	e.Str(s.BlobHref)
	e.ObjEnd()
}

// ReadJSON reads CheckAnnotation from json stream.
func (s *CheckAnnotation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckAnnotation to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "start_line":
			v, err := d.Int()
			s.StartLine = int(v)
			if err != nil {
				return err
			}
		case "end_line":
			v, err := d.Int()
			s.EndLine = int(v)
			if err != nil {
				return err
			}
		case "start_column":
			if err := s.StartColumn.ReadJSON(d); err != nil {
				return err
			}
		case "end_column":
			if err := s.EndColumn.ReadJSON(d); err != nil {
				return err
			}
		case "annotation_level":
			if err := s.AnnotationLevel.ReadJSON(d); err != nil {
				return err
			}
		case "title":
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "message":
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "raw_details":
			if err := s.RawDetails.ReadJSON(d); err != nil {
				return err
			}
		case "blob_href":
			v, err := d.Str()
			s.BlobHref = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CheckRun) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("head_sha")
	e.Str(s.HeadSha)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("external_id")
	s.ExternalID.WriteJSON(e)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("html_url")
	s.HTMLURL.WriteJSON(e)
	more.More()
	e.ObjField("details_url")
	s.DetailsURL.WriteJSON(e)
	more.More()
	e.ObjField("status")
	s.Status.WriteJSON(e)
	more.More()
	e.ObjField("conclusion")
	s.Conclusion.WriteJSON(e)
	more.More()
	e.ObjField("started_at")
	s.StartedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("completed_at")
	s.CompletedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("output")
	s.Output.WriteJSON(e)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("check_suite")
	s.CheckSuite.WriteJSON(e)
	more.More()
	e.ObjField("app")
	s.App.WriteJSON(e)
	more.More()
	e.ObjField("pull_requests")
	e.Str(s.PullRequests)
	if s.Deployment.Set {
		more.More()
		e.ObjField("deployment")
		s.Deployment.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CheckRun from json stream.
func (s *CheckRun) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckRun to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "head_sha":
			v, err := d.Str()
			s.HeadSha = string(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "external_id":
			if err := s.ExternalID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "details_url":
			if err := s.DetailsURL.ReadJSON(d); err != nil {
				return err
			}
		case "status":
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "conclusion":
			if err := s.Conclusion.ReadJSON(d); err != nil {
				return err
			}
		case "started_at":
			if err := s.StartedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "completed_at":
			if err := s.CompletedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "output":
			if err := s.Output.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "check_suite":
			if err := s.CheckSuite.ReadJSON(d); err != nil {
				return err
			}
		case "app":
			if err := s.App.ReadJSON(d); err != nil {
				return err
			}
		case "pull_requests":
			v, err := d.Str()
			s.PullRequests = string(v)
			if err != nil {
				return err
			}
		case "deployment":
			s.Deployment.Reset()
			if err := s.Deployment.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CheckRunCheckSuite) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	e.ObjEnd()
}

// ReadJSON reads CheckRunCheckSuite from json stream.
func (s *CheckRunCheckSuite) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckRunCheckSuite to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CheckRunConclusion) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CheckRunConclusion from json reader.
func (s *CheckRunConclusion) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckRunConclusion to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CheckRunConclusion(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CheckRunOutput) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("title")
	s.Title.WriteJSON(e)
	more.More()
	e.ObjField("summary")
	s.Summary.WriteJSON(e)
	more.More()
	e.ObjField("text")
	s.Text.WriteJSON(e)
	more.More()
	e.ObjField("annotations_count")
	e.Int(s.AnnotationsCount)
	more.More()
	e.ObjField("annotations_url")
	json.WriteURI(e, s.AnnotationsURL)
	e.ObjEnd()
}

// ReadJSON reads CheckRunOutput from json stream.
func (s *CheckRunOutput) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckRunOutput to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "summary":
			if err := s.Summary.ReadJSON(d); err != nil {
				return err
			}
		case "text":
			if err := s.Text.ReadJSON(d); err != nil {
				return err
			}
		case "annotations_count":
			v, err := d.Int()
			s.AnnotationsCount = int(v)
			if err != nil {
				return err
			}
		case "annotations_url":
			v, err := json.ReadURI(d)
			s.AnnotationsURL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CheckRunStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CheckRunStatus from json reader.
func (s *CheckRunStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckRunStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CheckRunStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CheckSuite) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("head_branch")
	s.HeadBranch.WriteJSON(e)
	more.More()
	e.ObjField("head_sha")
	e.Str(s.HeadSha)
	more.More()
	e.ObjField("status")
	s.Status.WriteJSON(e)
	more.More()
	e.ObjField("conclusion")
	s.Conclusion.WriteJSON(e)
	more.More()
	e.ObjField("url")
	s.URL.WriteJSON(e)
	more.More()
	e.ObjField("before")
	s.Before.WriteJSON(e)
	more.More()
	e.ObjField("after")
	s.After.WriteJSON(e)
	more.More()
	e.ObjField("pull_requests")
	if s.PullRequests == nil {
		e.Null()
	} else {
		more.Down()
		e.ArrStart()
		for _, elem := range s.PullRequests {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("app")
	s.App.WriteJSON(e)
	more.More()
	e.ObjField("repository")
	s.Repository.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("updated_at")
	s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("head_commit")
	s.HeadCommit.WriteJSON(e)
	more.More()
	e.ObjField("latest_check_runs_count")
	e.Int(s.LatestCheckRunsCount)
	more.More()
	e.ObjField("check_runs_url")
	e.Str(s.CheckRunsURL)
	e.ObjEnd()
}

// ReadJSON reads CheckSuite from json stream.
func (s *CheckSuite) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckSuite to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "head_branch":
			if err := s.HeadBranch.ReadJSON(d); err != nil {
				return err
			}
		case "head_sha":
			v, err := d.Str()
			s.HeadSha = string(v)
			if err != nil {
				return err
			}
		case "status":
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "conclusion":
			if err := s.Conclusion.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "before":
			if err := s.Before.ReadJSON(d); err != nil {
				return err
			}
		case "after":
			if err := s.After.ReadJSON(d); err != nil {
				return err
			}
		case "pull_requests":
			s.PullRequests = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem PullRequestMinimal
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.PullRequests = append(s.PullRequests, elem)
				return nil
			}); err != nil {
				return err
			}
		case "app":
			if err := s.App.ReadJSON(d); err != nil {
				return err
			}
		case "repository":
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "head_commit":
			if err := s.HeadCommit.ReadJSON(d); err != nil {
				return err
			}
		case "latest_check_runs_count":
			v, err := d.Int()
			s.LatestCheckRunsCount = int(v)
			if err != nil {
				return err
			}
		case "check_runs_url":
			v, err := d.Str()
			s.CheckRunsURL = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CheckSuiteConclusion) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CheckSuiteConclusion from json reader.
func (s *CheckSuiteConclusion) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckSuiteConclusion to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CheckSuiteConclusion(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CheckSuitePreference) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("preferences")
	s.Preferences.WriteJSON(e)
	more.More()
	e.ObjField("repository")
	s.Repository.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads CheckSuitePreference from json stream.
func (s *CheckSuitePreference) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckSuitePreference to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "preferences":
			if err := s.Preferences.ReadJSON(d); err != nil {
				return err
			}
		case "repository":
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CheckSuitePreferencePreferences) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.AutoTriggerChecks != nil {
		more.More()
		e.ObjField("auto_trigger_checks")
		more.Down()
		e.ArrStart()
		for _, elem := range s.AutoTriggerChecks {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads CheckSuitePreferencePreferences from json stream.
func (s *CheckSuitePreferencePreferences) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckSuitePreferencePreferences to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "auto_trigger_checks":
			s.AutoTriggerChecks = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem CheckSuitePreferencePreferencesAutoTriggerChecksItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.AutoTriggerChecks = append(s.AutoTriggerChecks, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CheckSuitePreferencePreferencesAutoTriggerChecksItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("app_id")
	e.Int(s.AppID)
	more.More()
	e.ObjField("setting")
	e.Bool(s.Setting)
	e.ObjEnd()
}

// ReadJSON reads CheckSuitePreferencePreferencesAutoTriggerChecksItem from json stream.
func (s *CheckSuitePreferencePreferencesAutoTriggerChecksItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckSuitePreferencePreferencesAutoTriggerChecksItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "app_id":
			v, err := d.Int()
			s.AppID = int(v)
			if err != nil {
				return err
			}
		case "setting":
			v, err := d.Bool()
			s.Setting = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CheckSuiteStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CheckSuiteStatus from json reader.
func (s *CheckSuiteStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CheckSuiteStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CheckSuiteStatus(v)
	return nil
}

func (ChecksCreateSuiteApplicationJSONCreated) WriteJSON(e *json.Encoder)      {}
func (ChecksCreateSuiteApplicationJSONCreated) ReadJSON(d *json.Decoder) error { return nil }

func (ChecksCreateSuiteApplicationJSONOK) WriteJSON(e *json.Encoder)      {}
func (ChecksCreateSuiteApplicationJSONOK) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ChecksCreateSuiteReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("head_sha")
	e.Str(s.HeadSha)
	e.ObjEnd()
}

// ReadJSON reads ChecksCreateSuiteReq from json stream.
func (s *ChecksCreateSuiteReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksCreateSuiteReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "head_sha":
			v, err := d.Str()
			s.HeadSha = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ChecksListForRefFilter) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ChecksListForRefFilter from json reader.
func (s *ChecksListForRefFilter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksListForRefFilter to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ChecksListForRefFilter(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ChecksListForRefOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("check_runs")
	more.Down()
	e.ArrStart()
	for _, elem := range s.CheckRuns {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ChecksListForRefOK from json stream.
func (s *ChecksListForRefOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksListForRefOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "check_runs":
			s.CheckRuns = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem CheckRun
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.CheckRuns = append(s.CheckRuns, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ChecksListForRefStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ChecksListForRefStatus from json reader.
func (s *ChecksListForRefStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksListForRefStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ChecksListForRefStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ChecksListForSuiteFilter) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ChecksListForSuiteFilter from json reader.
func (s *ChecksListForSuiteFilter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksListForSuiteFilter to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ChecksListForSuiteFilter(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ChecksListForSuiteOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("check_runs")
	more.Down()
	e.ArrStart()
	for _, elem := range s.CheckRuns {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ChecksListForSuiteOK from json stream.
func (s *ChecksListForSuiteOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksListForSuiteOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "check_runs":
			s.CheckRuns = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem CheckRun
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.CheckRuns = append(s.CheckRuns, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ChecksListForSuiteStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ChecksListForSuiteStatus from json reader.
func (s *ChecksListForSuiteStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksListForSuiteStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ChecksListForSuiteStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ChecksListSuitesForRefOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("check_suites")
	more.Down()
	e.ArrStart()
	for _, elem := range s.CheckSuites {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ChecksListSuitesForRefOK from json stream.
func (s *ChecksListSuitesForRefOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksListSuitesForRefOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "check_suites":
			s.CheckSuites = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem CheckSuite
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.CheckSuites = append(s.CheckSuites, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ChecksRerequestSuiteCreated) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ChecksRerequestSuiteCreated from json stream.
func (s *ChecksRerequestSuiteCreated) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksRerequestSuiteCreated to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ChecksSetSuitesPreferencesReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.AutoTriggerChecks != nil {
		more.More()
		e.ObjField("auto_trigger_checks")
		more.Down()
		e.ArrStart()
		for _, elem := range s.AutoTriggerChecks {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ChecksSetSuitesPreferencesReq from json stream.
func (s *ChecksSetSuitesPreferencesReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksSetSuitesPreferencesReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "auto_trigger_checks":
			s.AutoTriggerChecks = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ChecksSetSuitesPreferencesReqAutoTriggerChecksItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.AutoTriggerChecks = append(s.AutoTriggerChecks, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ChecksSetSuitesPreferencesReqAutoTriggerChecksItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("app_id")
	e.Int(s.AppID)
	more.More()
	e.ObjField("setting")
	e.Bool(s.Setting)
	e.ObjEnd()
}

// ReadJSON reads ChecksSetSuitesPreferencesReqAutoTriggerChecksItem from json stream.
func (s *ChecksSetSuitesPreferencesReqAutoTriggerChecksItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChecksSetSuitesPreferencesReqAutoTriggerChecksItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "app_id":
			v, err := d.Int()
			s.AppID = int(v)
			if err != nil {
				return err
			}
		case "setting":
			v, err := d.Bool()
			s.Setting = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CloneTraffic) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("count")
	e.Int(s.Count)
	more.More()
	e.ObjField("uniques")
	e.Int(s.Uniques)
	more.More()
	e.ObjField("clones")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Clones {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads CloneTraffic from json stream.
func (s *CloneTraffic) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CloneTraffic to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			v, err := d.Int()
			s.Count = int(v)
			if err != nil {
				return err
			}
		case "uniques":
			v, err := d.Int()
			s.Uniques = int(v)
			if err != nil {
				return err
			}
		case "clones":
			s.Clones = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Traffic
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Clones = append(s.Clones, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (CodeFrequencyStat) WriteJSON(e *json.Encoder)      {}
func (CodeFrequencyStat) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CodeOfConduct) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	more.More()
	e.ObjField("html_url")
	s.HTMLURL.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads CodeOfConduct from json stream.
func (s *CodeOfConduct) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeOfConduct to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeOfConductSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("html_url")
	s.HTMLURL.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads CodeOfConductSimple from json stream.
func (s *CodeOfConductSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeOfConductSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlert) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	if s.Instances.Set {
		more.More()
		e.ObjField("instances")
		s.Instances.WriteJSON(e)
	}
	// Unsupported kind "alias".
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("dismissed_by")
	s.DismissedBy.WriteJSON(e)
	more.More()
	e.ObjField("dismissed_at")
	s.DismissedAt.WriteJSON(e)
	more.More()
	e.ObjField("dismissed_reason")
	s.DismissedReason.WriteJSON(e)
	more.More()
	e.ObjField("rule")
	s.Rule.WriteJSON(e)
	more.More()
	e.ObjField("tool")
	s.Tool.WriteJSON(e)
	more.More()
	e.ObjField("most_recent_instance")
	s.MostRecentInstance.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads CodeScanningAlert from json stream.
func (s *CodeScanningAlert) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlert to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := fmt.Errorf(`decoding of "AlertNumber" (alias) is not implemented`); err != nil {
				return err
			}
		case "created_at":
			if err := fmt.Errorf(`decoding of "AlertCreatedAt" (alias) is not implemented`); err != nil {
				return err
			}
		case "url":
			if err := fmt.Errorf(`decoding of "AlertURL" (alias) is not implemented`); err != nil {
				return err
			}
		case "html_url":
			if err := fmt.Errorf(`decoding of "AlertHTMLURL" (alias) is not implemented`); err != nil {
				return err
			}
		case "instances":
			s.Instances.Reset()
			if err := s.Instances.ReadJSON(d); err != nil {
				return err
			}
		case "instances_url":
			if err := fmt.Errorf(`decoding of "AlertInstancesURL" (alias) is not implemented`); err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "dismissed_by":
			if err := s.DismissedBy.ReadJSON(d); err != nil {
				return err
			}
		case "dismissed_at":
			if err := s.DismissedAt.ReadJSON(d); err != nil {
				return err
			}
		case "dismissed_reason":
			if err := s.DismissedReason.ReadJSON(d); err != nil {
				return err
			}
		case "rule":
			if err := s.Rule.ReadJSON(d); err != nil {
				return err
			}
		case "tool":
			if err := s.Tool.ReadJSON(d); err != nil {
				return err
			}
		case "most_recent_instance":
			if err := s.MostRecentInstance.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertClassification) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CodeScanningAlertClassification from json reader.
func (s *CodeScanningAlertClassification) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertClassification to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CodeScanningAlertClassification(v)
	return nil
}

func (CodeScanningAlertDismissedAt) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAlertDismissedAt) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertDismissedReason) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CodeScanningAlertDismissedReason from json reader.
func (s *CodeScanningAlertDismissedReason) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertDismissedReason to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CodeScanningAlertDismissedReason(v)
	return nil
}

func (CodeScanningAlertEnvironment) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAlertEnvironment) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertInstance) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Ref.Set {
		more.More()
		e.ObjField("ref")
		s.Ref.WriteJSON(e)
	}
	if s.AnalysisKey.Set {
		more.More()
		e.ObjField("analysis_key")
		s.AnalysisKey.WriteJSON(e)
	}
	if s.Environment.Set {
		more.More()
		e.ObjField("environment")
		s.Environment.WriteJSON(e)
	}
	if s.Category.Set {
		more.More()
		e.ObjField("category")
		s.Category.WriteJSON(e)
	}
	if s.State.Set {
		more.More()
		e.ObjField("state")
		s.State.WriteJSON(e)
	}
	if s.CommitSha.Set {
		more.More()
		e.ObjField("commit_sha")
		s.CommitSha.WriteJSON(e)
	}
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.Location.Set {
		more.More()
		e.ObjField("location")
		s.Location.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.Classifications != nil {
		more.More()
		e.ObjField("classifications")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Classifications {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningAlertInstance from json stream.
func (s *CodeScanningAlertInstance) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertInstance to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "ref":
			s.Ref.Reset()
			if err := s.Ref.ReadJSON(d); err != nil {
				return err
			}
		case "analysis_key":
			s.AnalysisKey.Reset()
			if err := s.AnalysisKey.ReadJSON(d); err != nil {
				return err
			}
		case "environment":
			s.Environment.Reset()
			if err := s.Environment.ReadJSON(d); err != nil {
				return err
			}
		case "category":
			s.Category.Reset()
			if err := s.Category.ReadJSON(d); err != nil {
				return err
			}
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "commit_sha":
			s.CommitSha.Reset()
			if err := s.CommitSha.ReadJSON(d); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "classifications":
			s.Classifications = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem CodeScanningAlertClassification
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Classifications = append(s.Classifications, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertInstanceMessage) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Text.Set {
		more.More()
		e.ObjField("text")
		s.Text.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningAlertInstanceMessage from json stream.
func (s *CodeScanningAlertInstanceMessage) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertInstanceMessage to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "text":
			s.Text.Reset()
			if err := s.Text.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertItems) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("dismissed_by")
	s.DismissedBy.WriteJSON(e)
	more.More()
	e.ObjField("dismissed_at")
	s.DismissedAt.WriteJSON(e)
	more.More()
	e.ObjField("dismissed_reason")
	s.DismissedReason.WriteJSON(e)
	more.More()
	e.ObjField("rule")
	s.Rule.WriteJSON(e)
	more.More()
	e.ObjField("tool")
	s.Tool.WriteJSON(e)
	more.More()
	e.ObjField("most_recent_instance")
	s.MostRecentInstance.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads CodeScanningAlertItems from json stream.
func (s *CodeScanningAlertItems) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertItems to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := fmt.Errorf(`decoding of "AlertNumber" (alias) is not implemented`); err != nil {
				return err
			}
		case "created_at":
			if err := fmt.Errorf(`decoding of "AlertCreatedAt" (alias) is not implemented`); err != nil {
				return err
			}
		case "url":
			if err := fmt.Errorf(`decoding of "AlertURL" (alias) is not implemented`); err != nil {
				return err
			}
		case "html_url":
			if err := fmt.Errorf(`decoding of "AlertHTMLURL" (alias) is not implemented`); err != nil {
				return err
			}
		case "instances_url":
			if err := fmt.Errorf(`decoding of "AlertInstancesURL" (alias) is not implemented`); err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "dismissed_by":
			if err := s.DismissedBy.ReadJSON(d); err != nil {
				return err
			}
		case "dismissed_at":
			if err := s.DismissedAt.ReadJSON(d); err != nil {
				return err
			}
		case "dismissed_reason":
			if err := s.DismissedReason.ReadJSON(d); err != nil {
				return err
			}
		case "rule":
			if err := s.Rule.ReadJSON(d); err != nil {
				return err
			}
		case "tool":
			if err := s.Tool.ReadJSON(d); err != nil {
				return err
			}
		case "most_recent_instance":
			if err := s.MostRecentInstance.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertLocation) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Path.Set {
		more.More()
		e.ObjField("path")
		s.Path.WriteJSON(e)
	}
	if s.StartLine.Set {
		more.More()
		e.ObjField("start_line")
		s.StartLine.WriteJSON(e)
	}
	if s.EndLine.Set {
		more.More()
		e.ObjField("end_line")
		s.EndLine.WriteJSON(e)
	}
	if s.StartColumn.Set {
		more.More()
		e.ObjField("start_column")
		s.StartColumn.WriteJSON(e)
	}
	if s.EndColumn.Set {
		more.More()
		e.ObjField("end_column")
		s.EndColumn.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningAlertLocation from json stream.
func (s *CodeScanningAlertLocation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertLocation to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(d); err != nil {
				return err
			}
		case "start_line":
			s.StartLine.Reset()
			if err := s.StartLine.ReadJSON(d); err != nil {
				return err
			}
		case "end_line":
			s.EndLine.Reset()
			if err := s.EndLine.ReadJSON(d); err != nil {
				return err
			}
		case "start_column":
			s.StartColumn.Reset()
			if err := s.StartColumn.ReadJSON(d); err != nil {
				return err
			}
		case "end_column":
			s.EndColumn.Reset()
			if err := s.EndColumn.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertRule) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Severity.Set {
		more.More()
		e.ObjField("severity")
		s.Severity.WriteJSON(e)
	}
	if s.SecuritySeverityLevel.Set {
		more.More()
		e.ObjField("security_severity_level")
		s.SecuritySeverityLevel.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.FullDescription.Set {
		more.More()
		e.ObjField("full_description")
		s.FullDescription.WriteJSON(e)
	}
	if s.Tags.Set {
		more.More()
		e.ObjField("tags")
		s.Tags.WriteJSON(e)
	}
	if s.Help.Set {
		more.More()
		e.ObjField("help")
		s.Help.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningAlertRule from json stream.
func (s *CodeScanningAlertRule) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertRule to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "severity":
			s.Severity.Reset()
			if err := s.Severity.ReadJSON(d); err != nil {
				return err
			}
		case "security_severity_level":
			s.SecuritySeverityLevel.Reset()
			if err := s.SecuritySeverityLevel.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "full_description":
			s.FullDescription.Reset()
			if err := s.FullDescription.ReadJSON(d); err != nil {
				return err
			}
		case "tags":
			s.Tags.Reset()
			if err := s.Tags.ReadJSON(d); err != nil {
				return err
			}
		case "help":
			s.Help.Reset()
			if err := s.Help.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertRuleSecuritySeverityLevel) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CodeScanningAlertRuleSecuritySeverityLevel from json reader.
func (s *CodeScanningAlertRuleSecuritySeverityLevel) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertRuleSecuritySeverityLevel to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CodeScanningAlertRuleSecuritySeverityLevel(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertRuleSeverity) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CodeScanningAlertRuleSeverity from json reader.
func (s *CodeScanningAlertRuleSeverity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertRuleSeverity to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CodeScanningAlertRuleSeverity(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertRuleSummary) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Severity.Set {
		more.More()
		e.ObjField("severity")
		s.Severity.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningAlertRuleSummary from json stream.
func (s *CodeScanningAlertRuleSummary) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertRuleSummary to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "severity":
			s.Severity.Reset()
			if err := s.Severity.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertRuleSummarySeverity) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CodeScanningAlertRuleSummarySeverity from json reader.
func (s *CodeScanningAlertRuleSummarySeverity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertRuleSummarySeverity to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CodeScanningAlertRuleSummarySeverity(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertSetState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CodeScanningAlertSetState from json reader.
func (s *CodeScanningAlertSetState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertSetState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CodeScanningAlertSetState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CodeScanningAlertState from json reader.
func (s *CodeScanningAlertState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAlertState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CodeScanningAlertState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAnalysis) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	if s.Category.Set {
		more.More()
		e.ObjField("category")
		s.Category.WriteJSON(e)
	}
	more.More()
	e.ObjField("error")
	e.Str(s.Error)
	// Unsupported kind "alias".
	more.More()
	e.ObjField("results_count")
	e.Int(s.ResultsCount)
	more.More()
	e.ObjField("rules_count")
	e.Int(s.RulesCount)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	more.More()
	e.ObjField("tool")
	s.Tool.WriteJSON(e)
	more.More()
	e.ObjField("deletable")
	e.Bool(s.Deletable)
	more.More()
	e.ObjField("warning")
	e.Str(s.Warning)
	if s.ToolName.Set {
		more.More()
		e.ObjField("tool_name")
		s.ToolName.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningAnalysis from json stream.
func (s *CodeScanningAnalysis) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAnalysis to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "ref":
			if err := fmt.Errorf(`decoding of "CodeScanningRef" (alias) is not implemented`); err != nil {
				return err
			}
		case "commit_sha":
			if err := fmt.Errorf(`decoding of "CodeScanningAnalysisCommitSha" (alias) is not implemented`); err != nil {
				return err
			}
		case "analysis_key":
			if err := fmt.Errorf(`decoding of "CodeScanningAnalysisAnalysisKey" (alias) is not implemented`); err != nil {
				return err
			}
		case "environment":
			if err := fmt.Errorf(`decoding of "CodeScanningAnalysisEnvironment" (alias) is not implemented`); err != nil {
				return err
			}
		case "category":
			s.Category.Reset()
			if err := s.Category.ReadJSON(d); err != nil {
				return err
			}
		case "error":
			v, err := d.Str()
			s.Error = string(v)
			if err != nil {
				return err
			}
		case "created_at":
			if err := fmt.Errorf(`decoding of "CodeScanningAnalysisCreatedAt" (alias) is not implemented`); err != nil {
				return err
			}
		case "results_count":
			v, err := d.Int()
			s.ResultsCount = int(v)
			if err != nil {
				return err
			}
		case "rules_count":
			v, err := d.Int()
			s.RulesCount = int(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "url":
			if err := fmt.Errorf(`decoding of "CodeScanningAnalysisURL" (alias) is not implemented`); err != nil {
				return err
			}
		case "sarif_id":
			if err := fmt.Errorf(`decoding of "CodeScanningAnalysisSarifID" (alias) is not implemented`); err != nil {
				return err
			}
		case "tool":
			if err := s.Tool.ReadJSON(d); err != nil {
				return err
			}
		case "deletable":
			v, err := d.Bool()
			s.Deletable = bool(v)
			if err != nil {
				return err
			}
		case "warning":
			v, err := d.Str()
			s.Warning = string(v)
			if err != nil {
				return err
			}
		case "tool_name":
			s.ToolName.Reset()
			if err := s.ToolName.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (CodeScanningAnalysisAnalysisKey) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisAnalysisKey) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningAnalysisCategory) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisCategory) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningAnalysisCommitSha) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisCommitSha) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningAnalysisCreatedAt) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisCreatedAt) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CodeScanningAnalysisDeletion) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("next_analysis_url")
	s.NextAnalysisURL.WriteJSON(e)
	more.More()
	e.ObjField("confirm_delete_url")
	s.ConfirmDeleteURL.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads CodeScanningAnalysisDeletion from json stream.
func (s *CodeScanningAnalysisDeletion) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAnalysisDeletion to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "next_analysis_url":
			if err := s.NextAnalysisURL.ReadJSON(d); err != nil {
				return err
			}
		case "confirm_delete_url":
			if err := s.ConfirmDeleteURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (CodeScanningAnalysisEnvironment) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisEnvironment) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningAnalysisSarifFile) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisSarifFile) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningAnalysisSarifID) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisSarifID) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CodeScanningAnalysisTool) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Version.Set {
		more.More()
		e.ObjField("version")
		s.Version.WriteJSON(e)
	}
	if s.GUID.Set {
		more.More()
		e.ObjField("guid")
		s.GUID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningAnalysisTool from json stream.
func (s *CodeScanningAnalysisTool) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningAnalysisTool to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(d); err != nil {
				return err
			}
		case "guid":
			s.GUID.Reset()
			if err := s.GUID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (CodeScanningAnalysisToolGUID) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisToolGUID) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningAnalysisToolName) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisToolName) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningAnalysisToolVersion) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisToolVersion) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningAnalysisURL) WriteJSON(e *json.Encoder)      {}
func (CodeScanningAnalysisURL) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningDeleteAnalysisApplicationJSONBadRequest) WriteJSON(e *json.Encoder) {}
func (CodeScanningDeleteAnalysisApplicationJSONBadRequest) ReadJSON(d *json.Decoder) error {
	return nil
}

func (CodeScanningDeleteAnalysisApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (CodeScanningDeleteAnalysisApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningDeleteAnalysisApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (CodeScanningDeleteAnalysisApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningGetAlertApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (CodeScanningGetAlertApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningGetAlertApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (CodeScanningGetAlertApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningGetAnalysisApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (CodeScanningGetAnalysisApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningGetAnalysisApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (CodeScanningGetAnalysisApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningGetAnalysisOKApplicationJSONSarif) WriteJSON(e *json.Encoder)      {}
func (CodeScanningGetAnalysisOKApplicationJSONSarif) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CodeScanningGetSarifNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads CodeScanningGetSarifNotFound from json stream.
func (s *CodeScanningGetSarifNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningGetSarifNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (CodeScanningListAlertInstancesApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (CodeScanningListAlertInstancesApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (CodeScanningListAlertInstancesApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (CodeScanningListAlertInstancesApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (CodeScanningListAlertInstancesOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (CodeScanningListAlertInstancesOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningListAlertsForRepoApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (CodeScanningListAlertsForRepoApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (CodeScanningListAlertsForRepoApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (CodeScanningListAlertsForRepoApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (CodeScanningListAlertsForRepoOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (CodeScanningListAlertsForRepoOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningListRecentAnalysesApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (CodeScanningListRecentAnalysesApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (CodeScanningListRecentAnalysesApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (CodeScanningListRecentAnalysesApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (CodeScanningListRecentAnalysesOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (CodeScanningListRecentAnalysesOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningRef) WriteJSON(e *json.Encoder)      {}
func (CodeScanningRef) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CodeScanningSarifsReceipt) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningSarifsReceipt from json stream.
func (s *CodeScanningSarifsReceipt) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningSarifsReceipt to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningSarifsStatus) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ProcessingStatus.Set {
		more.More()
		e.ObjField("processing_status")
		s.ProcessingStatus.WriteJSON(e)
	}
	if s.AnalysesURL.Set {
		more.More()
		e.ObjField("analyses_url")
		s.AnalysesURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningSarifsStatus from json stream.
func (s *CodeScanningSarifsStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningSarifsStatus to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "processing_status":
			s.ProcessingStatus.Reset()
			if err := s.ProcessingStatus.ReadJSON(d); err != nil {
				return err
			}
		case "analyses_url":
			s.AnalysesURL.Reset()
			if err := s.AnalysesURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningSarifsStatusProcessingStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CodeScanningSarifsStatusProcessingStatus from json reader.
func (s *CodeScanningSarifsStatusProcessingStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningSarifsStatusProcessingStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CodeScanningSarifsStatusProcessingStatus(v)
	return nil
}

func (CodeScanningUpdateAlertApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (CodeScanningUpdateAlertApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningUpdateAlertApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (CodeScanningUpdateAlertApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CodeScanningUpdateAlertReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	if s.DismissedReason.Set {
		more.More()
		e.ObjField("dismissed_reason")
		s.DismissedReason.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningUpdateAlertReq from json stream.
func (s *CodeScanningUpdateAlertReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningUpdateAlertReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "dismissed_reason":
			s.DismissedReason.Reset()
			if err := s.DismissedReason.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (CodeScanningUploadSarifApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (CodeScanningUploadSarifApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (CodeScanningUploadSarifApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (CodeScanningUploadSarifApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CodeScanningUploadSarifBadRequest) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads CodeScanningUploadSarifBadRequest from json stream.
func (s *CodeScanningUploadSarifBadRequest) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningUploadSarifBadRequest to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningUploadSarifReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	// Unsupported kind "alias".
	if s.CheckoutURI.Set {
		more.More()
		e.ObjField("checkout_uri")
		s.CheckoutURI.WriteJSON(e)
	}
	if s.StartedAt.Set {
		more.More()
		e.ObjField("started_at")
		s.StartedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.ToolName.Set {
		more.More()
		e.ObjField("tool_name")
		s.ToolName.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeScanningUploadSarifReq from json stream.
func (s *CodeScanningUploadSarifReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningUploadSarifReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "commit_sha":
			if err := fmt.Errorf(`decoding of "CodeScanningAnalysisCommitSha" (alias) is not implemented`); err != nil {
				return err
			}
		case "ref":
			if err := fmt.Errorf(`decoding of "CodeScanningRef" (alias) is not implemented`); err != nil {
				return err
			}
		case "sarif":
			if err := fmt.Errorf(`decoding of "CodeScanningAnalysisSarifFile" (alias) is not implemented`); err != nil {
				return err
			}
		case "checkout_uri":
			s.CheckoutURI.Reset()
			if err := s.CheckoutURI.ReadJSON(d); err != nil {
				return err
			}
		case "started_at":
			s.StartedAt.Reset()
			if err := s.StartedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "tool_name":
			s.ToolName.Reset()
			if err := s.ToolName.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningUploadSarifRequestEntityTooLarge) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads CodeScanningUploadSarifRequestEntityTooLarge from json stream.
func (s *CodeScanningUploadSarifRequestEntityTooLarge) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeScanningUploadSarifRequestEntityTooLarge to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CodeSearchResultItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("git_url")
	json.WriteURI(e, s.GitURL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("repository")
	s.Repository.WriteJSON(e)
	more.More()
	e.ObjField("score")
	e.Float64(s.Score)
	if s.FileSize.Set {
		more.More()
		e.ObjField("file_size")
		s.FileSize.WriteJSON(e)
	}
	if s.Language.Set {
		more.More()
		e.ObjField("language")
		s.Language.WriteJSON(e)
	}
	if s.LastModifiedAt.Set {
		more.More()
		e.ObjField("last_modified_at")
		s.LastModifiedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.LineNumbers != nil {
		more.More()
		e.ObjField("line_numbers")
		more.Down()
		e.ArrStart()
		for _, elem := range s.LineNumbers {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.TextMatches != nil {
		more.More()
		e.ObjField("text_matches")
		s.TextMatches.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CodeSearchResultItem from json stream.
func (s *CodeSearchResultItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CodeSearchResultItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "git_url":
			v, err := json.ReadURI(d)
			s.GitURL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "repository":
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "score":
			v, err := d.Float64()
			s.Score = float64(v)
			if err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			s.Language.Reset()
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "last_modified_at":
			s.LastModifiedAt.Reset()
			if err := s.LastModifiedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "line_numbers":
			s.LineNumbers = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.LineNumbers = append(s.LineNumbers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "text_matches":
			s.TextMatches = nil
			var elem SearchResultTextMatches
			if err := fmt.Errorf(`decoding of "SearchResultTextMatches" (alias) is not implemented`); err != nil {
				return err
			}
			s.TextMatches = &elem
		default:
			return d.Skip()
		}
		return nil
	})
}

func (CodesOfConductGetAllCodesOfConductOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (CodesOfConductGetAllCodesOfConductOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Collaborator) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("followers_url")
	json.WriteURI(e, s.FollowersURL)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("subscriptions_url")
	json.WriteURI(e, s.SubscriptionsURL)
	more.More()
	e.ObjField("organizations_url")
	json.WriteURI(e, s.OrganizationsURL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	more.More()
	e.ObjField("received_events_url")
	json.WriteURI(e, s.ReceivedEventsURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("site_admin")
	e.Bool(s.SiteAdmin)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Collaborator from json stream.
func (s *Collaborator) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Collaborator to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := json.ReadURI(d)
			s.FollowersURL = v
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "subscriptions_url":
			v, err := json.ReadURI(d)
			s.SubscriptionsURL = v
			if err != nil {
				return err
			}
		case "organizations_url":
			v, err := json.ReadURI(d)
			s.OrganizationsURL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "received_events_url":
			v, err := json.ReadURI(d)
			s.ReceivedEventsURL = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "site_admin":
			v, err := d.Bool()
			s.SiteAdmin = bool(v)
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CollaboratorPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("pull")
	e.Bool(s.Pull)
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	more.More()
	e.ObjField("push")
	e.Bool(s.Push)
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	more.More()
	e.ObjField("admin")
	e.Bool(s.Admin)
	e.ObjEnd()
}

// ReadJSON reads CollaboratorPermissions from json stream.
func (s *CollaboratorPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CollaboratorPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "pull":
			v, err := d.Bool()
			s.Pull = bool(v)
			if err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			v, err := d.Bool()
			s.Push = bool(v)
			if err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		case "admin":
			v, err := d.Bool()
			s.Admin = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CombinedBillingUsage) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("days_left_in_billing_cycle")
	e.Int(s.DaysLeftInBillingCycle)
	more.More()
	e.ObjField("estimated_paid_storage_for_month")
	e.Int(s.EstimatedPaidStorageForMonth)
	more.More()
	e.ObjField("estimated_storage_for_month")
	e.Int(s.EstimatedStorageForMonth)
	e.ObjEnd()
}

// ReadJSON reads CombinedBillingUsage from json stream.
func (s *CombinedBillingUsage) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CombinedBillingUsage to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "days_left_in_billing_cycle":
			v, err := d.Int()
			s.DaysLeftInBillingCycle = int(v)
			if err != nil {
				return err
			}
		case "estimated_paid_storage_for_month":
			v, err := d.Int()
			s.EstimatedPaidStorageForMonth = int(v)
			if err != nil {
				return err
			}
		case "estimated_storage_for_month":
			v, err := d.Int()
			s.EstimatedStorageForMonth = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CombinedCommitStatus) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("statuses")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Statuses {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("repository")
	s.Repository.WriteJSON(e)
	more.More()
	e.ObjField("commit_url")
	json.WriteURI(e, s.CommitURL)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads CombinedCommitStatus from json stream.
func (s *CombinedCommitStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CombinedCommitStatus to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "statuses":
			s.Statuses = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem SimpleCommitStatus
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Statuses = append(s.Statuses, elem)
				return nil
			}); err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "repository":
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "commit_url":
			v, err := json.ReadURI(d)
			s.CommitURL = v
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Commit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("comments_url")
	json.WriteURI(e, s.CommentsURL)
	more.More()
	e.ObjField("commit")
	s.Commit.WriteJSON(e)
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("committer")
	s.Committer.WriteJSON(e)
	more.More()
	e.ObjField("parents")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Parents {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if s.Stats.Set {
		more.More()
		e.ObjField("stats")
		s.Stats.WriteJSON(e)
	}
	if s.Files != nil {
		more.More()
		e.ObjField("files")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Files {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads Commit from json stream.
func (s *Commit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Commit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := json.ReadURI(d)
			s.CommentsURL = v
			if err != nil {
				return err
			}
		case "commit":
			if err := s.Commit.ReadJSON(d); err != nil {
				return err
			}
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		case "parents":
			s.Parents = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem CommitParentsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Parents = append(s.Parents, elem)
				return nil
			}); err != nil {
				return err
			}
		case "stats":
			s.Stats.Reset()
			if err := s.Stats.ReadJSON(d); err != nil {
				return err
			}
		case "files":
			s.Files = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem CommitFilesItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Files = append(s.Files, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitActivity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("days")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Days {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("total")
	e.Int(s.Total)
	more.More()
	e.ObjField("week")
	e.Int(s.Week)
	e.ObjEnd()
}

// ReadJSON reads CommitActivity from json stream.
func (s *CommitActivity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitActivity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "days":
			s.Days = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Days = append(s.Days, elem)
				return nil
			}); err != nil {
				return err
			}
		case "total":
			v, err := d.Int()
			s.Total = int(v)
			if err != nil {
				return err
			}
		case "week":
			v, err := d.Int()
			s.Week = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitComment) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	more.More()
	e.ObjField("path")
	s.Path.WriteJSON(e)
	more.More()
	e.ObjField("position")
	s.Position.WriteJSON(e)
	more.More()
	e.ObjField("line")
	s.Line.WriteJSON(e)
	more.More()
	e.ObjField("commit_id")
	e.Str(s.CommitID)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("author_association")
	s.AuthorAssociation.WriteJSON(e)
	if s.Reactions.Set {
		more.More()
		e.ObjField("reactions")
		s.Reactions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CommitComment from json stream.
func (s *CommitComment) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitComment to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "path":
			if err := s.Path.ReadJSON(d); err != nil {
				return err
			}
		case "position":
			if err := s.Position.ReadJSON(d); err != nil {
				return err
			}
		case "line":
			if err := s.Line.ReadJSON(d); err != nil {
				return err
			}
		case "commit_id":
			v, err := d.Str()
			s.CommitID = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("committer")
	s.Committer.WriteJSON(e)
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("comment_count")
	e.Int(s.CommentCount)
	more.More()
	e.ObjField("tree")
	s.Tree.WriteJSON(e)
	if s.Verification.Set {
		more.More()
		e.ObjField("verification")
		s.Verification.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CommitCommit from json stream.
func (s *CommitCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "comment_count":
			v, err := d.Int()
			s.CommentCount = int(v)
			if err != nil {
				return err
			}
		case "tree":
			if err := s.Tree.ReadJSON(d); err != nil {
				return err
			}
		case "verification":
			s.Verification.Reset()
			if err := s.Verification.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitCommitTree) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads CommitCommitTree from json stream.
func (s *CommitCommitTree) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitCommitTree to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitComparison) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("permalink_url")
	json.WriteURI(e, s.PermalinkURL)
	more.More()
	e.ObjField("diff_url")
	json.WriteURI(e, s.DiffURL)
	more.More()
	e.ObjField("patch_url")
	json.WriteURI(e, s.PatchURL)
	more.More()
	e.ObjField("base_commit")
	s.BaseCommit.WriteJSON(e)
	more.More()
	e.ObjField("merge_base_commit")
	s.MergeBaseCommit.WriteJSON(e)
	more.More()
	e.ObjField("status")
	s.Status.WriteJSON(e)
	more.More()
	e.ObjField("ahead_by")
	e.Int(s.AheadBy)
	more.More()
	e.ObjField("behind_by")
	e.Int(s.BehindBy)
	more.More()
	e.ObjField("total_commits")
	e.Int(s.TotalCommits)
	more.More()
	e.ObjField("commits")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Commits {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if s.Files != nil {
		more.More()
		e.ObjField("files")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Files {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads CommitComparison from json stream.
func (s *CommitComparison) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitComparison to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "permalink_url":
			v, err := json.ReadURI(d)
			s.PermalinkURL = v
			if err != nil {
				return err
			}
		case "diff_url":
			v, err := json.ReadURI(d)
			s.DiffURL = v
			if err != nil {
				return err
			}
		case "patch_url":
			v, err := json.ReadURI(d)
			s.PatchURL = v
			if err != nil {
				return err
			}
		case "base_commit":
			if err := s.BaseCommit.ReadJSON(d); err != nil {
				return err
			}
		case "merge_base_commit":
			if err := s.MergeBaseCommit.ReadJSON(d); err != nil {
				return err
			}
		case "status":
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "ahead_by":
			v, err := d.Int()
			s.AheadBy = int(v)
			if err != nil {
				return err
			}
		case "behind_by":
			v, err := d.Int()
			s.BehindBy = int(v)
			if err != nil {
				return err
			}
		case "total_commits":
			v, err := d.Int()
			s.TotalCommits = int(v)
			if err != nil {
				return err
			}
		case "commits":
			s.Commits = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Commit
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Commits = append(s.Commits, elem)
				return nil
			}); err != nil {
				return err
			}
		case "files":
			s.Files = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem DiffEntry
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Files = append(s.Files, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitComparisonStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads CommitComparisonStatus from json reader.
func (s *CommitComparisonStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitComparisonStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = CommitComparisonStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CommitFilesItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Filename.Set {
		more.More()
		e.ObjField("filename")
		s.Filename.WriteJSON(e)
	}
	if s.Additions.Set {
		more.More()
		e.ObjField("additions")
		s.Additions.WriteJSON(e)
	}
	if s.Deletions.Set {
		more.More()
		e.ObjField("deletions")
		s.Deletions.WriteJSON(e)
	}
	if s.Changes.Set {
		more.More()
		e.ObjField("changes")
		s.Changes.WriteJSON(e)
	}
	if s.Status.Set {
		more.More()
		e.ObjField("status")
		s.Status.WriteJSON(e)
	}
	if s.RawURL.Set {
		more.More()
		e.ObjField("raw_url")
		s.RawURL.WriteJSON(e)
	}
	if s.BlobURL.Set {
		more.More()
		e.ObjField("blob_url")
		s.BlobURL.WriteJSON(e)
	}
	if s.Patch.Set {
		more.More()
		e.ObjField("patch")
		s.Patch.WriteJSON(e)
	}
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	if s.ContentsURL.Set {
		more.More()
		e.ObjField("contents_url")
		s.ContentsURL.WriteJSON(e)
	}
	if s.PreviousFilename.Set {
		more.More()
		e.ObjField("previous_filename")
		s.PreviousFilename.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CommitFilesItem from json stream.
func (s *CommitFilesItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitFilesItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "filename":
			s.Filename.Reset()
			if err := s.Filename.ReadJSON(d); err != nil {
				return err
			}
		case "additions":
			s.Additions.Reset()
			if err := s.Additions.ReadJSON(d); err != nil {
				return err
			}
		case "deletions":
			s.Deletions.Reset()
			if err := s.Deletions.ReadJSON(d); err != nil {
				return err
			}
		case "changes":
			s.Changes.Reset()
			if err := s.Changes.ReadJSON(d); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "raw_url":
			s.RawURL.Reset()
			if err := s.RawURL.ReadJSON(d); err != nil {
				return err
			}
		case "blob_url":
			s.BlobURL.Reset()
			if err := s.BlobURL.ReadJSON(d); err != nil {
				return err
			}
		case "patch":
			s.Patch.Reset()
			if err := s.Patch.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		case "contents_url":
			s.ContentsURL.Reset()
			if err := s.ContentsURL.ReadJSON(d); err != nil {
				return err
			}
		case "previous_filename":
			s.PreviousFilename.Reset()
			if err := s.PreviousFilename.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitParentsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CommitParentsItem from json stream.
func (s *CommitParentsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitParentsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitSearchResultItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("comments_url")
	json.WriteURI(e, s.CommentsURL)
	more.More()
	e.ObjField("commit")
	s.Commit.WriteJSON(e)
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("committer")
	s.Committer.WriteJSON(e)
	more.More()
	e.ObjField("parents")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Parents {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("repository")
	s.Repository.WriteJSON(e)
	more.More()
	e.ObjField("score")
	e.Float64(s.Score)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	if s.TextMatches != nil {
		more.More()
		e.ObjField("text_matches")
		s.TextMatches.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CommitSearchResultItem from json stream.
func (s *CommitSearchResultItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitSearchResultItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := json.ReadURI(d)
			s.CommentsURL = v
			if err != nil {
				return err
			}
		case "commit":
			if err := s.Commit.ReadJSON(d); err != nil {
				return err
			}
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		case "parents":
			s.Parents = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem CommitSearchResultItemParentsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Parents = append(s.Parents, elem)
				return nil
			}); err != nil {
				return err
			}
		case "repository":
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "score":
			v, err := d.Float64()
			s.Score = float64(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "text_matches":
			s.TextMatches = nil
			var elem SearchResultTextMatches
			if err := fmt.Errorf(`decoding of "SearchResultTextMatches" (alias) is not implemented`); err != nil {
				return err
			}
			s.TextMatches = &elem
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitSearchResultItemCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("committer")
	s.Committer.WriteJSON(e)
	more.More()
	e.ObjField("comment_count")
	e.Int(s.CommentCount)
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("tree")
	s.Tree.WriteJSON(e)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	if s.Verification.Set {
		more.More()
		e.ObjField("verification")
		s.Verification.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CommitSearchResultItemCommit from json stream.
func (s *CommitSearchResultItemCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitSearchResultItemCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		case "comment_count":
			v, err := d.Int()
			s.CommentCount = int(v)
			if err != nil {
				return err
			}
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "tree":
			if err := s.Tree.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "verification":
			s.Verification.Reset()
			if err := s.Verification.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitSearchResultItemCommitAuthor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	more.More()
	e.ObjField("date")
	json.WriteDateTime(e, s.Date)
	e.ObjEnd()
}

// ReadJSON reads CommitSearchResultItemCommitAuthor from json stream.
func (s *CommitSearchResultItemCommitAuthor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitSearchResultItemCommitAuthor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "date":
			v, err := json.ReadDateTime(d)
			s.Date = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitSearchResultItemCommitTree) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads CommitSearchResultItemCommitTree from json stream.
func (s *CommitSearchResultItemCommitTree) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitSearchResultItemCommitTree to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitSearchResultItemParentsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CommitSearchResultItemParentsItem from json stream.
func (s *CommitSearchResultItemParentsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitSearchResultItemParentsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommitStats) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Additions.Set {
		more.More()
		e.ObjField("additions")
		s.Additions.WriteJSON(e)
	}
	if s.Deletions.Set {
		more.More()
		e.ObjField("deletions")
		s.Deletions.WriteJSON(e)
	}
	if s.Total.Set {
		more.More()
		e.ObjField("total")
		s.Total.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CommitStats from json stream.
func (s *CommitStats) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommitStats to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "additions":
			s.Additions.Reset()
			if err := s.Additions.ReadJSON(d); err != nil {
				return err
			}
		case "deletions":
			s.Deletions.Reset()
			if err := s.Deletions.ReadJSON(d); err != nil {
				return err
			}
		case "total":
			s.Total.Reset()
			if err := s.Total.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommunityProfile) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("health_percentage")
	e.Int(s.HealthPercentage)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("documentation")
	s.Documentation.WriteJSON(e)
	more.More()
	e.ObjField("files")
	s.Files.WriteJSON(e)
	more.More()
	e.ObjField("updated_at")
	s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	if s.ContentReportsEnabled.Set {
		more.More()
		e.ObjField("content_reports_enabled")
		s.ContentReportsEnabled.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CommunityProfile from json stream.
func (s *CommunityProfile) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommunityProfile to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "health_percentage":
			v, err := d.Int()
			s.HealthPercentage = int(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "documentation":
			if err := s.Documentation.ReadJSON(d); err != nil {
				return err
			}
		case "files":
			if err := s.Files.ReadJSON(d); err != nil {
				return err
			}
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "content_reports_enabled":
			s.ContentReportsEnabled.Reset()
			if err := s.ContentReportsEnabled.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CommunityProfileFiles) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("code_of_conduct")
	s.CodeOfConduct.WriteJSON(e)
	more.More()
	e.ObjField("code_of_conduct_file")
	s.CodeOfConductFile.WriteJSON(e)
	more.More()
	e.ObjField("license")
	s.License.WriteJSON(e)
	more.More()
	e.ObjField("contributing")
	s.Contributing.WriteJSON(e)
	more.More()
	e.ObjField("readme")
	s.Readme.WriteJSON(e)
	more.More()
	e.ObjField("issue_template")
	s.IssueTemplate.WriteJSON(e)
	more.More()
	e.ObjField("pull_request_template")
	s.PullRequestTemplate.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads CommunityProfileFiles from json stream.
func (s *CommunityProfileFiles) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CommunityProfileFiles to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "code_of_conduct":
			if err := s.CodeOfConduct.ReadJSON(d); err != nil {
				return err
			}
		case "code_of_conduct_file":
			if err := s.CodeOfConductFile.ReadJSON(d); err != nil {
				return err
			}
		case "license":
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "contributing":
			if err := s.Contributing.ReadJSON(d); err != nil {
				return err
			}
		case "readme":
			if err := s.Readme.ReadJSON(d); err != nil {
				return err
			}
		case "issue_template":
			if err := s.IssueTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "pull_request_template":
			if err := s.PullRequestTemplate.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ContentFile) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("encoding")
	e.Str(s.Encoding)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	more.More()
	e.ObjField("content")
	e.Str(s.Content)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("git_url")
	s.GitURL.WriteJSON(e)
	more.More()
	e.ObjField("html_url")
	s.HTMLURL.WriteJSON(e)
	more.More()
	e.ObjField("download_url")
	s.DownloadURL.WriteJSON(e)
	more.More()
	e.ObjField("_links")
	s.Links.WriteJSON(e)
	if s.Target.Set {
		more.More()
		e.ObjField("target")
		s.Target.WriteJSON(e)
	}
	if s.SubmoduleGitURL.Set {
		more.More()
		e.ObjField("submodule_git_url")
		s.SubmoduleGitURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ContentFile from json stream.
func (s *ContentFile) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ContentFile to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "encoding":
			v, err := d.Str()
			s.Encoding = string(v)
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "content":
			v, err := d.Str()
			s.Content = string(v)
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "git_url":
			if err := s.GitURL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "download_url":
			if err := s.DownloadURL.ReadJSON(d); err != nil {
				return err
			}
		case "_links":
			if err := s.Links.ReadJSON(d); err != nil {
				return err
			}
		case "target":
			s.Target.Reset()
			if err := s.Target.ReadJSON(d); err != nil {
				return err
			}
		case "submodule_git_url":
			s.SubmoduleGitURL.Reset()
			if err := s.SubmoduleGitURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ContentFileLinks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("git")
	s.Git.WriteJSON(e)
	more.More()
	e.ObjField("html")
	s.HTML.WriteJSON(e)
	more.More()
	e.ObjField("self")
	json.WriteURI(e, s.Self)
	e.ObjEnd()
}

// ReadJSON reads ContentFileLinks from json stream.
func (s *ContentFileLinks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ContentFileLinks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "git":
			if err := s.Git.ReadJSON(d); err != nil {
				return err
			}
		case "html":
			if err := s.HTML.ReadJSON(d); err != nil {
				return err
			}
		case "self":
			v, err := json.ReadURI(d)
			s.Self = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ContentReferenceAttachment) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ContentReferenceAttachment from json stream.
func (s *ContentReferenceAttachment) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ContentReferenceAttachment to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ContentTraffic) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("count")
	e.Int(s.Count)
	more.More()
	e.ObjField("uniques")
	e.Int(s.Uniques)
	e.ObjEnd()
}

// ReadJSON reads ContentTraffic from json stream.
func (s *ContentTraffic) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ContentTraffic to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "count":
			v, err := d.Int()
			s.Count = int(v)
			if err != nil {
				return err
			}
		case "uniques":
			v, err := d.Int()
			s.Uniques = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Contributor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Login.Set {
		more.More()
		e.ObjField("login")
		s.Login.WriteJSON(e)
	}
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.AvatarURL.Set {
		more.More()
		e.ObjField("avatar_url")
		s.AvatarURL.WriteJSON(e)
	}
	if s.GravatarID.Set {
		more.More()
		e.ObjField("gravatar_id")
		s.GravatarID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.FollowersURL.Set {
		more.More()
		e.ObjField("followers_url")
		s.FollowersURL.WriteJSON(e)
	}
	if s.FollowingURL.Set {
		more.More()
		e.ObjField("following_url")
		s.FollowingURL.WriteJSON(e)
	}
	if s.GistsURL.Set {
		more.More()
		e.ObjField("gists_url")
		s.GistsURL.WriteJSON(e)
	}
	if s.StarredURL.Set {
		more.More()
		e.ObjField("starred_url")
		s.StarredURL.WriteJSON(e)
	}
	if s.SubscriptionsURL.Set {
		more.More()
		e.ObjField("subscriptions_url")
		s.SubscriptionsURL.WriteJSON(e)
	}
	if s.OrganizationsURL.Set {
		more.More()
		e.ObjField("organizations_url")
		s.OrganizationsURL.WriteJSON(e)
	}
	if s.ReposURL.Set {
		more.More()
		e.ObjField("repos_url")
		s.ReposURL.WriteJSON(e)
	}
	if s.EventsURL.Set {
		more.More()
		e.ObjField("events_url")
		s.EventsURL.WriteJSON(e)
	}
	if s.ReceivedEventsURL.Set {
		more.More()
		e.ObjField("received_events_url")
		s.ReceivedEventsURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	if s.SiteAdmin.Set {
		more.More()
		e.ObjField("site_admin")
		s.SiteAdmin.WriteJSON(e)
	}
	more.More()
	e.ObjField("contributions")
	e.Int(s.Contributions)
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Contributor from json stream.
func (s *Contributor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Contributor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			s.Login.Reset()
			if err := s.Login.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "avatar_url":
			s.AvatarURL.Reset()
			if err := s.AvatarURL.ReadJSON(d); err != nil {
				return err
			}
		case "gravatar_id":
			s.GravatarID.Reset()
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "followers_url":
			s.FollowersURL.Reset()
			if err := s.FollowersURL.ReadJSON(d); err != nil {
				return err
			}
		case "following_url":
			s.FollowingURL.Reset()
			if err := s.FollowingURL.ReadJSON(d); err != nil {
				return err
			}
		case "gists_url":
			s.GistsURL.Reset()
			if err := s.GistsURL.ReadJSON(d); err != nil {
				return err
			}
		case "starred_url":
			s.StarredURL.Reset()
			if err := s.StarredURL.ReadJSON(d); err != nil {
				return err
			}
		case "subscriptions_url":
			s.SubscriptionsURL.Reset()
			if err := s.SubscriptionsURL.ReadJSON(d); err != nil {
				return err
			}
		case "organizations_url":
			s.OrganizationsURL.Reset()
			if err := s.OrganizationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "repos_url":
			s.ReposURL.Reset()
			if err := s.ReposURL.ReadJSON(d); err != nil {
				return err
			}
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "received_events_url":
			s.ReceivedEventsURL.Reset()
			if err := s.ReceivedEventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "site_admin":
			s.SiteAdmin.Reset()
			if err := s.SiteAdmin.ReadJSON(d); err != nil {
				return err
			}
		case "contributions":
			v, err := d.Int()
			s.Contributions = int(v)
			if err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ContributorActivity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("total")
	e.Int(s.Total)
	more.More()
	e.ObjField("weeks")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Weeks {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ContributorActivity from json stream.
func (s *ContributorActivity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ContributorActivity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "total":
			v, err := d.Int()
			s.Total = int(v)
			if err != nil {
				return err
			}
		case "weeks":
			s.Weeks = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ContributorActivityWeeksItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Weeks = append(s.Weeks, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ContributorActivityWeeksItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.W.Set {
		more.More()
		e.ObjField("w")
		s.W.WriteJSON(e)
	}
	if s.A.Set {
		more.More()
		e.ObjField("a")
		s.A.WriteJSON(e)
	}
	if s.D.Set {
		more.More()
		e.ObjField("d")
		s.D.WriteJSON(e)
	}
	if s.C.Set {
		more.More()
		e.ObjField("c")
		s.C.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ContributorActivityWeeksItem from json stream.
func (s *ContributorActivityWeeksItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ContributorActivityWeeksItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "w":
			s.W.Reset()
			if err := s.W.ReadJSON(d); err != nil {
				return err
			}
		case "a":
			s.A.Reset()
			if err := s.A.ReadJSON(d); err != nil {
				return err
			}
		case "d":
			s.D.Reset()
			if err := s.D.ReadJSON(d); err != nil {
				return err
			}
		case "c":
			s.C.Reset()
			if err := s.C.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CredentialAuthorization) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("credential_id")
	e.Int(s.CredentialID)
	more.More()
	e.ObjField("credential_type")
	e.Str(s.CredentialType)
	if s.TokenLastEight.Set {
		more.More()
		e.ObjField("token_last_eight")
		s.TokenLastEight.WriteJSON(e)
	}
	more.More()
	e.ObjField("credential_authorized_at")
	json.WriteDateTime(e, s.CredentialAuthorizedAt)
	if s.Scopes != nil {
		more.More()
		e.ObjField("scopes")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Scopes {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Fingerprint.Set {
		more.More()
		e.ObjField("fingerprint")
		s.Fingerprint.WriteJSON(e)
	}
	if s.CredentialAccessedAt.Set {
		more.More()
		e.ObjField("credential_accessed_at")
		s.CredentialAccessedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.AuthorizedCredentialID.Set {
		more.More()
		e.ObjField("authorized_credential_id")
		s.AuthorizedCredentialID.WriteJSON(e)
	}
	if s.AuthorizedCredentialTitle.Set {
		more.More()
		e.ObjField("authorized_credential_title")
		s.AuthorizedCredentialTitle.WriteJSON(e)
	}
	if s.AuthorizedCredentialNote.Set {
		more.More()
		e.ObjField("authorized_credential_note")
		s.AuthorizedCredentialNote.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads CredentialAuthorization from json stream.
func (s *CredentialAuthorization) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CredentialAuthorization to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "credential_id":
			v, err := d.Int()
			s.CredentialID = int(v)
			if err != nil {
				return err
			}
		case "credential_type":
			v, err := d.Str()
			s.CredentialType = string(v)
			if err != nil {
				return err
			}
		case "token_last_eight":
			s.TokenLastEight.Reset()
			if err := s.TokenLastEight.ReadJSON(d); err != nil {
				return err
			}
		case "credential_authorized_at":
			v, err := json.ReadDateTime(d)
			s.CredentialAuthorizedAt = v
			if err != nil {
				return err
			}
		case "scopes":
			s.Scopes = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Scopes = append(s.Scopes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "fingerprint":
			s.Fingerprint.Reset()
			if err := s.Fingerprint.ReadJSON(d); err != nil {
				return err
			}
		case "credential_accessed_at":
			s.CredentialAccessedAt.Reset()
			if err := s.CredentialAccessedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "authorized_credential_id":
			s.AuthorizedCredentialID.Reset()
			if err := s.AuthorizedCredentialID.ReadJSON(d); err != nil {
				return err
			}
		case "authorized_credential_title":
			s.AuthorizedCredentialTitle.Reset()
			if err := s.AuthorizedCredentialTitle.ReadJSON(d); err != nil {
				return err
			}
		case "authorized_credential_note":
			s.AuthorizedCredentialNote.Reset()
			if err := s.AuthorizedCredentialNote.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeployKey) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("verified")
	e.Bool(s.Verified)
	more.More()
	e.ObjField("created_at")
	e.Str(s.CreatedAt)
	more.More()
	e.ObjField("read_only")
	e.Bool(s.ReadOnly)
	e.ObjEnd()
}

// ReadJSON reads DeployKey from json stream.
func (s *DeployKey) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeployKey to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "verified":
			v, err := d.Bool()
			s.Verified = bool(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := d.Str()
			s.CreatedAt = string(v)
			if err != nil {
				return err
			}
		case "read_only":
			v, err := d.Bool()
			s.ReadOnly = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeploymentBranchPolicy) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("protected_branches")
	e.Bool(s.ProtectedBranches)
	more.More()
	e.ObjField("custom_branch_policies")
	e.Bool(s.CustomBranchPolicies)
	e.ObjEnd()
}

// ReadJSON reads DeploymentBranchPolicy from json stream.
func (s *DeploymentBranchPolicy) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeploymentBranchPolicy to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "protected_branches":
			v, err := d.Bool()
			s.ProtectedBranches = bool(v)
			if err != nil {
				return err
			}
		case "custom_branch_policies":
			v, err := d.Bool()
			s.CustomBranchPolicies = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeploymentReviewerType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads DeploymentReviewerType from json reader.
func (s *DeploymentReviewerType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeploymentReviewerType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = DeploymentReviewerType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeploymentSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("task")
	e.Str(s.Task)
	if s.OriginalEnvironment.Set {
		more.More()
		e.ObjField("original_environment")
		s.OriginalEnvironment.WriteJSON(e)
	}
	more.More()
	e.ObjField("environment")
	e.Str(s.Environment)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("statuses_url")
	json.WriteURI(e, s.StatusesURL)
	more.More()
	e.ObjField("repository_url")
	json.WriteURI(e, s.RepositoryURL)
	if s.TransientEnvironment.Set {
		more.More()
		e.ObjField("transient_environment")
		s.TransientEnvironment.WriteJSON(e)
	}
	if s.ProductionEnvironment.Set {
		more.More()
		e.ObjField("production_environment")
		s.ProductionEnvironment.WriteJSON(e)
	}
	if s.PerformedViaGithubApp.Set {
		more.More()
		e.ObjField("performed_via_github_app")
		s.PerformedViaGithubApp.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads DeploymentSimple from json stream.
func (s *DeploymentSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeploymentSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "task":
			v, err := d.Str()
			s.Task = string(v)
			if err != nil {
				return err
			}
		case "original_environment":
			s.OriginalEnvironment.Reset()
			if err := s.OriginalEnvironment.ReadJSON(d); err != nil {
				return err
			}
		case "environment":
			v, err := d.Str()
			s.Environment = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := json.ReadURI(d)
			s.StatusesURL = v
			if err != nil {
				return err
			}
		case "repository_url":
			v, err := json.ReadURI(d)
			s.RepositoryURL = v
			if err != nil {
				return err
			}
		case "transient_environment":
			s.TransientEnvironment.Reset()
			if err := s.TransientEnvironment.ReadJSON(d); err != nil {
				return err
			}
		case "production_environment":
			s.ProductionEnvironment.Reset()
			if err := s.ProductionEnvironment.ReadJSON(d); err != nil {
				return err
			}
		case "performed_via_github_app":
			s.PerformedViaGithubApp.Reset()
			if err := s.PerformedViaGithubApp.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeploymentStatus) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("creator")
	s.Creator.WriteJSON(e)
	more.More()
	e.ObjField("description")
	e.Str(s.Description)
	if s.Environment.Set {
		more.More()
		e.ObjField("environment")
		s.Environment.WriteJSON(e)
	}
	more.More()
	e.ObjField("target_url")
	json.WriteURI(e, s.TargetURL)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("deployment_url")
	json.WriteURI(e, s.DeploymentURL)
	more.More()
	e.ObjField("repository_url")
	json.WriteURI(e, s.RepositoryURL)
	if s.EnvironmentURL.Set {
		more.More()
		e.ObjField("environment_url")
		s.EnvironmentURL.WriteJSON(e)
	}
	if s.LogURL.Set {
		more.More()
		e.ObjField("log_url")
		s.LogURL.WriteJSON(e)
	}
	if s.PerformedViaGithubApp.Set {
		more.More()
		e.ObjField("performed_via_github_app")
		s.PerformedViaGithubApp.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads DeploymentStatus from json stream.
func (s *DeploymentStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeploymentStatus to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "creator":
			if err := s.Creator.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "environment":
			s.Environment.Reset()
			if err := s.Environment.ReadJSON(d); err != nil {
				return err
			}
		case "target_url":
			v, err := json.ReadURI(d)
			s.TargetURL = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "deployment_url":
			v, err := json.ReadURI(d)
			s.DeploymentURL = v
			if err != nil {
				return err
			}
		case "repository_url":
			v, err := json.ReadURI(d)
			s.RepositoryURL = v
			if err != nil {
				return err
			}
		case "environment_url":
			s.EnvironmentURL.Reset()
			if err := s.EnvironmentURL.ReadJSON(d); err != nil {
				return err
			}
		case "log_url":
			s.LogURL.Reset()
			if err := s.LogURL.ReadJSON(d); err != nil {
				return err
			}
		case "performed_via_github_app":
			s.PerformedViaGithubApp.Reset()
			if err := s.PerformedViaGithubApp.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeploymentStatusState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads DeploymentStatusState from json reader.
func (s *DeploymentStatusState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeploymentStatusState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = DeploymentStatusState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DiffEntry) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("filename")
	e.Str(s.Filename)
	more.More()
	e.ObjField("status")
	s.Status.WriteJSON(e)
	more.More()
	e.ObjField("additions")
	e.Int(s.Additions)
	more.More()
	e.ObjField("deletions")
	e.Int(s.Deletions)
	more.More()
	e.ObjField("changes")
	e.Int(s.Changes)
	more.More()
	e.ObjField("blob_url")
	json.WriteURI(e, s.BlobURL)
	more.More()
	e.ObjField("raw_url")
	json.WriteURI(e, s.RawURL)
	more.More()
	e.ObjField("contents_url")
	json.WriteURI(e, s.ContentsURL)
	if s.Patch.Set {
		more.More()
		e.ObjField("patch")
		s.Patch.WriteJSON(e)
	}
	if s.PreviousFilename.Set {
		more.More()
		e.ObjField("previous_filename")
		s.PreviousFilename.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads DiffEntry from json stream.
func (s *DiffEntry) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DiffEntry to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "filename":
			v, err := d.Str()
			s.Filename = string(v)
			if err != nil {
				return err
			}
		case "status":
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "additions":
			v, err := d.Int()
			s.Additions = int(v)
			if err != nil {
				return err
			}
		case "deletions":
			v, err := d.Int()
			s.Deletions = int(v)
			if err != nil {
				return err
			}
		case "changes":
			v, err := d.Int()
			s.Changes = int(v)
			if err != nil {
				return err
			}
		case "blob_url":
			v, err := json.ReadURI(d)
			s.BlobURL = v
			if err != nil {
				return err
			}
		case "raw_url":
			v, err := json.ReadURI(d)
			s.RawURL = v
			if err != nil {
				return err
			}
		case "contents_url":
			v, err := json.ReadURI(d)
			s.ContentsURL = v
			if err != nil {
				return err
			}
		case "patch":
			s.Patch.Reset()
			if err := s.Patch.ReadJSON(d); err != nil {
				return err
			}
		case "previous_filename":
			s.PreviousFilename.Reset()
			if err := s.PreviousFilename.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DiffEntryStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads DiffEntryStatus from json reader.
func (s *DiffEntryStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DiffEntryStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = DiffEntryStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Email) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	more.More()
	e.ObjField("primary")
	e.Bool(s.Primary)
	more.More()
	e.ObjField("verified")
	e.Bool(s.Verified)
	more.More()
	e.ObjField("visibility")
	s.Visibility.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads Email from json stream.
func (s *Email) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Email to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "primary":
			v, err := d.Bool()
			s.Primary = bool(v)
			if err != nil {
				return err
			}
		case "verified":
			v, err := d.Bool()
			s.Verified = bool(v)
			if err != nil {
				return err
			}
		case "visibility":
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EmojisGetOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EmojisGetOK from json stream.
func (s *EmojisGetOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EmojisGetOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EmptyObject) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EmptyObject from json stream.
func (s *EmptyObject) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EmptyObject to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnabledOrganizations) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads EnabledOrganizations from json reader.
func (s *EnabledOrganizations) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnabledOrganizations to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = EnabledOrganizations(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s EnabledRepositories) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads EnabledRepositories from json reader.
func (s *EnabledRepositories) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnabledRepositories to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = EnabledRepositories(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent from json stream.
func (s *EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseNoContent from json stream.
func (s *EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	if s.SelectedOrganizationIds != nil {
		more.More()
		e.ObjField("selected_organization_ids")
		more.Down()
		e.ArrStart()
		for _, elem := range s.SelectedOrganizationIds {
			more.More()
			e.Int(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Runners != nil {
		more.More()
		e.ObjField("runners")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Runners {
			more.More()
			e.Int(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq from json stream.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "selected_organization_ids":
			s.SelectedOrganizationIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.SelectedOrganizationIds = append(s.SelectedOrganizationIds, elem)
				return nil
			}); err != nil {
				return err
			}
		case "runners":
			s.Runners = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Runners = append(s.Runners, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility from json reader.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminDeleteScimGroupFromEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminDeleteScimGroupFromEnterpriseNoContent from json stream.
func (s *EnterpriseAdminDeleteScimGroupFromEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminDeleteScimGroupFromEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseNoContent from json stream.
func (s *EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseNoContent from json stream.
func (s *EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminDeleteUserFromEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminDeleteUserFromEnterpriseNoContent from json stream.
func (s *EnterpriseAdminDeleteUserFromEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminDeleteUserFromEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseNoContent from json stream.
func (s *EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseNoContent from json stream.
func (s *EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminGetAuditLogInclude) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads EnterpriseAdminGetAuditLogInclude from json reader.
func (s *EnterpriseAdminGetAuditLogInclude) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminGetAuditLogInclude to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = EnterpriseAdminGetAuditLogInclude(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminGetAuditLogOrder) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads EnterpriseAdminGetAuditLogOrder from json reader.
func (s *EnterpriseAdminGetAuditLogOrder) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminGetAuditLogOrder to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = EnterpriseAdminGetAuditLogOrder(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Float64(s.TotalCount)
	more.More()
	e.ObjField("organizations")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Organizations {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK from json stream.
func (s *EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Float64()
			s.TotalCount = float64(v)
			if err != nil {
				return err
			}
		case "organizations":
			s.Organizations = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem OrganizationSimple
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Organizations = append(s.Organizations, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Float64(s.TotalCount)
	more.More()
	e.ObjField("organizations")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Organizations {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK from json stream.
func (s *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Float64()
			s.TotalCount = float64(v)
			if err != nil {
				return err
			}
		case "organizations":
			s.Organizations = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem OrganizationSimple
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Organizations = append(s.Organizations, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Float64(s.TotalCount)
	more.More()
	e.ObjField("runner_groups")
	more.Down()
	e.ArrStart()
	for _, elem := range s.RunnerGroups {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK from json stream.
func (s *EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Float64()
			s.TotalCount = float64(v)
			if err != nil {
				return err
			}
		case "runner_groups":
			s.RunnerGroups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem RunnerGroupsEnterprise
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.RunnerGroups = append(s.RunnerGroups, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminListSelfHostedRunnersForEnterpriseOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.TotalCount.Set {
		more.More()
		e.ObjField("total_count")
		s.TotalCount.WriteJSON(e)
	}
	if s.Runners != nil {
		more.More()
		e.ObjField("runners")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Runners {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminListSelfHostedRunnersForEnterpriseOK from json stream.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterpriseOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminListSelfHostedRunnersForEnterpriseOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			s.TotalCount.Reset()
			if err := s.TotalCount.ReadJSON(d); err != nil {
				return err
			}
		case "runners":
			s.Runners = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Runner
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Runners = append(s.Runners, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Float64(s.TotalCount)
	more.More()
	e.ObjField("runners")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Runners {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK from json stream.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Float64()
			s.TotalCount = float64(v)
			if err != nil {
				return err
			}
		case "runners":
			s.Runners = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Runner
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Runners = append(s.Runners, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("displayName")
	e.Str(s.DisplayName)
	if s.Members != nil {
		more.More()
		e.ObjField("members")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Members {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseGroupReq from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminProvisionAndInviteEnterpriseGroupReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "displayName":
			v, err := d.Str()
			s.DisplayName = string(v)
			if err != nil {
				return err
			}
		case "members":
			s.Members = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Members = append(s.Members, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("value")
	e.Str(s.Value)
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			v, err := d.Str()
			s.Value = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("userName")
	e.Str(s.UserName)
	more.More()
	e.ObjField("name")
	s.Name.WriteJSON(e)
	more.More()
	e.ObjField("emails")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Emails {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if s.Groups != nil {
		more.More()
		e.ObjField("groups")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseUserReq from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminProvisionAndInviteEnterpriseUserReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "userName":
			v, err := d.Str()
			s.UserName = string(v)
			if err != nil {
				return err
			}
		case "name":
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "emails":
			s.Emails = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Emails = append(s.Emails, elem)
				return nil
			}); err != nil {
				return err
			}
		case "groups":
			s.Groups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("value")
	e.Str(s.Value)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("primary")
	e.Bool(s.Primary)
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			v, err := d.Str()
			s.Value = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "primary":
			v, err := d.Bool()
			s.Primary = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		e.ObjField("value")
		s.Value.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserReqName) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("givenName")
	e.Str(s.GivenName)
	more.More()
	e.ObjField("familyName")
	e.Str(s.FamilyName)
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseUserReqName from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqName) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminProvisionAndInviteEnterpriseUserReqName to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "givenName":
			v, err := d.Str()
			s.GivenName = string(v)
			if err != nil {
				return err
			}
		case "familyName":
			v, err := d.Str()
			s.FamilyName = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent from json stream.
func (s *EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseNoContent from json stream.
func (s *EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetAllowedActionsEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetAllowedActionsEnterpriseNoContent from json stream.
func (s *EnterpriseAdminSetAllowedActionsEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetAllowedActionsEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetGithubActionsPermissionsEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetGithubActionsPermissionsEnterpriseNoContent from json stream.
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetGithubActionsPermissionsEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("enabled_organizations")
	s.EnabledOrganizations.WriteJSON(e)
	if s.AllowedActions.Set {
		more.More()
		e.ObjField("allowed_actions")
		s.AllowedActions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq from json stream.
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled_organizations":
			if err := s.EnabledOrganizations.ReadJSON(d); err != nil {
				return err
			}
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("displayName")
	e.Str(s.DisplayName)
	if s.Members != nil {
		more.More()
		e.ObjField("members")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Members {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "displayName":
			v, err := d.Str()
			s.DisplayName = string(v)
			if err != nil {
				return err
			}
		case "members":
			s.Members = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Members = append(s.Members, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("value")
	e.Str(s.Value)
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			v, err := d.Str()
			s.Value = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("userName")
	e.Str(s.UserName)
	more.More()
	e.ObjField("name")
	s.Name.WriteJSON(e)
	more.More()
	e.ObjField("emails")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Emails {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if s.Groups != nil {
		more.More()
		e.ObjField("groups")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "userName":
			v, err := d.Str()
			s.UserName = string(v)
			if err != nil {
				return err
			}
		case "name":
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "emails":
			s.Emails = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Emails = append(s.Emails, elem)
				return nil
			}); err != nil {
				return err
			}
		case "groups":
			s.Groups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("value")
	e.Str(s.Value)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("primary")
	e.Bool(s.Primary)
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			v, err := d.Str()
			s.Value = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "primary":
			v, err := d.Bool()
			s.Primary = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		e.ObjField("value")
		s.Value.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("givenName")
	e.Str(s.GivenName)
	more.More()
	e.ObjField("familyName")
	e.Str(s.FamilyName)
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "givenName":
			v, err := d.Str()
			s.GivenName = string(v)
			if err != nil {
				return err
			}
		case "familyName":
			v, err := d.Str()
			s.FamilyName = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent from json stream.
func (s *EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("selected_organization_ids")
	more.Down()
	e.ArrStart()
	for _, elem := range s.SelectedOrganizationIds {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq from json stream.
func (s *EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "selected_organization_ids":
			s.SelectedOrganizationIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.SelectedOrganizationIds = append(s.SelectedOrganizationIds, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseNoContent from json stream.
func (s *EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("selected_organization_ids")
	more.Down()
	e.ArrStart()
	for _, elem := range s.SelectedOrganizationIds {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq from json stream.
func (s *EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "selected_organization_ids":
			s.SelectedOrganizationIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.SelectedOrganizationIds = append(s.SelectedOrganizationIds, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseNoContent from json stream.
func (s *EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("runners")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Runners {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq from json stream.
func (s *EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "runners":
			s.Runners = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Runners = append(s.Runners, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminUpdateAttributeForEnterpriseUserReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("Operations")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Operations {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminUpdateAttributeForEnterpriseUserReq from json stream.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminUpdateAttributeForEnterpriseUserReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "Operations":
			s.Operations = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Operations = append(s.Operations, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem from json stream.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq from json stream.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility from json reader.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s EnvironmentApprovals) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("environments")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Environments {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("comment")
	e.Str(s.Comment)
	e.ObjEnd()
}

// ReadJSON reads EnvironmentApprovals from json stream.
func (s *EnvironmentApprovals) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnvironmentApprovals to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "environments":
			s.Environments = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem EnvironmentApprovalsEnvironmentsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Environments = append(s.Environments, elem)
				return nil
			}); err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "comment":
			v, err := d.Str()
			s.Comment = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnvironmentApprovalsEnvironmentsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.UpdatedAt.Set {
		more.More()
		e.ObjField("updated_at")
		s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads EnvironmentApprovalsEnvironmentsItem from json stream.
func (s *EnvironmentApprovalsEnvironmentsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnvironmentApprovalsEnvironmentsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EnvironmentApprovalsState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads EnvironmentApprovalsState from json reader.
func (s *EnvironmentApprovalsState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EnvironmentApprovalsState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = EnvironmentApprovalsState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Event) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Str(s.ID)
	more.More()
	e.ObjField("type")
	s.Type.WriteJSON(e)
	more.More()
	e.ObjField("actor")
	s.Actor.WriteJSON(e)
	more.More()
	e.ObjField("repo")
	s.Repo.WriteJSON(e)
	if s.Org.Set {
		more.More()
		e.ObjField("org")
		s.Org.WriteJSON(e)
	}
	more.More()
	e.ObjField("payload")
	s.Payload.WriteJSON(e)
	more.More()
	e.ObjField("public")
	e.Bool(s.Public)
	more.More()
	e.ObjField("created_at")
	s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	e.ObjEnd()
}

// ReadJSON reads Event from json stream.
func (s *Event) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Event to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "type":
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "actor":
			if err := s.Actor.ReadJSON(d); err != nil {
				return err
			}
		case "repo":
			if err := s.Repo.ReadJSON(d); err != nil {
				return err
			}
		case "org":
			s.Org.Reset()
			if err := s.Org.ReadJSON(d); err != nil {
				return err
			}
		case "payload":
			if err := s.Payload.ReadJSON(d); err != nil {
				return err
			}
		case "public":
			v, err := d.Bool()
			s.Public = bool(v)
			if err != nil {
				return err
			}
		case "created_at":
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EventPayload) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Action.Set {
		more.More()
		e.ObjField("action")
		s.Action.WriteJSON(e)
	}
	if s.Issue.Set {
		more.More()
		e.ObjField("issue")
		s.Issue.WriteJSON(e)
	}
	if s.Comment.Set {
		more.More()
		e.ObjField("comment")
		s.Comment.WriteJSON(e)
	}
	if s.Pages != nil {
		more.More()
		e.ObjField("pages")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Pages {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads EventPayload from json stream.
func (s *EventPayload) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EventPayload to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(d); err != nil {
				return err
			}
		case "issue":
			s.Issue.Reset()
			if err := s.Issue.ReadJSON(d); err != nil {
				return err
			}
		case "comment":
			s.Comment.Reset()
			if err := s.Comment.ReadJSON(d); err != nil {
				return err
			}
		case "pages":
			s.Pages = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem EventPayloadPagesItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Pages = append(s.Pages, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EventPayloadPagesItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.PageName.Set {
		more.More()
		e.ObjField("page_name")
		s.PageName.WriteJSON(e)
	}
	if s.Title.Set {
		more.More()
		e.ObjField("title")
		s.Title.WriteJSON(e)
	}
	if s.Summary.Set {
		more.More()
		e.ObjField("summary")
		s.Summary.WriteJSON(e)
	}
	if s.Action.Set {
		more.More()
		e.ObjField("action")
		s.Action.WriteJSON(e)
	}
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads EventPayloadPagesItem from json stream.
func (s *EventPayloadPagesItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EventPayloadPagesItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "page_name":
			s.PageName.Reset()
			if err := s.PageName.ReadJSON(d); err != nil {
				return err
			}
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "summary":
			s.Summary.Reset()
			if err := s.Summary.ReadJSON(d); err != nil {
				return err
			}
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EventRepo) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads EventRepo from json stream.
func (s *EventRepo) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EventRepo to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Feed) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("timeline_url")
	e.Str(s.TimelineURL)
	more.More()
	e.ObjField("user_url")
	e.Str(s.UserURL)
	if s.CurrentUserPublicURL.Set {
		more.More()
		e.ObjField("current_user_public_url")
		s.CurrentUserPublicURL.WriteJSON(e)
	}
	if s.CurrentUserURL.Set {
		more.More()
		e.ObjField("current_user_url")
		s.CurrentUserURL.WriteJSON(e)
	}
	if s.CurrentUserActorURL.Set {
		more.More()
		e.ObjField("current_user_actor_url")
		s.CurrentUserActorURL.WriteJSON(e)
	}
	if s.CurrentUserOrganizationURL.Set {
		more.More()
		e.ObjField("current_user_organization_url")
		s.CurrentUserOrganizationURL.WriteJSON(e)
	}
	if s.CurrentUserOrganizationUrls != nil {
		more.More()
		e.ObjField("current_user_organization_urls")
		more.Down()
		e.ArrStart()
		for _, elem := range s.CurrentUserOrganizationUrls {
			more.More()
			json.WriteURI(e, elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.SecurityAdvisoriesURL.Set {
		more.More()
		e.ObjField("security_advisories_url")
		s.SecurityAdvisoriesURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("_links")
	s.Links.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads Feed from json stream.
func (s *Feed) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Feed to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "timeline_url":
			v, err := d.Str()
			s.TimelineURL = string(v)
			if err != nil {
				return err
			}
		case "user_url":
			v, err := d.Str()
			s.UserURL = string(v)
			if err != nil {
				return err
			}
		case "current_user_public_url":
			s.CurrentUserPublicURL.Reset()
			if err := s.CurrentUserPublicURL.ReadJSON(d); err != nil {
				return err
			}
		case "current_user_url":
			s.CurrentUserURL.Reset()
			if err := s.CurrentUserURL.ReadJSON(d); err != nil {
				return err
			}
		case "current_user_actor_url":
			s.CurrentUserActorURL.Reset()
			if err := s.CurrentUserActorURL.ReadJSON(d); err != nil {
				return err
			}
		case "current_user_organization_url":
			s.CurrentUserOrganizationURL.Reset()
			if err := s.CurrentUserOrganizationURL.ReadJSON(d); err != nil {
				return err
			}
		case "current_user_organization_urls":
			s.CurrentUserOrganizationUrls = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem url.URL
				v, err := json.ReadURI(d)
				elem = v
				if err != nil {
					return err
				}
				s.CurrentUserOrganizationUrls = append(s.CurrentUserOrganizationUrls, elem)
				return nil
			}); err != nil {
				return err
			}
		case "security_advisories_url":
			s.SecurityAdvisoriesURL.Reset()
			if err := s.SecurityAdvisoriesURL.ReadJSON(d); err != nil {
				return err
			}
		case "_links":
			if err := s.Links.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FeedLinks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("timeline")
	s.Timeline.WriteJSON(e)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	if s.SecurityAdvisories.Set {
		more.More()
		e.ObjField("security_advisories")
		s.SecurityAdvisories.WriteJSON(e)
	}
	if s.CurrentUser.Set {
		more.More()
		e.ObjField("current_user")
		s.CurrentUser.WriteJSON(e)
	}
	if s.CurrentUserPublic.Set {
		more.More()
		e.ObjField("current_user_public")
		s.CurrentUserPublic.WriteJSON(e)
	}
	if s.CurrentUserActor.Set {
		more.More()
		e.ObjField("current_user_actor")
		s.CurrentUserActor.WriteJSON(e)
	}
	if s.CurrentUserOrganization.Set {
		more.More()
		e.ObjField("current_user_organization")
		s.CurrentUserOrganization.WriteJSON(e)
	}
	if s.CurrentUserOrganizations != nil {
		more.More()
		e.ObjField("current_user_organizations")
		more.Down()
		e.ArrStart()
		for _, elem := range s.CurrentUserOrganizations {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads FeedLinks from json stream.
func (s *FeedLinks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FeedLinks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "timeline":
			if err := s.Timeline.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "security_advisories":
			s.SecurityAdvisories.Reset()
			if err := s.SecurityAdvisories.ReadJSON(d); err != nil {
				return err
			}
		case "current_user":
			s.CurrentUser.Reset()
			if err := s.CurrentUser.ReadJSON(d); err != nil {
				return err
			}
		case "current_user_public":
			s.CurrentUserPublic.Reset()
			if err := s.CurrentUserPublic.ReadJSON(d); err != nil {
				return err
			}
		case "current_user_actor":
			s.CurrentUserActor.Reset()
			if err := s.CurrentUserActor.ReadJSON(d); err != nil {
				return err
			}
		case "current_user_organization":
			s.CurrentUserOrganization.Reset()
			if err := s.CurrentUserOrganization.ReadJSON(d); err != nil {
				return err
			}
		case "current_user_organizations":
			s.CurrentUserOrganizations = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem LinkWithType
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.CurrentUserOrganizations = append(s.CurrentUserOrganizations, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FileCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	more.More()
	e.ObjField("commit")
	s.Commit.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads FileCommit from json stream.
func (s *FileCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FileCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		case "commit":
			if err := s.Commit.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.Author.Set {
		more.More()
		e.ObjField("author")
		s.Author.WriteJSON(e)
	}
	if s.Committer.Set {
		more.More()
		e.ObjField("committer")
		s.Committer.WriteJSON(e)
	}
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.Tree.Set {
		more.More()
		e.ObjField("tree")
		s.Tree.WriteJSON(e)
	}
	if s.Parents != nil {
		more.More()
		e.ObjField("parents")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Parents {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Verification.Set {
		more.More()
		e.ObjField("verification")
		s.Verification.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FileCommitCommit from json stream.
func (s *FileCommitCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FileCommitCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "author":
			s.Author.Reset()
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			s.Committer.Reset()
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "tree":
			s.Tree.Reset()
			if err := s.Tree.ReadJSON(d); err != nil {
				return err
			}
		case "parents":
			s.Parents = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem FileCommitCommitParentsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Parents = append(s.Parents, elem)
				return nil
			}); err != nil {
				return err
			}
		case "verification":
			s.Verification.Reset()
			if err := s.Verification.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommitAuthor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Date.Set {
		more.More()
		e.ObjField("date")
		s.Date.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FileCommitCommitAuthor from json stream.
func (s *FileCommitCommitAuthor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FileCommitCommitAuthor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommitCommitter) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Date.Set {
		more.More()
		e.ObjField("date")
		s.Date.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FileCommitCommitCommitter from json stream.
func (s *FileCommitCommitCommitter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FileCommitCommitCommitter to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommitParentsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FileCommitCommitParentsItem from json stream.
func (s *FileCommitCommitParentsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FileCommitCommitParentsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommitTree) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FileCommitCommitTree from json stream.
func (s *FileCommitCommitTree) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FileCommitCommitTree to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommitVerification) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Verified.Set {
		more.More()
		e.ObjField("verified")
		s.Verified.WriteJSON(e)
	}
	if s.Reason.Set {
		more.More()
		e.ObjField("reason")
		s.Reason.WriteJSON(e)
	}
	if s.Signature.Set {
		more.More()
		e.ObjField("signature")
		s.Signature.WriteJSON(e)
	}
	if s.Payload.Set {
		more.More()
		e.ObjField("payload")
		s.Payload.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FileCommitCommitVerification from json stream.
func (s *FileCommitCommitVerification) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FileCommitCommitVerification to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "verified":
			s.Verified.Reset()
			if err := s.Verified.ReadJSON(d); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(d); err != nil {
				return err
			}
		case "signature":
			s.Signature.Reset()
			if err := s.Signature.ReadJSON(d); err != nil {
				return err
			}
		case "payload":
			s.Payload.Reset()
			if err := s.Payload.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FileCommitContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Path.Set {
		more.More()
		e.ObjField("path")
		s.Path.WriteJSON(e)
	}
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	if s.Size.Set {
		more.More()
		e.ObjField("size")
		s.Size.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.GitURL.Set {
		more.More()
		e.ObjField("git_url")
		s.GitURL.WriteJSON(e)
	}
	if s.DownloadURL.Set {
		more.More()
		e.ObjField("download_url")
		s.DownloadURL.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	if s.Links.Set {
		more.More()
		e.ObjField("_links")
		s.Links.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FileCommitContent from json stream.
func (s *FileCommitContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FileCommitContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_url":
			s.GitURL.Reset()
			if err := s.GitURL.ReadJSON(d); err != nil {
				return err
			}
		case "download_url":
			s.DownloadURL.Reset()
			if err := s.DownloadURL.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "_links":
			s.Links.Reset()
			if err := s.Links.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FileCommitContentLinks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Self.Set {
		more.More()
		e.ObjField("self")
		s.Self.WriteJSON(e)
	}
	if s.Git.Set {
		more.More()
		e.ObjField("git")
		s.Git.WriteJSON(e)
	}
	if s.HTML.Set {
		more.More()
		e.ObjField("html")
		s.HTML.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FileCommitContentLinks from json stream.
func (s *FileCommitContentLinks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FileCommitContentLinks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "self":
			s.Self.Reset()
			if err := s.Self.ReadJSON(d); err != nil {
				return err
			}
		case "git":
			s.Git.Reset()
			if err := s.Git.ReadJSON(d); err != nil {
				return err
			}
		case "html":
			s.HTML.Reset()
			if err := s.HTML.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ForbiddenGist) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Block.Set {
		more.More()
		e.ObjField("block")
		s.Block.WriteJSON(e)
	}
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ForbiddenGist from json stream.
func (s *ForbiddenGist) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ForbiddenGist to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "block":
			s.Block.Reset()
			if err := s.Block.ReadJSON(d); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ForbiddenGistBlock) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Reason.Set {
		more.More()
		e.ObjField("reason")
		s.Reason.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ForbiddenGistBlock from json stream.
func (s *ForbiddenGistBlock) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ForbiddenGistBlock to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Found) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads Found from json stream.
func (s *Found) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Found to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FullRepository) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("full_name")
	e.Str(s.FullName)
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("private")
	e.Bool(s.Private)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("fork")
	e.Bool(s.Fork)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("archive_url")
	e.Str(s.ArchiveURL)
	more.More()
	e.ObjField("assignees_url")
	e.Str(s.AssigneesURL)
	more.More()
	e.ObjField("blobs_url")
	e.Str(s.BlobsURL)
	more.More()
	e.ObjField("branches_url")
	e.Str(s.BranchesURL)
	more.More()
	e.ObjField("collaborators_url")
	e.Str(s.CollaboratorsURL)
	more.More()
	e.ObjField("comments_url")
	e.Str(s.CommentsURL)
	more.More()
	e.ObjField("commits_url")
	e.Str(s.CommitsURL)
	more.More()
	e.ObjField("compare_url")
	e.Str(s.CompareURL)
	more.More()
	e.ObjField("contents_url")
	e.Str(s.ContentsURL)
	more.More()
	e.ObjField("contributors_url")
	json.WriteURI(e, s.ContributorsURL)
	more.More()
	e.ObjField("deployments_url")
	json.WriteURI(e, s.DeploymentsURL)
	more.More()
	e.ObjField("downloads_url")
	json.WriteURI(e, s.DownloadsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("git_commits_url")
	e.Str(s.GitCommitsURL)
	more.More()
	e.ObjField("git_refs_url")
	e.Str(s.GitRefsURL)
	more.More()
	e.ObjField("git_tags_url")
	e.Str(s.GitTagsURL)
	more.More()
	e.ObjField("git_url")
	e.Str(s.GitURL)
	more.More()
	e.ObjField("issue_comment_url")
	e.Str(s.IssueCommentURL)
	more.More()
	e.ObjField("issue_events_url")
	e.Str(s.IssueEventsURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("keys_url")
	e.Str(s.KeysURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("languages_url")
	json.WriteURI(e, s.LanguagesURL)
	more.More()
	e.ObjField("merges_url")
	json.WriteURI(e, s.MergesURL)
	more.More()
	e.ObjField("milestones_url")
	e.Str(s.MilestonesURL)
	more.More()
	e.ObjField("notifications_url")
	e.Str(s.NotificationsURL)
	more.More()
	e.ObjField("pulls_url")
	e.Str(s.PullsURL)
	more.More()
	e.ObjField("releases_url")
	e.Str(s.ReleasesURL)
	more.More()
	e.ObjField("ssh_url")
	e.Str(s.SSHURL)
	more.More()
	e.ObjField("stargazers_url")
	json.WriteURI(e, s.StargazersURL)
	more.More()
	e.ObjField("statuses_url")
	e.Str(s.StatusesURL)
	more.More()
	e.ObjField("subscribers_url")
	json.WriteURI(e, s.SubscribersURL)
	more.More()
	e.ObjField("subscription_url")
	json.WriteURI(e, s.SubscriptionURL)
	more.More()
	e.ObjField("tags_url")
	json.WriteURI(e, s.TagsURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("trees_url")
	e.Str(s.TreesURL)
	more.More()
	e.ObjField("clone_url")
	e.Str(s.CloneURL)
	more.More()
	e.ObjField("mirror_url")
	s.MirrorURL.WriteJSON(e)
	more.More()
	e.ObjField("hooks_url")
	json.WriteURI(e, s.HooksURL)
	more.More()
	e.ObjField("svn_url")
	json.WriteURI(e, s.SvnURL)
	more.More()
	e.ObjField("homepage")
	s.Homepage.WriteJSON(e)
	more.More()
	e.ObjField("language")
	s.Language.WriteJSON(e)
	more.More()
	e.ObjField("forks_count")
	e.Int(s.ForksCount)
	more.More()
	e.ObjField("stargazers_count")
	e.Int(s.StargazersCount)
	more.More()
	e.ObjField("watchers_count")
	e.Int(s.WatchersCount)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	more.More()
	e.ObjField("default_branch")
	e.Str(s.DefaultBranch)
	more.More()
	e.ObjField("open_issues_count")
	e.Int(s.OpenIssuesCount)
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("has_issues")
	e.Bool(s.HasIssues)
	more.More()
	e.ObjField("has_projects")
	e.Bool(s.HasProjects)
	more.More()
	e.ObjField("has_wiki")
	e.Bool(s.HasWiki)
	more.More()
	e.ObjField("has_pages")
	e.Bool(s.HasPages)
	more.More()
	e.ObjField("has_downloads")
	e.Bool(s.HasDownloads)
	more.More()
	e.ObjField("archived")
	e.Bool(s.Archived)
	more.More()
	e.ObjField("disabled")
	e.Bool(s.Disabled)
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	more.More()
	e.ObjField("pushed_at")
	json.WriteDateTime(e, s.PushedAt)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	if s.TemplateRepository.Set {
		more.More()
		e.ObjField("template_repository")
		s.TemplateRepository.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowAutoMerge.Set {
		more.More()
		e.ObjField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.AllowForking.Set {
		more.More()
		e.ObjField("allow_forking")
		s.AllowForking.WriteJSON(e)
	}
	more.More()
	e.ObjField("subscribers_count")
	e.Int(s.SubscribersCount)
	more.More()
	e.ObjField("network_count")
	e.Int(s.NetworkCount)
	more.More()
	e.ObjField("license")
	s.License.WriteJSON(e)
	if s.Organization.Set {
		more.More()
		e.ObjField("organization")
		s.Organization.WriteJSON(e)
	}
	if s.Parent.Set {
		more.More()
		e.ObjField("parent")
		s.Parent.WriteJSON(e)
	}
	if s.Source.Set {
		more.More()
		e.ObjField("source")
		s.Source.WriteJSON(e)
	}
	more.More()
	e.ObjField("forks")
	e.Int(s.Forks)
	if s.MasterBranch.Set {
		more.More()
		e.ObjField("master_branch")
		s.MasterBranch.WriteJSON(e)
	}
	more.More()
	e.ObjField("open_issues")
	e.Int(s.OpenIssues)
	more.More()
	e.ObjField("watchers")
	e.Int(s.Watchers)
	if s.AnonymousAccessEnabled.Set {
		more.More()
		e.ObjField("anonymous_access_enabled")
		s.AnonymousAccessEnabled.WriteJSON(e)
	}
	if s.CodeOfConduct.Set {
		more.More()
		e.ObjField("code_of_conduct")
		s.CodeOfConduct.WriteJSON(e)
	}
	if s.SecurityAndAnalysis.Set {
		more.More()
		e.ObjField("security_and_analysis")
		s.SecurityAndAnalysis.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FullRepository from json stream.
func (s *FullRepository) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FullRepository to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "full_name":
			v, err := d.Str()
			s.FullName = string(v)
			if err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			v, err := d.Bool()
			s.Private = bool(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "fork":
			v, err := d.Bool()
			s.Fork = bool(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "archive_url":
			v, err := d.Str()
			s.ArchiveURL = string(v)
			if err != nil {
				return err
			}
		case "assignees_url":
			v, err := d.Str()
			s.AssigneesURL = string(v)
			if err != nil {
				return err
			}
		case "blobs_url":
			v, err := d.Str()
			s.BlobsURL = string(v)
			if err != nil {
				return err
			}
		case "branches_url":
			v, err := d.Str()
			s.BranchesURL = string(v)
			if err != nil {
				return err
			}
		case "collaborators_url":
			v, err := d.Str()
			s.CollaboratorsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := d.Str()
			s.CommentsURL = string(v)
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := d.Str()
			s.CommitsURL = string(v)
			if err != nil {
				return err
			}
		case "compare_url":
			v, err := d.Str()
			s.CompareURL = string(v)
			if err != nil {
				return err
			}
		case "contents_url":
			v, err := d.Str()
			s.ContentsURL = string(v)
			if err != nil {
				return err
			}
		case "contributors_url":
			v, err := json.ReadURI(d)
			s.ContributorsURL = v
			if err != nil {
				return err
			}
		case "deployments_url":
			v, err := json.ReadURI(d)
			s.DeploymentsURL = v
			if err != nil {
				return err
			}
		case "downloads_url":
			v, err := json.ReadURI(d)
			s.DownloadsURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "git_commits_url":
			v, err := d.Str()
			s.GitCommitsURL = string(v)
			if err != nil {
				return err
			}
		case "git_refs_url":
			v, err := d.Str()
			s.GitRefsURL = string(v)
			if err != nil {
				return err
			}
		case "git_tags_url":
			v, err := d.Str()
			s.GitTagsURL = string(v)
			if err != nil {
				return err
			}
		case "git_url":
			v, err := d.Str()
			s.GitURL = string(v)
			if err != nil {
				return err
			}
		case "issue_comment_url":
			v, err := d.Str()
			s.IssueCommentURL = string(v)
			if err != nil {
				return err
			}
		case "issue_events_url":
			v, err := d.Str()
			s.IssueEventsURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "keys_url":
			v, err := d.Str()
			s.KeysURL = string(v)
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "languages_url":
			v, err := json.ReadURI(d)
			s.LanguagesURL = v
			if err != nil {
				return err
			}
		case "merges_url":
			v, err := json.ReadURI(d)
			s.MergesURL = v
			if err != nil {
				return err
			}
		case "milestones_url":
			v, err := d.Str()
			s.MilestonesURL = string(v)
			if err != nil {
				return err
			}
		case "notifications_url":
			v, err := d.Str()
			s.NotificationsURL = string(v)
			if err != nil {
				return err
			}
		case "pulls_url":
			v, err := d.Str()
			s.PullsURL = string(v)
			if err != nil {
				return err
			}
		case "releases_url":
			v, err := d.Str()
			s.ReleasesURL = string(v)
			if err != nil {
				return err
			}
		case "ssh_url":
			v, err := d.Str()
			s.SSHURL = string(v)
			if err != nil {
				return err
			}
		case "stargazers_url":
			v, err := json.ReadURI(d)
			s.StargazersURL = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := d.Str()
			s.StatusesURL = string(v)
			if err != nil {
				return err
			}
		case "subscribers_url":
			v, err := json.ReadURI(d)
			s.SubscribersURL = v
			if err != nil {
				return err
			}
		case "subscription_url":
			v, err := json.ReadURI(d)
			s.SubscriptionURL = v
			if err != nil {
				return err
			}
		case "tags_url":
			v, err := json.ReadURI(d)
			s.TagsURL = v
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "trees_url":
			v, err := d.Str()
			s.TreesURL = string(v)
			if err != nil {
				return err
			}
		case "clone_url":
			v, err := d.Str()
			s.CloneURL = string(v)
			if err != nil {
				return err
			}
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "hooks_url":
			v, err := json.ReadURI(d)
			s.HooksURL = v
			if err != nil {
				return err
			}
		case "svn_url":
			v, err := json.ReadURI(d)
			s.SvnURL = v
			if err != nil {
				return err
			}
		case "homepage":
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "forks_count":
			v, err := d.Int()
			s.ForksCount = int(v)
			if err != nil {
				return err
			}
		case "stargazers_count":
			v, err := d.Int()
			s.StargazersCount = int(v)
			if err != nil {
				return err
			}
		case "watchers_count":
			v, err := d.Int()
			s.WatchersCount = int(v)
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		case "default_branch":
			v, err := d.Str()
			s.DefaultBranch = string(v)
			if err != nil {
				return err
			}
		case "open_issues_count":
			v, err := d.Int()
			s.OpenIssuesCount = int(v)
			if err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "has_issues":
			v, err := d.Bool()
			s.HasIssues = bool(v)
			if err != nil {
				return err
			}
		case "has_projects":
			v, err := d.Bool()
			s.HasProjects = bool(v)
			if err != nil {
				return err
			}
		case "has_wiki":
			v, err := d.Bool()
			s.HasWiki = bool(v)
			if err != nil {
				return err
			}
		case "has_pages":
			v, err := d.Bool()
			s.HasPages = bool(v)
			if err != nil {
				return err
			}
		case "has_downloads":
			v, err := d.Bool()
			s.HasDownloads = bool(v)
			if err != nil {
				return err
			}
		case "archived":
			v, err := d.Bool()
			s.Archived = bool(v)
			if err != nil {
				return err
			}
		case "disabled":
			v, err := d.Bool()
			s.Disabled = bool(v)
			if err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "pushed_at":
			v, err := json.ReadDateTime(d)
			s.PushedAt = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(d); err != nil {
				return err
			}
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(d); err != nil {
				return err
			}
		case "subscribers_count":
			v, err := d.Int()
			s.SubscribersCount = int(v)
			if err != nil {
				return err
			}
		case "network_count":
			v, err := d.Int()
			s.NetworkCount = int(v)
			if err != nil {
				return err
			}
		case "license":
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "organization":
			s.Organization.Reset()
			if err := s.Organization.ReadJSON(d); err != nil {
				return err
			}
		case "parent":
			s.Parent.Reset()
			if err := s.Parent.ReadJSON(d); err != nil {
				return err
			}
		case "source":
			s.Source.Reset()
			if err := s.Source.ReadJSON(d); err != nil {
				return err
			}
		case "forks":
			v, err := d.Int()
			s.Forks = int(v)
			if err != nil {
				return err
			}
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues":
			v, err := d.Int()
			s.OpenIssues = int(v)
			if err != nil {
				return err
			}
		case "watchers":
			v, err := d.Int()
			s.Watchers = int(v)
			if err != nil {
				return err
			}
		case "anonymous_access_enabled":
			s.AnonymousAccessEnabled.Reset()
			if err := s.AnonymousAccessEnabled.ReadJSON(d); err != nil {
				return err
			}
		case "code_of_conduct":
			s.CodeOfConduct.Reset()
			if err := s.CodeOfConduct.ReadJSON(d); err != nil {
				return err
			}
		case "security_and_analysis":
			s.SecurityAndAnalysis.Reset()
			if err := s.SecurityAndAnalysis.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FullRepositoryPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("admin")
	e.Bool(s.Admin)
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	more.More()
	e.ObjField("push")
	e.Bool(s.Push)
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	more.More()
	e.ObjField("pull")
	e.Bool(s.Pull)
	e.ObjEnd()
}

// ReadJSON reads FullRepositoryPermissions from json stream.
func (s *FullRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FullRepositoryPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			v, err := d.Bool()
			s.Admin = bool(v)
			if err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			v, err := d.Bool()
			s.Push = bool(v)
			if err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "pull":
			v, err := d.Bool()
			s.Pull = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FullRepositorySecurityAndAnalysis) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.AdvancedSecurity.Set {
		more.More()
		e.ObjField("advanced_security")
		s.AdvancedSecurity.WriteJSON(e)
	}
	if s.SecretScanning.Set {
		more.More()
		e.ObjField("secret_scanning")
		s.SecretScanning.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FullRepositorySecurityAndAnalysis from json stream.
func (s *FullRepositorySecurityAndAnalysis) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FullRepositorySecurityAndAnalysis to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "advanced_security":
			s.AdvancedSecurity.Reset()
			if err := s.AdvancedSecurity.ReadJSON(d); err != nil {
				return err
			}
		case "secret_scanning":
			s.SecretScanning.Reset()
			if err := s.SecretScanning.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FullRepositorySecurityAndAnalysisAdvancedSecurity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Status.Set {
		more.More()
		e.ObjField("status")
		s.Status.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FullRepositorySecurityAndAnalysisAdvancedSecurity from json stream.
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FullRepositorySecurityAndAnalysisAdvancedSecurity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads FullRepositorySecurityAndAnalysisAdvancedSecurityStatus from json reader.
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FullRepositorySecurityAndAnalysisAdvancedSecurityStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = FullRepositorySecurityAndAnalysisAdvancedSecurityStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s FullRepositorySecurityAndAnalysisSecretScanning) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Status.Set {
		more.More()
		e.ObjField("status")
		s.Status.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads FullRepositorySecurityAndAnalysisSecretScanning from json stream.
func (s *FullRepositorySecurityAndAnalysisSecretScanning) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FullRepositorySecurityAndAnalysisSecretScanning to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s FullRepositorySecurityAndAnalysisSecretScanningStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads FullRepositorySecurityAndAnalysisSecretScanningStatus from json reader.
func (s *FullRepositorySecurityAndAnalysisSecretScanningStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode FullRepositorySecurityAndAnalysisSecretScanningStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = FullRepositorySecurityAndAnalysisSecretScanningStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GistComment) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("author_association")
	s.AuthorAssociation.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads GistComment from json stream.
func (s *GistComment) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistComment to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("version")
	e.Str(s.Version)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("change_status")
	s.ChangeStatus.WriteJSON(e)
	more.More()
	e.ObjField("committed_at")
	json.WriteDateTime(e, s.CommittedAt)
	e.ObjEnd()
}

// ReadJSON reads GistCommit from json stream.
func (s *GistCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "version":
			v, err := d.Str()
			s.Version = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "change_status":
			if err := s.ChangeStatus.ReadJSON(d); err != nil {
				return err
			}
		case "committed_at":
			v, err := json.ReadDateTime(d)
			s.CommittedAt = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistCommitChangeStatus) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Total.Set {
		more.More()
		e.ObjField("total")
		s.Total.WriteJSON(e)
	}
	if s.Additions.Set {
		more.More()
		e.ObjField("additions")
		s.Additions.WriteJSON(e)
	}
	if s.Deletions.Set {
		more.More()
		e.ObjField("deletions")
		s.Deletions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GistCommitChangeStatus from json stream.
func (s *GistCommitChangeStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistCommitChangeStatus to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total":
			s.Total.Reset()
			if err := s.Total.ReadJSON(d); err != nil {
				return err
			}
		case "additions":
			s.Additions.Reset()
			if err := s.Additions.ReadJSON(d); err != nil {
				return err
			}
		case "deletions":
			s.Deletions.Reset()
			if err := s.Deletions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistHistory) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.User.Set {
		more.More()
		e.ObjField("user")
		s.User.WriteJSON(e)
	}
	if s.Version.Set {
		more.More()
		e.ObjField("version")
		s.Version.WriteJSON(e)
	}
	if s.CommittedAt.Set {
		more.More()
		e.ObjField("committed_at")
		s.CommittedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.ChangeStatus.Set {
		more.More()
		e.ObjField("change_status")
		s.ChangeStatus.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GistHistory from json stream.
func (s *GistHistory) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistHistory to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(d); err != nil {
				return err
			}
		case "committed_at":
			s.CommittedAt.Reset()
			if err := s.CommittedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "change_status":
			s.ChangeStatus.Reset()
			if err := s.ChangeStatus.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistHistoryChangeStatus) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Total.Set {
		more.More()
		e.ObjField("total")
		s.Total.WriteJSON(e)
	}
	if s.Additions.Set {
		more.More()
		e.ObjField("additions")
		s.Additions.WriteJSON(e)
	}
	if s.Deletions.Set {
		more.More()
		e.ObjField("deletions")
		s.Deletions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GistHistoryChangeStatus from json stream.
func (s *GistHistoryChangeStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistHistoryChangeStatus to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total":
			s.Total.Reset()
			if err := s.Total.ReadJSON(d); err != nil {
				return err
			}
		case "additions":
			s.Additions.Reset()
			if err := s.Additions.ReadJSON(d); err != nil {
				return err
			}
		case "deletions":
			s.Deletions.Reset()
			if err := s.Deletions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Forks.Set {
		more.More()
		e.ObjField("forks")
		s.Forks.WriteJSON(e)
	}
	if s.History.Set {
		more.More()
		e.ObjField("history")
		s.History.WriteJSON(e)
	}
	if s.ForkOf.Set {
		more.More()
		e.ObjField("fork_of")
		s.ForkOf.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.ForksURL.Set {
		more.More()
		e.ObjField("forks_url")
		s.ForksURL.WriteJSON(e)
	}
	if s.CommitsURL.Set {
		more.More()
		e.ObjField("commits_url")
		s.CommitsURL.WriteJSON(e)
	}
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.GitPullURL.Set {
		more.More()
		e.ObjField("git_pull_url")
		s.GitPullURL.WriteJSON(e)
	}
	if s.GitPushURL.Set {
		more.More()
		e.ObjField("git_push_url")
		s.GitPushURL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.Files != nil {
		more.More()
		e.ObjField("files")
		s.Files.WriteJSON(e)
	}
	if s.Public.Set {
		more.More()
		e.ObjField("public")
		s.Public.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e)
	}
	if s.UpdatedAt.Set {
		more.More()
		e.ObjField("updated_at")
		s.UpdatedAt.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Comments.Set {
		more.More()
		e.ObjField("comments")
		s.Comments.WriteJSON(e)
	}
	if s.User.Set {
		more.More()
		e.ObjField("user")
		s.User.WriteJSON(e)
	}
	if s.CommentsURL.Set {
		more.More()
		e.ObjField("comments_url")
		s.CommentsURL.WriteJSON(e)
	}
	if s.Owner.Set {
		more.More()
		e.ObjField("owner")
		s.Owner.WriteJSON(e)
	}
	if s.Truncated.Set {
		more.More()
		e.ObjField("truncated")
		s.Truncated.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GistSimple from json stream.
func (s *GistSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "forks":
			s.Forks.Reset()
			if err := s.Forks.ReadJSON(d); err != nil {
				return err
			}
		case "history":
			s.History.Reset()
			if err := s.History.ReadJSON(d); err != nil {
				return err
			}
		case "fork_of":
			s.ForkOf.Reset()
			if err := s.ForkOf.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "forks_url":
			s.ForksURL.Reset()
			if err := s.ForksURL.ReadJSON(d); err != nil {
				return err
			}
		case "commits_url":
			s.CommitsURL.Reset()
			if err := s.CommitsURL.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "git_pull_url":
			s.GitPullURL.Reset()
			if err := s.GitPullURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_push_url":
			s.GitPushURL.Reset()
			if err := s.GitPushURL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "files":
			s.Files = nil
			var elem GistSimpleFiles
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.Files = &elem
		case "public":
			s.Public.Reset()
			if err := s.Public.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "comments":
			s.Comments.Reset()
			if err := s.Comments.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "comments_url":
			s.CommentsURL.Reset()
			if err := s.CommentsURL.ReadJSON(d); err != nil {
				return err
			}
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "truncated":
			s.Truncated.Reset()
			if err := s.Truncated.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistSimpleFiles) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads GistSimpleFiles from json stream.
func (s *GistSimpleFiles) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistSimpleFiles to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistSimpleForkOf) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("commits_url")
	json.WriteURI(e, s.CommitsURL)
	more.More()
	e.ObjField("id")
	e.Str(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("git_pull_url")
	json.WriteURI(e, s.GitPullURL)
	more.More()
	e.ObjField("git_push_url")
	json.WriteURI(e, s.GitPushURL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("files")
	s.Files.WriteJSON(e)
	more.More()
	e.ObjField("public")
	e.Bool(s.Public)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("comments")
	e.Int(s.Comments)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("comments_url")
	json.WriteURI(e, s.CommentsURL)
	if s.Owner.Set {
		more.More()
		e.ObjField("owner")
		s.Owner.WriteJSON(e)
	}
	if s.Truncated.Set {
		more.More()
		e.ObjField("truncated")
		s.Truncated.WriteJSON(e)
	}
	if s.Forks != nil {
		more.More()
		e.ObjField("forks")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Forks {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.History != nil {
		more.More()
		e.ObjField("history")
		more.Down()
		e.ArrStart()
		for _, elem := range s.History {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads GistSimpleForkOf from json stream.
func (s *GistSimpleForkOf) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistSimpleForkOf to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := json.ReadURI(d)
			s.CommitsURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "git_pull_url":
			v, err := json.ReadURI(d)
			s.GitPullURL = v
			if err != nil {
				return err
			}
		case "git_push_url":
			v, err := json.ReadURI(d)
			s.GitPushURL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "files":
			if err := s.Files.ReadJSON(d); err != nil {
				return err
			}
		case "public":
			v, err := d.Bool()
			s.Public = bool(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "comments":
			v, err := d.Int()
			s.Comments = int(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "comments_url":
			v, err := json.ReadURI(d)
			s.CommentsURL = v
			if err != nil {
				return err
			}
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "truncated":
			s.Truncated.Reset()
			if err := s.Truncated.ReadJSON(d); err != nil {
				return err
			}
		case "forks":
			s.Forks = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Forks = append(s.Forks, elem)
				return nil
			}); err != nil {
				return err
			}
		case "history":
			s.History = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.History = append(s.History, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistSimpleForkOfFiles) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads GistSimpleForkOfFiles from json stream.
func (s *GistSimpleForkOfFiles) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistSimpleForkOfFiles to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistSimpleForksItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.User.Set {
		more.More()
		e.ObjField("user")
		s.User.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.UpdatedAt.Set {
		more.More()
		e.ObjField("updated_at")
		s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads GistSimpleForksItem from json stream.
func (s *GistSimpleForksItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistSimpleForksItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistsCheckIsStarredNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads GistsCheckIsStarredNoContent from json stream.
func (s *GistsCheckIsStarredNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistsCheckIsStarredNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistsCheckIsStarredNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads GistsCheckIsStarredNotFound from json stream.
func (s *GistsCheckIsStarredNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistsCheckIsStarredNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (GistsCreateCommentApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (GistsCreateCommentApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (GistsCreateCommentApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (GistsCreateCommentApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GistsCreateCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads GistsCreateCommentReq from json stream.
func (s *GistsCreateCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistsCreateCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (GistsDeleteApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (GistsDeleteApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (GistsDeleteApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (GistsDeleteApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (GistsDeleteCommentApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (GistsDeleteCommentApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (GistsDeleteCommentApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (GistsDeleteCommentApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GistsDeleteCommentNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads GistsDeleteCommentNoContent from json stream.
func (s *GistsDeleteCommentNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistsDeleteCommentNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistsDeleteNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads GistsDeleteNoContent from json stream.
func (s *GistsDeleteNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistsDeleteNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (GistsListCommentsApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (GistsListCommentsApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListCommentsApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (GistsListCommentsApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListCommentsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (GistsListCommentsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListCommitsApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (GistsListCommitsApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListCommitsApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (GistsListCommitsApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListCommitsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (GistsListCommitsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListForksApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (GistsListForksApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListForksApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (GistsListForksApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListForksOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (GistsListForksOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (GistsListOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListStarredApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (GistsListStarredApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListStarredApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (GistsListStarredApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

func (GistsListStarredOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (GistsListStarredOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (GistsStarApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (GistsStarApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (GistsStarApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (GistsStarApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GistsStarNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads GistsStarNoContent from json stream.
func (s *GistsStarNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistsStarNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (GistsUnstarApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (GistsUnstarApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (GistsUnstarApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (GistsUnstarApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GistsUnstarNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads GistsUnstarNoContent from json stream.
func (s *GistsUnstarNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistsUnstarNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GistsUpdateCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads GistsUpdateCommentReq from json stream.
func (s *GistsUpdateCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GistsUpdateCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("committer")
	s.Committer.WriteJSON(e)
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("tree")
	s.Tree.WriteJSON(e)
	more.More()
	e.ObjField("parents")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Parents {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("verification")
	s.Verification.WriteJSON(e)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	e.ObjEnd()
}

// ReadJSON reads GitCommit from json stream.
func (s *GitCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "tree":
			if err := s.Tree.ReadJSON(d); err != nil {
				return err
			}
		case "parents":
			s.Parents = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem GitCommitParentsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Parents = append(s.Parents, elem)
				return nil
			}); err != nil {
				return err
			}
		case "verification":
			if err := s.Verification.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCommitAuthor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("date")
	json.WriteDateTime(e, s.Date)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// ReadJSON reads GitCommitAuthor from json stream.
func (s *GitCommitAuthor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCommitAuthor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "date":
			v, err := json.ReadDateTime(d)
			s.Date = v
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCommitCommitter) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("date")
	json.WriteDateTime(e, s.Date)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// ReadJSON reads GitCommitCommitter from json stream.
func (s *GitCommitCommitter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCommitCommitter to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "date":
			v, err := json.ReadDateTime(d)
			s.Date = v
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCommitParentsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	e.ObjEnd()
}

// ReadJSON reads GitCommitParentsItem from json stream.
func (s *GitCommitParentsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCommitParentsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCommitTree) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads GitCommitTree from json stream.
func (s *GitCommitTree) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCommitTree to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCommitVerification) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("verified")
	e.Bool(s.Verified)
	more.More()
	e.ObjField("reason")
	e.Str(s.Reason)
	more.More()
	e.ObjField("signature")
	s.Signature.WriteJSON(e)
	more.More()
	e.ObjField("payload")
	s.Payload.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads GitCommitVerification from json stream.
func (s *GitCommitVerification) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCommitVerification to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "verified":
			v, err := d.Bool()
			s.Verified = bool(v)
			if err != nil {
				return err
			}
		case "reason":
			v, err := d.Str()
			s.Reason = string(v)
			if err != nil {
				return err
			}
		case "signature":
			if err := s.Signature.ReadJSON(d); err != nil {
				return err
			}
		case "payload":
			if err := s.Payload.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCreateBlobReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	e.Str(s.Content)
	if s.Encoding.Set {
		more.More()
		e.ObjField("encoding")
		s.Encoding.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GitCreateBlobReq from json stream.
func (s *GitCreateBlobReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateBlobReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			v, err := d.Str()
			s.Content = string(v)
			if err != nil {
				return err
			}
		case "encoding":
			s.Encoding.Reset()
			if err := s.Encoding.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCreateCommitReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("tree")
	e.Str(s.Tree)
	if s.Parents != nil {
		more.More()
		e.ObjField("parents")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Parents {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Author.Set {
		more.More()
		e.ObjField("author")
		s.Author.WriteJSON(e)
	}
	if s.Committer.Set {
		more.More()
		e.ObjField("committer")
		s.Committer.WriteJSON(e)
	}
	if s.Signature.Set {
		more.More()
		e.ObjField("signature")
		s.Signature.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GitCreateCommitReq from json stream.
func (s *GitCreateCommitReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateCommitReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "tree":
			v, err := d.Str()
			s.Tree = string(v)
			if err != nil {
				return err
			}
		case "parents":
			s.Parents = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Parents = append(s.Parents, elem)
				return nil
			}); err != nil {
				return err
			}
		case "author":
			s.Author.Reset()
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			s.Committer.Reset()
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		case "signature":
			s.Signature.Reset()
			if err := s.Signature.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCreateCommitReqAuthor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	if s.Date.Set {
		more.More()
		e.ObjField("date")
		s.Date.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads GitCreateCommitReqAuthor from json stream.
func (s *GitCreateCommitReqAuthor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateCommitReqAuthor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCreateCommitReqCommitter) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.Date.Set {
		more.More()
		e.ObjField("date")
		s.Date.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads GitCreateCommitReqCommitter from json stream.
func (s *GitCreateCommitReqCommitter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateCommitReqCommitter to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCreateRefReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("ref")
	e.Str(s.Ref)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	if s.Key.Set {
		more.More()
		e.ObjField("key")
		s.Key.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GitCreateRefReq from json stream.
func (s *GitCreateRefReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateRefReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "ref":
			v, err := d.Str()
			s.Ref = string(v)
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "key":
			s.Key.Reset()
			if err := s.Key.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTagReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("tag")
	e.Str(s.Tag)
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("object")
	e.Str(s.Object)
	more.More()
	e.ObjField("type")
	s.Type.WriteJSON(e)
	if s.Tagger.Set {
		more.More()
		e.ObjField("tagger")
		s.Tagger.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GitCreateTagReq from json stream.
func (s *GitCreateTagReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateTagReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "tag":
			v, err := d.Str()
			s.Tag = string(v)
			if err != nil {
				return err
			}
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "object":
			v, err := d.Str()
			s.Object = string(v)
			if err != nil {
				return err
			}
		case "type":
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "tagger":
			s.Tagger.Reset()
			if err := s.Tagger.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTagReqTagger) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	if s.Date.Set {
		more.More()
		e.ObjField("date")
		s.Date.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads GitCreateTagReqTagger from json stream.
func (s *GitCreateTagReqTagger) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateTagReqTagger to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTagReqType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads GitCreateTagReqType from json reader.
func (s *GitCreateTagReqType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateTagReqType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = GitCreateTagReqType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTreeReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("tree")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Tree {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if s.BaseTree.Set {
		more.More()
		e.ObjField("base_tree")
		s.BaseTree.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GitCreateTreeReq from json stream.
func (s *GitCreateTreeReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateTreeReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "tree":
			s.Tree = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem GitCreateTreeReqTreeItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Tree = append(s.Tree, elem)
				return nil
			}); err != nil {
				return err
			}
		case "base_tree":
			s.BaseTree.Reset()
			if err := s.BaseTree.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTreeReqTreeItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Path.Set {
		more.More()
		e.ObjField("path")
		s.Path.WriteJSON(e)
	}
	if s.Mode.Set {
		more.More()
		e.ObjField("mode")
		s.Mode.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	if s.Content.Set {
		more.More()
		e.ObjField("content")
		s.Content.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GitCreateTreeReqTreeItem from json stream.
func (s *GitCreateTreeReqTreeItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateTreeReqTreeItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(d); err != nil {
				return err
			}
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		case "content":
			s.Content.Reset()
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTreeReqTreeItemMode) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads GitCreateTreeReqTreeItemMode from json reader.
func (s *GitCreateTreeReqTreeItemMode) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateTreeReqTreeItemMode to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = GitCreateTreeReqTreeItemMode(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTreeReqTreeItemType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads GitCreateTreeReqTreeItemType from json reader.
func (s *GitCreateTreeReqTreeItemType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitCreateTreeReqTreeItemType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = GitCreateTreeReqTreeItemType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GitDeleteRefNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads GitDeleteRefNoContent from json stream.
func (s *GitDeleteRefNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitDeleteRefNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitRef) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("ref")
	e.Str(s.Ref)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("object")
	s.Object.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads GitRef from json stream.
func (s *GitRef) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitRef to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "ref":
			v, err := d.Str()
			s.Ref = string(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "object":
			if err := s.Object.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitRefObject) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads GitRefObject from json stream.
func (s *GitRefObject) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitRefObject to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitTag) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("tag")
	e.Str(s.Tag)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("tagger")
	s.Tagger.WriteJSON(e)
	more.More()
	e.ObjField("object")
	s.Object.WriteJSON(e)
	if s.Verification.Set {
		more.More()
		e.ObjField("verification")
		s.Verification.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GitTag from json stream.
func (s *GitTag) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitTag to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "tag":
			v, err := d.Str()
			s.Tag = string(v)
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "tagger":
			if err := s.Tagger.ReadJSON(d); err != nil {
				return err
			}
		case "object":
			if err := s.Object.ReadJSON(d); err != nil {
				return err
			}
		case "verification":
			s.Verification.Reset()
			if err := s.Verification.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitTagObject) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads GitTagObject from json stream.
func (s *GitTagObject) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitTagObject to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitTagTagger) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("date")
	e.Str(s.Date)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// ReadJSON reads GitTagTagger from json stream.
func (s *GitTagTagger) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitTagTagger to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "date":
			v, err := d.Str()
			s.Date = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitTree) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("truncated")
	e.Bool(s.Truncated)
	more.More()
	e.ObjField("tree")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Tree {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads GitTree from json stream.
func (s *GitTree) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitTree to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "truncated":
			v, err := d.Bool()
			s.Truncated = bool(v)
			if err != nil {
				return err
			}
		case "tree":
			s.Tree = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem GitTreeTreeItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Tree = append(s.Tree, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitTreeTreeItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Path.Set {
		more.More()
		e.ObjField("path")
		s.Path.WriteJSON(e)
	}
	if s.Mode.Set {
		more.More()
		e.ObjField("mode")
		s.Mode.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	if s.Size.Set {
		more.More()
		e.ObjField("size")
		s.Size.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GitTreeTreeItem from json stream.
func (s *GitTreeTreeItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitTreeTreeItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(d); err != nil {
				return err
			}
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GitUpdateRefReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	if s.Force.Set {
		more.More()
		e.ObjField("force")
		s.Force.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GitUpdateRefReq from json stream.
func (s *GitUpdateRefReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitUpdateRefReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "force":
			s.Force.Reset()
			if err := s.Force.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (GitignoreGetAllTemplatesOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (GitignoreGetAllTemplatesOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GitignoreTemplate) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("source")
	e.Str(s.Source)
	e.ObjEnd()
}

// ReadJSON reads GitignoreTemplate from json stream.
func (s *GitignoreTemplate) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GitignoreTemplate to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "source":
			v, err := d.Str()
			s.Source = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GpgKey) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("primary_key_id")
	s.PrimaryKeyID.WriteJSON(e)
	more.More()
	e.ObjField("key_id")
	e.Str(s.KeyID)
	more.More()
	e.ObjField("public_key")
	e.Str(s.PublicKey)
	more.More()
	e.ObjField("emails")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Emails {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("subkeys")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Subkeys {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("can_sign")
	e.Bool(s.CanSign)
	more.More()
	e.ObjField("can_encrypt_comms")
	e.Bool(s.CanEncryptComms)
	more.More()
	e.ObjField("can_encrypt_storage")
	e.Bool(s.CanEncryptStorage)
	more.More()
	e.ObjField("can_certify")
	e.Bool(s.CanCertify)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("expires_at")
	s.ExpiresAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("raw_key")
	s.RawKey.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads GpgKey from json stream.
func (s *GpgKey) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GpgKey to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "primary_key_id":
			if err := s.PrimaryKeyID.ReadJSON(d); err != nil {
				return err
			}
		case "key_id":
			v, err := d.Str()
			s.KeyID = string(v)
			if err != nil {
				return err
			}
		case "public_key":
			v, err := d.Str()
			s.PublicKey = string(v)
			if err != nil {
				return err
			}
		case "emails":
			s.Emails = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem GpgKeyEmailsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Emails = append(s.Emails, elem)
				return nil
			}); err != nil {
				return err
			}
		case "subkeys":
			s.Subkeys = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem GpgKeySubkeysItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Subkeys = append(s.Subkeys, elem)
				return nil
			}); err != nil {
				return err
			}
		case "can_sign":
			v, err := d.Bool()
			s.CanSign = bool(v)
			if err != nil {
				return err
			}
		case "can_encrypt_comms":
			v, err := d.Bool()
			s.CanEncryptComms = bool(v)
			if err != nil {
				return err
			}
		case "can_encrypt_storage":
			v, err := d.Bool()
			s.CanEncryptStorage = bool(v)
			if err != nil {
				return err
			}
		case "can_certify":
			v, err := d.Bool()
			s.CanCertify = bool(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "expires_at":
			if err := s.ExpiresAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "raw_key":
			if err := s.RawKey.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GpgKeyEmailsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.Verified.Set {
		more.More()
		e.ObjField("verified")
		s.Verified.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GpgKeyEmailsItem from json stream.
func (s *GpgKeyEmailsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GpgKeyEmailsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "verified":
			s.Verified.Reset()
			if err := s.Verified.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GpgKeySubkeysItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.PrimaryKeyID.Set {
		more.More()
		e.ObjField("primary_key_id")
		s.PrimaryKeyID.WriteJSON(e)
	}
	if s.KeyID.Set {
		more.More()
		e.ObjField("key_id")
		s.KeyID.WriteJSON(e)
	}
	if s.PublicKey.Set {
		more.More()
		e.ObjField("public_key")
		s.PublicKey.WriteJSON(e)
	}
	if s.Emails != nil {
		more.More()
		e.ObjField("emails")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Emails {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Subkeys != nil {
		more.More()
		e.ObjField("subkeys")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Subkeys {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.CanSign.Set {
		more.More()
		e.ObjField("can_sign")
		s.CanSign.WriteJSON(e)
	}
	if s.CanEncryptComms.Set {
		more.More()
		e.ObjField("can_encrypt_comms")
		s.CanEncryptComms.WriteJSON(e)
	}
	if s.CanEncryptStorage.Set {
		more.More()
		e.ObjField("can_encrypt_storage")
		s.CanEncryptStorage.WriteJSON(e)
	}
	if s.CanCertify.Set {
		more.More()
		e.ObjField("can_certify")
		s.CanCertify.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e)
	}
	if s.ExpiresAt.Set {
		more.More()
		e.ObjField("expires_at")
		s.ExpiresAt.WriteJSON(e)
	}
	if s.RawKey.Set {
		more.More()
		e.ObjField("raw_key")
		s.RawKey.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GpgKeySubkeysItem from json stream.
func (s *GpgKeySubkeysItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GpgKeySubkeysItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "primary_key_id":
			s.PrimaryKeyID.Reset()
			if err := s.PrimaryKeyID.ReadJSON(d); err != nil {
				return err
			}
		case "key_id":
			s.KeyID.Reset()
			if err := s.KeyID.ReadJSON(d); err != nil {
				return err
			}
		case "public_key":
			s.PublicKey.Reset()
			if err := s.PublicKey.ReadJSON(d); err != nil {
				return err
			}
		case "emails":
			s.Emails = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Emails = append(s.Emails, elem)
				return nil
			}); err != nil {
				return err
			}
		case "subkeys":
			s.Subkeys = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Subkeys = append(s.Subkeys, elem)
				return nil
			}); err != nil {
				return err
			}
		case "can_sign":
			s.CanSign.Reset()
			if err := s.CanSign.ReadJSON(d); err != nil {
				return err
			}
		case "can_encrypt_comms":
			s.CanEncryptComms.Reset()
			if err := s.CanEncryptComms.ReadJSON(d); err != nil {
				return err
			}
		case "can_encrypt_storage":
			s.CanEncryptStorage.Reset()
			if err := s.CanEncryptStorage.ReadJSON(d); err != nil {
				return err
			}
		case "can_certify":
			s.CanCertify.Reset()
			if err := s.CanCertify.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "expires_at":
			s.ExpiresAt.Reset()
			if err := s.ExpiresAt.ReadJSON(d); err != nil {
				return err
			}
		case "raw_key":
			s.RawKey.Reset()
			if err := s.RawKey.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GroupMapping) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Groups != nil {
		more.More()
		e.ObjField("groups")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads GroupMapping from json stream.
func (s *GroupMapping) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GroupMapping to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "groups":
			s.Groups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem GroupMappingGroupsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GroupMappingGroupsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("group_id")
	e.Str(s.GroupID)
	more.More()
	e.ObjField("group_name")
	e.Str(s.GroupName)
	more.More()
	e.ObjField("group_description")
	e.Str(s.GroupDescription)
	if s.Status.Set {
		more.More()
		e.ObjField("status")
		s.Status.WriteJSON(e)
	}
	if s.SyncedAt.Set {
		more.More()
		e.ObjField("synced_at")
		s.SyncedAt.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads GroupMappingGroupsItem from json stream.
func (s *GroupMappingGroupsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GroupMappingGroupsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "group_id":
			v, err := d.Str()
			s.GroupID = string(v)
			if err != nil {
				return err
			}
		case "group_name":
			v, err := d.Str()
			s.GroupName = string(v)
			if err != nil {
				return err
			}
		case "group_description":
			v, err := d.Str()
			s.GroupDescription = string(v)
			if err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "synced_at":
			s.SyncedAt.Reset()
			if err := s.SyncedAt.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Hook) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("active")
	e.Bool(s.Active)
	more.More()
	e.ObjField("events")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Events {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("config")
	s.Config.WriteJSON(e)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("test_url")
	json.WriteURI(e, s.TestURL)
	more.More()
	e.ObjField("ping_url")
	json.WriteURI(e, s.PingURL)
	if s.DeliveriesURL.Set {
		more.More()
		e.ObjField("deliveries_url")
		s.DeliveriesURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("last_response")
	s.LastResponse.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads Hook from json stream.
func (s *Hook) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Hook to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "active":
			v, err := d.Bool()
			s.Active = bool(v)
			if err != nil {
				return err
			}
		case "events":
			s.Events = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Events = append(s.Events, elem)
				return nil
			}); err != nil {
				return err
			}
		case "config":
			if err := s.Config.ReadJSON(d); err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "test_url":
			v, err := json.ReadURI(d)
			s.TestURL = v
			if err != nil {
				return err
			}
		case "ping_url":
			v, err := json.ReadURI(d)
			s.PingURL = v
			if err != nil {
				return err
			}
		case "deliveries_url":
			s.DeliveriesURL.Reset()
			if err := s.DeliveriesURL.ReadJSON(d); err != nil {
				return err
			}
		case "last_response":
			if err := s.LastResponse.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s HookConfig) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.Password.Set {
		more.More()
		e.ObjField("password")
		s.Password.WriteJSON(e)
	}
	if s.Room.Set {
		more.More()
		e.ObjField("room")
		s.Room.WriteJSON(e)
	}
	if s.Subdomain.Set {
		more.More()
		e.ObjField("subdomain")
		s.Subdomain.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.InsecureSsl != nil {
		more.More()
		e.ObjField("insecure_ssl")
		s.InsecureSsl.WriteJSON(e)
	}
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.Digest.Set {
		more.More()
		e.ObjField("digest")
		s.Digest.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	if s.Token.Set {
		more.More()
		e.ObjField("token")
		s.Token.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads HookConfig from json stream.
func (s *HookConfig) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HookConfig to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "password":
			s.Password.Reset()
			if err := s.Password.ReadJSON(d); err != nil {
				return err
			}
		case "room":
			s.Room.Reset()
			if err := s.Room.ReadJSON(d); err != nil {
				return err
			}
		case "subdomain":
			s.Subdomain.Reset()
			if err := s.Subdomain.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "insecure_ssl":
			s.InsecureSsl = nil
			var elem WebhookConfigInsecureSsl
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.InsecureSsl = &elem
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "digest":
			s.Digest.Reset()
			if err := s.Digest.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		case "token":
			s.Token.Reset()
			if err := s.Token.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s HookDelivery) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("guid")
	e.Str(s.GUID)
	more.More()
	e.ObjField("delivered_at")
	json.WriteDateTime(e, s.DeliveredAt)
	more.More()
	e.ObjField("redelivery")
	e.Bool(s.Redelivery)
	more.More()
	e.ObjField("duration")
	e.Float64(s.Duration)
	more.More()
	e.ObjField("status")
	e.Str(s.Status)
	more.More()
	e.ObjField("status_code")
	e.Int(s.StatusCode)
	more.More()
	e.ObjField("event")
	e.Str(s.Event)
	more.More()
	e.ObjField("action")
	s.Action.WriteJSON(e)
	more.More()
	e.ObjField("installation_id")
	s.InstallationID.WriteJSON(e)
	more.More()
	e.ObjField("repository_id")
	s.RepositoryID.WriteJSON(e)
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	more.More()
	e.ObjField("request")
	s.Request.WriteJSON(e)
	more.More()
	e.ObjField("response")
	s.Response.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads HookDelivery from json stream.
func (s *HookDelivery) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HookDelivery to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "guid":
			v, err := d.Str()
			s.GUID = string(v)
			if err != nil {
				return err
			}
		case "delivered_at":
			v, err := json.ReadDateTime(d)
			s.DeliveredAt = v
			if err != nil {
				return err
			}
		case "redelivery":
			v, err := d.Bool()
			s.Redelivery = bool(v)
			if err != nil {
				return err
			}
		case "duration":
			v, err := d.Float64()
			s.Duration = float64(v)
			if err != nil {
				return err
			}
		case "status":
			v, err := d.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "status_code":
			v, err := d.Int()
			s.StatusCode = int(v)
			if err != nil {
				return err
			}
		case "event":
			v, err := d.Str()
			s.Event = string(v)
			if err != nil {
				return err
			}
		case "action":
			if err := s.Action.ReadJSON(d); err != nil {
				return err
			}
		case "installation_id":
			if err := s.InstallationID.ReadJSON(d); err != nil {
				return err
			}
		case "repository_id":
			if err := s.RepositoryID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "request":
			if err := s.Request.ReadJSON(d); err != nil {
				return err
			}
		case "response":
			if err := s.Response.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s HookDeliveryItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("guid")
	e.Str(s.GUID)
	more.More()
	e.ObjField("delivered_at")
	json.WriteDateTime(e, s.DeliveredAt)
	more.More()
	e.ObjField("redelivery")
	e.Bool(s.Redelivery)
	more.More()
	e.ObjField("duration")
	e.Float64(s.Duration)
	more.More()
	e.ObjField("status")
	e.Str(s.Status)
	more.More()
	e.ObjField("status_code")
	e.Int(s.StatusCode)
	more.More()
	e.ObjField("event")
	e.Str(s.Event)
	more.More()
	e.ObjField("action")
	s.Action.WriteJSON(e)
	more.More()
	e.ObjField("installation_id")
	s.InstallationID.WriteJSON(e)
	more.More()
	e.ObjField("repository_id")
	s.RepositoryID.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads HookDeliveryItem from json stream.
func (s *HookDeliveryItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HookDeliveryItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "guid":
			v, err := d.Str()
			s.GUID = string(v)
			if err != nil {
				return err
			}
		case "delivered_at":
			v, err := json.ReadDateTime(d)
			s.DeliveredAt = v
			if err != nil {
				return err
			}
		case "redelivery":
			v, err := d.Bool()
			s.Redelivery = bool(v)
			if err != nil {
				return err
			}
		case "duration":
			v, err := d.Float64()
			s.Duration = float64(v)
			if err != nil {
				return err
			}
		case "status":
			v, err := d.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "status_code":
			v, err := d.Int()
			s.StatusCode = int(v)
			if err != nil {
				return err
			}
		case "event":
			v, err := d.Str()
			s.Event = string(v)
			if err != nil {
				return err
			}
		case "action":
			if err := s.Action.ReadJSON(d); err != nil {
				return err
			}
		case "installation_id":
			if err := s.InstallationID.ReadJSON(d); err != nil {
				return err
			}
		case "repository_id":
			if err := s.RepositoryID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s HookDeliveryRequest) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("headers")
	if s.Headers == nil {
		e.Null()
	} else {
		s.Headers.WriteJSON(e)
	}
	more.More()
	e.ObjField("payload")
	if s.Payload == nil {
		e.Null()
	} else {
		s.Payload.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads HookDeliveryRequest from json stream.
func (s *HookDeliveryRequest) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HookDeliveryRequest to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "headers":
			s.Headers = nil
			var elem HookDeliveryRequestHeaders
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.Headers = &elem
		case "payload":
			s.Payload = nil
			var elem HookDeliveryRequestPayload
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.Payload = &elem
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s HookDeliveryRequestHeaders) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads HookDeliveryRequestHeaders from json stream.
func (s *HookDeliveryRequestHeaders) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HookDeliveryRequestHeaders to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s HookDeliveryRequestPayload) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads HookDeliveryRequestPayload from json stream.
func (s *HookDeliveryRequestPayload) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HookDeliveryRequestPayload to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s HookDeliveryResponse) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("headers")
	if s.Headers == nil {
		e.Null()
	} else {
		s.Headers.WriteJSON(e)
	}
	more.More()
	e.ObjField("payload")
	s.Payload.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads HookDeliveryResponse from json stream.
func (s *HookDeliveryResponse) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HookDeliveryResponse to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "headers":
			s.Headers = nil
			var elem HookDeliveryResponseHeaders
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.Headers = &elem
		case "payload":
			if err := s.Payload.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s HookDeliveryResponseHeaders) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads HookDeliveryResponseHeaders from json stream.
func (s *HookDeliveryResponseHeaders) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HookDeliveryResponseHeaders to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s HookResponse) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("code")
	s.Code.WriteJSON(e)
	more.More()
	e.ObjField("status")
	s.Status.WriteJSON(e)
	more.More()
	e.ObjField("message")
	s.Message.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads HookResponse from json stream.
func (s *HookResponse) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HookResponse to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := s.Code.ReadJSON(d); err != nil {
				return err
			}
		case "status":
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "message":
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Hovercard) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("contexts")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Contexts {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads Hovercard from json stream.
func (s *Hovercard) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Hovercard to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "contexts":
			s.Contexts = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem HovercardContextsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Contexts = append(s.Contexts, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s HovercardContextsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("octicon")
	e.Str(s.Octicon)
	e.ObjEnd()
}

// ReadJSON reads HovercardContextsItem from json stream.
func (s *HovercardContextsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode HovercardContextsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "octicon":
			v, err := d.Str()
			s.Octicon = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Import) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("vcs")
	s.Vcs.WriteJSON(e)
	if s.UseLfs.Set {
		more.More()
		e.ObjField("use_lfs")
		s.UseLfs.WriteJSON(e)
	}
	more.More()
	e.ObjField("vcs_url")
	e.Str(s.VcsURL)
	if s.SvcRoot.Set {
		more.More()
		e.ObjField("svc_root")
		s.SvcRoot.WriteJSON(e)
	}
	if s.TfvcProject.Set {
		more.More()
		e.ObjField("tfvc_project")
		s.TfvcProject.WriteJSON(e)
	}
	more.More()
	e.ObjField("status")
	s.Status.WriteJSON(e)
	if s.StatusText.Set {
		more.More()
		e.ObjField("status_text")
		s.StatusText.WriteJSON(e)
	}
	if s.FailedStep.Set {
		more.More()
		e.ObjField("failed_step")
		s.FailedStep.WriteJSON(e)
	}
	if s.ErrorMessage.Set {
		more.More()
		e.ObjField("error_message")
		s.ErrorMessage.WriteJSON(e)
	}
	if s.ImportPercent.Set {
		more.More()
		e.ObjField("import_percent")
		s.ImportPercent.WriteJSON(e)
	}
	if s.CommitCount.Set {
		more.More()
		e.ObjField("commit_count")
		s.CommitCount.WriteJSON(e)
	}
	if s.PushPercent.Set {
		more.More()
		e.ObjField("push_percent")
		s.PushPercent.WriteJSON(e)
	}
	if s.HasLargeFiles.Set {
		more.More()
		e.ObjField("has_large_files")
		s.HasLargeFiles.WriteJSON(e)
	}
	if s.LargeFilesSize.Set {
		more.More()
		e.ObjField("large_files_size")
		s.LargeFilesSize.WriteJSON(e)
	}
	if s.LargeFilesCount.Set {
		more.More()
		e.ObjField("large_files_count")
		s.LargeFilesCount.WriteJSON(e)
	}
	if s.ProjectChoices != nil {
		more.More()
		e.ObjField("project_choices")
		more.Down()
		e.ArrStart()
		for _, elem := range s.ProjectChoices {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.AuthorsCount.Set {
		more.More()
		e.ObjField("authors_count")
		s.AuthorsCount.WriteJSON(e)
	}
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("authors_url")
	json.WriteURI(e, s.AuthorsURL)
	more.More()
	e.ObjField("repository_url")
	json.WriteURI(e, s.RepositoryURL)
	if s.SvnRoot.Set {
		more.More()
		e.ObjField("svn_root")
		s.SvnRoot.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Import from json stream.
func (s *Import) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Import to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "vcs":
			if err := s.Vcs.ReadJSON(d); err != nil {
				return err
			}
		case "use_lfs":
			s.UseLfs.Reset()
			if err := s.UseLfs.ReadJSON(d); err != nil {
				return err
			}
		case "vcs_url":
			v, err := d.Str()
			s.VcsURL = string(v)
			if err != nil {
				return err
			}
		case "svc_root":
			s.SvcRoot.Reset()
			if err := s.SvcRoot.ReadJSON(d); err != nil {
				return err
			}
		case "tfvc_project":
			s.TfvcProject.Reset()
			if err := s.TfvcProject.ReadJSON(d); err != nil {
				return err
			}
		case "status":
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "status_text":
			s.StatusText.Reset()
			if err := s.StatusText.ReadJSON(d); err != nil {
				return err
			}
		case "failed_step":
			s.FailedStep.Reset()
			if err := s.FailedStep.ReadJSON(d); err != nil {
				return err
			}
		case "error_message":
			s.ErrorMessage.Reset()
			if err := s.ErrorMessage.ReadJSON(d); err != nil {
				return err
			}
		case "import_percent":
			s.ImportPercent.Reset()
			if err := s.ImportPercent.ReadJSON(d); err != nil {
				return err
			}
		case "commit_count":
			s.CommitCount.Reset()
			if err := s.CommitCount.ReadJSON(d); err != nil {
				return err
			}
		case "push_percent":
			s.PushPercent.Reset()
			if err := s.PushPercent.ReadJSON(d); err != nil {
				return err
			}
		case "has_large_files":
			s.HasLargeFiles.Reset()
			if err := s.HasLargeFiles.ReadJSON(d); err != nil {
				return err
			}
		case "large_files_size":
			s.LargeFilesSize.Reset()
			if err := s.LargeFilesSize.ReadJSON(d); err != nil {
				return err
			}
		case "large_files_count":
			s.LargeFilesCount.Reset()
			if err := s.LargeFilesCount.ReadJSON(d); err != nil {
				return err
			}
		case "project_choices":
			s.ProjectChoices = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ImportProjectChoicesItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.ProjectChoices = append(s.ProjectChoices, elem)
				return nil
			}); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "authors_count":
			s.AuthorsCount.Reset()
			if err := s.AuthorsCount.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "authors_url":
			v, err := json.ReadURI(d)
			s.AuthorsURL = v
			if err != nil {
				return err
			}
		case "repository_url":
			v, err := json.ReadURI(d)
			s.RepositoryURL = v
			if err != nil {
				return err
			}
		case "svn_root":
			s.SvnRoot.Reset()
			if err := s.SvnRoot.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ImportProjectChoicesItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Vcs.Set {
		more.More()
		e.ObjField("vcs")
		s.Vcs.WriteJSON(e)
	}
	if s.TfvcProject.Set {
		more.More()
		e.ObjField("tfvc_project")
		s.TfvcProject.WriteJSON(e)
	}
	if s.HumanName.Set {
		more.More()
		e.ObjField("human_name")
		s.HumanName.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ImportProjectChoicesItem from json stream.
func (s *ImportProjectChoicesItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ImportProjectChoicesItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "vcs":
			s.Vcs.Reset()
			if err := s.Vcs.ReadJSON(d); err != nil {
				return err
			}
		case "tfvc_project":
			s.TfvcProject.Reset()
			if err := s.TfvcProject.ReadJSON(d); err != nil {
				return err
			}
		case "human_name":
			s.HumanName.Reset()
			if err := s.HumanName.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ImportStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ImportStatus from json reader.
func (s *ImportStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ImportStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ImportStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s InstallationToken) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("token")
	e.Str(s.Token)
	more.More()
	e.ObjField("expires_at")
	e.Str(s.ExpiresAt)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.RepositorySelection.Set {
		more.More()
		e.ObjField("repository_selection")
		s.RepositorySelection.WriteJSON(e)
	}
	if s.Repositories != nil {
		more.More()
		e.ObjField("repositories")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Repositories {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.SingleFile.Set {
		more.More()
		e.ObjField("single_file")
		s.SingleFile.WriteJSON(e)
	}
	if s.HasMultipleSingleFiles.Set {
		more.More()
		e.ObjField("has_multiple_single_files")
		s.HasMultipleSingleFiles.WriteJSON(e)
	}
	if s.SingleFilePaths != nil {
		more.More()
		e.ObjField("single_file_paths")
		more.Down()
		e.ArrStart()
		for _, elem := range s.SingleFilePaths {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads InstallationToken from json stream.
func (s *InstallationToken) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InstallationToken to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			v, err := d.Str()
			s.Token = string(v)
			if err != nil {
				return err
			}
		case "expires_at":
			v, err := d.Str()
			s.ExpiresAt = string(v)
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "repository_selection":
			s.RepositorySelection.Reset()
			if err := s.RepositorySelection.ReadJSON(d); err != nil {
				return err
			}
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Repository
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "single_file":
			s.SingleFile.Reset()
			if err := s.SingleFile.ReadJSON(d); err != nil {
				return err
			}
		case "has_multiple_single_files":
			s.HasMultipleSingleFiles.Reset()
			if err := s.HasMultipleSingleFiles.ReadJSON(d); err != nil {
				return err
			}
		case "single_file_paths":
			s.SingleFilePaths = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.SingleFilePaths = append(s.SingleFilePaths, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InstallationTokenRepositorySelection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads InstallationTokenRepositorySelection from json reader.
func (s *InstallationTokenRepositorySelection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InstallationTokenRepositorySelection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = InstallationTokenRepositorySelection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Integration) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	if s.Slug.Set {
		more.More()
		e.ObjField("slug")
		s.Slug.WriteJSON(e)
	}
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("external_url")
	json.WriteURI(e, s.ExternalURL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("permissions")
	s.Permissions.WriteJSON(e)
	more.More()
	e.ObjField("events")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Events {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	if s.InstallationsCount.Set {
		more.More()
		e.ObjField("installations_count")
		s.InstallationsCount.WriteJSON(e)
	}
	if s.ClientID.Set {
		more.More()
		e.ObjField("client_id")
		s.ClientID.WriteJSON(e)
	}
	if s.ClientSecret.Set {
		more.More()
		e.ObjField("client_secret")
		s.ClientSecret.WriteJSON(e)
	}
	if s.WebhookSecret.Set {
		more.More()
		e.ObjField("webhook_secret")
		s.WebhookSecret.WriteJSON(e)
	}
	if s.Pem.Set {
		more.More()
		e.ObjField("pem")
		s.Pem.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Integration from json stream.
func (s *Integration) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Integration to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "slug":
			s.Slug.Reset()
			if err := s.Slug.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "external_url":
			v, err := json.ReadURI(d)
			s.ExternalURL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "permissions":
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "events":
			s.Events = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Events = append(s.Events, elem)
				return nil
			}); err != nil {
				return err
			}
		case "installations_count":
			s.InstallationsCount.Reset()
			if err := s.InstallationsCount.ReadJSON(d); err != nil {
				return err
			}
		case "client_id":
			s.ClientID.Reset()
			if err := s.ClientID.ReadJSON(d); err != nil {
				return err
			}
		case "client_secret":
			s.ClientSecret.Reset()
			if err := s.ClientSecret.ReadJSON(d); err != nil {
				return err
			}
		case "webhook_secret":
			s.WebhookSecret.Reset()
			if err := s.WebhookSecret.ReadJSON(d); err != nil {
				return err
			}
		case "pem":
			s.Pem.Reset()
			if err := s.Pem.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IntegrationPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Issues.Set {
		more.More()
		e.ObjField("issues")
		s.Issues.WriteJSON(e)
	}
	if s.Checks.Set {
		more.More()
		e.ObjField("checks")
		s.Checks.WriteJSON(e)
	}
	if s.Metadata.Set {
		more.More()
		e.ObjField("metadata")
		s.Metadata.WriteJSON(e)
	}
	if s.Contents.Set {
		more.More()
		e.ObjField("contents")
		s.Contents.WriteJSON(e)
	}
	if s.Deployments.Set {
		more.More()
		e.ObjField("deployments")
		s.Deployments.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IntegrationPermissions from json stream.
func (s *IntegrationPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IntegrationPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "issues":
			s.Issues.Reset()
			if err := s.Issues.ReadJSON(d); err != nil {
				return err
			}
		case "checks":
			s.Checks.Reset()
			if err := s.Checks.ReadJSON(d); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(d); err != nil {
				return err
			}
		case "contents":
			s.Contents.Reset()
			if err := s.Contents.ReadJSON(d); err != nil {
				return err
			}
		case "deployments":
			s.Deployments.Reset()
			if err := s.Deployments.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InteractionExpiry) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads InteractionExpiry from json reader.
func (s *InteractionExpiry) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InteractionExpiry to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = InteractionExpiry(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s InteractionGroup) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads InteractionGroup from json reader.
func (s *InteractionGroup) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InteractionGroup to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = InteractionGroup(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s InteractionLimit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("limit")
	s.Limit.WriteJSON(e)
	if s.Expiry.Set {
		more.More()
		e.ObjField("expiry")
		s.Expiry.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads InteractionLimit from json stream.
func (s *InteractionLimit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InteractionLimit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "limit":
			if err := s.Limit.ReadJSON(d); err != nil {
				return err
			}
		case "expiry":
			s.Expiry.Reset()
			if err := s.Expiry.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InteractionLimitResponse) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("limit")
	s.Limit.WriteJSON(e)
	more.More()
	e.ObjField("origin")
	e.Str(s.Origin)
	more.More()
	e.ObjField("expires_at")
	json.WriteDateTime(e, s.ExpiresAt)
	e.ObjEnd()
}

// ReadJSON reads InteractionLimitResponse from json stream.
func (s *InteractionLimitResponse) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InteractionLimitResponse to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "limit":
			if err := s.Limit.ReadJSON(d); err != nil {
				return err
			}
		case "origin":
			v, err := d.Str()
			s.Origin = string(v)
			if err != nil {
				return err
			}
		case "expires_at":
			v, err := json.ReadDateTime(d)
			s.ExpiresAt = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InteractionsRemoveRestrictionsForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads InteractionsRemoveRestrictionsForAuthenticatedUserNoContent from json stream.
func (s *InteractionsRemoveRestrictionsForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InteractionsRemoveRestrictionsForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InteractionsRemoveRestrictionsForOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads InteractionsRemoveRestrictionsForOrgNoContent from json stream.
func (s *InteractionsRemoveRestrictionsForOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InteractionsRemoveRestrictionsForOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InteractionsRemoveRestrictionsForRepoConflict) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads InteractionsRemoveRestrictionsForRepoConflict from json stream.
func (s *InteractionsRemoveRestrictionsForRepoConflict) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InteractionsRemoveRestrictionsForRepoConflict to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InteractionsRemoveRestrictionsForRepoNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads InteractionsRemoveRestrictionsForRepoNoContent from json stream.
func (s *InteractionsRemoveRestrictionsForRepoNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InteractionsRemoveRestrictionsForRepoNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s InteractionsSetRestrictionsForRepoConflict) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads InteractionsSetRestrictionsForRepoConflict from json stream.
func (s *InteractionsSetRestrictionsForRepoConflict) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InteractionsSetRestrictionsForRepoConflict to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueComment) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	if s.BodyText.Set {
		more.More()
		e.ObjField("body_text")
		s.BodyText.WriteJSON(e)
	}
	if s.BodyHTML.Set {
		more.More()
		e.ObjField("body_html")
		s.BodyHTML.WriteJSON(e)
	}
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("issue_url")
	json.WriteURI(e, s.IssueURL)
	more.More()
	e.ObjField("author_association")
	s.AuthorAssociation.WriteJSON(e)
	if s.PerformedViaGithubApp.Set {
		more.More()
		e.ObjField("performed_via_github_app")
		s.PerformedViaGithubApp.WriteJSON(e)
	}
	if s.Reactions.Set {
		more.More()
		e.ObjField("reactions")
		s.Reactions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IssueComment from json stream.
func (s *IssueComment) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueComment to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(d); err != nil {
				return err
			}
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "issue_url":
			v, err := json.ReadURI(d)
			s.IssueURL = v
			if err != nil {
				return err
			}
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		case "performed_via_github_app":
			s.PerformedViaGithubApp.Reset()
			if err := s.PerformedViaGithubApp.ReadJSON(d); err != nil {
				return err
			}
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueEvent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("actor")
	s.Actor.WriteJSON(e)
	more.More()
	e.ObjField("event")
	e.Str(s.Event)
	more.More()
	e.ObjField("commit_id")
	s.CommitID.WriteJSON(e)
	more.More()
	e.ObjField("commit_url")
	s.CommitURL.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	if s.Issue.Set {
		more.More()
		e.ObjField("issue")
		s.Issue.WriteJSON(e)
	}
	if s.Label.Set {
		more.More()
		e.ObjField("label")
		s.Label.WriteJSON(e)
	}
	if s.Assignee.Set {
		more.More()
		e.ObjField("assignee")
		s.Assignee.WriteJSON(e)
	}
	if s.Assigner.Set {
		more.More()
		e.ObjField("assigner")
		s.Assigner.WriteJSON(e)
	}
	if s.ReviewRequester.Set {
		more.More()
		e.ObjField("review_requester")
		s.ReviewRequester.WriteJSON(e)
	}
	if s.RequestedReviewer.Set {
		more.More()
		e.ObjField("requested_reviewer")
		s.RequestedReviewer.WriteJSON(e)
	}
	if s.RequestedTeam.Set {
		more.More()
		e.ObjField("requested_team")
		s.RequestedTeam.WriteJSON(e)
	}
	if s.DismissedReview.Set {
		more.More()
		e.ObjField("dismissed_review")
		s.DismissedReview.WriteJSON(e)
	}
	if s.Milestone.Set {
		more.More()
		e.ObjField("milestone")
		s.Milestone.WriteJSON(e)
	}
	if s.ProjectCard.Set {
		more.More()
		e.ObjField("project_card")
		s.ProjectCard.WriteJSON(e)
	}
	if s.Rename.Set {
		more.More()
		e.ObjField("rename")
		s.Rename.WriteJSON(e)
	}
	if s.AuthorAssociation.Set {
		more.More()
		e.ObjField("author_association")
		s.AuthorAssociation.WriteJSON(e)
	}
	if s.LockReason.Set {
		more.More()
		e.ObjField("lock_reason")
		s.LockReason.WriteJSON(e)
	}
	if s.PerformedViaGithubApp.Set {
		more.More()
		e.ObjField("performed_via_github_app")
		s.PerformedViaGithubApp.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IssueEvent from json stream.
func (s *IssueEvent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueEvent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "actor":
			if err := s.Actor.ReadJSON(d); err != nil {
				return err
			}
		case "event":
			v, err := d.Str()
			s.Event = string(v)
			if err != nil {
				return err
			}
		case "commit_id":
			if err := s.CommitID.ReadJSON(d); err != nil {
				return err
			}
		case "commit_url":
			if err := s.CommitURL.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "issue":
			s.Issue.Reset()
			if err := s.Issue.ReadJSON(d); err != nil {
				return err
			}
		case "label":
			s.Label.Reset()
			if err := s.Label.ReadJSON(d); err != nil {
				return err
			}
		case "assignee":
			s.Assignee.Reset()
			if err := s.Assignee.ReadJSON(d); err != nil {
				return err
			}
		case "assigner":
			s.Assigner.Reset()
			if err := s.Assigner.ReadJSON(d); err != nil {
				return err
			}
		case "review_requester":
			s.ReviewRequester.Reset()
			if err := s.ReviewRequester.ReadJSON(d); err != nil {
				return err
			}
		case "requested_reviewer":
			s.RequestedReviewer.Reset()
			if err := s.RequestedReviewer.ReadJSON(d); err != nil {
				return err
			}
		case "requested_team":
			s.RequestedTeam.Reset()
			if err := s.RequestedTeam.ReadJSON(d); err != nil {
				return err
			}
		case "dismissed_review":
			s.DismissedReview.Reset()
			if err := s.DismissedReview.ReadJSON(d); err != nil {
				return err
			}
		case "milestone":
			s.Milestone.Reset()
			if err := s.Milestone.ReadJSON(d); err != nil {
				return err
			}
		case "project_card":
			s.ProjectCard.Reset()
			if err := s.ProjectCard.ReadJSON(d); err != nil {
				return err
			}
		case "rename":
			s.Rename.Reset()
			if err := s.Rename.ReadJSON(d); err != nil {
				return err
			}
		case "author_association":
			s.AuthorAssociation.Reset()
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		case "lock_reason":
			s.LockReason.Reset()
			if err := s.LockReason.ReadJSON(d); err != nil {
				return err
			}
		case "performed_via_github_app":
			s.PerformedViaGithubApp.Reset()
			if err := s.PerformedViaGithubApp.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueEventDismissedReview) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("review_id")
	e.Int(s.ReviewID)
	more.More()
	e.ObjField("dismissal_message")
	s.DismissalMessage.WriteJSON(e)
	if s.DismissalCommitID.Set {
		more.More()
		e.ObjField("dismissal_commit_id")
		s.DismissalCommitID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IssueEventDismissedReview from json stream.
func (s *IssueEventDismissedReview) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueEventDismissedReview to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "review_id":
			v, err := d.Int()
			s.ReviewID = int(v)
			if err != nil {
				return err
			}
		case "dismissal_message":
			if err := s.DismissalMessage.ReadJSON(d); err != nil {
				return err
			}
		case "dismissal_commit_id":
			s.DismissalCommitID.Reset()
			if err := s.DismissalCommitID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueEventLabel) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	s.Name.WriteJSON(e)
	more.More()
	e.ObjField("color")
	s.Color.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads IssueEventLabel from json stream.
func (s *IssueEventLabel) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueEventLabel to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "color":
			if err := s.Color.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueEventMilestone) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	e.ObjEnd()
}

// ReadJSON reads IssueEventMilestone from json stream.
func (s *IssueEventMilestone) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueEventMilestone to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueEventProjectCard) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("project_url")
	json.WriteURI(e, s.ProjectURL)
	more.More()
	e.ObjField("project_id")
	e.Int(s.ProjectID)
	more.More()
	e.ObjField("column_name")
	e.Str(s.ColumnName)
	if s.PreviousColumnName.Set {
		more.More()
		e.ObjField("previous_column_name")
		s.PreviousColumnName.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IssueEventProjectCard from json stream.
func (s *IssueEventProjectCard) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueEventProjectCard to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "project_url":
			v, err := json.ReadURI(d)
			s.ProjectURL = v
			if err != nil {
				return err
			}
		case "project_id":
			v, err := d.Int()
			s.ProjectID = int(v)
			if err != nil {
				return err
			}
		case "column_name":
			v, err := d.Str()
			s.ColumnName = string(v)
			if err != nil {
				return err
			}
		case "previous_column_name":
			s.PreviousColumnName.Reset()
			if err := s.PreviousColumnName.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueEventRename) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("from")
	e.Str(s.From)
	more.More()
	e.ObjField("to")
	e.Str(s.To)
	e.ObjEnd()
}

// ReadJSON reads IssueEventRename from json stream.
func (s *IssueEventRename) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueEventRename to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			v, err := d.Str()
			s.From = string(v)
			if err != nil {
				return err
			}
		case "to":
			v, err := d.Str()
			s.To = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueSearchResultItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("repository_url")
	json.WriteURI(e, s.RepositoryURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("comments_url")
	json.WriteURI(e, s.CommentsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("locked")
	e.Bool(s.Locked)
	if s.ActiveLockReason.Set {
		more.More()
		e.ObjField("active_lock_reason")
		s.ActiveLockReason.WriteJSON(e)
	}
	if s.Assignees.Set {
		more.More()
		e.ObjField("assignees")
		s.Assignees.WriteJSON(e)
	}
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("labels")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Labels {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("assignee")
	s.Assignee.WriteJSON(e)
	more.More()
	e.ObjField("milestone")
	s.Milestone.WriteJSON(e)
	more.More()
	e.ObjField("comments")
	e.Int(s.Comments)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("closed_at")
	s.ClosedAt.WriteJSON(e, json.WriteDateTime)
	if s.TextMatches != nil {
		more.More()
		e.ObjField("text_matches")
		s.TextMatches.WriteJSON(e)
	}
	if s.PullRequest.Set {
		more.More()
		e.ObjField("pull_request")
		s.PullRequest.WriteJSON(e)
	}
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	more.More()
	e.ObjField("score")
	e.Float64(s.Score)
	more.More()
	e.ObjField("author_association")
	s.AuthorAssociation.WriteJSON(e)
	if s.Draft.Set {
		more.More()
		e.ObjField("draft")
		s.Draft.WriteJSON(e)
	}
	if s.Repository.Set {
		more.More()
		e.ObjField("repository")
		s.Repository.WriteJSON(e)
	}
	if s.BodyHTML.Set {
		more.More()
		e.ObjField("body_html")
		s.BodyHTML.WriteJSON(e)
	}
	if s.BodyText.Set {
		more.More()
		e.ObjField("body_text")
		s.BodyText.WriteJSON(e)
	}
	if s.TimelineURL.Set {
		more.More()
		e.ObjField("timeline_url")
		s.TimelineURL.WriteJSON(e)
	}
	if s.PerformedViaGithubApp.Set {
		more.More()
		e.ObjField("performed_via_github_app")
		s.PerformedViaGithubApp.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IssueSearchResultItem from json stream.
func (s *IssueSearchResultItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueSearchResultItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "repository_url":
			v, err := json.ReadURI(d)
			s.RepositoryURL = v
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := json.ReadURI(d)
			s.CommentsURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "locked":
			v, err := d.Bool()
			s.Locked = bool(v)
			if err != nil {
				return err
			}
		case "active_lock_reason":
			s.ActiveLockReason.Reset()
			if err := s.ActiveLockReason.ReadJSON(d); err != nil {
				return err
			}
		case "assignees":
			s.Assignees.Reset()
			if err := s.Assignees.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "labels":
			s.Labels = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem IssueSearchResultItemLabelsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Labels = append(s.Labels, elem)
				return nil
			}); err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "assignee":
			if err := s.Assignee.ReadJSON(d); err != nil {
				return err
			}
		case "milestone":
			if err := s.Milestone.ReadJSON(d); err != nil {
				return err
			}
		case "comments":
			v, err := d.Int()
			s.Comments = int(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "closed_at":
			if err := s.ClosedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "text_matches":
			s.TextMatches = nil
			var elem SearchResultTextMatches
			if err := fmt.Errorf(`decoding of "SearchResultTextMatches" (alias) is not implemented`); err != nil {
				return err
			}
			s.TextMatches = &elem
		case "pull_request":
			s.PullRequest.Reset()
			if err := s.PullRequest.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "score":
			v, err := d.Float64()
			s.Score = float64(v)
			if err != nil {
				return err
			}
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		case "draft":
			s.Draft.Reset()
			if err := s.Draft.ReadJSON(d); err != nil {
				return err
			}
		case "repository":
			s.Repository.Reset()
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(d); err != nil {
				return err
			}
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(d); err != nil {
				return err
			}
		case "timeline_url":
			s.TimelineURL.Reset()
			if err := s.TimelineURL.ReadJSON(d); err != nil {
				return err
			}
		case "performed_via_github_app":
			s.PerformedViaGithubApp.Reset()
			if err := s.PerformedViaGithubApp.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueSearchResultItemLabelsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Color.Set {
		more.More()
		e.ObjField("color")
		s.Color.WriteJSON(e)
	}
	if s.Default.Set {
		more.More()
		e.ObjField("default")
		s.Default.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IssueSearchResultItemLabelsItem from json stream.
func (s *IssueSearchResultItemLabelsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueSearchResultItemLabelsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "color":
			s.Color.Reset()
			if err := s.Color.ReadJSON(d); err != nil {
				return err
			}
		case "default":
			s.Default.Reset()
			if err := s.Default.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueSearchResultItemPullRequest) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.MergedAt.Set {
		more.More()
		e.ObjField("merged_at")
		s.MergedAt.WriteJSON(e, json.WriteDateTime)
	}
	more.More()
	e.ObjField("diff_url")
	s.DiffURL.WriteJSON(e)
	more.More()
	e.ObjField("html_url")
	s.HTMLURL.WriteJSON(e)
	more.More()
	e.ObjField("patch_url")
	s.PatchURL.WriteJSON(e)
	more.More()
	e.ObjField("url")
	s.URL.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads IssueSearchResultItemPullRequest from json stream.
func (s *IssueSearchResultItemPullRequest) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueSearchResultItemPullRequest to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "merged_at":
			s.MergedAt.Reset()
			if err := s.MergedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "diff_url":
			if err := s.DiffURL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "patch_url":
			if err := s.PatchURL.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("repository_url")
	json.WriteURI(e, s.RepositoryURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("comments_url")
	json.WriteURI(e, s.CommentsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("labels")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Labels {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("assignee")
	s.Assignee.WriteJSON(e)
	if s.Assignees.Set {
		more.More()
		e.ObjField("assignees")
		s.Assignees.WriteJSON(e)
	}
	more.More()
	e.ObjField("milestone")
	s.Milestone.WriteJSON(e)
	more.More()
	e.ObjField("locked")
	e.Bool(s.Locked)
	if s.ActiveLockReason.Set {
		more.More()
		e.ObjField("active_lock_reason")
		s.ActiveLockReason.WriteJSON(e)
	}
	more.More()
	e.ObjField("comments")
	e.Int(s.Comments)
	if s.PullRequest.Set {
		more.More()
		e.ObjField("pull_request")
		s.PullRequest.WriteJSON(e)
	}
	more.More()
	e.ObjField("closed_at")
	s.ClosedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("author_association")
	s.AuthorAssociation.WriteJSON(e)
	if s.BodyHTML.Set {
		more.More()
		e.ObjField("body_html")
		s.BodyHTML.WriteJSON(e)
	}
	if s.BodyText.Set {
		more.More()
		e.ObjField("body_text")
		s.BodyText.WriteJSON(e)
	}
	if s.TimelineURL.Set {
		more.More()
		e.ObjField("timeline_url")
		s.TimelineURL.WriteJSON(e)
	}
	if s.Repository.Set {
		more.More()
		e.ObjField("repository")
		s.Repository.WriteJSON(e)
	}
	if s.PerformedViaGithubApp.Set {
		more.More()
		e.ObjField("performed_via_github_app")
		s.PerformedViaGithubApp.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IssueSimple from json stream.
func (s *IssueSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "repository_url":
			v, err := json.ReadURI(d)
			s.RepositoryURL = v
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := json.ReadURI(d)
			s.CommentsURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "labels":
			s.Labels = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Label
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Labels = append(s.Labels, elem)
				return nil
			}); err != nil {
				return err
			}
		case "assignee":
			if err := s.Assignee.ReadJSON(d); err != nil {
				return err
			}
		case "assignees":
			s.Assignees.Reset()
			if err := s.Assignees.ReadJSON(d); err != nil {
				return err
			}
		case "milestone":
			if err := s.Milestone.ReadJSON(d); err != nil {
				return err
			}
		case "locked":
			v, err := d.Bool()
			s.Locked = bool(v)
			if err != nil {
				return err
			}
		case "active_lock_reason":
			s.ActiveLockReason.Reset()
			if err := s.ActiveLockReason.ReadJSON(d); err != nil {
				return err
			}
		case "comments":
			v, err := d.Int()
			s.Comments = int(v)
			if err != nil {
				return err
			}
		case "pull_request":
			s.PullRequest.Reset()
			if err := s.PullRequest.ReadJSON(d); err != nil {
				return err
			}
		case "closed_at":
			if err := s.ClosedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(d); err != nil {
				return err
			}
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(d); err != nil {
				return err
			}
		case "timeline_url":
			s.TimelineURL.Reset()
			if err := s.TimelineURL.ReadJSON(d); err != nil {
				return err
			}
		case "repository":
			s.Repository.Reset()
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "performed_via_github_app":
			s.PerformedViaGithubApp.Reset()
			if err := s.PerformedViaGithubApp.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssueSimplePullRequest) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.MergedAt.Set {
		more.More()
		e.ObjField("merged_at")
		s.MergedAt.WriteJSON(e, json.WriteDateTime)
	}
	more.More()
	e.ObjField("diff_url")
	s.DiffURL.WriteJSON(e)
	more.More()
	e.ObjField("html_url")
	s.HTMLURL.WriteJSON(e)
	more.More()
	e.ObjField("patch_url")
	s.PatchURL.WriteJSON(e)
	more.More()
	e.ObjField("url")
	s.URL.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads IssueSimplePullRequest from json stream.
func (s *IssueSimplePullRequest) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssueSimplePullRequest to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "merged_at":
			s.MergedAt.Reset()
			if err := s.MergedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "diff_url":
			if err := s.DiffURL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "patch_url":
			if err := s.PatchURL.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesAddAssigneesReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Assignees != nil {
		more.More()
		e.ObjField("assignees")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Assignees {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads IssuesAddAssigneesReq from json stream.
func (s *IssuesAddAssigneesReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesAddAssigneesReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "assignees":
			s.Assignees = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Assignees = append(s.Assignees, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesCheckUserCanBeAssignedNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads IssuesCheckUserCanBeAssignedNoContent from json stream.
func (s *IssuesCheckUserCanBeAssignedNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesCheckUserCanBeAssignedNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesCreateCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads IssuesCreateCommentReq from json stream.
func (s *IssuesCreateCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesCreateCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesCreateLabelReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Color.Set {
		more.More()
		e.ObjField("color")
		s.Color.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IssuesCreateLabelReq from json stream.
func (s *IssuesCreateLabelReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesCreateLabelReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "color":
			s.Color.Reset()
			if err := s.Color.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesCreateMilestoneReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	if s.State.Set {
		more.More()
		e.ObjField("state")
		s.State.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.DueOn.Set {
		more.More()
		e.ObjField("due_on")
		s.DueOn.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads IssuesCreateMilestoneReq from json stream.
func (s *IssuesCreateMilestoneReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesCreateMilestoneReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "due_on":
			s.DueOn.Reset()
			if err := s.DueOn.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesCreateMilestoneReqState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesCreateMilestoneReqState from json reader.
func (s *IssuesCreateMilestoneReqState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesCreateMilestoneReqState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesCreateMilestoneReqState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesDeleteCommentNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads IssuesDeleteCommentNoContent from json stream.
func (s *IssuesDeleteCommentNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesDeleteCommentNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesDeleteLabelNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads IssuesDeleteLabelNoContent from json stream.
func (s *IssuesDeleteLabelNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesDeleteLabelNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesDeleteMilestoneNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads IssuesDeleteMilestoneNoContent from json stream.
func (s *IssuesDeleteMilestoneNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesDeleteMilestoneNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (IssuesGetEventApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (IssuesGetEventApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (IssuesGetEventApplicationJSONGone) WriteJSON(e *json.Encoder)      {}
func (IssuesGetEventApplicationJSONGone) ReadJSON(d *json.Decoder) error { return nil }

func (IssuesGetEventApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (IssuesGetEventApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (IssuesListAssigneesOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (IssuesListAssigneesOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (IssuesListCommentsApplicationJSONGone) WriteJSON(e *json.Encoder)      {}
func (IssuesListCommentsApplicationJSONGone) ReadJSON(d *json.Decoder) error { return nil }

func (IssuesListCommentsApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (IssuesListCommentsApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IssuesListCommentsForRepoDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListCommentsForRepoDirection from json reader.
func (s *IssuesListCommentsForRepoDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListCommentsForRepoDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListCommentsForRepoDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListCommentsForRepoSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListCommentsForRepoSort from json reader.
func (s *IssuesListCommentsForRepoSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListCommentsForRepoSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListCommentsForRepoSort(v)
	return nil
}

func (IssuesListCommentsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (IssuesListCommentsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IssuesListDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListDirection from json reader.
func (s *IssuesListDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListFilter) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListFilter from json reader.
func (s *IssuesListFilter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListFilter to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListFilter(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForAuthenticatedUserDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForAuthenticatedUserDirection from json reader.
func (s *IssuesListForAuthenticatedUserDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForAuthenticatedUserDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForAuthenticatedUserDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForAuthenticatedUserFilter) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForAuthenticatedUserFilter from json reader.
func (s *IssuesListForAuthenticatedUserFilter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForAuthenticatedUserFilter to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForAuthenticatedUserFilter(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForAuthenticatedUserSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForAuthenticatedUserSort from json reader.
func (s *IssuesListForAuthenticatedUserSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForAuthenticatedUserSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForAuthenticatedUserSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForAuthenticatedUserState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForAuthenticatedUserState from json reader.
func (s *IssuesListForAuthenticatedUserState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForAuthenticatedUserState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForAuthenticatedUserState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForOrgDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForOrgDirection from json reader.
func (s *IssuesListForOrgDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForOrgDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForOrgDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForOrgFilter) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForOrgFilter from json reader.
func (s *IssuesListForOrgFilter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForOrgFilter to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForOrgFilter(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForOrgSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForOrgSort from json reader.
func (s *IssuesListForOrgSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForOrgSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForOrgSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForOrgState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForOrgState from json reader.
func (s *IssuesListForOrgState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForOrgState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForOrgState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForRepoDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForRepoDirection from json reader.
func (s *IssuesListForRepoDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForRepoDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForRepoDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForRepoSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForRepoSort from json reader.
func (s *IssuesListForRepoSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForRepoSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForRepoSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListForRepoState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListForRepoState from json reader.
func (s *IssuesListForRepoState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListForRepoState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListForRepoState(v)
	return nil
}

func (IssuesListLabelsForRepoOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (IssuesListLabelsForRepoOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (IssuesListLabelsOnIssueOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (IssuesListLabelsOnIssueOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IssuesListMilestonesDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListMilestonesDirection from json reader.
func (s *IssuesListMilestonesDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListMilestonesDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListMilestonesDirection(v)
	return nil
}

func (IssuesListMilestonesOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (IssuesListMilestonesOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IssuesListMilestonesSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListMilestonesSort from json reader.
func (s *IssuesListMilestonesSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListMilestonesSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListMilestonesSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListMilestonesState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListMilestonesState from json reader.
func (s *IssuesListMilestonesState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListMilestonesState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListMilestonesState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListSort from json reader.
func (s *IssuesListSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesListState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesListState from json reader.
func (s *IssuesListState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesListState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesListState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesLockNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads IssuesLockNoContent from json stream.
func (s *IssuesLockNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesLockNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesLockReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.LockReason.Set {
		more.More()
		e.ObjField("lock_reason")
		s.LockReason.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IssuesLockReq from json stream.
func (s *IssuesLockReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesLockReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "lock_reason":
			s.LockReason.Reset()
			if err := s.LockReason.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesLockReqLockReason) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesLockReqLockReason from json reader.
func (s *IssuesLockReqLockReason) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesLockReqLockReason to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesLockReqLockReason(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s IssuesRemoveAllLabelsNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads IssuesRemoveAllLabelsNoContent from json stream.
func (s *IssuesRemoveAllLabelsNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesRemoveAllLabelsNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesRemoveAssigneesReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Assignees != nil {
		more.More()
		e.ObjField("assignees")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Assignees {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads IssuesRemoveAssigneesReq from json stream.
func (s *IssuesRemoveAssigneesReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesRemoveAssigneesReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "assignees":
			s.Assignees = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Assignees = append(s.Assignees, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (IssuesRemoveLabelApplicationJSONGone) WriteJSON(e *json.Encoder)      {}
func (IssuesRemoveLabelApplicationJSONGone) ReadJSON(d *json.Decoder) error { return nil }

func (IssuesRemoveLabelApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (IssuesRemoveLabelApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (IssuesRemoveLabelOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (IssuesRemoveLabelOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (IssuesUnlockApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (IssuesUnlockApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (IssuesUnlockApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (IssuesUnlockApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IssuesUnlockNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads IssuesUnlockNoContent from json stream.
func (s *IssuesUnlockNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesUnlockNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesUpdateCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads IssuesUpdateCommentReq from json stream.
func (s *IssuesUpdateCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesUpdateCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesUpdateLabelReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.NewName.Set {
		more.More()
		e.ObjField("new_name")
		s.NewName.WriteJSON(e)
	}
	if s.Color.Set {
		more.More()
		e.ObjField("color")
		s.Color.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads IssuesUpdateLabelReq from json stream.
func (s *IssuesUpdateLabelReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesUpdateLabelReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "new_name":
			s.NewName.Reset()
			if err := s.NewName.ReadJSON(d); err != nil {
				return err
			}
		case "color":
			s.Color.Reset()
			if err := s.Color.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesUpdateMilestoneReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Title.Set {
		more.More()
		e.ObjField("title")
		s.Title.WriteJSON(e)
	}
	if s.State.Set {
		more.More()
		e.ObjField("state")
		s.State.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.DueOn.Set {
		more.More()
		e.ObjField("due_on")
		s.DueOn.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads IssuesUpdateMilestoneReq from json stream.
func (s *IssuesUpdateMilestoneReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesUpdateMilestoneReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "due_on":
			s.DueOn.Reset()
			if err := s.DueOn.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IssuesUpdateMilestoneReqState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads IssuesUpdateMilestoneReqState from json reader.
func (s *IssuesUpdateMilestoneReqState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IssuesUpdateMilestoneReqState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = IssuesUpdateMilestoneReqState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Job) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("run_id")
	e.Int(s.RunID)
	more.More()
	e.ObjField("run_url")
	e.Str(s.RunURL)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("head_sha")
	e.Str(s.HeadSha)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("html_url")
	s.HTMLURL.WriteJSON(e)
	more.More()
	e.ObjField("status")
	s.Status.WriteJSON(e)
	more.More()
	e.ObjField("conclusion")
	s.Conclusion.WriteJSON(e)
	more.More()
	e.ObjField("started_at")
	json.WriteDateTime(e, s.StartedAt)
	more.More()
	e.ObjField("completed_at")
	s.CompletedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Steps != nil {
		more.More()
		e.ObjField("steps")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Steps {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("check_run_url")
	e.Str(s.CheckRunURL)
	e.ObjEnd()
}

// ReadJSON reads Job from json stream.
func (s *Job) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Job to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "run_id":
			v, err := d.Int()
			s.RunID = int(v)
			if err != nil {
				return err
			}
		case "run_url":
			v, err := d.Str()
			s.RunURL = string(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "head_sha":
			v, err := d.Str()
			s.HeadSha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "status":
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "conclusion":
			if err := s.Conclusion.ReadJSON(d); err != nil {
				return err
			}
		case "started_at":
			v, err := json.ReadDateTime(d)
			s.StartedAt = v
			if err != nil {
				return err
			}
		case "completed_at":
			if err := s.CompletedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "steps":
			s.Steps = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem JobStepsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Steps = append(s.Steps, elem)
				return nil
			}); err != nil {
				return err
			}
		case "check_run_url":
			v, err := d.Str()
			s.CheckRunURL = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s JobStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads JobStatus from json reader.
func (s *JobStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode JobStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = JobStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s JobStepsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("status")
	s.Status.WriteJSON(e)
	more.More()
	e.ObjField("conclusion")
	s.Conclusion.WriteJSON(e)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	if s.StartedAt.Set {
		more.More()
		e.ObjField("started_at")
		s.StartedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.CompletedAt.Set {
		more.More()
		e.ObjField("completed_at")
		s.CompletedAt.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads JobStepsItem from json stream.
func (s *JobStepsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode JobStepsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "conclusion":
			if err := s.Conclusion.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "started_at":
			s.StartedAt.Reset()
			if err := s.StartedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "completed_at":
			s.CompletedAt.Reset()
			if err := s.CompletedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s JobStepsItemStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads JobStepsItemStatus from json reader.
func (s *JobStepsItemStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode JobStepsItemStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = JobStepsItemStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Key) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("verified")
	e.Bool(s.Verified)
	more.More()
	e.ObjField("read_only")
	e.Bool(s.ReadOnly)
	e.ObjEnd()
}

// ReadJSON reads Key from json stream.
func (s *Key) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Key to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "verified":
			v, err := d.Bool()
			s.Verified = bool(v)
			if err != nil {
				return err
			}
		case "read_only":
			v, err := d.Bool()
			s.ReadOnly = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s KeySimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	e.ObjEnd()
}

// ReadJSON reads KeySimple from json stream.
func (s *KeySimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode KeySimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Label) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int64(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("color")
	e.Str(s.Color)
	more.More()
	e.ObjField("default")
	e.Bool(s.Default)
	e.ObjEnd()
}

// ReadJSON reads Label from json stream.
func (s *Label) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Label to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int64()
			s.ID = int64(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "color":
			v, err := d.Str()
			s.Color = string(v)
			if err != nil {
				return err
			}
		case "default":
			v, err := d.Bool()
			s.Default = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s LabelSearchResultItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("color")
	e.Str(s.Color)
	more.More()
	e.ObjField("default")
	e.Bool(s.Default)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("score")
	e.Float64(s.Score)
	if s.TextMatches != nil {
		more.More()
		e.ObjField("text_matches")
		s.TextMatches.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads LabelSearchResultItem from json stream.
func (s *LabelSearchResultItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode LabelSearchResultItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "color":
			v, err := d.Str()
			s.Color = string(v)
			if err != nil {
				return err
			}
		case "default":
			v, err := d.Bool()
			s.Default = bool(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "score":
			v, err := d.Float64()
			s.Score = float64(v)
			if err != nil {
				return err
			}
		case "text_matches":
			s.TextMatches = nil
			var elem SearchResultTextMatches
			if err := fmt.Errorf(`decoding of "SearchResultTextMatches" (alias) is not implemented`); err != nil {
				return err
			}
			s.TextMatches = &elem
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Language) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads Language from json stream.
func (s *Language) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Language to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s License) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("spdx_id")
	s.SpdxID.WriteJSON(e)
	more.More()
	e.ObjField("url")
	s.URL.WriteJSON(e)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("description")
	e.Str(s.Description)
	more.More()
	e.ObjField("implementation")
	e.Str(s.Implementation)
	more.More()
	e.ObjField("permissions")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Permissions {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("conditions")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Conditions {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("limitations")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Limitations {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	more.More()
	e.ObjField("featured")
	e.Bool(s.Featured)
	e.ObjEnd()
}

// ReadJSON reads License from json stream.
func (s *License) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode License to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "spdx_id":
			if err := s.SpdxID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "description":
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "implementation":
			v, err := d.Str()
			s.Implementation = string(v)
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Permissions = append(s.Permissions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "limitations":
			s.Limitations = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Limitations = append(s.Limitations, elem)
				return nil
			}); err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "featured":
			v, err := d.Bool()
			s.Featured = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s LicenseContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	s.HTMLURL.WriteJSON(e)
	more.More()
	e.ObjField("git_url")
	s.GitURL.WriteJSON(e)
	more.More()
	e.ObjField("download_url")
	s.DownloadURL.WriteJSON(e)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("content")
	e.Str(s.Content)
	more.More()
	e.ObjField("encoding")
	e.Str(s.Encoding)
	more.More()
	e.ObjField("_links")
	s.Links.WriteJSON(e)
	more.More()
	e.ObjField("license")
	s.License.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads LicenseContent from json stream.
func (s *LicenseContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode LicenseContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_url":
			if err := s.GitURL.ReadJSON(d); err != nil {
				return err
			}
		case "download_url":
			if err := s.DownloadURL.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "content":
			v, err := d.Str()
			s.Content = string(v)
			if err != nil {
				return err
			}
		case "encoding":
			v, err := d.Str()
			s.Encoding = string(v)
			if err != nil {
				return err
			}
		case "_links":
			if err := s.Links.ReadJSON(d); err != nil {
				return err
			}
		case "license":
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s LicenseContentLinks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("git")
	s.Git.WriteJSON(e)
	more.More()
	e.ObjField("html")
	s.HTML.WriteJSON(e)
	more.More()
	e.ObjField("self")
	json.WriteURI(e, s.Self)
	e.ObjEnd()
}

// ReadJSON reads LicenseContentLinks from json stream.
func (s *LicenseContentLinks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode LicenseContentLinks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "git":
			if err := s.Git.ReadJSON(d); err != nil {
				return err
			}
		case "html":
			if err := s.HTML.ReadJSON(d); err != nil {
				return err
			}
		case "self":
			v, err := json.ReadURI(d)
			s.Self = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s LicenseSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("url")
	s.URL.WriteJSON(e)
	more.More()
	e.ObjField("spdx_id")
	s.SpdxID.WriteJSON(e)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads LicenseSimple from json stream.
func (s *LicenseSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode LicenseSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "url":
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "spdx_id":
			if err := s.SpdxID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (LicensesGetAllCommonlyUsedOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (LicensesGetAllCommonlyUsedOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (LicensesGetApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (LicensesGetApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (LicensesGetApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (LicensesGetApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s Link) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("href")
	e.Str(s.Href)
	e.ObjEnd()
}

// ReadJSON reads Link from json stream.
func (s *Link) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Link to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "href":
			v, err := d.Str()
			s.Href = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s LinkWithType) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("href")
	e.Str(s.Href)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	e.ObjEnd()
}

// ReadJSON reads LinkWithType from json stream.
func (s *LinkWithType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode LinkWithType to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "href":
			v, err := d.Str()
			s.Href = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (MarkdownRenderOKTextHTML) WriteJSON(e *json.Encoder)      {}
func (MarkdownRenderOKTextHTML) ReadJSON(d *json.Decoder) error { return nil }

func (MarkdownRenderRawOKTextHTML) WriteJSON(e *json.Encoder)      {}
func (MarkdownRenderRawOKTextHTML) ReadJSON(d *json.Decoder) error { return nil }

func (MarkdownRenderRawReqTextPlain) WriteJSON(e *json.Encoder)      {}
func (MarkdownRenderRawReqTextPlain) ReadJSON(d *json.Decoder) error { return nil }

func (MarkdownRenderRawReqTextXMarkdown) WriteJSON(e *json.Encoder)      {}
func (MarkdownRenderRawReqTextXMarkdown) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s MarkdownRenderReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("text")
	e.Str(s.Text)
	if s.Mode.Set {
		more.More()
		e.ObjField("mode")
		s.Mode.WriteJSON(e)
	}
	if s.Context.Set {
		more.More()
		e.ObjField("context")
		s.Context.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MarkdownRenderReq from json stream.
func (s *MarkdownRenderReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MarkdownRenderReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "text":
			v, err := d.Str()
			s.Text = string(v)
			if err != nil {
				return err
			}
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(d); err != nil {
				return err
			}
		case "context":
			s.Context.Reset()
			if err := s.Context.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MarkdownRenderReqMode) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads MarkdownRenderReqMode from json reader.
func (s *MarkdownRenderReqMode) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MarkdownRenderReqMode to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MarkdownRenderReqMode(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MarketplaceAccount) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.OrganizationBillingEmail.Set {
		more.More()
		e.ObjField("organization_billing_email")
		s.OrganizationBillingEmail.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MarketplaceAccount from json stream.
func (s *MarketplaceAccount) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MarketplaceAccount to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "organization_billing_email":
			s.OrganizationBillingEmail.Reset()
			if err := s.OrganizationBillingEmail.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MarketplaceListingPlan) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("accounts_url")
	json.WriteURI(e, s.AccountsURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("description")
	e.Str(s.Description)
	more.More()
	e.ObjField("monthly_price_in_cents")
	e.Int(s.MonthlyPriceInCents)
	more.More()
	e.ObjField("yearly_price_in_cents")
	e.Int(s.YearlyPriceInCents)
	more.More()
	e.ObjField("price_model")
	e.Str(s.PriceModel)
	more.More()
	e.ObjField("has_free_trial")
	e.Bool(s.HasFreeTrial)
	more.More()
	e.ObjField("unit_name")
	s.UnitName.WriteJSON(e)
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("bullets")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Bullets {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads MarketplaceListingPlan from json stream.
func (s *MarketplaceListingPlan) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MarketplaceListingPlan to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "accounts_url":
			v, err := json.ReadURI(d)
			s.AccountsURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "monthly_price_in_cents":
			v, err := d.Int()
			s.MonthlyPriceInCents = int(v)
			if err != nil {
				return err
			}
		case "yearly_price_in_cents":
			v, err := d.Int()
			s.YearlyPriceInCents = int(v)
			if err != nil {
				return err
			}
		case "price_model":
			v, err := d.Str()
			s.PriceModel = string(v)
			if err != nil {
				return err
			}
		case "has_free_trial":
			v, err := d.Bool()
			s.HasFreeTrial = bool(v)
			if err != nil {
				return err
			}
		case "unit_name":
			if err := s.UnitName.ReadJSON(d); err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "bullets":
			s.Bullets = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Bullets = append(s.Bullets, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MarketplacePurchase) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	if s.OrganizationBillingEmail.Set {
		more.More()
		e.ObjField("organization_billing_email")
		s.OrganizationBillingEmail.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.MarketplacePendingChange.Set {
		more.More()
		e.ObjField("marketplace_pending_change")
		s.MarketplacePendingChange.WriteJSON(e)
	}
	more.More()
	e.ObjField("marketplace_purchase")
	s.MarketplacePurchase.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads MarketplacePurchase from json stream.
func (s *MarketplacePurchase) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MarketplacePurchase to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "organization_billing_email":
			s.OrganizationBillingEmail.Reset()
			if err := s.OrganizationBillingEmail.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "marketplace_pending_change":
			s.MarketplacePendingChange.Reset()
			if err := s.MarketplacePendingChange.ReadJSON(d); err != nil {
				return err
			}
		case "marketplace_purchase":
			if err := s.MarketplacePurchase.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MarketplacePurchaseMarketplacePendingChange) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.IsInstalled.Set {
		more.More()
		e.ObjField("is_installed")
		s.IsInstalled.WriteJSON(e)
	}
	if s.EffectiveDate.Set {
		more.More()
		e.ObjField("effective_date")
		s.EffectiveDate.WriteJSON(e)
	}
	if s.UnitCount.Set {
		more.More()
		e.ObjField("unit_count")
		s.UnitCount.WriteJSON(e)
	}
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.Plan.Set {
		more.More()
		e.ObjField("plan")
		s.Plan.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MarketplacePurchaseMarketplacePendingChange from json stream.
func (s *MarketplacePurchaseMarketplacePendingChange) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MarketplacePurchaseMarketplacePendingChange to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "is_installed":
			s.IsInstalled.Reset()
			if err := s.IsInstalled.ReadJSON(d); err != nil {
				return err
			}
		case "effective_date":
			s.EffectiveDate.Reset()
			if err := s.EffectiveDate.ReadJSON(d); err != nil {
				return err
			}
		case "unit_count":
			s.UnitCount.Reset()
			if err := s.UnitCount.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "plan":
			s.Plan.Reset()
			if err := s.Plan.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MarketplacePurchaseMarketplacePurchase) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.BillingCycle.Set {
		more.More()
		e.ObjField("billing_cycle")
		s.BillingCycle.WriteJSON(e)
	}
	if s.NextBillingDate.Set {
		more.More()
		e.ObjField("next_billing_date")
		s.NextBillingDate.WriteJSON(e)
	}
	if s.IsInstalled.Set {
		more.More()
		e.ObjField("is_installed")
		s.IsInstalled.WriteJSON(e)
	}
	if s.UnitCount.Set {
		more.More()
		e.ObjField("unit_count")
		s.UnitCount.WriteJSON(e)
	}
	if s.OnFreeTrial.Set {
		more.More()
		e.ObjField("on_free_trial")
		s.OnFreeTrial.WriteJSON(e)
	}
	if s.FreeTrialEndsOn.Set {
		more.More()
		e.ObjField("free_trial_ends_on")
		s.FreeTrialEndsOn.WriteJSON(e)
	}
	if s.UpdatedAt.Set {
		more.More()
		e.ObjField("updated_at")
		s.UpdatedAt.WriteJSON(e)
	}
	if s.Plan.Set {
		more.More()
		e.ObjField("plan")
		s.Plan.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MarketplacePurchaseMarketplacePurchase from json stream.
func (s *MarketplacePurchaseMarketplacePurchase) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MarketplacePurchaseMarketplacePurchase to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "billing_cycle":
			s.BillingCycle.Reset()
			if err := s.BillingCycle.ReadJSON(d); err != nil {
				return err
			}
		case "next_billing_date":
			s.NextBillingDate.Reset()
			if err := s.NextBillingDate.ReadJSON(d); err != nil {
				return err
			}
		case "is_installed":
			s.IsInstalled.Reset()
			if err := s.IsInstalled.ReadJSON(d); err != nil {
				return err
			}
		case "unit_count":
			s.UnitCount.Reset()
			if err := s.UnitCount.ReadJSON(d); err != nil {
				return err
			}
		case "on_free_trial":
			s.OnFreeTrial.Reset()
			if err := s.OnFreeTrial.ReadJSON(d); err != nil {
				return err
			}
		case "free_trial_ends_on":
			s.FreeTrialEndsOn.Reset()
			if err := s.FreeTrialEndsOn.ReadJSON(d); err != nil {
				return err
			}
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "plan":
			s.Plan.Reset()
			if err := s.Plan.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MergedUpstream) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.MergeType.Set {
		more.More()
		e.ObjField("merge_type")
		s.MergeType.WriteJSON(e)
	}
	if s.BaseBranch.Set {
		more.More()
		e.ObjField("base_branch")
		s.BaseBranch.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MergedUpstream from json stream.
func (s *MergedUpstream) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MergedUpstream to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "merge_type":
			s.MergeType.Reset()
			if err := s.MergeType.ReadJSON(d); err != nil {
				return err
			}
		case "base_branch":
			s.BaseBranch.Reset()
			if err := s.BaseBranch.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MergedUpstreamMergeType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads MergedUpstreamMergeType from json reader.
func (s *MergedUpstreamMergeType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MergedUpstreamMergeType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MergedUpstreamMergeType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MetaRootOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("current_user_url")
	e.Str(s.CurrentUserURL)
	more.More()
	e.ObjField("current_user_authorizations_html_url")
	e.Str(s.CurrentUserAuthorizationsHTMLURL)
	more.More()
	e.ObjField("authorizations_url")
	e.Str(s.AuthorizationsURL)
	more.More()
	e.ObjField("code_search_url")
	e.Str(s.CodeSearchURL)
	more.More()
	e.ObjField("commit_search_url")
	e.Str(s.CommitSearchURL)
	more.More()
	e.ObjField("emails_url")
	e.Str(s.EmailsURL)
	more.More()
	e.ObjField("emojis_url")
	e.Str(s.EmojisURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	more.More()
	e.ObjField("feeds_url")
	e.Str(s.FeedsURL)
	more.More()
	e.ObjField("followers_url")
	e.Str(s.FollowersURL)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("hub_url")
	e.Str(s.HubURL)
	more.More()
	e.ObjField("issue_search_url")
	e.Str(s.IssueSearchURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("keys_url")
	e.Str(s.KeysURL)
	more.More()
	e.ObjField("label_search_url")
	e.Str(s.LabelSearchURL)
	more.More()
	e.ObjField("notifications_url")
	e.Str(s.NotificationsURL)
	more.More()
	e.ObjField("organization_url")
	e.Str(s.OrganizationURL)
	more.More()
	e.ObjField("organization_repositories_url")
	e.Str(s.OrganizationRepositoriesURL)
	more.More()
	e.ObjField("organization_teams_url")
	e.Str(s.OrganizationTeamsURL)
	more.More()
	e.ObjField("public_gists_url")
	e.Str(s.PublicGistsURL)
	more.More()
	e.ObjField("rate_limit_url")
	e.Str(s.RateLimitURL)
	more.More()
	e.ObjField("repository_url")
	e.Str(s.RepositoryURL)
	more.More()
	e.ObjField("repository_search_url")
	e.Str(s.RepositorySearchURL)
	more.More()
	e.ObjField("current_user_repositories_url")
	e.Str(s.CurrentUserRepositoriesURL)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("starred_gists_url")
	e.Str(s.StarredGistsURL)
	if s.TopicSearchURL.Set {
		more.More()
		e.ObjField("topic_search_url")
		s.TopicSearchURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("user_url")
	e.Str(s.UserURL)
	more.More()
	e.ObjField("user_organizations_url")
	e.Str(s.UserOrganizationsURL)
	more.More()
	e.ObjField("user_repositories_url")
	e.Str(s.UserRepositoriesURL)
	more.More()
	e.ObjField("user_search_url")
	e.Str(s.UserSearchURL)
	e.ObjEnd()
}

// ReadJSON reads MetaRootOK from json stream.
func (s *MetaRootOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MetaRootOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "current_user_url":
			v, err := d.Str()
			s.CurrentUserURL = string(v)
			if err != nil {
				return err
			}
		case "current_user_authorizations_html_url":
			v, err := d.Str()
			s.CurrentUserAuthorizationsHTMLURL = string(v)
			if err != nil {
				return err
			}
		case "authorizations_url":
			v, err := d.Str()
			s.AuthorizationsURL = string(v)
			if err != nil {
				return err
			}
		case "code_search_url":
			v, err := d.Str()
			s.CodeSearchURL = string(v)
			if err != nil {
				return err
			}
		case "commit_search_url":
			v, err := d.Str()
			s.CommitSearchURL = string(v)
			if err != nil {
				return err
			}
		case "emails_url":
			v, err := d.Str()
			s.EmailsURL = string(v)
			if err != nil {
				return err
			}
		case "emojis_url":
			v, err := d.Str()
			s.EmojisURL = string(v)
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "feeds_url":
			v, err := d.Str()
			s.FeedsURL = string(v)
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := d.Str()
			s.FollowersURL = string(v)
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "hub_url":
			v, err := d.Str()
			s.HubURL = string(v)
			if err != nil {
				return err
			}
		case "issue_search_url":
			v, err := d.Str()
			s.IssueSearchURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "keys_url":
			v, err := d.Str()
			s.KeysURL = string(v)
			if err != nil {
				return err
			}
		case "label_search_url":
			v, err := d.Str()
			s.LabelSearchURL = string(v)
			if err != nil {
				return err
			}
		case "notifications_url":
			v, err := d.Str()
			s.NotificationsURL = string(v)
			if err != nil {
				return err
			}
		case "organization_url":
			v, err := d.Str()
			s.OrganizationURL = string(v)
			if err != nil {
				return err
			}
		case "organization_repositories_url":
			v, err := d.Str()
			s.OrganizationRepositoriesURL = string(v)
			if err != nil {
				return err
			}
		case "organization_teams_url":
			v, err := d.Str()
			s.OrganizationTeamsURL = string(v)
			if err != nil {
				return err
			}
		case "public_gists_url":
			v, err := d.Str()
			s.PublicGistsURL = string(v)
			if err != nil {
				return err
			}
		case "rate_limit_url":
			v, err := d.Str()
			s.RateLimitURL = string(v)
			if err != nil {
				return err
			}
		case "repository_url":
			v, err := d.Str()
			s.RepositoryURL = string(v)
			if err != nil {
				return err
			}
		case "repository_search_url":
			v, err := d.Str()
			s.RepositorySearchURL = string(v)
			if err != nil {
				return err
			}
		case "current_user_repositories_url":
			v, err := d.Str()
			s.CurrentUserRepositoriesURL = string(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "starred_gists_url":
			v, err := d.Str()
			s.StarredGistsURL = string(v)
			if err != nil {
				return err
			}
		case "topic_search_url":
			s.TopicSearchURL.Reset()
			if err := s.TopicSearchURL.ReadJSON(d); err != nil {
				return err
			}
		case "user_url":
			v, err := d.Str()
			s.UserURL = string(v)
			if err != nil {
				return err
			}
		case "user_organizations_url":
			v, err := d.Str()
			s.UserOrganizationsURL = string(v)
			if err != nil {
				return err
			}
		case "user_repositories_url":
			v, err := d.Str()
			s.UserRepositoriesURL = string(v)
			if err != nil {
				return err
			}
		case "user_search_url":
			v, err := d.Str()
			s.UserSearchURL = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Migration) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("guid")
	e.Str(s.GUID)
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("lock_repositories")
	e.Bool(s.LockRepositories)
	more.More()
	e.ObjField("exclude_metadata")
	e.Bool(s.ExcludeMetadata)
	more.More()
	e.ObjField("exclude_git_data")
	e.Bool(s.ExcludeGitData)
	more.More()
	e.ObjField("exclude_attachments")
	e.Bool(s.ExcludeAttachments)
	more.More()
	e.ObjField("exclude_releases")
	e.Bool(s.ExcludeReleases)
	more.More()
	e.ObjField("exclude_owner_projects")
	e.Bool(s.ExcludeOwnerProjects)
	more.More()
	e.ObjField("repositories")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	if s.ArchiveURL.Set {
		more.More()
		e.ObjField("archive_url")
		s.ArchiveURL.WriteJSON(e)
	}
	if s.Exclude != nil {
		more.More()
		e.ObjField("exclude")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Exclude {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads Migration from json stream.
func (s *Migration) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Migration to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "guid":
			v, err := d.Str()
			s.GUID = string(v)
			if err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "lock_repositories":
			v, err := d.Bool()
			s.LockRepositories = bool(v)
			if err != nil {
				return err
			}
		case "exclude_metadata":
			v, err := d.Bool()
			s.ExcludeMetadata = bool(v)
			if err != nil {
				return err
			}
		case "exclude_git_data":
			v, err := d.Bool()
			s.ExcludeGitData = bool(v)
			if err != nil {
				return err
			}
		case "exclude_attachments":
			v, err := d.Bool()
			s.ExcludeAttachments = bool(v)
			if err != nil {
				return err
			}
		case "exclude_releases":
			v, err := d.Bool()
			s.ExcludeReleases = bool(v)
			if err != nil {
				return err
			}
		case "exclude_owner_projects":
			v, err := d.Bool()
			s.ExcludeOwnerProjects = bool(v)
			if err != nil {
				return err
			}
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Repository
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "archive_url":
			s.ArchiveURL.Reset()
			if err := s.ArchiveURL.ReadJSON(d); err != nil {
				return err
			}
		case "exclude":
			s.Exclude = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Exclude = append(s.Exclude, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MigrationsCancelImportNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads MigrationsCancelImportNoContent from json stream.
func (s *MigrationsCancelImportNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsCancelImportNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {
}
func (MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MigrationsDeleteArchiveForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads MigrationsDeleteArchiveForAuthenticatedUserNoContent from json stream.
func (s *MigrationsDeleteArchiveForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsDeleteArchiveForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MigrationsDeleteArchiveForOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads MigrationsDeleteArchiveForOrgNoContent from json stream.
func (s *MigrationsDeleteArchiveForOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsDeleteArchiveForOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MigrationsDownloadArchiveForOrgFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads MigrationsDownloadArchiveForOrgFound from json stream.
func (s *MigrationsDownloadArchiveForOrgFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsDownloadArchiveForOrgFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MigrationsGetArchiveForAuthenticatedUserFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads MigrationsGetArchiveForAuthenticatedUserFound from json stream.
func (s *MigrationsGetArchiveForAuthenticatedUserFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsGetArchiveForAuthenticatedUserFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (MigrationsGetCommitAuthorsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (MigrationsGetCommitAuthorsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MigrationsGetStatusForOrgExcludeItem) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads MigrationsGetStatusForOrgExcludeItem from json reader.
func (s *MigrationsGetStatusForOrgExcludeItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsGetStatusForOrgExcludeItem to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MigrationsGetStatusForOrgExcludeItem(v)
	return nil
}

func (MigrationsListForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (MigrationsListForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (MigrationsListForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (MigrationsListForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (MigrationsListForAuthenticatedUserOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (MigrationsListForAuthenticatedUserOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MigrationsListForOrgExcludeItem) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads MigrationsListForOrgExcludeItem from json reader.
func (s *MigrationsListForOrgExcludeItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsListForOrgExcludeItem to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MigrationsListForOrgExcludeItem(v)
	return nil
}

func (MigrationsListReposForOrgOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (MigrationsListReposForOrgOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (MigrationsListReposForUserOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (MigrationsListReposForUserOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s MigrationsMapCommitAuthorReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MigrationsMapCommitAuthorReq from json stream.
func (s *MigrationsMapCommitAuthorReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsMapCommitAuthorReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MigrationsSetLfsPreferenceReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("use_lfs")
	s.UseLfs.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads MigrationsSetLfsPreferenceReq from json stream.
func (s *MigrationsSetLfsPreferenceReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsSetLfsPreferenceReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "use_lfs":
			if err := s.UseLfs.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MigrationsSetLfsPreferenceReqUseLfs) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads MigrationsSetLfsPreferenceReqUseLfs from json reader.
func (s *MigrationsSetLfsPreferenceReqUseLfs) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsSetLfsPreferenceReqUseLfs to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MigrationsSetLfsPreferenceReqUseLfs(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartForAuthenticatedUserReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.LockRepositories.Set {
		more.More()
		e.ObjField("lock_repositories")
		s.LockRepositories.WriteJSON(e)
	}
	if s.ExcludeAttachments.Set {
		more.More()
		e.ObjField("exclude_attachments")
		s.ExcludeAttachments.WriteJSON(e)
	}
	if s.ExcludeReleases.Set {
		more.More()
		e.ObjField("exclude_releases")
		s.ExcludeReleases.WriteJSON(e)
	}
	if s.ExcludeOwnerProjects.Set {
		more.More()
		e.ObjField("exclude_owner_projects")
		s.ExcludeOwnerProjects.WriteJSON(e)
	}
	if s.Exclude != nil {
		more.More()
		e.ObjField("exclude")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Exclude {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("repositories")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Repositories {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads MigrationsStartForAuthenticatedUserReq from json stream.
func (s *MigrationsStartForAuthenticatedUserReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsStartForAuthenticatedUserReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "lock_repositories":
			s.LockRepositories.Reset()
			if err := s.LockRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "exclude_attachments":
			s.ExcludeAttachments.Reset()
			if err := s.ExcludeAttachments.ReadJSON(d); err != nil {
				return err
			}
		case "exclude_releases":
			s.ExcludeReleases.Reset()
			if err := s.ExcludeReleases.ReadJSON(d); err != nil {
				return err
			}
		case "exclude_owner_projects":
			s.ExcludeOwnerProjects.Reset()
			if err := s.ExcludeOwnerProjects.ReadJSON(d); err != nil {
				return err
			}
		case "exclude":
			s.Exclude = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem MigrationsStartForAuthenticatedUserReqExcludeItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Exclude = append(s.Exclude, elem)
				return nil
			}); err != nil {
				return err
			}
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartForAuthenticatedUserReqExcludeItem) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads MigrationsStartForAuthenticatedUserReqExcludeItem from json reader.
func (s *MigrationsStartForAuthenticatedUserReqExcludeItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsStartForAuthenticatedUserReqExcludeItem to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MigrationsStartForAuthenticatedUserReqExcludeItem(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartForOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("repositories")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Repositories {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	if s.LockRepositories.Set {
		more.More()
		e.ObjField("lock_repositories")
		s.LockRepositories.WriteJSON(e)
	}
	if s.ExcludeAttachments.Set {
		more.More()
		e.ObjField("exclude_attachments")
		s.ExcludeAttachments.WriteJSON(e)
	}
	if s.ExcludeReleases.Set {
		more.More()
		e.ObjField("exclude_releases")
		s.ExcludeReleases.WriteJSON(e)
	}
	if s.ExcludeOwnerProjects.Set {
		more.More()
		e.ObjField("exclude_owner_projects")
		s.ExcludeOwnerProjects.WriteJSON(e)
	}
	if s.Exclude != nil {
		more.More()
		e.ObjField("exclude")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Exclude {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads MigrationsStartForOrgReq from json stream.
func (s *MigrationsStartForOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsStartForOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "repositories":
			s.Repositories = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Repositories = append(s.Repositories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "lock_repositories":
			s.LockRepositories.Reset()
			if err := s.LockRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "exclude_attachments":
			s.ExcludeAttachments.Reset()
			if err := s.ExcludeAttachments.ReadJSON(d); err != nil {
				return err
			}
		case "exclude_releases":
			s.ExcludeReleases.Reset()
			if err := s.ExcludeReleases.ReadJSON(d); err != nil {
				return err
			}
		case "exclude_owner_projects":
			s.ExcludeOwnerProjects.Reset()
			if err := s.ExcludeOwnerProjects.ReadJSON(d); err != nil {
				return err
			}
		case "exclude":
			s.Exclude = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem MigrationsStartForOrgReqExcludeItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Exclude = append(s.Exclude, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartForOrgReqExcludeItem) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads MigrationsStartForOrgReqExcludeItem from json reader.
func (s *MigrationsStartForOrgReqExcludeItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsStartForOrgReqExcludeItem to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MigrationsStartForOrgReqExcludeItem(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartImportReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("vcs_url")
	e.Str(s.VcsURL)
	if s.Vcs.Set {
		more.More()
		e.ObjField("vcs")
		s.Vcs.WriteJSON(e)
	}
	if s.VcsUsername.Set {
		more.More()
		e.ObjField("vcs_username")
		s.VcsUsername.WriteJSON(e)
	}
	if s.VcsPassword.Set {
		more.More()
		e.ObjField("vcs_password")
		s.VcsPassword.WriteJSON(e)
	}
	if s.TfvcProject.Set {
		more.More()
		e.ObjField("tfvc_project")
		s.TfvcProject.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MigrationsStartImportReq from json stream.
func (s *MigrationsStartImportReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsStartImportReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "vcs_url":
			v, err := d.Str()
			s.VcsURL = string(v)
			if err != nil {
				return err
			}
		case "vcs":
			s.Vcs.Reset()
			if err := s.Vcs.ReadJSON(d); err != nil {
				return err
			}
		case "vcs_username":
			s.VcsUsername.Reset()
			if err := s.VcsUsername.ReadJSON(d); err != nil {
				return err
			}
		case "vcs_password":
			s.VcsPassword.Reset()
			if err := s.VcsPassword.ReadJSON(d); err != nil {
				return err
			}
		case "tfvc_project":
			s.TfvcProject.Reset()
			if err := s.TfvcProject.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartImportReqVcs) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads MigrationsStartImportReqVcs from json reader.
func (s *MigrationsStartImportReqVcs) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsStartImportReqVcs to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MigrationsStartImportReqVcs(v)
	return nil
}

func (MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MigrationsUnlockRepoForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads MigrationsUnlockRepoForAuthenticatedUserNoContent from json stream.
func (s *MigrationsUnlockRepoForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsUnlockRepoForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MigrationsUnlockRepoForOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads MigrationsUnlockRepoForOrgNoContent from json stream.
func (s *MigrationsUnlockRepoForOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsUnlockRepoForOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MigrationsUpdateImportReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.VcsUsername.Set {
		more.More()
		e.ObjField("vcs_username")
		s.VcsUsername.WriteJSON(e)
	}
	if s.VcsPassword.Set {
		more.More()
		e.ObjField("vcs_password")
		s.VcsPassword.WriteJSON(e)
	}
	if s.Vcs.Set {
		more.More()
		e.ObjField("vcs")
		s.Vcs.WriteJSON(e)
	}
	if s.TfvcProject.Set {
		more.More()
		e.ObjField("tfvc_project")
		s.TfvcProject.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MigrationsUpdateImportReq from json stream.
func (s *MigrationsUpdateImportReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MigrationsUpdateImportReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "vcs_username":
			s.VcsUsername.Reset()
			if err := s.VcsUsername.ReadJSON(d); err != nil {
				return err
			}
		case "vcs_password":
			s.VcsPassword.Reset()
			if err := s.VcsPassword.ReadJSON(d); err != nil {
				return err
			}
		case "vcs":
			s.Vcs.Reset()
			if err := s.Vcs.ReadJSON(d); err != nil {
				return err
			}
		case "tfvc_project":
			s.TfvcProject.Reset()
			if err := s.TfvcProject.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Milestone) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("labels_url")
	json.WriteURI(e, s.LabelsURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("creator")
	s.Creator.WriteJSON(e)
	more.More()
	e.ObjField("open_issues")
	e.Int(s.OpenIssues)
	more.More()
	e.ObjField("closed_issues")
	e.Int(s.ClosedIssues)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("closed_at")
	s.ClosedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("due_on")
	s.DueOn.WriteJSON(e, json.WriteDateTime)
	e.ObjEnd()
}

// ReadJSON reads Milestone from json stream.
func (s *Milestone) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Milestone to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := json.ReadURI(d)
			s.LabelsURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "creator":
			if err := s.Creator.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues":
			v, err := d.Int()
			s.OpenIssues = int(v)
			if err != nil {
				return err
			}
		case "closed_issues":
			v, err := d.Int()
			s.ClosedIssues = int(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "closed_at":
			if err := s.ClosedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "due_on":
			if err := s.DueOn.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MilestoneState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads MilestoneState from json reader.
func (s *MilestoneState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MilestoneState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = MilestoneState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s MinimalRepository) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("full_name")
	e.Str(s.FullName)
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("private")
	e.Bool(s.Private)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("fork")
	e.Bool(s.Fork)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("archive_url")
	e.Str(s.ArchiveURL)
	more.More()
	e.ObjField("assignees_url")
	e.Str(s.AssigneesURL)
	more.More()
	e.ObjField("blobs_url")
	e.Str(s.BlobsURL)
	more.More()
	e.ObjField("branches_url")
	e.Str(s.BranchesURL)
	more.More()
	e.ObjField("collaborators_url")
	e.Str(s.CollaboratorsURL)
	more.More()
	e.ObjField("comments_url")
	e.Str(s.CommentsURL)
	more.More()
	e.ObjField("commits_url")
	e.Str(s.CommitsURL)
	more.More()
	e.ObjField("compare_url")
	e.Str(s.CompareURL)
	more.More()
	e.ObjField("contents_url")
	e.Str(s.ContentsURL)
	more.More()
	e.ObjField("contributors_url")
	json.WriteURI(e, s.ContributorsURL)
	more.More()
	e.ObjField("deployments_url")
	json.WriteURI(e, s.DeploymentsURL)
	more.More()
	e.ObjField("downloads_url")
	json.WriteURI(e, s.DownloadsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("git_commits_url")
	e.Str(s.GitCommitsURL)
	more.More()
	e.ObjField("git_refs_url")
	e.Str(s.GitRefsURL)
	more.More()
	e.ObjField("git_tags_url")
	e.Str(s.GitTagsURL)
	if s.GitURL.Set {
		more.More()
		e.ObjField("git_url")
		s.GitURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("issue_comment_url")
	e.Str(s.IssueCommentURL)
	more.More()
	e.ObjField("issue_events_url")
	e.Str(s.IssueEventsURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("keys_url")
	e.Str(s.KeysURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("languages_url")
	json.WriteURI(e, s.LanguagesURL)
	more.More()
	e.ObjField("merges_url")
	json.WriteURI(e, s.MergesURL)
	more.More()
	e.ObjField("milestones_url")
	e.Str(s.MilestonesURL)
	more.More()
	e.ObjField("notifications_url")
	e.Str(s.NotificationsURL)
	more.More()
	e.ObjField("pulls_url")
	e.Str(s.PullsURL)
	more.More()
	e.ObjField("releases_url")
	e.Str(s.ReleasesURL)
	if s.SSHURL.Set {
		more.More()
		e.ObjField("ssh_url")
		s.SSHURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("stargazers_url")
	json.WriteURI(e, s.StargazersURL)
	more.More()
	e.ObjField("statuses_url")
	e.Str(s.StatusesURL)
	more.More()
	e.ObjField("subscribers_url")
	json.WriteURI(e, s.SubscribersURL)
	more.More()
	e.ObjField("subscription_url")
	json.WriteURI(e, s.SubscriptionURL)
	more.More()
	e.ObjField("tags_url")
	json.WriteURI(e, s.TagsURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("trees_url")
	e.Str(s.TreesURL)
	if s.CloneURL.Set {
		more.More()
		e.ObjField("clone_url")
		s.CloneURL.WriteJSON(e)
	}
	if s.MirrorURL.Set {
		more.More()
		e.ObjField("mirror_url")
		s.MirrorURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("hooks_url")
	json.WriteURI(e, s.HooksURL)
	if s.SvnURL.Set {
		more.More()
		e.ObjField("svn_url")
		s.SvnURL.WriteJSON(e)
	}
	if s.Homepage.Set {
		more.More()
		e.ObjField("homepage")
		s.Homepage.WriteJSON(e)
	}
	if s.Language.Set {
		more.More()
		e.ObjField("language")
		s.Language.WriteJSON(e)
	}
	if s.ForksCount.Set {
		more.More()
		e.ObjField("forks_count")
		s.ForksCount.WriteJSON(e)
	}
	if s.StargazersCount.Set {
		more.More()
		e.ObjField("stargazers_count")
		s.StargazersCount.WriteJSON(e)
	}
	if s.WatchersCount.Set {
		more.More()
		e.ObjField("watchers_count")
		s.WatchersCount.WriteJSON(e)
	}
	if s.Size.Set {
		more.More()
		e.ObjField("size")
		s.Size.WriteJSON(e)
	}
	if s.DefaultBranch.Set {
		more.More()
		e.ObjField("default_branch")
		s.DefaultBranch.WriteJSON(e)
	}
	if s.OpenIssuesCount.Set {
		more.More()
		e.ObjField("open_issues_count")
		s.OpenIssuesCount.WriteJSON(e)
	}
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.HasIssues.Set {
		more.More()
		e.ObjField("has_issues")
		s.HasIssues.WriteJSON(e)
	}
	if s.HasProjects.Set {
		more.More()
		e.ObjField("has_projects")
		s.HasProjects.WriteJSON(e)
	}
	if s.HasWiki.Set {
		more.More()
		e.ObjField("has_wiki")
		s.HasWiki.WriteJSON(e)
	}
	if s.HasPages.Set {
		more.More()
		e.ObjField("has_pages")
		s.HasPages.WriteJSON(e)
	}
	if s.HasDownloads.Set {
		more.More()
		e.ObjField("has_downloads")
		s.HasDownloads.WriteJSON(e)
	}
	if s.Archived.Set {
		more.More()
		e.ObjField("archived")
		s.Archived.WriteJSON(e)
	}
	if s.Disabled.Set {
		more.More()
		e.ObjField("disabled")
		s.Disabled.WriteJSON(e)
	}
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	if s.PushedAt.Set {
		more.More()
		e.ObjField("pushed_at")
		s.PushedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.UpdatedAt.Set {
		more.More()
		e.ObjField("updated_at")
		s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.TemplateRepository.Set {
		more.More()
		e.ObjField("template_repository")
		s.TemplateRepository.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.SubscribersCount.Set {
		more.More()
		e.ObjField("subscribers_count")
		s.SubscribersCount.WriteJSON(e)
	}
	if s.NetworkCount.Set {
		more.More()
		e.ObjField("network_count")
		s.NetworkCount.WriteJSON(e)
	}
	if s.CodeOfConduct.Set {
		more.More()
		e.ObjField("code_of_conduct")
		s.CodeOfConduct.WriteJSON(e)
	}
	if s.License.Set {
		more.More()
		e.ObjField("license")
		s.License.WriteJSON(e)
	}
	if s.Forks.Set {
		more.More()
		e.ObjField("forks")
		s.Forks.WriteJSON(e)
	}
	if s.OpenIssues.Set {
		more.More()
		e.ObjField("open_issues")
		s.OpenIssues.WriteJSON(e)
	}
	if s.Watchers.Set {
		more.More()
		e.ObjField("watchers")
		s.Watchers.WriteJSON(e)
	}
	if s.AllowForking.Set {
		more.More()
		e.ObjField("allow_forking")
		s.AllowForking.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MinimalRepository from json stream.
func (s *MinimalRepository) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MinimalRepository to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "full_name":
			v, err := d.Str()
			s.FullName = string(v)
			if err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			v, err := d.Bool()
			s.Private = bool(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "fork":
			v, err := d.Bool()
			s.Fork = bool(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "archive_url":
			v, err := d.Str()
			s.ArchiveURL = string(v)
			if err != nil {
				return err
			}
		case "assignees_url":
			v, err := d.Str()
			s.AssigneesURL = string(v)
			if err != nil {
				return err
			}
		case "blobs_url":
			v, err := d.Str()
			s.BlobsURL = string(v)
			if err != nil {
				return err
			}
		case "branches_url":
			v, err := d.Str()
			s.BranchesURL = string(v)
			if err != nil {
				return err
			}
		case "collaborators_url":
			v, err := d.Str()
			s.CollaboratorsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := d.Str()
			s.CommentsURL = string(v)
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := d.Str()
			s.CommitsURL = string(v)
			if err != nil {
				return err
			}
		case "compare_url":
			v, err := d.Str()
			s.CompareURL = string(v)
			if err != nil {
				return err
			}
		case "contents_url":
			v, err := d.Str()
			s.ContentsURL = string(v)
			if err != nil {
				return err
			}
		case "contributors_url":
			v, err := json.ReadURI(d)
			s.ContributorsURL = v
			if err != nil {
				return err
			}
		case "deployments_url":
			v, err := json.ReadURI(d)
			s.DeploymentsURL = v
			if err != nil {
				return err
			}
		case "downloads_url":
			v, err := json.ReadURI(d)
			s.DownloadsURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "git_commits_url":
			v, err := d.Str()
			s.GitCommitsURL = string(v)
			if err != nil {
				return err
			}
		case "git_refs_url":
			v, err := d.Str()
			s.GitRefsURL = string(v)
			if err != nil {
				return err
			}
		case "git_tags_url":
			v, err := d.Str()
			s.GitTagsURL = string(v)
			if err != nil {
				return err
			}
		case "git_url":
			s.GitURL.Reset()
			if err := s.GitURL.ReadJSON(d); err != nil {
				return err
			}
		case "issue_comment_url":
			v, err := d.Str()
			s.IssueCommentURL = string(v)
			if err != nil {
				return err
			}
		case "issue_events_url":
			v, err := d.Str()
			s.IssueEventsURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "keys_url":
			v, err := d.Str()
			s.KeysURL = string(v)
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "languages_url":
			v, err := json.ReadURI(d)
			s.LanguagesURL = v
			if err != nil {
				return err
			}
		case "merges_url":
			v, err := json.ReadURI(d)
			s.MergesURL = v
			if err != nil {
				return err
			}
		case "milestones_url":
			v, err := d.Str()
			s.MilestonesURL = string(v)
			if err != nil {
				return err
			}
		case "notifications_url":
			v, err := d.Str()
			s.NotificationsURL = string(v)
			if err != nil {
				return err
			}
		case "pulls_url":
			v, err := d.Str()
			s.PullsURL = string(v)
			if err != nil {
				return err
			}
		case "releases_url":
			v, err := d.Str()
			s.ReleasesURL = string(v)
			if err != nil {
				return err
			}
		case "ssh_url":
			s.SSHURL.Reset()
			if err := s.SSHURL.ReadJSON(d); err != nil {
				return err
			}
		case "stargazers_url":
			v, err := json.ReadURI(d)
			s.StargazersURL = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := d.Str()
			s.StatusesURL = string(v)
			if err != nil {
				return err
			}
		case "subscribers_url":
			v, err := json.ReadURI(d)
			s.SubscribersURL = v
			if err != nil {
				return err
			}
		case "subscription_url":
			v, err := json.ReadURI(d)
			s.SubscriptionURL = v
			if err != nil {
				return err
			}
		case "tags_url":
			v, err := json.ReadURI(d)
			s.TagsURL = v
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "trees_url":
			v, err := d.Str()
			s.TreesURL = string(v)
			if err != nil {
				return err
			}
		case "clone_url":
			s.CloneURL.Reset()
			if err := s.CloneURL.ReadJSON(d); err != nil {
				return err
			}
		case "mirror_url":
			s.MirrorURL.Reset()
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "hooks_url":
			v, err := json.ReadURI(d)
			s.HooksURL = v
			if err != nil {
				return err
			}
		case "svn_url":
			s.SvnURL.Reset()
			if err := s.SvnURL.ReadJSON(d); err != nil {
				return err
			}
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			s.Language.Reset()
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "forks_count":
			s.ForksCount.Reset()
			if err := s.ForksCount.ReadJSON(d); err != nil {
				return err
			}
		case "stargazers_count":
			s.StargazersCount.Reset()
			if err := s.StargazersCount.ReadJSON(d); err != nil {
				return err
			}
		case "watchers_count":
			s.WatchersCount.Reset()
			if err := s.WatchersCount.ReadJSON(d); err != nil {
				return err
			}
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(d); err != nil {
				return err
			}
		case "default_branch":
			s.DefaultBranch.Reset()
			if err := s.DefaultBranch.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues_count":
			s.OpenIssuesCount.Reset()
			if err := s.OpenIssuesCount.ReadJSON(d); err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(d); err != nil {
				return err
			}
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(d); err != nil {
				return err
			}
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(d); err != nil {
				return err
			}
		case "has_pages":
			s.HasPages.Reset()
			if err := s.HasPages.ReadJSON(d); err != nil {
				return err
			}
		case "has_downloads":
			s.HasDownloads.Reset()
			if err := s.HasDownloads.ReadJSON(d); err != nil {
				return err
			}
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(d); err != nil {
				return err
			}
		case "disabled":
			s.Disabled.Reset()
			if err := s.Disabled.ReadJSON(d); err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "pushed_at":
			s.PushedAt.Reset()
			if err := s.PushedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(d); err != nil {
				return err
			}
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(d); err != nil {
				return err
			}
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(d); err != nil {
				return err
			}
		case "code_of_conduct":
			s.CodeOfConduct.Reset()
			if err := s.CodeOfConduct.ReadJSON(d); err != nil {
				return err
			}
		case "license":
			s.License.Reset()
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "forks":
			s.Forks.Reset()
			if err := s.Forks.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues":
			s.OpenIssues.Reset()
			if err := s.OpenIssues.ReadJSON(d); err != nil {
				return err
			}
		case "watchers":
			s.Watchers.Reset()
			if err := s.Watchers.ReadJSON(d); err != nil {
				return err
			}
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MinimalRepositoryLicense) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Key.Set {
		more.More()
		e.ObjField("key")
		s.Key.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.SpdxID.Set {
		more.More()
		e.ObjField("spdx_id")
		s.SpdxID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MinimalRepositoryLicense from json stream.
func (s *MinimalRepositoryLicense) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MinimalRepositoryLicense to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			s.Key.Reset()
			if err := s.Key.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "spdx_id":
			s.SpdxID.Reset()
			if err := s.SpdxID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MinimalRepositoryPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Admin.Set {
		more.More()
		e.ObjField("admin")
		s.Admin.WriteJSON(e)
	}
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	if s.Push.Set {
		more.More()
		e.ObjField("push")
		s.Push.WriteJSON(e)
	}
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	if s.Pull.Set {
		more.More()
		e.ObjField("pull")
		s.Pull.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads MinimalRepositoryPermissions from json stream.
func (s *MinimalRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MinimalRepositoryPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			s.Admin.Reset()
			if err := s.Admin.ReadJSON(d); err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			s.Push.Reset()
			if err := s.Push.ReadJSON(d); err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "pull":
			s.Pull.Reset()
			if err := s.Pull.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON writes json value of AutoMerge to json stream.
func (o NilAutoMerge) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of AutoMerge from json iterator.
func (o *NilAutoMerge) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilAutoMerge to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v AutoMerge
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilAutoMerge", d.Next())
	}
}

// WriteJSON writes json value of bool to json stream.
func (o NilBool) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *NilBool) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilBool to nil`)
	}
	switch d.Next() {
	case json.Bool:
		o.Null = false
		v, err := d.Bool()
		if err != nil {
			return err
		}
		o.Value = bool(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v bool
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilBool", d.Next())
	}
}

// WriteJSON writes json value of CheckRunCheckSuite to json stream.
func (o NilCheckRunCheckSuite) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of CheckRunCheckSuite from json iterator.
func (o *NilCheckRunCheckSuite) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilCheckRunCheckSuite to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CheckRunCheckSuite
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilCheckRunCheckSuite", d.Next())
	}
}

// WriteJSON writes json value of CheckRunConclusion to json stream.
func (o NilCheckRunConclusion) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CheckRunConclusion from json iterator.
func (o *NilCheckRunConclusion) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilCheckRunConclusion to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CheckRunConclusion(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CheckRunConclusion
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilCheckRunConclusion", d.Next())
	}
}

// WriteJSON writes json value of CheckSuiteConclusion to json stream.
func (o NilCheckSuiteConclusion) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CheckSuiteConclusion from json iterator.
func (o *NilCheckSuiteConclusion) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilCheckSuiteConclusion to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CheckSuiteConclusion(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CheckSuiteConclusion
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilCheckSuiteConclusion", d.Next())
	}
}

// WriteJSON writes json value of CheckSuiteStatus to json stream.
func (o NilCheckSuiteStatus) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CheckSuiteStatus from json iterator.
func (o *NilCheckSuiteStatus) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilCheckSuiteStatus to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CheckSuiteStatus(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CheckSuiteStatus
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilCheckSuiteStatus", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAlertDismissedAt to json stream.
func (o NilCodeScanningAlertDismissedAt) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of CodeScanningAlertDismissedAt from json iterator.
func (o *NilCodeScanningAlertDismissedAt) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilCodeScanningAlertDismissedAt to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CodeScanningAlertDismissedAt
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilCodeScanningAlertDismissedAt", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAlertDismissedReason to json stream.
func (o NilCodeScanningAlertDismissedReason) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CodeScanningAlertDismissedReason from json iterator.
func (o *NilCodeScanningAlertDismissedReason) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilCodeScanningAlertDismissedReason to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CodeScanningAlertDismissedReason(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CodeScanningAlertDismissedReason
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilCodeScanningAlertDismissedReason", d.Next())
	}
}

// WriteJSON writes json value of FileCommitContent to json stream.
func (o NilFileCommitContent) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of FileCommitContent from json iterator.
func (o *NilFileCommitContent) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilFileCommitContent to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v FileCommitContent
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilFileCommitContent", d.Next())
	}
}

// WriteJSON writes json value of int to json stream.
func (o NilInt) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *NilInt) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilInt to nil`)
	}
	switch d.Next() {
	case json.Number:
		o.Null = false
		v, err := d.Int()
		if err != nil {
			return err
		}
		o.Value = int(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v int
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilInt", d.Next())
	}
}

// WriteJSON writes json value of NullableCodeOfConductSimple to json stream.
func (o NilNullableCodeOfConductSimple) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableCodeOfConductSimple from json iterator.
func (o *NilNullableCodeOfConductSimple) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableCodeOfConductSimple to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableCodeOfConductSimple
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableCodeOfConductSimple", d.Next())
	}
}

// WriteJSON writes json value of NullableCommunityHealthFile to json stream.
func (o NilNullableCommunityHealthFile) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableCommunityHealthFile from json iterator.
func (o *NilNullableCommunityHealthFile) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableCommunityHealthFile to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableCommunityHealthFile
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableCommunityHealthFile", d.Next())
	}
}

// WriteJSON writes json value of NullableGitUser to json stream.
func (o NilNullableGitUser) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableGitUser from json iterator.
func (o *NilNullableGitUser) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableGitUser to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableGitUser
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableGitUser", d.Next())
	}
}

// WriteJSON writes json value of NullableIntegration to json stream.
func (o NilNullableIntegration) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableIntegration from json iterator.
func (o *NilNullableIntegration) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableIntegration to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableIntegration
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableIntegration", d.Next())
	}
}

// WriteJSON writes json value of NullableLicenseSimple to json stream.
func (o NilNullableLicenseSimple) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableLicenseSimple from json iterator.
func (o *NilNullableLicenseSimple) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableLicenseSimple to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableLicenseSimple
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableLicenseSimple", d.Next())
	}
}

// WriteJSON writes json value of NullableMilestone to json stream.
func (o NilNullableMilestone) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableMilestone from json iterator.
func (o *NilNullableMilestone) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableMilestone to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableMilestone
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableMilestone", d.Next())
	}
}

// WriteJSON writes json value of NullableSimpleCommit to json stream.
func (o NilNullableSimpleCommit) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableSimpleCommit from json iterator.
func (o *NilNullableSimpleCommit) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableSimpleCommit to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableSimpleCommit
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableSimpleCommit", d.Next())
	}
}

// WriteJSON writes json value of NullableSimpleCommitAuthor to json stream.
func (o NilNullableSimpleCommitAuthor) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableSimpleCommitAuthor from json iterator.
func (o *NilNullableSimpleCommitAuthor) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableSimpleCommitAuthor to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableSimpleCommitAuthor
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableSimpleCommitAuthor", d.Next())
	}
}

// WriteJSON writes json value of NullableSimpleCommitCommitter to json stream.
func (o NilNullableSimpleCommitCommitter) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableSimpleCommitCommitter from json iterator.
func (o *NilNullableSimpleCommitCommitter) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableSimpleCommitCommitter to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableSimpleCommitCommitter
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableSimpleCommitCommitter", d.Next())
	}
}

// WriteJSON writes json value of NullableSimpleUser to json stream.
func (o NilNullableSimpleUser) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableSimpleUser from json iterator.
func (o *NilNullableSimpleUser) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableSimpleUser to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableSimpleUser
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableSimpleUser", d.Next())
	}
}

// WriteJSON writes json value of NullableTeamSimple to json stream.
func (o NilNullableTeamSimple) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableTeamSimple from json iterator.
func (o *NilNullableTeamSimple) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilNullableTeamSimple to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableTeamSimple
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilNullableTeamSimple", d.Next())
	}
}

// WriteJSON writes json value of PageStatus to json stream.
func (o NilPageStatus) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of PageStatus from json iterator.
func (o *NilPageStatus) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilPageStatus to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = PageStatus(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v PageStatus
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilPageStatus", d.Next())
	}
}

// WriteJSON writes json value of PullRequestHeadRepo to json stream.
func (o NilPullRequestHeadRepo) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PullRequestHeadRepo from json iterator.
func (o *NilPullRequestHeadRepo) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilPullRequestHeadRepo to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v PullRequestHeadRepo
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilPullRequestHeadRepo", d.Next())
	}
}

// WriteJSON writes json value of PullRequestHeadRepoLicense to json stream.
func (o NilPullRequestHeadRepoLicense) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PullRequestHeadRepoLicense from json iterator.
func (o *NilPullRequestHeadRepoLicense) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilPullRequestHeadRepoLicense to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v PullRequestHeadRepoLicense
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilPullRequestHeadRepoLicense", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdateBranchProtectionReqRequiredPullRequestReviews to json stream.
func (o NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposUpdateBranchProtectionReqRequiredPullRequestReviews from json iterator.
func (o *NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilReposUpdateBranchProtectionReqRequiredPullRequestReviews to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v ReposUpdateBranchProtectionReqRequiredPullRequestReviews
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilReposUpdateBranchProtectionReqRequiredPullRequestReviews", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdateBranchProtectionReqRequiredStatusChecks to json stream.
func (o NilReposUpdateBranchProtectionReqRequiredStatusChecks) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposUpdateBranchProtectionReqRequiredStatusChecks from json iterator.
func (o *NilReposUpdateBranchProtectionReqRequiredStatusChecks) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilReposUpdateBranchProtectionReqRequiredStatusChecks to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v ReposUpdateBranchProtectionReqRequiredStatusChecks
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilReposUpdateBranchProtectionReqRequiredStatusChecks", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdateBranchProtectionReqRestrictions to json stream.
func (o NilReposUpdateBranchProtectionReqRestrictions) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposUpdateBranchProtectionReqRestrictions from json iterator.
func (o *NilReposUpdateBranchProtectionReqRestrictions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilReposUpdateBranchProtectionReqRestrictions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v ReposUpdateBranchProtectionReqRestrictions
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilReposUpdateBranchProtectionReqRestrictions", d.Next())
	}
}

// WriteJSON writes json value of SimpleCommitAuthor to json stream.
func (o NilSimpleCommitAuthor) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of SimpleCommitAuthor from json iterator.
func (o *NilSimpleCommitAuthor) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilSimpleCommitAuthor to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v SimpleCommitAuthor
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilSimpleCommitAuthor", d.Next())
	}
}

// WriteJSON writes json value of SimpleCommitCommitter to json stream.
func (o NilSimpleCommitCommitter) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of SimpleCommitCommitter from json iterator.
func (o *NilSimpleCommitCommitter) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilSimpleCommitCommitter to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v SimpleCommitCommitter
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilSimpleCommitCommitter", d.Next())
	}
}

// WriteJSON writes json value of string to json stream.
func (o NilString) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *NilString) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilString to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v string
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilString", d.Next())
	}
}

// WriteJSON writes json value of time.Time to json stream.
func (o NilTime) WriteJSON(e *json.Encoder, format func(*json.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// ReadJSON reads json value of time.Time from json iterator.
func (o *NilTime) ReadJSON(d *json.Decoder, format func(*json.Decoder) (time.Time, error)) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilTime to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Null = false
		v, err := format(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilTime", d.Next())
	}
}

// WriteJSON writes json value of url.URL to json stream.
func (o NilURL) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.WriteURI(e, o.Value)
}

// ReadJSON reads json value of url.URL from json iterator.
func (o *NilURL) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode NilURL to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Null = false
		v, err := json.ReadURI(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v url.URL
		o.Value = v
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading NilURL", d.Next())
	}
}

// WriteJSON implements json.Marshaler.
func (s NoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads NoContent from json stream.
func (s *NoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NotModified) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads NotModified from json stream.
func (s *NotModified) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NotModified to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableCodeOfConductSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("html_url")
	s.HTMLURL.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads NullableCodeOfConductSimple from json stream.
func (s *NullableCodeOfConductSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableCodeOfConductSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableCommunityHealthFile) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	e.ObjEnd()
}

// ReadJSON reads NullableCommunityHealthFile from json stream.
func (s *NullableCommunityHealthFile) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableCommunityHealthFile to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableGitUser) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.Date.Set {
		more.More()
		e.ObjField("date")
		s.Date.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableGitUser from json stream.
func (s *NullableGitUser) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableGitUser to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableIntegration) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	if s.Slug.Set {
		more.More()
		e.ObjField("slug")
		s.Slug.WriteJSON(e)
	}
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("external_url")
	json.WriteURI(e, s.ExternalURL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("permissions")
	s.Permissions.WriteJSON(e)
	more.More()
	e.ObjField("events")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Events {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	if s.InstallationsCount.Set {
		more.More()
		e.ObjField("installations_count")
		s.InstallationsCount.WriteJSON(e)
	}
	if s.ClientID.Set {
		more.More()
		e.ObjField("client_id")
		s.ClientID.WriteJSON(e)
	}
	if s.ClientSecret.Set {
		more.More()
		e.ObjField("client_secret")
		s.ClientSecret.WriteJSON(e)
	}
	if s.WebhookSecret.Set {
		more.More()
		e.ObjField("webhook_secret")
		s.WebhookSecret.WriteJSON(e)
	}
	if s.Pem.Set {
		more.More()
		e.ObjField("pem")
		s.Pem.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableIntegration from json stream.
func (s *NullableIntegration) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableIntegration to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "slug":
			s.Slug.Reset()
			if err := s.Slug.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "external_url":
			v, err := json.ReadURI(d)
			s.ExternalURL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "permissions":
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "events":
			s.Events = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Events = append(s.Events, elem)
				return nil
			}); err != nil {
				return err
			}
		case "installations_count":
			s.InstallationsCount.Reset()
			if err := s.InstallationsCount.ReadJSON(d); err != nil {
				return err
			}
		case "client_id":
			s.ClientID.Reset()
			if err := s.ClientID.ReadJSON(d); err != nil {
				return err
			}
		case "client_secret":
			s.ClientSecret.Reset()
			if err := s.ClientSecret.ReadJSON(d); err != nil {
				return err
			}
		case "webhook_secret":
			s.WebhookSecret.Reset()
			if err := s.WebhookSecret.ReadJSON(d); err != nil {
				return err
			}
		case "pem":
			s.Pem.Reset()
			if err := s.Pem.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableIntegrationPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Issues.Set {
		more.More()
		e.ObjField("issues")
		s.Issues.WriteJSON(e)
	}
	if s.Checks.Set {
		more.More()
		e.ObjField("checks")
		s.Checks.WriteJSON(e)
	}
	if s.Metadata.Set {
		more.More()
		e.ObjField("metadata")
		s.Metadata.WriteJSON(e)
	}
	if s.Contents.Set {
		more.More()
		e.ObjField("contents")
		s.Contents.WriteJSON(e)
	}
	if s.Deployments.Set {
		more.More()
		e.ObjField("deployments")
		s.Deployments.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableIntegrationPermissions from json stream.
func (s *NullableIntegrationPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableIntegrationPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "issues":
			s.Issues.Reset()
			if err := s.Issues.ReadJSON(d); err != nil {
				return err
			}
		case "checks":
			s.Checks.Reset()
			if err := s.Checks.ReadJSON(d); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(d); err != nil {
				return err
			}
		case "contents":
			s.Contents.Reset()
			if err := s.Contents.ReadJSON(d); err != nil {
				return err
			}
		case "deployments":
			s.Deployments.Reset()
			if err := s.Deployments.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableLicenseSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("url")
	s.URL.WriteJSON(e)
	more.More()
	e.ObjField("spdx_id")
	s.SpdxID.WriteJSON(e)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableLicenseSimple from json stream.
func (s *NullableLicenseSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableLicenseSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "url":
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "spdx_id":
			if err := s.SpdxID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableMilestone) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("labels_url")
	json.WriteURI(e, s.LabelsURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("creator")
	s.Creator.WriteJSON(e)
	more.More()
	e.ObjField("open_issues")
	e.Int(s.OpenIssues)
	more.More()
	e.ObjField("closed_issues")
	e.Int(s.ClosedIssues)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("closed_at")
	s.ClosedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("due_on")
	s.DueOn.WriteJSON(e, json.WriteDateTime)
	e.ObjEnd()
}

// ReadJSON reads NullableMilestone from json stream.
func (s *NullableMilestone) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableMilestone to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := json.ReadURI(d)
			s.LabelsURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "creator":
			if err := s.Creator.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues":
			v, err := d.Int()
			s.OpenIssues = int(v)
			if err != nil {
				return err
			}
		case "closed_issues":
			v, err := d.Int()
			s.ClosedIssues = int(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "closed_at":
			if err := s.ClosedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "due_on":
			if err := s.DueOn.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableMilestoneState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads NullableMilestoneState from json reader.
func (s *NullableMilestoneState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableMilestoneState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = NullableMilestoneState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s NullableMinimalRepository) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("full_name")
	e.Str(s.FullName)
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("private")
	e.Bool(s.Private)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("fork")
	e.Bool(s.Fork)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("archive_url")
	e.Str(s.ArchiveURL)
	more.More()
	e.ObjField("assignees_url")
	e.Str(s.AssigneesURL)
	more.More()
	e.ObjField("blobs_url")
	e.Str(s.BlobsURL)
	more.More()
	e.ObjField("branches_url")
	e.Str(s.BranchesURL)
	more.More()
	e.ObjField("collaborators_url")
	e.Str(s.CollaboratorsURL)
	more.More()
	e.ObjField("comments_url")
	e.Str(s.CommentsURL)
	more.More()
	e.ObjField("commits_url")
	e.Str(s.CommitsURL)
	more.More()
	e.ObjField("compare_url")
	e.Str(s.CompareURL)
	more.More()
	e.ObjField("contents_url")
	e.Str(s.ContentsURL)
	more.More()
	e.ObjField("contributors_url")
	json.WriteURI(e, s.ContributorsURL)
	more.More()
	e.ObjField("deployments_url")
	json.WriteURI(e, s.DeploymentsURL)
	more.More()
	e.ObjField("downloads_url")
	json.WriteURI(e, s.DownloadsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("git_commits_url")
	e.Str(s.GitCommitsURL)
	more.More()
	e.ObjField("git_refs_url")
	e.Str(s.GitRefsURL)
	more.More()
	e.ObjField("git_tags_url")
	e.Str(s.GitTagsURL)
	if s.GitURL.Set {
		more.More()
		e.ObjField("git_url")
		s.GitURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("issue_comment_url")
	e.Str(s.IssueCommentURL)
	more.More()
	e.ObjField("issue_events_url")
	e.Str(s.IssueEventsURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("keys_url")
	e.Str(s.KeysURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("languages_url")
	json.WriteURI(e, s.LanguagesURL)
	more.More()
	e.ObjField("merges_url")
	json.WriteURI(e, s.MergesURL)
	more.More()
	e.ObjField("milestones_url")
	e.Str(s.MilestonesURL)
	more.More()
	e.ObjField("notifications_url")
	e.Str(s.NotificationsURL)
	more.More()
	e.ObjField("pulls_url")
	e.Str(s.PullsURL)
	more.More()
	e.ObjField("releases_url")
	e.Str(s.ReleasesURL)
	if s.SSHURL.Set {
		more.More()
		e.ObjField("ssh_url")
		s.SSHURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("stargazers_url")
	json.WriteURI(e, s.StargazersURL)
	more.More()
	e.ObjField("statuses_url")
	e.Str(s.StatusesURL)
	more.More()
	e.ObjField("subscribers_url")
	json.WriteURI(e, s.SubscribersURL)
	more.More()
	e.ObjField("subscription_url")
	json.WriteURI(e, s.SubscriptionURL)
	more.More()
	e.ObjField("tags_url")
	json.WriteURI(e, s.TagsURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("trees_url")
	e.Str(s.TreesURL)
	if s.CloneURL.Set {
		more.More()
		e.ObjField("clone_url")
		s.CloneURL.WriteJSON(e)
	}
	if s.MirrorURL.Set {
		more.More()
		e.ObjField("mirror_url")
		s.MirrorURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("hooks_url")
	json.WriteURI(e, s.HooksURL)
	if s.SvnURL.Set {
		more.More()
		e.ObjField("svn_url")
		s.SvnURL.WriteJSON(e)
	}
	if s.Homepage.Set {
		more.More()
		e.ObjField("homepage")
		s.Homepage.WriteJSON(e)
	}
	if s.Language.Set {
		more.More()
		e.ObjField("language")
		s.Language.WriteJSON(e)
	}
	if s.ForksCount.Set {
		more.More()
		e.ObjField("forks_count")
		s.ForksCount.WriteJSON(e)
	}
	if s.StargazersCount.Set {
		more.More()
		e.ObjField("stargazers_count")
		s.StargazersCount.WriteJSON(e)
	}
	if s.WatchersCount.Set {
		more.More()
		e.ObjField("watchers_count")
		s.WatchersCount.WriteJSON(e)
	}
	if s.Size.Set {
		more.More()
		e.ObjField("size")
		s.Size.WriteJSON(e)
	}
	if s.DefaultBranch.Set {
		more.More()
		e.ObjField("default_branch")
		s.DefaultBranch.WriteJSON(e)
	}
	if s.OpenIssuesCount.Set {
		more.More()
		e.ObjField("open_issues_count")
		s.OpenIssuesCount.WriteJSON(e)
	}
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.HasIssues.Set {
		more.More()
		e.ObjField("has_issues")
		s.HasIssues.WriteJSON(e)
	}
	if s.HasProjects.Set {
		more.More()
		e.ObjField("has_projects")
		s.HasProjects.WriteJSON(e)
	}
	if s.HasWiki.Set {
		more.More()
		e.ObjField("has_wiki")
		s.HasWiki.WriteJSON(e)
	}
	if s.HasPages.Set {
		more.More()
		e.ObjField("has_pages")
		s.HasPages.WriteJSON(e)
	}
	if s.HasDownloads.Set {
		more.More()
		e.ObjField("has_downloads")
		s.HasDownloads.WriteJSON(e)
	}
	if s.Archived.Set {
		more.More()
		e.ObjField("archived")
		s.Archived.WriteJSON(e)
	}
	if s.Disabled.Set {
		more.More()
		e.ObjField("disabled")
		s.Disabled.WriteJSON(e)
	}
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	if s.PushedAt.Set {
		more.More()
		e.ObjField("pushed_at")
		s.PushedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.UpdatedAt.Set {
		more.More()
		e.ObjField("updated_at")
		s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.TemplateRepository.Set {
		more.More()
		e.ObjField("template_repository")
		s.TemplateRepository.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.SubscribersCount.Set {
		more.More()
		e.ObjField("subscribers_count")
		s.SubscribersCount.WriteJSON(e)
	}
	if s.NetworkCount.Set {
		more.More()
		e.ObjField("network_count")
		s.NetworkCount.WriteJSON(e)
	}
	if s.CodeOfConduct.Set {
		more.More()
		e.ObjField("code_of_conduct")
		s.CodeOfConduct.WriteJSON(e)
	}
	if s.License.Set {
		more.More()
		e.ObjField("license")
		s.License.WriteJSON(e)
	}
	if s.Forks.Set {
		more.More()
		e.ObjField("forks")
		s.Forks.WriteJSON(e)
	}
	if s.OpenIssues.Set {
		more.More()
		e.ObjField("open_issues")
		s.OpenIssues.WriteJSON(e)
	}
	if s.Watchers.Set {
		more.More()
		e.ObjField("watchers")
		s.Watchers.WriteJSON(e)
	}
	if s.AllowForking.Set {
		more.More()
		e.ObjField("allow_forking")
		s.AllowForking.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableMinimalRepository from json stream.
func (s *NullableMinimalRepository) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableMinimalRepository to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "full_name":
			v, err := d.Str()
			s.FullName = string(v)
			if err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			v, err := d.Bool()
			s.Private = bool(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "fork":
			v, err := d.Bool()
			s.Fork = bool(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "archive_url":
			v, err := d.Str()
			s.ArchiveURL = string(v)
			if err != nil {
				return err
			}
		case "assignees_url":
			v, err := d.Str()
			s.AssigneesURL = string(v)
			if err != nil {
				return err
			}
		case "blobs_url":
			v, err := d.Str()
			s.BlobsURL = string(v)
			if err != nil {
				return err
			}
		case "branches_url":
			v, err := d.Str()
			s.BranchesURL = string(v)
			if err != nil {
				return err
			}
		case "collaborators_url":
			v, err := d.Str()
			s.CollaboratorsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := d.Str()
			s.CommentsURL = string(v)
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := d.Str()
			s.CommitsURL = string(v)
			if err != nil {
				return err
			}
		case "compare_url":
			v, err := d.Str()
			s.CompareURL = string(v)
			if err != nil {
				return err
			}
		case "contents_url":
			v, err := d.Str()
			s.ContentsURL = string(v)
			if err != nil {
				return err
			}
		case "contributors_url":
			v, err := json.ReadURI(d)
			s.ContributorsURL = v
			if err != nil {
				return err
			}
		case "deployments_url":
			v, err := json.ReadURI(d)
			s.DeploymentsURL = v
			if err != nil {
				return err
			}
		case "downloads_url":
			v, err := json.ReadURI(d)
			s.DownloadsURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "git_commits_url":
			v, err := d.Str()
			s.GitCommitsURL = string(v)
			if err != nil {
				return err
			}
		case "git_refs_url":
			v, err := d.Str()
			s.GitRefsURL = string(v)
			if err != nil {
				return err
			}
		case "git_tags_url":
			v, err := d.Str()
			s.GitTagsURL = string(v)
			if err != nil {
				return err
			}
		case "git_url":
			s.GitURL.Reset()
			if err := s.GitURL.ReadJSON(d); err != nil {
				return err
			}
		case "issue_comment_url":
			v, err := d.Str()
			s.IssueCommentURL = string(v)
			if err != nil {
				return err
			}
		case "issue_events_url":
			v, err := d.Str()
			s.IssueEventsURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "keys_url":
			v, err := d.Str()
			s.KeysURL = string(v)
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "languages_url":
			v, err := json.ReadURI(d)
			s.LanguagesURL = v
			if err != nil {
				return err
			}
		case "merges_url":
			v, err := json.ReadURI(d)
			s.MergesURL = v
			if err != nil {
				return err
			}
		case "milestones_url":
			v, err := d.Str()
			s.MilestonesURL = string(v)
			if err != nil {
				return err
			}
		case "notifications_url":
			v, err := d.Str()
			s.NotificationsURL = string(v)
			if err != nil {
				return err
			}
		case "pulls_url":
			v, err := d.Str()
			s.PullsURL = string(v)
			if err != nil {
				return err
			}
		case "releases_url":
			v, err := d.Str()
			s.ReleasesURL = string(v)
			if err != nil {
				return err
			}
		case "ssh_url":
			s.SSHURL.Reset()
			if err := s.SSHURL.ReadJSON(d); err != nil {
				return err
			}
		case "stargazers_url":
			v, err := json.ReadURI(d)
			s.StargazersURL = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := d.Str()
			s.StatusesURL = string(v)
			if err != nil {
				return err
			}
		case "subscribers_url":
			v, err := json.ReadURI(d)
			s.SubscribersURL = v
			if err != nil {
				return err
			}
		case "subscription_url":
			v, err := json.ReadURI(d)
			s.SubscriptionURL = v
			if err != nil {
				return err
			}
		case "tags_url":
			v, err := json.ReadURI(d)
			s.TagsURL = v
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "trees_url":
			v, err := d.Str()
			s.TreesURL = string(v)
			if err != nil {
				return err
			}
		case "clone_url":
			s.CloneURL.Reset()
			if err := s.CloneURL.ReadJSON(d); err != nil {
				return err
			}
		case "mirror_url":
			s.MirrorURL.Reset()
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "hooks_url":
			v, err := json.ReadURI(d)
			s.HooksURL = v
			if err != nil {
				return err
			}
		case "svn_url":
			s.SvnURL.Reset()
			if err := s.SvnURL.ReadJSON(d); err != nil {
				return err
			}
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			s.Language.Reset()
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "forks_count":
			s.ForksCount.Reset()
			if err := s.ForksCount.ReadJSON(d); err != nil {
				return err
			}
		case "stargazers_count":
			s.StargazersCount.Reset()
			if err := s.StargazersCount.ReadJSON(d); err != nil {
				return err
			}
		case "watchers_count":
			s.WatchersCount.Reset()
			if err := s.WatchersCount.ReadJSON(d); err != nil {
				return err
			}
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(d); err != nil {
				return err
			}
		case "default_branch":
			s.DefaultBranch.Reset()
			if err := s.DefaultBranch.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues_count":
			s.OpenIssuesCount.Reset()
			if err := s.OpenIssuesCount.ReadJSON(d); err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(d); err != nil {
				return err
			}
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(d); err != nil {
				return err
			}
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(d); err != nil {
				return err
			}
		case "has_pages":
			s.HasPages.Reset()
			if err := s.HasPages.ReadJSON(d); err != nil {
				return err
			}
		case "has_downloads":
			s.HasDownloads.Reset()
			if err := s.HasDownloads.ReadJSON(d); err != nil {
				return err
			}
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(d); err != nil {
				return err
			}
		case "disabled":
			s.Disabled.Reset()
			if err := s.Disabled.ReadJSON(d); err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "pushed_at":
			s.PushedAt.Reset()
			if err := s.PushedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(d); err != nil {
				return err
			}
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(d); err != nil {
				return err
			}
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(d); err != nil {
				return err
			}
		case "code_of_conduct":
			s.CodeOfConduct.Reset()
			if err := s.CodeOfConduct.ReadJSON(d); err != nil {
				return err
			}
		case "license":
			s.License.Reset()
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "forks":
			s.Forks.Reset()
			if err := s.Forks.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues":
			s.OpenIssues.Reset()
			if err := s.OpenIssues.ReadJSON(d); err != nil {
				return err
			}
		case "watchers":
			s.Watchers.Reset()
			if err := s.Watchers.ReadJSON(d); err != nil {
				return err
			}
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableMinimalRepositoryLicense) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Key.Set {
		more.More()
		e.ObjField("key")
		s.Key.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.SpdxID.Set {
		more.More()
		e.ObjField("spdx_id")
		s.SpdxID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableMinimalRepositoryLicense from json stream.
func (s *NullableMinimalRepositoryLicense) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableMinimalRepositoryLicense to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			s.Key.Reset()
			if err := s.Key.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "spdx_id":
			s.SpdxID.Reset()
			if err := s.SpdxID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableMinimalRepositoryPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Admin.Set {
		more.More()
		e.ObjField("admin")
		s.Admin.WriteJSON(e)
	}
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	if s.Push.Set {
		more.More()
		e.ObjField("push")
		s.Push.WriteJSON(e)
	}
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	if s.Pull.Set {
		more.More()
		e.ObjField("pull")
		s.Pull.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableMinimalRepositoryPermissions from json stream.
func (s *NullableMinimalRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableMinimalRepositoryPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			s.Admin.Reset()
			if err := s.Admin.ReadJSON(d); err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			s.Push.Reset()
			if err := s.Push.ReadJSON(d); err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "pull":
			s.Pull.Reset()
			if err := s.Pull.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableRepository) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("full_name")
	e.Str(s.FullName)
	more.More()
	e.ObjField("license")
	s.License.WriteJSON(e)
	if s.Organization.Set {
		more.More()
		e.ObjField("organization")
		s.Organization.WriteJSON(e)
	}
	more.More()
	e.ObjField("forks")
	e.Int(s.Forks)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("private")
	e.Bool(s.Private)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("fork")
	e.Bool(s.Fork)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("archive_url")
	e.Str(s.ArchiveURL)
	more.More()
	e.ObjField("assignees_url")
	e.Str(s.AssigneesURL)
	more.More()
	e.ObjField("blobs_url")
	e.Str(s.BlobsURL)
	more.More()
	e.ObjField("branches_url")
	e.Str(s.BranchesURL)
	more.More()
	e.ObjField("collaborators_url")
	e.Str(s.CollaboratorsURL)
	more.More()
	e.ObjField("comments_url")
	e.Str(s.CommentsURL)
	more.More()
	e.ObjField("commits_url")
	e.Str(s.CommitsURL)
	more.More()
	e.ObjField("compare_url")
	e.Str(s.CompareURL)
	more.More()
	e.ObjField("contents_url")
	e.Str(s.ContentsURL)
	more.More()
	e.ObjField("contributors_url")
	json.WriteURI(e, s.ContributorsURL)
	more.More()
	e.ObjField("deployments_url")
	json.WriteURI(e, s.DeploymentsURL)
	more.More()
	e.ObjField("downloads_url")
	json.WriteURI(e, s.DownloadsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("git_commits_url")
	e.Str(s.GitCommitsURL)
	more.More()
	e.ObjField("git_refs_url")
	e.Str(s.GitRefsURL)
	more.More()
	e.ObjField("git_tags_url")
	e.Str(s.GitTagsURL)
	more.More()
	e.ObjField("git_url")
	e.Str(s.GitURL)
	more.More()
	e.ObjField("issue_comment_url")
	e.Str(s.IssueCommentURL)
	more.More()
	e.ObjField("issue_events_url")
	e.Str(s.IssueEventsURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("keys_url")
	e.Str(s.KeysURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("languages_url")
	json.WriteURI(e, s.LanguagesURL)
	more.More()
	e.ObjField("merges_url")
	json.WriteURI(e, s.MergesURL)
	more.More()
	e.ObjField("milestones_url")
	e.Str(s.MilestonesURL)
	more.More()
	e.ObjField("notifications_url")
	e.Str(s.NotificationsURL)
	more.More()
	e.ObjField("pulls_url")
	e.Str(s.PullsURL)
	more.More()
	e.ObjField("releases_url")
	e.Str(s.ReleasesURL)
	more.More()
	e.ObjField("ssh_url")
	e.Str(s.SSHURL)
	more.More()
	e.ObjField("stargazers_url")
	json.WriteURI(e, s.StargazersURL)
	more.More()
	e.ObjField("statuses_url")
	e.Str(s.StatusesURL)
	more.More()
	e.ObjField("subscribers_url")
	json.WriteURI(e, s.SubscribersURL)
	more.More()
	e.ObjField("subscription_url")
	json.WriteURI(e, s.SubscriptionURL)
	more.More()
	e.ObjField("tags_url")
	json.WriteURI(e, s.TagsURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("trees_url")
	e.Str(s.TreesURL)
	more.More()
	e.ObjField("clone_url")
	e.Str(s.CloneURL)
	more.More()
	e.ObjField("mirror_url")
	s.MirrorURL.WriteJSON(e)
	more.More()
	e.ObjField("hooks_url")
	json.WriteURI(e, s.HooksURL)
	more.More()
	e.ObjField("svn_url")
	json.WriteURI(e, s.SvnURL)
	more.More()
	e.ObjField("homepage")
	s.Homepage.WriteJSON(e)
	more.More()
	e.ObjField("language")
	s.Language.WriteJSON(e)
	more.More()
	e.ObjField("forks_count")
	e.Int(s.ForksCount)
	more.More()
	e.ObjField("stargazers_count")
	e.Int(s.StargazersCount)
	more.More()
	e.ObjField("watchers_count")
	e.Int(s.WatchersCount)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	more.More()
	e.ObjField("default_branch")
	e.Str(s.DefaultBranch)
	more.More()
	e.ObjField("open_issues_count")
	e.Int(s.OpenIssuesCount)
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("has_issues")
	e.Bool(s.HasIssues)
	more.More()
	e.ObjField("has_projects")
	e.Bool(s.HasProjects)
	more.More()
	e.ObjField("has_wiki")
	e.Bool(s.HasWiki)
	more.More()
	e.ObjField("has_pages")
	e.Bool(s.HasPages)
	more.More()
	e.ObjField("has_downloads")
	e.Bool(s.HasDownloads)
	more.More()
	e.ObjField("archived")
	e.Bool(s.Archived)
	more.More()
	e.ObjField("disabled")
	e.Bool(s.Disabled)
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	more.More()
	e.ObjField("pushed_at")
	s.PushedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("created_at")
	s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("updated_at")
	s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	if s.TemplateRepository.Set {
		more.More()
		e.ObjField("template_repository")
		s.TemplateRepository.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowAutoMerge.Set {
		more.More()
		e.ObjField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.AllowForking.Set {
		more.More()
		e.ObjField("allow_forking")
		s.AllowForking.WriteJSON(e)
	}
	if s.SubscribersCount.Set {
		more.More()
		e.ObjField("subscribers_count")
		s.SubscribersCount.WriteJSON(e)
	}
	if s.NetworkCount.Set {
		more.More()
		e.ObjField("network_count")
		s.NetworkCount.WriteJSON(e)
	}
	more.More()
	e.ObjField("open_issues")
	e.Int(s.OpenIssues)
	more.More()
	e.ObjField("watchers")
	e.Int(s.Watchers)
	if s.MasterBranch.Set {
		more.More()
		e.ObjField("master_branch")
		s.MasterBranch.WriteJSON(e)
	}
	if s.StarredAt.Set {
		more.More()
		e.ObjField("starred_at")
		s.StarredAt.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableRepository from json stream.
func (s *NullableRepository) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableRepository to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "full_name":
			v, err := d.Str()
			s.FullName = string(v)
			if err != nil {
				return err
			}
		case "license":
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "organization":
			s.Organization.Reset()
			if err := s.Organization.ReadJSON(d); err != nil {
				return err
			}
		case "forks":
			v, err := d.Int()
			s.Forks = int(v)
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			v, err := d.Bool()
			s.Private = bool(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "fork":
			v, err := d.Bool()
			s.Fork = bool(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "archive_url":
			v, err := d.Str()
			s.ArchiveURL = string(v)
			if err != nil {
				return err
			}
		case "assignees_url":
			v, err := d.Str()
			s.AssigneesURL = string(v)
			if err != nil {
				return err
			}
		case "blobs_url":
			v, err := d.Str()
			s.BlobsURL = string(v)
			if err != nil {
				return err
			}
		case "branches_url":
			v, err := d.Str()
			s.BranchesURL = string(v)
			if err != nil {
				return err
			}
		case "collaborators_url":
			v, err := d.Str()
			s.CollaboratorsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := d.Str()
			s.CommentsURL = string(v)
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := d.Str()
			s.CommitsURL = string(v)
			if err != nil {
				return err
			}
		case "compare_url":
			v, err := d.Str()
			s.CompareURL = string(v)
			if err != nil {
				return err
			}
		case "contents_url":
			v, err := d.Str()
			s.ContentsURL = string(v)
			if err != nil {
				return err
			}
		case "contributors_url":
			v, err := json.ReadURI(d)
			s.ContributorsURL = v
			if err != nil {
				return err
			}
		case "deployments_url":
			v, err := json.ReadURI(d)
			s.DeploymentsURL = v
			if err != nil {
				return err
			}
		case "downloads_url":
			v, err := json.ReadURI(d)
			s.DownloadsURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "git_commits_url":
			v, err := d.Str()
			s.GitCommitsURL = string(v)
			if err != nil {
				return err
			}
		case "git_refs_url":
			v, err := d.Str()
			s.GitRefsURL = string(v)
			if err != nil {
				return err
			}
		case "git_tags_url":
			v, err := d.Str()
			s.GitTagsURL = string(v)
			if err != nil {
				return err
			}
		case "git_url":
			v, err := d.Str()
			s.GitURL = string(v)
			if err != nil {
				return err
			}
		case "issue_comment_url":
			v, err := d.Str()
			s.IssueCommentURL = string(v)
			if err != nil {
				return err
			}
		case "issue_events_url":
			v, err := d.Str()
			s.IssueEventsURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "keys_url":
			v, err := d.Str()
			s.KeysURL = string(v)
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "languages_url":
			v, err := json.ReadURI(d)
			s.LanguagesURL = v
			if err != nil {
				return err
			}
		case "merges_url":
			v, err := json.ReadURI(d)
			s.MergesURL = v
			if err != nil {
				return err
			}
		case "milestones_url":
			v, err := d.Str()
			s.MilestonesURL = string(v)
			if err != nil {
				return err
			}
		case "notifications_url":
			v, err := d.Str()
			s.NotificationsURL = string(v)
			if err != nil {
				return err
			}
		case "pulls_url":
			v, err := d.Str()
			s.PullsURL = string(v)
			if err != nil {
				return err
			}
		case "releases_url":
			v, err := d.Str()
			s.ReleasesURL = string(v)
			if err != nil {
				return err
			}
		case "ssh_url":
			v, err := d.Str()
			s.SSHURL = string(v)
			if err != nil {
				return err
			}
		case "stargazers_url":
			v, err := json.ReadURI(d)
			s.StargazersURL = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := d.Str()
			s.StatusesURL = string(v)
			if err != nil {
				return err
			}
		case "subscribers_url":
			v, err := json.ReadURI(d)
			s.SubscribersURL = v
			if err != nil {
				return err
			}
		case "subscription_url":
			v, err := json.ReadURI(d)
			s.SubscriptionURL = v
			if err != nil {
				return err
			}
		case "tags_url":
			v, err := json.ReadURI(d)
			s.TagsURL = v
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "trees_url":
			v, err := d.Str()
			s.TreesURL = string(v)
			if err != nil {
				return err
			}
		case "clone_url":
			v, err := d.Str()
			s.CloneURL = string(v)
			if err != nil {
				return err
			}
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "hooks_url":
			v, err := json.ReadURI(d)
			s.HooksURL = v
			if err != nil {
				return err
			}
		case "svn_url":
			v, err := json.ReadURI(d)
			s.SvnURL = v
			if err != nil {
				return err
			}
		case "homepage":
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "forks_count":
			v, err := d.Int()
			s.ForksCount = int(v)
			if err != nil {
				return err
			}
		case "stargazers_count":
			v, err := d.Int()
			s.StargazersCount = int(v)
			if err != nil {
				return err
			}
		case "watchers_count":
			v, err := d.Int()
			s.WatchersCount = int(v)
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		case "default_branch":
			v, err := d.Str()
			s.DefaultBranch = string(v)
			if err != nil {
				return err
			}
		case "open_issues_count":
			v, err := d.Int()
			s.OpenIssuesCount = int(v)
			if err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "has_issues":
			v, err := d.Bool()
			s.HasIssues = bool(v)
			if err != nil {
				return err
			}
		case "has_projects":
			v, err := d.Bool()
			s.HasProjects = bool(v)
			if err != nil {
				return err
			}
		case "has_wiki":
			v, err := d.Bool()
			s.HasWiki = bool(v)
			if err != nil {
				return err
			}
		case "has_pages":
			v, err := d.Bool()
			s.HasPages = bool(v)
			if err != nil {
				return err
			}
		case "has_downloads":
			v, err := d.Bool()
			s.HasDownloads = bool(v)
			if err != nil {
				return err
			}
		case "archived":
			v, err := d.Bool()
			s.Archived = bool(v)
			if err != nil {
				return err
			}
		case "disabled":
			v, err := d.Bool()
			s.Disabled = bool(v)
			if err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "pushed_at":
			if err := s.PushedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "created_at":
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(d); err != nil {
				return err
			}
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(d); err != nil {
				return err
			}
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(d); err != nil {
				return err
			}
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues":
			v, err := d.Int()
			s.OpenIssues = int(v)
			if err != nil {
				return err
			}
		case "watchers":
			v, err := d.Int()
			s.Watchers = int(v)
			if err != nil {
				return err
			}
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(d); err != nil {
				return err
			}
		case "starred_at":
			s.StarredAt.Reset()
			if err := s.StarredAt.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableRepositoryPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("admin")
	e.Bool(s.Admin)
	more.More()
	e.ObjField("pull")
	e.Bool(s.Pull)
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	more.More()
	e.ObjField("push")
	e.Bool(s.Push)
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableRepositoryPermissions from json stream.
func (s *NullableRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableRepositoryPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			v, err := d.Bool()
			s.Admin = bool(v)
			if err != nil {
				return err
			}
		case "pull":
			v, err := d.Bool()
			s.Pull = bool(v)
			if err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			v, err := d.Bool()
			s.Push = bool(v)
			if err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableRepositoryTemplateRepository) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.FullName.Set {
		more.More()
		e.ObjField("full_name")
		s.FullName.WriteJSON(e)
	}
	if s.Owner.Set {
		more.More()
		e.ObjField("owner")
		s.Owner.WriteJSON(e)
	}
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Fork.Set {
		more.More()
		e.ObjField("fork")
		s.Fork.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.ArchiveURL.Set {
		more.More()
		e.ObjField("archive_url")
		s.ArchiveURL.WriteJSON(e)
	}
	if s.AssigneesURL.Set {
		more.More()
		e.ObjField("assignees_url")
		s.AssigneesURL.WriteJSON(e)
	}
	if s.BlobsURL.Set {
		more.More()
		e.ObjField("blobs_url")
		s.BlobsURL.WriteJSON(e)
	}
	if s.BranchesURL.Set {
		more.More()
		e.ObjField("branches_url")
		s.BranchesURL.WriteJSON(e)
	}
	if s.CollaboratorsURL.Set {
		more.More()
		e.ObjField("collaborators_url")
		s.CollaboratorsURL.WriteJSON(e)
	}
	if s.CommentsURL.Set {
		more.More()
		e.ObjField("comments_url")
		s.CommentsURL.WriteJSON(e)
	}
	if s.CommitsURL.Set {
		more.More()
		e.ObjField("commits_url")
		s.CommitsURL.WriteJSON(e)
	}
	if s.CompareURL.Set {
		more.More()
		e.ObjField("compare_url")
		s.CompareURL.WriteJSON(e)
	}
	if s.ContentsURL.Set {
		more.More()
		e.ObjField("contents_url")
		s.ContentsURL.WriteJSON(e)
	}
	if s.ContributorsURL.Set {
		more.More()
		e.ObjField("contributors_url")
		s.ContributorsURL.WriteJSON(e)
	}
	if s.DeploymentsURL.Set {
		more.More()
		e.ObjField("deployments_url")
		s.DeploymentsURL.WriteJSON(e)
	}
	if s.DownloadsURL.Set {
		more.More()
		e.ObjField("downloads_url")
		s.DownloadsURL.WriteJSON(e)
	}
	if s.EventsURL.Set {
		more.More()
		e.ObjField("events_url")
		s.EventsURL.WriteJSON(e)
	}
	if s.ForksURL.Set {
		more.More()
		e.ObjField("forks_url")
		s.ForksURL.WriteJSON(e)
	}
	if s.GitCommitsURL.Set {
		more.More()
		e.ObjField("git_commits_url")
		s.GitCommitsURL.WriteJSON(e)
	}
	if s.GitRefsURL.Set {
		more.More()
		e.ObjField("git_refs_url")
		s.GitRefsURL.WriteJSON(e)
	}
	if s.GitTagsURL.Set {
		more.More()
		e.ObjField("git_tags_url")
		s.GitTagsURL.WriteJSON(e)
	}
	if s.GitURL.Set {
		more.More()
		e.ObjField("git_url")
		s.GitURL.WriteJSON(e)
	}
	if s.IssueCommentURL.Set {
		more.More()
		e.ObjField("issue_comment_url")
		s.IssueCommentURL.WriteJSON(e)
	}
	if s.IssueEventsURL.Set {
		more.More()
		e.ObjField("issue_events_url")
		s.IssueEventsURL.WriteJSON(e)
	}
	if s.IssuesURL.Set {
		more.More()
		e.ObjField("issues_url")
		s.IssuesURL.WriteJSON(e)
	}
	if s.KeysURL.Set {
		more.More()
		e.ObjField("keys_url")
		s.KeysURL.WriteJSON(e)
	}
	if s.LabelsURL.Set {
		more.More()
		e.ObjField("labels_url")
		s.LabelsURL.WriteJSON(e)
	}
	if s.LanguagesURL.Set {
		more.More()
		e.ObjField("languages_url")
		s.LanguagesURL.WriteJSON(e)
	}
	if s.MergesURL.Set {
		more.More()
		e.ObjField("merges_url")
		s.MergesURL.WriteJSON(e)
	}
	if s.MilestonesURL.Set {
		more.More()
		e.ObjField("milestones_url")
		s.MilestonesURL.WriteJSON(e)
	}
	if s.NotificationsURL.Set {
		more.More()
		e.ObjField("notifications_url")
		s.NotificationsURL.WriteJSON(e)
	}
	if s.PullsURL.Set {
		more.More()
		e.ObjField("pulls_url")
		s.PullsURL.WriteJSON(e)
	}
	if s.ReleasesURL.Set {
		more.More()
		e.ObjField("releases_url")
		s.ReleasesURL.WriteJSON(e)
	}
	if s.SSHURL.Set {
		more.More()
		e.ObjField("ssh_url")
		s.SSHURL.WriteJSON(e)
	}
	if s.StargazersURL.Set {
		more.More()
		e.ObjField("stargazers_url")
		s.StargazersURL.WriteJSON(e)
	}
	if s.StatusesURL.Set {
		more.More()
		e.ObjField("statuses_url")
		s.StatusesURL.WriteJSON(e)
	}
	if s.SubscribersURL.Set {
		more.More()
		e.ObjField("subscribers_url")
		s.SubscribersURL.WriteJSON(e)
	}
	if s.SubscriptionURL.Set {
		more.More()
		e.ObjField("subscription_url")
		s.SubscriptionURL.WriteJSON(e)
	}
	if s.TagsURL.Set {
		more.More()
		e.ObjField("tags_url")
		s.TagsURL.WriteJSON(e)
	}
	if s.TeamsURL.Set {
		more.More()
		e.ObjField("teams_url")
		s.TeamsURL.WriteJSON(e)
	}
	if s.TreesURL.Set {
		more.More()
		e.ObjField("trees_url")
		s.TreesURL.WriteJSON(e)
	}
	if s.CloneURL.Set {
		more.More()
		e.ObjField("clone_url")
		s.CloneURL.WriteJSON(e)
	}
	if s.MirrorURL.Set {
		more.More()
		e.ObjField("mirror_url")
		s.MirrorURL.WriteJSON(e)
	}
	if s.HooksURL.Set {
		more.More()
		e.ObjField("hooks_url")
		s.HooksURL.WriteJSON(e)
	}
	if s.SvnURL.Set {
		more.More()
		e.ObjField("svn_url")
		s.SvnURL.WriteJSON(e)
	}
	if s.Homepage.Set {
		more.More()
		e.ObjField("homepage")
		s.Homepage.WriteJSON(e)
	}
	if s.Language.Set {
		more.More()
		e.ObjField("language")
		s.Language.WriteJSON(e)
	}
	if s.ForksCount.Set {
		more.More()
		e.ObjField("forks_count")
		s.ForksCount.WriteJSON(e)
	}
	if s.StargazersCount.Set {
		more.More()
		e.ObjField("stargazers_count")
		s.StargazersCount.WriteJSON(e)
	}
	if s.WatchersCount.Set {
		more.More()
		e.ObjField("watchers_count")
		s.WatchersCount.WriteJSON(e)
	}
	if s.Size.Set {
		more.More()
		e.ObjField("size")
		s.Size.WriteJSON(e)
	}
	if s.DefaultBranch.Set {
		more.More()
		e.ObjField("default_branch")
		s.DefaultBranch.WriteJSON(e)
	}
	if s.OpenIssuesCount.Set {
		more.More()
		e.ObjField("open_issues_count")
		s.OpenIssuesCount.WriteJSON(e)
	}
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.HasIssues.Set {
		more.More()
		e.ObjField("has_issues")
		s.HasIssues.WriteJSON(e)
	}
	if s.HasProjects.Set {
		more.More()
		e.ObjField("has_projects")
		s.HasProjects.WriteJSON(e)
	}
	if s.HasWiki.Set {
		more.More()
		e.ObjField("has_wiki")
		s.HasWiki.WriteJSON(e)
	}
	if s.HasPages.Set {
		more.More()
		e.ObjField("has_pages")
		s.HasPages.WriteJSON(e)
	}
	if s.HasDownloads.Set {
		more.More()
		e.ObjField("has_downloads")
		s.HasDownloads.WriteJSON(e)
	}
	if s.Archived.Set {
		more.More()
		e.ObjField("archived")
		s.Archived.WriteJSON(e)
	}
	if s.Disabled.Set {
		more.More()
		e.ObjField("disabled")
		s.Disabled.WriteJSON(e)
	}
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	if s.PushedAt.Set {
		more.More()
		e.ObjField("pushed_at")
		s.PushedAt.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e)
	}
	if s.UpdatedAt.Set {
		more.More()
		e.ObjField("updated_at")
		s.UpdatedAt.WriteJSON(e)
	}
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowAutoMerge.Set {
		more.More()
		e.ObjField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.SubscribersCount.Set {
		more.More()
		e.ObjField("subscribers_count")
		s.SubscribersCount.WriteJSON(e)
	}
	if s.NetworkCount.Set {
		more.More()
		e.ObjField("network_count")
		s.NetworkCount.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableRepositoryTemplateRepository from json stream.
func (s *NullableRepositoryTemplateRepository) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableRepositoryTemplateRepository to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "full_name":
			s.FullName.Reset()
			if err := s.FullName.ReadJSON(d); err != nil {
				return err
			}
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "fork":
			s.Fork.Reset()
			if err := s.Fork.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "archive_url":
			s.ArchiveURL.Reset()
			if err := s.ArchiveURL.ReadJSON(d); err != nil {
				return err
			}
		case "assignees_url":
			s.AssigneesURL.Reset()
			if err := s.AssigneesURL.ReadJSON(d); err != nil {
				return err
			}
		case "blobs_url":
			s.BlobsURL.Reset()
			if err := s.BlobsURL.ReadJSON(d); err != nil {
				return err
			}
		case "branches_url":
			s.BranchesURL.Reset()
			if err := s.BranchesURL.ReadJSON(d); err != nil {
				return err
			}
		case "collaborators_url":
			s.CollaboratorsURL.Reset()
			if err := s.CollaboratorsURL.ReadJSON(d); err != nil {
				return err
			}
		case "comments_url":
			s.CommentsURL.Reset()
			if err := s.CommentsURL.ReadJSON(d); err != nil {
				return err
			}
		case "commits_url":
			s.CommitsURL.Reset()
			if err := s.CommitsURL.ReadJSON(d); err != nil {
				return err
			}
		case "compare_url":
			s.CompareURL.Reset()
			if err := s.CompareURL.ReadJSON(d); err != nil {
				return err
			}
		case "contents_url":
			s.ContentsURL.Reset()
			if err := s.ContentsURL.ReadJSON(d); err != nil {
				return err
			}
		case "contributors_url":
			s.ContributorsURL.Reset()
			if err := s.ContributorsURL.ReadJSON(d); err != nil {
				return err
			}
		case "deployments_url":
			s.DeploymentsURL.Reset()
			if err := s.DeploymentsURL.ReadJSON(d); err != nil {
				return err
			}
		case "downloads_url":
			s.DownloadsURL.Reset()
			if err := s.DownloadsURL.ReadJSON(d); err != nil {
				return err
			}
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "forks_url":
			s.ForksURL.Reset()
			if err := s.ForksURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_commits_url":
			s.GitCommitsURL.Reset()
			if err := s.GitCommitsURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_refs_url":
			s.GitRefsURL.Reset()
			if err := s.GitRefsURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_tags_url":
			s.GitTagsURL.Reset()
			if err := s.GitTagsURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_url":
			s.GitURL.Reset()
			if err := s.GitURL.ReadJSON(d); err != nil {
				return err
			}
		case "issue_comment_url":
			s.IssueCommentURL.Reset()
			if err := s.IssueCommentURL.ReadJSON(d); err != nil {
				return err
			}
		case "issue_events_url":
			s.IssueEventsURL.Reset()
			if err := s.IssueEventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "issues_url":
			s.IssuesURL.Reset()
			if err := s.IssuesURL.ReadJSON(d); err != nil {
				return err
			}
		case "keys_url":
			s.KeysURL.Reset()
			if err := s.KeysURL.ReadJSON(d); err != nil {
				return err
			}
		case "labels_url":
			s.LabelsURL.Reset()
			if err := s.LabelsURL.ReadJSON(d); err != nil {
				return err
			}
		case "languages_url":
			s.LanguagesURL.Reset()
			if err := s.LanguagesURL.ReadJSON(d); err != nil {
				return err
			}
		case "merges_url":
			s.MergesURL.Reset()
			if err := s.MergesURL.ReadJSON(d); err != nil {
				return err
			}
		case "milestones_url":
			s.MilestonesURL.Reset()
			if err := s.MilestonesURL.ReadJSON(d); err != nil {
				return err
			}
		case "notifications_url":
			s.NotificationsURL.Reset()
			if err := s.NotificationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "pulls_url":
			s.PullsURL.Reset()
			if err := s.PullsURL.ReadJSON(d); err != nil {
				return err
			}
		case "releases_url":
			s.ReleasesURL.Reset()
			if err := s.ReleasesURL.ReadJSON(d); err != nil {
				return err
			}
		case "ssh_url":
			s.SSHURL.Reset()
			if err := s.SSHURL.ReadJSON(d); err != nil {
				return err
			}
		case "stargazers_url":
			s.StargazersURL.Reset()
			if err := s.StargazersURL.ReadJSON(d); err != nil {
				return err
			}
		case "statuses_url":
			s.StatusesURL.Reset()
			if err := s.StatusesURL.ReadJSON(d); err != nil {
				return err
			}
		case "subscribers_url":
			s.SubscribersURL.Reset()
			if err := s.SubscribersURL.ReadJSON(d); err != nil {
				return err
			}
		case "subscription_url":
			s.SubscriptionURL.Reset()
			if err := s.SubscriptionURL.ReadJSON(d); err != nil {
				return err
			}
		case "tags_url":
			s.TagsURL.Reset()
			if err := s.TagsURL.ReadJSON(d); err != nil {
				return err
			}
		case "teams_url":
			s.TeamsURL.Reset()
			if err := s.TeamsURL.ReadJSON(d); err != nil {
				return err
			}
		case "trees_url":
			s.TreesURL.Reset()
			if err := s.TreesURL.ReadJSON(d); err != nil {
				return err
			}
		case "clone_url":
			s.CloneURL.Reset()
			if err := s.CloneURL.ReadJSON(d); err != nil {
				return err
			}
		case "mirror_url":
			s.MirrorURL.Reset()
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "hooks_url":
			s.HooksURL.Reset()
			if err := s.HooksURL.ReadJSON(d); err != nil {
				return err
			}
		case "svn_url":
			s.SvnURL.Reset()
			if err := s.SvnURL.ReadJSON(d); err != nil {
				return err
			}
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			s.Language.Reset()
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "forks_count":
			s.ForksCount.Reset()
			if err := s.ForksCount.ReadJSON(d); err != nil {
				return err
			}
		case "stargazers_count":
			s.StargazersCount.Reset()
			if err := s.StargazersCount.ReadJSON(d); err != nil {
				return err
			}
		case "watchers_count":
			s.WatchersCount.Reset()
			if err := s.WatchersCount.ReadJSON(d); err != nil {
				return err
			}
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(d); err != nil {
				return err
			}
		case "default_branch":
			s.DefaultBranch.Reset()
			if err := s.DefaultBranch.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues_count":
			s.OpenIssuesCount.Reset()
			if err := s.OpenIssuesCount.ReadJSON(d); err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(d); err != nil {
				return err
			}
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(d); err != nil {
				return err
			}
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(d); err != nil {
				return err
			}
		case "has_pages":
			s.HasPages.Reset()
			if err := s.HasPages.ReadJSON(d); err != nil {
				return err
			}
		case "has_downloads":
			s.HasDownloads.Reset()
			if err := s.HasDownloads.ReadJSON(d); err != nil {
				return err
			}
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(d); err != nil {
				return err
			}
		case "disabled":
			s.Disabled.Reset()
			if err := s.Disabled.ReadJSON(d); err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "pushed_at":
			s.PushedAt.Reset()
			if err := s.PushedAt.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(d); err != nil {
				return err
			}
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableRepositoryTemplateRepositoryOwner) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Login.Set {
		more.More()
		e.ObjField("login")
		s.Login.WriteJSON(e)
	}
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.AvatarURL.Set {
		more.More()
		e.ObjField("avatar_url")
		s.AvatarURL.WriteJSON(e)
	}
	if s.GravatarID.Set {
		more.More()
		e.ObjField("gravatar_id")
		s.GravatarID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.FollowersURL.Set {
		more.More()
		e.ObjField("followers_url")
		s.FollowersURL.WriteJSON(e)
	}
	if s.FollowingURL.Set {
		more.More()
		e.ObjField("following_url")
		s.FollowingURL.WriteJSON(e)
	}
	if s.GistsURL.Set {
		more.More()
		e.ObjField("gists_url")
		s.GistsURL.WriteJSON(e)
	}
	if s.StarredURL.Set {
		more.More()
		e.ObjField("starred_url")
		s.StarredURL.WriteJSON(e)
	}
	if s.SubscriptionsURL.Set {
		more.More()
		e.ObjField("subscriptions_url")
		s.SubscriptionsURL.WriteJSON(e)
	}
	if s.OrganizationsURL.Set {
		more.More()
		e.ObjField("organizations_url")
		s.OrganizationsURL.WriteJSON(e)
	}
	if s.ReposURL.Set {
		more.More()
		e.ObjField("repos_url")
		s.ReposURL.WriteJSON(e)
	}
	if s.EventsURL.Set {
		more.More()
		e.ObjField("events_url")
		s.EventsURL.WriteJSON(e)
	}
	if s.ReceivedEventsURL.Set {
		more.More()
		e.ObjField("received_events_url")
		s.ReceivedEventsURL.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	if s.SiteAdmin.Set {
		more.More()
		e.ObjField("site_admin")
		s.SiteAdmin.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableRepositoryTemplateRepositoryOwner from json stream.
func (s *NullableRepositoryTemplateRepositoryOwner) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableRepositoryTemplateRepositoryOwner to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			s.Login.Reset()
			if err := s.Login.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "avatar_url":
			s.AvatarURL.Reset()
			if err := s.AvatarURL.ReadJSON(d); err != nil {
				return err
			}
		case "gravatar_id":
			s.GravatarID.Reset()
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "followers_url":
			s.FollowersURL.Reset()
			if err := s.FollowersURL.ReadJSON(d); err != nil {
				return err
			}
		case "following_url":
			s.FollowingURL.Reset()
			if err := s.FollowingURL.ReadJSON(d); err != nil {
				return err
			}
		case "gists_url":
			s.GistsURL.Reset()
			if err := s.GistsURL.ReadJSON(d); err != nil {
				return err
			}
		case "starred_url":
			s.StarredURL.Reset()
			if err := s.StarredURL.ReadJSON(d); err != nil {
				return err
			}
		case "subscriptions_url":
			s.SubscriptionsURL.Reset()
			if err := s.SubscriptionsURL.ReadJSON(d); err != nil {
				return err
			}
		case "organizations_url":
			s.OrganizationsURL.Reset()
			if err := s.OrganizationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "repos_url":
			s.ReposURL.Reset()
			if err := s.ReposURL.ReadJSON(d); err != nil {
				return err
			}
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "received_events_url":
			s.ReceivedEventsURL.Reset()
			if err := s.ReceivedEventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "site_admin":
			s.SiteAdmin.Reset()
			if err := s.SiteAdmin.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableRepositoryTemplateRepositoryPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Admin.Set {
		more.More()
		e.ObjField("admin")
		s.Admin.WriteJSON(e)
	}
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	if s.Push.Set {
		more.More()
		e.ObjField("push")
		s.Push.WriteJSON(e)
	}
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	if s.Pull.Set {
		more.More()
		e.ObjField("pull")
		s.Pull.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableRepositoryTemplateRepositoryPermissions from json stream.
func (s *NullableRepositoryTemplateRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableRepositoryTemplateRepositoryPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			s.Admin.Reset()
			if err := s.Admin.ReadJSON(d); err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			s.Push.Reset()
			if err := s.Push.ReadJSON(d); err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "pull":
			s.Pull.Reset()
			if err := s.Pull.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableScopedInstallation) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("permissions")
	s.Permissions.WriteJSON(e)
	more.More()
	e.ObjField("repository_selection")
	s.RepositorySelection.WriteJSON(e)
	more.More()
	e.ObjField("single_file_name")
	s.SingleFileName.WriteJSON(e)
	if s.HasMultipleSingleFiles.Set {
		more.More()
		e.ObjField("has_multiple_single_files")
		s.HasMultipleSingleFiles.WriteJSON(e)
	}
	if s.SingleFilePaths != nil {
		more.More()
		e.ObjField("single_file_paths")
		more.Down()
		e.ArrStart()
		for _, elem := range s.SingleFilePaths {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("repositories_url")
	json.WriteURI(e, s.RepositoriesURL)
	more.More()
	e.ObjField("account")
	s.Account.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads NullableScopedInstallation from json stream.
func (s *NullableScopedInstallation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableScopedInstallation to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "permissions":
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "repository_selection":
			if err := s.RepositorySelection.ReadJSON(d); err != nil {
				return err
			}
		case "single_file_name":
			if err := s.SingleFileName.ReadJSON(d); err != nil {
				return err
			}
		case "has_multiple_single_files":
			s.HasMultipleSingleFiles.Reset()
			if err := s.HasMultipleSingleFiles.ReadJSON(d); err != nil {
				return err
			}
		case "single_file_paths":
			s.SingleFilePaths = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.SingleFilePaths = append(s.SingleFilePaths, elem)
				return nil
			}); err != nil {
				return err
			}
		case "repositories_url":
			v, err := json.ReadURI(d)
			s.RepositoriesURL = v
			if err != nil {
				return err
			}
		case "account":
			if err := s.Account.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableScopedInstallationRepositorySelection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads NullableScopedInstallationRepositorySelection from json reader.
func (s *NullableScopedInstallationRepositorySelection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableScopedInstallationRepositorySelection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = NullableScopedInstallationRepositorySelection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s NullableSimpleCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Str(s.ID)
	more.More()
	e.ObjField("tree_id")
	e.Str(s.TreeID)
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("timestamp")
	json.WriteDateTime(e, s.Timestamp)
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("committer")
	s.Committer.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads NullableSimpleCommit from json stream.
func (s *NullableSimpleCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableSimpleCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "tree_id":
			v, err := d.Str()
			s.TreeID = string(v)
			if err != nil {
				return err
			}
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "timestamp":
			v, err := json.ReadDateTime(d)
			s.Timestamp = v
			if err != nil {
				return err
			}
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableSimpleCommitAuthor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	e.ObjEnd()
}

// ReadJSON reads NullableSimpleCommitAuthor from json stream.
func (s *NullableSimpleCommitAuthor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableSimpleCommitAuthor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableSimpleCommitCommitter) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	e.ObjEnd()
}

// ReadJSON reads NullableSimpleCommitCommitter from json stream.
func (s *NullableSimpleCommitCommitter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableSimpleCommitCommitter to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableSimpleUser) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("followers_url")
	json.WriteURI(e, s.FollowersURL)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("subscriptions_url")
	json.WriteURI(e, s.SubscriptionsURL)
	more.More()
	e.ObjField("organizations_url")
	json.WriteURI(e, s.OrganizationsURL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	more.More()
	e.ObjField("received_events_url")
	json.WriteURI(e, s.ReceivedEventsURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("site_admin")
	e.Bool(s.SiteAdmin)
	if s.StarredAt.Set {
		more.More()
		e.ObjField("starred_at")
		s.StarredAt.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableSimpleUser from json stream.
func (s *NullableSimpleUser) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableSimpleUser to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := json.ReadURI(d)
			s.FollowersURL = v
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "subscriptions_url":
			v, err := json.ReadURI(d)
			s.SubscriptionsURL = v
			if err != nil {
				return err
			}
		case "organizations_url":
			v, err := json.ReadURI(d)
			s.OrganizationsURL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "received_events_url":
			v, err := json.ReadURI(d)
			s.ReceivedEventsURL = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "site_admin":
			v, err := d.Bool()
			s.SiteAdmin = bool(v)
			if err != nil {
				return err
			}
		case "starred_at":
			s.StarredAt.Reset()
			if err := s.StarredAt.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s NullableTeamSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("members_url")
	e.Str(s.MembersURL)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("permission")
	e.Str(s.Permission)
	if s.Privacy.Set {
		more.More()
		e.ObjField("privacy")
		s.Privacy.WriteJSON(e)
	}
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("repositories_url")
	json.WriteURI(e, s.RepositoriesURL)
	more.More()
	e.ObjField("slug")
	e.Str(s.Slug)
	if s.LdapDn.Set {
		more.More()
		e.ObjField("ldap_dn")
		s.LdapDn.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads NullableTeamSimple from json stream.
func (s *NullableTeamSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode NullableTeamSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "members_url":
			v, err := d.Str()
			s.MembersURL = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "permission":
			v, err := d.Str()
			s.Permission = string(v)
			if err != nil {
				return err
			}
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "repositories_url":
			v, err := json.ReadURI(d)
			s.RepositoriesURL = v
			if err != nil {
				return err
			}
		case "slug":
			v, err := d.Str()
			s.Slug = string(v)
			if err != nil {
				return err
			}
		case "ldap_dn":
			s.LdapDn.Reset()
			if err := s.LdapDn.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OAuthAuthorizationsCreateAuthorizationReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Scopes.Set {
		more.More()
		e.ObjField("scopes")
		s.Scopes.WriteJSON(e)
	}
	if s.Note.Set {
		more.More()
		e.ObjField("note")
		s.Note.WriteJSON(e)
	}
	if s.NoteURL.Set {
		more.More()
		e.ObjField("note_url")
		s.NoteURL.WriteJSON(e)
	}
	if s.ClientID.Set {
		more.More()
		e.ObjField("client_id")
		s.ClientID.WriteJSON(e)
	}
	if s.ClientSecret.Set {
		more.More()
		e.ObjField("client_secret")
		s.ClientSecret.WriteJSON(e)
	}
	if s.Fingerprint.Set {
		more.More()
		e.ObjField("fingerprint")
		s.Fingerprint.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OAuthAuthorizationsCreateAuthorizationReq from json stream.
func (s *OAuthAuthorizationsCreateAuthorizationReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OAuthAuthorizationsCreateAuthorizationReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "scopes":
			s.Scopes.Reset()
			if err := s.Scopes.ReadJSON(d); err != nil {
				return err
			}
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(d); err != nil {
				return err
			}
		case "note_url":
			s.NoteURL.Reset()
			if err := s.NoteURL.ReadJSON(d); err != nil {
				return err
			}
		case "client_id":
			s.ClientID.Reset()
			if err := s.ClientID.ReadJSON(d); err != nil {
				return err
			}
		case "client_secret":
			s.ClientSecret.Reset()
			if err := s.ClientSecret.ReadJSON(d); err != nil {
				return err
			}
		case "fingerprint":
			s.Fingerprint.Reset()
			if err := s.Fingerprint.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OAuthAuthorizationsDeleteAuthorizationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OAuthAuthorizationsDeleteAuthorizationNoContent from json stream.
func (s *OAuthAuthorizationsDeleteAuthorizationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OAuthAuthorizationsDeleteAuthorizationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (OAuthAuthorizationsDeleteGrantApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsDeleteGrantApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OAuthAuthorizationsDeleteGrantNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OAuthAuthorizationsDeleteGrantNoContent from json stream.
func (s *OAuthAuthorizationsDeleteGrantNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OAuthAuthorizationsDeleteGrantNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsGetGrantApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsGetGrantApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsGetGrantApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsGetGrantApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("client_secret")
	e.Str(s.ClientSecret)
	if s.Scopes.Set {
		more.More()
		e.ObjField("scopes")
		s.Scopes.WriteJSON(e)
	}
	if s.Note.Set {
		more.More()
		e.ObjField("note")
		s.Note.WriteJSON(e)
	}
	if s.NoteURL.Set {
		more.More()
		e.ObjField("note_url")
		s.NoteURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq from json stream.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "client_secret":
			v, err := d.Str()
			s.ClientSecret = string(v)
			if err != nil {
				return err
			}
		case "scopes":
			s.Scopes.Reset()
			if err := s.Scopes.ReadJSON(d); err != nil {
				return err
			}
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(d); err != nil {
				return err
			}
		case "note_url":
			s.NoteURL.Reset()
			if err := s.NoteURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("client_secret")
	e.Str(s.ClientSecret)
	if s.Scopes.Set {
		more.More()
		e.ObjField("scopes")
		s.Scopes.WriteJSON(e)
	}
	if s.Note.Set {
		more.More()
		e.ObjField("note")
		s.Note.WriteJSON(e)
	}
	if s.NoteURL.Set {
		more.More()
		e.ObjField("note_url")
		s.NoteURL.WriteJSON(e)
	}
	if s.Fingerprint.Set {
		more.More()
		e.ObjField("fingerprint")
		s.Fingerprint.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OAuthAuthorizationsGetOrCreateAuthorizationForAppReq from json stream.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OAuthAuthorizationsGetOrCreateAuthorizationForAppReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "client_secret":
			v, err := d.Str()
			s.ClientSecret = string(v)
			if err != nil {
				return err
			}
		case "scopes":
			s.Scopes.Reset()
			if err := s.Scopes.ReadJSON(d); err != nil {
				return err
			}
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(d); err != nil {
				return err
			}
		case "note_url":
			s.NoteURL.Reset()
			if err := s.NoteURL.ReadJSON(d); err != nil {
				return err
			}
		case "fingerprint":
			s.Fingerprint.Reset()
			if err := s.Fingerprint.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsListAuthorizationsOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsListAuthorizationsOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsListGrantsApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsListGrantsApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsListGrantsApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsListGrantsApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsListGrantsApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (OAuthAuthorizationsListGrantsApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OAuthAuthorizationsListGrantsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (OAuthAuthorizationsListGrantsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s OAuthAuthorizationsUpdateAuthorizationReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Scopes.Set {
		more.More()
		e.ObjField("scopes")
		s.Scopes.WriteJSON(e)
	}
	if s.AddScopes != nil {
		more.More()
		e.ObjField("add_scopes")
		more.Down()
		e.ArrStart()
		for _, elem := range s.AddScopes {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.RemoveScopes != nil {
		more.More()
		e.ObjField("remove_scopes")
		more.Down()
		e.ArrStart()
		for _, elem := range s.RemoveScopes {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Note.Set {
		more.More()
		e.ObjField("note")
		s.Note.WriteJSON(e)
	}
	if s.NoteURL.Set {
		more.More()
		e.ObjField("note_url")
		s.NoteURL.WriteJSON(e)
	}
	if s.Fingerprint.Set {
		more.More()
		e.ObjField("fingerprint")
		s.Fingerprint.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OAuthAuthorizationsUpdateAuthorizationReq from json stream.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OAuthAuthorizationsUpdateAuthorizationReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "scopes":
			s.Scopes.Reset()
			if err := s.Scopes.ReadJSON(d); err != nil {
				return err
			}
		case "add_scopes":
			s.AddScopes = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AddScopes = append(s.AddScopes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "remove_scopes":
			s.RemoveScopes = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.RemoveScopes = append(s.RemoveScopes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(d); err != nil {
				return err
			}
		case "note_url":
			s.NoteURL.Reset()
			if err := s.NoteURL.ReadJSON(d); err != nil {
				return err
			}
		case "fingerprint":
			s.Fingerprint.Reset()
			if err := s.Fingerprint.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON writes json value of APIOverviewSSHKeyFingerprints to json stream.
func (o OptAPIOverviewSSHKeyFingerprints) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of APIOverviewSSHKeyFingerprints from json iterator.
func (o *OptAPIOverviewSSHKeyFingerprints) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAPIOverviewSSHKeyFingerprints to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAPIOverviewSSHKeyFingerprints", d.Next())
	}
}

// WriteJSON writes json value of ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility to json stream.
func (o OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility from json iterator.
func (o *OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility", d.Next())
	}
}

// WriteJSON writes json value of ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility to json stream.
func (o OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility from json iterator.
func (o *OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility", d.Next())
	}
}

// WriteJSON writes json value of Actor to json stream.
func (o OptActor) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of Actor from json iterator.
func (o *OptActor) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptActor to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptActor", d.Next())
	}
}

// WriteJSON writes json value of AlertCreatedAt to json stream.
func (o OptAlertCreatedAt) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of AlertCreatedAt from json iterator.
func (o *OptAlertCreatedAt) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAlertCreatedAt to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAlertCreatedAt", d.Next())
	}
}

// WriteJSON writes json value of AlertHTMLURL to json stream.
func (o OptAlertHTMLURL) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of AlertHTMLURL from json iterator.
func (o *OptAlertHTMLURL) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAlertHTMLURL to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAlertHTMLURL", d.Next())
	}
}

// WriteJSON writes json value of AlertNumber to json stream.
func (o OptAlertNumber) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of AlertNumber from json iterator.
func (o *OptAlertNumber) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAlertNumber to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAlertNumber", d.Next())
	}
}

// WriteJSON writes json value of AlertURL to json stream.
func (o OptAlertURL) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of AlertURL from json iterator.
func (o *OptAlertURL) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAlertURL to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAlertURL", d.Next())
	}
}

// WriteJSON writes json value of AllowedActions to json stream.
func (o OptAllowedActions) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AllowedActions from json iterator.
func (o *OptAllowedActions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAllowedActions to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AllowedActions(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAllowedActions", d.Next())
	}
}

// WriteJSON writes json value of AppPermissions to json stream.
func (o OptAppPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of AppPermissions from json iterator.
func (o *OptAppPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissions", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsActions to json stream.
func (o OptAppPermissionsActions) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsActions from json iterator.
func (o *OptAppPermissionsActions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsActions to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsActions(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsActions", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsAdministration to json stream.
func (o OptAppPermissionsAdministration) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsAdministration from json iterator.
func (o *OptAppPermissionsAdministration) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsAdministration to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsAdministration(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsAdministration", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsChecks to json stream.
func (o OptAppPermissionsChecks) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsChecks from json iterator.
func (o *OptAppPermissionsChecks) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsChecks to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsChecks(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsChecks", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsContentReferences to json stream.
func (o OptAppPermissionsContentReferences) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsContentReferences from json iterator.
func (o *OptAppPermissionsContentReferences) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsContentReferences to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsContentReferences(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsContentReferences", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsContents to json stream.
func (o OptAppPermissionsContents) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsContents from json iterator.
func (o *OptAppPermissionsContents) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsContents to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsContents(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsContents", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsDeployments to json stream.
func (o OptAppPermissionsDeployments) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsDeployments from json iterator.
func (o *OptAppPermissionsDeployments) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsDeployments to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsDeployments(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsDeployments", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsEnvironments to json stream.
func (o OptAppPermissionsEnvironments) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsEnvironments from json iterator.
func (o *OptAppPermissionsEnvironments) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsEnvironments to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsEnvironments(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsEnvironments", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsIssues to json stream.
func (o OptAppPermissionsIssues) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsIssues from json iterator.
func (o *OptAppPermissionsIssues) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsIssues to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsIssues(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsIssues", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsMembers to json stream.
func (o OptAppPermissionsMembers) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsMembers from json iterator.
func (o *OptAppPermissionsMembers) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsMembers to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsMembers(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsMembers", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsMetadata to json stream.
func (o OptAppPermissionsMetadata) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsMetadata from json iterator.
func (o *OptAppPermissionsMetadata) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsMetadata to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsMetadata(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsMetadata", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsOrganizationAdministration to json stream.
func (o OptAppPermissionsOrganizationAdministration) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationAdministration from json iterator.
func (o *OptAppPermissionsOrganizationAdministration) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsOrganizationAdministration to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsOrganizationAdministration(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsOrganizationAdministration", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsOrganizationHooks to json stream.
func (o OptAppPermissionsOrganizationHooks) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationHooks from json iterator.
func (o *OptAppPermissionsOrganizationHooks) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsOrganizationHooks to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsOrganizationHooks(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsOrganizationHooks", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsOrganizationPackages to json stream.
func (o OptAppPermissionsOrganizationPackages) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationPackages from json iterator.
func (o *OptAppPermissionsOrganizationPackages) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsOrganizationPackages to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsOrganizationPackages(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsOrganizationPackages", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsOrganizationPlan to json stream.
func (o OptAppPermissionsOrganizationPlan) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationPlan from json iterator.
func (o *OptAppPermissionsOrganizationPlan) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsOrganizationPlan to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsOrganizationPlan(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsOrganizationPlan", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsOrganizationProjects to json stream.
func (o OptAppPermissionsOrganizationProjects) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationProjects from json iterator.
func (o *OptAppPermissionsOrganizationProjects) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsOrganizationProjects to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsOrganizationProjects(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsOrganizationProjects", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsOrganizationSecrets to json stream.
func (o OptAppPermissionsOrganizationSecrets) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationSecrets from json iterator.
func (o *OptAppPermissionsOrganizationSecrets) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsOrganizationSecrets to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsOrganizationSecrets(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsOrganizationSecrets", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsOrganizationSelfHostedRunners to json stream.
func (o OptAppPermissionsOrganizationSelfHostedRunners) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationSelfHostedRunners from json iterator.
func (o *OptAppPermissionsOrganizationSelfHostedRunners) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsOrganizationSelfHostedRunners to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsOrganizationSelfHostedRunners(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsOrganizationSelfHostedRunners", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsOrganizationUserBlocking to json stream.
func (o OptAppPermissionsOrganizationUserBlocking) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationUserBlocking from json iterator.
func (o *OptAppPermissionsOrganizationUserBlocking) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsOrganizationUserBlocking to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsOrganizationUserBlocking(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsOrganizationUserBlocking", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsPackages to json stream.
func (o OptAppPermissionsPackages) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsPackages from json iterator.
func (o *OptAppPermissionsPackages) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsPackages to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsPackages(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsPackages", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsPages to json stream.
func (o OptAppPermissionsPages) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsPages from json iterator.
func (o *OptAppPermissionsPages) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsPages to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsPages(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsPages", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsPullRequests to json stream.
func (o OptAppPermissionsPullRequests) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsPullRequests from json iterator.
func (o *OptAppPermissionsPullRequests) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsPullRequests to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsPullRequests(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsPullRequests", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsRepositoryHooks to json stream.
func (o OptAppPermissionsRepositoryHooks) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsRepositoryHooks from json iterator.
func (o *OptAppPermissionsRepositoryHooks) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsRepositoryHooks to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsRepositoryHooks(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsRepositoryHooks", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsRepositoryProjects to json stream.
func (o OptAppPermissionsRepositoryProjects) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsRepositoryProjects from json iterator.
func (o *OptAppPermissionsRepositoryProjects) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsRepositoryProjects to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsRepositoryProjects(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsRepositoryProjects", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsSecretScanningAlerts to json stream.
func (o OptAppPermissionsSecretScanningAlerts) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsSecretScanningAlerts from json iterator.
func (o *OptAppPermissionsSecretScanningAlerts) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsSecretScanningAlerts to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsSecretScanningAlerts(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsSecretScanningAlerts", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsSecrets to json stream.
func (o OptAppPermissionsSecrets) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsSecrets from json iterator.
func (o *OptAppPermissionsSecrets) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsSecrets to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsSecrets(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsSecrets", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsSecurityEvents to json stream.
func (o OptAppPermissionsSecurityEvents) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsSecurityEvents from json iterator.
func (o *OptAppPermissionsSecurityEvents) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsSecurityEvents to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsSecurityEvents(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsSecurityEvents", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsSingleFile to json stream.
func (o OptAppPermissionsSingleFile) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsSingleFile from json iterator.
func (o *OptAppPermissionsSingleFile) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsSingleFile to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsSingleFile(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsSingleFile", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsStatuses to json stream.
func (o OptAppPermissionsStatuses) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsStatuses from json iterator.
func (o *OptAppPermissionsStatuses) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsStatuses to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsStatuses(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsStatuses", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsTeamDiscussions to json stream.
func (o OptAppPermissionsTeamDiscussions) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsTeamDiscussions from json iterator.
func (o *OptAppPermissionsTeamDiscussions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsTeamDiscussions to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsTeamDiscussions(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsTeamDiscussions", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsVulnerabilityAlerts to json stream.
func (o OptAppPermissionsVulnerabilityAlerts) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsVulnerabilityAlerts from json iterator.
func (o *OptAppPermissionsVulnerabilityAlerts) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsVulnerabilityAlerts to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsVulnerabilityAlerts(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsVulnerabilityAlerts", d.Next())
	}
}

// WriteJSON writes json value of AppPermissionsWorkflows to json stream.
func (o OptAppPermissionsWorkflows) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsWorkflows from json iterator.
func (o *OptAppPermissionsWorkflows) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAppPermissionsWorkflows to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AppPermissionsWorkflows(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAppPermissionsWorkflows", d.Next())
	}
}

// WriteJSON writes json value of AuditLogEventActorLocation to json stream.
func (o OptAuditLogEventActorLocation) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of AuditLogEventActorLocation from json iterator.
func (o *OptAuditLogEventActorLocation) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAuditLogEventActorLocation to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAuditLogEventActorLocation", d.Next())
	}
}

// WriteJSON writes json value of AuthenticationTokenRepositorySelection to json stream.
func (o OptAuthenticationTokenRepositorySelection) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AuthenticationTokenRepositorySelection from json iterator.
func (o *OptAuthenticationTokenRepositorySelection) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAuthenticationTokenRepositorySelection to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AuthenticationTokenRepositorySelection(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAuthenticationTokenRepositorySelection", d.Next())
	}
}

// WriteJSON writes json value of AuthorAssociation to json stream.
func (o OptAuthorAssociation) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of AuthorAssociation from json iterator.
func (o *OptAuthorAssociation) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAuthorAssociation to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = AuthorAssociation(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAuthorAssociation", d.Next())
	}
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(e *json.Encoder) {
	e.Bool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBool to nil`)
	}
	switch d.Next() {
	case json.Bool:
		o.Set = true
		v, err := d.Bool()
		if err != nil {
			return err
		}
		o.Value = bool(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBool", d.Next())
	}
}

// WriteJSON writes json value of BranchProtection to json stream.
func (o OptBranchProtection) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BranchProtection from json iterator.
func (o *OptBranchProtection) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBranchProtection to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBranchProtection", d.Next())
	}
}

// WriteJSON writes json value of BranchProtectionAllowDeletions to json stream.
func (o OptBranchProtectionAllowDeletions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BranchProtectionAllowDeletions from json iterator.
func (o *OptBranchProtectionAllowDeletions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBranchProtectionAllowDeletions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBranchProtectionAllowDeletions", d.Next())
	}
}

// WriteJSON writes json value of BranchProtectionAllowForcePushes to json stream.
func (o OptBranchProtectionAllowForcePushes) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BranchProtectionAllowForcePushes from json iterator.
func (o *OptBranchProtectionAllowForcePushes) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBranchProtectionAllowForcePushes to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBranchProtectionAllowForcePushes", d.Next())
	}
}

// WriteJSON writes json value of BranchProtectionRequiredConversationResolution to json stream.
func (o OptBranchProtectionRequiredConversationResolution) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BranchProtectionRequiredConversationResolution from json iterator.
func (o *OptBranchProtectionRequiredConversationResolution) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBranchProtectionRequiredConversationResolution to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBranchProtectionRequiredConversationResolution", d.Next())
	}
}

// WriteJSON writes json value of BranchProtectionRequiredLinearHistory to json stream.
func (o OptBranchProtectionRequiredLinearHistory) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BranchProtectionRequiredLinearHistory from json iterator.
func (o *OptBranchProtectionRequiredLinearHistory) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBranchProtectionRequiredLinearHistory to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBranchProtectionRequiredLinearHistory", d.Next())
	}
}

// WriteJSON writes json value of BranchProtectionRequiredSignatures to json stream.
func (o OptBranchProtectionRequiredSignatures) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BranchProtectionRequiredSignatures from json iterator.
func (o *OptBranchProtectionRequiredSignatures) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBranchProtectionRequiredSignatures to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBranchProtectionRequiredSignatures", d.Next())
	}
}

// WriteJSON writes json value of BranchProtectionRequiredStatusChecks to json stream.
func (o OptBranchProtectionRequiredStatusChecks) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BranchProtectionRequiredStatusChecks from json iterator.
func (o *OptBranchProtectionRequiredStatusChecks) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBranchProtectionRequiredStatusChecks to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBranchProtectionRequiredStatusChecks", d.Next())
	}
}

// WriteJSON writes json value of BranchRestrictionPolicy to json stream.
func (o OptBranchRestrictionPolicy) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BranchRestrictionPolicy from json iterator.
func (o *OptBranchRestrictionPolicy) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBranchRestrictionPolicy to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBranchRestrictionPolicy", d.Next())
	}
}

// WriteJSON writes json value of BranchRestrictionPolicyAppsItemOwner to json stream.
func (o OptBranchRestrictionPolicyAppsItemOwner) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BranchRestrictionPolicyAppsItemOwner from json iterator.
func (o *OptBranchRestrictionPolicyAppsItemOwner) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBranchRestrictionPolicyAppsItemOwner to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBranchRestrictionPolicyAppsItemOwner", d.Next())
	}
}

// WriteJSON writes json value of BranchRestrictionPolicyAppsItemPermissions to json stream.
func (o OptBranchRestrictionPolicyAppsItemPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of BranchRestrictionPolicyAppsItemPermissions from json iterator.
func (o *OptBranchRestrictionPolicyAppsItemPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBranchRestrictionPolicyAppsItemPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBranchRestrictionPolicyAppsItemPermissions", d.Next())
	}
}

// WriteJSON writes json value of CodeOfConduct to json stream.
func (o OptCodeOfConduct) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of CodeOfConduct from json iterator.
func (o *OptCodeOfConduct) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeOfConduct to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeOfConduct", d.Next())
	}
}

// WriteJSON writes json value of CodeOfConductSimple to json stream.
func (o OptCodeOfConductSimple) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of CodeOfConductSimple from json iterator.
func (o *OptCodeOfConductSimple) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeOfConductSimple to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeOfConductSimple", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAlertEnvironment to json stream.
func (o OptCodeScanningAlertEnvironment) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of CodeScanningAlertEnvironment from json iterator.
func (o *OptCodeScanningAlertEnvironment) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeScanningAlertEnvironment to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeScanningAlertEnvironment", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAlertInstanceMessage to json stream.
func (o OptCodeScanningAlertInstanceMessage) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of CodeScanningAlertInstanceMessage from json iterator.
func (o *OptCodeScanningAlertInstanceMessage) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeScanningAlertInstanceMessage to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeScanningAlertInstanceMessage", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAlertLocation to json stream.
func (o OptCodeScanningAlertLocation) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of CodeScanningAlertLocation from json iterator.
func (o *OptCodeScanningAlertLocation) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeScanningAlertLocation to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeScanningAlertLocation", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAlertState to json stream.
func (o OptCodeScanningAlertState) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CodeScanningAlertState from json iterator.
func (o *OptCodeScanningAlertState) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeScanningAlertState to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CodeScanningAlertState(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeScanningAlertState", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAnalysisAnalysisKey to json stream.
func (o OptCodeScanningAnalysisAnalysisKey) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of CodeScanningAnalysisAnalysisKey from json iterator.
func (o *OptCodeScanningAnalysisAnalysisKey) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeScanningAnalysisAnalysisKey to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeScanningAnalysisAnalysisKey", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAnalysisCategory to json stream.
func (o OptCodeScanningAnalysisCategory) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of CodeScanningAnalysisCategory from json iterator.
func (o *OptCodeScanningAnalysisCategory) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeScanningAnalysisCategory to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeScanningAnalysisCategory", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAnalysisSarifID to json stream.
func (o OptCodeScanningAnalysisSarifID) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of CodeScanningAnalysisSarifID from json iterator.
func (o *OptCodeScanningAnalysisSarifID) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeScanningAnalysisSarifID to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeScanningAnalysisSarifID", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAnalysisToolName to json stream.
func (o OptCodeScanningAnalysisToolName) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of CodeScanningAnalysisToolName from json iterator.
func (o *OptCodeScanningAnalysisToolName) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeScanningAnalysisToolName to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeScanningAnalysisToolName", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningRef to json stream.
func (o OptCodeScanningRef) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of CodeScanningRef from json iterator.
func (o *OptCodeScanningRef) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeScanningRef to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeScanningRef", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningSarifsStatusProcessingStatus to json stream.
func (o OptCodeScanningSarifsStatusProcessingStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CodeScanningSarifsStatusProcessingStatus from json iterator.
func (o *OptCodeScanningSarifsStatusProcessingStatus) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCodeScanningSarifsStatusProcessingStatus to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CodeScanningSarifsStatusProcessingStatus(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCodeScanningSarifsStatusProcessingStatus", d.Next())
	}
}

// WriteJSON writes json value of CollaboratorPermissions to json stream.
func (o OptCollaboratorPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of CollaboratorPermissions from json iterator.
func (o *OptCollaboratorPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCollaboratorPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCollaboratorPermissions", d.Next())
	}
}

// WriteJSON writes json value of CommitStats to json stream.
func (o OptCommitStats) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of CommitStats from json iterator.
func (o *OptCommitStats) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptCommitStats to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptCommitStats", d.Next())
	}
}

// WriteJSON writes json value of DeploymentReviewerType to json stream.
func (o OptDeploymentReviewerType) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of DeploymentReviewerType from json iterator.
func (o *OptDeploymentReviewerType) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptDeploymentReviewerType to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = DeploymentReviewerType(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptDeploymentReviewerType", d.Next())
	}
}

// WriteJSON writes json value of DeploymentSimple to json stream.
func (o OptDeploymentSimple) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of DeploymentSimple from json iterator.
func (o *OptDeploymentSimple) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptDeploymentSimple to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptDeploymentSimple", d.Next())
	}
}

// WriteJSON writes json value of EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility to json stream.
func (o OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility from json iterator.
func (o *OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility", d.Next())
	}
}

// WriteJSON writes json value of EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility to json stream.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility from json iterator.
func (o *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility", d.Next())
	}
}

// WriteJSON writes json value of FileCommitCommitAuthor to json stream.
func (o OptFileCommitCommitAuthor) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of FileCommitCommitAuthor from json iterator.
func (o *OptFileCommitCommitAuthor) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFileCommitCommitAuthor to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFileCommitCommitAuthor", d.Next())
	}
}

// WriteJSON writes json value of FileCommitCommitCommitter to json stream.
func (o OptFileCommitCommitCommitter) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of FileCommitCommitCommitter from json iterator.
func (o *OptFileCommitCommitCommitter) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFileCommitCommitCommitter to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFileCommitCommitCommitter", d.Next())
	}
}

// WriteJSON writes json value of FileCommitCommitTree to json stream.
func (o OptFileCommitCommitTree) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of FileCommitCommitTree from json iterator.
func (o *OptFileCommitCommitTree) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFileCommitCommitTree to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFileCommitCommitTree", d.Next())
	}
}

// WriteJSON writes json value of FileCommitCommitVerification to json stream.
func (o OptFileCommitCommitVerification) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of FileCommitCommitVerification from json iterator.
func (o *OptFileCommitCommitVerification) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFileCommitCommitVerification to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFileCommitCommitVerification", d.Next())
	}
}

// WriteJSON writes json value of FileCommitContentLinks to json stream.
func (o OptFileCommitContentLinks) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of FileCommitContentLinks from json iterator.
func (o *OptFileCommitContentLinks) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFileCommitContentLinks to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFileCommitContentLinks", d.Next())
	}
}

// WriteJSON writes json value of float64 to json stream.
func (o OptFloat64) WriteJSON(e *json.Encoder) {
	e.Float64(float64(o.Value))
}

// ReadJSON reads json value of float64 from json iterator.
func (o *OptFloat64) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFloat64 to nil`)
	}
	switch d.Next() {
	case json.Number:
		o.Set = true
		v, err := d.Float64()
		if err != nil {
			return err
		}
		o.Value = float64(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFloat64", d.Next())
	}
}

// WriteJSON writes json value of ForbiddenGistBlock to json stream.
func (o OptForbiddenGistBlock) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ForbiddenGistBlock from json iterator.
func (o *OptForbiddenGistBlock) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptForbiddenGistBlock to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptForbiddenGistBlock", d.Next())
	}
}

// WriteJSON writes json value of FullRepositoryPermissions to json stream.
func (o OptFullRepositoryPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of FullRepositoryPermissions from json iterator.
func (o *OptFullRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFullRepositoryPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFullRepositoryPermissions", d.Next())
	}
}

// WriteJSON writes json value of FullRepositorySecurityAndAnalysisAdvancedSecurity to json stream.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurity) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of FullRepositorySecurityAndAnalysisAdvancedSecurity from json iterator.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurity) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFullRepositorySecurityAndAnalysisAdvancedSecurity to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFullRepositorySecurityAndAnalysisAdvancedSecurity", d.Next())
	}
}

// WriteJSON writes json value of FullRepositorySecurityAndAnalysisAdvancedSecurityStatus to json stream.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of FullRepositorySecurityAndAnalysisAdvancedSecurityStatus from json iterator.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = FullRepositorySecurityAndAnalysisAdvancedSecurityStatus(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus", d.Next())
	}
}

// WriteJSON writes json value of FullRepositorySecurityAndAnalysisSecretScanning to json stream.
func (o OptFullRepositorySecurityAndAnalysisSecretScanning) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of FullRepositorySecurityAndAnalysisSecretScanning from json iterator.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanning) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFullRepositorySecurityAndAnalysisSecretScanning to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFullRepositorySecurityAndAnalysisSecretScanning", d.Next())
	}
}

// WriteJSON writes json value of FullRepositorySecurityAndAnalysisSecretScanningStatus to json stream.
func (o OptFullRepositorySecurityAndAnalysisSecretScanningStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of FullRepositorySecurityAndAnalysisSecretScanningStatus from json iterator.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanningStatus) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFullRepositorySecurityAndAnalysisSecretScanningStatus to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = FullRepositorySecurityAndAnalysisSecretScanningStatus(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFullRepositorySecurityAndAnalysisSecretScanningStatus", d.Next())
	}
}

// WriteJSON writes json value of GistHistoryChangeStatus to json stream.
func (o OptGistHistoryChangeStatus) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of GistHistoryChangeStatus from json iterator.
func (o *OptGistHistoryChangeStatus) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptGistHistoryChangeStatus to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptGistHistoryChangeStatus", d.Next())
	}
}

// WriteJSON writes json value of GitCreateCommitReqAuthor to json stream.
func (o OptGitCreateCommitReqAuthor) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of GitCreateCommitReqAuthor from json iterator.
func (o *OptGitCreateCommitReqAuthor) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptGitCreateCommitReqAuthor to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptGitCreateCommitReqAuthor", d.Next())
	}
}

// WriteJSON writes json value of GitCreateCommitReqCommitter to json stream.
func (o OptGitCreateCommitReqCommitter) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of GitCreateCommitReqCommitter from json iterator.
func (o *OptGitCreateCommitReqCommitter) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptGitCreateCommitReqCommitter to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptGitCreateCommitReqCommitter", d.Next())
	}
}

// WriteJSON writes json value of GitCreateTagReqTagger to json stream.
func (o OptGitCreateTagReqTagger) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of GitCreateTagReqTagger from json iterator.
func (o *OptGitCreateTagReqTagger) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptGitCreateTagReqTagger to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptGitCreateTagReqTagger", d.Next())
	}
}

// WriteJSON writes json value of GitCreateTreeReqTreeItemMode to json stream.
func (o OptGitCreateTreeReqTreeItemMode) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of GitCreateTreeReqTreeItemMode from json iterator.
func (o *OptGitCreateTreeReqTreeItemMode) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptGitCreateTreeReqTreeItemMode to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = GitCreateTreeReqTreeItemMode(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptGitCreateTreeReqTreeItemMode", d.Next())
	}
}

// WriteJSON writes json value of GitCreateTreeReqTreeItemType to json stream.
func (o OptGitCreateTreeReqTreeItemType) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of GitCreateTreeReqTreeItemType from json iterator.
func (o *OptGitCreateTreeReqTreeItemType) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptGitCreateTreeReqTreeItemType to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = GitCreateTreeReqTreeItemType(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptGitCreateTreeReqTreeItemType", d.Next())
	}
}

// WriteJSON writes json value of InstallationTokenRepositorySelection to json stream.
func (o OptInstallationTokenRepositorySelection) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of InstallationTokenRepositorySelection from json iterator.
func (o *OptInstallationTokenRepositorySelection) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInstallationTokenRepositorySelection to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = InstallationTokenRepositorySelection(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInstallationTokenRepositorySelection", d.Next())
	}
}

// WriteJSON writes json value of int to json stream.
func (o OptInt) WriteJSON(e *json.Encoder) {
	e.Int(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptInt) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInt to nil`)
	}
	switch d.Next() {
	case json.Number:
		o.Set = true
		v, err := d.Int()
		if err != nil {
			return err
		}
		o.Value = int(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInt", d.Next())
	}
}

// WriteJSON writes json value of int64 to json stream.
func (o OptInt64) WriteJSON(e *json.Encoder) {
	e.Int64(int64(o.Value))
}

// ReadJSON reads json value of int64 from json iterator.
func (o *OptInt64) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInt64 to nil`)
	}
	switch d.Next() {
	case json.Number:
		o.Set = true
		v, err := d.Int64()
		if err != nil {
			return err
		}
		o.Value = int64(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInt64", d.Next())
	}
}

// WriteJSON writes json value of InteractionExpiry to json stream.
func (o OptInteractionExpiry) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of InteractionExpiry from json iterator.
func (o *OptInteractionExpiry) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInteractionExpiry to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = InteractionExpiry(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInteractionExpiry", d.Next())
	}
}

// WriteJSON writes json value of IssueComment to json stream.
func (o OptIssueComment) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of IssueComment from json iterator.
func (o *OptIssueComment) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssueComment to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssueComment", d.Next())
	}
}

// WriteJSON writes json value of IssueEventDismissedReview to json stream.
func (o OptIssueEventDismissedReview) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of IssueEventDismissedReview from json iterator.
func (o *OptIssueEventDismissedReview) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssueEventDismissedReview to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssueEventDismissedReview", d.Next())
	}
}

// WriteJSON writes json value of IssueEventLabel to json stream.
func (o OptIssueEventLabel) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of IssueEventLabel from json iterator.
func (o *OptIssueEventLabel) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssueEventLabel to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssueEventLabel", d.Next())
	}
}

// WriteJSON writes json value of IssueEventMilestone to json stream.
func (o OptIssueEventMilestone) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of IssueEventMilestone from json iterator.
func (o *OptIssueEventMilestone) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssueEventMilestone to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssueEventMilestone", d.Next())
	}
}

// WriteJSON writes json value of IssueEventProjectCard to json stream.
func (o OptIssueEventProjectCard) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of IssueEventProjectCard from json iterator.
func (o *OptIssueEventProjectCard) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssueEventProjectCard to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssueEventProjectCard", d.Next())
	}
}

// WriteJSON writes json value of IssueEventRename to json stream.
func (o OptIssueEventRename) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of IssueEventRename from json iterator.
func (o *OptIssueEventRename) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssueEventRename to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssueEventRename", d.Next())
	}
}

// WriteJSON writes json value of IssueSearchResultItemPullRequest to json stream.
func (o OptIssueSearchResultItemPullRequest) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of IssueSearchResultItemPullRequest from json iterator.
func (o *OptIssueSearchResultItemPullRequest) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssueSearchResultItemPullRequest to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssueSearchResultItemPullRequest", d.Next())
	}
}

// WriteJSON writes json value of IssueSimple to json stream.
func (o OptIssueSimple) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of IssueSimple from json iterator.
func (o *OptIssueSimple) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssueSimple to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssueSimple", d.Next())
	}
}

// WriteJSON writes json value of IssueSimplePullRequest to json stream.
func (o OptIssueSimplePullRequest) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of IssueSimplePullRequest from json iterator.
func (o *OptIssueSimplePullRequest) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssueSimplePullRequest to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssueSimplePullRequest", d.Next())
	}
}

// WriteJSON writes json value of IssuesCreateMilestoneReqState to json stream.
func (o OptIssuesCreateMilestoneReqState) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of IssuesCreateMilestoneReqState from json iterator.
func (o *OptIssuesCreateMilestoneReqState) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssuesCreateMilestoneReqState to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = IssuesCreateMilestoneReqState(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssuesCreateMilestoneReqState", d.Next())
	}
}

// WriteJSON writes json value of IssuesLockReqLockReason to json stream.
func (o OptIssuesLockReqLockReason) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of IssuesLockReqLockReason from json iterator.
func (o *OptIssuesLockReqLockReason) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssuesLockReqLockReason to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = IssuesLockReqLockReason(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssuesLockReqLockReason", d.Next())
	}
}

// WriteJSON writes json value of IssuesUpdateMilestoneReqState to json stream.
func (o OptIssuesUpdateMilestoneReqState) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of IssuesUpdateMilestoneReqState from json iterator.
func (o *OptIssuesUpdateMilestoneReqState) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIssuesUpdateMilestoneReqState to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = IssuesUpdateMilestoneReqState(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIssuesUpdateMilestoneReqState", d.Next())
	}
}

// WriteJSON writes json value of LinkWithType to json stream.
func (o OptLinkWithType) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of LinkWithType from json iterator.
func (o *OptLinkWithType) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptLinkWithType to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptLinkWithType", d.Next())
	}
}

// WriteJSON writes json value of MarkdownRenderReqMode to json stream.
func (o OptMarkdownRenderReqMode) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of MarkdownRenderReqMode from json iterator.
func (o *OptMarkdownRenderReqMode) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptMarkdownRenderReqMode to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = MarkdownRenderReqMode(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptMarkdownRenderReqMode", d.Next())
	}
}

// WriteJSON writes json value of MarketplaceListingPlan to json stream.
func (o OptMarketplaceListingPlan) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of MarketplaceListingPlan from json iterator.
func (o *OptMarketplaceListingPlan) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptMarketplaceListingPlan to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptMarketplaceListingPlan", d.Next())
	}
}

// WriteJSON writes json value of MergedUpstreamMergeType to json stream.
func (o OptMergedUpstreamMergeType) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of MergedUpstreamMergeType from json iterator.
func (o *OptMergedUpstreamMergeType) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptMergedUpstreamMergeType to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = MergedUpstreamMergeType(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptMergedUpstreamMergeType", d.Next())
	}
}

// WriteJSON writes json value of MigrationsStartImportReqVcs to json stream.
func (o OptMigrationsStartImportReqVcs) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of MigrationsStartImportReqVcs from json iterator.
func (o *OptMigrationsStartImportReqVcs) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptMigrationsStartImportReqVcs to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = MigrationsStartImportReqVcs(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptMigrationsStartImportReqVcs", d.Next())
	}
}

// WriteJSON writes json value of MinimalRepository to json stream.
func (o OptMinimalRepository) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of MinimalRepository from json iterator.
func (o *OptMinimalRepository) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptMinimalRepository to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptMinimalRepository", d.Next())
	}
}

// WriteJSON writes json value of MinimalRepositoryPermissions to json stream.
func (o OptMinimalRepositoryPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of MinimalRepositoryPermissions from json iterator.
func (o *OptMinimalRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptMinimalRepositoryPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptMinimalRepositoryPermissions", d.Next())
	}
}

// WriteJSON writes json value of bool to json stream.
func (o OptNilBool) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptNilBool) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilBool to nil`)
	}
	switch d.Next() {
	case json.Bool:
		o.Set = true
		o.Null = false
		v, err := d.Bool()
		if err != nil {
			return err
		}
		o.Value = bool(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v bool
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilBool", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAlertDismissedReason to json stream.
func (o OptNilCodeScanningAlertDismissedReason) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CodeScanningAlertDismissedReason from json iterator.
func (o *OptNilCodeScanningAlertDismissedReason) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilCodeScanningAlertDismissedReason to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CodeScanningAlertDismissedReason(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CodeScanningAlertDismissedReason
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilCodeScanningAlertDismissedReason", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAlertRuleSecuritySeverityLevel to json stream.
func (o OptNilCodeScanningAlertRuleSecuritySeverityLevel) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CodeScanningAlertRuleSecuritySeverityLevel from json iterator.
func (o *OptNilCodeScanningAlertRuleSecuritySeverityLevel) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilCodeScanningAlertRuleSecuritySeverityLevel to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CodeScanningAlertRuleSecuritySeverityLevel(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CodeScanningAlertRuleSecuritySeverityLevel
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilCodeScanningAlertRuleSecuritySeverityLevel", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAlertRuleSeverity to json stream.
func (o OptNilCodeScanningAlertRuleSeverity) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CodeScanningAlertRuleSeverity from json iterator.
func (o *OptNilCodeScanningAlertRuleSeverity) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilCodeScanningAlertRuleSeverity to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CodeScanningAlertRuleSeverity(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CodeScanningAlertRuleSeverity
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilCodeScanningAlertRuleSeverity", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAlertRuleSummarySeverity to json stream.
func (o OptNilCodeScanningAlertRuleSummarySeverity) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of CodeScanningAlertRuleSummarySeverity from json iterator.
func (o *OptNilCodeScanningAlertRuleSummarySeverity) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilCodeScanningAlertRuleSummarySeverity to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = CodeScanningAlertRuleSummarySeverity(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CodeScanningAlertRuleSummarySeverity
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilCodeScanningAlertRuleSummarySeverity", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAnalysisToolGUID to json stream.
func (o OptNilCodeScanningAnalysisToolGUID) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of CodeScanningAnalysisToolGUID from json iterator.
func (o *OptNilCodeScanningAnalysisToolGUID) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilCodeScanningAnalysisToolGUID to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CodeScanningAnalysisToolGUID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilCodeScanningAnalysisToolGUID", d.Next())
	}
}

// WriteJSON writes json value of CodeScanningAnalysisToolVersion to json stream.
func (o OptNilCodeScanningAnalysisToolVersion) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of CodeScanningAnalysisToolVersion from json iterator.
func (o *OptNilCodeScanningAnalysisToolVersion) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilCodeScanningAnalysisToolVersion to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v CodeScanningAnalysisToolVersion
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilCodeScanningAnalysisToolVersion", d.Next())
	}
}

// WriteJSON writes json value of DeploymentBranchPolicy to json stream.
func (o OptNilDeploymentBranchPolicy) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of DeploymentBranchPolicy from json iterator.
func (o *OptNilDeploymentBranchPolicy) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilDeploymentBranchPolicy to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v DeploymentBranchPolicy
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilDeploymentBranchPolicy", d.Next())
	}
}

// WriteJSON writes json value of FullRepositorySecurityAndAnalysis to json stream.
func (o OptNilFullRepositorySecurityAndAnalysis) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of FullRepositorySecurityAndAnalysis from json iterator.
func (o *OptNilFullRepositorySecurityAndAnalysis) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilFullRepositorySecurityAndAnalysis to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v FullRepositorySecurityAndAnalysis
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilFullRepositorySecurityAndAnalysis", d.Next())
	}
}

// WriteJSON writes json value of []GistHistory to json stream.
func (o OptNilGistHistoryArray) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of []GistHistory from json iterator.
func (o *OptNilGistHistoryArray) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilGistHistoryArray to nil`)
	}
	switch d.Next() {
	case json.Array:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v []GistHistory
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilGistHistoryArray", d.Next())
	}
}

// WriteJSON writes json value of GistSimpleForkOf to json stream.
func (o OptNilGistSimpleForkOf) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of GistSimpleForkOf from json iterator.
func (o *OptNilGistSimpleForkOf) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilGistSimpleForkOf to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v GistSimpleForkOf
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilGistSimpleForkOf", d.Next())
	}
}

// WriteJSON writes json value of []GistSimpleForksItem to json stream.
func (o OptNilGistSimpleForksItemArray) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of []GistSimpleForksItem from json iterator.
func (o *OptNilGistSimpleForksItemArray) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilGistSimpleForksItemArray to nil`)
	}
	switch d.Next() {
	case json.Array:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v []GistSimpleForksItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilGistSimpleForksItemArray", d.Next())
	}
}

// WriteJSON writes json value of int to json stream.
func (o OptNilInt) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptNilInt) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilInt to nil`)
	}
	switch d.Next() {
	case json.Number:
		o.Set = true
		o.Null = false
		v, err := d.Int()
		if err != nil {
			return err
		}
		o.Value = int(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v int
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilInt", d.Next())
	}
}

// WriteJSON writes json value of MarketplacePurchaseMarketplacePendingChange to json stream.
func (o OptNilMarketplacePurchaseMarketplacePendingChange) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of MarketplacePurchaseMarketplacePendingChange from json iterator.
func (o *OptNilMarketplacePurchaseMarketplacePendingChange) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilMarketplacePurchaseMarketplacePendingChange to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v MarketplacePurchaseMarketplacePendingChange
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilMarketplacePurchaseMarketplacePendingChange", d.Next())
	}
}

// WriteJSON writes json value of MinimalRepositoryLicense to json stream.
func (o OptNilMinimalRepositoryLicense) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of MinimalRepositoryLicense from json iterator.
func (o *OptNilMinimalRepositoryLicense) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilMinimalRepositoryLicense to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v MinimalRepositoryLicense
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilMinimalRepositoryLicense", d.Next())
	}
}

// WriteJSON writes json value of NullableIntegration to json stream.
func (o OptNilNullableIntegration) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableIntegration from json iterator.
func (o *OptNilNullableIntegration) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilNullableIntegration to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableIntegration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilNullableIntegration", d.Next())
	}
}

// WriteJSON writes json value of NullableMinimalRepository to json stream.
func (o OptNilNullableMinimalRepository) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableMinimalRepository from json iterator.
func (o *OptNilNullableMinimalRepository) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilNullableMinimalRepository to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableMinimalRepository
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilNullableMinimalRepository", d.Next())
	}
}

// WriteJSON writes json value of NullableMinimalRepositoryLicense to json stream.
func (o OptNilNullableMinimalRepositoryLicense) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableMinimalRepositoryLicense from json iterator.
func (o *OptNilNullableMinimalRepositoryLicense) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilNullableMinimalRepositoryLicense to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableMinimalRepositoryLicense
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilNullableMinimalRepositoryLicense", d.Next())
	}
}

// WriteJSON writes json value of NullableRepository to json stream.
func (o OptNilNullableRepository) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableRepository from json iterator.
func (o *OptNilNullableRepository) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilNullableRepository to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableRepository
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilNullableRepository", d.Next())
	}
}

// WriteJSON writes json value of NullableRepositoryTemplateRepository to json stream.
func (o OptNilNullableRepositoryTemplateRepository) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableRepositoryTemplateRepository from json iterator.
func (o *OptNilNullableRepositoryTemplateRepository) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilNullableRepositoryTemplateRepository to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableRepositoryTemplateRepository
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilNullableRepositoryTemplateRepository", d.Next())
	}
}

// WriteJSON writes json value of NullableScopedInstallation to json stream.
func (o OptNilNullableScopedInstallation) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableScopedInstallation from json iterator.
func (o *OptNilNullableScopedInstallation) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilNullableScopedInstallation to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableScopedInstallation
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilNullableScopedInstallation", d.Next())
	}
}

// WriteJSON writes json value of NullableSimpleUser to json stream.
func (o OptNilNullableSimpleUser) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableSimpleUser from json iterator.
func (o *OptNilNullableSimpleUser) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilNullableSimpleUser to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableSimpleUser
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilNullableSimpleUser", d.Next())
	}
}

// WriteJSON writes json value of NullableTeamSimple to json stream.
func (o OptNilNullableTeamSimple) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableTeamSimple from json iterator.
func (o *OptNilNullableTeamSimple) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilNullableTeamSimple to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v NullableTeamSimple
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilNullableTeamSimple", d.Next())
	}
}

// WriteJSON writes json value of PageProtectedDomainState to json stream.
func (o OptNilPageProtectedDomainState) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of PageProtectedDomainState from json iterator.
func (o *OptNilPageProtectedDomainState) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilPageProtectedDomainState to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = PageProtectedDomainState(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v PageProtectedDomainState
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilPageProtectedDomainState", d.Next())
	}
}

// WriteJSON writes json value of PagesHealthCheckAltDomain to json stream.
func (o OptNilPagesHealthCheckAltDomain) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PagesHealthCheckAltDomain from json iterator.
func (o *OptNilPagesHealthCheckAltDomain) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilPagesHealthCheckAltDomain to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v PagesHealthCheckAltDomain
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilPagesHealthCheckAltDomain", d.Next())
	}
}

// WriteJSON writes json value of PullRequestReviewCommentStartSide to json stream.
func (o OptNilPullRequestReviewCommentStartSide) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of PullRequestReviewCommentStartSide from json iterator.
func (o *OptNilPullRequestReviewCommentStartSide) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilPullRequestReviewCommentStartSide to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = PullRequestReviewCommentStartSide(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v PullRequestReviewCommentStartSide
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilPullRequestReviewCommentStartSide", d.Next())
	}
}

// WriteJSON writes json value of []ReposCreateOrUpdateEnvironmentReqReviewersItem to json stream.
func (o OptNilReposCreateOrUpdateEnvironmentReqReviewersItemArray) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of []ReposCreateOrUpdateEnvironmentReqReviewersItem from json iterator.
func (o *OptNilReposCreateOrUpdateEnvironmentReqReviewersItemArray) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilReposCreateOrUpdateEnvironmentReqReviewersItemArray to nil`)
	}
	switch d.Next() {
	case json.Array:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v []ReposCreateOrUpdateEnvironmentReqReviewersItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilReposCreateOrUpdateEnvironmentReqReviewersItemArray", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdateReqSecurityAndAnalysis to json stream.
func (o OptNilReposUpdateReqSecurityAndAnalysis) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposUpdateReqSecurityAndAnalysis from json iterator.
func (o *OptNilReposUpdateReqSecurityAndAnalysis) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilReposUpdateReqSecurityAndAnalysis to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v ReposUpdateReqSecurityAndAnalysis
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilReposUpdateReqSecurityAndAnalysis", d.Next())
	}
}

// WriteJSON writes json value of RepositoryTemplateRepository to json stream.
func (o OptNilRepositoryTemplateRepository) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of RepositoryTemplateRepository from json iterator.
func (o *OptNilRepositoryTemplateRepository) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilRepositoryTemplateRepository to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v RepositoryTemplateRepository
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilRepositoryTemplateRepository", d.Next())
	}
}

// WriteJSON writes json value of ReviewCommentStartSide to json stream.
func (o OptNilReviewCommentStartSide) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ReviewCommentStartSide from json iterator.
func (o *OptNilReviewCommentStartSide) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilReviewCommentStartSide to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ReviewCommentStartSide(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v ReviewCommentStartSide
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilReviewCommentStartSide", d.Next())
	}
}

// WriteJSON writes json value of SecretScanningAlertResolution to json stream.
func (o OptNilSecretScanningAlertResolution) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of SecretScanningAlertResolution from json iterator.
func (o *OptNilSecretScanningAlertResolution) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilSecretScanningAlertResolution to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = SecretScanningAlertResolution(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v SecretScanningAlertResolution
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilSecretScanningAlertResolution", d.Next())
	}
}

// WriteJSON writes json value of []SimpleUser to json stream.
func (o OptNilSimpleUserArray) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of []SimpleUser from json iterator.
func (o *OptNilSimpleUserArray) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilSimpleUserArray to nil`)
	}
	switch d.Next() {
	case json.Array:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v []SimpleUser
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilSimpleUserArray", d.Next())
	}
}

// WriteJSON writes json value of string to json stream.
func (o OptNilString) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptNilString) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilString to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilString", d.Next())
	}
}

// WriteJSON writes json value of []string to json stream.
func (o OptNilStringArray) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of []string from json iterator.
func (o *OptNilStringArray) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilStringArray to nil`)
	}
	switch d.Next() {
	case json.Array:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v []string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilStringArray", d.Next())
	}
}

// WriteJSON writes json value of []Team to json stream.
func (o OptNilTeamArray) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of []Team from json iterator.
func (o *OptNilTeamArray) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilTeamArray to nil`)
	}
	switch d.Next() {
	case json.Array:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v []Team
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilTeamArray", d.Next())
	}
}

// WriteJSON writes json value of []TeamSimple to json stream.
func (o OptNilTeamSimpleArray) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of []TeamSimple from json iterator.
func (o *OptNilTeamSimpleArray) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilTeamSimpleArray to nil`)
	}
	switch d.Next() {
	case json.Array:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v []TeamSimple
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilTeamSimpleArray", d.Next())
	}
}

// WriteJSON writes json value of time.Time to json stream.
func (o OptNilTime) WriteJSON(e *json.Encoder, format func(*json.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// ReadJSON reads json value of time.Time from json iterator.
func (o *OptNilTime) ReadJSON(d *json.Decoder, format func(*json.Decoder) (time.Time, error)) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilTime to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := format(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilTime", d.Next())
	}
}

// WriteJSON writes json value of []TopicSearchResultItemAliasesItem to json stream.
func (o OptNilTopicSearchResultItemAliasesItemArray) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of []TopicSearchResultItemAliasesItem from json iterator.
func (o *OptNilTopicSearchResultItemAliasesItemArray) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilTopicSearchResultItemAliasesItemArray to nil`)
	}
	switch d.Next() {
	case json.Array:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v []TopicSearchResultItemAliasesItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilTopicSearchResultItemAliasesItemArray", d.Next())
	}
}

// WriteJSON writes json value of []TopicSearchResultItemRelatedItem to json stream.
func (o OptNilTopicSearchResultItemRelatedItemArray) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
}

// ReadJSON reads json value of []TopicSearchResultItemRelatedItem from json iterator.
func (o *OptNilTopicSearchResultItemRelatedItemArray) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilTopicSearchResultItemRelatedItemArray to nil`)
	}
	switch d.Next() {
	case json.Array:
		o.Set = true
		o.Null = false
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v []TopicSearchResultItemRelatedItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilTopicSearchResultItemRelatedItemArray", d.Next())
	}
}

// WriteJSON writes json value of url.URL to json stream.
func (o OptNilURL) WriteJSON(e *json.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.WriteURI(e, o.Value)
}

// ReadJSON reads json value of url.URL from json iterator.
func (o *OptNilURL) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNilURL to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		o.Null = false
		v, err := json.ReadURI(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	case json.Nil:
		if err := d.Null(); err != nil {
			return err
		}
		var v url.URL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNilURL", d.Next())
	}
}

// WriteJSON writes json value of NullableMinimalRepositoryPermissions to json stream.
func (o OptNullableMinimalRepositoryPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableMinimalRepositoryPermissions from json iterator.
func (o *OptNullableMinimalRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNullableMinimalRepositoryPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNullableMinimalRepositoryPermissions", d.Next())
	}
}

// WriteJSON writes json value of NullableRepositoryPermissions to json stream.
func (o OptNullableRepositoryPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableRepositoryPermissions from json iterator.
func (o *OptNullableRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNullableRepositoryPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNullableRepositoryPermissions", d.Next())
	}
}

// WriteJSON writes json value of NullableRepositoryTemplateRepositoryOwner to json stream.
func (o OptNullableRepositoryTemplateRepositoryOwner) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableRepositoryTemplateRepositoryOwner from json iterator.
func (o *OptNullableRepositoryTemplateRepositoryOwner) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNullableRepositoryTemplateRepositoryOwner to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNullableRepositoryTemplateRepositoryOwner", d.Next())
	}
}

// WriteJSON writes json value of NullableRepositoryTemplateRepositoryPermissions to json stream.
func (o OptNullableRepositoryTemplateRepositoryPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of NullableRepositoryTemplateRepositoryPermissions from json iterator.
func (o *OptNullableRepositoryTemplateRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptNullableRepositoryTemplateRepositoryPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptNullableRepositoryTemplateRepositoryPermissions", d.Next())
	}
}

// WriteJSON writes json value of OrgMembershipPermissions to json stream.
func (o OptOrgMembershipPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of OrgMembershipPermissions from json iterator.
func (o *OptOrgMembershipPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptOrgMembershipPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptOrgMembershipPermissions", d.Next())
	}
}

// WriteJSON writes json value of OrganizationFullPlan to json stream.
func (o OptOrganizationFullPlan) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of OrganizationFullPlan from json iterator.
func (o *OptOrganizationFullPlan) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptOrganizationFullPlan to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptOrganizationFullPlan", d.Next())
	}
}

// WriteJSON writes json value of OrgsCreateInvitationReqRole to json stream.
func (o OptOrgsCreateInvitationReqRole) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of OrgsCreateInvitationReqRole from json iterator.
func (o *OptOrgsCreateInvitationReqRole) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptOrgsCreateInvitationReqRole to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = OrgsCreateInvitationReqRole(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptOrgsCreateInvitationReqRole", d.Next())
	}
}

// WriteJSON writes json value of OrgsSetMembershipForUserReqRole to json stream.
func (o OptOrgsSetMembershipForUserReqRole) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of OrgsSetMembershipForUserReqRole from json iterator.
func (o *OptOrgsSetMembershipForUserReqRole) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptOrgsSetMembershipForUserReqRole to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = OrgsSetMembershipForUserReqRole(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptOrgsSetMembershipForUserReqRole", d.Next())
	}
}

// WriteJSON writes json value of OrgsUpdateReqDefaultRepositoryPermission to json stream.
func (o OptOrgsUpdateReqDefaultRepositoryPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of OrgsUpdateReqDefaultRepositoryPermission from json iterator.
func (o *OptOrgsUpdateReqDefaultRepositoryPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptOrgsUpdateReqDefaultRepositoryPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = OrgsUpdateReqDefaultRepositoryPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptOrgsUpdateReqDefaultRepositoryPermission", d.Next())
	}
}

// WriteJSON writes json value of OrgsUpdateReqMembersAllowedRepositoryCreationType to json stream.
func (o OptOrgsUpdateReqMembersAllowedRepositoryCreationType) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of OrgsUpdateReqMembersAllowedRepositoryCreationType from json iterator.
func (o *OptOrgsUpdateReqMembersAllowedRepositoryCreationType) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptOrgsUpdateReqMembersAllowedRepositoryCreationType to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = OrgsUpdateReqMembersAllowedRepositoryCreationType(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptOrgsUpdateReqMembersAllowedRepositoryCreationType", d.Next())
	}
}

// WriteJSON writes json value of OrgsUpdateWebhookReqConfig to json stream.
func (o OptOrgsUpdateWebhookReqConfig) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of OrgsUpdateWebhookReqConfig from json iterator.
func (o *OptOrgsUpdateWebhookReqConfig) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptOrgsUpdateWebhookReqConfig to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptOrgsUpdateWebhookReqConfig", d.Next())
	}
}

// WriteJSON writes json value of PackageVersionMetadata to json stream.
func (o OptPackageVersionMetadata) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PackageVersionMetadata from json iterator.
func (o *OptPackageVersionMetadata) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPackageVersionMetadata to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPackageVersionMetadata", d.Next())
	}
}

// WriteJSON writes json value of PackageVersionMetadataContainer to json stream.
func (o OptPackageVersionMetadataContainer) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PackageVersionMetadataContainer from json iterator.
func (o *OptPackageVersionMetadataContainer) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPackageVersionMetadataContainer to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPackageVersionMetadataContainer", d.Next())
	}
}

// WriteJSON writes json value of PackageVersionMetadataDocker to json stream.
func (o OptPackageVersionMetadataDocker) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PackageVersionMetadataDocker from json iterator.
func (o *OptPackageVersionMetadataDocker) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPackageVersionMetadataDocker to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPackageVersionMetadataDocker", d.Next())
	}
}

// WriteJSON writes json value of PagesHTTPSCertificate to json stream.
func (o OptPagesHTTPSCertificate) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PagesHTTPSCertificate from json iterator.
func (o *OptPagesHTTPSCertificate) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPagesHTTPSCertificate to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPagesHTTPSCertificate", d.Next())
	}
}

// WriteJSON writes json value of PagesHealthCheckDomain to json stream.
func (o OptPagesHealthCheckDomain) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PagesHealthCheckDomain from json iterator.
func (o *OptPagesHealthCheckDomain) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPagesHealthCheckDomain to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPagesHealthCheckDomain", d.Next())
	}
}

// WriteJSON writes json value of PagesSourceHash to json stream.
func (o OptPagesSourceHash) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PagesSourceHash from json iterator.
func (o *OptPagesSourceHash) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPagesSourceHash to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPagesSourceHash", d.Next())
	}
}

// WriteJSON writes json value of PrivateUserPlan to json stream.
func (o OptPrivateUserPlan) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PrivateUserPlan from json iterator.
func (o *OptPrivateUserPlan) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPrivateUserPlan to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPrivateUserPlan", d.Next())
	}
}

// WriteJSON writes json value of ProjectOrganizationPermission to json stream.
func (o OptProjectOrganizationPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ProjectOrganizationPermission from json iterator.
func (o *OptProjectOrganizationPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProjectOrganizationPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ProjectOrganizationPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProjectOrganizationPermission", d.Next())
	}
}

// WriteJSON writes json value of ProjectsAddCollaboratorReqPermission to json stream.
func (o OptProjectsAddCollaboratorReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ProjectsAddCollaboratorReqPermission from json iterator.
func (o *OptProjectsAddCollaboratorReqPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProjectsAddCollaboratorReqPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ProjectsAddCollaboratorReqPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProjectsAddCollaboratorReqPermission", d.Next())
	}
}

// WriteJSON writes json value of ProjectsUpdateReqOrganizationPermission to json stream.
func (o OptProjectsUpdateReqOrganizationPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ProjectsUpdateReqOrganizationPermission from json iterator.
func (o *OptProjectsUpdateReqOrganizationPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProjectsUpdateReqOrganizationPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ProjectsUpdateReqOrganizationPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProjectsUpdateReqOrganizationPermission", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchAdminEnforced to json stream.
func (o OptProtectedBranchAdminEnforced) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchAdminEnforced from json iterator.
func (o *OptProtectedBranchAdminEnforced) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchAdminEnforced to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchAdminEnforced", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchAllowDeletions to json stream.
func (o OptProtectedBranchAllowDeletions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchAllowDeletions from json iterator.
func (o *OptProtectedBranchAllowDeletions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchAllowDeletions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchAllowDeletions", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchAllowForcePushes to json stream.
func (o OptProtectedBranchAllowForcePushes) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchAllowForcePushes from json iterator.
func (o *OptProtectedBranchAllowForcePushes) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchAllowForcePushes to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchAllowForcePushes", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchEnforceAdmins to json stream.
func (o OptProtectedBranchEnforceAdmins) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchEnforceAdmins from json iterator.
func (o *OptProtectedBranchEnforceAdmins) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchEnforceAdmins to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchEnforceAdmins", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchPullRequestReview to json stream.
func (o OptProtectedBranchPullRequestReview) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchPullRequestReview from json iterator.
func (o *OptProtectedBranchPullRequestReview) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchPullRequestReview to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchPullRequestReview", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchPullRequestReviewDismissalRestrictions to json stream.
func (o OptProtectedBranchPullRequestReviewDismissalRestrictions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchPullRequestReviewDismissalRestrictions from json iterator.
func (o *OptProtectedBranchPullRequestReviewDismissalRestrictions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchPullRequestReviewDismissalRestrictions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchPullRequestReviewDismissalRestrictions", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchRequiredConversationResolution to json stream.
func (o OptProtectedBranchRequiredConversationResolution) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchRequiredConversationResolution from json iterator.
func (o *OptProtectedBranchRequiredConversationResolution) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchRequiredConversationResolution to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchRequiredConversationResolution", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchRequiredLinearHistory to json stream.
func (o OptProtectedBranchRequiredLinearHistory) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchRequiredLinearHistory from json iterator.
func (o *OptProtectedBranchRequiredLinearHistory) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchRequiredLinearHistory to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchRequiredLinearHistory", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchRequiredPullRequestReviews to json stream.
func (o OptProtectedBranchRequiredPullRequestReviews) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchRequiredPullRequestReviews from json iterator.
func (o *OptProtectedBranchRequiredPullRequestReviews) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchRequiredPullRequestReviews to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchRequiredPullRequestReviews", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions to json stream.
func (o OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions from json iterator.
func (o *OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions", d.Next())
	}
}

// WriteJSON writes json value of ProtectedBranchRequiredSignatures to json stream.
func (o OptProtectedBranchRequiredSignatures) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ProtectedBranchRequiredSignatures from json iterator.
func (o *OptProtectedBranchRequiredSignatures) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProtectedBranchRequiredSignatures to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProtectedBranchRequiredSignatures", d.Next())
	}
}

// WriteJSON writes json value of PublicUser to json stream.
func (o OptPublicUser) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PublicUser from json iterator.
func (o *OptPublicUser) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPublicUser to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPublicUser", d.Next())
	}
}

// WriteJSON writes json value of PublicUserPlan to json stream.
func (o OptPublicUserPlan) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PublicUserPlan from json iterator.
func (o *OptPublicUserPlan) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPublicUserPlan to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPublicUserPlan", d.Next())
	}
}

// WriteJSON writes json value of PullRequestBaseRepoPermissions to json stream.
func (o OptPullRequestBaseRepoPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PullRequestBaseRepoPermissions from json iterator.
func (o *OptPullRequestBaseRepoPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPullRequestBaseRepoPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPullRequestBaseRepoPermissions", d.Next())
	}
}

// WriteJSON writes json value of PullRequestHeadRepoPermissions to json stream.
func (o OptPullRequestHeadRepoPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of PullRequestHeadRepoPermissions from json iterator.
func (o *OptPullRequestHeadRepoPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPullRequestHeadRepoPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPullRequestHeadRepoPermissions", d.Next())
	}
}

// WriteJSON writes json value of PullRequestReviewCommentSide to json stream.
func (o OptPullRequestReviewCommentSide) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of PullRequestReviewCommentSide from json iterator.
func (o *OptPullRequestReviewCommentSide) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPullRequestReviewCommentSide to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = PullRequestReviewCommentSide(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPullRequestReviewCommentSide", d.Next())
	}
}

// WriteJSON writes json value of PullsCreateReviewCommentReqSide to json stream.
func (o OptPullsCreateReviewCommentReqSide) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of PullsCreateReviewCommentReqSide from json iterator.
func (o *OptPullsCreateReviewCommentReqSide) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPullsCreateReviewCommentReqSide to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = PullsCreateReviewCommentReqSide(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPullsCreateReviewCommentReqSide", d.Next())
	}
}

// WriteJSON writes json value of PullsCreateReviewCommentReqStartSide to json stream.
func (o OptPullsCreateReviewCommentReqStartSide) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of PullsCreateReviewCommentReqStartSide from json iterator.
func (o *OptPullsCreateReviewCommentReqStartSide) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPullsCreateReviewCommentReqStartSide to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = PullsCreateReviewCommentReqStartSide(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPullsCreateReviewCommentReqStartSide", d.Next())
	}
}

// WriteJSON writes json value of PullsCreateReviewReqEvent to json stream.
func (o OptPullsCreateReviewReqEvent) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of PullsCreateReviewReqEvent from json iterator.
func (o *OptPullsCreateReviewReqEvent) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPullsCreateReviewReqEvent to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = PullsCreateReviewReqEvent(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPullsCreateReviewReqEvent", d.Next())
	}
}

// WriteJSON writes json value of PullsMergeReqMergeMethod to json stream.
func (o OptPullsMergeReqMergeMethod) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of PullsMergeReqMergeMethod from json iterator.
func (o *OptPullsMergeReqMergeMethod) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPullsMergeReqMergeMethod to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = PullsMergeReqMergeMethod(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPullsMergeReqMergeMethod", d.Next())
	}
}

// WriteJSON writes json value of PullsUpdateReqState to json stream.
func (o OptPullsUpdateReqState) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of PullsUpdateReqState from json iterator.
func (o *OptPullsUpdateReqState) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPullsUpdateReqState to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = PullsUpdateReqState(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPullsUpdateReqState", d.Next())
	}
}

// WriteJSON writes json value of RateLimit to json stream.
func (o OptRateLimit) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of RateLimit from json iterator.
func (o *OptRateLimit) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptRateLimit to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptRateLimit", d.Next())
	}
}

// WriteJSON writes json value of ReactionRollup to json stream.
func (o OptReactionRollup) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReactionRollup from json iterator.
func (o *OptReactionRollup) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReactionRollup to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReactionRollup", d.Next())
	}
}

// WriteJSON writes json value of RepoSearchResultItemPermissions to json stream.
func (o OptRepoSearchResultItemPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of RepoSearchResultItemPermissions from json iterator.
func (o *OptRepoSearchResultItemPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptRepoSearchResultItemPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptRepoSearchResultItemPermissions", d.Next())
	}
}

// WriteJSON writes json value of ReposAddCollaboratorReqPermission to json stream.
func (o OptReposAddCollaboratorReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ReposAddCollaboratorReqPermission from json iterator.
func (o *OptReposAddCollaboratorReqPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposAddCollaboratorReqPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ReposAddCollaboratorReqPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposAddCollaboratorReqPermission", d.Next())
	}
}

// WriteJSON writes json value of ReposCreateDeploymentStatusReqEnvironment to json stream.
func (o OptReposCreateDeploymentStatusReqEnvironment) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ReposCreateDeploymentStatusReqEnvironment from json iterator.
func (o *OptReposCreateDeploymentStatusReqEnvironment) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposCreateDeploymentStatusReqEnvironment to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ReposCreateDeploymentStatusReqEnvironment(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposCreateDeploymentStatusReqEnvironment", d.Next())
	}
}

// WriteJSON writes json value of ReposCreateInOrgReqVisibility to json stream.
func (o OptReposCreateInOrgReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ReposCreateInOrgReqVisibility from json iterator.
func (o *OptReposCreateInOrgReqVisibility) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposCreateInOrgReqVisibility to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ReposCreateInOrgReqVisibility(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposCreateInOrgReqVisibility", d.Next())
	}
}

// WriteJSON writes json value of ReposCreateOrUpdateFileContentsReqAuthor to json stream.
func (o OptReposCreateOrUpdateFileContentsReqAuthor) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposCreateOrUpdateFileContentsReqAuthor from json iterator.
func (o *OptReposCreateOrUpdateFileContentsReqAuthor) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposCreateOrUpdateFileContentsReqAuthor to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposCreateOrUpdateFileContentsReqAuthor", d.Next())
	}
}

// WriteJSON writes json value of ReposCreateOrUpdateFileContentsReqCommitter to json stream.
func (o OptReposCreateOrUpdateFileContentsReqCommitter) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposCreateOrUpdateFileContentsReqCommitter from json iterator.
func (o *OptReposCreateOrUpdateFileContentsReqCommitter) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposCreateOrUpdateFileContentsReqCommitter to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposCreateOrUpdateFileContentsReqCommitter", d.Next())
	}
}

// WriteJSON writes json value of ReposCreatePagesSiteReqSourcePath to json stream.
func (o OptReposCreatePagesSiteReqSourcePath) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ReposCreatePagesSiteReqSourcePath from json iterator.
func (o *OptReposCreatePagesSiteReqSourcePath) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposCreatePagesSiteReqSourcePath to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ReposCreatePagesSiteReqSourcePath(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposCreatePagesSiteReqSourcePath", d.Next())
	}
}

// WriteJSON writes json value of ReposCreateWebhookReqConfig to json stream.
func (o OptReposCreateWebhookReqConfig) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposCreateWebhookReqConfig from json iterator.
func (o *OptReposCreateWebhookReqConfig) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposCreateWebhookReqConfig to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposCreateWebhookReqConfig", d.Next())
	}
}

// WriteJSON writes json value of ReposDeleteFileReqAuthor to json stream.
func (o OptReposDeleteFileReqAuthor) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposDeleteFileReqAuthor from json iterator.
func (o *OptReposDeleteFileReqAuthor) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposDeleteFileReqAuthor to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposDeleteFileReqAuthor", d.Next())
	}
}

// WriteJSON writes json value of ReposDeleteFileReqCommitter to json stream.
func (o OptReposDeleteFileReqCommitter) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposDeleteFileReqCommitter from json iterator.
func (o *OptReposDeleteFileReqCommitter) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposDeleteFileReqCommitter to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposDeleteFileReqCommitter", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions to json stream.
func (o OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions from json iterator.
func (o *OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdateInvitationReqPermissions to json stream.
func (o OptReposUpdateInvitationReqPermissions) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ReposUpdateInvitationReqPermissions from json iterator.
func (o *OptReposUpdateInvitationReqPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposUpdateInvitationReqPermissions to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ReposUpdateInvitationReqPermissions(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposUpdateInvitationReqPermissions", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions to json stream.
func (o OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions from json iterator.
func (o *OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdateReqSecurityAndAnalysisAdvancedSecurity to json stream.
func (o OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposUpdateReqSecurityAndAnalysisAdvancedSecurity from json iterator.
func (o *OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdateReqSecurityAndAnalysisSecretScanning to json stream.
func (o OptReposUpdateReqSecurityAndAnalysisSecretScanning) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposUpdateReqSecurityAndAnalysisSecretScanning from json iterator.
func (o *OptReposUpdateReqSecurityAndAnalysisSecretScanning) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposUpdateReqSecurityAndAnalysisSecretScanning to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposUpdateReqSecurityAndAnalysisSecretScanning", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdateReqVisibility to json stream.
func (o OptReposUpdateReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ReposUpdateReqVisibility from json iterator.
func (o *OptReposUpdateReqVisibility) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposUpdateReqVisibility to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ReposUpdateReqVisibility(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposUpdateReqVisibility", d.Next())
	}
}

// WriteJSON writes json value of ReposUpdateWebhookReqConfig to json stream.
func (o OptReposUpdateWebhookReqConfig) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ReposUpdateWebhookReqConfig from json iterator.
func (o *OptReposUpdateWebhookReqConfig) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReposUpdateWebhookReqConfig to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReposUpdateWebhookReqConfig", d.Next())
	}
}

// WriteJSON writes json value of Repository to json stream.
func (o OptRepository) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of Repository from json iterator.
func (o *OptRepository) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptRepository to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptRepository", d.Next())
	}
}

// WriteJSON writes json value of RepositoryPermissions to json stream.
func (o OptRepositoryPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of RepositoryPermissions from json iterator.
func (o *OptRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptRepositoryPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptRepositoryPermissions", d.Next())
	}
}

// WriteJSON writes json value of RepositoryTemplateRepositoryOwner to json stream.
func (o OptRepositoryTemplateRepositoryOwner) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of RepositoryTemplateRepositoryOwner from json iterator.
func (o *OptRepositoryTemplateRepositoryOwner) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptRepositoryTemplateRepositoryOwner to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptRepositoryTemplateRepositoryOwner", d.Next())
	}
}

// WriteJSON writes json value of RepositoryTemplateRepositoryPermissions to json stream.
func (o OptRepositoryTemplateRepositoryPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of RepositoryTemplateRepositoryPermissions from json iterator.
func (o *OptRepositoryTemplateRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptRepositoryTemplateRepositoryPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptRepositoryTemplateRepositoryPermissions", d.Next())
	}
}

// WriteJSON writes json value of ReviewCommentSide to json stream.
func (o OptReviewCommentSide) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of ReviewCommentSide from json iterator.
func (o *OptReviewCommentSide) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptReviewCommentSide to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = ReviewCommentSide(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptReviewCommentSide", d.Next())
	}
}

// WriteJSON writes json value of RunnerLabelsItemType to json stream.
func (o OptRunnerLabelsItemType) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of RunnerLabelsItemType from json iterator.
func (o *OptRunnerLabelsItemType) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptRunnerLabelsItemType to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = RunnerLabelsItemType(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptRunnerLabelsItemType", d.Next())
	}
}

// WriteJSON writes json value of ScimEnterpriseGroupMeta to json stream.
func (o OptScimEnterpriseGroupMeta) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ScimEnterpriseGroupMeta from json iterator.
func (o *OptScimEnterpriseGroupMeta) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptScimEnterpriseGroupMeta to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptScimEnterpriseGroupMeta", d.Next())
	}
}

// WriteJSON writes json value of ScimEnterpriseUserMeta to json stream.
func (o OptScimEnterpriseUserMeta) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ScimEnterpriseUserMeta from json iterator.
func (o *OptScimEnterpriseUserMeta) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptScimEnterpriseUserMeta to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptScimEnterpriseUserMeta", d.Next())
	}
}

// WriteJSON writes json value of ScimEnterpriseUserName to json stream.
func (o OptScimEnterpriseUserName) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ScimEnterpriseUserName from json iterator.
func (o *OptScimEnterpriseUserName) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptScimEnterpriseUserName to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptScimEnterpriseUserName", d.Next())
	}
}

// WriteJSON writes json value of ScimGroupListEnterpriseResourcesItemMeta to json stream.
func (o OptScimGroupListEnterpriseResourcesItemMeta) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ScimGroupListEnterpriseResourcesItemMeta from json iterator.
func (o *OptScimGroupListEnterpriseResourcesItemMeta) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptScimGroupListEnterpriseResourcesItemMeta to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptScimGroupListEnterpriseResourcesItemMeta", d.Next())
	}
}

// WriteJSON writes json value of ScimUserListEnterpriseResourcesItemMeta to json stream.
func (o OptScimUserListEnterpriseResourcesItemMeta) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ScimUserListEnterpriseResourcesItemMeta from json iterator.
func (o *OptScimUserListEnterpriseResourcesItemMeta) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptScimUserListEnterpriseResourcesItemMeta to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptScimUserListEnterpriseResourcesItemMeta", d.Next())
	}
}

// WriteJSON writes json value of ScimUserListEnterpriseResourcesItemName to json stream.
func (o OptScimUserListEnterpriseResourcesItemName) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of ScimUserListEnterpriseResourcesItemName from json iterator.
func (o *OptScimUserListEnterpriseResourcesItemName) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptScimUserListEnterpriseResourcesItemName to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptScimUserListEnterpriseResourcesItemName", d.Next())
	}
}

// WriteJSON writes json value of SecretScanningAlertState to json stream.
func (o OptSecretScanningAlertState) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of SecretScanningAlertState from json iterator.
func (o *OptSecretScanningAlertState) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptSecretScanningAlertState to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = SecretScanningAlertState(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptSecretScanningAlertState", d.Next())
	}
}

// WriteJSON writes json value of SelectedActionsURL to json stream.
func (o OptSelectedActionsURL) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of SelectedActionsURL from json iterator.
func (o *OptSelectedActionsURL) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptSelectedActionsURL to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptSelectedActionsURL", d.Next())
	}
}

// WriteJSON writes json value of SimpleUser to json stream.
func (o OptSimpleUser) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of SimpleUser from json iterator.
func (o *OptSimpleUser) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptSimpleUser to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptSimpleUser", d.Next())
	}
}

// WriteJSON writes json value of StatusCheckPolicy to json stream.
func (o OptStatusCheckPolicy) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of StatusCheckPolicy from json iterator.
func (o *OptStatusCheckPolicy) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptStatusCheckPolicy to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptStatusCheckPolicy", d.Next())
	}
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptString to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptString", d.Next())
	}
}

// WriteJSON writes json value of Team to json stream.
func (o OptTeam) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of Team from json iterator.
func (o *OptTeam) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeam to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeam", d.Next())
	}
}

// WriteJSON writes json value of TeamFullPrivacy to json stream.
func (o OptTeamFullPrivacy) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamFullPrivacy from json iterator.
func (o *OptTeamFullPrivacy) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamFullPrivacy to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamFullPrivacy(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamFullPrivacy", d.Next())
	}
}

// WriteJSON writes json value of TeamPermissions to json stream.
func (o OptTeamPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of TeamPermissions from json iterator.
func (o *OptTeamPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamPermissions", d.Next())
	}
}

// WriteJSON writes json value of TeamRepositoryPermissions to json stream.
func (o OptTeamRepositoryPermissions) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of TeamRepositoryPermissions from json iterator.
func (o *OptTeamRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamRepositoryPermissions to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamRepositoryPermissions", d.Next())
	}
}

// WriteJSON writes json value of TeamsAddOrUpdateMembershipForUserInOrgReqRole to json stream.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateMembershipForUserInOrgReqRole from json iterator.
func (o *OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsAddOrUpdateMembershipForUserInOrgReqRole to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsAddOrUpdateMembershipForUserInOrgReqRole(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsAddOrUpdateMembershipForUserInOrgReqRole", d.Next())
	}
}

// WriteJSON writes json value of TeamsAddOrUpdateMembershipForUserLegacyReqRole to json stream.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateMembershipForUserLegacyReqRole from json iterator.
func (o *OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsAddOrUpdateMembershipForUserLegacyReqRole to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsAddOrUpdateMembershipForUserLegacyReqRole(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsAddOrUpdateMembershipForUserLegacyReqRole", d.Next())
	}
}

// WriteJSON writes json value of TeamsAddOrUpdateProjectPermissionsInOrgReqPermission to json stream.
func (o OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateProjectPermissionsInOrgReqPermission from json iterator.
func (o *OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsAddOrUpdateProjectPermissionsInOrgReqPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission", d.Next())
	}
}

// WriteJSON writes json value of TeamsAddOrUpdateProjectPermissionsLegacyReqPermission to json stream.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateProjectPermissionsLegacyReqPermission from json iterator.
func (o *OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsAddOrUpdateProjectPermissionsLegacyReqPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission", d.Next())
	}
}

// WriteJSON writes json value of TeamsAddOrUpdateRepoPermissionsInOrgReqPermission to json stream.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateRepoPermissionsInOrgReqPermission from json iterator.
func (o *OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsAddOrUpdateRepoPermissionsInOrgReqPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission", d.Next())
	}
}

// WriteJSON writes json value of TeamsAddOrUpdateRepoPermissionsLegacyReqPermission to json stream.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateRepoPermissionsLegacyReqPermission from json iterator.
func (o *OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsAddOrUpdateRepoPermissionsLegacyReqPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission", d.Next())
	}
}

// WriteJSON writes json value of TeamsCreateReqPermission to json stream.
func (o OptTeamsCreateReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsCreateReqPermission from json iterator.
func (o *OptTeamsCreateReqPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsCreateReqPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsCreateReqPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsCreateReqPermission", d.Next())
	}
}

// WriteJSON writes json value of TeamsCreateReqPrivacy to json stream.
func (o OptTeamsCreateReqPrivacy) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsCreateReqPrivacy from json iterator.
func (o *OptTeamsCreateReqPrivacy) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsCreateReqPrivacy to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsCreateReqPrivacy(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsCreateReqPrivacy", d.Next())
	}
}

// WriteJSON writes json value of TeamsUpdateInOrgReqPermission to json stream.
func (o OptTeamsUpdateInOrgReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsUpdateInOrgReqPermission from json iterator.
func (o *OptTeamsUpdateInOrgReqPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsUpdateInOrgReqPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsUpdateInOrgReqPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsUpdateInOrgReqPermission", d.Next())
	}
}

// WriteJSON writes json value of TeamsUpdateInOrgReqPrivacy to json stream.
func (o OptTeamsUpdateInOrgReqPrivacy) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsUpdateInOrgReqPrivacy from json iterator.
func (o *OptTeamsUpdateInOrgReqPrivacy) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsUpdateInOrgReqPrivacy to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsUpdateInOrgReqPrivacy(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsUpdateInOrgReqPrivacy", d.Next())
	}
}

// WriteJSON writes json value of TeamsUpdateLegacyReqPermission to json stream.
func (o OptTeamsUpdateLegacyReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsUpdateLegacyReqPermission from json iterator.
func (o *OptTeamsUpdateLegacyReqPermission) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsUpdateLegacyReqPermission to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsUpdateLegacyReqPermission(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsUpdateLegacyReqPermission", d.Next())
	}
}

// WriteJSON writes json value of TeamsUpdateLegacyReqPrivacy to json stream.
func (o OptTeamsUpdateLegacyReqPrivacy) WriteJSON(e *json.Encoder) {
	e.Str(string(o.Value))
}

// ReadJSON reads json value of TeamsUpdateLegacyReqPrivacy from json iterator.
func (o *OptTeamsUpdateLegacyReqPrivacy) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTeamsUpdateLegacyReqPrivacy to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := d.Str()
		if err != nil {
			return err
		}
		o.Value = TeamsUpdateLegacyReqPrivacy(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTeamsUpdateLegacyReqPrivacy", d.Next())
	}
}

// WriteJSON writes json value of time.Time to json stream.
func (o OptTime) WriteJSON(e *json.Encoder, format func(*json.Encoder, time.Time)) {
	format(e, o.Value)
}

// ReadJSON reads json value of time.Time from json iterator.
func (o *OptTime) ReadJSON(d *json.Decoder, format func(*json.Decoder) (time.Time, error)) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTime to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := format(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTime", d.Next())
	}
}

// WriteJSON writes json value of TopicSearchResultItemAliasesItemTopicRelation to json stream.
func (o OptTopicSearchResultItemAliasesItemTopicRelation) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of TopicSearchResultItemAliasesItemTopicRelation from json iterator.
func (o *OptTopicSearchResultItemAliasesItemTopicRelation) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTopicSearchResultItemAliasesItemTopicRelation to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTopicSearchResultItemAliasesItemTopicRelation", d.Next())
	}
}

// WriteJSON writes json value of TopicSearchResultItemRelatedItemTopicRelation to json stream.
func (o OptTopicSearchResultItemRelatedItemTopicRelation) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of TopicSearchResultItemRelatedItemTopicRelation from json iterator.
func (o *OptTopicSearchResultItemRelatedItemTopicRelation) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptTopicSearchResultItemRelatedItemTopicRelation to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptTopicSearchResultItemRelatedItemTopicRelation", d.Next())
	}
}

// WriteJSON writes json value of url.URL to json stream.
func (o OptURL) WriteJSON(e *json.Encoder) {
	json.WriteURI(e, o.Value)
}

// ReadJSON reads json value of url.URL from json iterator.
func (o *OptURL) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptURL to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		v, err := json.ReadURI(d)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptURL", d.Next())
	}
}

// WriteJSON writes json value of Verification to json stream.
func (o OptVerification) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of Verification from json iterator.
func (o *OptVerification) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptVerification to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptVerification", d.Next())
	}
}

// WriteJSON writes json value of WaitTimer to json stream.
func (o OptWaitTimer) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of WaitTimer from json iterator.
func (o *OptWaitTimer) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptWaitTimer to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptWaitTimer", d.Next())
	}
}

// WriteJSON writes json value of WebhookConfigContentType to json stream.
func (o OptWebhookConfigContentType) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of WebhookConfigContentType from json iterator.
func (o *OptWebhookConfigContentType) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptWebhookConfigContentType to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptWebhookConfigContentType", d.Next())
	}
}

// WriteJSON writes json value of WebhookConfigSecret to json stream.
func (o OptWebhookConfigSecret) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of WebhookConfigSecret from json iterator.
func (o *OptWebhookConfigSecret) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptWebhookConfigSecret to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptWebhookConfigSecret", d.Next())
	}
}

// WriteJSON writes json value of WebhookConfigURL to json stream.
func (o OptWebhookConfigURL) WriteJSON(e *json.Encoder) {
}

// ReadJSON reads json value of WebhookConfigURL from json iterator.
func (o *OptWebhookConfigURL) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptWebhookConfigURL to nil`)
	}
	switch d.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptWebhookConfigURL", d.Next())
	}
}

// WriteJSON writes json value of WorkflowRunUsageBillableMACOS to json stream.
func (o OptWorkflowRunUsageBillableMACOS) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of WorkflowRunUsageBillableMACOS from json iterator.
func (o *OptWorkflowRunUsageBillableMACOS) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptWorkflowRunUsageBillableMACOS to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptWorkflowRunUsageBillableMACOS", d.Next())
	}
}

// WriteJSON writes json value of WorkflowRunUsageBillableUBUNTU to json stream.
func (o OptWorkflowRunUsageBillableUBUNTU) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of WorkflowRunUsageBillableUBUNTU from json iterator.
func (o *OptWorkflowRunUsageBillableUBUNTU) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptWorkflowRunUsageBillableUBUNTU to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptWorkflowRunUsageBillableUBUNTU", d.Next())
	}
}

// WriteJSON writes json value of WorkflowRunUsageBillableWINDOWS to json stream.
func (o OptWorkflowRunUsageBillableWINDOWS) WriteJSON(e *json.Encoder) {
	o.Value.WriteJSON(e)
}

// ReadJSON reads json value of WorkflowRunUsageBillableWINDOWS from json iterator.
func (o *OptWorkflowRunUsageBillableWINDOWS) ReadJSON(d *json.Decoder) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptWorkflowRunUsageBillableWINDOWS to nil`)
	}
	switch d.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(d); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptWorkflowRunUsageBillableWINDOWS", d.Next())
	}
}

// WriteJSON implements json.Marshaler.
func (s OrgHook) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("ping_url")
	json.WriteURI(e, s.PingURL)
	if s.DeliveriesURL.Set {
		more.More()
		e.ObjField("deliveries_url")
		s.DeliveriesURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("events")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Events {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("active")
	e.Bool(s.Active)
	more.More()
	e.ObjField("config")
	s.Config.WriteJSON(e)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	e.ObjEnd()
}

// ReadJSON reads OrgHook from json stream.
func (s *OrgHook) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgHook to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "ping_url":
			v, err := json.ReadURI(d)
			s.PingURL = v
			if err != nil {
				return err
			}
		case "deliveries_url":
			s.DeliveriesURL.Reset()
			if err := s.DeliveriesURL.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "events":
			s.Events = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Events = append(s.Events, elem)
				return nil
			}); err != nil {
				return err
			}
		case "active":
			v, err := d.Bool()
			s.Active = bool(v)
			if err != nil {
				return err
			}
		case "config":
			if err := s.Config.ReadJSON(d); err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgHookConfig) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.InsecureSsl.Set {
		more.More()
		e.ObjField("insecure_ssl")
		s.InsecureSsl.WriteJSON(e)
	}
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrgHookConfig from json stream.
func (s *OrgHookConfig) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgHookConfig to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "insecure_ssl":
			s.InsecureSsl.Reset()
			if err := s.InsecureSsl.ReadJSON(d); err != nil {
				return err
			}
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgMembership) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("role")
	s.Role.WriteJSON(e)
	more.More()
	e.ObjField("organization_url")
	json.WriteURI(e, s.OrganizationURL)
	more.More()
	e.ObjField("organization")
	s.Organization.WriteJSON(e)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrgMembership from json stream.
func (s *OrgMembership) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgMembership to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "role":
			if err := s.Role.ReadJSON(d); err != nil {
				return err
			}
		case "organization_url":
			v, err := json.ReadURI(d)
			s.OrganizationURL = v
			if err != nil {
				return err
			}
		case "organization":
			if err := s.Organization.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgMembershipPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("can_create_repository")
	e.Bool(s.CanCreateRepository)
	e.ObjEnd()
}

// ReadJSON reads OrgMembershipPermissions from json stream.
func (s *OrgMembershipPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgMembershipPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "can_create_repository":
			v, err := d.Bool()
			s.CanCreateRepository = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgMembershipRole) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgMembershipRole from json reader.
func (s *OrgMembershipRole) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgMembershipRole to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgMembershipRole(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrgMembershipState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgMembershipState from json reader.
func (s *OrgMembershipState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgMembershipState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgMembershipState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrganizationActionsSecret) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("visibility")
	s.Visibility.WriteJSON(e)
	if s.SelectedRepositoriesURL.Set {
		more.More()
		e.ObjField("selected_repositories_url")
		s.SelectedRepositoriesURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrganizationActionsSecret from json stream.
func (s *OrganizationActionsSecret) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrganizationActionsSecret to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "visibility":
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "selected_repositories_url":
			s.SelectedRepositoriesURL.Reset()
			if err := s.SelectedRepositoriesURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrganizationActionsSecretVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrganizationActionsSecretVisibility from json reader.
func (s *OrganizationActionsSecretVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrganizationActionsSecretVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrganizationActionsSecretVisibility(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrganizationFull) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("hooks_url")
	e.Str(s.HooksURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("members_url")
	e.Str(s.MembersURL)
	more.More()
	e.ObjField("public_members_url")
	e.Str(s.PublicMembersURL)
	more.More()
	e.ObjField("avatar_url")
	e.Str(s.AvatarURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Company.Set {
		more.More()
		e.ObjField("company")
		s.Company.WriteJSON(e)
	}
	if s.Blog.Set {
		more.More()
		e.ObjField("blog")
		s.Blog.WriteJSON(e)
	}
	if s.Location.Set {
		more.More()
		e.ObjField("location")
		s.Location.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.TwitterUsername.Set {
		more.More()
		e.ObjField("twitter_username")
		s.TwitterUsername.WriteJSON(e)
	}
	if s.IsVerified.Set {
		more.More()
		e.ObjField("is_verified")
		s.IsVerified.WriteJSON(e)
	}
	more.More()
	e.ObjField("has_organization_projects")
	e.Bool(s.HasOrganizationProjects)
	more.More()
	e.ObjField("has_repository_projects")
	e.Bool(s.HasRepositoryProjects)
	more.More()
	e.ObjField("public_repos")
	e.Int(s.PublicRepos)
	more.More()
	e.ObjField("public_gists")
	e.Int(s.PublicGists)
	more.More()
	e.ObjField("followers")
	e.Int(s.Followers)
	more.More()
	e.ObjField("following")
	e.Int(s.Following)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	if s.TotalPrivateRepos.Set {
		more.More()
		e.ObjField("total_private_repos")
		s.TotalPrivateRepos.WriteJSON(e)
	}
	if s.OwnedPrivateRepos.Set {
		more.More()
		e.ObjField("owned_private_repos")
		s.OwnedPrivateRepos.WriteJSON(e)
	}
	if s.PrivateGists.Set {
		more.More()
		e.ObjField("private_gists")
		s.PrivateGists.WriteJSON(e)
	}
	if s.DiskUsage.Set {
		more.More()
		e.ObjField("disk_usage")
		s.DiskUsage.WriteJSON(e)
	}
	if s.Collaborators.Set {
		more.More()
		e.ObjField("collaborators")
		s.Collaborators.WriteJSON(e)
	}
	if s.BillingEmail.Set {
		more.More()
		e.ObjField("billing_email")
		s.BillingEmail.WriteJSON(e)
	}
	if s.Plan.Set {
		more.More()
		e.ObjField("plan")
		s.Plan.WriteJSON(e)
	}
	if s.DefaultRepositoryPermission.Set {
		more.More()
		e.ObjField("default_repository_permission")
		s.DefaultRepositoryPermission.WriteJSON(e)
	}
	if s.MembersCanCreateRepositories.Set {
		more.More()
		e.ObjField("members_can_create_repositories")
		s.MembersCanCreateRepositories.WriteJSON(e)
	}
	if s.TwoFactorRequirementEnabled.Set {
		more.More()
		e.ObjField("two_factor_requirement_enabled")
		s.TwoFactorRequirementEnabled.WriteJSON(e)
	}
	if s.MembersAllowedRepositoryCreationType.Set {
		more.More()
		e.ObjField("members_allowed_repository_creation_type")
		s.MembersAllowedRepositoryCreationType.WriteJSON(e)
	}
	if s.MembersCanCreatePublicRepositories.Set {
		more.More()
		e.ObjField("members_can_create_public_repositories")
		s.MembersCanCreatePublicRepositories.WriteJSON(e)
	}
	if s.MembersCanCreatePrivateRepositories.Set {
		more.More()
		e.ObjField("members_can_create_private_repositories")
		s.MembersCanCreatePrivateRepositories.WriteJSON(e)
	}
	if s.MembersCanCreateInternalRepositories.Set {
		more.More()
		e.ObjField("members_can_create_internal_repositories")
		s.MembersCanCreateInternalRepositories.WriteJSON(e)
	}
	if s.MembersCanCreatePages.Set {
		more.More()
		e.ObjField("members_can_create_pages")
		s.MembersCanCreatePages.WriteJSON(e)
	}
	if s.MembersCanCreatePublicPages.Set {
		more.More()
		e.ObjField("members_can_create_public_pages")
		s.MembersCanCreatePublicPages.WriteJSON(e)
	}
	if s.MembersCanCreatePrivatePages.Set {
		more.More()
		e.ObjField("members_can_create_private_pages")
		s.MembersCanCreatePrivatePages.WriteJSON(e)
	}
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	e.ObjEnd()
}

// ReadJSON reads OrganizationFull from json stream.
func (s *OrganizationFull) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrganizationFull to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "hooks_url":
			v, err := d.Str()
			s.HooksURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "members_url":
			v, err := d.Str()
			s.MembersURL = string(v)
			if err != nil {
				return err
			}
		case "public_members_url":
			v, err := d.Str()
			s.PublicMembersURL = string(v)
			if err != nil {
				return err
			}
		case "avatar_url":
			v, err := d.Str()
			s.AvatarURL = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "company":
			s.Company.Reset()
			if err := s.Company.ReadJSON(d); err != nil {
				return err
			}
		case "blog":
			s.Blog.Reset()
			if err := s.Blog.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "twitter_username":
			s.TwitterUsername.Reset()
			if err := s.TwitterUsername.ReadJSON(d); err != nil {
				return err
			}
		case "is_verified":
			s.IsVerified.Reset()
			if err := s.IsVerified.ReadJSON(d); err != nil {
				return err
			}
		case "has_organization_projects":
			v, err := d.Bool()
			s.HasOrganizationProjects = bool(v)
			if err != nil {
				return err
			}
		case "has_repository_projects":
			v, err := d.Bool()
			s.HasRepositoryProjects = bool(v)
			if err != nil {
				return err
			}
		case "public_repos":
			v, err := d.Int()
			s.PublicRepos = int(v)
			if err != nil {
				return err
			}
		case "public_gists":
			v, err := d.Int()
			s.PublicGists = int(v)
			if err != nil {
				return err
			}
		case "followers":
			v, err := d.Int()
			s.Followers = int(v)
			if err != nil {
				return err
			}
		case "following":
			v, err := d.Int()
			s.Following = int(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "total_private_repos":
			s.TotalPrivateRepos.Reset()
			if err := s.TotalPrivateRepos.ReadJSON(d); err != nil {
				return err
			}
		case "owned_private_repos":
			s.OwnedPrivateRepos.Reset()
			if err := s.OwnedPrivateRepos.ReadJSON(d); err != nil {
				return err
			}
		case "private_gists":
			s.PrivateGists.Reset()
			if err := s.PrivateGists.ReadJSON(d); err != nil {
				return err
			}
		case "disk_usage":
			s.DiskUsage.Reset()
			if err := s.DiskUsage.ReadJSON(d); err != nil {
				return err
			}
		case "collaborators":
			s.Collaborators.Reset()
			if err := s.Collaborators.ReadJSON(d); err != nil {
				return err
			}
		case "billing_email":
			s.BillingEmail.Reset()
			if err := s.BillingEmail.ReadJSON(d); err != nil {
				return err
			}
		case "plan":
			s.Plan.Reset()
			if err := s.Plan.ReadJSON(d); err != nil {
				return err
			}
		case "default_repository_permission":
			s.DefaultRepositoryPermission.Reset()
			if err := s.DefaultRepositoryPermission.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_repositories":
			s.MembersCanCreateRepositories.Reset()
			if err := s.MembersCanCreateRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "two_factor_requirement_enabled":
			s.TwoFactorRequirementEnabled.Reset()
			if err := s.TwoFactorRequirementEnabled.ReadJSON(d); err != nil {
				return err
			}
		case "members_allowed_repository_creation_type":
			s.MembersAllowedRepositoryCreationType.Reset()
			if err := s.MembersAllowedRepositoryCreationType.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_public_repositories":
			s.MembersCanCreatePublicRepositories.Reset()
			if err := s.MembersCanCreatePublicRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_private_repositories":
			s.MembersCanCreatePrivateRepositories.Reset()
			if err := s.MembersCanCreatePrivateRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_internal_repositories":
			s.MembersCanCreateInternalRepositories.Reset()
			if err := s.MembersCanCreateInternalRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_pages":
			s.MembersCanCreatePages.Reset()
			if err := s.MembersCanCreatePages.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_public_pages":
			s.MembersCanCreatePublicPages.Reset()
			if err := s.MembersCanCreatePublicPages.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_private_pages":
			s.MembersCanCreatePrivatePages.Reset()
			if err := s.MembersCanCreatePrivatePages.ReadJSON(d); err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrganizationFullPlan) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("space")
	e.Int(s.Space)
	more.More()
	e.ObjField("private_repos")
	e.Int(s.PrivateRepos)
	if s.FilledSeats.Set {
		more.More()
		e.ObjField("filled_seats")
		s.FilledSeats.WriteJSON(e)
	}
	if s.Seats.Set {
		more.More()
		e.ObjField("seats")
		s.Seats.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrganizationFullPlan from json stream.
func (s *OrganizationFullPlan) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrganizationFullPlan to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "space":
			v, err := d.Int()
			s.Space = int(v)
			if err != nil {
				return err
			}
		case "private_repos":
			v, err := d.Int()
			s.PrivateRepos = int(v)
			if err != nil {
				return err
			}
		case "filled_seats":
			s.FilledSeats.Reset()
			if err := s.FilledSeats.ReadJSON(d); err != nil {
				return err
			}
		case "seats":
			s.Seats.Reset()
			if err := s.Seats.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrganizationInvitation) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("login")
	s.Login.WriteJSON(e)
	more.More()
	e.ObjField("email")
	s.Email.WriteJSON(e)
	more.More()
	e.ObjField("role")
	e.Str(s.Role)
	more.More()
	e.ObjField("created_at")
	e.Str(s.CreatedAt)
	if s.FailedAt.Set {
		more.More()
		e.ObjField("failed_at")
		s.FailedAt.WriteJSON(e)
	}
	if s.FailedReason.Set {
		more.More()
		e.ObjField("failed_reason")
		s.FailedReason.WriteJSON(e)
	}
	more.More()
	e.ObjField("inviter")
	s.Inviter.WriteJSON(e)
	more.More()
	e.ObjField("team_count")
	e.Int(s.TeamCount)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("invitation_teams_url")
	e.Str(s.InvitationTeamsURL)
	e.ObjEnd()
}

// ReadJSON reads OrganizationInvitation from json stream.
func (s *OrganizationInvitation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrganizationInvitation to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "login":
			if err := s.Login.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "role":
			v, err := d.Str()
			s.Role = string(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := d.Str()
			s.CreatedAt = string(v)
			if err != nil {
				return err
			}
		case "failed_at":
			s.FailedAt.Reset()
			if err := s.FailedAt.ReadJSON(d); err != nil {
				return err
			}
		case "failed_reason":
			s.FailedReason.Reset()
			if err := s.FailedReason.ReadJSON(d); err != nil {
				return err
			}
		case "inviter":
			if err := s.Inviter.ReadJSON(d); err != nil {
				return err
			}
		case "team_count":
			v, err := d.Int()
			s.TeamCount = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "invitation_teams_url":
			v, err := d.Str()
			s.InvitationTeamsURL = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrganizationSecretScanningAlert) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Number.Set {
		more.More()
		e.ObjField("number")
		s.Number.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.LocationsURL.Set {
		more.More()
		e.ObjField("locations_url")
		s.LocationsURL.WriteJSON(e)
	}
	if s.State.Set {
		more.More()
		e.ObjField("state")
		s.State.WriteJSON(e)
	}
	if s.Resolution.Set {
		more.More()
		e.ObjField("resolution")
		s.Resolution.WriteJSON(e)
	}
	if s.ResolvedAt.Set {
		more.More()
		e.ObjField("resolved_at")
		s.ResolvedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.ResolvedBy.Set {
		more.More()
		e.ObjField("resolved_by")
		s.ResolvedBy.WriteJSON(e)
	}
	if s.SecretType.Set {
		more.More()
		e.ObjField("secret_type")
		s.SecretType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	if s.Repository.Set {
		more.More()
		e.ObjField("repository")
		s.Repository.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrganizationSecretScanningAlert from json stream.
func (s *OrganizationSecretScanningAlert) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrganizationSecretScanningAlert to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			s.Number.Reset()
			if err := s.Number.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "locations_url":
			s.LocationsURL.Reset()
			if err := s.LocationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "resolution":
			s.Resolution.Reset()
			if err := s.Resolution.ReadJSON(d); err != nil {
				return err
			}
		case "resolved_at":
			s.ResolvedAt.Reset()
			if err := s.ResolvedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "resolved_by":
			s.ResolvedBy.Reset()
			if err := s.ResolvedBy.ReadJSON(d); err != nil {
				return err
			}
		case "secret_type":
			s.SecretType.Reset()
			if err := s.SecretType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		case "repository":
			s.Repository.Reset()
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrganizationSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("hooks_url")
	e.Str(s.HooksURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("members_url")
	e.Str(s.MembersURL)
	more.More()
	e.ObjField("public_members_url")
	e.Str(s.PublicMembersURL)
	more.More()
	e.ObjField("avatar_url")
	e.Str(s.AvatarURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads OrganizationSimple from json stream.
func (s *OrganizationSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrganizationSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "hooks_url":
			v, err := d.Str()
			s.HooksURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "members_url":
			v, err := d.Str()
			s.MembersURL = string(v)
			if err != nil {
				return err
			}
		case "public_members_url":
			v, err := d.Str()
			s.PublicMembersURL = string(v)
			if err != nil {
				return err
			}
		case "avatar_url":
			v, err := d.Str()
			s.AvatarURL = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsBlockUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsBlockUserNoContent from json stream.
func (s *OrgsBlockUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsBlockUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsCancelInvitationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsCancelInvitationNoContent from json stream.
func (s *OrgsCancelInvitationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCancelInvitationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsCheckBlockedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsCheckBlockedUserNoContent from json stream.
func (s *OrgsCheckBlockedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCheckBlockedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsCheckMembershipForUserFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsCheckMembershipForUserFound from json stream.
func (s *OrgsCheckMembershipForUserFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCheckMembershipForUserFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsCheckMembershipForUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsCheckMembershipForUserNoContent from json stream.
func (s *OrgsCheckMembershipForUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCheckMembershipForUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsCheckMembershipForUserNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsCheckMembershipForUserNotFound from json stream.
func (s *OrgsCheckMembershipForUserNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCheckMembershipForUserNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsCheckPublicMembershipForUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsCheckPublicMembershipForUserNoContent from json stream.
func (s *OrgsCheckPublicMembershipForUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCheckPublicMembershipForUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsCheckPublicMembershipForUserNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsCheckPublicMembershipForUserNotFound from json stream.
func (s *OrgsCheckPublicMembershipForUserNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCheckPublicMembershipForUserNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsConvertMemberToOutsideCollaboratorAccepted) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsConvertMemberToOutsideCollaboratorAccepted from json stream.
func (s *OrgsConvertMemberToOutsideCollaboratorAccepted) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsConvertMemberToOutsideCollaboratorAccepted to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsConvertMemberToOutsideCollaboratorForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsConvertMemberToOutsideCollaboratorForbidden from json stream.
func (s *OrgsConvertMemberToOutsideCollaboratorForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsConvertMemberToOutsideCollaboratorForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsConvertMemberToOutsideCollaboratorNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsConvertMemberToOutsideCollaboratorNoContent from json stream.
func (s *OrgsConvertMemberToOutsideCollaboratorNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsConvertMemberToOutsideCollaboratorNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsCreateInvitationReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.InviteeID.Set {
		more.More()
		e.ObjField("invitee_id")
		s.InviteeID.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.Role.Set {
		more.More()
		e.ObjField("role")
		s.Role.WriteJSON(e)
	}
	if s.TeamIds != nil {
		more.More()
		e.ObjField("team_ids")
		more.Down()
		e.ArrStart()
		for _, elem := range s.TeamIds {
			more.More()
			e.Int(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads OrgsCreateInvitationReq from json stream.
func (s *OrgsCreateInvitationReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCreateInvitationReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "invitee_id":
			s.InviteeID.Reset()
			if err := s.InviteeID.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(d); err != nil {
				return err
			}
		case "team_ids":
			s.TeamIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.TeamIds = append(s.TeamIds, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsCreateInvitationReqRole) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsCreateInvitationReqRole from json reader.
func (s *OrgsCreateInvitationReqRole) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCreateInvitationReqRole to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsCreateInvitationReqRole(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrgsCreateWebhookReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("config")
	s.Config.WriteJSON(e)
	if s.Events != nil {
		more.More()
		e.ObjField("events")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Events {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Active.Set {
		more.More()
		e.ObjField("active")
		s.Active.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrgsCreateWebhookReq from json stream.
func (s *OrgsCreateWebhookReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCreateWebhookReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "config":
			if err := s.Config.ReadJSON(d); err != nil {
				return err
			}
		case "events":
			s.Events = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Events = append(s.Events, elem)
				return nil
			}); err != nil {
				return err
			}
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsCreateWebhookReqConfig) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	// Unsupported kind "alias".
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	if s.InsecureSsl != nil {
		more.More()
		e.ObjField("insecure_ssl")
		s.InsecureSsl.WriteJSON(e)
	}
	if s.Username.Set {
		more.More()
		e.ObjField("username")
		s.Username.WriteJSON(e)
	}
	if s.Password.Set {
		more.More()
		e.ObjField("password")
		s.Password.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrgsCreateWebhookReqConfig from json stream.
func (s *OrgsCreateWebhookReqConfig) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsCreateWebhookReqConfig to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			if err := fmt.Errorf(`decoding of "WebhookConfigURL" (alias) is not implemented`); err != nil {
				return err
			}
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		case "insecure_ssl":
			s.InsecureSsl = nil
			var elem WebhookConfigInsecureSsl
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.InsecureSsl = &elem
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(d); err != nil {
				return err
			}
		case "password":
			s.Password.Reset()
			if err := s.Password.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsDeleteWebhookNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsDeleteWebhookNoContent from json stream.
func (s *OrgsDeleteWebhookNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsDeleteWebhookNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsGetAuditLogInclude) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsGetAuditLogInclude from json reader.
func (s *OrgsGetAuditLogInclude) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsGetAuditLogInclude to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsGetAuditLogInclude(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrgsGetAuditLogOrder) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsGetAuditLogOrder from json reader.
func (s *OrgsGetAuditLogOrder) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsGetAuditLogOrder to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsGetAuditLogOrder(v)
	return nil
}

func (OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OrgsGetMembershipForUserApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (OrgsGetMembershipForUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (OrgsGetMembershipForUserApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (OrgsGetMembershipForUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (OrgsListBlockedUsersOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (OrgsListBlockedUsersOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (OrgsListFailedInvitationsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (OrgsListFailedInvitationsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (OrgsListForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (OrgsListForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OrgsListForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (OrgsListForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OrgsListForAuthenticatedUserOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (OrgsListForAuthenticatedUserOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (OrgsListInvitationTeamsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (OrgsListInvitationTeamsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s OrgsListMembersFilter) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsListMembersFilter from json reader.
func (s *OrgsListMembersFilter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsListMembersFilter to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsListMembersFilter(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrgsListMembersFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsListMembersFound from json stream.
func (s *OrgsListMembersFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsListMembersFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsListMembersRole) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsListMembersRole from json reader.
func (s *OrgsListMembersRole) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsListMembersRole to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsListMembersRole(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrgsListMembershipsForAuthenticatedUserState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsListMembershipsForAuthenticatedUserState from json reader.
func (s *OrgsListMembershipsForAuthenticatedUserState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsListMembershipsForAuthenticatedUserState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsListMembershipsForAuthenticatedUserState(v)
	return nil
}

func (OrgsListOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (OrgsListOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s OrgsListOutsideCollaboratorsFilter) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsListOutsideCollaboratorsFilter from json reader.
func (s *OrgsListOutsideCollaboratorsFilter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsListOutsideCollaboratorsFilter to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsListOutsideCollaboratorsFilter(v)
	return nil
}

func (OrgsListPendingInvitationsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (OrgsListPendingInvitationsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (OrgsListWebhooksOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (OrgsListWebhooksOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s OrgsPingWebhookNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsPingWebhookNoContent from json stream.
func (s *OrgsPingWebhookNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsPingWebhookNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsRemoveMemberNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsRemoveMemberNoContent from json stream.
func (s *OrgsRemoveMemberNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsRemoveMemberNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (OrgsRemoveMembershipForUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (OrgsRemoveMembershipForUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (OrgsRemoveMembershipForUserApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (OrgsRemoveMembershipForUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s OrgsRemoveMembershipForUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsRemoveMembershipForUserNoContent from json stream.
func (s *OrgsRemoveMembershipForUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsRemoveMembershipForUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsRemoveOutsideCollaboratorNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsRemoveOutsideCollaboratorNoContent from json stream.
func (s *OrgsRemoveOutsideCollaboratorNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsRemoveOutsideCollaboratorNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsRemoveOutsideCollaboratorUnprocessableEntity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrgsRemoveOutsideCollaboratorUnprocessableEntity from json stream.
func (s *OrgsRemoveOutsideCollaboratorUnprocessableEntity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsRemoveOutsideCollaboratorUnprocessableEntity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsRemovePublicMembershipForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsRemovePublicMembershipForAuthenticatedUserNoContent from json stream.
func (s *OrgsRemovePublicMembershipForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsRemovePublicMembershipForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsRemoveSamlSSOAuthorizationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsRemoveSamlSSOAuthorizationNoContent from json stream.
func (s *OrgsRemoveSamlSSOAuthorizationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsRemoveSamlSSOAuthorizationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsSetMembershipForUserReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Role.Set {
		more.More()
		e.ObjField("role")
		s.Role.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrgsSetMembershipForUserReq from json stream.
func (s *OrgsSetMembershipForUserReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsSetMembershipForUserReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsSetMembershipForUserReqRole) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsSetMembershipForUserReqRole from json reader.
func (s *OrgsSetMembershipForUserReqRole) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsSetMembershipForUserReqRole to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsSetMembershipForUserReqRole(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrgsSetPublicMembershipForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsSetPublicMembershipForAuthenticatedUserNoContent from json stream.
func (s *OrgsSetPublicMembershipForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsSetPublicMembershipForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsUnblockUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads OrgsUnblockUserNoContent from json stream.
func (s *OrgsUnblockUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsUnblockUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateMembershipForAuthenticatedUserReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads OrgsUpdateMembershipForAuthenticatedUserReq from json stream.
func (s *OrgsUpdateMembershipForAuthenticatedUserReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsUpdateMembershipForAuthenticatedUserReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateMembershipForAuthenticatedUserReqState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsUpdateMembershipForAuthenticatedUserReqState from json reader.
func (s *OrgsUpdateMembershipForAuthenticatedUserReqState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsUpdateMembershipForAuthenticatedUserReqState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsUpdateMembershipForAuthenticatedUserReqState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.BillingEmail.Set {
		more.More()
		e.ObjField("billing_email")
		s.BillingEmail.WriteJSON(e)
	}
	if s.Company.Set {
		more.More()
		e.ObjField("company")
		s.Company.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.TwitterUsername.Set {
		more.More()
		e.ObjField("twitter_username")
		s.TwitterUsername.WriteJSON(e)
	}
	if s.Location.Set {
		more.More()
		e.ObjField("location")
		s.Location.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.HasOrganizationProjects.Set {
		more.More()
		e.ObjField("has_organization_projects")
		s.HasOrganizationProjects.WriteJSON(e)
	}
	if s.HasRepositoryProjects.Set {
		more.More()
		e.ObjField("has_repository_projects")
		s.HasRepositoryProjects.WriteJSON(e)
	}
	if s.DefaultRepositoryPermission.Set {
		more.More()
		e.ObjField("default_repository_permission")
		s.DefaultRepositoryPermission.WriteJSON(e)
	}
	if s.MembersCanCreateRepositories.Set {
		more.More()
		e.ObjField("members_can_create_repositories")
		s.MembersCanCreateRepositories.WriteJSON(e)
	}
	if s.MembersCanCreateInternalRepositories.Set {
		more.More()
		e.ObjField("members_can_create_internal_repositories")
		s.MembersCanCreateInternalRepositories.WriteJSON(e)
	}
	if s.MembersCanCreatePrivateRepositories.Set {
		more.More()
		e.ObjField("members_can_create_private_repositories")
		s.MembersCanCreatePrivateRepositories.WriteJSON(e)
	}
	if s.MembersCanCreatePublicRepositories.Set {
		more.More()
		e.ObjField("members_can_create_public_repositories")
		s.MembersCanCreatePublicRepositories.WriteJSON(e)
	}
	if s.MembersAllowedRepositoryCreationType.Set {
		more.More()
		e.ObjField("members_allowed_repository_creation_type")
		s.MembersAllowedRepositoryCreationType.WriteJSON(e)
	}
	if s.MembersCanCreatePages.Set {
		more.More()
		e.ObjField("members_can_create_pages")
		s.MembersCanCreatePages.WriteJSON(e)
	}
	if s.MembersCanCreatePublicPages.Set {
		more.More()
		e.ObjField("members_can_create_public_pages")
		s.MembersCanCreatePublicPages.WriteJSON(e)
	}
	if s.MembersCanCreatePrivatePages.Set {
		more.More()
		e.ObjField("members_can_create_private_pages")
		s.MembersCanCreatePrivatePages.WriteJSON(e)
	}
	if s.Blog.Set {
		more.More()
		e.ObjField("blog")
		s.Blog.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrgsUpdateReq from json stream.
func (s *OrgsUpdateReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsUpdateReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "billing_email":
			s.BillingEmail.Reset()
			if err := s.BillingEmail.ReadJSON(d); err != nil {
				return err
			}
		case "company":
			s.Company.Reset()
			if err := s.Company.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "twitter_username":
			s.TwitterUsername.Reset()
			if err := s.TwitterUsername.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "has_organization_projects":
			s.HasOrganizationProjects.Reset()
			if err := s.HasOrganizationProjects.ReadJSON(d); err != nil {
				return err
			}
		case "has_repository_projects":
			s.HasRepositoryProjects.Reset()
			if err := s.HasRepositoryProjects.ReadJSON(d); err != nil {
				return err
			}
		case "default_repository_permission":
			s.DefaultRepositoryPermission.Reset()
			if err := s.DefaultRepositoryPermission.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_repositories":
			s.MembersCanCreateRepositories.Reset()
			if err := s.MembersCanCreateRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_internal_repositories":
			s.MembersCanCreateInternalRepositories.Reset()
			if err := s.MembersCanCreateInternalRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_private_repositories":
			s.MembersCanCreatePrivateRepositories.Reset()
			if err := s.MembersCanCreatePrivateRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_public_repositories":
			s.MembersCanCreatePublicRepositories.Reset()
			if err := s.MembersCanCreatePublicRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "members_allowed_repository_creation_type":
			s.MembersAllowedRepositoryCreationType.Reset()
			if err := s.MembersAllowedRepositoryCreationType.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_pages":
			s.MembersCanCreatePages.Reset()
			if err := s.MembersCanCreatePages.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_public_pages":
			s.MembersCanCreatePublicPages.Reset()
			if err := s.MembersCanCreatePublicPages.ReadJSON(d); err != nil {
				return err
			}
		case "members_can_create_private_pages":
			s.MembersCanCreatePrivatePages.Reset()
			if err := s.MembersCanCreatePrivatePages.ReadJSON(d); err != nil {
				return err
			}
		case "blog":
			s.Blog.Reset()
			if err := s.Blog.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateReqDefaultRepositoryPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsUpdateReqDefaultRepositoryPermission from json reader.
func (s *OrgsUpdateReqDefaultRepositoryPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsUpdateReqDefaultRepositoryPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsUpdateReqDefaultRepositoryPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateReqMembersAllowedRepositoryCreationType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads OrgsUpdateReqMembersAllowedRepositoryCreationType from json reader.
func (s *OrgsUpdateReqMembersAllowedRepositoryCreationType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsUpdateReqMembersAllowedRepositoryCreationType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = OrgsUpdateReqMembersAllowedRepositoryCreationType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateWebhookConfigForOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	if s.InsecureSsl != nil {
		more.More()
		e.ObjField("insecure_ssl")
		s.InsecureSsl.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrgsUpdateWebhookConfigForOrgReq from json stream.
func (s *OrgsUpdateWebhookConfigForOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsUpdateWebhookConfigForOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		case "insecure_ssl":
			s.InsecureSsl = nil
			var elem WebhookConfigInsecureSsl
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.InsecureSsl = &elem
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateWebhookReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Config.Set {
		more.More()
		e.ObjField("config")
		s.Config.WriteJSON(e)
	}
	if s.Events != nil {
		more.More()
		e.ObjField("events")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Events {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Active.Set {
		more.More()
		e.ObjField("active")
		s.Active.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrgsUpdateWebhookReq from json stream.
func (s *OrgsUpdateWebhookReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsUpdateWebhookReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "config":
			s.Config.Reset()
			if err := s.Config.ReadJSON(d); err != nil {
				return err
			}
		case "events":
			s.Events = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Events = append(s.Events, elem)
				return nil
			}); err != nil {
				return err
			}
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateWebhookReqConfig) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	// Unsupported kind "alias".
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	if s.InsecureSsl != nil {
		more.More()
		e.ObjField("insecure_ssl")
		s.InsecureSsl.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads OrgsUpdateWebhookReqConfig from json stream.
func (s *OrgsUpdateWebhookReqConfig) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrgsUpdateWebhookReqConfig to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			if err := fmt.Errorf(`decoding of "WebhookConfigURL" (alias) is not implemented`); err != nil {
				return err
			}
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		case "insecure_ssl":
			s.InsecureSsl = nil
			var elem WebhookConfigInsecureSsl
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.InsecureSsl = &elem
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Package) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("package_type")
	s.PackageType.WriteJSON(e)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("html_url")
	e.Str(s.HTMLURL)
	more.More()
	e.ObjField("version_count")
	e.Int(s.VersionCount)
	more.More()
	e.ObjField("visibility")
	s.Visibility.WriteJSON(e)
	if s.Owner.Set {
		more.More()
		e.ObjField("owner")
		s.Owner.WriteJSON(e)
	}
	if s.Repository.Set {
		more.More()
		e.ObjField("repository")
		s.Repository.WriteJSON(e)
	}
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	e.ObjEnd()
}

// ReadJSON reads Package from json stream.
func (s *Package) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Package to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "package_type":
			if err := s.PackageType.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := d.Str()
			s.HTMLURL = string(v)
			if err != nil {
				return err
			}
		case "version_count":
			v, err := d.Int()
			s.VersionCount = int(v)
			if err != nil {
				return err
			}
		case "visibility":
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "repository":
			s.Repository.Reset()
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagePackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagePackageType from json reader.
func (s *PackagePackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagePackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagePackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackageVersion) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("package_html_url")
	e.Str(s.PackageHTMLURL)
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.License.Set {
		more.More()
		e.ObjField("license")
		s.License.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	if s.DeletedAt.Set {
		more.More()
		e.ObjField("deleted_at")
		s.DeletedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.Metadata.Set {
		more.More()
		e.ObjField("metadata")
		s.Metadata.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PackageVersion from json stream.
func (s *PackageVersion) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackageVersion to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "package_html_url":
			v, err := d.Str()
			s.PackageHTMLURL = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "license":
			s.License.Reset()
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "deleted_at":
			s.DeletedAt.Reset()
			if err := s.DeletedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackageVersionMetadata) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("package_type")
	s.PackageType.WriteJSON(e)
	if s.Container.Set {
		more.More()
		e.ObjField("container")
		s.Container.WriteJSON(e)
	}
	if s.Docker.Set {
		more.More()
		e.ObjField("docker")
		s.Docker.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PackageVersionMetadata from json stream.
func (s *PackageVersionMetadata) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackageVersionMetadata to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "package_type":
			if err := s.PackageType.ReadJSON(d); err != nil {
				return err
			}
		case "container":
			s.Container.Reset()
			if err := s.Container.ReadJSON(d); err != nil {
				return err
			}
		case "docker":
			s.Docker.Reset()
			if err := s.Docker.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackageVersionMetadataContainer) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("tags")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Tags {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads PackageVersionMetadataContainer from json stream.
func (s *PackageVersionMetadataContainer) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackageVersionMetadataContainer to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "tags":
			s.Tags = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Tags = append(s.Tags, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackageVersionMetadataDocker) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Tag != nil {
		more.More()
		e.ObjField("tag")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Tag {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads PackageVersionMetadataDocker from json stream.
func (s *PackageVersionMetadataDocker) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackageVersionMetadataDocker to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "tag":
			s.Tag = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Tag = append(s.Tag, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackageVersionMetadataPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackageVersionMetadataPackageType from json reader.
func (s *PackageVersionMetadataPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackageVersionMetadataPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackageVersionMetadataPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackageVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackageVisibility from json reader.
func (s *PackageVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackageVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackageVisibility(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesBillingUsage) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_gigabytes_bandwidth_used")
	e.Int(s.TotalGigabytesBandwidthUsed)
	more.More()
	e.ObjField("total_paid_gigabytes_bandwidth_used")
	e.Int(s.TotalPaidGigabytesBandwidthUsed)
	more.More()
	e.ObjField("included_gigabytes_bandwidth")
	e.Int(s.IncludedGigabytesBandwidth)
	e.ObjEnd()
}

// ReadJSON reads PackagesBillingUsage from json stream.
func (s *PackagesBillingUsage) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesBillingUsage to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_gigabytes_bandwidth_used":
			v, err := d.Int()
			s.TotalGigabytesBandwidthUsed = int(v)
			if err != nil {
				return err
			}
		case "total_paid_gigabytes_bandwidth_used":
			v, err := d.Int()
			s.TotalPaidGigabytesBandwidthUsed = int(v)
			if err != nil {
				return err
			}
		case "included_gigabytes_bandwidth":
			v, err := d.Int()
			s.IncludedGigabytesBandwidth = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (PackagesDeletePackageForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (PackagesDeletePackageForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesDeletePackageForAuthenticatedUserNoContent from json stream.
func (s *PackagesDeletePackageForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageForAuthenticatedUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesDeletePackageForAuthenticatedUserPackageType from json reader.
func (s *PackagesDeletePackageForAuthenticatedUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageForAuthenticatedUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesDeletePackageForAuthenticatedUserPackageType(v)
	return nil
}

func (PackagesDeletePackageForOrgApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageForOrgApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageForOrgApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (PackagesDeletePackageForOrgApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (PackagesDeletePackageForOrgApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageForOrgApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageForOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesDeletePackageForOrgNoContent from json stream.
func (s *PackagesDeletePackageForOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageForOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageForOrgPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesDeletePackageForOrgPackageType from json reader.
func (s *PackagesDeletePackageForOrgPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageForOrgPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesDeletePackageForOrgPackageType(v)
	return nil
}

func (PackagesDeletePackageForUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageForUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageForUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageForUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageForUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageForUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageForUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesDeletePackageForUserNoContent from json stream.
func (s *PackagesDeletePackageForUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageForUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageForUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesDeletePackageForUserPackageType from json reader.
func (s *PackagesDeletePackageForUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageForUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesDeletePackageForUserPackageType(v)
	return nil
}

func (PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {
}
func (PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageVersionForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesDeletePackageVersionForAuthenticatedUserNoContent from json stream.
func (s *PackagesDeletePackageVersionForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageVersionForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageVersionForAuthenticatedUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesDeletePackageVersionForAuthenticatedUserPackageType from json reader.
func (s *PackagesDeletePackageVersionForAuthenticatedUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageVersionForAuthenticatedUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesDeletePackageVersionForAuthenticatedUserPackageType(v)
	return nil
}

func (PackagesDeletePackageVersionForOrgApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageVersionForOrgApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageVersionForOrgApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageVersionForOrgApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageVersionForOrgApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageVersionForOrgApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageVersionForOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesDeletePackageVersionForOrgNoContent from json stream.
func (s *PackagesDeletePackageVersionForOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageVersionForOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageVersionForOrgPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesDeletePackageVersionForOrgPackageType from json reader.
func (s *PackagesDeletePackageVersionForOrgPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageVersionForOrgPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesDeletePackageVersionForOrgPackageType(v)
	return nil
}

func (PackagesDeletePackageVersionForUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageVersionForUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageVersionForUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageVersionForUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesDeletePackageVersionForUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (PackagesDeletePackageVersionForUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageVersionForUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesDeletePackageVersionForUserNoContent from json stream.
func (s *PackagesDeletePackageVersionForUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageVersionForUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesDeletePackageVersionForUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesDeletePackageVersionForUserPackageType from json reader.
func (s *PackagesDeletePackageVersionForUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesDeletePackageVersionForUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesDeletePackageVersionForUserPackageType(v)
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType from json reader.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState from json reader.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState(v)
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONNotFound) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType from json reader.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetAllPackageVersionsForPackageOwnedByOrgState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetAllPackageVersionsForPackageOwnedByOrgState from json reader.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByOrgState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetAllPackageVersionsForPackageOwnedByOrgState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgState(v)
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON) WriteJSON(e *json.Encoder) {
}
func (PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType from json reader.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetPackageForAuthenticatedUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetPackageForAuthenticatedUserPackageType from json reader.
func (s *PackagesGetPackageForAuthenticatedUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetPackageForAuthenticatedUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetPackageForAuthenticatedUserPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetPackageForOrganizationPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetPackageForOrganizationPackageType from json reader.
func (s *PackagesGetPackageForOrganizationPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetPackageForOrganizationPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetPackageForOrganizationPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetPackageForUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetPackageForUserPackageType from json reader.
func (s *PackagesGetPackageForUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetPackageForUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetPackageForUserPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetPackageVersionForAuthenticatedUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetPackageVersionForAuthenticatedUserPackageType from json reader.
func (s *PackagesGetPackageVersionForAuthenticatedUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetPackageVersionForAuthenticatedUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetPackageVersionForAuthenticatedUserPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetPackageVersionForOrganizationPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetPackageVersionForOrganizationPackageType from json reader.
func (s *PackagesGetPackageVersionForOrganizationPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetPackageVersionForOrganizationPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetPackageVersionForOrganizationPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesGetPackageVersionForUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesGetPackageVersionForUserPackageType from json reader.
func (s *PackagesGetPackageVersionForUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesGetPackageVersionForUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesGetPackageVersionForUserPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesListPackagesForAuthenticatedUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesListPackagesForAuthenticatedUserPackageType from json reader.
func (s *PackagesListPackagesForAuthenticatedUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesListPackagesForAuthenticatedUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesListPackagesForAuthenticatedUserPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesListPackagesForAuthenticatedUserVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesListPackagesForAuthenticatedUserVisibility from json reader.
func (s *PackagesListPackagesForAuthenticatedUserVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesListPackagesForAuthenticatedUserVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesListPackagesForAuthenticatedUserVisibility(v)
	return nil
}

func (PackagesListPackagesForOrganizationApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesListPackagesForOrganizationApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesListPackagesForOrganizationApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (PackagesListPackagesForOrganizationApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesListPackagesForOrganizationOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (PackagesListPackagesForOrganizationOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesListPackagesForOrganizationPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesListPackagesForOrganizationPackageType from json reader.
func (s *PackagesListPackagesForOrganizationPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesListPackagesForOrganizationPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesListPackagesForOrganizationPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesListPackagesForOrganizationVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesListPackagesForOrganizationVisibility from json reader.
func (s *PackagesListPackagesForOrganizationVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesListPackagesForOrganizationVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesListPackagesForOrganizationVisibility(v)
	return nil
}

func (PackagesListPackagesForUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesListPackagesForUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesListPackagesForUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (PackagesListPackagesForUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesListPackagesForUserOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (PackagesListPackagesForUserOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s PackagesListPackagesForUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesListPackagesForUserPackageType from json reader.
func (s *PackagesListPackagesForUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesListPackagesForUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesListPackagesForUserPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesListPackagesForUserVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesListPackagesForUserVisibility from json reader.
func (s *PackagesListPackagesForUserVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesListPackagesForUserVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesListPackagesForUserVisibility(v)
	return nil
}

func (PackagesRestorePackageForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (PackagesRestorePackageForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (PackagesRestorePackageForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesRestorePackageForAuthenticatedUserNoContent from json stream.
func (s *PackagesRestorePackageForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageForAuthenticatedUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesRestorePackageForAuthenticatedUserPackageType from json reader.
func (s *PackagesRestorePackageForAuthenticatedUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageForAuthenticatedUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesRestorePackageForAuthenticatedUserPackageType(v)
	return nil
}

func (PackagesRestorePackageForOrgApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageForOrgApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageForOrgApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageForOrgApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageForOrgApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageForOrgApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageForOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesRestorePackageForOrgNoContent from json stream.
func (s *PackagesRestorePackageForOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageForOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageForOrgPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesRestorePackageForOrgPackageType from json reader.
func (s *PackagesRestorePackageForOrgPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageForOrgPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesRestorePackageForOrgPackageType(v)
	return nil
}

func (PackagesRestorePackageForUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageForUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageForUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageForUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageForUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageForUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageForUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesRestorePackageForUserNoContent from json stream.
func (s *PackagesRestorePackageForUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageForUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageForUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesRestorePackageForUserPackageType from json reader.
func (s *PackagesRestorePackageForUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageForUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesRestorePackageForUserPackageType(v)
	return nil
}

func (PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {
}
func (PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {
}
func (PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageVersionForAuthenticatedUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesRestorePackageVersionForAuthenticatedUserNoContent from json stream.
func (s *PackagesRestorePackageVersionForAuthenticatedUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageVersionForAuthenticatedUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageVersionForAuthenticatedUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesRestorePackageVersionForAuthenticatedUserPackageType from json reader.
func (s *PackagesRestorePackageVersionForAuthenticatedUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageVersionForAuthenticatedUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesRestorePackageVersionForAuthenticatedUserPackageType(v)
	return nil
}

func (PackagesRestorePackageVersionForOrgApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageVersionForOrgApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageVersionForOrgApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageVersionForOrgApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageVersionForOrgApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageVersionForOrgApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageVersionForOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesRestorePackageVersionForOrgNoContent from json stream.
func (s *PackagesRestorePackageVersionForOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageVersionForOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageVersionForOrgPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesRestorePackageVersionForOrgPackageType from json reader.
func (s *PackagesRestorePackageVersionForOrgPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageVersionForOrgPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesRestorePackageVersionForOrgPackageType(v)
	return nil
}

func (PackagesRestorePackageVersionForUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageVersionForUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageVersionForUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageVersionForUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (PackagesRestorePackageVersionForUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (PackagesRestorePackageVersionForUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageVersionForUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PackagesRestorePackageVersionForUserNoContent from json stream.
func (s *PackagesRestorePackageVersionForUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageVersionForUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PackagesRestorePackageVersionForUserPackageType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PackagesRestorePackageVersionForUserPackageType from json reader.
func (s *PackagesRestorePackageVersionForUserPackageType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PackagesRestorePackageVersionForUserPackageType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PackagesRestorePackageVersionForUserPackageType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Page) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("status")
	s.Status.WriteJSON(e)
	more.More()
	e.ObjField("cname")
	s.Cname.WriteJSON(e)
	if s.ProtectedDomainState.Set {
		more.More()
		e.ObjField("protected_domain_state")
		s.ProtectedDomainState.WriteJSON(e)
	}
	if s.PendingDomainUnverifiedAt.Set {
		more.More()
		e.ObjField("pending_domain_unverified_at")
		s.PendingDomainUnverifiedAt.WriteJSON(e, json.WriteDateTime)
	}
	more.More()
	e.ObjField("custom_404")
	e.Bool(s.Custom404)
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.Source.Set {
		more.More()
		e.ObjField("source")
		s.Source.WriteJSON(e)
	}
	more.More()
	e.ObjField("public")
	e.Bool(s.Public)
	if s.HTTPSCertificate.Set {
		more.More()
		e.ObjField("https_certificate")
		s.HTTPSCertificate.WriteJSON(e)
	}
	if s.HTTPSEnforced.Set {
		more.More()
		e.ObjField("https_enforced")
		s.HTTPSEnforced.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Page from json stream.
func (s *Page) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Page to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "status":
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "cname":
			if err := s.Cname.ReadJSON(d); err != nil {
				return err
			}
		case "protected_domain_state":
			s.ProtectedDomainState.Reset()
			if err := s.ProtectedDomainState.ReadJSON(d); err != nil {
				return err
			}
		case "pending_domain_unverified_at":
			s.PendingDomainUnverifiedAt.Reset()
			if err := s.PendingDomainUnverifiedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "custom_404":
			v, err := d.Bool()
			s.Custom404 = bool(v)
			if err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "source":
			s.Source.Reset()
			if err := s.Source.ReadJSON(d); err != nil {
				return err
			}
		case "public":
			v, err := d.Bool()
			s.Public = bool(v)
			if err != nil {
				return err
			}
		case "https_certificate":
			s.HTTPSCertificate.Reset()
			if err := s.HTTPSCertificate.ReadJSON(d); err != nil {
				return err
			}
		case "https_enforced":
			s.HTTPSEnforced.Reset()
			if err := s.HTTPSEnforced.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PageBuild) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("status")
	e.Str(s.Status)
	more.More()
	e.ObjField("error")
	s.Error.WriteJSON(e)
	more.More()
	e.ObjField("pusher")
	s.Pusher.WriteJSON(e)
	more.More()
	e.ObjField("commit")
	e.Str(s.Commit)
	more.More()
	e.ObjField("duration")
	e.Int(s.Duration)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	e.ObjEnd()
}

// ReadJSON reads PageBuild from json stream.
func (s *PageBuild) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PageBuild to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "status":
			v, err := d.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "error":
			if err := s.Error.ReadJSON(d); err != nil {
				return err
			}
		case "pusher":
			if err := s.Pusher.ReadJSON(d); err != nil {
				return err
			}
		case "commit":
			v, err := d.Str()
			s.Commit = string(v)
			if err != nil {
				return err
			}
		case "duration":
			v, err := d.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PageBuildError) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("message")
	s.Message.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PageBuildError from json stream.
func (s *PageBuildError) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PageBuildError to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PageBuildStatus) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("status")
	e.Str(s.Status)
	e.ObjEnd()
}

// ReadJSON reads PageBuildStatus from json stream.
func (s *PageBuildStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PageBuildStatus to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "status":
			v, err := d.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PageProtectedDomainState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PageProtectedDomainState from json reader.
func (s *PageProtectedDomainState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PageProtectedDomainState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PageProtectedDomainState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PageStatus) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PageStatus from json reader.
func (s *PageStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PageStatus to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PageStatus(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PagesHTTPSCertificate) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("description")
	e.Str(s.Description)
	more.More()
	e.ObjField("domains")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Domains {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	if s.ExpiresAt.Set {
		more.More()
		e.ObjField("expires_at")
		s.ExpiresAt.WriteJSON(e, json.WriteDate)
	}
	e.ObjEnd()
}

// ReadJSON reads PagesHTTPSCertificate from json stream.
func (s *PagesHTTPSCertificate) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PagesHTTPSCertificate to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "domains":
			s.Domains = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Domains = append(s.Domains, elem)
				return nil
			}); err != nil {
				return err
			}
		case "expires_at":
			s.ExpiresAt.Reset()
			if err := s.ExpiresAt.ReadJSON(d, json.ReadDate); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PagesHTTPSCertificateState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PagesHTTPSCertificateState from json reader.
func (s *PagesHTTPSCertificateState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PagesHTTPSCertificateState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PagesHTTPSCertificateState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PagesHealthCheck) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Domain.Set {
		more.More()
		e.ObjField("domain")
		s.Domain.WriteJSON(e)
	}
	if s.AltDomain.Set {
		more.More()
		e.ObjField("alt_domain")
		s.AltDomain.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PagesHealthCheck from json stream.
func (s *PagesHealthCheck) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PagesHealthCheck to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "domain":
			s.Domain.Reset()
			if err := s.Domain.ReadJSON(d); err != nil {
				return err
			}
		case "alt_domain":
			s.AltDomain.Reset()
			if err := s.AltDomain.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PagesHealthCheckAltDomain) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Host.Set {
		more.More()
		e.ObjField("host")
		s.Host.WriteJSON(e)
	}
	if s.URI.Set {
		more.More()
		e.ObjField("uri")
		s.URI.WriteJSON(e)
	}
	if s.Nameservers.Set {
		more.More()
		e.ObjField("nameservers")
		s.Nameservers.WriteJSON(e)
	}
	if s.DNSResolves.Set {
		more.More()
		e.ObjField("dns_resolves")
		s.DNSResolves.WriteJSON(e)
	}
	if s.IsProxied.Set {
		more.More()
		e.ObjField("is_proxied")
		s.IsProxied.WriteJSON(e)
	}
	if s.IsCloudflareIP.Set {
		more.More()
		e.ObjField("is_cloudflare_ip")
		s.IsCloudflareIP.WriteJSON(e)
	}
	if s.IsFastlyIP.Set {
		more.More()
		e.ObjField("is_fastly_ip")
		s.IsFastlyIP.WriteJSON(e)
	}
	if s.IsOldIPAddress.Set {
		more.More()
		e.ObjField("is_old_ip_address")
		s.IsOldIPAddress.WriteJSON(e)
	}
	if s.IsARecord.Set {
		more.More()
		e.ObjField("is_a_record")
		s.IsARecord.WriteJSON(e)
	}
	if s.HasCnameRecord.Set {
		more.More()
		e.ObjField("has_cname_record")
		s.HasCnameRecord.WriteJSON(e)
	}
	if s.HasMxRecordsPresent.Set {
		more.More()
		e.ObjField("has_mx_records_present")
		s.HasMxRecordsPresent.WriteJSON(e)
	}
	if s.IsValidDomain.Set {
		more.More()
		e.ObjField("is_valid_domain")
		s.IsValidDomain.WriteJSON(e)
	}
	if s.IsApexDomain.Set {
		more.More()
		e.ObjField("is_apex_domain")
		s.IsApexDomain.WriteJSON(e)
	}
	if s.ShouldBeARecord.Set {
		more.More()
		e.ObjField("should_be_a_record")
		s.ShouldBeARecord.WriteJSON(e)
	}
	if s.IsCnameToGithubUserDomain.Set {
		more.More()
		e.ObjField("is_cname_to_github_user_domain")
		s.IsCnameToGithubUserDomain.WriteJSON(e)
	}
	if s.IsCnameToPagesDotGithubDotCom.Set {
		more.More()
		e.ObjField("is_cname_to_pages_dot_github_dot_com")
		s.IsCnameToPagesDotGithubDotCom.WriteJSON(e)
	}
	if s.IsCnameToFastly.Set {
		more.More()
		e.ObjField("is_cname_to_fastly")
		s.IsCnameToFastly.WriteJSON(e)
	}
	if s.IsPointedToGithubPagesIP.Set {
		more.More()
		e.ObjField("is_pointed_to_github_pages_ip")
		s.IsPointedToGithubPagesIP.WriteJSON(e)
	}
	if s.IsNonGithubPagesIPPresent.Set {
		more.More()
		e.ObjField("is_non_github_pages_ip_present")
		s.IsNonGithubPagesIPPresent.WriteJSON(e)
	}
	if s.IsPagesDomain.Set {
		more.More()
		e.ObjField("is_pages_domain")
		s.IsPagesDomain.WriteJSON(e)
	}
	if s.IsServedByPages.Set {
		more.More()
		e.ObjField("is_served_by_pages")
		s.IsServedByPages.WriteJSON(e)
	}
	if s.IsValid.Set {
		more.More()
		e.ObjField("is_valid")
		s.IsValid.WriteJSON(e)
	}
	if s.Reason.Set {
		more.More()
		e.ObjField("reason")
		s.Reason.WriteJSON(e)
	}
	if s.RespondsToHTTPS.Set {
		more.More()
		e.ObjField("responds_to_https")
		s.RespondsToHTTPS.WriteJSON(e)
	}
	if s.EnforcesHTTPS.Set {
		more.More()
		e.ObjField("enforces_https")
		s.EnforcesHTTPS.WriteJSON(e)
	}
	if s.HTTPSError.Set {
		more.More()
		e.ObjField("https_error")
		s.HTTPSError.WriteJSON(e)
	}
	if s.IsHTTPSEligible.Set {
		more.More()
		e.ObjField("is_https_eligible")
		s.IsHTTPSEligible.WriteJSON(e)
	}
	if s.CaaError.Set {
		more.More()
		e.ObjField("caa_error")
		s.CaaError.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PagesHealthCheckAltDomain from json stream.
func (s *PagesHealthCheckAltDomain) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PagesHealthCheckAltDomain to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(d); err != nil {
				return err
			}
		case "uri":
			s.URI.Reset()
			if err := s.URI.ReadJSON(d); err != nil {
				return err
			}
		case "nameservers":
			s.Nameservers.Reset()
			if err := s.Nameservers.ReadJSON(d); err != nil {
				return err
			}
		case "dns_resolves":
			s.DNSResolves.Reset()
			if err := s.DNSResolves.ReadJSON(d); err != nil {
				return err
			}
		case "is_proxied":
			s.IsProxied.Reset()
			if err := s.IsProxied.ReadJSON(d); err != nil {
				return err
			}
		case "is_cloudflare_ip":
			s.IsCloudflareIP.Reset()
			if err := s.IsCloudflareIP.ReadJSON(d); err != nil {
				return err
			}
		case "is_fastly_ip":
			s.IsFastlyIP.Reset()
			if err := s.IsFastlyIP.ReadJSON(d); err != nil {
				return err
			}
		case "is_old_ip_address":
			s.IsOldIPAddress.Reset()
			if err := s.IsOldIPAddress.ReadJSON(d); err != nil {
				return err
			}
		case "is_a_record":
			s.IsARecord.Reset()
			if err := s.IsARecord.ReadJSON(d); err != nil {
				return err
			}
		case "has_cname_record":
			s.HasCnameRecord.Reset()
			if err := s.HasCnameRecord.ReadJSON(d); err != nil {
				return err
			}
		case "has_mx_records_present":
			s.HasMxRecordsPresent.Reset()
			if err := s.HasMxRecordsPresent.ReadJSON(d); err != nil {
				return err
			}
		case "is_valid_domain":
			s.IsValidDomain.Reset()
			if err := s.IsValidDomain.ReadJSON(d); err != nil {
				return err
			}
		case "is_apex_domain":
			s.IsApexDomain.Reset()
			if err := s.IsApexDomain.ReadJSON(d); err != nil {
				return err
			}
		case "should_be_a_record":
			s.ShouldBeARecord.Reset()
			if err := s.ShouldBeARecord.ReadJSON(d); err != nil {
				return err
			}
		case "is_cname_to_github_user_domain":
			s.IsCnameToGithubUserDomain.Reset()
			if err := s.IsCnameToGithubUserDomain.ReadJSON(d); err != nil {
				return err
			}
		case "is_cname_to_pages_dot_github_dot_com":
			s.IsCnameToPagesDotGithubDotCom.Reset()
			if err := s.IsCnameToPagesDotGithubDotCom.ReadJSON(d); err != nil {
				return err
			}
		case "is_cname_to_fastly":
			s.IsCnameToFastly.Reset()
			if err := s.IsCnameToFastly.ReadJSON(d); err != nil {
				return err
			}
		case "is_pointed_to_github_pages_ip":
			s.IsPointedToGithubPagesIP.Reset()
			if err := s.IsPointedToGithubPagesIP.ReadJSON(d); err != nil {
				return err
			}
		case "is_non_github_pages_ip_present":
			s.IsNonGithubPagesIPPresent.Reset()
			if err := s.IsNonGithubPagesIPPresent.ReadJSON(d); err != nil {
				return err
			}
		case "is_pages_domain":
			s.IsPagesDomain.Reset()
			if err := s.IsPagesDomain.ReadJSON(d); err != nil {
				return err
			}
		case "is_served_by_pages":
			s.IsServedByPages.Reset()
			if err := s.IsServedByPages.ReadJSON(d); err != nil {
				return err
			}
		case "is_valid":
			s.IsValid.Reset()
			if err := s.IsValid.ReadJSON(d); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(d); err != nil {
				return err
			}
		case "responds_to_https":
			s.RespondsToHTTPS.Reset()
			if err := s.RespondsToHTTPS.ReadJSON(d); err != nil {
				return err
			}
		case "enforces_https":
			s.EnforcesHTTPS.Reset()
			if err := s.EnforcesHTTPS.ReadJSON(d); err != nil {
				return err
			}
		case "https_error":
			s.HTTPSError.Reset()
			if err := s.HTTPSError.ReadJSON(d); err != nil {
				return err
			}
		case "is_https_eligible":
			s.IsHTTPSEligible.Reset()
			if err := s.IsHTTPSEligible.ReadJSON(d); err != nil {
				return err
			}
		case "caa_error":
			s.CaaError.Reset()
			if err := s.CaaError.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PagesHealthCheckDomain) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Host.Set {
		more.More()
		e.ObjField("host")
		s.Host.WriteJSON(e)
	}
	if s.URI.Set {
		more.More()
		e.ObjField("uri")
		s.URI.WriteJSON(e)
	}
	if s.Nameservers.Set {
		more.More()
		e.ObjField("nameservers")
		s.Nameservers.WriteJSON(e)
	}
	if s.DNSResolves.Set {
		more.More()
		e.ObjField("dns_resolves")
		s.DNSResolves.WriteJSON(e)
	}
	if s.IsProxied.Set {
		more.More()
		e.ObjField("is_proxied")
		s.IsProxied.WriteJSON(e)
	}
	if s.IsCloudflareIP.Set {
		more.More()
		e.ObjField("is_cloudflare_ip")
		s.IsCloudflareIP.WriteJSON(e)
	}
	if s.IsFastlyIP.Set {
		more.More()
		e.ObjField("is_fastly_ip")
		s.IsFastlyIP.WriteJSON(e)
	}
	if s.IsOldIPAddress.Set {
		more.More()
		e.ObjField("is_old_ip_address")
		s.IsOldIPAddress.WriteJSON(e)
	}
	if s.IsARecord.Set {
		more.More()
		e.ObjField("is_a_record")
		s.IsARecord.WriteJSON(e)
	}
	if s.HasCnameRecord.Set {
		more.More()
		e.ObjField("has_cname_record")
		s.HasCnameRecord.WriteJSON(e)
	}
	if s.HasMxRecordsPresent.Set {
		more.More()
		e.ObjField("has_mx_records_present")
		s.HasMxRecordsPresent.WriteJSON(e)
	}
	if s.IsValidDomain.Set {
		more.More()
		e.ObjField("is_valid_domain")
		s.IsValidDomain.WriteJSON(e)
	}
	if s.IsApexDomain.Set {
		more.More()
		e.ObjField("is_apex_domain")
		s.IsApexDomain.WriteJSON(e)
	}
	if s.ShouldBeARecord.Set {
		more.More()
		e.ObjField("should_be_a_record")
		s.ShouldBeARecord.WriteJSON(e)
	}
	if s.IsCnameToGithubUserDomain.Set {
		more.More()
		e.ObjField("is_cname_to_github_user_domain")
		s.IsCnameToGithubUserDomain.WriteJSON(e)
	}
	if s.IsCnameToPagesDotGithubDotCom.Set {
		more.More()
		e.ObjField("is_cname_to_pages_dot_github_dot_com")
		s.IsCnameToPagesDotGithubDotCom.WriteJSON(e)
	}
	if s.IsCnameToFastly.Set {
		more.More()
		e.ObjField("is_cname_to_fastly")
		s.IsCnameToFastly.WriteJSON(e)
	}
	if s.IsPointedToGithubPagesIP.Set {
		more.More()
		e.ObjField("is_pointed_to_github_pages_ip")
		s.IsPointedToGithubPagesIP.WriteJSON(e)
	}
	if s.IsNonGithubPagesIPPresent.Set {
		more.More()
		e.ObjField("is_non_github_pages_ip_present")
		s.IsNonGithubPagesIPPresent.WriteJSON(e)
	}
	if s.IsPagesDomain.Set {
		more.More()
		e.ObjField("is_pages_domain")
		s.IsPagesDomain.WriteJSON(e)
	}
	if s.IsServedByPages.Set {
		more.More()
		e.ObjField("is_served_by_pages")
		s.IsServedByPages.WriteJSON(e)
	}
	if s.IsValid.Set {
		more.More()
		e.ObjField("is_valid")
		s.IsValid.WriteJSON(e)
	}
	if s.Reason.Set {
		more.More()
		e.ObjField("reason")
		s.Reason.WriteJSON(e)
	}
	if s.RespondsToHTTPS.Set {
		more.More()
		e.ObjField("responds_to_https")
		s.RespondsToHTTPS.WriteJSON(e)
	}
	if s.EnforcesHTTPS.Set {
		more.More()
		e.ObjField("enforces_https")
		s.EnforcesHTTPS.WriteJSON(e)
	}
	if s.HTTPSError.Set {
		more.More()
		e.ObjField("https_error")
		s.HTTPSError.WriteJSON(e)
	}
	if s.IsHTTPSEligible.Set {
		more.More()
		e.ObjField("is_https_eligible")
		s.IsHTTPSEligible.WriteJSON(e)
	}
	if s.CaaError.Set {
		more.More()
		e.ObjField("caa_error")
		s.CaaError.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PagesHealthCheckDomain from json stream.
func (s *PagesHealthCheckDomain) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PagesHealthCheckDomain to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(d); err != nil {
				return err
			}
		case "uri":
			s.URI.Reset()
			if err := s.URI.ReadJSON(d); err != nil {
				return err
			}
		case "nameservers":
			s.Nameservers.Reset()
			if err := s.Nameservers.ReadJSON(d); err != nil {
				return err
			}
		case "dns_resolves":
			s.DNSResolves.Reset()
			if err := s.DNSResolves.ReadJSON(d); err != nil {
				return err
			}
		case "is_proxied":
			s.IsProxied.Reset()
			if err := s.IsProxied.ReadJSON(d); err != nil {
				return err
			}
		case "is_cloudflare_ip":
			s.IsCloudflareIP.Reset()
			if err := s.IsCloudflareIP.ReadJSON(d); err != nil {
				return err
			}
		case "is_fastly_ip":
			s.IsFastlyIP.Reset()
			if err := s.IsFastlyIP.ReadJSON(d); err != nil {
				return err
			}
		case "is_old_ip_address":
			s.IsOldIPAddress.Reset()
			if err := s.IsOldIPAddress.ReadJSON(d); err != nil {
				return err
			}
		case "is_a_record":
			s.IsARecord.Reset()
			if err := s.IsARecord.ReadJSON(d); err != nil {
				return err
			}
		case "has_cname_record":
			s.HasCnameRecord.Reset()
			if err := s.HasCnameRecord.ReadJSON(d); err != nil {
				return err
			}
		case "has_mx_records_present":
			s.HasMxRecordsPresent.Reset()
			if err := s.HasMxRecordsPresent.ReadJSON(d); err != nil {
				return err
			}
		case "is_valid_domain":
			s.IsValidDomain.Reset()
			if err := s.IsValidDomain.ReadJSON(d); err != nil {
				return err
			}
		case "is_apex_domain":
			s.IsApexDomain.Reset()
			if err := s.IsApexDomain.ReadJSON(d); err != nil {
				return err
			}
		case "should_be_a_record":
			s.ShouldBeARecord.Reset()
			if err := s.ShouldBeARecord.ReadJSON(d); err != nil {
				return err
			}
		case "is_cname_to_github_user_domain":
			s.IsCnameToGithubUserDomain.Reset()
			if err := s.IsCnameToGithubUserDomain.ReadJSON(d); err != nil {
				return err
			}
		case "is_cname_to_pages_dot_github_dot_com":
			s.IsCnameToPagesDotGithubDotCom.Reset()
			if err := s.IsCnameToPagesDotGithubDotCom.ReadJSON(d); err != nil {
				return err
			}
		case "is_cname_to_fastly":
			s.IsCnameToFastly.Reset()
			if err := s.IsCnameToFastly.ReadJSON(d); err != nil {
				return err
			}
		case "is_pointed_to_github_pages_ip":
			s.IsPointedToGithubPagesIP.Reset()
			if err := s.IsPointedToGithubPagesIP.ReadJSON(d); err != nil {
				return err
			}
		case "is_non_github_pages_ip_present":
			s.IsNonGithubPagesIPPresent.Reset()
			if err := s.IsNonGithubPagesIPPresent.ReadJSON(d); err != nil {
				return err
			}
		case "is_pages_domain":
			s.IsPagesDomain.Reset()
			if err := s.IsPagesDomain.ReadJSON(d); err != nil {
				return err
			}
		case "is_served_by_pages":
			s.IsServedByPages.Reset()
			if err := s.IsServedByPages.ReadJSON(d); err != nil {
				return err
			}
		case "is_valid":
			s.IsValid.Reset()
			if err := s.IsValid.ReadJSON(d); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(d); err != nil {
				return err
			}
		case "responds_to_https":
			s.RespondsToHTTPS.Reset()
			if err := s.RespondsToHTTPS.ReadJSON(d); err != nil {
				return err
			}
		case "enforces_https":
			s.EnforcesHTTPS.Reset()
			if err := s.EnforcesHTTPS.ReadJSON(d); err != nil {
				return err
			}
		case "https_error":
			s.HTTPSError.Reset()
			if err := s.HTTPSError.ReadJSON(d); err != nil {
				return err
			}
		case "is_https_eligible":
			s.IsHTTPSEligible.Reset()
			if err := s.IsHTTPSEligible.ReadJSON(d); err != nil {
				return err
			}
		case "caa_error":
			s.CaaError.Reset()
			if err := s.CaaError.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PagesSourceHash) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("branch")
	e.Str(s.Branch)
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	e.ObjEnd()
}

// ReadJSON reads PagesSourceHash from json stream.
func (s *PagesSourceHash) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PagesSourceHash to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "branch":
			v, err := d.Str()
			s.Branch = string(v)
			if err != nil {
				return err
			}
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ParticipationStats) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("all")
	more.Down()
	e.ArrStart()
	for _, elem := range s.All {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("owner")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Owner {
		more.More()
		e.Int(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ParticipationStats from json stream.
func (s *ParticipationStats) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ParticipationStats to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "all":
			s.All = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.All = append(s.All, elem)
				return nil
			}); err != nil {
				return err
			}
		case "owner":
			s.Owner = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Owner = append(s.Owner, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PorterAuthor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("remote_id")
	e.Str(s.RemoteID)
	more.More()
	e.ObjField("remote_name")
	e.Str(s.RemoteName)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("import_url")
	json.WriteURI(e, s.ImportURL)
	e.ObjEnd()
}

// ReadJSON reads PorterAuthor from json stream.
func (s *PorterAuthor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PorterAuthor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "remote_id":
			v, err := d.Str()
			s.RemoteID = string(v)
			if err != nil {
				return err
			}
		case "remote_name":
			v, err := d.Str()
			s.RemoteName = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "import_url":
			v, err := json.ReadURI(d)
			s.ImportURL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PorterLargeFile) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("ref_name")
	e.Str(s.RefName)
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	more.More()
	e.ObjField("oid")
	e.Str(s.Oid)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	e.ObjEnd()
}

// ReadJSON reads PorterLargeFile from json stream.
func (s *PorterLargeFile) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PorterLargeFile to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "ref_name":
			v, err := d.Str()
			s.RefName = string(v)
			if err != nil {
				return err
			}
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "oid":
			v, err := d.Str()
			s.Oid = string(v)
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PreviewHeaderMissing) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("documentation_url")
	e.Str(s.DocumentationURL)
	e.ObjEnd()
}

// ReadJSON reads PreviewHeaderMissing from json stream.
func (s *PreviewHeaderMissing) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PreviewHeaderMissing to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "documentation_url":
			v, err := d.Str()
			s.DocumentationURL = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PrivateUser) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("followers_url")
	json.WriteURI(e, s.FollowersURL)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("subscriptions_url")
	json.WriteURI(e, s.SubscriptionsURL)
	more.More()
	e.ObjField("organizations_url")
	json.WriteURI(e, s.OrganizationsURL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	more.More()
	e.ObjField("received_events_url")
	json.WriteURI(e, s.ReceivedEventsURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("site_admin")
	e.Bool(s.SiteAdmin)
	more.More()
	e.ObjField("name")
	s.Name.WriteJSON(e)
	more.More()
	e.ObjField("company")
	s.Company.WriteJSON(e)
	more.More()
	e.ObjField("blog")
	s.Blog.WriteJSON(e)
	more.More()
	e.ObjField("location")
	s.Location.WriteJSON(e)
	more.More()
	e.ObjField("email")
	s.Email.WriteJSON(e)
	more.More()
	e.ObjField("hireable")
	s.Hireable.WriteJSON(e)
	more.More()
	e.ObjField("bio")
	s.Bio.WriteJSON(e)
	if s.TwitterUsername.Set {
		more.More()
		e.ObjField("twitter_username")
		s.TwitterUsername.WriteJSON(e)
	}
	more.More()
	e.ObjField("public_repos")
	e.Int(s.PublicRepos)
	more.More()
	e.ObjField("public_gists")
	e.Int(s.PublicGists)
	more.More()
	e.ObjField("followers")
	e.Int(s.Followers)
	more.More()
	e.ObjField("following")
	e.Int(s.Following)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("private_gists")
	e.Int(s.PrivateGists)
	more.More()
	e.ObjField("total_private_repos")
	e.Int(s.TotalPrivateRepos)
	more.More()
	e.ObjField("owned_private_repos")
	e.Int(s.OwnedPrivateRepos)
	more.More()
	e.ObjField("disk_usage")
	e.Int(s.DiskUsage)
	more.More()
	e.ObjField("collaborators")
	e.Int(s.Collaborators)
	more.More()
	e.ObjField("two_factor_authentication")
	e.Bool(s.TwoFactorAuthentication)
	if s.Plan.Set {
		more.More()
		e.ObjField("plan")
		s.Plan.WriteJSON(e)
	}
	if s.SuspendedAt.Set {
		more.More()
		e.ObjField("suspended_at")
		s.SuspendedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.BusinessPlus.Set {
		more.More()
		e.ObjField("business_plus")
		s.BusinessPlus.WriteJSON(e)
	}
	if s.LdapDn.Set {
		more.More()
		e.ObjField("ldap_dn")
		s.LdapDn.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PrivateUser from json stream.
func (s *PrivateUser) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PrivateUser to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := json.ReadURI(d)
			s.FollowersURL = v
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "subscriptions_url":
			v, err := json.ReadURI(d)
			s.SubscriptionsURL = v
			if err != nil {
				return err
			}
		case "organizations_url":
			v, err := json.ReadURI(d)
			s.OrganizationsURL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "received_events_url":
			v, err := json.ReadURI(d)
			s.ReceivedEventsURL = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "site_admin":
			v, err := d.Bool()
			s.SiteAdmin = bool(v)
			if err != nil {
				return err
			}
		case "name":
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "company":
			if err := s.Company.ReadJSON(d); err != nil {
				return err
			}
		case "blog":
			if err := s.Blog.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "hireable":
			if err := s.Hireable.ReadJSON(d); err != nil {
				return err
			}
		case "bio":
			if err := s.Bio.ReadJSON(d); err != nil {
				return err
			}
		case "twitter_username":
			s.TwitterUsername.Reset()
			if err := s.TwitterUsername.ReadJSON(d); err != nil {
				return err
			}
		case "public_repos":
			v, err := d.Int()
			s.PublicRepos = int(v)
			if err != nil {
				return err
			}
		case "public_gists":
			v, err := d.Int()
			s.PublicGists = int(v)
			if err != nil {
				return err
			}
		case "followers":
			v, err := d.Int()
			s.Followers = int(v)
			if err != nil {
				return err
			}
		case "following":
			v, err := d.Int()
			s.Following = int(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "private_gists":
			v, err := d.Int()
			s.PrivateGists = int(v)
			if err != nil {
				return err
			}
		case "total_private_repos":
			v, err := d.Int()
			s.TotalPrivateRepos = int(v)
			if err != nil {
				return err
			}
		case "owned_private_repos":
			v, err := d.Int()
			s.OwnedPrivateRepos = int(v)
			if err != nil {
				return err
			}
		case "disk_usage":
			v, err := d.Int()
			s.DiskUsage = int(v)
			if err != nil {
				return err
			}
		case "collaborators":
			v, err := d.Int()
			s.Collaborators = int(v)
			if err != nil {
				return err
			}
		case "two_factor_authentication":
			v, err := d.Bool()
			s.TwoFactorAuthentication = bool(v)
			if err != nil {
				return err
			}
		case "plan":
			s.Plan.Reset()
			if err := s.Plan.ReadJSON(d); err != nil {
				return err
			}
		case "suspended_at":
			s.SuspendedAt.Reset()
			if err := s.SuspendedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "business_plus":
			s.BusinessPlus.Reset()
			if err := s.BusinessPlus.ReadJSON(d); err != nil {
				return err
			}
		case "ldap_dn":
			s.LdapDn.Reset()
			if err := s.LdapDn.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PrivateUserPlan) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("collaborators")
	e.Int(s.Collaborators)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("space")
	e.Int(s.Space)
	more.More()
	e.ObjField("private_repos")
	e.Int(s.PrivateRepos)
	e.ObjEnd()
}

// ReadJSON reads PrivateUserPlan from json stream.
func (s *PrivateUserPlan) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PrivateUserPlan to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "collaborators":
			v, err := d.Int()
			s.Collaborators = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "space":
			v, err := d.Int()
			s.Space = int(v)
			if err != nil {
				return err
			}
		case "private_repos":
			v, err := d.Int()
			s.PrivateRepos = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Project) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("owner_url")
	json.WriteURI(e, s.OwnerURL)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("columns_url")
	json.WriteURI(e, s.ColumnsURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("body")
	s.Body.WriteJSON(e)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("creator")
	s.Creator.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	if s.OrganizationPermission.Set {
		more.More()
		e.ObjField("organization_permission")
		s.OrganizationPermission.WriteJSON(e)
	}
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Project from json stream.
func (s *Project) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Project to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "owner_url":
			v, err := json.ReadURI(d)
			s.OwnerURL = v
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "columns_url":
			v, err := json.ReadURI(d)
			s.ColumnsURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "body":
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "creator":
			if err := s.Creator.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "organization_permission":
			s.OrganizationPermission.Reset()
			if err := s.OrganizationPermission.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectCard) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("note")
	s.Note.WriteJSON(e)
	more.More()
	e.ObjField("creator")
	s.Creator.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	if s.Archived.Set {
		more.More()
		e.ObjField("archived")
		s.Archived.WriteJSON(e)
	}
	if s.ColumnName.Set {
		more.More()
		e.ObjField("column_name")
		s.ColumnName.WriteJSON(e)
	}
	if s.ProjectID.Set {
		more.More()
		e.ObjField("project_id")
		s.ProjectID.WriteJSON(e)
	}
	more.More()
	e.ObjField("column_url")
	json.WriteURI(e, s.ColumnURL)
	if s.ContentURL.Set {
		more.More()
		e.ObjField("content_url")
		s.ContentURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("project_url")
	json.WriteURI(e, s.ProjectURL)
	e.ObjEnd()
}

// ReadJSON reads ProjectCard from json stream.
func (s *ProjectCard) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectCard to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "note":
			if err := s.Note.ReadJSON(d); err != nil {
				return err
			}
		case "creator":
			if err := s.Creator.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(d); err != nil {
				return err
			}
		case "column_name":
			s.ColumnName.Reset()
			if err := s.ColumnName.ReadJSON(d); err != nil {
				return err
			}
		case "project_id":
			s.ProjectID.Reset()
			if err := s.ProjectID.ReadJSON(d); err != nil {
				return err
			}
		case "column_url":
			v, err := json.ReadURI(d)
			s.ColumnURL = v
			if err != nil {
				return err
			}
		case "content_url":
			s.ContentURL.Reset()
			if err := s.ContentURL.ReadJSON(d); err != nil {
				return err
			}
		case "project_url":
			v, err := json.ReadURI(d)
			s.ProjectURL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectColumn) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("project_url")
	json.WriteURI(e, s.ProjectURL)
	more.More()
	e.ObjField("cards_url")
	json.WriteURI(e, s.CardsURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	e.ObjEnd()
}

// ReadJSON reads ProjectColumn from json stream.
func (s *ProjectColumn) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectColumn to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "project_url":
			v, err := json.ReadURI(d)
			s.ProjectURL = v
			if err != nil {
				return err
			}
		case "cards_url":
			v, err := json.ReadURI(d)
			s.CardsURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectOrganizationPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ProjectOrganizationPermission from json reader.
func (s *ProjectOrganizationPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectOrganizationPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ProjectOrganizationPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ProjectsAddCollaboratorNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ProjectsAddCollaboratorNoContent from json stream.
func (s *ProjectsAddCollaboratorNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsAddCollaboratorNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsAddCollaboratorReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		e.ObjField("permission")
		s.Permission.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsAddCollaboratorReq from json stream.
func (s *ProjectsAddCollaboratorReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsAddCollaboratorReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsAddCollaboratorReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ProjectsAddCollaboratorReqPermission from json reader.
func (s *ProjectsAddCollaboratorReqPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsAddCollaboratorReqPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ProjectsAddCollaboratorReqPermission(v)
	return nil
}

func (ProjectsCreateColumnApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsCreateColumnApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsCreateColumnApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsCreateColumnApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsCreateColumnReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// ReadJSON reads ProjectsCreateColumnReq from json stream.
func (s *ProjectsCreateColumnReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsCreateColumnReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ProjectsCreateForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (ProjectsCreateForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ProjectsCreateForAuthenticatedUserReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsCreateForAuthenticatedUserReq from json stream.
func (s *ProjectsCreateForAuthenticatedUserReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsCreateForAuthenticatedUserReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ProjectsCreateForOrgApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsCreateForOrgApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsCreateForOrgApplicationJSONGone) WriteJSON(e *json.Encoder)      {}
func (ProjectsCreateForOrgApplicationJSONGone) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsCreateForOrgApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ProjectsCreateForOrgApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsCreateForOrgApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsCreateForOrgApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsCreateForOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsCreateForOrgReq from json stream.
func (s *ProjectsCreateForOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsCreateForOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ProjectsCreateForRepoApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsCreateForRepoApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsCreateForRepoApplicationJSONGone) WriteJSON(e *json.Encoder)      {}
func (ProjectsCreateForRepoApplicationJSONGone) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsCreateForRepoApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ProjectsCreateForRepoApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsCreateForRepoApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsCreateForRepoApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsCreateForRepoReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsCreateForRepoReq from json stream.
func (s *ProjectsCreateForRepoReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsCreateForRepoReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ProjectsDeleteApplicationJSONGone) WriteJSON(e *json.Encoder)      {}
func (ProjectsDeleteApplicationJSONGone) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsDeleteApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ProjectsDeleteApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsDeleteApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsDeleteApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsDeleteCardApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ProjectsDeleteCardApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsDeleteCardApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsDeleteCardApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsDeleteCardForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	if s.Errors != nil {
		more.More()
		e.ObjField("errors")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Errors {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsDeleteCardForbidden from json stream.
func (s *ProjectsDeleteCardForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsDeleteCardForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		case "errors":
			s.Errors = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Errors = append(s.Errors, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsDeleteCardNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ProjectsDeleteCardNoContent from json stream.
func (s *ProjectsDeleteCardNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsDeleteCardNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ProjectsDeleteColumnApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsDeleteColumnApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsDeleteColumnApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsDeleteColumnApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsDeleteColumnNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ProjectsDeleteColumnNoContent from json stream.
func (s *ProjectsDeleteColumnNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsDeleteColumnNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsDeleteForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	if s.Errors != nil {
		more.More()
		e.ObjField("errors")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Errors {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsDeleteForbidden from json stream.
func (s *ProjectsDeleteForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsDeleteForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		case "errors":
			s.Errors = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Errors = append(s.Errors, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsDeleteNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ProjectsDeleteNoContent from json stream.
func (s *ProjectsDeleteNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsDeleteNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ProjectsGetApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsGetApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsGetApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsGetApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsGetCardApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsGetCardApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsGetCardApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ProjectsGetCardApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsGetCardApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsGetCardApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsGetColumnApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsGetColumnApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsGetColumnApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ProjectsGetColumnApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsGetColumnApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsGetColumnApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsListCardsApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsListCardsApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsListCardsApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsListCardsApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsListCardsArchivedState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ProjectsListCardsArchivedState from json reader.
func (s *ProjectsListCardsArchivedState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsListCardsArchivedState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ProjectsListCardsArchivedState(v)
	return nil
}

func (ProjectsListCardsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ProjectsListCardsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsListCollaboratorsAffiliation) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ProjectsListCollaboratorsAffiliation from json reader.
func (s *ProjectsListCollaboratorsAffiliation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsListCollaboratorsAffiliation to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ProjectsListCollaboratorsAffiliation(v)
	return nil
}

func (ProjectsListColumnsApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsListColumnsApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsListColumnsApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsListColumnsApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsListColumnsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ProjectsListColumnsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsListForOrgOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ProjectsListForOrgOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsListForOrgState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ProjectsListForOrgState from json reader.
func (s *ProjectsListForOrgState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsListForOrgState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ProjectsListForOrgState(v)
	return nil
}

func (ProjectsListForRepoApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsListForRepoApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsListForRepoApplicationJSONGone) WriteJSON(e *json.Encoder)      {}
func (ProjectsListForRepoApplicationJSONGone) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsListForRepoApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ProjectsListForRepoApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsListForRepoApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsListForRepoApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsListForRepoOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ProjectsListForRepoOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsListForRepoState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ProjectsListForRepoState from json reader.
func (s *ProjectsListForRepoState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsListForRepoState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ProjectsListForRepoState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ProjectsListForUserState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ProjectsListForUserState from json reader.
func (s *ProjectsListForUserState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsListForUserState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ProjectsListForUserState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ProjectsMoveCardCreated) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ProjectsMoveCardCreated from json stream.
func (s *ProjectsMoveCardCreated) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsMoveCardCreated to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsMoveCardForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	if s.Errors != nil {
		more.More()
		e.ObjField("errors")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Errors {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsMoveCardForbidden from json stream.
func (s *ProjectsMoveCardForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsMoveCardForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		case "errors":
			s.Errors = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ProjectsMoveCardForbiddenErrorsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Errors = append(s.Errors, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsMoveCardForbiddenErrorsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Code.Set {
		more.More()
		e.ObjField("code")
		s.Code.WriteJSON(e)
	}
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.Resource.Set {
		more.More()
		e.ObjField("resource")
		s.Resource.WriteJSON(e)
	}
	if s.Field.Set {
		more.More()
		e.ObjField("field")
		s.Field.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsMoveCardForbiddenErrorsItem from json stream.
func (s *ProjectsMoveCardForbiddenErrorsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsMoveCardForbiddenErrorsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			s.Code.Reset()
			if err := s.Code.ReadJSON(d); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(d); err != nil {
				return err
			}
		case "field":
			s.Field.Reset()
			if err := s.Field.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsMoveCardReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("position")
	e.Str(s.Position)
	if s.ColumnID.Set {
		more.More()
		e.ObjField("column_id")
		s.ColumnID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsMoveCardReq from json stream.
func (s *ProjectsMoveCardReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsMoveCardReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "position":
			v, err := d.Str()
			s.Position = string(v)
			if err != nil {
				return err
			}
		case "column_id":
			s.ColumnID.Reset()
			if err := s.ColumnID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ProjectsMoveColumnApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsMoveColumnApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsMoveColumnApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsMoveColumnApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsMoveColumnCreated) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ProjectsMoveColumnCreated from json stream.
func (s *ProjectsMoveColumnCreated) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsMoveColumnCreated to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsMoveColumnReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("position")
	e.Str(s.Position)
	e.ObjEnd()
}

// ReadJSON reads ProjectsMoveColumnReq from json stream.
func (s *ProjectsMoveColumnReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsMoveColumnReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "position":
			v, err := d.Str()
			s.Position = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsRemoveCollaboratorNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ProjectsRemoveCollaboratorNoContent from json stream.
func (s *ProjectsRemoveCollaboratorNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsRemoveCollaboratorNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ProjectsUpdateApplicationJSONGone) WriteJSON(e *json.Encoder)      {}
func (ProjectsUpdateApplicationJSONGone) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsUpdateApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsUpdateApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsUpdateCardApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsUpdateCardApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsUpdateCardApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ProjectsUpdateCardApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsUpdateCardApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsUpdateCardApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateCardReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Note.Set {
		more.More()
		e.ObjField("note")
		s.Note.WriteJSON(e)
	}
	if s.Archived.Set {
		more.More()
		e.ObjField("archived")
		s.Archived.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsUpdateCardReq from json stream.
func (s *ProjectsUpdateCardReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsUpdateCardReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(d); err != nil {
				return err
			}
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ProjectsUpdateColumnApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ProjectsUpdateColumnApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ProjectsUpdateColumnApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ProjectsUpdateColumnApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateColumnReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// ReadJSON reads ProjectsUpdateColumnReq from json stream.
func (s *ProjectsUpdateColumnReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsUpdateColumnReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	if s.Errors != nil {
		more.More()
		e.ObjField("errors")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Errors {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsUpdateForbidden from json stream.
func (s *ProjectsUpdateForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsUpdateForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		case "errors":
			s.Errors = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Errors = append(s.Errors, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ProjectsUpdateNotFound from json stream.
func (s *ProjectsUpdateNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsUpdateNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	if s.State.Set {
		more.More()
		e.ObjField("state")
		s.State.WriteJSON(e)
	}
	if s.OrganizationPermission.Set {
		more.More()
		e.ObjField("organization_permission")
		s.OrganizationPermission.WriteJSON(e)
	}
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProjectsUpdateReq from json stream.
func (s *ProjectsUpdateReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsUpdateReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "organization_permission":
			s.OrganizationPermission.Reset()
			if err := s.OrganizationPermission.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateReqOrganizationPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ProjectsUpdateReqOrganizationPermission from json reader.
func (s *ProjectsUpdateReqOrganizationPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProjectsUpdateReqOrganizationPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ProjectsUpdateReqOrganizationPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranch) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	if s.RequiredStatusChecks.Set {
		more.More()
		e.ObjField("required_status_checks")
		s.RequiredStatusChecks.WriteJSON(e)
	}
	if s.RequiredPullRequestReviews.Set {
		more.More()
		e.ObjField("required_pull_request_reviews")
		s.RequiredPullRequestReviews.WriteJSON(e)
	}
	if s.RequiredSignatures.Set {
		more.More()
		e.ObjField("required_signatures")
		s.RequiredSignatures.WriteJSON(e)
	}
	if s.EnforceAdmins.Set {
		more.More()
		e.ObjField("enforce_admins")
		s.EnforceAdmins.WriteJSON(e)
	}
	if s.RequiredLinearHistory.Set {
		more.More()
		e.ObjField("required_linear_history")
		s.RequiredLinearHistory.WriteJSON(e)
	}
	if s.AllowForcePushes.Set {
		more.More()
		e.ObjField("allow_force_pushes")
		s.AllowForcePushes.WriteJSON(e)
	}
	if s.AllowDeletions.Set {
		more.More()
		e.ObjField("allow_deletions")
		s.AllowDeletions.WriteJSON(e)
	}
	if s.Restrictions.Set {
		more.More()
		e.ObjField("restrictions")
		s.Restrictions.WriteJSON(e)
	}
	if s.RequiredConversationResolution.Set {
		more.More()
		e.ObjField("required_conversation_resolution")
		s.RequiredConversationResolution.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranch from json stream.
func (s *ProtectedBranch) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranch to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "required_status_checks":
			s.RequiredStatusChecks.Reset()
			if err := s.RequiredStatusChecks.ReadJSON(d); err != nil {
				return err
			}
		case "required_pull_request_reviews":
			s.RequiredPullRequestReviews.Reset()
			if err := s.RequiredPullRequestReviews.ReadJSON(d); err != nil {
				return err
			}
		case "required_signatures":
			s.RequiredSignatures.Reset()
			if err := s.RequiredSignatures.ReadJSON(d); err != nil {
				return err
			}
		case "enforce_admins":
			s.EnforceAdmins.Reset()
			if err := s.EnforceAdmins.ReadJSON(d); err != nil {
				return err
			}
		case "required_linear_history":
			s.RequiredLinearHistory.Reset()
			if err := s.RequiredLinearHistory.ReadJSON(d); err != nil {
				return err
			}
		case "allow_force_pushes":
			s.AllowForcePushes.Reset()
			if err := s.AllowForcePushes.ReadJSON(d); err != nil {
				return err
			}
		case "allow_deletions":
			s.AllowDeletions.Reset()
			if err := s.AllowDeletions.ReadJSON(d); err != nil {
				return err
			}
		case "restrictions":
			s.Restrictions.Reset()
			if err := s.Restrictions.ReadJSON(d); err != nil {
				return err
			}
		case "required_conversation_resolution":
			s.RequiredConversationResolution.Reset()
			if err := s.RequiredConversationResolution.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchAdminEnforced) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("enabled")
	e.Bool(s.Enabled)
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchAdminEnforced from json stream.
func (s *ProtectedBranchAdminEnforced) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchAdminEnforced to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "enabled":
			v, err := d.Bool()
			s.Enabled = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchAllowDeletions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("enabled")
	e.Bool(s.Enabled)
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchAllowDeletions from json stream.
func (s *ProtectedBranchAllowDeletions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchAllowDeletions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			v, err := d.Bool()
			s.Enabled = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchAllowForcePushes) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("enabled")
	e.Bool(s.Enabled)
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchAllowForcePushes from json stream.
func (s *ProtectedBranchAllowForcePushes) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchAllowForcePushes to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			v, err := d.Bool()
			s.Enabled = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchEnforceAdmins) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("enabled")
	e.Bool(s.Enabled)
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchEnforceAdmins from json stream.
func (s *ProtectedBranchEnforceAdmins) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchEnforceAdmins to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "enabled":
			v, err := d.Bool()
			s.Enabled = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchPullRequestReview) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.DismissalRestrictions.Set {
		more.More()
		e.ObjField("dismissal_restrictions")
		s.DismissalRestrictions.WriteJSON(e)
	}
	more.More()
	e.ObjField("dismiss_stale_reviews")
	e.Bool(s.DismissStaleReviews)
	more.More()
	e.ObjField("require_code_owner_reviews")
	e.Bool(s.RequireCodeOwnerReviews)
	if s.RequiredApprovingReviewCount.Set {
		more.More()
		e.ObjField("required_approving_review_count")
		s.RequiredApprovingReviewCount.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchPullRequestReview from json stream.
func (s *ProtectedBranchPullRequestReview) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchPullRequestReview to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "dismissal_restrictions":
			s.DismissalRestrictions.Reset()
			if err := s.DismissalRestrictions.ReadJSON(d); err != nil {
				return err
			}
		case "dismiss_stale_reviews":
			v, err := d.Bool()
			s.DismissStaleReviews = bool(v)
			if err != nil {
				return err
			}
		case "require_code_owner_reviews":
			v, err := d.Bool()
			s.RequireCodeOwnerReviews = bool(v)
			if err != nil {
				return err
			}
		case "required_approving_review_count":
			s.RequiredApprovingReviewCount.Reset()
			if err := s.RequiredApprovingReviewCount.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchPullRequestReviewDismissalRestrictions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Users != nil {
		more.More()
		e.ObjField("users")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Users {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Teams != nil {
		more.More()
		e.ObjField("teams")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Teams {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.UsersURL.Set {
		more.More()
		e.ObjField("users_url")
		s.UsersURL.WriteJSON(e)
	}
	if s.TeamsURL.Set {
		more.More()
		e.ObjField("teams_url")
		s.TeamsURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchPullRequestReviewDismissalRestrictions from json stream.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchPullRequestReviewDismissalRestrictions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "users":
			s.Users = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem SimpleUser
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Users = append(s.Users, elem)
				return nil
			}); err != nil {
				return err
			}
		case "teams":
			s.Teams = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Team
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Teams = append(s.Teams, elem)
				return nil
			}); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "users_url":
			s.UsersURL.Reset()
			if err := s.UsersURL.ReadJSON(d); err != nil {
				return err
			}
		case "teams_url":
			s.TeamsURL.Reset()
			if err := s.TeamsURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchRequiredConversationResolution) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Enabled.Set {
		more.More()
		e.ObjField("enabled")
		s.Enabled.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchRequiredConversationResolution from json stream.
func (s *ProtectedBranchRequiredConversationResolution) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchRequiredConversationResolution to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchRequiredLinearHistory) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("enabled")
	e.Bool(s.Enabled)
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchRequiredLinearHistory from json stream.
func (s *ProtectedBranchRequiredLinearHistory) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchRequiredLinearHistory to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			v, err := d.Bool()
			s.Enabled = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchRequiredPullRequestReviews) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	if s.DismissStaleReviews.Set {
		more.More()
		e.ObjField("dismiss_stale_reviews")
		s.DismissStaleReviews.WriteJSON(e)
	}
	if s.RequireCodeOwnerReviews.Set {
		more.More()
		e.ObjField("require_code_owner_reviews")
		s.RequireCodeOwnerReviews.WriteJSON(e)
	}
	if s.RequiredApprovingReviewCount.Set {
		more.More()
		e.ObjField("required_approving_review_count")
		s.RequiredApprovingReviewCount.WriteJSON(e)
	}
	if s.DismissalRestrictions.Set {
		more.More()
		e.ObjField("dismissal_restrictions")
		s.DismissalRestrictions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchRequiredPullRequestReviews from json stream.
func (s *ProtectedBranchRequiredPullRequestReviews) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchRequiredPullRequestReviews to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "dismiss_stale_reviews":
			s.DismissStaleReviews.Reset()
			if err := s.DismissStaleReviews.ReadJSON(d); err != nil {
				return err
			}
		case "require_code_owner_reviews":
			s.RequireCodeOwnerReviews.Reset()
			if err := s.RequireCodeOwnerReviews.ReadJSON(d); err != nil {
				return err
			}
		case "required_approving_review_count":
			s.RequiredApprovingReviewCount.Reset()
			if err := s.RequiredApprovingReviewCount.ReadJSON(d); err != nil {
				return err
			}
		case "dismissal_restrictions":
			s.DismissalRestrictions.Reset()
			if err := s.DismissalRestrictions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("users_url")
	json.WriteURI(e, s.UsersURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("users")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Users {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("teams")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Teams {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions from json stream.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "users_url":
			v, err := json.ReadURI(d)
			s.UsersURL = v
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "users":
			s.Users = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem SimpleUser
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Users = append(s.Users, elem)
				return nil
			}); err != nil {
				return err
			}
		case "teams":
			s.Teams = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Team
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Teams = append(s.Teams, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchRequiredSignatures) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("enabled")
	e.Bool(s.Enabled)
	e.ObjEnd()
}

// ReadJSON reads ProtectedBranchRequiredSignatures from json stream.
func (s *ProtectedBranchRequiredSignatures) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProtectedBranchRequiredSignatures to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "enabled":
			v, err := d.Bool()
			s.Enabled = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PublicUser) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("followers_url")
	json.WriteURI(e, s.FollowersURL)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("subscriptions_url")
	json.WriteURI(e, s.SubscriptionsURL)
	more.More()
	e.ObjField("organizations_url")
	json.WriteURI(e, s.OrganizationsURL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	more.More()
	e.ObjField("received_events_url")
	json.WriteURI(e, s.ReceivedEventsURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("site_admin")
	e.Bool(s.SiteAdmin)
	more.More()
	e.ObjField("name")
	s.Name.WriteJSON(e)
	more.More()
	e.ObjField("company")
	s.Company.WriteJSON(e)
	more.More()
	e.ObjField("blog")
	s.Blog.WriteJSON(e)
	more.More()
	e.ObjField("location")
	s.Location.WriteJSON(e)
	more.More()
	e.ObjField("email")
	s.Email.WriteJSON(e)
	more.More()
	e.ObjField("hireable")
	s.Hireable.WriteJSON(e)
	more.More()
	e.ObjField("bio")
	s.Bio.WriteJSON(e)
	if s.TwitterUsername.Set {
		more.More()
		e.ObjField("twitter_username")
		s.TwitterUsername.WriteJSON(e)
	}
	more.More()
	e.ObjField("public_repos")
	e.Int(s.PublicRepos)
	more.More()
	e.ObjField("public_gists")
	e.Int(s.PublicGists)
	more.More()
	e.ObjField("followers")
	e.Int(s.Followers)
	more.More()
	e.ObjField("following")
	e.Int(s.Following)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	if s.Plan.Set {
		more.More()
		e.ObjField("plan")
		s.Plan.WriteJSON(e)
	}
	if s.SuspendedAt.Set {
		more.More()
		e.ObjField("suspended_at")
		s.SuspendedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.PrivateGists.Set {
		more.More()
		e.ObjField("private_gists")
		s.PrivateGists.WriteJSON(e)
	}
	if s.TotalPrivateRepos.Set {
		more.More()
		e.ObjField("total_private_repos")
		s.TotalPrivateRepos.WriteJSON(e)
	}
	if s.OwnedPrivateRepos.Set {
		more.More()
		e.ObjField("owned_private_repos")
		s.OwnedPrivateRepos.WriteJSON(e)
	}
	if s.DiskUsage.Set {
		more.More()
		e.ObjField("disk_usage")
		s.DiskUsage.WriteJSON(e)
	}
	if s.Collaborators.Set {
		more.More()
		e.ObjField("collaborators")
		s.Collaborators.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PublicUser from json stream.
func (s *PublicUser) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PublicUser to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := json.ReadURI(d)
			s.FollowersURL = v
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "subscriptions_url":
			v, err := json.ReadURI(d)
			s.SubscriptionsURL = v
			if err != nil {
				return err
			}
		case "organizations_url":
			v, err := json.ReadURI(d)
			s.OrganizationsURL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "received_events_url":
			v, err := json.ReadURI(d)
			s.ReceivedEventsURL = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "site_admin":
			v, err := d.Bool()
			s.SiteAdmin = bool(v)
			if err != nil {
				return err
			}
		case "name":
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "company":
			if err := s.Company.ReadJSON(d); err != nil {
				return err
			}
		case "blog":
			if err := s.Blog.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "hireable":
			if err := s.Hireable.ReadJSON(d); err != nil {
				return err
			}
		case "bio":
			if err := s.Bio.ReadJSON(d); err != nil {
				return err
			}
		case "twitter_username":
			s.TwitterUsername.Reset()
			if err := s.TwitterUsername.ReadJSON(d); err != nil {
				return err
			}
		case "public_repos":
			v, err := d.Int()
			s.PublicRepos = int(v)
			if err != nil {
				return err
			}
		case "public_gists":
			v, err := d.Int()
			s.PublicGists = int(v)
			if err != nil {
				return err
			}
		case "followers":
			v, err := d.Int()
			s.Followers = int(v)
			if err != nil {
				return err
			}
		case "following":
			v, err := d.Int()
			s.Following = int(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "plan":
			s.Plan.Reset()
			if err := s.Plan.ReadJSON(d); err != nil {
				return err
			}
		case "suspended_at":
			s.SuspendedAt.Reset()
			if err := s.SuspendedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "private_gists":
			s.PrivateGists.Reset()
			if err := s.PrivateGists.ReadJSON(d); err != nil {
				return err
			}
		case "total_private_repos":
			s.TotalPrivateRepos.Reset()
			if err := s.TotalPrivateRepos.ReadJSON(d); err != nil {
				return err
			}
		case "owned_private_repos":
			s.OwnedPrivateRepos.Reset()
			if err := s.OwnedPrivateRepos.ReadJSON(d); err != nil {
				return err
			}
		case "disk_usage":
			s.DiskUsage.Reset()
			if err := s.DiskUsage.ReadJSON(d); err != nil {
				return err
			}
		case "collaborators":
			s.Collaborators.Reset()
			if err := s.Collaborators.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PublicUserPlan) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("collaborators")
	e.Int(s.Collaborators)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("space")
	e.Int(s.Space)
	more.More()
	e.ObjField("private_repos")
	e.Int(s.PrivateRepos)
	e.ObjEnd()
}

// ReadJSON reads PublicUserPlan from json stream.
func (s *PublicUserPlan) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PublicUserPlan to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "collaborators":
			v, err := d.Int()
			s.Collaborators = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "space":
			v, err := d.Int()
			s.Space = int(v)
			if err != nil {
				return err
			}
		case "private_repos":
			v, err := d.Int()
			s.PrivateRepos = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequest) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("diff_url")
	json.WriteURI(e, s.DiffURL)
	more.More()
	e.ObjField("patch_url")
	json.WriteURI(e, s.PatchURL)
	more.More()
	e.ObjField("issue_url")
	json.WriteURI(e, s.IssueURL)
	more.More()
	e.ObjField("commits_url")
	json.WriteURI(e, s.CommitsURL)
	more.More()
	e.ObjField("review_comments_url")
	json.WriteURI(e, s.ReviewCommentsURL)
	more.More()
	e.ObjField("review_comment_url")
	e.Str(s.ReviewCommentURL)
	more.More()
	e.ObjField("comments_url")
	json.WriteURI(e, s.CommentsURL)
	more.More()
	e.ObjField("statuses_url")
	json.WriteURI(e, s.StatusesURL)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("locked")
	e.Bool(s.Locked)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("body")
	s.Body.WriteJSON(e)
	more.More()
	e.ObjField("labels")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Labels {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("milestone")
	s.Milestone.WriteJSON(e)
	if s.ActiveLockReason.Set {
		more.More()
		e.ObjField("active_lock_reason")
		s.ActiveLockReason.WriteJSON(e)
	}
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("closed_at")
	s.ClosedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("merged_at")
	s.MergedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("merge_commit_sha")
	s.MergeCommitSha.WriteJSON(e)
	more.More()
	e.ObjField("assignee")
	s.Assignee.WriteJSON(e)
	if s.Assignees.Set {
		more.More()
		e.ObjField("assignees")
		s.Assignees.WriteJSON(e)
	}
	if s.RequestedReviewers.Set {
		more.More()
		e.ObjField("requested_reviewers")
		s.RequestedReviewers.WriteJSON(e)
	}
	if s.RequestedTeams.Set {
		more.More()
		e.ObjField("requested_teams")
		s.RequestedTeams.WriteJSON(e)
	}
	more.More()
	e.ObjField("head")
	s.Head.WriteJSON(e)
	more.More()
	e.ObjField("base")
	s.Base.WriteJSON(e)
	more.More()
	e.ObjField("_links")
	s.Links.WriteJSON(e)
	more.More()
	e.ObjField("author_association")
	s.AuthorAssociation.WriteJSON(e)
	more.More()
	e.ObjField("auto_merge")
	s.AutoMerge.WriteJSON(e)
	if s.Draft.Set {
		more.More()
		e.ObjField("draft")
		s.Draft.WriteJSON(e)
	}
	more.More()
	e.ObjField("merged")
	e.Bool(s.Merged)
	more.More()
	e.ObjField("mergeable")
	s.Mergeable.WriteJSON(e)
	if s.Rebaseable.Set {
		more.More()
		e.ObjField("rebaseable")
		s.Rebaseable.WriteJSON(e)
	}
	more.More()
	e.ObjField("mergeable_state")
	e.Str(s.MergeableState)
	more.More()
	e.ObjField("merged_by")
	s.MergedBy.WriteJSON(e)
	more.More()
	e.ObjField("comments")
	e.Int(s.Comments)
	more.More()
	e.ObjField("review_comments")
	e.Int(s.ReviewComments)
	more.More()
	e.ObjField("maintainer_can_modify")
	e.Bool(s.MaintainerCanModify)
	more.More()
	e.ObjField("commits")
	e.Int(s.Commits)
	more.More()
	e.ObjField("additions")
	e.Int(s.Additions)
	more.More()
	e.ObjField("deletions")
	e.Int(s.Deletions)
	more.More()
	e.ObjField("changed_files")
	e.Int(s.ChangedFiles)
	e.ObjEnd()
}

// ReadJSON reads PullRequest from json stream.
func (s *PullRequest) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequest to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "diff_url":
			v, err := json.ReadURI(d)
			s.DiffURL = v
			if err != nil {
				return err
			}
		case "patch_url":
			v, err := json.ReadURI(d)
			s.PatchURL = v
			if err != nil {
				return err
			}
		case "issue_url":
			v, err := json.ReadURI(d)
			s.IssueURL = v
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := json.ReadURI(d)
			s.CommitsURL = v
			if err != nil {
				return err
			}
		case "review_comments_url":
			v, err := json.ReadURI(d)
			s.ReviewCommentsURL = v
			if err != nil {
				return err
			}
		case "review_comment_url":
			v, err := d.Str()
			s.ReviewCommentURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := json.ReadURI(d)
			s.CommentsURL = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := json.ReadURI(d)
			s.StatusesURL = v
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "locked":
			v, err := d.Bool()
			s.Locked = bool(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "labels":
			s.Labels = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem PullRequestLabelsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Labels = append(s.Labels, elem)
				return nil
			}); err != nil {
				return err
			}
		case "milestone":
			if err := s.Milestone.ReadJSON(d); err != nil {
				return err
			}
		case "active_lock_reason":
			s.ActiveLockReason.Reset()
			if err := s.ActiveLockReason.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "closed_at":
			if err := s.ClosedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "merged_at":
			if err := s.MergedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "merge_commit_sha":
			if err := s.MergeCommitSha.ReadJSON(d); err != nil {
				return err
			}
		case "assignee":
			if err := s.Assignee.ReadJSON(d); err != nil {
				return err
			}
		case "assignees":
			s.Assignees.Reset()
			if err := s.Assignees.ReadJSON(d); err != nil {
				return err
			}
		case "requested_reviewers":
			s.RequestedReviewers.Reset()
			if err := s.RequestedReviewers.ReadJSON(d); err != nil {
				return err
			}
		case "requested_teams":
			s.RequestedTeams.Reset()
			if err := s.RequestedTeams.ReadJSON(d); err != nil {
				return err
			}
		case "head":
			if err := s.Head.ReadJSON(d); err != nil {
				return err
			}
		case "base":
			if err := s.Base.ReadJSON(d); err != nil {
				return err
			}
		case "_links":
			if err := s.Links.ReadJSON(d); err != nil {
				return err
			}
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		case "auto_merge":
			if err := s.AutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "draft":
			s.Draft.Reset()
			if err := s.Draft.ReadJSON(d); err != nil {
				return err
			}
		case "merged":
			v, err := d.Bool()
			s.Merged = bool(v)
			if err != nil {
				return err
			}
		case "mergeable":
			if err := s.Mergeable.ReadJSON(d); err != nil {
				return err
			}
		case "rebaseable":
			s.Rebaseable.Reset()
			if err := s.Rebaseable.ReadJSON(d); err != nil {
				return err
			}
		case "mergeable_state":
			v, err := d.Str()
			s.MergeableState = string(v)
			if err != nil {
				return err
			}
		case "merged_by":
			if err := s.MergedBy.ReadJSON(d); err != nil {
				return err
			}
		case "comments":
			v, err := d.Int()
			s.Comments = int(v)
			if err != nil {
				return err
			}
		case "review_comments":
			v, err := d.Int()
			s.ReviewComments = int(v)
			if err != nil {
				return err
			}
		case "maintainer_can_modify":
			v, err := d.Bool()
			s.MaintainerCanModify = bool(v)
			if err != nil {
				return err
			}
		case "commits":
			v, err := d.Int()
			s.Commits = int(v)
			if err != nil {
				return err
			}
		case "additions":
			v, err := d.Int()
			s.Additions = int(v)
			if err != nil {
				return err
			}
		case "deletions":
			v, err := d.Int()
			s.Deletions = int(v)
			if err != nil {
				return err
			}
		case "changed_files":
			v, err := d.Int()
			s.ChangedFiles = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestBase) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("label")
	e.Str(s.Label)
	more.More()
	e.ObjField("ref")
	e.Str(s.Ref)
	more.More()
	e.ObjField("repo")
	s.Repo.WriteJSON(e)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestBase from json stream.
func (s *PullRequestBase) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestBase to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "label":
			v, err := d.Str()
			s.Label = string(v)
			if err != nil {
				return err
			}
		case "ref":
			v, err := d.Str()
			s.Ref = string(v)
			if err != nil {
				return err
			}
		case "repo":
			if err := s.Repo.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestBaseRepo) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("archive_url")
	e.Str(s.ArchiveURL)
	more.More()
	e.ObjField("assignees_url")
	e.Str(s.AssigneesURL)
	more.More()
	e.ObjField("blobs_url")
	e.Str(s.BlobsURL)
	more.More()
	e.ObjField("branches_url")
	e.Str(s.BranchesURL)
	more.More()
	e.ObjField("collaborators_url")
	e.Str(s.CollaboratorsURL)
	more.More()
	e.ObjField("comments_url")
	e.Str(s.CommentsURL)
	more.More()
	e.ObjField("commits_url")
	e.Str(s.CommitsURL)
	more.More()
	e.ObjField("compare_url")
	e.Str(s.CompareURL)
	more.More()
	e.ObjField("contents_url")
	e.Str(s.ContentsURL)
	more.More()
	e.ObjField("contributors_url")
	json.WriteURI(e, s.ContributorsURL)
	more.More()
	e.ObjField("deployments_url")
	json.WriteURI(e, s.DeploymentsURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("downloads_url")
	json.WriteURI(e, s.DownloadsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("fork")
	e.Bool(s.Fork)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("full_name")
	e.Str(s.FullName)
	more.More()
	e.ObjField("git_commits_url")
	e.Str(s.GitCommitsURL)
	more.More()
	e.ObjField("git_refs_url")
	e.Str(s.GitRefsURL)
	more.More()
	e.ObjField("git_tags_url")
	e.Str(s.GitTagsURL)
	more.More()
	e.ObjField("hooks_url")
	json.WriteURI(e, s.HooksURL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("issue_comment_url")
	e.Str(s.IssueCommentURL)
	more.More()
	e.ObjField("issue_events_url")
	e.Str(s.IssueEventsURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("keys_url")
	e.Str(s.KeysURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("languages_url")
	json.WriteURI(e, s.LanguagesURL)
	more.More()
	e.ObjField("merges_url")
	json.WriteURI(e, s.MergesURL)
	more.More()
	e.ObjField("milestones_url")
	e.Str(s.MilestonesURL)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("notifications_url")
	e.Str(s.NotificationsURL)
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("private")
	e.Bool(s.Private)
	more.More()
	e.ObjField("pulls_url")
	e.Str(s.PullsURL)
	more.More()
	e.ObjField("releases_url")
	e.Str(s.ReleasesURL)
	more.More()
	e.ObjField("stargazers_url")
	json.WriteURI(e, s.StargazersURL)
	more.More()
	e.ObjField("statuses_url")
	e.Str(s.StatusesURL)
	more.More()
	e.ObjField("subscribers_url")
	json.WriteURI(e, s.SubscribersURL)
	more.More()
	e.ObjField("subscription_url")
	json.WriteURI(e, s.SubscriptionURL)
	more.More()
	e.ObjField("tags_url")
	json.WriteURI(e, s.TagsURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("trees_url")
	e.Str(s.TreesURL)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("clone_url")
	e.Str(s.CloneURL)
	more.More()
	e.ObjField("default_branch")
	e.Str(s.DefaultBranch)
	more.More()
	e.ObjField("forks")
	e.Int(s.Forks)
	more.More()
	e.ObjField("forks_count")
	e.Int(s.ForksCount)
	more.More()
	e.ObjField("git_url")
	e.Str(s.GitURL)
	more.More()
	e.ObjField("has_downloads")
	e.Bool(s.HasDownloads)
	more.More()
	e.ObjField("has_issues")
	e.Bool(s.HasIssues)
	more.More()
	e.ObjField("has_projects")
	e.Bool(s.HasProjects)
	more.More()
	e.ObjField("has_wiki")
	e.Bool(s.HasWiki)
	more.More()
	e.ObjField("has_pages")
	e.Bool(s.HasPages)
	more.More()
	e.ObjField("homepage")
	s.Homepage.WriteJSON(e)
	more.More()
	e.ObjField("language")
	s.Language.WriteJSON(e)
	if s.MasterBranch.Set {
		more.More()
		e.ObjField("master_branch")
		s.MasterBranch.WriteJSON(e)
	}
	more.More()
	e.ObjField("archived")
	e.Bool(s.Archived)
	more.More()
	e.ObjField("disabled")
	e.Bool(s.Disabled)
	more.More()
	e.ObjField("mirror_url")
	s.MirrorURL.WriteJSON(e)
	more.More()
	e.ObjField("open_issues")
	e.Int(s.OpenIssues)
	more.More()
	e.ObjField("open_issues_count")
	e.Int(s.OpenIssuesCount)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	more.More()
	e.ObjField("license")
	s.License.WriteJSON(e)
	more.More()
	e.ObjField("pushed_at")
	json.WriteDateTime(e, s.PushedAt)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	more.More()
	e.ObjField("ssh_url")
	e.Str(s.SSHURL)
	more.More()
	e.ObjField("stargazers_count")
	e.Int(s.StargazersCount)
	more.More()
	e.ObjField("svn_url")
	json.WriteURI(e, s.SvnURL)
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("watchers")
	e.Int(s.Watchers)
	more.More()
	e.ObjField("watchers_count")
	e.Int(s.WatchersCount)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	if s.AllowForking.Set {
		more.More()
		e.ObjField("allow_forking")
		s.AllowForking.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullRequestBaseRepo from json stream.
func (s *PullRequestBaseRepo) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestBaseRepo to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "archive_url":
			v, err := d.Str()
			s.ArchiveURL = string(v)
			if err != nil {
				return err
			}
		case "assignees_url":
			v, err := d.Str()
			s.AssigneesURL = string(v)
			if err != nil {
				return err
			}
		case "blobs_url":
			v, err := d.Str()
			s.BlobsURL = string(v)
			if err != nil {
				return err
			}
		case "branches_url":
			v, err := d.Str()
			s.BranchesURL = string(v)
			if err != nil {
				return err
			}
		case "collaborators_url":
			v, err := d.Str()
			s.CollaboratorsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := d.Str()
			s.CommentsURL = string(v)
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := d.Str()
			s.CommitsURL = string(v)
			if err != nil {
				return err
			}
		case "compare_url":
			v, err := d.Str()
			s.CompareURL = string(v)
			if err != nil {
				return err
			}
		case "contents_url":
			v, err := d.Str()
			s.ContentsURL = string(v)
			if err != nil {
				return err
			}
		case "contributors_url":
			v, err := json.ReadURI(d)
			s.ContributorsURL = v
			if err != nil {
				return err
			}
		case "deployments_url":
			v, err := json.ReadURI(d)
			s.DeploymentsURL = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "downloads_url":
			v, err := json.ReadURI(d)
			s.DownloadsURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "fork":
			v, err := d.Bool()
			s.Fork = bool(v)
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "full_name":
			v, err := d.Str()
			s.FullName = string(v)
			if err != nil {
				return err
			}
		case "git_commits_url":
			v, err := d.Str()
			s.GitCommitsURL = string(v)
			if err != nil {
				return err
			}
		case "git_refs_url":
			v, err := d.Str()
			s.GitRefsURL = string(v)
			if err != nil {
				return err
			}
		case "git_tags_url":
			v, err := d.Str()
			s.GitTagsURL = string(v)
			if err != nil {
				return err
			}
		case "hooks_url":
			v, err := json.ReadURI(d)
			s.HooksURL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "issue_comment_url":
			v, err := d.Str()
			s.IssueCommentURL = string(v)
			if err != nil {
				return err
			}
		case "issue_events_url":
			v, err := d.Str()
			s.IssueEventsURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "keys_url":
			v, err := d.Str()
			s.KeysURL = string(v)
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "languages_url":
			v, err := json.ReadURI(d)
			s.LanguagesURL = v
			if err != nil {
				return err
			}
		case "merges_url":
			v, err := json.ReadURI(d)
			s.MergesURL = v
			if err != nil {
				return err
			}
		case "milestones_url":
			v, err := d.Str()
			s.MilestonesURL = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "notifications_url":
			v, err := d.Str()
			s.NotificationsURL = string(v)
			if err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			v, err := d.Bool()
			s.Private = bool(v)
			if err != nil {
				return err
			}
		case "pulls_url":
			v, err := d.Str()
			s.PullsURL = string(v)
			if err != nil {
				return err
			}
		case "releases_url":
			v, err := d.Str()
			s.ReleasesURL = string(v)
			if err != nil {
				return err
			}
		case "stargazers_url":
			v, err := json.ReadURI(d)
			s.StargazersURL = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := d.Str()
			s.StatusesURL = string(v)
			if err != nil {
				return err
			}
		case "subscribers_url":
			v, err := json.ReadURI(d)
			s.SubscribersURL = v
			if err != nil {
				return err
			}
		case "subscription_url":
			v, err := json.ReadURI(d)
			s.SubscriptionURL = v
			if err != nil {
				return err
			}
		case "tags_url":
			v, err := json.ReadURI(d)
			s.TagsURL = v
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "trees_url":
			v, err := d.Str()
			s.TreesURL = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "clone_url":
			v, err := d.Str()
			s.CloneURL = string(v)
			if err != nil {
				return err
			}
		case "default_branch":
			v, err := d.Str()
			s.DefaultBranch = string(v)
			if err != nil {
				return err
			}
		case "forks":
			v, err := d.Int()
			s.Forks = int(v)
			if err != nil {
				return err
			}
		case "forks_count":
			v, err := d.Int()
			s.ForksCount = int(v)
			if err != nil {
				return err
			}
		case "git_url":
			v, err := d.Str()
			s.GitURL = string(v)
			if err != nil {
				return err
			}
		case "has_downloads":
			v, err := d.Bool()
			s.HasDownloads = bool(v)
			if err != nil {
				return err
			}
		case "has_issues":
			v, err := d.Bool()
			s.HasIssues = bool(v)
			if err != nil {
				return err
			}
		case "has_projects":
			v, err := d.Bool()
			s.HasProjects = bool(v)
			if err != nil {
				return err
			}
		case "has_wiki":
			v, err := d.Bool()
			s.HasWiki = bool(v)
			if err != nil {
				return err
			}
		case "has_pages":
			v, err := d.Bool()
			s.HasPages = bool(v)
			if err != nil {
				return err
			}
		case "homepage":
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(d); err != nil {
				return err
			}
		case "archived":
			v, err := d.Bool()
			s.Archived = bool(v)
			if err != nil {
				return err
			}
		case "disabled":
			v, err := d.Bool()
			s.Disabled = bool(v)
			if err != nil {
				return err
			}
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues":
			v, err := d.Int()
			s.OpenIssues = int(v)
			if err != nil {
				return err
			}
		case "open_issues_count":
			v, err := d.Int()
			s.OpenIssuesCount = int(v)
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "license":
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "pushed_at":
			v, err := json.ReadDateTime(d)
			s.PushedAt = v
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		case "ssh_url":
			v, err := d.Str()
			s.SSHURL = string(v)
			if err != nil {
				return err
			}
		case "stargazers_count":
			v, err := d.Int()
			s.StargazersCount = int(v)
			if err != nil {
				return err
			}
		case "svn_url":
			v, err := json.ReadURI(d)
			s.SvnURL = v
			if err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "watchers":
			v, err := d.Int()
			s.Watchers = int(v)
			if err != nil {
				return err
			}
		case "watchers_count":
			v, err := d.Int()
			s.WatchersCount = int(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestBaseRepoOwner) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	more.More()
	e.ObjField("followers_url")
	json.WriteURI(e, s.FollowersURL)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("organizations_url")
	json.WriteURI(e, s.OrganizationsURL)
	more.More()
	e.ObjField("received_events_url")
	json.WriteURI(e, s.ReceivedEventsURL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("site_admin")
	e.Bool(s.SiteAdmin)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("subscriptions_url")
	json.WriteURI(e, s.SubscriptionsURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads PullRequestBaseRepoOwner from json stream.
func (s *PullRequestBaseRepoOwner) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestBaseRepoOwner to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := json.ReadURI(d)
			s.FollowersURL = v
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "organizations_url":
			v, err := json.ReadURI(d)
			s.OrganizationsURL = v
			if err != nil {
				return err
			}
		case "received_events_url":
			v, err := json.ReadURI(d)
			s.ReceivedEventsURL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "site_admin":
			v, err := d.Bool()
			s.SiteAdmin = bool(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "subscriptions_url":
			v, err := json.ReadURI(d)
			s.SubscriptionsURL = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestBaseRepoPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("admin")
	e.Bool(s.Admin)
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	more.More()
	e.ObjField("push")
	e.Bool(s.Push)
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	more.More()
	e.ObjField("pull")
	e.Bool(s.Pull)
	e.ObjEnd()
}

// ReadJSON reads PullRequestBaseRepoPermissions from json stream.
func (s *PullRequestBaseRepoPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestBaseRepoPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			v, err := d.Bool()
			s.Admin = bool(v)
			if err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			v, err := d.Bool()
			s.Push = bool(v)
			if err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "pull":
			v, err := d.Bool()
			s.Pull = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestBaseUser) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	more.More()
	e.ObjField("followers_url")
	json.WriteURI(e, s.FollowersURL)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("organizations_url")
	json.WriteURI(e, s.OrganizationsURL)
	more.More()
	e.ObjField("received_events_url")
	json.WriteURI(e, s.ReceivedEventsURL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("site_admin")
	e.Bool(s.SiteAdmin)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("subscriptions_url")
	json.WriteURI(e, s.SubscriptionsURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads PullRequestBaseUser from json stream.
func (s *PullRequestBaseUser) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestBaseUser to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := json.ReadURI(d)
			s.FollowersURL = v
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "organizations_url":
			v, err := json.ReadURI(d)
			s.OrganizationsURL = v
			if err != nil {
				return err
			}
		case "received_events_url":
			v, err := json.ReadURI(d)
			s.ReceivedEventsURL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "site_admin":
			v, err := d.Bool()
			s.SiteAdmin = bool(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "subscriptions_url":
			v, err := json.ReadURI(d)
			s.SubscriptionsURL = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestHead) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("label")
	e.Str(s.Label)
	more.More()
	e.ObjField("ref")
	e.Str(s.Ref)
	more.More()
	e.ObjField("repo")
	s.Repo.WriteJSON(e)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestHead from json stream.
func (s *PullRequestHead) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestHead to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "label":
			v, err := d.Str()
			s.Label = string(v)
			if err != nil {
				return err
			}
		case "ref":
			v, err := d.Str()
			s.Ref = string(v)
			if err != nil {
				return err
			}
		case "repo":
			if err := s.Repo.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestHeadRepo) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("archive_url")
	e.Str(s.ArchiveURL)
	more.More()
	e.ObjField("assignees_url")
	e.Str(s.AssigneesURL)
	more.More()
	e.ObjField("blobs_url")
	e.Str(s.BlobsURL)
	more.More()
	e.ObjField("branches_url")
	e.Str(s.BranchesURL)
	more.More()
	e.ObjField("collaborators_url")
	e.Str(s.CollaboratorsURL)
	more.More()
	e.ObjField("comments_url")
	e.Str(s.CommentsURL)
	more.More()
	e.ObjField("commits_url")
	e.Str(s.CommitsURL)
	more.More()
	e.ObjField("compare_url")
	e.Str(s.CompareURL)
	more.More()
	e.ObjField("contents_url")
	e.Str(s.ContentsURL)
	more.More()
	e.ObjField("contributors_url")
	json.WriteURI(e, s.ContributorsURL)
	more.More()
	e.ObjField("deployments_url")
	json.WriteURI(e, s.DeploymentsURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("downloads_url")
	json.WriteURI(e, s.DownloadsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("fork")
	e.Bool(s.Fork)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("full_name")
	e.Str(s.FullName)
	more.More()
	e.ObjField("git_commits_url")
	e.Str(s.GitCommitsURL)
	more.More()
	e.ObjField("git_refs_url")
	e.Str(s.GitRefsURL)
	more.More()
	e.ObjField("git_tags_url")
	e.Str(s.GitTagsURL)
	more.More()
	e.ObjField("hooks_url")
	json.WriteURI(e, s.HooksURL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("issue_comment_url")
	e.Str(s.IssueCommentURL)
	more.More()
	e.ObjField("issue_events_url")
	e.Str(s.IssueEventsURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("keys_url")
	e.Str(s.KeysURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("languages_url")
	json.WriteURI(e, s.LanguagesURL)
	more.More()
	e.ObjField("merges_url")
	json.WriteURI(e, s.MergesURL)
	more.More()
	e.ObjField("milestones_url")
	e.Str(s.MilestonesURL)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("notifications_url")
	e.Str(s.NotificationsURL)
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("private")
	e.Bool(s.Private)
	more.More()
	e.ObjField("pulls_url")
	e.Str(s.PullsURL)
	more.More()
	e.ObjField("releases_url")
	e.Str(s.ReleasesURL)
	more.More()
	e.ObjField("stargazers_url")
	json.WriteURI(e, s.StargazersURL)
	more.More()
	e.ObjField("statuses_url")
	e.Str(s.StatusesURL)
	more.More()
	e.ObjField("subscribers_url")
	json.WriteURI(e, s.SubscribersURL)
	more.More()
	e.ObjField("subscription_url")
	json.WriteURI(e, s.SubscriptionURL)
	more.More()
	e.ObjField("tags_url")
	json.WriteURI(e, s.TagsURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("trees_url")
	e.Str(s.TreesURL)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("clone_url")
	e.Str(s.CloneURL)
	more.More()
	e.ObjField("default_branch")
	e.Str(s.DefaultBranch)
	more.More()
	e.ObjField("forks")
	e.Int(s.Forks)
	more.More()
	e.ObjField("forks_count")
	e.Int(s.ForksCount)
	more.More()
	e.ObjField("git_url")
	e.Str(s.GitURL)
	more.More()
	e.ObjField("has_downloads")
	e.Bool(s.HasDownloads)
	more.More()
	e.ObjField("has_issues")
	e.Bool(s.HasIssues)
	more.More()
	e.ObjField("has_projects")
	e.Bool(s.HasProjects)
	more.More()
	e.ObjField("has_wiki")
	e.Bool(s.HasWiki)
	more.More()
	e.ObjField("has_pages")
	e.Bool(s.HasPages)
	more.More()
	e.ObjField("homepage")
	s.Homepage.WriteJSON(e)
	more.More()
	e.ObjField("language")
	s.Language.WriteJSON(e)
	if s.MasterBranch.Set {
		more.More()
		e.ObjField("master_branch")
		s.MasterBranch.WriteJSON(e)
	}
	more.More()
	e.ObjField("archived")
	e.Bool(s.Archived)
	more.More()
	e.ObjField("disabled")
	e.Bool(s.Disabled)
	more.More()
	e.ObjField("mirror_url")
	s.MirrorURL.WriteJSON(e)
	more.More()
	e.ObjField("open_issues")
	e.Int(s.OpenIssues)
	more.More()
	e.ObjField("open_issues_count")
	e.Int(s.OpenIssuesCount)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	more.More()
	e.ObjField("license")
	s.License.WriteJSON(e)
	more.More()
	e.ObjField("pushed_at")
	json.WriteDateTime(e, s.PushedAt)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	more.More()
	e.ObjField("ssh_url")
	e.Str(s.SSHURL)
	more.More()
	e.ObjField("stargazers_count")
	e.Int(s.StargazersCount)
	more.More()
	e.ObjField("svn_url")
	json.WriteURI(e, s.SvnURL)
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("watchers")
	e.Int(s.Watchers)
	more.More()
	e.ObjField("watchers_count")
	e.Int(s.WatchersCount)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	if s.AllowForking.Set {
		more.More()
		e.ObjField("allow_forking")
		s.AllowForking.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullRequestHeadRepo from json stream.
func (s *PullRequestHeadRepo) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestHeadRepo to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "archive_url":
			v, err := d.Str()
			s.ArchiveURL = string(v)
			if err != nil {
				return err
			}
		case "assignees_url":
			v, err := d.Str()
			s.AssigneesURL = string(v)
			if err != nil {
				return err
			}
		case "blobs_url":
			v, err := d.Str()
			s.BlobsURL = string(v)
			if err != nil {
				return err
			}
		case "branches_url":
			v, err := d.Str()
			s.BranchesURL = string(v)
			if err != nil {
				return err
			}
		case "collaborators_url":
			v, err := d.Str()
			s.CollaboratorsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := d.Str()
			s.CommentsURL = string(v)
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := d.Str()
			s.CommitsURL = string(v)
			if err != nil {
				return err
			}
		case "compare_url":
			v, err := d.Str()
			s.CompareURL = string(v)
			if err != nil {
				return err
			}
		case "contents_url":
			v, err := d.Str()
			s.ContentsURL = string(v)
			if err != nil {
				return err
			}
		case "contributors_url":
			v, err := json.ReadURI(d)
			s.ContributorsURL = v
			if err != nil {
				return err
			}
		case "deployments_url":
			v, err := json.ReadURI(d)
			s.DeploymentsURL = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "downloads_url":
			v, err := json.ReadURI(d)
			s.DownloadsURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "fork":
			v, err := d.Bool()
			s.Fork = bool(v)
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "full_name":
			v, err := d.Str()
			s.FullName = string(v)
			if err != nil {
				return err
			}
		case "git_commits_url":
			v, err := d.Str()
			s.GitCommitsURL = string(v)
			if err != nil {
				return err
			}
		case "git_refs_url":
			v, err := d.Str()
			s.GitRefsURL = string(v)
			if err != nil {
				return err
			}
		case "git_tags_url":
			v, err := d.Str()
			s.GitTagsURL = string(v)
			if err != nil {
				return err
			}
		case "hooks_url":
			v, err := json.ReadURI(d)
			s.HooksURL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "issue_comment_url":
			v, err := d.Str()
			s.IssueCommentURL = string(v)
			if err != nil {
				return err
			}
		case "issue_events_url":
			v, err := d.Str()
			s.IssueEventsURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "keys_url":
			v, err := d.Str()
			s.KeysURL = string(v)
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "languages_url":
			v, err := json.ReadURI(d)
			s.LanguagesURL = v
			if err != nil {
				return err
			}
		case "merges_url":
			v, err := json.ReadURI(d)
			s.MergesURL = v
			if err != nil {
				return err
			}
		case "milestones_url":
			v, err := d.Str()
			s.MilestonesURL = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "notifications_url":
			v, err := d.Str()
			s.NotificationsURL = string(v)
			if err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			v, err := d.Bool()
			s.Private = bool(v)
			if err != nil {
				return err
			}
		case "pulls_url":
			v, err := d.Str()
			s.PullsURL = string(v)
			if err != nil {
				return err
			}
		case "releases_url":
			v, err := d.Str()
			s.ReleasesURL = string(v)
			if err != nil {
				return err
			}
		case "stargazers_url":
			v, err := json.ReadURI(d)
			s.StargazersURL = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := d.Str()
			s.StatusesURL = string(v)
			if err != nil {
				return err
			}
		case "subscribers_url":
			v, err := json.ReadURI(d)
			s.SubscribersURL = v
			if err != nil {
				return err
			}
		case "subscription_url":
			v, err := json.ReadURI(d)
			s.SubscriptionURL = v
			if err != nil {
				return err
			}
		case "tags_url":
			v, err := json.ReadURI(d)
			s.TagsURL = v
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "trees_url":
			v, err := d.Str()
			s.TreesURL = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "clone_url":
			v, err := d.Str()
			s.CloneURL = string(v)
			if err != nil {
				return err
			}
		case "default_branch":
			v, err := d.Str()
			s.DefaultBranch = string(v)
			if err != nil {
				return err
			}
		case "forks":
			v, err := d.Int()
			s.Forks = int(v)
			if err != nil {
				return err
			}
		case "forks_count":
			v, err := d.Int()
			s.ForksCount = int(v)
			if err != nil {
				return err
			}
		case "git_url":
			v, err := d.Str()
			s.GitURL = string(v)
			if err != nil {
				return err
			}
		case "has_downloads":
			v, err := d.Bool()
			s.HasDownloads = bool(v)
			if err != nil {
				return err
			}
		case "has_issues":
			v, err := d.Bool()
			s.HasIssues = bool(v)
			if err != nil {
				return err
			}
		case "has_projects":
			v, err := d.Bool()
			s.HasProjects = bool(v)
			if err != nil {
				return err
			}
		case "has_wiki":
			v, err := d.Bool()
			s.HasWiki = bool(v)
			if err != nil {
				return err
			}
		case "has_pages":
			v, err := d.Bool()
			s.HasPages = bool(v)
			if err != nil {
				return err
			}
		case "homepage":
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(d); err != nil {
				return err
			}
		case "archived":
			v, err := d.Bool()
			s.Archived = bool(v)
			if err != nil {
				return err
			}
		case "disabled":
			v, err := d.Bool()
			s.Disabled = bool(v)
			if err != nil {
				return err
			}
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues":
			v, err := d.Int()
			s.OpenIssues = int(v)
			if err != nil {
				return err
			}
		case "open_issues_count":
			v, err := d.Int()
			s.OpenIssuesCount = int(v)
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "license":
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "pushed_at":
			v, err := json.ReadDateTime(d)
			s.PushedAt = v
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		case "ssh_url":
			v, err := d.Str()
			s.SSHURL = string(v)
			if err != nil {
				return err
			}
		case "stargazers_count":
			v, err := d.Int()
			s.StargazersCount = int(v)
			if err != nil {
				return err
			}
		case "svn_url":
			v, err := json.ReadURI(d)
			s.SvnURL = v
			if err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "watchers":
			v, err := d.Int()
			s.Watchers = int(v)
			if err != nil {
				return err
			}
		case "watchers_count":
			v, err := d.Int()
			s.WatchersCount = int(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestHeadRepoLicense) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("url")
	s.URL.WriteJSON(e)
	more.More()
	e.ObjField("spdx_id")
	s.SpdxID.WriteJSON(e)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	e.ObjEnd()
}

// ReadJSON reads PullRequestHeadRepoLicense from json stream.
func (s *PullRequestHeadRepoLicense) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestHeadRepoLicense to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "url":
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "spdx_id":
			if err := s.SpdxID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestHeadRepoOwner) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	more.More()
	e.ObjField("followers_url")
	json.WriteURI(e, s.FollowersURL)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("organizations_url")
	json.WriteURI(e, s.OrganizationsURL)
	more.More()
	e.ObjField("received_events_url")
	json.WriteURI(e, s.ReceivedEventsURL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("site_admin")
	e.Bool(s.SiteAdmin)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("subscriptions_url")
	json.WriteURI(e, s.SubscriptionsURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads PullRequestHeadRepoOwner from json stream.
func (s *PullRequestHeadRepoOwner) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestHeadRepoOwner to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := json.ReadURI(d)
			s.FollowersURL = v
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "organizations_url":
			v, err := json.ReadURI(d)
			s.OrganizationsURL = v
			if err != nil {
				return err
			}
		case "received_events_url":
			v, err := json.ReadURI(d)
			s.ReceivedEventsURL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "site_admin":
			v, err := d.Bool()
			s.SiteAdmin = bool(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "subscriptions_url":
			v, err := json.ReadURI(d)
			s.SubscriptionsURL = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestHeadRepoPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("admin")
	e.Bool(s.Admin)
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	more.More()
	e.ObjField("push")
	e.Bool(s.Push)
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	more.More()
	e.ObjField("pull")
	e.Bool(s.Pull)
	e.ObjEnd()
}

// ReadJSON reads PullRequestHeadRepoPermissions from json stream.
func (s *PullRequestHeadRepoPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestHeadRepoPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			v, err := d.Bool()
			s.Admin = bool(v)
			if err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			v, err := d.Bool()
			s.Push = bool(v)
			if err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "pull":
			v, err := d.Bool()
			s.Pull = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestHeadUser) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	more.More()
	e.ObjField("followers_url")
	json.WriteURI(e, s.FollowersURL)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("organizations_url")
	json.WriteURI(e, s.OrganizationsURL)
	more.More()
	e.ObjField("received_events_url")
	json.WriteURI(e, s.ReceivedEventsURL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("site_admin")
	e.Bool(s.SiteAdmin)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("subscriptions_url")
	json.WriteURI(e, s.SubscriptionsURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads PullRequestHeadUser from json stream.
func (s *PullRequestHeadUser) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestHeadUser to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := json.ReadURI(d)
			s.FollowersURL = v
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "organizations_url":
			v, err := json.ReadURI(d)
			s.OrganizationsURL = v
			if err != nil {
				return err
			}
		case "received_events_url":
			v, err := json.ReadURI(d)
			s.ReceivedEventsURL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "site_admin":
			v, err := d.Bool()
			s.SiteAdmin = bool(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "subscriptions_url":
			v, err := json.ReadURI(d)
			s.SubscriptionsURL = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestLabelsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Color.Set {
		more.More()
		e.ObjField("color")
		s.Color.WriteJSON(e)
	}
	if s.Default.Set {
		more.More()
		e.ObjField("default")
		s.Default.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullRequestLabelsItem from json stream.
func (s *PullRequestLabelsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestLabelsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "color":
			s.Color.Reset()
			if err := s.Color.ReadJSON(d); err != nil {
				return err
			}
		case "default":
			s.Default.Reset()
			if err := s.Default.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestLinks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("comments")
	s.Comments.WriteJSON(e)
	more.More()
	e.ObjField("commits")
	s.Commits.WriteJSON(e)
	more.More()
	e.ObjField("statuses")
	s.Statuses.WriteJSON(e)
	more.More()
	e.ObjField("html")
	s.HTML.WriteJSON(e)
	more.More()
	e.ObjField("issue")
	s.Issue.WriteJSON(e)
	more.More()
	e.ObjField("review_comments")
	s.ReviewComments.WriteJSON(e)
	more.More()
	e.ObjField("review_comment")
	s.ReviewComment.WriteJSON(e)
	more.More()
	e.ObjField("self")
	s.Self.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestLinks from json stream.
func (s *PullRequestLinks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestLinks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "comments":
			if err := s.Comments.ReadJSON(d); err != nil {
				return err
			}
		case "commits":
			if err := s.Commits.ReadJSON(d); err != nil {
				return err
			}
		case "statuses":
			if err := s.Statuses.ReadJSON(d); err != nil {
				return err
			}
		case "html":
			if err := s.HTML.ReadJSON(d); err != nil {
				return err
			}
		case "issue":
			if err := s.Issue.ReadJSON(d); err != nil {
				return err
			}
		case "review_comments":
			if err := s.ReviewComments.ReadJSON(d); err != nil {
				return err
			}
		case "review_comment":
			if err := s.ReviewComment.ReadJSON(d); err != nil {
				return err
			}
		case "self":
			if err := s.Self.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMergeResult) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("merged")
	e.Bool(s.Merged)
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	e.ObjEnd()
}

// ReadJSON reads PullRequestMergeResult from json stream.
func (s *PullRequestMergeResult) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestMergeResult to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "merged":
			v, err := d.Bool()
			s.Merged = bool(v)
			if err != nil {
				return err
			}
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMinimal) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("head")
	s.Head.WriteJSON(e)
	more.More()
	e.ObjField("base")
	s.Base.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestMinimal from json stream.
func (s *PullRequestMinimal) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestMinimal to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "head":
			if err := s.Head.ReadJSON(d); err != nil {
				return err
			}
		case "base":
			if err := s.Base.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMinimalBase) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("ref")
	e.Str(s.Ref)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("repo")
	s.Repo.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestMinimalBase from json stream.
func (s *PullRequestMinimalBase) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestMinimalBase to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "ref":
			v, err := d.Str()
			s.Ref = string(v)
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "repo":
			if err := s.Repo.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMinimalBaseRepo) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// ReadJSON reads PullRequestMinimalBaseRepo from json stream.
func (s *PullRequestMinimalBaseRepo) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestMinimalBaseRepo to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMinimalHead) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("ref")
	e.Str(s.Ref)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("repo")
	s.Repo.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestMinimalHead from json stream.
func (s *PullRequestMinimalHead) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestMinimalHead to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "ref":
			v, err := d.Str()
			s.Ref = string(v)
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "repo":
			if err := s.Repo.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMinimalHeadRepo) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	e.ObjEnd()
}

// ReadJSON reads PullRequestMinimalHeadRepo from json stream.
func (s *PullRequestMinimalHeadRepo) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestMinimalHeadRepo to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReview) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("pull_request_url")
	json.WriteURI(e, s.PullRequestURL)
	more.More()
	e.ObjField("_links")
	s.Links.WriteJSON(e)
	if s.SubmittedAt.Set {
		more.More()
		e.ObjField("submitted_at")
		s.SubmittedAt.WriteJSON(e, json.WriteDateTime)
	}
	more.More()
	e.ObjField("commit_id")
	e.Str(s.CommitID)
	if s.BodyHTML.Set {
		more.More()
		e.ObjField("body_html")
		s.BodyHTML.WriteJSON(e)
	}
	if s.BodyText.Set {
		more.More()
		e.ObjField("body_text")
		s.BodyText.WriteJSON(e)
	}
	more.More()
	e.ObjField("author_association")
	s.AuthorAssociation.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestReview from json stream.
func (s *PullRequestReview) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReview to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "pull_request_url":
			v, err := json.ReadURI(d)
			s.PullRequestURL = v
			if err != nil {
				return err
			}
		case "_links":
			if err := s.Links.ReadJSON(d); err != nil {
				return err
			}
		case "submitted_at":
			s.SubmittedAt.Reset()
			if err := s.SubmittedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "commit_id":
			v, err := d.Str()
			s.CommitID = string(v)
			if err != nil {
				return err
			}
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(d); err != nil {
				return err
			}
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(d); err != nil {
				return err
			}
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewComment) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("pull_request_review_id")
	s.PullRequestReviewID.WriteJSON(e)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("diff_hunk")
	e.Str(s.DiffHunk)
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	more.More()
	e.ObjField("position")
	e.Int(s.Position)
	more.More()
	e.ObjField("original_position")
	e.Int(s.OriginalPosition)
	more.More()
	e.ObjField("commit_id")
	e.Str(s.CommitID)
	more.More()
	e.ObjField("original_commit_id")
	e.Str(s.OriginalCommitID)
	if s.InReplyToID.Set {
		more.More()
		e.ObjField("in_reply_to_id")
		s.InReplyToID.WriteJSON(e)
	}
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("pull_request_url")
	json.WriteURI(e, s.PullRequestURL)
	more.More()
	e.ObjField("author_association")
	s.AuthorAssociation.WriteJSON(e)
	more.More()
	e.ObjField("_links")
	s.Links.WriteJSON(e)
	if s.StartLine.Set {
		more.More()
		e.ObjField("start_line")
		s.StartLine.WriteJSON(e)
	}
	if s.OriginalStartLine.Set {
		more.More()
		e.ObjField("original_start_line")
		s.OriginalStartLine.WriteJSON(e)
	}
	if s.StartSide.Set {
		more.More()
		e.ObjField("start_side")
		s.StartSide.WriteJSON(e)
	}
	if s.Line.Set {
		more.More()
		e.ObjField("line")
		s.Line.WriteJSON(e)
	}
	if s.OriginalLine.Set {
		more.More()
		e.ObjField("original_line")
		s.OriginalLine.WriteJSON(e)
	}
	if s.Side.Set {
		more.More()
		e.ObjField("side")
		s.Side.WriteJSON(e)
	}
	if s.Reactions.Set {
		more.More()
		e.ObjField("reactions")
		s.Reactions.WriteJSON(e)
	}
	if s.BodyHTML.Set {
		more.More()
		e.ObjField("body_html")
		s.BodyHTML.WriteJSON(e)
	}
	if s.BodyText.Set {
		more.More()
		e.ObjField("body_text")
		s.BodyText.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullRequestReviewComment from json stream.
func (s *PullRequestReviewComment) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewComment to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "pull_request_review_id":
			if err := s.PullRequestReviewID.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "diff_hunk":
			v, err := d.Str()
			s.DiffHunk = string(v)
			if err != nil {
				return err
			}
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "position":
			v, err := d.Int()
			s.Position = int(v)
			if err != nil {
				return err
			}
		case "original_position":
			v, err := d.Int()
			s.OriginalPosition = int(v)
			if err != nil {
				return err
			}
		case "commit_id":
			v, err := d.Str()
			s.CommitID = string(v)
			if err != nil {
				return err
			}
		case "original_commit_id":
			v, err := d.Str()
			s.OriginalCommitID = string(v)
			if err != nil {
				return err
			}
		case "in_reply_to_id":
			s.InReplyToID.Reset()
			if err := s.InReplyToID.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "pull_request_url":
			v, err := json.ReadURI(d)
			s.PullRequestURL = v
			if err != nil {
				return err
			}
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		case "_links":
			if err := s.Links.ReadJSON(d); err != nil {
				return err
			}
		case "start_line":
			s.StartLine.Reset()
			if err := s.StartLine.ReadJSON(d); err != nil {
				return err
			}
		case "original_start_line":
			s.OriginalStartLine.Reset()
			if err := s.OriginalStartLine.ReadJSON(d); err != nil {
				return err
			}
		case "start_side":
			s.StartSide.Reset()
			if err := s.StartSide.ReadJSON(d); err != nil {
				return err
			}
		case "line":
			s.Line.Reset()
			if err := s.Line.ReadJSON(d); err != nil {
				return err
			}
		case "original_line":
			s.OriginalLine.Reset()
			if err := s.OriginalLine.ReadJSON(d); err != nil {
				return err
			}
		case "side":
			s.Side.Reset()
			if err := s.Side.ReadJSON(d); err != nil {
				return err
			}
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(d); err != nil {
				return err
			}
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(d); err != nil {
				return err
			}
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentLinks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("self")
	s.Self.WriteJSON(e)
	more.More()
	e.ObjField("html")
	s.HTML.WriteJSON(e)
	more.More()
	e.ObjField("pull_request")
	s.PullRequest.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestReviewCommentLinks from json stream.
func (s *PullRequestReviewCommentLinks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewCommentLinks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "self":
			if err := s.Self.ReadJSON(d); err != nil {
				return err
			}
		case "html":
			if err := s.HTML.ReadJSON(d); err != nil {
				return err
			}
		case "pull_request":
			if err := s.PullRequest.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentLinksHTML) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("href")
	json.WriteURI(e, s.Href)
	e.ObjEnd()
}

// ReadJSON reads PullRequestReviewCommentLinksHTML from json stream.
func (s *PullRequestReviewCommentLinksHTML) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewCommentLinksHTML to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "href":
			v, err := json.ReadURI(d)
			s.Href = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentLinksPullRequest) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("href")
	json.WriteURI(e, s.Href)
	e.ObjEnd()
}

// ReadJSON reads PullRequestReviewCommentLinksPullRequest from json stream.
func (s *PullRequestReviewCommentLinksPullRequest) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewCommentLinksPullRequest to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "href":
			v, err := json.ReadURI(d)
			s.Href = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentLinksSelf) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("href")
	json.WriteURI(e, s.Href)
	e.ObjEnd()
}

// ReadJSON reads PullRequestReviewCommentLinksSelf from json stream.
func (s *PullRequestReviewCommentLinksSelf) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewCommentLinksSelf to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "href":
			v, err := json.ReadURI(d)
			s.Href = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentSide) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullRequestReviewCommentSide from json reader.
func (s *PullRequestReviewCommentSide) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewCommentSide to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullRequestReviewCommentSide(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentStartSide) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullRequestReviewCommentStartSide from json reader.
func (s *PullRequestReviewCommentStartSide) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewCommentStartSide to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullRequestReviewCommentStartSide(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewLinks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("html")
	s.HTML.WriteJSON(e)
	more.More()
	e.ObjField("pull_request")
	s.PullRequest.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestReviewLinks from json stream.
func (s *PullRequestReviewLinks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewLinks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "html":
			if err := s.HTML.ReadJSON(d); err != nil {
				return err
			}
		case "pull_request":
			if err := s.PullRequest.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewLinksHTML) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("href")
	e.Str(s.Href)
	e.ObjEnd()
}

// ReadJSON reads PullRequestReviewLinksHTML from json stream.
func (s *PullRequestReviewLinksHTML) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewLinksHTML to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "href":
			v, err := d.Str()
			s.Href = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewLinksPullRequest) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("href")
	e.Str(s.Href)
	e.ObjEnd()
}

// ReadJSON reads PullRequestReviewLinksPullRequest from json stream.
func (s *PullRequestReviewLinksPullRequest) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewLinksPullRequest to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "href":
			v, err := d.Str()
			s.Href = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewRequest) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("users")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Users {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("teams")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Teams {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads PullRequestReviewRequest from json stream.
func (s *PullRequestReviewRequest) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestReviewRequest to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "users":
			s.Users = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem SimpleUser
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Users = append(s.Users, elem)
				return nil
			}); err != nil {
				return err
			}
		case "teams":
			s.Teams = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Team
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Teams = append(s.Teams, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("diff_url")
	json.WriteURI(e, s.DiffURL)
	more.More()
	e.ObjField("patch_url")
	json.WriteURI(e, s.PatchURL)
	more.More()
	e.ObjField("issue_url")
	json.WriteURI(e, s.IssueURL)
	more.More()
	e.ObjField("commits_url")
	json.WriteURI(e, s.CommitsURL)
	more.More()
	e.ObjField("review_comments_url")
	json.WriteURI(e, s.ReviewCommentsURL)
	more.More()
	e.ObjField("review_comment_url")
	e.Str(s.ReviewCommentURL)
	more.More()
	e.ObjField("comments_url")
	json.WriteURI(e, s.CommentsURL)
	more.More()
	e.ObjField("statuses_url")
	json.WriteURI(e, s.StatusesURL)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("locked")
	e.Bool(s.Locked)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("body")
	s.Body.WriteJSON(e)
	more.More()
	e.ObjField("labels")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Labels {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("milestone")
	s.Milestone.WriteJSON(e)
	if s.ActiveLockReason.Set {
		more.More()
		e.ObjField("active_lock_reason")
		s.ActiveLockReason.WriteJSON(e)
	}
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("closed_at")
	s.ClosedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("merged_at")
	s.MergedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("merge_commit_sha")
	s.MergeCommitSha.WriteJSON(e)
	more.More()
	e.ObjField("assignee")
	s.Assignee.WriteJSON(e)
	if s.Assignees.Set {
		more.More()
		e.ObjField("assignees")
		s.Assignees.WriteJSON(e)
	}
	if s.RequestedReviewers.Set {
		more.More()
		e.ObjField("requested_reviewers")
		s.RequestedReviewers.WriteJSON(e)
	}
	if s.RequestedTeams.Set {
		more.More()
		e.ObjField("requested_teams")
		s.RequestedTeams.WriteJSON(e)
	}
	more.More()
	e.ObjField("head")
	s.Head.WriteJSON(e)
	more.More()
	e.ObjField("base")
	s.Base.WriteJSON(e)
	more.More()
	e.ObjField("_links")
	s.Links.WriteJSON(e)
	more.More()
	e.ObjField("author_association")
	s.AuthorAssociation.WriteJSON(e)
	more.More()
	e.ObjField("auto_merge")
	s.AutoMerge.WriteJSON(e)
	if s.Draft.Set {
		more.More()
		e.ObjField("draft")
		s.Draft.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullRequestSimple from json stream.
func (s *PullRequestSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "diff_url":
			v, err := json.ReadURI(d)
			s.DiffURL = v
			if err != nil {
				return err
			}
		case "patch_url":
			v, err := json.ReadURI(d)
			s.PatchURL = v
			if err != nil {
				return err
			}
		case "issue_url":
			v, err := json.ReadURI(d)
			s.IssueURL = v
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := json.ReadURI(d)
			s.CommitsURL = v
			if err != nil {
				return err
			}
		case "review_comments_url":
			v, err := json.ReadURI(d)
			s.ReviewCommentsURL = v
			if err != nil {
				return err
			}
		case "review_comment_url":
			v, err := d.Str()
			s.ReviewCommentURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := json.ReadURI(d)
			s.CommentsURL = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := json.ReadURI(d)
			s.StatusesURL = v
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "locked":
			v, err := d.Bool()
			s.Locked = bool(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "labels":
			s.Labels = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem PullRequestSimpleLabelsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Labels = append(s.Labels, elem)
				return nil
			}); err != nil {
				return err
			}
		case "milestone":
			if err := s.Milestone.ReadJSON(d); err != nil {
				return err
			}
		case "active_lock_reason":
			s.ActiveLockReason.Reset()
			if err := s.ActiveLockReason.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "closed_at":
			if err := s.ClosedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "merged_at":
			if err := s.MergedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "merge_commit_sha":
			if err := s.MergeCommitSha.ReadJSON(d); err != nil {
				return err
			}
		case "assignee":
			if err := s.Assignee.ReadJSON(d); err != nil {
				return err
			}
		case "assignees":
			s.Assignees.Reset()
			if err := s.Assignees.ReadJSON(d); err != nil {
				return err
			}
		case "requested_reviewers":
			s.RequestedReviewers.Reset()
			if err := s.RequestedReviewers.ReadJSON(d); err != nil {
				return err
			}
		case "requested_teams":
			s.RequestedTeams.Reset()
			if err := s.RequestedTeams.ReadJSON(d); err != nil {
				return err
			}
		case "head":
			if err := s.Head.ReadJSON(d); err != nil {
				return err
			}
		case "base":
			if err := s.Base.ReadJSON(d); err != nil {
				return err
			}
		case "_links":
			if err := s.Links.ReadJSON(d); err != nil {
				return err
			}
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		case "auto_merge":
			if err := s.AutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "draft":
			s.Draft.Reset()
			if err := s.Draft.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestSimpleBase) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("label")
	e.Str(s.Label)
	more.More()
	e.ObjField("ref")
	e.Str(s.Ref)
	more.More()
	e.ObjField("repo")
	s.Repo.WriteJSON(e)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestSimpleBase from json stream.
func (s *PullRequestSimpleBase) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestSimpleBase to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "label":
			v, err := d.Str()
			s.Label = string(v)
			if err != nil {
				return err
			}
		case "ref":
			v, err := d.Str()
			s.Ref = string(v)
			if err != nil {
				return err
			}
		case "repo":
			if err := s.Repo.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestSimpleHead) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("label")
	e.Str(s.Label)
	more.More()
	e.ObjField("ref")
	e.Str(s.Ref)
	more.More()
	e.ObjField("repo")
	s.Repo.WriteJSON(e)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestSimpleHead from json stream.
func (s *PullRequestSimpleHead) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestSimpleHead to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "label":
			v, err := d.Str()
			s.Label = string(v)
			if err != nil {
				return err
			}
		case "ref":
			v, err := d.Str()
			s.Ref = string(v)
			if err != nil {
				return err
			}
		case "repo":
			if err := s.Repo.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestSimpleLabelsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Color.Set {
		more.More()
		e.ObjField("color")
		s.Color.WriteJSON(e)
	}
	if s.Default.Set {
		more.More()
		e.ObjField("default")
		s.Default.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullRequestSimpleLabelsItem from json stream.
func (s *PullRequestSimpleLabelsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestSimpleLabelsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "color":
			s.Color.Reset()
			if err := s.Color.ReadJSON(d); err != nil {
				return err
			}
		case "default":
			s.Default.Reset()
			if err := s.Default.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestSimpleLinks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("comments")
	s.Comments.WriteJSON(e)
	more.More()
	e.ObjField("commits")
	s.Commits.WriteJSON(e)
	more.More()
	e.ObjField("statuses")
	s.Statuses.WriteJSON(e)
	more.More()
	e.ObjField("html")
	s.HTML.WriteJSON(e)
	more.More()
	e.ObjField("issue")
	s.Issue.WriteJSON(e)
	more.More()
	e.ObjField("review_comments")
	s.ReviewComments.WriteJSON(e)
	more.More()
	e.ObjField("review_comment")
	s.ReviewComment.WriteJSON(e)
	more.More()
	e.ObjField("self")
	s.Self.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullRequestSimpleLinks from json stream.
func (s *PullRequestSimpleLinks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestSimpleLinks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "comments":
			if err := s.Comments.ReadJSON(d); err != nil {
				return err
			}
		case "commits":
			if err := s.Commits.ReadJSON(d); err != nil {
				return err
			}
		case "statuses":
			if err := s.Statuses.ReadJSON(d); err != nil {
				return err
			}
		case "html":
			if err := s.HTML.ReadJSON(d); err != nil {
				return err
			}
		case "issue":
			if err := s.Issue.ReadJSON(d); err != nil {
				return err
			}
		case "review_comments":
			if err := s.ReviewComments.ReadJSON(d); err != nil {
				return err
			}
		case "review_comment":
			if err := s.ReviewComment.ReadJSON(d); err != nil {
				return err
			}
		case "self":
			if err := s.Self.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullRequestState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullRequestState from json reader.
func (s *PullRequestState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullRequestState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullRequestState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsCheckIfMergedNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PullsCheckIfMergedNoContent from json stream.
func (s *PullsCheckIfMergedNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsCheckIfMergedNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsCheckIfMergedNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PullsCheckIfMergedNotFound from json stream.
func (s *PullsCheckIfMergedNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsCheckIfMergedNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReplyForReviewCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads PullsCreateReplyForReviewCommentReq from json stream.
func (s *PullsCreateReplyForReviewCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsCreateReplyForReviewCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Title.Set {
		more.More()
		e.ObjField("title")
		s.Title.WriteJSON(e)
	}
	more.More()
	e.ObjField("head")
	e.Str(s.Head)
	more.More()
	e.ObjField("base")
	e.Str(s.Base)
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	if s.MaintainerCanModify.Set {
		more.More()
		e.ObjField("maintainer_can_modify")
		s.MaintainerCanModify.WriteJSON(e)
	}
	if s.Draft.Set {
		more.More()
		e.ObjField("draft")
		s.Draft.WriteJSON(e)
	}
	if s.Issue.Set {
		more.More()
		e.ObjField("issue")
		s.Issue.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullsCreateReq from json stream.
func (s *PullsCreateReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsCreateReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "head":
			v, err := d.Str()
			s.Head = string(v)
			if err != nil {
				return err
			}
		case "base":
			v, err := d.Str()
			s.Base = string(v)
			if err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "maintainer_can_modify":
			s.MaintainerCanModify.Reset()
			if err := s.MaintainerCanModify.ReadJSON(d); err != nil {
				return err
			}
		case "draft":
			s.Draft.Reset()
			if err := s.Draft.ReadJSON(d); err != nil {
				return err
			}
		case "issue":
			s.Issue.Reset()
			if err := s.Issue.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	if s.CommitID.Set {
		more.More()
		e.ObjField("commit_id")
		s.CommitID.WriteJSON(e)
	}
	if s.Path.Set {
		more.More()
		e.ObjField("path")
		s.Path.WriteJSON(e)
	}
	if s.Position.Set {
		more.More()
		e.ObjField("position")
		s.Position.WriteJSON(e)
	}
	if s.Side.Set {
		more.More()
		e.ObjField("side")
		s.Side.WriteJSON(e)
	}
	if s.Line.Set {
		more.More()
		e.ObjField("line")
		s.Line.WriteJSON(e)
	}
	if s.StartLine.Set {
		more.More()
		e.ObjField("start_line")
		s.StartLine.WriteJSON(e)
	}
	if s.StartSide.Set {
		more.More()
		e.ObjField("start_side")
		s.StartSide.WriteJSON(e)
	}
	if s.InReplyTo.Set {
		more.More()
		e.ObjField("in_reply_to")
		s.InReplyTo.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullsCreateReviewCommentReq from json stream.
func (s *PullsCreateReviewCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsCreateReviewCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "commit_id":
			s.CommitID.Reset()
			if err := s.CommitID.ReadJSON(d); err != nil {
				return err
			}
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(d); err != nil {
				return err
			}
		case "position":
			s.Position.Reset()
			if err := s.Position.ReadJSON(d); err != nil {
				return err
			}
		case "side":
			s.Side.Reset()
			if err := s.Side.ReadJSON(d); err != nil {
				return err
			}
		case "line":
			s.Line.Reset()
			if err := s.Line.ReadJSON(d); err != nil {
				return err
			}
		case "start_line":
			s.StartLine.Reset()
			if err := s.StartLine.ReadJSON(d); err != nil {
				return err
			}
		case "start_side":
			s.StartSide.Reset()
			if err := s.StartSide.ReadJSON(d); err != nil {
				return err
			}
		case "in_reply_to":
			s.InReplyTo.Reset()
			if err := s.InReplyTo.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewCommentReqSide) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsCreateReviewCommentReqSide from json reader.
func (s *PullsCreateReviewCommentReqSide) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsCreateReviewCommentReqSide to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsCreateReviewCommentReqSide(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewCommentReqStartSide) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsCreateReviewCommentReqStartSide from json reader.
func (s *PullsCreateReviewCommentReqStartSide) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsCreateReviewCommentReqStartSide to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsCreateReviewCommentReqStartSide(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.CommitID.Set {
		more.More()
		e.ObjField("commit_id")
		s.CommitID.WriteJSON(e)
	}
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	if s.Event.Set {
		more.More()
		e.ObjField("event")
		s.Event.WriteJSON(e)
	}
	if s.Comments != nil {
		more.More()
		e.ObjField("comments")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Comments {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads PullsCreateReviewReq from json stream.
func (s *PullsCreateReviewReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsCreateReviewReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "commit_id":
			s.CommitID.Reset()
			if err := s.CommitID.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "event":
			s.Event.Reset()
			if err := s.Event.ReadJSON(d); err != nil {
				return err
			}
		case "comments":
			s.Comments = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem PullsCreateReviewReqCommentsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Comments = append(s.Comments, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewReqCommentsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	if s.Position.Set {
		more.More()
		e.ObjField("position")
		s.Position.WriteJSON(e)
	}
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	if s.Line.Set {
		more.More()
		e.ObjField("line")
		s.Line.WriteJSON(e)
	}
	if s.Side.Set {
		more.More()
		e.ObjField("side")
		s.Side.WriteJSON(e)
	}
	if s.StartLine.Set {
		more.More()
		e.ObjField("start_line")
		s.StartLine.WriteJSON(e)
	}
	if s.StartSide.Set {
		more.More()
		e.ObjField("start_side")
		s.StartSide.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullsCreateReviewReqCommentsItem from json stream.
func (s *PullsCreateReviewReqCommentsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsCreateReviewReqCommentsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "position":
			s.Position.Reset()
			if err := s.Position.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "line":
			s.Line.Reset()
			if err := s.Line.ReadJSON(d); err != nil {
				return err
			}
		case "side":
			s.Side.Reset()
			if err := s.Side.ReadJSON(d); err != nil {
				return err
			}
		case "start_line":
			s.StartLine.Reset()
			if err := s.StartLine.ReadJSON(d); err != nil {
				return err
			}
		case "start_side":
			s.StartSide.Reset()
			if err := s.StartSide.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewReqEvent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsCreateReviewReqEvent from json reader.
func (s *PullsCreateReviewReqEvent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsCreateReviewReqEvent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsCreateReviewReqEvent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsDeleteReviewCommentNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads PullsDeleteReviewCommentNoContent from json stream.
func (s *PullsDeleteReviewCommentNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsDeleteReviewCommentNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsDismissReviewReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	if s.Event.Set {
		more.More()
		e.ObjField("event")
		s.Event.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullsDismissReviewReq from json stream.
func (s *PullsDismissReviewReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsDismissReviewReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "event":
			s.Event.Reset()
			if err := s.Event.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (PullsGetApplicationJSONInternalServerError) WriteJSON(e *json.Encoder)      {}
func (PullsGetApplicationJSONInternalServerError) ReadJSON(d *json.Decoder) error { return nil }

func (PullsGetApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (PullsGetApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (PullsListCommentsForReviewOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (PullsListCommentsForReviewOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s PullsListDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsListDirection from json reader.
func (s *PullsListDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsListDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsListDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsListReviewCommentsDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsListReviewCommentsDirection from json reader.
func (s *PullsListReviewCommentsDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsListReviewCommentsDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsListReviewCommentsDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsListReviewCommentsForRepoDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsListReviewCommentsForRepoDirection from json reader.
func (s *PullsListReviewCommentsForRepoDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsListReviewCommentsForRepoDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsListReviewCommentsForRepoDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsListReviewCommentsForRepoSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsListReviewCommentsForRepoSort from json reader.
func (s *PullsListReviewCommentsForRepoSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsListReviewCommentsForRepoSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsListReviewCommentsForRepoSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsListReviewCommentsSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsListReviewCommentsSort from json reader.
func (s *PullsListReviewCommentsSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsListReviewCommentsSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsListReviewCommentsSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsListSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsListSort from json reader.
func (s *PullsListSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsListSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsListSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsListState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsListState from json reader.
func (s *PullsListState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsListState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsListState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsMergeConflict) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullsMergeConflict from json stream.
func (s *PullsMergeConflict) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsMergeConflict to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsMergeMethodNotAllowed) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullsMergeMethodNotAllowed from json stream.
func (s *PullsMergeMethodNotAllowed) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsMergeMethodNotAllowed to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsMergeReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.CommitTitle.Set {
		more.More()
		e.ObjField("commit_title")
		s.CommitTitle.WriteJSON(e)
	}
	if s.CommitMessage.Set {
		more.More()
		e.ObjField("commit_message")
		s.CommitMessage.WriteJSON(e)
	}
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	if s.MergeMethod.Set {
		more.More()
		e.ObjField("merge_method")
		s.MergeMethod.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullsMergeReq from json stream.
func (s *PullsMergeReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsMergeReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "commit_title":
			s.CommitTitle.Reset()
			if err := s.CommitTitle.ReadJSON(d); err != nil {
				return err
			}
		case "commit_message":
			s.CommitMessage.Reset()
			if err := s.CommitMessage.ReadJSON(d); err != nil {
				return err
			}
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		case "merge_method":
			s.MergeMethod.Reset()
			if err := s.MergeMethod.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsMergeReqMergeMethod) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsMergeReqMergeMethod from json reader.
func (s *PullsMergeReqMergeMethod) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsMergeReqMergeMethod to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsMergeReqMergeMethod(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsRemoveRequestedReviewersReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("reviewers")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Reviewers {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	if s.TeamReviewers != nil {
		more.More()
		e.ObjField("team_reviewers")
		more.Down()
		e.ArrStart()
		for _, elem := range s.TeamReviewers {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads PullsRemoveRequestedReviewersReq from json stream.
func (s *PullsRemoveRequestedReviewersReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsRemoveRequestedReviewersReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "reviewers":
			s.Reviewers = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Reviewers = append(s.Reviewers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "team_reviewers":
			s.TeamReviewers = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.TeamReviewers = append(s.TeamReviewers, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (PullsSubmitReviewApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (PullsSubmitReviewApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (PullsSubmitReviewApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (PullsSubmitReviewApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s PullsSubmitReviewReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	more.More()
	e.ObjField("event")
	s.Event.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads PullsSubmitReviewReq from json stream.
func (s *PullsSubmitReviewReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsSubmitReviewReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "event":
			if err := s.Event.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsSubmitReviewReqEvent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsSubmitReviewReqEvent from json reader.
func (s *PullsSubmitReviewReqEvent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsSubmitReviewReqEvent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsSubmitReviewReqEvent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateBranchAccepted) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullsUpdateBranchAccepted from json stream.
func (s *PullsUpdateBranchAccepted) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsUpdateBranchAccepted to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateBranchReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ExpectedHeadSha.Set {
		more.More()
		e.ObjField("expected_head_sha")
		s.ExpectedHeadSha.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullsUpdateBranchReq from json stream.
func (s *PullsUpdateBranchReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsUpdateBranchReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "expected_head_sha":
			s.ExpectedHeadSha.Reset()
			if err := s.ExpectedHeadSha.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Title.Set {
		more.More()
		e.ObjField("title")
		s.Title.WriteJSON(e)
	}
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	if s.State.Set {
		more.More()
		e.ObjField("state")
		s.State.WriteJSON(e)
	}
	if s.Base.Set {
		more.More()
		e.ObjField("base")
		s.Base.WriteJSON(e)
	}
	if s.MaintainerCanModify.Set {
		more.More()
		e.ObjField("maintainer_can_modify")
		s.MaintainerCanModify.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads PullsUpdateReq from json stream.
func (s *PullsUpdateReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsUpdateReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "base":
			s.Base.Reset()
			if err := s.Base.ReadJSON(d); err != nil {
				return err
			}
		case "maintainer_can_modify":
			s.MaintainerCanModify.Reset()
			if err := s.MaintainerCanModify.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateReqState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads PullsUpdateReqState from json reader.
func (s *PullsUpdateReqState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsUpdateReqState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = PullsUpdateReqState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateReviewCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads PullsUpdateReviewCommentReq from json stream.
func (s *PullsUpdateReviewCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsUpdateReviewCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateReviewReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads PullsUpdateReviewReq from json stream.
func (s *PullsUpdateReviewReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PullsUpdateReviewReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RateLimit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("limit")
	e.Int(s.Limit)
	more.More()
	e.ObjField("remaining")
	e.Int(s.Remaining)
	more.More()
	e.ObjField("reset")
	e.Int(s.Reset)
	more.More()
	e.ObjField("used")
	e.Int(s.Used)
	e.ObjEnd()
}

// ReadJSON reads RateLimit from json stream.
func (s *RateLimit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RateLimit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "limit":
			v, err := d.Int()
			s.Limit = int(v)
			if err != nil {
				return err
			}
		case "remaining":
			v, err := d.Int()
			s.Remaining = int(v)
			if err != nil {
				return err
			}
		case "reset":
			v, err := d.Int()
			s.Reset = int(v)
			if err != nil {
				return err
			}
		case "used":
			v, err := d.Int()
			s.Used = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RateLimitOverview) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("resources")
	s.Resources.WriteJSON(e)
	more.More()
	e.ObjField("rate")
	s.Rate.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads RateLimitOverview from json stream.
func (s *RateLimitOverview) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RateLimitOverview to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "resources":
			if err := s.Resources.ReadJSON(d); err != nil {
				return err
			}
		case "rate":
			if err := s.Rate.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RateLimitOverviewResources) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("core")
	s.Core.WriteJSON(e)
	if s.Graphql.Set {
		more.More()
		e.ObjField("graphql")
		s.Graphql.WriteJSON(e)
	}
	more.More()
	e.ObjField("search")
	s.Search.WriteJSON(e)
	if s.SourceImport.Set {
		more.More()
		e.ObjField("source_import")
		s.SourceImport.WriteJSON(e)
	}
	if s.IntegrationManifest.Set {
		more.More()
		e.ObjField("integration_manifest")
		s.IntegrationManifest.WriteJSON(e)
	}
	if s.CodeScanningUpload.Set {
		more.More()
		e.ObjField("code_scanning_upload")
		s.CodeScanningUpload.WriteJSON(e)
	}
	if s.ActionsRunnerRegistration.Set {
		more.More()
		e.ObjField("actions_runner_registration")
		s.ActionsRunnerRegistration.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads RateLimitOverviewResources from json stream.
func (s *RateLimitOverviewResources) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RateLimitOverviewResources to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "core":
			if err := s.Core.ReadJSON(d); err != nil {
				return err
			}
		case "graphql":
			s.Graphql.Reset()
			if err := s.Graphql.ReadJSON(d); err != nil {
				return err
			}
		case "search":
			if err := s.Search.ReadJSON(d); err != nil {
				return err
			}
		case "source_import":
			s.SourceImport.Reset()
			if err := s.SourceImport.ReadJSON(d); err != nil {
				return err
			}
		case "integration_manifest":
			s.IntegrationManifest.Reset()
			if err := s.IntegrationManifest.ReadJSON(d); err != nil {
				return err
			}
		case "code_scanning_upload":
			s.CodeScanningUpload.Reset()
			if err := s.CodeScanningUpload.ReadJSON(d); err != nil {
				return err
			}
		case "actions_runner_registration":
			s.ActionsRunnerRegistration.Reset()
			if err := s.ActionsRunnerRegistration.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Reaction) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	e.ObjEnd()
}

// ReadJSON reads Reaction from json stream.
func (s *Reaction) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Reaction to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionContent from json reader.
func (s *ReactionContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionRollup) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("+1")
	e.Int(s.Plus1)
	more.More()
	e.ObjField("-1")
	e.Int(s.Minus1)
	more.More()
	e.ObjField("laugh")
	e.Int(s.Laugh)
	more.More()
	e.ObjField("confused")
	e.Int(s.Confused)
	more.More()
	e.ObjField("heart")
	e.Int(s.Heart)
	more.More()
	e.ObjField("hooray")
	e.Int(s.Hooray)
	more.More()
	e.ObjField("eyes")
	e.Int(s.Eyes)
	more.More()
	e.ObjField("rocket")
	e.Int(s.Rocket)
	e.ObjEnd()
}

// ReadJSON reads ReactionRollup from json stream.
func (s *ReactionRollup) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionRollup to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "+1":
			v, err := d.Int()
			s.Plus1 = int(v)
			if err != nil {
				return err
			}
		case "-1":
			v, err := d.Int()
			s.Minus1 = int(v)
			if err != nil {
				return err
			}
		case "laugh":
			v, err := d.Int()
			s.Laugh = int(v)
			if err != nil {
				return err
			}
		case "confused":
			v, err := d.Int()
			s.Confused = int(v)
			if err != nil {
				return err
			}
		case "heart":
			v, err := d.Int()
			s.Heart = int(v)
			if err != nil {
				return err
			}
		case "hooray":
			v, err := d.Int()
			s.Hooray = int(v)
			if err != nil {
				return err
			}
		case "eyes":
			v, err := d.Int()
			s.Eyes = int(v)
			if err != nil {
				return err
			}
		case "rocket":
			v, err := d.Int()
			s.Rocket = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForCommitCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReactionsCreateForCommitCommentReq from json stream.
func (s *ReactionsCreateForCommitCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForCommitCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForCommitCommentReqContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsCreateForCommitCommentReqContent from json reader.
func (s *ReactionsCreateForCommitCommentReqContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForCommitCommentReqContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsCreateForCommitCommentReqContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForIssueCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReactionsCreateForIssueCommentReq from json stream.
func (s *ReactionsCreateForIssueCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForIssueCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForIssueCommentReqContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsCreateForIssueCommentReqContent from json reader.
func (s *ReactionsCreateForIssueCommentReqContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForIssueCommentReqContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsCreateForIssueCommentReqContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForIssueReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReactionsCreateForIssueReq from json stream.
func (s *ReactionsCreateForIssueReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForIssueReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForIssueReqContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsCreateForIssueReqContent from json reader.
func (s *ReactionsCreateForIssueReqContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForIssueReqContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsCreateForIssueReqContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForPullRequestReviewCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReactionsCreateForPullRequestReviewCommentReq from json stream.
func (s *ReactionsCreateForPullRequestReviewCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForPullRequestReviewCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForPullRequestReviewCommentReqContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsCreateForPullRequestReviewCommentReqContent from json reader.
func (s *ReactionsCreateForPullRequestReviewCommentReqContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForPullRequestReviewCommentReqContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsCreateForPullRequestReviewCommentReqContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForReleaseReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReactionsCreateForReleaseReq from json stream.
func (s *ReactionsCreateForReleaseReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForReleaseReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForReleaseReqContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsCreateForReleaseReqContent from json reader.
func (s *ReactionsCreateForReleaseReqContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForReleaseReqContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsCreateForReleaseReqContent(v)
	return nil
}

func (ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated) WriteJSON(e *json.Encoder) {
}
func (ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK) WriteJSON(e *json.Encoder) {}
func (ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionCommentInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReactionsCreateForTeamDiscussionCommentInOrgReq from json stream.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForTeamDiscussionCommentInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionCommentInOrgReqContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsCreateForTeamDiscussionCommentInOrgReqContent from json reader.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgReqContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForTeamDiscussionCommentInOrgReqContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsCreateForTeamDiscussionCommentInOrgReqContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionCommentLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReactionsCreateForTeamDiscussionCommentLegacyReq from json stream.
func (s *ReactionsCreateForTeamDiscussionCommentLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForTeamDiscussionCommentLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionCommentLegacyReqContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsCreateForTeamDiscussionCommentLegacyReqContent from json reader.
func (s *ReactionsCreateForTeamDiscussionCommentLegacyReqContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForTeamDiscussionCommentLegacyReqContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsCreateForTeamDiscussionCommentLegacyReqContent(v)
	return nil
}

func (ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated) WriteJSON(e *json.Encoder) {}
func (ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK) WriteJSON(e *json.Encoder) {}
func (ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReactionsCreateForTeamDiscussionInOrgReq from json stream.
func (s *ReactionsCreateForTeamDiscussionInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForTeamDiscussionInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionInOrgReqContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsCreateForTeamDiscussionInOrgReqContent from json reader.
func (s *ReactionsCreateForTeamDiscussionInOrgReqContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForTeamDiscussionInOrgReqContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsCreateForTeamDiscussionInOrgReqContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("content")
	s.Content.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReactionsCreateForTeamDiscussionLegacyReq from json stream.
func (s *ReactionsCreateForTeamDiscussionLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForTeamDiscussionLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := s.Content.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionLegacyReqContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsCreateForTeamDiscussionLegacyReqContent from json reader.
func (s *ReactionsCreateForTeamDiscussionLegacyReqContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsCreateForTeamDiscussionLegacyReqContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsCreateForTeamDiscussionLegacyReqContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsDeleteForCommitCommentNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReactionsDeleteForCommitCommentNoContent from json stream.
func (s *ReactionsDeleteForCommitCommentNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsDeleteForCommitCommentNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsDeleteForIssueCommentNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReactionsDeleteForIssueCommentNoContent from json stream.
func (s *ReactionsDeleteForIssueCommentNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsDeleteForIssueCommentNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsDeleteForIssueNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReactionsDeleteForIssueNoContent from json stream.
func (s *ReactionsDeleteForIssueNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsDeleteForIssueNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsDeleteForPullRequestCommentNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReactionsDeleteForPullRequestCommentNoContent from json stream.
func (s *ReactionsDeleteForPullRequestCommentNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsDeleteForPullRequestCommentNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsDeleteForTeamDiscussionCommentNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReactionsDeleteForTeamDiscussionCommentNoContent from json stream.
func (s *ReactionsDeleteForTeamDiscussionCommentNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsDeleteForTeamDiscussionCommentNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsDeleteForTeamDiscussionNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReactionsDeleteForTeamDiscussionNoContent from json stream.
func (s *ReactionsDeleteForTeamDiscussionNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsDeleteForTeamDiscussionNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ReactionsDeleteLegacyApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ReactionsDeleteLegacyApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ReactionsDeleteLegacyApplicationJSONGone) WriteJSON(e *json.Encoder)      {}
func (ReactionsDeleteLegacyApplicationJSONGone) ReadJSON(d *json.Decoder) error { return nil }

func (ReactionsDeleteLegacyApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (ReactionsDeleteLegacyApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReactionsDeleteLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReactionsDeleteLegacyNoContent from json stream.
func (s *ReactionsDeleteLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsDeleteLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReactionsListForCommitCommentContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsListForCommitCommentContent from json reader.
func (s *ReactionsListForCommitCommentContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsListForCommitCommentContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsListForCommitCommentContent(v)
	return nil
}

func (ReactionsListForCommitCommentOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReactionsListForCommitCommentOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReactionsListForIssueApplicationJSONGone) WriteJSON(e *json.Encoder)      {}
func (ReactionsListForIssueApplicationJSONGone) ReadJSON(d *json.Decoder) error { return nil }

func (ReactionsListForIssueApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ReactionsListForIssueApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReactionsListForIssueCommentContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsListForIssueCommentContent from json reader.
func (s *ReactionsListForIssueCommentContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsListForIssueCommentContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsListForIssueCommentContent(v)
	return nil
}

func (ReactionsListForIssueCommentOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReactionsListForIssueCommentOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReactionsListForIssueContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsListForIssueContent from json reader.
func (s *ReactionsListForIssueContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsListForIssueContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsListForIssueContent(v)
	return nil
}

func (ReactionsListForIssueOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReactionsListForIssueOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReactionsListForPullRequestReviewCommentContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsListForPullRequestReviewCommentContent from json reader.
func (s *ReactionsListForPullRequestReviewCommentContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsListForPullRequestReviewCommentContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsListForPullRequestReviewCommentContent(v)
	return nil
}

func (ReactionsListForPullRequestReviewCommentOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (ReactionsListForPullRequestReviewCommentOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsListForTeamDiscussionCommentInOrgContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsListForTeamDiscussionCommentInOrgContent from json reader.
func (s *ReactionsListForTeamDiscussionCommentInOrgContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsListForTeamDiscussionCommentInOrgContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsListForTeamDiscussionCommentInOrgContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsListForTeamDiscussionCommentLegacyContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsListForTeamDiscussionCommentLegacyContent from json reader.
func (s *ReactionsListForTeamDiscussionCommentLegacyContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsListForTeamDiscussionCommentLegacyContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsListForTeamDiscussionCommentLegacyContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsListForTeamDiscussionInOrgContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsListForTeamDiscussionInOrgContent from json reader.
func (s *ReactionsListForTeamDiscussionInOrgContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsListForTeamDiscussionInOrgContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsListForTeamDiscussionInOrgContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReactionsListForTeamDiscussionLegacyContent) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReactionsListForTeamDiscussionLegacyContent from json reader.
func (s *ReactionsListForTeamDiscussionLegacyContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReactionsListForTeamDiscussionLegacyContent to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReactionsListForTeamDiscussionLegacyContent(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReferrerTraffic) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("referrer")
	e.Str(s.Referrer)
	more.More()
	e.ObjField("count")
	e.Int(s.Count)
	more.More()
	e.ObjField("uniques")
	e.Int(s.Uniques)
	e.ObjEnd()
}

// ReadJSON reads ReferrerTraffic from json stream.
func (s *ReferrerTraffic) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReferrerTraffic to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "referrer":
			v, err := d.Str()
			s.Referrer = string(v)
			if err != nil {
				return err
			}
		case "count":
			v, err := d.Int()
			s.Count = int(v)
			if err != nil {
				return err
			}
		case "uniques":
			v, err := d.Int()
			s.Uniques = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Release) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("assets_url")
	json.WriteURI(e, s.AssetsURL)
	more.More()
	e.ObjField("upload_url")
	e.Str(s.UploadURL)
	more.More()
	e.ObjField("tarball_url")
	s.TarballURL.WriteJSON(e)
	more.More()
	e.ObjField("zipball_url")
	s.ZipballURL.WriteJSON(e)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("tag_name")
	e.Str(s.TagName)
	more.More()
	e.ObjField("target_commitish")
	e.Str(s.TargetCommitish)
	more.More()
	e.ObjField("name")
	s.Name.WriteJSON(e)
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	more.More()
	e.ObjField("draft")
	e.Bool(s.Draft)
	more.More()
	e.ObjField("prerelease")
	e.Bool(s.Prerelease)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("published_at")
	s.PublishedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("assets")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Assets {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if s.BodyHTML.Set {
		more.More()
		e.ObjField("body_html")
		s.BodyHTML.WriteJSON(e)
	}
	if s.BodyText.Set {
		more.More()
		e.ObjField("body_text")
		s.BodyText.WriteJSON(e)
	}
	if s.MentionsCount.Set {
		more.More()
		e.ObjField("mentions_count")
		s.MentionsCount.WriteJSON(e)
	}
	if s.DiscussionURL.Set {
		more.More()
		e.ObjField("discussion_url")
		s.DiscussionURL.WriteJSON(e)
	}
	if s.Reactions.Set {
		more.More()
		e.ObjField("reactions")
		s.Reactions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Release from json stream.
func (s *Release) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Release to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "assets_url":
			v, err := json.ReadURI(d)
			s.AssetsURL = v
			if err != nil {
				return err
			}
		case "upload_url":
			v, err := d.Str()
			s.UploadURL = string(v)
			if err != nil {
				return err
			}
		case "tarball_url":
			if err := s.TarballURL.ReadJSON(d); err != nil {
				return err
			}
		case "zipball_url":
			if err := s.ZipballURL.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "tag_name":
			v, err := d.Str()
			s.TagName = string(v)
			if err != nil {
				return err
			}
		case "target_commitish":
			v, err := d.Str()
			s.TargetCommitish = string(v)
			if err != nil {
				return err
			}
		case "name":
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "draft":
			v, err := d.Bool()
			s.Draft = bool(v)
			if err != nil {
				return err
			}
		case "prerelease":
			v, err := d.Bool()
			s.Prerelease = bool(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "published_at":
			if err := s.PublishedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "assets":
			s.Assets = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ReleaseAsset
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Assets = append(s.Assets, elem)
				return nil
			}); err != nil {
				return err
			}
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(d); err != nil {
				return err
			}
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(d); err != nil {
				return err
			}
		case "mentions_count":
			s.MentionsCount.Reset()
			if err := s.MentionsCount.ReadJSON(d); err != nil {
				return err
			}
		case "discussion_url":
			s.DiscussionURL.Reset()
			if err := s.DiscussionURL.ReadJSON(d); err != nil {
				return err
			}
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReleaseAsset) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("browser_download_url")
	json.WriteURI(e, s.BrowserDownloadURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("label")
	s.Label.WriteJSON(e)
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("content_type")
	e.Str(s.ContentType)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	more.More()
	e.ObjField("download_count")
	e.Int(s.DownloadCount)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("uploader")
	s.Uploader.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReleaseAsset from json stream.
func (s *ReleaseAsset) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReleaseAsset to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "browser_download_url":
			v, err := json.ReadURI(d)
			s.BrowserDownloadURL = v
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "label":
			if err := s.Label.ReadJSON(d); err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "content_type":
			v, err := d.Str()
			s.ContentType = string(v)
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		case "download_count":
			v, err := d.Int()
			s.DownloadCount = int(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "uploader":
			if err := s.Uploader.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReleaseAssetState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReleaseAssetState from json reader.
func (s *ReleaseAssetState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReleaseAssetState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReleaseAssetState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s RepoSearchResultItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("full_name")
	e.Str(s.FullName)
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("private")
	e.Bool(s.Private)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("fork")
	e.Bool(s.Fork)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("pushed_at")
	json.WriteDateTime(e, s.PushedAt)
	more.More()
	e.ObjField("homepage")
	s.Homepage.WriteJSON(e)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	more.More()
	e.ObjField("stargazers_count")
	e.Int(s.StargazersCount)
	more.More()
	e.ObjField("watchers_count")
	e.Int(s.WatchersCount)
	more.More()
	e.ObjField("language")
	s.Language.WriteJSON(e)
	more.More()
	e.ObjField("forks_count")
	e.Int(s.ForksCount)
	more.More()
	e.ObjField("open_issues_count")
	e.Int(s.OpenIssuesCount)
	if s.MasterBranch.Set {
		more.More()
		e.ObjField("master_branch")
		s.MasterBranch.WriteJSON(e)
	}
	more.More()
	e.ObjField("default_branch")
	e.Str(s.DefaultBranch)
	more.More()
	e.ObjField("score")
	e.Float64(s.Score)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("keys_url")
	e.Str(s.KeysURL)
	more.More()
	e.ObjField("collaborators_url")
	e.Str(s.CollaboratorsURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("hooks_url")
	json.WriteURI(e, s.HooksURL)
	more.More()
	e.ObjField("issue_events_url")
	e.Str(s.IssueEventsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("assignees_url")
	e.Str(s.AssigneesURL)
	more.More()
	e.ObjField("branches_url")
	e.Str(s.BranchesURL)
	more.More()
	e.ObjField("tags_url")
	json.WriteURI(e, s.TagsURL)
	more.More()
	e.ObjField("blobs_url")
	e.Str(s.BlobsURL)
	more.More()
	e.ObjField("git_tags_url")
	e.Str(s.GitTagsURL)
	more.More()
	e.ObjField("git_refs_url")
	e.Str(s.GitRefsURL)
	more.More()
	e.ObjField("trees_url")
	e.Str(s.TreesURL)
	more.More()
	e.ObjField("statuses_url")
	e.Str(s.StatusesURL)
	more.More()
	e.ObjField("languages_url")
	json.WriteURI(e, s.LanguagesURL)
	more.More()
	e.ObjField("stargazers_url")
	json.WriteURI(e, s.StargazersURL)
	more.More()
	e.ObjField("contributors_url")
	json.WriteURI(e, s.ContributorsURL)
	more.More()
	e.ObjField("subscribers_url")
	json.WriteURI(e, s.SubscribersURL)
	more.More()
	e.ObjField("subscription_url")
	json.WriteURI(e, s.SubscriptionURL)
	more.More()
	e.ObjField("commits_url")
	e.Str(s.CommitsURL)
	more.More()
	e.ObjField("git_commits_url")
	e.Str(s.GitCommitsURL)
	more.More()
	e.ObjField("comments_url")
	e.Str(s.CommentsURL)
	more.More()
	e.ObjField("issue_comment_url")
	e.Str(s.IssueCommentURL)
	more.More()
	e.ObjField("contents_url")
	e.Str(s.ContentsURL)
	more.More()
	e.ObjField("compare_url")
	e.Str(s.CompareURL)
	more.More()
	e.ObjField("merges_url")
	json.WriteURI(e, s.MergesURL)
	more.More()
	e.ObjField("archive_url")
	e.Str(s.ArchiveURL)
	more.More()
	e.ObjField("downloads_url")
	json.WriteURI(e, s.DownloadsURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("pulls_url")
	e.Str(s.PullsURL)
	more.More()
	e.ObjField("milestones_url")
	e.Str(s.MilestonesURL)
	more.More()
	e.ObjField("notifications_url")
	e.Str(s.NotificationsURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("releases_url")
	e.Str(s.ReleasesURL)
	more.More()
	e.ObjField("deployments_url")
	json.WriteURI(e, s.DeploymentsURL)
	more.More()
	e.ObjField("git_url")
	e.Str(s.GitURL)
	more.More()
	e.ObjField("ssh_url")
	e.Str(s.SSHURL)
	more.More()
	e.ObjField("clone_url")
	e.Str(s.CloneURL)
	more.More()
	e.ObjField("svn_url")
	json.WriteURI(e, s.SvnURL)
	more.More()
	e.ObjField("forks")
	e.Int(s.Forks)
	more.More()
	e.ObjField("open_issues")
	e.Int(s.OpenIssues)
	more.More()
	e.ObjField("watchers")
	e.Int(s.Watchers)
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("mirror_url")
	s.MirrorURL.WriteJSON(e)
	more.More()
	e.ObjField("has_issues")
	e.Bool(s.HasIssues)
	more.More()
	e.ObjField("has_projects")
	e.Bool(s.HasProjects)
	more.More()
	e.ObjField("has_pages")
	e.Bool(s.HasPages)
	more.More()
	e.ObjField("has_wiki")
	e.Bool(s.HasWiki)
	more.More()
	e.ObjField("has_downloads")
	e.Bool(s.HasDownloads)
	more.More()
	e.ObjField("archived")
	e.Bool(s.Archived)
	more.More()
	e.ObjField("disabled")
	e.Bool(s.Disabled)
	more.More()
	e.ObjField("license")
	s.License.WriteJSON(e)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.TextMatches != nil {
		more.More()
		e.ObjField("text_matches")
		s.TextMatches.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	if s.AllowAutoMerge.Set {
		more.More()
		e.ObjField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.AllowForking.Set {
		more.More()
		e.ObjField("allow_forking")
		s.AllowForking.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads RepoSearchResultItem from json stream.
func (s *RepoSearchResultItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RepoSearchResultItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "full_name":
			v, err := d.Str()
			s.FullName = string(v)
			if err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			v, err := d.Bool()
			s.Private = bool(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "fork":
			v, err := d.Bool()
			s.Fork = bool(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "pushed_at":
			v, err := json.ReadDateTime(d)
			s.PushedAt = v
			if err != nil {
				return err
			}
		case "homepage":
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		case "stargazers_count":
			v, err := d.Int()
			s.StargazersCount = int(v)
			if err != nil {
				return err
			}
		case "watchers_count":
			v, err := d.Int()
			s.WatchersCount = int(v)
			if err != nil {
				return err
			}
		case "language":
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "forks_count":
			v, err := d.Int()
			s.ForksCount = int(v)
			if err != nil {
				return err
			}
		case "open_issues_count":
			v, err := d.Int()
			s.OpenIssuesCount = int(v)
			if err != nil {
				return err
			}
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(d); err != nil {
				return err
			}
		case "default_branch":
			v, err := d.Str()
			s.DefaultBranch = string(v)
			if err != nil {
				return err
			}
		case "score":
			v, err := d.Float64()
			s.Score = float64(v)
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "keys_url":
			v, err := d.Str()
			s.KeysURL = string(v)
			if err != nil {
				return err
			}
		case "collaborators_url":
			v, err := d.Str()
			s.CollaboratorsURL = string(v)
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "hooks_url":
			v, err := json.ReadURI(d)
			s.HooksURL = v
			if err != nil {
				return err
			}
		case "issue_events_url":
			v, err := d.Str()
			s.IssueEventsURL = string(v)
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "assignees_url":
			v, err := d.Str()
			s.AssigneesURL = string(v)
			if err != nil {
				return err
			}
		case "branches_url":
			v, err := d.Str()
			s.BranchesURL = string(v)
			if err != nil {
				return err
			}
		case "tags_url":
			v, err := json.ReadURI(d)
			s.TagsURL = v
			if err != nil {
				return err
			}
		case "blobs_url":
			v, err := d.Str()
			s.BlobsURL = string(v)
			if err != nil {
				return err
			}
		case "git_tags_url":
			v, err := d.Str()
			s.GitTagsURL = string(v)
			if err != nil {
				return err
			}
		case "git_refs_url":
			v, err := d.Str()
			s.GitRefsURL = string(v)
			if err != nil {
				return err
			}
		case "trees_url":
			v, err := d.Str()
			s.TreesURL = string(v)
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := d.Str()
			s.StatusesURL = string(v)
			if err != nil {
				return err
			}
		case "languages_url":
			v, err := json.ReadURI(d)
			s.LanguagesURL = v
			if err != nil {
				return err
			}
		case "stargazers_url":
			v, err := json.ReadURI(d)
			s.StargazersURL = v
			if err != nil {
				return err
			}
		case "contributors_url":
			v, err := json.ReadURI(d)
			s.ContributorsURL = v
			if err != nil {
				return err
			}
		case "subscribers_url":
			v, err := json.ReadURI(d)
			s.SubscribersURL = v
			if err != nil {
				return err
			}
		case "subscription_url":
			v, err := json.ReadURI(d)
			s.SubscriptionURL = v
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := d.Str()
			s.CommitsURL = string(v)
			if err != nil {
				return err
			}
		case "git_commits_url":
			v, err := d.Str()
			s.GitCommitsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := d.Str()
			s.CommentsURL = string(v)
			if err != nil {
				return err
			}
		case "issue_comment_url":
			v, err := d.Str()
			s.IssueCommentURL = string(v)
			if err != nil {
				return err
			}
		case "contents_url":
			v, err := d.Str()
			s.ContentsURL = string(v)
			if err != nil {
				return err
			}
		case "compare_url":
			v, err := d.Str()
			s.CompareURL = string(v)
			if err != nil {
				return err
			}
		case "merges_url":
			v, err := json.ReadURI(d)
			s.MergesURL = v
			if err != nil {
				return err
			}
		case "archive_url":
			v, err := d.Str()
			s.ArchiveURL = string(v)
			if err != nil {
				return err
			}
		case "downloads_url":
			v, err := json.ReadURI(d)
			s.DownloadsURL = v
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "pulls_url":
			v, err := d.Str()
			s.PullsURL = string(v)
			if err != nil {
				return err
			}
		case "milestones_url":
			v, err := d.Str()
			s.MilestonesURL = string(v)
			if err != nil {
				return err
			}
		case "notifications_url":
			v, err := d.Str()
			s.NotificationsURL = string(v)
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "releases_url":
			v, err := d.Str()
			s.ReleasesURL = string(v)
			if err != nil {
				return err
			}
		case "deployments_url":
			v, err := json.ReadURI(d)
			s.DeploymentsURL = v
			if err != nil {
				return err
			}
		case "git_url":
			v, err := d.Str()
			s.GitURL = string(v)
			if err != nil {
				return err
			}
		case "ssh_url":
			v, err := d.Str()
			s.SSHURL = string(v)
			if err != nil {
				return err
			}
		case "clone_url":
			v, err := d.Str()
			s.CloneURL = string(v)
			if err != nil {
				return err
			}
		case "svn_url":
			v, err := json.ReadURI(d)
			s.SvnURL = v
			if err != nil {
				return err
			}
		case "forks":
			v, err := d.Int()
			s.Forks = int(v)
			if err != nil {
				return err
			}
		case "open_issues":
			v, err := d.Int()
			s.OpenIssues = int(v)
			if err != nil {
				return err
			}
		case "watchers":
			v, err := d.Int()
			s.Watchers = int(v)
			if err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "has_issues":
			v, err := d.Bool()
			s.HasIssues = bool(v)
			if err != nil {
				return err
			}
		case "has_projects":
			v, err := d.Bool()
			s.HasProjects = bool(v)
			if err != nil {
				return err
			}
		case "has_pages":
			v, err := d.Bool()
			s.HasPages = bool(v)
			if err != nil {
				return err
			}
		case "has_wiki":
			v, err := d.Bool()
			s.HasWiki = bool(v)
			if err != nil {
				return err
			}
		case "has_downloads":
			v, err := d.Bool()
			s.HasDownloads = bool(v)
			if err != nil {
				return err
			}
		case "archived":
			v, err := d.Bool()
			s.Archived = bool(v)
			if err != nil {
				return err
			}
		case "disabled":
			v, err := d.Bool()
			s.Disabled = bool(v)
			if err != nil {
				return err
			}
		case "license":
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "text_matches":
			s.TextMatches = nil
			var elem SearchResultTextMatches
			if err := fmt.Errorf(`decoding of "SearchResultTextMatches" (alias) is not implemented`); err != nil {
				return err
			}
			s.TextMatches = &elem
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RepoSearchResultItemPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("admin")
	e.Bool(s.Admin)
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	more.More()
	e.ObjField("push")
	e.Bool(s.Push)
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	more.More()
	e.ObjField("pull")
	e.Bool(s.Pull)
	e.ObjEnd()
}

// ReadJSON reads RepoSearchResultItemPermissions from json stream.
func (s *RepoSearchResultItemPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RepoSearchResultItemPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			v, err := d.Bool()
			s.Admin = bool(v)
			if err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			v, err := d.Bool()
			s.Push = bool(v)
			if err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "pull":
			v, err := d.Bool()
			s.Pull = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ReposAcceptInvitationApplicationJSONConflict) WriteJSON(e *json.Encoder)      {}
func (ReposAcceptInvitationApplicationJSONConflict) ReadJSON(d *json.Decoder) error { return nil }

func (ReposAcceptInvitationApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ReposAcceptInvitationApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ReposAcceptInvitationApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ReposAcceptInvitationApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposAcceptInvitationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposAcceptInvitationNoContent from json stream.
func (s *ReposAcceptInvitationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposAcceptInvitationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposAddCollaboratorNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposAddCollaboratorNoContent from json stream.
func (s *ReposAddCollaboratorNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposAddCollaboratorNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposAddCollaboratorReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		e.ObjField("permission")
		s.Permission.WriteJSON(e)
	}
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposAddCollaboratorReq from json stream.
func (s *ReposAddCollaboratorReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposAddCollaboratorReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(d); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposAddCollaboratorReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposAddCollaboratorReqPermission from json reader.
func (s *ReposAddCollaboratorReqPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposAddCollaboratorReqPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposAddCollaboratorReqPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposCheckCollaboratorNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposCheckCollaboratorNoContent from json stream.
func (s *ReposCheckCollaboratorNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCheckCollaboratorNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCheckCollaboratorNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposCheckCollaboratorNotFound from json stream.
func (s *ReposCheckCollaboratorNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCheckCollaboratorNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCheckVulnerabilityAlertsNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposCheckVulnerabilityAlertsNoContent from json stream.
func (s *ReposCheckVulnerabilityAlertsNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCheckVulnerabilityAlertsNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCheckVulnerabilityAlertsNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposCheckVulnerabilityAlertsNotFound from json stream.
func (s *ReposCheckVulnerabilityAlertsNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCheckVulnerabilityAlertsNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ReposCompareCommitsApplicationJSONInternalServerError) WriteJSON(e *json.Encoder) {}
func (ReposCompareCommitsApplicationJSONInternalServerError) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ReposCompareCommitsApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ReposCompareCommitsApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposCreateAutolinkReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("key_prefix")
	e.Str(s.KeyPrefix)
	more.More()
	e.ObjField("url_template")
	e.Str(s.URLTemplate)
	e.ObjEnd()
}

// ReadJSON reads ReposCreateAutolinkReq from json stream.
func (s *ReposCreateAutolinkReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateAutolinkReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "key_prefix":
			v, err := d.Str()
			s.KeyPrefix = string(v)
			if err != nil {
				return err
			}
		case "url_template":
			v, err := d.Str()
			s.URLTemplate = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateCommitCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	if s.Path.Set {
		more.More()
		e.ObjField("path")
		s.Path.WriteJSON(e)
	}
	if s.Position.Set {
		more.More()
		e.ObjField("position")
		s.Position.WriteJSON(e)
	}
	if s.Line.Set {
		more.More()
		e.ObjField("line")
		s.Line.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateCommitCommentReq from json stream.
func (s *ReposCreateCommitCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateCommitCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(d); err != nil {
				return err
			}
		case "position":
			s.Position.Reset()
			if err := s.Position.ReadJSON(d); err != nil {
				return err
			}
		case "line":
			s.Line.Reset()
			if err := s.Line.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateCommitStatusReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	if s.TargetURL.Set {
		more.More()
		e.ObjField("target_url")
		s.TargetURL.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Context.Set {
		more.More()
		e.ObjField("context")
		s.Context.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateCommitStatusReq from json stream.
func (s *ReposCreateCommitStatusReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateCommitStatusReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "target_url":
			s.TargetURL.Reset()
			if err := s.TargetURL.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "context":
			s.Context.Reset()
			if err := s.Context.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateCommitStatusReqState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposCreateCommitStatusReqState from json reader.
func (s *ReposCreateCommitStatusReqState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateCommitStatusReqState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposCreateCommitStatusReqState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDeployKeyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Title.Set {
		more.More()
		e.ObjField("title")
		s.Title.WriteJSON(e)
	}
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	if s.ReadOnly.Set {
		more.More()
		e.ObjField("read_only")
		s.ReadOnly.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateDeployKeyReq from json stream.
func (s *ReposCreateDeployKeyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateDeployKeyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "read_only":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDeploymentStatusReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	if s.TargetURL.Set {
		more.More()
		e.ObjField("target_url")
		s.TargetURL.WriteJSON(e)
	}
	if s.LogURL.Set {
		more.More()
		e.ObjField("log_url")
		s.LogURL.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Environment.Set {
		more.More()
		e.ObjField("environment")
		s.Environment.WriteJSON(e)
	}
	if s.EnvironmentURL.Set {
		more.More()
		e.ObjField("environment_url")
		s.EnvironmentURL.WriteJSON(e)
	}
	if s.AutoInactive.Set {
		more.More()
		e.ObjField("auto_inactive")
		s.AutoInactive.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateDeploymentStatusReq from json stream.
func (s *ReposCreateDeploymentStatusReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateDeploymentStatusReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "target_url":
			s.TargetURL.Reset()
			if err := s.TargetURL.ReadJSON(d); err != nil {
				return err
			}
		case "log_url":
			s.LogURL.Reset()
			if err := s.LogURL.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "environment":
			s.Environment.Reset()
			if err := s.Environment.ReadJSON(d); err != nil {
				return err
			}
		case "environment_url":
			s.EnvironmentURL.Reset()
			if err := s.EnvironmentURL.ReadJSON(d); err != nil {
				return err
			}
		case "auto_inactive":
			s.AutoInactive.Reset()
			if err := s.AutoInactive.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDeploymentStatusReqEnvironment) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposCreateDeploymentStatusReqEnvironment from json reader.
func (s *ReposCreateDeploymentStatusReqEnvironment) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateDeploymentStatusReqEnvironment to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposCreateDeploymentStatusReqEnvironment(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDeploymentStatusReqState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposCreateDeploymentStatusReqState from json reader.
func (s *ReposCreateDeploymentStatusReqState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateDeploymentStatusReqState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposCreateDeploymentStatusReqState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDispatchEventNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposCreateDispatchEventNoContent from json stream.
func (s *ReposCreateDispatchEventNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateDispatchEventNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDispatchEventReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("event_type")
	e.Str(s.EventType)
	if s.ClientPayload != nil {
		more.More()
		e.ObjField("client_payload")
		s.ClientPayload.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateDispatchEventReq from json stream.
func (s *ReposCreateDispatchEventReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateDispatchEventReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "event_type":
			v, err := d.Str()
			s.EventType = string(v)
			if err != nil {
				return err
			}
		case "client_payload":
			s.ClientPayload = nil
			var elem ReposCreateDispatchEventReqClientPayload
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.ClientPayload = &elem
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDispatchEventReqClientPayload) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposCreateDispatchEventReqClientPayload from json stream.
func (s *ReposCreateDispatchEventReqClientPayload) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateDispatchEventReqClientPayload to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateForAuthenticatedUserReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Homepage.Set {
		more.More()
		e.ObjField("homepage")
		s.Homepage.WriteJSON(e)
	}
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	if s.HasIssues.Set {
		more.More()
		e.ObjField("has_issues")
		s.HasIssues.WriteJSON(e)
	}
	if s.HasProjects.Set {
		more.More()
		e.ObjField("has_projects")
		s.HasProjects.WriteJSON(e)
	}
	if s.HasWiki.Set {
		more.More()
		e.ObjField("has_wiki")
		s.HasWiki.WriteJSON(e)
	}
	if s.TeamID.Set {
		more.More()
		e.ObjField("team_id")
		s.TeamID.WriteJSON(e)
	}
	if s.AutoInit.Set {
		more.More()
		e.ObjField("auto_init")
		s.AutoInit.WriteJSON(e)
	}
	if s.GitignoreTemplate.Set {
		more.More()
		e.ObjField("gitignore_template")
		s.GitignoreTemplate.WriteJSON(e)
	}
	if s.LicenseTemplate.Set {
		more.More()
		e.ObjField("license_template")
		s.LicenseTemplate.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	if s.AllowAutoMerge.Set {
		more.More()
		e.ObjField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.HasDownloads.Set {
		more.More()
		e.ObjField("has_downloads")
		s.HasDownloads.WriteJSON(e)
	}
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateForAuthenticatedUserReq from json stream.
func (s *ReposCreateForAuthenticatedUserReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateForAuthenticatedUserReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(d); err != nil {
				return err
			}
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(d); err != nil {
				return err
			}
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(d); err != nil {
				return err
			}
		case "team_id":
			s.TeamID.Reset()
			if err := s.TeamID.ReadJSON(d); err != nil {
				return err
			}
		case "auto_init":
			s.AutoInit.Reset()
			if err := s.AutoInit.ReadJSON(d); err != nil {
				return err
			}
		case "gitignore_template":
			s.GitignoreTemplate.Reset()
			if err := s.GitignoreTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "license_template":
			s.LicenseTemplate.Reset()
			if err := s.LicenseTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "has_downloads":
			s.HasDownloads.Reset()
			if err := s.HasDownloads.ReadJSON(d); err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateForkReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Organization.Set {
		more.More()
		e.ObjField("organization")
		s.Organization.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateForkReq from json stream.
func (s *ReposCreateForkReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateForkReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "organization":
			s.Organization.Reset()
			if err := s.Organization.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Homepage.Set {
		more.More()
		e.ObjField("homepage")
		s.Homepage.WriteJSON(e)
	}
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	if s.HasIssues.Set {
		more.More()
		e.ObjField("has_issues")
		s.HasIssues.WriteJSON(e)
	}
	if s.HasProjects.Set {
		more.More()
		e.ObjField("has_projects")
		s.HasProjects.WriteJSON(e)
	}
	if s.HasWiki.Set {
		more.More()
		e.ObjField("has_wiki")
		s.HasWiki.WriteJSON(e)
	}
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	if s.TeamID.Set {
		more.More()
		e.ObjField("team_id")
		s.TeamID.WriteJSON(e)
	}
	if s.AutoInit.Set {
		more.More()
		e.ObjField("auto_init")
		s.AutoInit.WriteJSON(e)
	}
	if s.GitignoreTemplate.Set {
		more.More()
		e.ObjField("gitignore_template")
		s.GitignoreTemplate.WriteJSON(e)
	}
	if s.LicenseTemplate.Set {
		more.More()
		e.ObjField("license_template")
		s.LicenseTemplate.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	if s.AllowAutoMerge.Set {
		more.More()
		e.ObjField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateInOrgReq from json stream.
func (s *ReposCreateInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(d); err != nil {
				return err
			}
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(d); err != nil {
				return err
			}
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(d); err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "team_id":
			s.TeamID.Reset()
			if err := s.TeamID.ReadJSON(d); err != nil {
				return err
			}
		case "auto_init":
			s.AutoInit.Reset()
			if err := s.AutoInit.ReadJSON(d); err != nil {
				return err
			}
		case "gitignore_template":
			s.GitignoreTemplate.Reset()
			if err := s.GitignoreTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "license_template":
			s.LicenseTemplate.Reset()
			if err := s.LicenseTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateInOrgReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposCreateInOrgReqVisibility from json reader.
func (s *ReposCreateInOrgReqVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateInOrgReqVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposCreateInOrgReqVisibility(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateOrUpdateEnvironmentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.WaitTimer.Set {
		more.More()
		e.ObjField("wait_timer")
		s.WaitTimer.WriteJSON(e)
	}
	if s.Reviewers.Set {
		more.More()
		e.ObjField("reviewers")
		s.Reviewers.WriteJSON(e)
	}
	if s.DeploymentBranchPolicy.Set {
		more.More()
		e.ObjField("deployment_branch_policy")
		s.DeploymentBranchPolicy.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateOrUpdateEnvironmentReq from json stream.
func (s *ReposCreateOrUpdateEnvironmentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateOrUpdateEnvironmentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "wait_timer":
			s.WaitTimer.Reset()
			if err := s.WaitTimer.ReadJSON(d); err != nil {
				return err
			}
		case "reviewers":
			s.Reviewers.Reset()
			if err := s.Reviewers.ReadJSON(d); err != nil {
				return err
			}
		case "deployment_branch_policy":
			s.DeploymentBranchPolicy.Reset()
			if err := s.DeploymentBranchPolicy.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateOrUpdateEnvironmentReqReviewersItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateOrUpdateEnvironmentReqReviewersItem from json stream.
func (s *ReposCreateOrUpdateEnvironmentReqReviewersItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateOrUpdateEnvironmentReqReviewersItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateOrUpdateFileContentsReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("content")
	e.Str(s.Content)
	if s.Sha.Set {
		more.More()
		e.ObjField("sha")
		s.Sha.WriteJSON(e)
	}
	if s.Branch.Set {
		more.More()
		e.ObjField("branch")
		s.Branch.WriteJSON(e)
	}
	if s.Committer.Set {
		more.More()
		e.ObjField("committer")
		s.Committer.WriteJSON(e)
	}
	if s.Author.Set {
		more.More()
		e.ObjField("author")
		s.Author.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateOrUpdateFileContentsReq from json stream.
func (s *ReposCreateOrUpdateFileContentsReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateOrUpdateFileContentsReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "content":
			v, err := d.Str()
			s.Content = string(v)
			if err != nil {
				return err
			}
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(d); err != nil {
				return err
			}
		case "branch":
			s.Branch.Reset()
			if err := s.Branch.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			s.Committer.Reset()
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		case "author":
			s.Author.Reset()
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateOrUpdateFileContentsReqAuthor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	if s.Date.Set {
		more.More()
		e.ObjField("date")
		s.Date.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateOrUpdateFileContentsReqAuthor from json stream.
func (s *ReposCreateOrUpdateFileContentsReqAuthor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateOrUpdateFileContentsReqAuthor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateOrUpdateFileContentsReqCommitter) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	if s.Date.Set {
		more.More()
		e.ObjField("date")
		s.Date.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateOrUpdateFileContentsReqCommitter from json stream.
func (s *ReposCreateOrUpdateFileContentsReqCommitter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateOrUpdateFileContentsReqCommitter to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreatePagesSiteReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("source")
	s.Source.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReposCreatePagesSiteReq from json stream.
func (s *ReposCreatePagesSiteReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreatePagesSiteReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "source":
			if err := s.Source.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreatePagesSiteReqSource) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("branch")
	e.Str(s.Branch)
	if s.Path.Set {
		more.More()
		e.ObjField("path")
		s.Path.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreatePagesSiteReqSource from json stream.
func (s *ReposCreatePagesSiteReqSource) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreatePagesSiteReqSource to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "branch":
			v, err := d.Str()
			s.Branch = string(v)
			if err != nil {
				return err
			}
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreatePagesSiteReqSourcePath) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposCreatePagesSiteReqSourcePath from json reader.
func (s *ReposCreatePagesSiteReqSourcePath) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreatePagesSiteReqSourcePath to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposCreatePagesSiteReqSourcePath(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateReleaseReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("tag_name")
	e.Str(s.TagName)
	if s.TargetCommitish.Set {
		more.More()
		e.ObjField("target_commitish")
		s.TargetCommitish.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	if s.Draft.Set {
		more.More()
		e.ObjField("draft")
		s.Draft.WriteJSON(e)
	}
	if s.Prerelease.Set {
		more.More()
		e.ObjField("prerelease")
		s.Prerelease.WriteJSON(e)
	}
	if s.DiscussionCategoryName.Set {
		more.More()
		e.ObjField("discussion_category_name")
		s.DiscussionCategoryName.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateReleaseReq from json stream.
func (s *ReposCreateReleaseReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateReleaseReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "tag_name":
			v, err := d.Str()
			s.TagName = string(v)
			if err != nil {
				return err
			}
		case "target_commitish":
			s.TargetCommitish.Reset()
			if err := s.TargetCommitish.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "draft":
			s.Draft.Reset()
			if err := s.Draft.ReadJSON(d); err != nil {
				return err
			}
		case "prerelease":
			s.Prerelease.Reset()
			if err := s.Prerelease.ReadJSON(d); err != nil {
				return err
			}
		case "discussion_category_name":
			s.DiscussionCategoryName.Reset()
			if err := s.DiscussionCategoryName.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateUsingTemplateReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Owner.Set {
		more.More()
		e.ObjField("owner")
		s.Owner.WriteJSON(e)
	}
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.IncludeAllBranches.Set {
		more.More()
		e.ObjField("include_all_branches")
		s.IncludeAllBranches.WriteJSON(e)
	}
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateUsingTemplateReq from json stream.
func (s *ReposCreateUsingTemplateReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateUsingTemplateReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "include_all_branches":
			s.IncludeAllBranches.Reset()
			if err := s.IncludeAllBranches.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateWebhookReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Config.Set {
		more.More()
		e.ObjField("config")
		s.Config.WriteJSON(e)
	}
	if s.Events != nil {
		more.More()
		e.ObjField("events")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Events {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Active.Set {
		more.More()
		e.ObjField("active")
		s.Active.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateWebhookReq from json stream.
func (s *ReposCreateWebhookReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateWebhookReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "config":
			s.Config.Reset()
			if err := s.Config.ReadJSON(d); err != nil {
				return err
			}
		case "events":
			s.Events = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Events = append(s.Events, elem)
				return nil
			}); err != nil {
				return err
			}
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateWebhookReqConfig) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	if s.InsecureSsl != nil {
		more.More()
		e.ObjField("insecure_ssl")
		s.InsecureSsl.WriteJSON(e)
	}
	if s.Token.Set {
		more.More()
		e.ObjField("token")
		s.Token.WriteJSON(e)
	}
	if s.Digest.Set {
		more.More()
		e.ObjField("digest")
		s.Digest.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposCreateWebhookReqConfig from json stream.
func (s *ReposCreateWebhookReqConfig) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposCreateWebhookReqConfig to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		case "insecure_ssl":
			s.InsecureSsl = nil
			var elem WebhookConfigInsecureSsl
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.InsecureSsl = &elem
		case "token":
			s.Token.Reset()
			if err := s.Token.ReadJSON(d); err != nil {
				return err
			}
		case "digest":
			s.Digest.Reset()
			if err := s.Digest.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ReposDeclineInvitationApplicationJSONConflict) WriteJSON(e *json.Encoder)      {}
func (ReposDeclineInvitationApplicationJSONConflict) ReadJSON(d *json.Decoder) error { return nil }

func (ReposDeclineInvitationApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ReposDeclineInvitationApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ReposDeclineInvitationApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ReposDeclineInvitationApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposDeclineInvitationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeclineInvitationNoContent from json stream.
func (s *ReposDeclineInvitationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeclineInvitationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteAccessRestrictionsNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteAccessRestrictionsNoContent from json stream.
func (s *ReposDeleteAccessRestrictionsNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteAccessRestrictionsNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteAdminBranchProtectionNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteAdminBranchProtectionNoContent from json stream.
func (s *ReposDeleteAdminBranchProtectionNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteAdminBranchProtectionNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteAnEnvironmentNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteAnEnvironmentNoContent from json stream.
func (s *ReposDeleteAnEnvironmentNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteAnEnvironmentNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ReposDeleteApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ReposDeleteApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ReposDeleteApplicationJSONTemporaryRedirect) WriteJSON(e *json.Encoder)      {}
func (ReposDeleteApplicationJSONTemporaryRedirect) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposDeleteAutolinkNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteAutolinkNoContent from json stream.
func (s *ReposDeleteAutolinkNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteAutolinkNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteBranchProtectionNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteBranchProtectionNoContent from json stream.
func (s *ReposDeleteBranchProtectionNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteBranchProtectionNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteCommitCommentNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteCommitCommentNoContent from json stream.
func (s *ReposDeleteCommitCommentNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteCommitCommentNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteCommitSignatureProtectionNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteCommitSignatureProtectionNoContent from json stream.
func (s *ReposDeleteCommitSignatureProtectionNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteCommitSignatureProtectionNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteDeployKeyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteDeployKeyNoContent from json stream.
func (s *ReposDeleteDeployKeyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteDeployKeyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteDeploymentNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteDeploymentNoContent from json stream.
func (s *ReposDeleteDeploymentNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteDeploymentNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteFileReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	if s.Branch.Set {
		more.More()
		e.ObjField("branch")
		s.Branch.WriteJSON(e)
	}
	if s.Committer.Set {
		more.More()
		e.ObjField("committer")
		s.Committer.WriteJSON(e)
	}
	if s.Author.Set {
		more.More()
		e.ObjField("author")
		s.Author.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteFileReq from json stream.
func (s *ReposDeleteFileReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteFileReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "branch":
			s.Branch.Reset()
			if err := s.Branch.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			s.Committer.Reset()
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		case "author":
			s.Author.Reset()
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteFileReqAuthor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteFileReqAuthor from json stream.
func (s *ReposDeleteFileReqAuthor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteFileReqAuthor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteFileReqCommitter) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteFileReqCommitter from json stream.
func (s *ReposDeleteFileReqCommitter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteFileReqCommitter to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteForbidden from json stream.
func (s *ReposDeleteForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteInvitationNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteInvitationNoContent from json stream.
func (s *ReposDeleteInvitationNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteInvitationNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteNoContent from json stream.
func (s *ReposDeleteNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeletePagesSiteNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeletePagesSiteNoContent from json stream.
func (s *ReposDeletePagesSiteNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeletePagesSiteNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeletePullRequestReviewProtectionNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeletePullRequestReviewProtectionNoContent from json stream.
func (s *ReposDeletePullRequestReviewProtectionNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeletePullRequestReviewProtectionNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteReleaseAssetNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteReleaseAssetNoContent from json stream.
func (s *ReposDeleteReleaseAssetNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteReleaseAssetNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteReleaseNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteReleaseNoContent from json stream.
func (s *ReposDeleteReleaseNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteReleaseNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteWebhookNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDeleteWebhookNoContent from json stream.
func (s *ReposDeleteWebhookNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDeleteWebhookNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDisableAutomatedSecurityFixesNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDisableAutomatedSecurityFixesNoContent from json stream.
func (s *ReposDisableAutomatedSecurityFixesNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDisableAutomatedSecurityFixesNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDisableLfsForRepoNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDisableLfsForRepoNoContent from json stream.
func (s *ReposDisableLfsForRepoNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDisableLfsForRepoNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDisableVulnerabilityAlertsNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDisableVulnerabilityAlertsNoContent from json stream.
func (s *ReposDisableVulnerabilityAlertsNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDisableVulnerabilityAlertsNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDownloadTarballArchiveFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDownloadTarballArchiveFound from json stream.
func (s *ReposDownloadTarballArchiveFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDownloadTarballArchiveFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposDownloadZipballArchiveFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposDownloadZipballArchiveFound from json stream.
func (s *ReposDownloadZipballArchiveFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposDownloadZipballArchiveFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposEnableAutomatedSecurityFixesNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposEnableAutomatedSecurityFixesNoContent from json stream.
func (s *ReposEnableAutomatedSecurityFixesNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposEnableAutomatedSecurityFixesNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposEnableLfsForRepoForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposEnableLfsForRepoForbidden from json stream.
func (s *ReposEnableLfsForRepoForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposEnableLfsForRepoForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposEnableVulnerabilityAlertsNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposEnableVulnerabilityAlertsNoContent from json stream.
func (s *ReposEnableVulnerabilityAlertsNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposEnableVulnerabilityAlertsNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ReposGetAllStatusCheckContextsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposGetAllStatusCheckContextsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposGetApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ReposGetApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ReposGetApplicationJSONMovedPermanently) WriteJSON(e *json.Encoder)      {}
func (ReposGetApplicationJSONMovedPermanently) ReadJSON(d *json.Decoder) error { return nil }

func (ReposGetApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ReposGetApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ReposGetBranchApplicationJSONMovedPermanently) WriteJSON(e *json.Encoder)      {}
func (ReposGetBranchApplicationJSONMovedPermanently) ReadJSON(d *json.Decoder) error { return nil }

func (ReposGetBranchApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ReposGetBranchApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposGetClonesPer) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposGetClonesPer from json reader.
func (s *ReposGetClonesPer) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposGetClonesPer to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposGetClonesPer(v)
	return nil
}

func (ReposGetCodeFrequencyStatsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposGetCodeFrequencyStatsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposGetCommitActivityStatsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposGetCommitActivityStatsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposGetContributorsStatsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposGetContributorsStatsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposGetPagesHealthCheckBadRequest) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposGetPagesHealthCheckBadRequest from json stream.
func (s *ReposGetPagesHealthCheckBadRequest) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposGetPagesHealthCheckBadRequest to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposGetPagesHealthCheckUnprocessableEntity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposGetPagesHealthCheckUnprocessableEntity from json stream.
func (s *ReposGetPagesHealthCheckUnprocessableEntity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposGetPagesHealthCheckUnprocessableEntity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ReposGetPunchCardStatsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposGetPunchCardStatsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ReposGetTopPathsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposGetTopPathsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposGetTopReferrersOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposGetTopReferrersOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposGetViewsPer) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposGetViewsPer from json reader.
func (s *ReposGetViewsPer) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposGetViewsPer to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposGetViewsPer(v)
	return nil
}

func (ReposListBranchesOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposListBranchesOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposListCollaboratorsAffiliation) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListCollaboratorsAffiliation from json reader.
func (s *ReposListCollaboratorsAffiliation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListCollaboratorsAffiliation to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListCollaboratorsAffiliation(v)
	return nil
}

func (ReposListCollaboratorsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposListCollaboratorsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposListCommitStatusesForRefOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposListCommitStatusesForRefOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposListCommitsApplicationJSONBadRequest) WriteJSON(e *json.Encoder)      {}
func (ReposListCommitsApplicationJSONBadRequest) ReadJSON(d *json.Decoder) error { return nil }

func (ReposListCommitsApplicationJSONConflict) WriteJSON(e *json.Encoder)      {}
func (ReposListCommitsApplicationJSONConflict) ReadJSON(d *json.Decoder) error { return nil }

func (ReposListCommitsApplicationJSONInternalServerError) WriteJSON(e *json.Encoder)      {}
func (ReposListCommitsApplicationJSONInternalServerError) ReadJSON(d *json.Decoder) error { return nil }

func (ReposListCommitsApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ReposListCommitsApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ReposListCommitsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposListCommitsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposListContributorsApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ReposListContributorsApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ReposListContributorsApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ReposListContributorsApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposListContributorsNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposListContributorsNoContent from json stream.
func (s *ReposListContributorsNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListContributorsNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ReposListContributorsOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposListContributorsOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposListDeploymentStatusesOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposListDeploymentStatusesOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposListForAuthenticatedUserDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForAuthenticatedUserDirection from json reader.
func (s *ReposListForAuthenticatedUserDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForAuthenticatedUserDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForAuthenticatedUserDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposListForAuthenticatedUserSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForAuthenticatedUserSort from json reader.
func (s *ReposListForAuthenticatedUserSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForAuthenticatedUserSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForAuthenticatedUserSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposListForAuthenticatedUserType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForAuthenticatedUserType from json reader.
func (s *ReposListForAuthenticatedUserType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForAuthenticatedUserType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForAuthenticatedUserType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposListForAuthenticatedUserVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForAuthenticatedUserVisibility from json reader.
func (s *ReposListForAuthenticatedUserVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForAuthenticatedUserVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForAuthenticatedUserVisibility(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposListForOrgDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForOrgDirection from json reader.
func (s *ReposListForOrgDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForOrgDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForOrgDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposListForOrgSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForOrgSort from json reader.
func (s *ReposListForOrgSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForOrgSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForOrgSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposListForOrgType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForOrgType from json reader.
func (s *ReposListForOrgType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForOrgType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForOrgType(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposListForUserDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForUserDirection from json reader.
func (s *ReposListForUserDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForUserDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForUserDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposListForUserSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForUserSort from json reader.
func (s *ReposListForUserSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForUserSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForUserSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposListForUserType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForUserType from json reader.
func (s *ReposListForUserType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForUserType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForUserType(v)
	return nil
}

func (ReposListForksOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposListForksOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposListForksSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposListForksSort from json reader.
func (s *ReposListForksSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposListForksSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposListForksSort(v)
	return nil
}

func (ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ReposListInvitationsForAuthenticatedUserOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (ReposListInvitationsForAuthenticatedUserOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ReposListReleasesOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposListReleasesOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (ReposListWebhooksOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (ReposListWebhooksOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposMergeConflict) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposMergeConflict from json stream.
func (s *ReposMergeConflict) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposMergeConflict to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposMergeNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposMergeNoContent from json stream.
func (s *ReposMergeNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposMergeNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposMergeNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposMergeNotFound from json stream.
func (s *ReposMergeNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposMergeNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposMergeReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("base")
	e.Str(s.Base)
	more.More()
	e.ObjField("head")
	e.Str(s.Head)
	if s.CommitMessage.Set {
		more.More()
		e.ObjField("commit_message")
		s.CommitMessage.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposMergeReq from json stream.
func (s *ReposMergeReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposMergeReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "base":
			v, err := d.Str()
			s.Base = string(v)
			if err != nil {
				return err
			}
		case "head":
			v, err := d.Str()
			s.Head = string(v)
			if err != nil {
				return err
			}
		case "commit_message":
			s.CommitMessage.Reset()
			if err := s.CommitMessage.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposMergeUpstreamConflict) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposMergeUpstreamConflict from json stream.
func (s *ReposMergeUpstreamConflict) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposMergeUpstreamConflict to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposMergeUpstreamReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("branch")
	e.Str(s.Branch)
	e.ObjEnd()
}

// ReadJSON reads ReposMergeUpstreamReq from json stream.
func (s *ReposMergeUpstreamReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposMergeUpstreamReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "branch":
			v, err := d.Str()
			s.Branch = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposMergeUpstreamUnprocessableEntity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposMergeUpstreamUnprocessableEntity from json stream.
func (s *ReposMergeUpstreamUnprocessableEntity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposMergeUpstreamUnprocessableEntity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposPingWebhookNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposPingWebhookNoContent from json stream.
func (s *ReposPingWebhookNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposPingWebhookNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposRemoveCollaboratorNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposRemoveCollaboratorNoContent from json stream.
func (s *ReposRemoveCollaboratorNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposRemoveCollaboratorNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposRemoveStatusCheckProtectionNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposRemoveStatusCheckProtectionNoContent from json stream.
func (s *ReposRemoveStatusCheckProtectionNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposRemoveStatusCheckProtectionNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposRenameBranchReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("new_name")
	e.Str(s.NewName)
	e.ObjEnd()
}

// ReadJSON reads ReposRenameBranchReq from json stream.
func (s *ReposRenameBranchReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposRenameBranchReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "new_name":
			v, err := d.Str()
			s.NewName = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposReplaceAllTopicsReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("names")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Names {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ReposReplaceAllTopicsReq from json stream.
func (s *ReposReplaceAllTopicsReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposReplaceAllTopicsReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "names":
			s.Names = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Names = append(s.Names, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposTestPushWebhookNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ReposTestPushWebhookNoContent from json stream.
func (s *ReposTestPushWebhookNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposTestPushWebhookNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposTransferReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("new_owner")
	e.Str(s.NewOwner)
	if s.TeamIds != nil {
		more.More()
		e.ObjField("team_ids")
		more.Down()
		e.ArrStart()
		for _, elem := range s.TeamIds {
			more.More()
			e.Int(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ReposTransferReq from json stream.
func (s *ReposTransferReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposTransferReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "new_owner":
			v, err := d.Str()
			s.NewOwner = string(v)
			if err != nil {
				return err
			}
		case "team_ids":
			s.TeamIds = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.TeamIds = append(s.TeamIds, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (ReposUpdateBranchProtectionApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (ReposUpdateBranchProtectionApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (ReposUpdateBranchProtectionApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ReposUpdateBranchProtectionApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ReposUpdateBranchProtectionReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("required_status_checks")
	s.RequiredStatusChecks.WriteJSON(e)
	more.More()
	e.ObjField("enforce_admins")
	s.EnforceAdmins.WriteJSON(e)
	more.More()
	e.ObjField("required_pull_request_reviews")
	s.RequiredPullRequestReviews.WriteJSON(e)
	more.More()
	e.ObjField("restrictions")
	s.Restrictions.WriteJSON(e)
	if s.RequiredLinearHistory.Set {
		more.More()
		e.ObjField("required_linear_history")
		s.RequiredLinearHistory.WriteJSON(e)
	}
	if s.AllowForcePushes.Set {
		more.More()
		e.ObjField("allow_force_pushes")
		s.AllowForcePushes.WriteJSON(e)
	}
	if s.AllowDeletions.Set {
		more.More()
		e.ObjField("allow_deletions")
		s.AllowDeletions.WriteJSON(e)
	}
	if s.RequiredConversationResolution.Set {
		more.More()
		e.ObjField("required_conversation_resolution")
		s.RequiredConversationResolution.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateBranchProtectionReq from json stream.
func (s *ReposUpdateBranchProtectionReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateBranchProtectionReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "required_status_checks":
			if err := s.RequiredStatusChecks.ReadJSON(d); err != nil {
				return err
			}
		case "enforce_admins":
			if err := s.EnforceAdmins.ReadJSON(d); err != nil {
				return err
			}
		case "required_pull_request_reviews":
			if err := s.RequiredPullRequestReviews.ReadJSON(d); err != nil {
				return err
			}
		case "restrictions":
			if err := s.Restrictions.ReadJSON(d); err != nil {
				return err
			}
		case "required_linear_history":
			s.RequiredLinearHistory.Reset()
			if err := s.RequiredLinearHistory.ReadJSON(d); err != nil {
				return err
			}
		case "allow_force_pushes":
			s.AllowForcePushes.Reset()
			if err := s.AllowForcePushes.ReadJSON(d); err != nil {
				return err
			}
		case "allow_deletions":
			s.AllowDeletions.Reset()
			if err := s.AllowDeletions.ReadJSON(d); err != nil {
				return err
			}
		case "required_conversation_resolution":
			s.RequiredConversationResolution.Reset()
			if err := s.RequiredConversationResolution.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateBranchProtectionReqRequiredPullRequestReviews) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.DismissalRestrictions.Set {
		more.More()
		e.ObjField("dismissal_restrictions")
		s.DismissalRestrictions.WriteJSON(e)
	}
	if s.DismissStaleReviews.Set {
		more.More()
		e.ObjField("dismiss_stale_reviews")
		s.DismissStaleReviews.WriteJSON(e)
	}
	if s.RequireCodeOwnerReviews.Set {
		more.More()
		e.ObjField("require_code_owner_reviews")
		s.RequireCodeOwnerReviews.WriteJSON(e)
	}
	if s.RequiredApprovingReviewCount.Set {
		more.More()
		e.ObjField("required_approving_review_count")
		s.RequiredApprovingReviewCount.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateBranchProtectionReqRequiredPullRequestReviews from json stream.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviews) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateBranchProtectionReqRequiredPullRequestReviews to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "dismissal_restrictions":
			s.DismissalRestrictions.Reset()
			if err := s.DismissalRestrictions.ReadJSON(d); err != nil {
				return err
			}
		case "dismiss_stale_reviews":
			s.DismissStaleReviews.Reset()
			if err := s.DismissStaleReviews.ReadJSON(d); err != nil {
				return err
			}
		case "require_code_owner_reviews":
			s.RequireCodeOwnerReviews.Reset()
			if err := s.RequireCodeOwnerReviews.ReadJSON(d); err != nil {
				return err
			}
		case "required_approving_review_count":
			s.RequiredApprovingReviewCount.Reset()
			if err := s.RequiredApprovingReviewCount.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Users != nil {
		more.More()
		e.ObjField("users")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Users {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Teams != nil {
		more.More()
		e.ObjField("teams")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Teams {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions from json stream.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "users":
			s.Users = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Users = append(s.Users, elem)
				return nil
			}); err != nil {
				return err
			}
		case "teams":
			s.Teams = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Teams = append(s.Teams, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateBranchProtectionReqRequiredStatusChecks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("strict")
	e.Bool(s.Strict)
	more.More()
	e.ObjField("contexts")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Contexts {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateBranchProtectionReqRequiredStatusChecks from json stream.
func (s *ReposUpdateBranchProtectionReqRequiredStatusChecks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateBranchProtectionReqRequiredStatusChecks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "strict":
			v, err := d.Bool()
			s.Strict = bool(v)
			if err != nil {
				return err
			}
		case "contexts":
			s.Contexts = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Contexts = append(s.Contexts, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateBranchProtectionReqRestrictions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("users")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Users {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("teams")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Teams {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	if s.Apps != nil {
		more.More()
		e.ObjField("apps")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Apps {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateBranchProtectionReqRestrictions from json stream.
func (s *ReposUpdateBranchProtectionReqRestrictions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateBranchProtectionReqRestrictions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "users":
			s.Users = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Users = append(s.Users, elem)
				return nil
			}); err != nil {
				return err
			}
		case "teams":
			s.Teams = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Teams = append(s.Teams, elem)
				return nil
			}); err != nil {
				return err
			}
		case "apps":
			s.Apps = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Apps = append(s.Apps, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateCommitCommentReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateCommitCommentReq from json stream.
func (s *ReposUpdateCommitCommentReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateCommitCommentReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateInvitationReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateInvitationReq from json stream.
func (s *ReposUpdateInvitationReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateInvitationReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateInvitationReqPermissions) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposUpdateInvitationReqPermissions from json reader.
func (s *ReposUpdateInvitationReqPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateInvitationReqPermissions to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposUpdateInvitationReqPermissions(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdatePullRequestReviewProtectionReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.DismissalRestrictions.Set {
		more.More()
		e.ObjField("dismissal_restrictions")
		s.DismissalRestrictions.WriteJSON(e)
	}
	if s.DismissStaleReviews.Set {
		more.More()
		e.ObjField("dismiss_stale_reviews")
		s.DismissStaleReviews.WriteJSON(e)
	}
	if s.RequireCodeOwnerReviews.Set {
		more.More()
		e.ObjField("require_code_owner_reviews")
		s.RequireCodeOwnerReviews.WriteJSON(e)
	}
	if s.RequiredApprovingReviewCount.Set {
		more.More()
		e.ObjField("required_approving_review_count")
		s.RequiredApprovingReviewCount.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdatePullRequestReviewProtectionReq from json stream.
func (s *ReposUpdatePullRequestReviewProtectionReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdatePullRequestReviewProtectionReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "dismissal_restrictions":
			s.DismissalRestrictions.Reset()
			if err := s.DismissalRestrictions.ReadJSON(d); err != nil {
				return err
			}
		case "dismiss_stale_reviews":
			s.DismissStaleReviews.Reset()
			if err := s.DismissStaleReviews.ReadJSON(d); err != nil {
				return err
			}
		case "require_code_owner_reviews":
			s.RequireCodeOwnerReviews.Reset()
			if err := s.RequireCodeOwnerReviews.ReadJSON(d); err != nil {
				return err
			}
		case "required_approving_review_count":
			s.RequiredApprovingReviewCount.Reset()
			if err := s.RequiredApprovingReviewCount.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Users != nil {
		more.More()
		e.ObjField("users")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Users {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Teams != nil {
		more.More()
		e.ObjField("teams")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Teams {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions from json stream.
func (s *ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "users":
			s.Users = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Users = append(s.Users, elem)
				return nil
			}); err != nil {
				return err
			}
		case "teams":
			s.Teams = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Teams = append(s.Teams, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateReleaseAssetReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Label.Set {
		more.More()
		e.ObjField("label")
		s.Label.WriteJSON(e)
	}
	if s.State.Set {
		more.More()
		e.ObjField("state")
		s.State.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateReleaseAssetReq from json stream.
func (s *ReposUpdateReleaseAssetReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateReleaseAssetReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "label":
			s.Label.Reset()
			if err := s.Label.ReadJSON(d); err != nil {
				return err
			}
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateReleaseReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.TagName.Set {
		more.More()
		e.ObjField("tag_name")
		s.TagName.WriteJSON(e)
	}
	if s.TargetCommitish.Set {
		more.More()
		e.ObjField("target_commitish")
		s.TargetCommitish.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	if s.Draft.Set {
		more.More()
		e.ObjField("draft")
		s.Draft.WriteJSON(e)
	}
	if s.Prerelease.Set {
		more.More()
		e.ObjField("prerelease")
		s.Prerelease.WriteJSON(e)
	}
	if s.DiscussionCategoryName.Set {
		more.More()
		e.ObjField("discussion_category_name")
		s.DiscussionCategoryName.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateReleaseReq from json stream.
func (s *ReposUpdateReleaseReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateReleaseReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "tag_name":
			s.TagName.Reset()
			if err := s.TagName.ReadJSON(d); err != nil {
				return err
			}
		case "target_commitish":
			s.TargetCommitish.Reset()
			if err := s.TargetCommitish.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "draft":
			s.Draft.Reset()
			if err := s.Draft.ReadJSON(d); err != nil {
				return err
			}
		case "prerelease":
			s.Prerelease.Reset()
			if err := s.Prerelease.ReadJSON(d); err != nil {
				return err
			}
		case "discussion_category_name":
			s.DiscussionCategoryName.Reset()
			if err := s.DiscussionCategoryName.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Homepage.Set {
		more.More()
		e.ObjField("homepage")
		s.Homepage.WriteJSON(e)
	}
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	if s.SecurityAndAnalysis.Set {
		more.More()
		e.ObjField("security_and_analysis")
		s.SecurityAndAnalysis.WriteJSON(e)
	}
	if s.HasIssues.Set {
		more.More()
		e.ObjField("has_issues")
		s.HasIssues.WriteJSON(e)
	}
	if s.HasProjects.Set {
		more.More()
		e.ObjField("has_projects")
		s.HasProjects.WriteJSON(e)
	}
	if s.HasWiki.Set {
		more.More()
		e.ObjField("has_wiki")
		s.HasWiki.WriteJSON(e)
	}
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	if s.DefaultBranch.Set {
		more.More()
		e.ObjField("default_branch")
		s.DefaultBranch.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	if s.AllowAutoMerge.Set {
		more.More()
		e.ObjField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.Archived.Set {
		more.More()
		e.ObjField("archived")
		s.Archived.WriteJSON(e)
	}
	if s.AllowForking.Set {
		more.More()
		e.ObjField("allow_forking")
		s.AllowForking.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateReq from json stream.
func (s *ReposUpdateReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "security_and_analysis":
			s.SecurityAndAnalysis.Reset()
			if err := s.SecurityAndAnalysis.ReadJSON(d); err != nil {
				return err
			}
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(d); err != nil {
				return err
			}
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(d); err != nil {
				return err
			}
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(d); err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "default_branch":
			s.DefaultBranch.Reset()
			if err := s.DefaultBranch.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(d); err != nil {
				return err
			}
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateReqSecurityAndAnalysis) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.AdvancedSecurity.Set {
		more.More()
		e.ObjField("advanced_security")
		s.AdvancedSecurity.WriteJSON(e)
	}
	if s.SecretScanning.Set {
		more.More()
		e.ObjField("secret_scanning")
		s.SecretScanning.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateReqSecurityAndAnalysis from json stream.
func (s *ReposUpdateReqSecurityAndAnalysis) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateReqSecurityAndAnalysis to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "advanced_security":
			s.AdvancedSecurity.Reset()
			if err := s.AdvancedSecurity.ReadJSON(d); err != nil {
				return err
			}
		case "secret_scanning":
			s.SecretScanning.Reset()
			if err := s.SecretScanning.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Status.Set {
		more.More()
		e.ObjField("status")
		s.Status.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateReqSecurityAndAnalysisAdvancedSecurity from json stream.
func (s *ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateReqSecurityAndAnalysisAdvancedSecurity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateReqSecurityAndAnalysisSecretScanning) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Status.Set {
		more.More()
		e.ObjField("status")
		s.Status.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateReqSecurityAndAnalysisSecretScanning from json stream.
func (s *ReposUpdateReqSecurityAndAnalysisSecretScanning) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateReqSecurityAndAnalysisSecretScanning to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReposUpdateReqVisibility from json reader.
func (s *ReposUpdateReqVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateReqVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReposUpdateReqVisibility(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateStatusCheckProtectionReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Strict.Set {
		more.More()
		e.ObjField("strict")
		s.Strict.WriteJSON(e)
	}
	if s.Contexts != nil {
		more.More()
		e.ObjField("contexts")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Contexts {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateStatusCheckProtectionReq from json stream.
func (s *ReposUpdateStatusCheckProtectionReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateStatusCheckProtectionReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "strict":
			s.Strict.Reset()
			if err := s.Strict.ReadJSON(d); err != nil {
				return err
			}
		case "contexts":
			s.Contexts = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Contexts = append(s.Contexts, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateWebhookConfigForRepoReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	if s.InsecureSsl != nil {
		more.More()
		e.ObjField("insecure_ssl")
		s.InsecureSsl.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateWebhookConfigForRepoReq from json stream.
func (s *ReposUpdateWebhookConfigForRepoReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateWebhookConfigForRepoReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		case "insecure_ssl":
			s.InsecureSsl = nil
			var elem WebhookConfigInsecureSsl
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.InsecureSsl = &elem
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateWebhookReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Config.Set {
		more.More()
		e.ObjField("config")
		s.Config.WriteJSON(e)
	}
	if s.Events != nil {
		more.More()
		e.ObjField("events")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Events {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.AddEvents != nil {
		more.More()
		e.ObjField("add_events")
		more.Down()
		e.ArrStart()
		for _, elem := range s.AddEvents {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.RemoveEvents != nil {
		more.More()
		e.ObjField("remove_events")
		more.Down()
		e.ArrStart()
		for _, elem := range s.RemoveEvents {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Active.Set {
		more.More()
		e.ObjField("active")
		s.Active.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateWebhookReq from json stream.
func (s *ReposUpdateWebhookReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateWebhookReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "config":
			s.Config.Reset()
			if err := s.Config.ReadJSON(d); err != nil {
				return err
			}
		case "events":
			s.Events = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Events = append(s.Events, elem)
				return nil
			}); err != nil {
				return err
			}
		case "add_events":
			s.AddEvents = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AddEvents = append(s.AddEvents, elem)
				return nil
			}); err != nil {
				return err
			}
		case "remove_events":
			s.RemoveEvents = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.RemoveEvents = append(s.RemoveEvents, elem)
				return nil
			}); err != nil {
				return err
			}
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateWebhookReqConfig) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	// Unsupported kind "alias".
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	if s.InsecureSsl != nil {
		more.More()
		e.ObjField("insecure_ssl")
		s.InsecureSsl.WriteJSON(e)
	}
	if s.Address.Set {
		more.More()
		e.ObjField("address")
		s.Address.WriteJSON(e)
	}
	if s.Room.Set {
		more.More()
		e.ObjField("room")
		s.Room.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReposUpdateWebhookReqConfig from json stream.
func (s *ReposUpdateWebhookReqConfig) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReposUpdateWebhookReqConfig to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			if err := fmt.Errorf(`decoding of "WebhookConfigURL" (alias) is not implemented`); err != nil {
				return err
			}
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		case "insecure_ssl":
			s.InsecureSsl = nil
			var elem WebhookConfigInsecureSsl
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.InsecureSsl = &elem
		case "address":
			s.Address.Reset()
			if err := s.Address.ReadJSON(d); err != nil {
				return err
			}
		case "room":
			s.Room.Reset()
			if err := s.Room.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Repository) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("full_name")
	e.Str(s.FullName)
	more.More()
	e.ObjField("license")
	s.License.WriteJSON(e)
	if s.Organization.Set {
		more.More()
		e.ObjField("organization")
		s.Organization.WriteJSON(e)
	}
	more.More()
	e.ObjField("forks")
	e.Int(s.Forks)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("private")
	e.Bool(s.Private)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("fork")
	e.Bool(s.Fork)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("archive_url")
	e.Str(s.ArchiveURL)
	more.More()
	e.ObjField("assignees_url")
	e.Str(s.AssigneesURL)
	more.More()
	e.ObjField("blobs_url")
	e.Str(s.BlobsURL)
	more.More()
	e.ObjField("branches_url")
	e.Str(s.BranchesURL)
	more.More()
	e.ObjField("collaborators_url")
	e.Str(s.CollaboratorsURL)
	more.More()
	e.ObjField("comments_url")
	e.Str(s.CommentsURL)
	more.More()
	e.ObjField("commits_url")
	e.Str(s.CommitsURL)
	more.More()
	e.ObjField("compare_url")
	e.Str(s.CompareURL)
	more.More()
	e.ObjField("contents_url")
	e.Str(s.ContentsURL)
	more.More()
	e.ObjField("contributors_url")
	json.WriteURI(e, s.ContributorsURL)
	more.More()
	e.ObjField("deployments_url")
	json.WriteURI(e, s.DeploymentsURL)
	more.More()
	e.ObjField("downloads_url")
	json.WriteURI(e, s.DownloadsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("git_commits_url")
	e.Str(s.GitCommitsURL)
	more.More()
	e.ObjField("git_refs_url")
	e.Str(s.GitRefsURL)
	more.More()
	e.ObjField("git_tags_url")
	e.Str(s.GitTagsURL)
	more.More()
	e.ObjField("git_url")
	e.Str(s.GitURL)
	more.More()
	e.ObjField("issue_comment_url")
	e.Str(s.IssueCommentURL)
	more.More()
	e.ObjField("issue_events_url")
	e.Str(s.IssueEventsURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("keys_url")
	e.Str(s.KeysURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("languages_url")
	json.WriteURI(e, s.LanguagesURL)
	more.More()
	e.ObjField("merges_url")
	json.WriteURI(e, s.MergesURL)
	more.More()
	e.ObjField("milestones_url")
	e.Str(s.MilestonesURL)
	more.More()
	e.ObjField("notifications_url")
	e.Str(s.NotificationsURL)
	more.More()
	e.ObjField("pulls_url")
	e.Str(s.PullsURL)
	more.More()
	e.ObjField("releases_url")
	e.Str(s.ReleasesURL)
	more.More()
	e.ObjField("ssh_url")
	e.Str(s.SSHURL)
	more.More()
	e.ObjField("stargazers_url")
	json.WriteURI(e, s.StargazersURL)
	more.More()
	e.ObjField("statuses_url")
	e.Str(s.StatusesURL)
	more.More()
	e.ObjField("subscribers_url")
	json.WriteURI(e, s.SubscribersURL)
	more.More()
	e.ObjField("subscription_url")
	json.WriteURI(e, s.SubscriptionURL)
	more.More()
	e.ObjField("tags_url")
	json.WriteURI(e, s.TagsURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("trees_url")
	e.Str(s.TreesURL)
	more.More()
	e.ObjField("clone_url")
	e.Str(s.CloneURL)
	more.More()
	e.ObjField("mirror_url")
	s.MirrorURL.WriteJSON(e)
	more.More()
	e.ObjField("hooks_url")
	json.WriteURI(e, s.HooksURL)
	more.More()
	e.ObjField("svn_url")
	json.WriteURI(e, s.SvnURL)
	more.More()
	e.ObjField("homepage")
	s.Homepage.WriteJSON(e)
	more.More()
	e.ObjField("language")
	s.Language.WriteJSON(e)
	more.More()
	e.ObjField("forks_count")
	e.Int(s.ForksCount)
	more.More()
	e.ObjField("stargazers_count")
	e.Int(s.StargazersCount)
	more.More()
	e.ObjField("watchers_count")
	e.Int(s.WatchersCount)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	more.More()
	e.ObjField("default_branch")
	e.Str(s.DefaultBranch)
	more.More()
	e.ObjField("open_issues_count")
	e.Int(s.OpenIssuesCount)
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("has_issues")
	e.Bool(s.HasIssues)
	more.More()
	e.ObjField("has_projects")
	e.Bool(s.HasProjects)
	more.More()
	e.ObjField("has_wiki")
	e.Bool(s.HasWiki)
	more.More()
	e.ObjField("has_pages")
	e.Bool(s.HasPages)
	more.More()
	e.ObjField("has_downloads")
	e.Bool(s.HasDownloads)
	more.More()
	e.ObjField("archived")
	e.Bool(s.Archived)
	more.More()
	e.ObjField("disabled")
	e.Bool(s.Disabled)
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	more.More()
	e.ObjField("pushed_at")
	s.PushedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("created_at")
	s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("updated_at")
	s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	if s.TemplateRepository.Set {
		more.More()
		e.ObjField("template_repository")
		s.TemplateRepository.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowAutoMerge.Set {
		more.More()
		e.ObjField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.AllowForking.Set {
		more.More()
		e.ObjField("allow_forking")
		s.AllowForking.WriteJSON(e)
	}
	if s.SubscribersCount.Set {
		more.More()
		e.ObjField("subscribers_count")
		s.SubscribersCount.WriteJSON(e)
	}
	if s.NetworkCount.Set {
		more.More()
		e.ObjField("network_count")
		s.NetworkCount.WriteJSON(e)
	}
	more.More()
	e.ObjField("open_issues")
	e.Int(s.OpenIssues)
	more.More()
	e.ObjField("watchers")
	e.Int(s.Watchers)
	if s.MasterBranch.Set {
		more.More()
		e.ObjField("master_branch")
		s.MasterBranch.WriteJSON(e)
	}
	if s.StarredAt.Set {
		more.More()
		e.ObjField("starred_at")
		s.StarredAt.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads Repository from json stream.
func (s *Repository) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Repository to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "full_name":
			v, err := d.Str()
			s.FullName = string(v)
			if err != nil {
				return err
			}
		case "license":
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "organization":
			s.Organization.Reset()
			if err := s.Organization.ReadJSON(d); err != nil {
				return err
			}
		case "forks":
			v, err := d.Int()
			s.Forks = int(v)
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			v, err := d.Bool()
			s.Private = bool(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "fork":
			v, err := d.Bool()
			s.Fork = bool(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "archive_url":
			v, err := d.Str()
			s.ArchiveURL = string(v)
			if err != nil {
				return err
			}
		case "assignees_url":
			v, err := d.Str()
			s.AssigneesURL = string(v)
			if err != nil {
				return err
			}
		case "blobs_url":
			v, err := d.Str()
			s.BlobsURL = string(v)
			if err != nil {
				return err
			}
		case "branches_url":
			v, err := d.Str()
			s.BranchesURL = string(v)
			if err != nil {
				return err
			}
		case "collaborators_url":
			v, err := d.Str()
			s.CollaboratorsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := d.Str()
			s.CommentsURL = string(v)
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := d.Str()
			s.CommitsURL = string(v)
			if err != nil {
				return err
			}
		case "compare_url":
			v, err := d.Str()
			s.CompareURL = string(v)
			if err != nil {
				return err
			}
		case "contents_url":
			v, err := d.Str()
			s.ContentsURL = string(v)
			if err != nil {
				return err
			}
		case "contributors_url":
			v, err := json.ReadURI(d)
			s.ContributorsURL = v
			if err != nil {
				return err
			}
		case "deployments_url":
			v, err := json.ReadURI(d)
			s.DeploymentsURL = v
			if err != nil {
				return err
			}
		case "downloads_url":
			v, err := json.ReadURI(d)
			s.DownloadsURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "git_commits_url":
			v, err := d.Str()
			s.GitCommitsURL = string(v)
			if err != nil {
				return err
			}
		case "git_refs_url":
			v, err := d.Str()
			s.GitRefsURL = string(v)
			if err != nil {
				return err
			}
		case "git_tags_url":
			v, err := d.Str()
			s.GitTagsURL = string(v)
			if err != nil {
				return err
			}
		case "git_url":
			v, err := d.Str()
			s.GitURL = string(v)
			if err != nil {
				return err
			}
		case "issue_comment_url":
			v, err := d.Str()
			s.IssueCommentURL = string(v)
			if err != nil {
				return err
			}
		case "issue_events_url":
			v, err := d.Str()
			s.IssueEventsURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "keys_url":
			v, err := d.Str()
			s.KeysURL = string(v)
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "languages_url":
			v, err := json.ReadURI(d)
			s.LanguagesURL = v
			if err != nil {
				return err
			}
		case "merges_url":
			v, err := json.ReadURI(d)
			s.MergesURL = v
			if err != nil {
				return err
			}
		case "milestones_url":
			v, err := d.Str()
			s.MilestonesURL = string(v)
			if err != nil {
				return err
			}
		case "notifications_url":
			v, err := d.Str()
			s.NotificationsURL = string(v)
			if err != nil {
				return err
			}
		case "pulls_url":
			v, err := d.Str()
			s.PullsURL = string(v)
			if err != nil {
				return err
			}
		case "releases_url":
			v, err := d.Str()
			s.ReleasesURL = string(v)
			if err != nil {
				return err
			}
		case "ssh_url":
			v, err := d.Str()
			s.SSHURL = string(v)
			if err != nil {
				return err
			}
		case "stargazers_url":
			v, err := json.ReadURI(d)
			s.StargazersURL = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := d.Str()
			s.StatusesURL = string(v)
			if err != nil {
				return err
			}
		case "subscribers_url":
			v, err := json.ReadURI(d)
			s.SubscribersURL = v
			if err != nil {
				return err
			}
		case "subscription_url":
			v, err := json.ReadURI(d)
			s.SubscriptionURL = v
			if err != nil {
				return err
			}
		case "tags_url":
			v, err := json.ReadURI(d)
			s.TagsURL = v
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "trees_url":
			v, err := d.Str()
			s.TreesURL = string(v)
			if err != nil {
				return err
			}
		case "clone_url":
			v, err := d.Str()
			s.CloneURL = string(v)
			if err != nil {
				return err
			}
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "hooks_url":
			v, err := json.ReadURI(d)
			s.HooksURL = v
			if err != nil {
				return err
			}
		case "svn_url":
			v, err := json.ReadURI(d)
			s.SvnURL = v
			if err != nil {
				return err
			}
		case "homepage":
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "forks_count":
			v, err := d.Int()
			s.ForksCount = int(v)
			if err != nil {
				return err
			}
		case "stargazers_count":
			v, err := d.Int()
			s.StargazersCount = int(v)
			if err != nil {
				return err
			}
		case "watchers_count":
			v, err := d.Int()
			s.WatchersCount = int(v)
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		case "default_branch":
			v, err := d.Str()
			s.DefaultBranch = string(v)
			if err != nil {
				return err
			}
		case "open_issues_count":
			v, err := d.Int()
			s.OpenIssuesCount = int(v)
			if err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "has_issues":
			v, err := d.Bool()
			s.HasIssues = bool(v)
			if err != nil {
				return err
			}
		case "has_projects":
			v, err := d.Bool()
			s.HasProjects = bool(v)
			if err != nil {
				return err
			}
		case "has_wiki":
			v, err := d.Bool()
			s.HasWiki = bool(v)
			if err != nil {
				return err
			}
		case "has_pages":
			v, err := d.Bool()
			s.HasPages = bool(v)
			if err != nil {
				return err
			}
		case "has_downloads":
			v, err := d.Bool()
			s.HasDownloads = bool(v)
			if err != nil {
				return err
			}
		case "archived":
			v, err := d.Bool()
			s.Archived = bool(v)
			if err != nil {
				return err
			}
		case "disabled":
			v, err := d.Bool()
			s.Disabled = bool(v)
			if err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "pushed_at":
			if err := s.PushedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "created_at":
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(d); err != nil {
				return err
			}
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(d); err != nil {
				return err
			}
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(d); err != nil {
				return err
			}
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues":
			v, err := d.Int()
			s.OpenIssues = int(v)
			if err != nil {
				return err
			}
		case "watchers":
			v, err := d.Int()
			s.Watchers = int(v)
			if err != nil {
				return err
			}
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(d); err != nil {
				return err
			}
		case "starred_at":
			s.StarredAt.Reset()
			if err := s.StarredAt.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RepositoryCollaboratorPermission) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("permission")
	e.Str(s.Permission)
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads RepositoryCollaboratorPermission from json stream.
func (s *RepositoryCollaboratorPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RepositoryCollaboratorPermission to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "permission":
			v, err := d.Str()
			s.Permission = string(v)
			if err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RepositoryInvitation) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("repository")
	s.Repository.WriteJSON(e)
	more.More()
	e.ObjField("invitee")
	s.Invitee.WriteJSON(e)
	more.More()
	e.ObjField("inviter")
	s.Inviter.WriteJSON(e)
	more.More()
	e.ObjField("permissions")
	s.Permissions.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	if s.Expired.Set {
		more.More()
		e.ObjField("expired")
		s.Expired.WriteJSON(e)
	}
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("html_url")
	e.Str(s.HTMLURL)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	e.ObjEnd()
}

// ReadJSON reads RepositoryInvitation from json stream.
func (s *RepositoryInvitation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RepositoryInvitation to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "repository":
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "invitee":
			if err := s.Invitee.ReadJSON(d); err != nil {
				return err
			}
		case "inviter":
			if err := s.Inviter.ReadJSON(d); err != nil {
				return err
			}
		case "permissions":
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "expired":
			s.Expired.Reset()
			if err := s.Expired.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := d.Str()
			s.HTMLURL = string(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RepositoryInvitationPermissions) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads RepositoryInvitationPermissions from json reader.
func (s *RepositoryInvitationPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RepositoryInvitationPermissions to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = RepositoryInvitationPermissions(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s RepositoryPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("admin")
	e.Bool(s.Admin)
	more.More()
	e.ObjField("pull")
	e.Bool(s.Pull)
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	more.More()
	e.ObjField("push")
	e.Bool(s.Push)
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads RepositoryPermissions from json stream.
func (s *RepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RepositoryPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			v, err := d.Bool()
			s.Admin = bool(v)
			if err != nil {
				return err
			}
		case "pull":
			v, err := d.Bool()
			s.Pull = bool(v)
			if err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			v, err := d.Bool()
			s.Push = bool(v)
			if err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RepositorySubscription) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("subscribed")
	e.Bool(s.Subscribed)
	more.More()
	e.ObjField("ignored")
	e.Bool(s.Ignored)
	more.More()
	e.ObjField("reason")
	s.Reason.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("repository_url")
	json.WriteURI(e, s.RepositoryURL)
	e.ObjEnd()
}

// ReadJSON reads RepositorySubscription from json stream.
func (s *RepositorySubscription) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RepositorySubscription to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "subscribed":
			v, err := d.Bool()
			s.Subscribed = bool(v)
			if err != nil {
				return err
			}
		case "ignored":
			v, err := d.Bool()
			s.Ignored = bool(v)
			if err != nil {
				return err
			}
		case "reason":
			if err := s.Reason.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "repository_url":
			v, err := json.ReadURI(d)
			s.RepositoryURL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RepositoryTemplateRepository) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.FullName.Set {
		more.More()
		e.ObjField("full_name")
		s.FullName.WriteJSON(e)
	}
	if s.Owner.Set {
		more.More()
		e.ObjField("owner")
		s.Owner.WriteJSON(e)
	}
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Fork.Set {
		more.More()
		e.ObjField("fork")
		s.Fork.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.ArchiveURL.Set {
		more.More()
		e.ObjField("archive_url")
		s.ArchiveURL.WriteJSON(e)
	}
	if s.AssigneesURL.Set {
		more.More()
		e.ObjField("assignees_url")
		s.AssigneesURL.WriteJSON(e)
	}
	if s.BlobsURL.Set {
		more.More()
		e.ObjField("blobs_url")
		s.BlobsURL.WriteJSON(e)
	}
	if s.BranchesURL.Set {
		more.More()
		e.ObjField("branches_url")
		s.BranchesURL.WriteJSON(e)
	}
	if s.CollaboratorsURL.Set {
		more.More()
		e.ObjField("collaborators_url")
		s.CollaboratorsURL.WriteJSON(e)
	}
	if s.CommentsURL.Set {
		more.More()
		e.ObjField("comments_url")
		s.CommentsURL.WriteJSON(e)
	}
	if s.CommitsURL.Set {
		more.More()
		e.ObjField("commits_url")
		s.CommitsURL.WriteJSON(e)
	}
	if s.CompareURL.Set {
		more.More()
		e.ObjField("compare_url")
		s.CompareURL.WriteJSON(e)
	}
	if s.ContentsURL.Set {
		more.More()
		e.ObjField("contents_url")
		s.ContentsURL.WriteJSON(e)
	}
	if s.ContributorsURL.Set {
		more.More()
		e.ObjField("contributors_url")
		s.ContributorsURL.WriteJSON(e)
	}
	if s.DeploymentsURL.Set {
		more.More()
		e.ObjField("deployments_url")
		s.DeploymentsURL.WriteJSON(e)
	}
	if s.DownloadsURL.Set {
		more.More()
		e.ObjField("downloads_url")
		s.DownloadsURL.WriteJSON(e)
	}
	if s.EventsURL.Set {
		more.More()
		e.ObjField("events_url")
		s.EventsURL.WriteJSON(e)
	}
	if s.ForksURL.Set {
		more.More()
		e.ObjField("forks_url")
		s.ForksURL.WriteJSON(e)
	}
	if s.GitCommitsURL.Set {
		more.More()
		e.ObjField("git_commits_url")
		s.GitCommitsURL.WriteJSON(e)
	}
	if s.GitRefsURL.Set {
		more.More()
		e.ObjField("git_refs_url")
		s.GitRefsURL.WriteJSON(e)
	}
	if s.GitTagsURL.Set {
		more.More()
		e.ObjField("git_tags_url")
		s.GitTagsURL.WriteJSON(e)
	}
	if s.GitURL.Set {
		more.More()
		e.ObjField("git_url")
		s.GitURL.WriteJSON(e)
	}
	if s.IssueCommentURL.Set {
		more.More()
		e.ObjField("issue_comment_url")
		s.IssueCommentURL.WriteJSON(e)
	}
	if s.IssueEventsURL.Set {
		more.More()
		e.ObjField("issue_events_url")
		s.IssueEventsURL.WriteJSON(e)
	}
	if s.IssuesURL.Set {
		more.More()
		e.ObjField("issues_url")
		s.IssuesURL.WriteJSON(e)
	}
	if s.KeysURL.Set {
		more.More()
		e.ObjField("keys_url")
		s.KeysURL.WriteJSON(e)
	}
	if s.LabelsURL.Set {
		more.More()
		e.ObjField("labels_url")
		s.LabelsURL.WriteJSON(e)
	}
	if s.LanguagesURL.Set {
		more.More()
		e.ObjField("languages_url")
		s.LanguagesURL.WriteJSON(e)
	}
	if s.MergesURL.Set {
		more.More()
		e.ObjField("merges_url")
		s.MergesURL.WriteJSON(e)
	}
	if s.MilestonesURL.Set {
		more.More()
		e.ObjField("milestones_url")
		s.MilestonesURL.WriteJSON(e)
	}
	if s.NotificationsURL.Set {
		more.More()
		e.ObjField("notifications_url")
		s.NotificationsURL.WriteJSON(e)
	}
	if s.PullsURL.Set {
		more.More()
		e.ObjField("pulls_url")
		s.PullsURL.WriteJSON(e)
	}
	if s.ReleasesURL.Set {
		more.More()
		e.ObjField("releases_url")
		s.ReleasesURL.WriteJSON(e)
	}
	if s.SSHURL.Set {
		more.More()
		e.ObjField("ssh_url")
		s.SSHURL.WriteJSON(e)
	}
	if s.StargazersURL.Set {
		more.More()
		e.ObjField("stargazers_url")
		s.StargazersURL.WriteJSON(e)
	}
	if s.StatusesURL.Set {
		more.More()
		e.ObjField("statuses_url")
		s.StatusesURL.WriteJSON(e)
	}
	if s.SubscribersURL.Set {
		more.More()
		e.ObjField("subscribers_url")
		s.SubscribersURL.WriteJSON(e)
	}
	if s.SubscriptionURL.Set {
		more.More()
		e.ObjField("subscription_url")
		s.SubscriptionURL.WriteJSON(e)
	}
	if s.TagsURL.Set {
		more.More()
		e.ObjField("tags_url")
		s.TagsURL.WriteJSON(e)
	}
	if s.TeamsURL.Set {
		more.More()
		e.ObjField("teams_url")
		s.TeamsURL.WriteJSON(e)
	}
	if s.TreesURL.Set {
		more.More()
		e.ObjField("trees_url")
		s.TreesURL.WriteJSON(e)
	}
	if s.CloneURL.Set {
		more.More()
		e.ObjField("clone_url")
		s.CloneURL.WriteJSON(e)
	}
	if s.MirrorURL.Set {
		more.More()
		e.ObjField("mirror_url")
		s.MirrorURL.WriteJSON(e)
	}
	if s.HooksURL.Set {
		more.More()
		e.ObjField("hooks_url")
		s.HooksURL.WriteJSON(e)
	}
	if s.SvnURL.Set {
		more.More()
		e.ObjField("svn_url")
		s.SvnURL.WriteJSON(e)
	}
	if s.Homepage.Set {
		more.More()
		e.ObjField("homepage")
		s.Homepage.WriteJSON(e)
	}
	if s.Language.Set {
		more.More()
		e.ObjField("language")
		s.Language.WriteJSON(e)
	}
	if s.ForksCount.Set {
		more.More()
		e.ObjField("forks_count")
		s.ForksCount.WriteJSON(e)
	}
	if s.StargazersCount.Set {
		more.More()
		e.ObjField("stargazers_count")
		s.StargazersCount.WriteJSON(e)
	}
	if s.WatchersCount.Set {
		more.More()
		e.ObjField("watchers_count")
		s.WatchersCount.WriteJSON(e)
	}
	if s.Size.Set {
		more.More()
		e.ObjField("size")
		s.Size.WriteJSON(e)
	}
	if s.DefaultBranch.Set {
		more.More()
		e.ObjField("default_branch")
		s.DefaultBranch.WriteJSON(e)
	}
	if s.OpenIssuesCount.Set {
		more.More()
		e.ObjField("open_issues_count")
		s.OpenIssuesCount.WriteJSON(e)
	}
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.HasIssues.Set {
		more.More()
		e.ObjField("has_issues")
		s.HasIssues.WriteJSON(e)
	}
	if s.HasProjects.Set {
		more.More()
		e.ObjField("has_projects")
		s.HasProjects.WriteJSON(e)
	}
	if s.HasWiki.Set {
		more.More()
		e.ObjField("has_wiki")
		s.HasWiki.WriteJSON(e)
	}
	if s.HasPages.Set {
		more.More()
		e.ObjField("has_pages")
		s.HasPages.WriteJSON(e)
	}
	if s.HasDownloads.Set {
		more.More()
		e.ObjField("has_downloads")
		s.HasDownloads.WriteJSON(e)
	}
	if s.Archived.Set {
		more.More()
		e.ObjField("archived")
		s.Archived.WriteJSON(e)
	}
	if s.Disabled.Set {
		more.More()
		e.ObjField("disabled")
		s.Disabled.WriteJSON(e)
	}
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	if s.PushedAt.Set {
		more.More()
		e.ObjField("pushed_at")
		s.PushedAt.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e)
	}
	if s.UpdatedAt.Set {
		more.More()
		e.ObjField("updated_at")
		s.UpdatedAt.WriteJSON(e)
	}
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowAutoMerge.Set {
		more.More()
		e.ObjField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.SubscribersCount.Set {
		more.More()
		e.ObjField("subscribers_count")
		s.SubscribersCount.WriteJSON(e)
	}
	if s.NetworkCount.Set {
		more.More()
		e.ObjField("network_count")
		s.NetworkCount.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads RepositoryTemplateRepository from json stream.
func (s *RepositoryTemplateRepository) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RepositoryTemplateRepository to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "full_name":
			s.FullName.Reset()
			if err := s.FullName.ReadJSON(d); err != nil {
				return err
			}
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "fork":
			s.Fork.Reset()
			if err := s.Fork.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "archive_url":
			s.ArchiveURL.Reset()
			if err := s.ArchiveURL.ReadJSON(d); err != nil {
				return err
			}
		case "assignees_url":
			s.AssigneesURL.Reset()
			if err := s.AssigneesURL.ReadJSON(d); err != nil {
				return err
			}
		case "blobs_url":
			s.BlobsURL.Reset()
			if err := s.BlobsURL.ReadJSON(d); err != nil {
				return err
			}
		case "branches_url":
			s.BranchesURL.Reset()
			if err := s.BranchesURL.ReadJSON(d); err != nil {
				return err
			}
		case "collaborators_url":
			s.CollaboratorsURL.Reset()
			if err := s.CollaboratorsURL.ReadJSON(d); err != nil {
				return err
			}
		case "comments_url":
			s.CommentsURL.Reset()
			if err := s.CommentsURL.ReadJSON(d); err != nil {
				return err
			}
		case "commits_url":
			s.CommitsURL.Reset()
			if err := s.CommitsURL.ReadJSON(d); err != nil {
				return err
			}
		case "compare_url":
			s.CompareURL.Reset()
			if err := s.CompareURL.ReadJSON(d); err != nil {
				return err
			}
		case "contents_url":
			s.ContentsURL.Reset()
			if err := s.ContentsURL.ReadJSON(d); err != nil {
				return err
			}
		case "contributors_url":
			s.ContributorsURL.Reset()
			if err := s.ContributorsURL.ReadJSON(d); err != nil {
				return err
			}
		case "deployments_url":
			s.DeploymentsURL.Reset()
			if err := s.DeploymentsURL.ReadJSON(d); err != nil {
				return err
			}
		case "downloads_url":
			s.DownloadsURL.Reset()
			if err := s.DownloadsURL.ReadJSON(d); err != nil {
				return err
			}
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "forks_url":
			s.ForksURL.Reset()
			if err := s.ForksURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_commits_url":
			s.GitCommitsURL.Reset()
			if err := s.GitCommitsURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_refs_url":
			s.GitRefsURL.Reset()
			if err := s.GitRefsURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_tags_url":
			s.GitTagsURL.Reset()
			if err := s.GitTagsURL.ReadJSON(d); err != nil {
				return err
			}
		case "git_url":
			s.GitURL.Reset()
			if err := s.GitURL.ReadJSON(d); err != nil {
				return err
			}
		case "issue_comment_url":
			s.IssueCommentURL.Reset()
			if err := s.IssueCommentURL.ReadJSON(d); err != nil {
				return err
			}
		case "issue_events_url":
			s.IssueEventsURL.Reset()
			if err := s.IssueEventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "issues_url":
			s.IssuesURL.Reset()
			if err := s.IssuesURL.ReadJSON(d); err != nil {
				return err
			}
		case "keys_url":
			s.KeysURL.Reset()
			if err := s.KeysURL.ReadJSON(d); err != nil {
				return err
			}
		case "labels_url":
			s.LabelsURL.Reset()
			if err := s.LabelsURL.ReadJSON(d); err != nil {
				return err
			}
		case "languages_url":
			s.LanguagesURL.Reset()
			if err := s.LanguagesURL.ReadJSON(d); err != nil {
				return err
			}
		case "merges_url":
			s.MergesURL.Reset()
			if err := s.MergesURL.ReadJSON(d); err != nil {
				return err
			}
		case "milestones_url":
			s.MilestonesURL.Reset()
			if err := s.MilestonesURL.ReadJSON(d); err != nil {
				return err
			}
		case "notifications_url":
			s.NotificationsURL.Reset()
			if err := s.NotificationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "pulls_url":
			s.PullsURL.Reset()
			if err := s.PullsURL.ReadJSON(d); err != nil {
				return err
			}
		case "releases_url":
			s.ReleasesURL.Reset()
			if err := s.ReleasesURL.ReadJSON(d); err != nil {
				return err
			}
		case "ssh_url":
			s.SSHURL.Reset()
			if err := s.SSHURL.ReadJSON(d); err != nil {
				return err
			}
		case "stargazers_url":
			s.StargazersURL.Reset()
			if err := s.StargazersURL.ReadJSON(d); err != nil {
				return err
			}
		case "statuses_url":
			s.StatusesURL.Reset()
			if err := s.StatusesURL.ReadJSON(d); err != nil {
				return err
			}
		case "subscribers_url":
			s.SubscribersURL.Reset()
			if err := s.SubscribersURL.ReadJSON(d); err != nil {
				return err
			}
		case "subscription_url":
			s.SubscriptionURL.Reset()
			if err := s.SubscriptionURL.ReadJSON(d); err != nil {
				return err
			}
		case "tags_url":
			s.TagsURL.Reset()
			if err := s.TagsURL.ReadJSON(d); err != nil {
				return err
			}
		case "teams_url":
			s.TeamsURL.Reset()
			if err := s.TeamsURL.ReadJSON(d); err != nil {
				return err
			}
		case "trees_url":
			s.TreesURL.Reset()
			if err := s.TreesURL.ReadJSON(d); err != nil {
				return err
			}
		case "clone_url":
			s.CloneURL.Reset()
			if err := s.CloneURL.ReadJSON(d); err != nil {
				return err
			}
		case "mirror_url":
			s.MirrorURL.Reset()
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "hooks_url":
			s.HooksURL.Reset()
			if err := s.HooksURL.ReadJSON(d); err != nil {
				return err
			}
		case "svn_url":
			s.SvnURL.Reset()
			if err := s.SvnURL.ReadJSON(d); err != nil {
				return err
			}
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			s.Language.Reset()
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "forks_count":
			s.ForksCount.Reset()
			if err := s.ForksCount.ReadJSON(d); err != nil {
				return err
			}
		case "stargazers_count":
			s.StargazersCount.Reset()
			if err := s.StargazersCount.ReadJSON(d); err != nil {
				return err
			}
		case "watchers_count":
			s.WatchersCount.Reset()
			if err := s.WatchersCount.ReadJSON(d); err != nil {
				return err
			}
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(d); err != nil {
				return err
			}
		case "default_branch":
			s.DefaultBranch.Reset()
			if err := s.DefaultBranch.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues_count":
			s.OpenIssuesCount.Reset()
			if err := s.OpenIssuesCount.ReadJSON(d); err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(d); err != nil {
				return err
			}
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(d); err != nil {
				return err
			}
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(d); err != nil {
				return err
			}
		case "has_pages":
			s.HasPages.Reset()
			if err := s.HasPages.ReadJSON(d); err != nil {
				return err
			}
		case "has_downloads":
			s.HasDownloads.Reset()
			if err := s.HasDownloads.ReadJSON(d); err != nil {
				return err
			}
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(d); err != nil {
				return err
			}
		case "disabled":
			s.Disabled.Reset()
			if err := s.Disabled.ReadJSON(d); err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "pushed_at":
			s.PushedAt.Reset()
			if err := s.PushedAt.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(d); err != nil {
				return err
			}
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RepositoryTemplateRepositoryOwner) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Login.Set {
		more.More()
		e.ObjField("login")
		s.Login.WriteJSON(e)
	}
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.NodeID.Set {
		more.More()
		e.ObjField("node_id")
		s.NodeID.WriteJSON(e)
	}
	if s.AvatarURL.Set {
		more.More()
		e.ObjField("avatar_url")
		s.AvatarURL.WriteJSON(e)
	}
	if s.GravatarID.Set {
		more.More()
		e.ObjField("gravatar_id")
		s.GravatarID.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.FollowersURL.Set {
		more.More()
		e.ObjField("followers_url")
		s.FollowersURL.WriteJSON(e)
	}
	if s.FollowingURL.Set {
		more.More()
		e.ObjField("following_url")
		s.FollowingURL.WriteJSON(e)
	}
	if s.GistsURL.Set {
		more.More()
		e.ObjField("gists_url")
		s.GistsURL.WriteJSON(e)
	}
	if s.StarredURL.Set {
		more.More()
		e.ObjField("starred_url")
		s.StarredURL.WriteJSON(e)
	}
	if s.SubscriptionsURL.Set {
		more.More()
		e.ObjField("subscriptions_url")
		s.SubscriptionsURL.WriteJSON(e)
	}
	if s.OrganizationsURL.Set {
		more.More()
		e.ObjField("organizations_url")
		s.OrganizationsURL.WriteJSON(e)
	}
	if s.ReposURL.Set {
		more.More()
		e.ObjField("repos_url")
		s.ReposURL.WriteJSON(e)
	}
	if s.EventsURL.Set {
		more.More()
		e.ObjField("events_url")
		s.EventsURL.WriteJSON(e)
	}
	if s.ReceivedEventsURL.Set {
		more.More()
		e.ObjField("received_events_url")
		s.ReceivedEventsURL.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	if s.SiteAdmin.Set {
		more.More()
		e.ObjField("site_admin")
		s.SiteAdmin.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads RepositoryTemplateRepositoryOwner from json stream.
func (s *RepositoryTemplateRepositoryOwner) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RepositoryTemplateRepositoryOwner to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			s.Login.Reset()
			if err := s.Login.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(d); err != nil {
				return err
			}
		case "avatar_url":
			s.AvatarURL.Reset()
			if err := s.AvatarURL.ReadJSON(d); err != nil {
				return err
			}
		case "gravatar_id":
			s.GravatarID.Reset()
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "followers_url":
			s.FollowersURL.Reset()
			if err := s.FollowersURL.ReadJSON(d); err != nil {
				return err
			}
		case "following_url":
			s.FollowingURL.Reset()
			if err := s.FollowingURL.ReadJSON(d); err != nil {
				return err
			}
		case "gists_url":
			s.GistsURL.Reset()
			if err := s.GistsURL.ReadJSON(d); err != nil {
				return err
			}
		case "starred_url":
			s.StarredURL.Reset()
			if err := s.StarredURL.ReadJSON(d); err != nil {
				return err
			}
		case "subscriptions_url":
			s.SubscriptionsURL.Reset()
			if err := s.SubscriptionsURL.ReadJSON(d); err != nil {
				return err
			}
		case "organizations_url":
			s.OrganizationsURL.Reset()
			if err := s.OrganizationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "repos_url":
			s.ReposURL.Reset()
			if err := s.ReposURL.ReadJSON(d); err != nil {
				return err
			}
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "received_events_url":
			s.ReceivedEventsURL.Reset()
			if err := s.ReceivedEventsURL.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "site_admin":
			s.SiteAdmin.Reset()
			if err := s.SiteAdmin.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RepositoryTemplateRepositoryPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Admin.Set {
		more.More()
		e.ObjField("admin")
		s.Admin.WriteJSON(e)
	}
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	if s.Push.Set {
		more.More()
		e.ObjField("push")
		s.Push.WriteJSON(e)
	}
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	if s.Pull.Set {
		more.More()
		e.ObjField("pull")
		s.Pull.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads RepositoryTemplateRepositoryPermissions from json stream.
func (s *RepositoryTemplateRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RepositoryTemplateRepositoryPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			s.Admin.Reset()
			if err := s.Admin.ReadJSON(d); err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			s.Push.Reset()
			if err := s.Push.ReadJSON(d); err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "pull":
			s.Pull.Reset()
			if err := s.Pull.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReviewComment) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("pull_request_review_id")
	s.PullRequestReviewID.WriteJSON(e)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("diff_hunk")
	e.Str(s.DiffHunk)
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	more.More()
	e.ObjField("position")
	s.Position.WriteJSON(e)
	more.More()
	e.ObjField("original_position")
	e.Int(s.OriginalPosition)
	more.More()
	e.ObjField("commit_id")
	e.Str(s.CommitID)
	more.More()
	e.ObjField("original_commit_id")
	e.Str(s.OriginalCommitID)
	if s.InReplyToID.Set {
		more.More()
		e.ObjField("in_reply_to_id")
		s.InReplyToID.WriteJSON(e)
	}
	more.More()
	e.ObjField("user")
	s.User.WriteJSON(e)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("pull_request_url")
	json.WriteURI(e, s.PullRequestURL)
	more.More()
	e.ObjField("author_association")
	s.AuthorAssociation.WriteJSON(e)
	more.More()
	e.ObjField("_links")
	s.Links.WriteJSON(e)
	if s.BodyText.Set {
		more.More()
		e.ObjField("body_text")
		s.BodyText.WriteJSON(e)
	}
	if s.BodyHTML.Set {
		more.More()
		e.ObjField("body_html")
		s.BodyHTML.WriteJSON(e)
	}
	if s.Reactions.Set {
		more.More()
		e.ObjField("reactions")
		s.Reactions.WriteJSON(e)
	}
	if s.Side.Set {
		more.More()
		e.ObjField("side")
		s.Side.WriteJSON(e)
	}
	if s.StartSide.Set {
		more.More()
		e.ObjField("start_side")
		s.StartSide.WriteJSON(e)
	}
	if s.Line.Set {
		more.More()
		e.ObjField("line")
		s.Line.WriteJSON(e)
	}
	if s.OriginalLine.Set {
		more.More()
		e.ObjField("original_line")
		s.OriginalLine.WriteJSON(e)
	}
	if s.StartLine.Set {
		more.More()
		e.ObjField("start_line")
		s.StartLine.WriteJSON(e)
	}
	if s.OriginalStartLine.Set {
		more.More()
		e.ObjField("original_start_line")
		s.OriginalStartLine.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ReviewComment from json stream.
func (s *ReviewComment) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReviewComment to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "pull_request_review_id":
			if err := s.PullRequestReviewID.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "diff_hunk":
			v, err := d.Str()
			s.DiffHunk = string(v)
			if err != nil {
				return err
			}
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "position":
			if err := s.Position.ReadJSON(d); err != nil {
				return err
			}
		case "original_position":
			v, err := d.Int()
			s.OriginalPosition = int(v)
			if err != nil {
				return err
			}
		case "commit_id":
			v, err := d.Str()
			s.CommitID = string(v)
			if err != nil {
				return err
			}
		case "original_commit_id":
			v, err := d.Str()
			s.OriginalCommitID = string(v)
			if err != nil {
				return err
			}
		case "in_reply_to_id":
			s.InReplyToID.Reset()
			if err := s.InReplyToID.ReadJSON(d); err != nil {
				return err
			}
		case "user":
			if err := s.User.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "pull_request_url":
			v, err := json.ReadURI(d)
			s.PullRequestURL = v
			if err != nil {
				return err
			}
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(d); err != nil {
				return err
			}
		case "_links":
			if err := s.Links.ReadJSON(d); err != nil {
				return err
			}
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(d); err != nil {
				return err
			}
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(d); err != nil {
				return err
			}
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(d); err != nil {
				return err
			}
		case "side":
			s.Side.Reset()
			if err := s.Side.ReadJSON(d); err != nil {
				return err
			}
		case "start_side":
			s.StartSide.Reset()
			if err := s.StartSide.ReadJSON(d); err != nil {
				return err
			}
		case "line":
			s.Line.Reset()
			if err := s.Line.ReadJSON(d); err != nil {
				return err
			}
		case "original_line":
			s.OriginalLine.Reset()
			if err := s.OriginalLine.ReadJSON(d); err != nil {
				return err
			}
		case "start_line":
			s.StartLine.Reset()
			if err := s.StartLine.ReadJSON(d); err != nil {
				return err
			}
		case "original_start_line":
			s.OriginalStartLine.Reset()
			if err := s.OriginalStartLine.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReviewCommentLinks) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("self")
	s.Self.WriteJSON(e)
	more.More()
	e.ObjField("html")
	s.HTML.WriteJSON(e)
	more.More()
	e.ObjField("pull_request")
	s.PullRequest.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads ReviewCommentLinks from json stream.
func (s *ReviewCommentLinks) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReviewCommentLinks to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "self":
			if err := s.Self.ReadJSON(d); err != nil {
				return err
			}
		case "html":
			if err := s.HTML.ReadJSON(d); err != nil {
				return err
			}
		case "pull_request":
			if err := s.PullRequest.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ReviewCommentSide) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReviewCommentSide from json reader.
func (s *ReviewCommentSide) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReviewCommentSide to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReviewCommentSide(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ReviewCommentStartSide) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads ReviewCommentStartSide from json reader.
func (s *ReviewCommentStartSide) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ReviewCommentStartSide to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = ReviewCommentStartSide(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Runner) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("os")
	e.Str(s.Os)
	more.More()
	e.ObjField("status")
	e.Str(s.Status)
	more.More()
	e.ObjField("busy")
	e.Bool(s.Busy)
	more.More()
	e.ObjField("labels")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Labels {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads Runner from json stream.
func (s *Runner) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Runner to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "os":
			v, err := d.Str()
			s.Os = string(v)
			if err != nil {
				return err
			}
		case "status":
			v, err := d.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "busy":
			v, err := d.Bool()
			s.Busy = bool(v)
			if err != nil {
				return err
			}
		case "labels":
			s.Labels = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem RunnerLabelsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Labels = append(s.Labels, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RunnerApplication) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("os")
	e.Str(s.Os)
	more.More()
	e.ObjField("architecture")
	e.Str(s.Architecture)
	more.More()
	e.ObjField("download_url")
	e.Str(s.DownloadURL)
	more.More()
	e.ObjField("filename")
	e.Str(s.Filename)
	if s.TempDownloadToken.Set {
		more.More()
		e.ObjField("temp_download_token")
		s.TempDownloadToken.WriteJSON(e)
	}
	if s.SHA256Checksum.Set {
		more.More()
		e.ObjField("sha256_checksum")
		s.SHA256Checksum.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads RunnerApplication from json stream.
func (s *RunnerApplication) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RunnerApplication to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "os":
			v, err := d.Str()
			s.Os = string(v)
			if err != nil {
				return err
			}
		case "architecture":
			v, err := d.Str()
			s.Architecture = string(v)
			if err != nil {
				return err
			}
		case "download_url":
			v, err := d.Str()
			s.DownloadURL = string(v)
			if err != nil {
				return err
			}
		case "filename":
			v, err := d.Str()
			s.Filename = string(v)
			if err != nil {
				return err
			}
		case "temp_download_token":
			s.TempDownloadToken.Reset()
			if err := s.TempDownloadToken.ReadJSON(d); err != nil {
				return err
			}
		case "sha256_checksum":
			s.SHA256Checksum.Reset()
			if err := s.SHA256Checksum.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RunnerGroupsEnterprise) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Float64(s.ID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("visibility")
	e.Str(s.Visibility)
	more.More()
	e.ObjField("default")
	e.Bool(s.Default)
	if s.SelectedOrganizationsURL.Set {
		more.More()
		e.ObjField("selected_organizations_url")
		s.SelectedOrganizationsURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("runners_url")
	e.Str(s.RunnersURL)
	more.More()
	e.ObjField("allows_public_repositories")
	e.Bool(s.AllowsPublicRepositories)
	e.ObjEnd()
}

// ReadJSON reads RunnerGroupsEnterprise from json stream.
func (s *RunnerGroupsEnterprise) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RunnerGroupsEnterprise to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Float64()
			s.ID = float64(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "visibility":
			v, err := d.Str()
			s.Visibility = string(v)
			if err != nil {
				return err
			}
		case "default":
			v, err := d.Bool()
			s.Default = bool(v)
			if err != nil {
				return err
			}
		case "selected_organizations_url":
			s.SelectedOrganizationsURL.Reset()
			if err := s.SelectedOrganizationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "runners_url":
			v, err := d.Str()
			s.RunnersURL = string(v)
			if err != nil {
				return err
			}
		case "allows_public_repositories":
			v, err := d.Bool()
			s.AllowsPublicRepositories = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RunnerGroupsOrg) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Float64(s.ID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("visibility")
	e.Str(s.Visibility)
	more.More()
	e.ObjField("default")
	e.Bool(s.Default)
	if s.SelectedRepositoriesURL.Set {
		more.More()
		e.ObjField("selected_repositories_url")
		s.SelectedRepositoriesURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("runners_url")
	e.Str(s.RunnersURL)
	more.More()
	e.ObjField("inherited")
	e.Bool(s.Inherited)
	if s.InheritedAllowsPublicRepositories.Set {
		more.More()
		e.ObjField("inherited_allows_public_repositories")
		s.InheritedAllowsPublicRepositories.WriteJSON(e)
	}
	more.More()
	e.ObjField("allows_public_repositories")
	e.Bool(s.AllowsPublicRepositories)
	e.ObjEnd()
}

// ReadJSON reads RunnerGroupsOrg from json stream.
func (s *RunnerGroupsOrg) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RunnerGroupsOrg to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Float64()
			s.ID = float64(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "visibility":
			v, err := d.Str()
			s.Visibility = string(v)
			if err != nil {
				return err
			}
		case "default":
			v, err := d.Bool()
			s.Default = bool(v)
			if err != nil {
				return err
			}
		case "selected_repositories_url":
			s.SelectedRepositoriesURL.Reset()
			if err := s.SelectedRepositoriesURL.ReadJSON(d); err != nil {
				return err
			}
		case "runners_url":
			v, err := d.Str()
			s.RunnersURL = string(v)
			if err != nil {
				return err
			}
		case "inherited":
			v, err := d.Bool()
			s.Inherited = bool(v)
			if err != nil {
				return err
			}
		case "inherited_allows_public_repositories":
			s.InheritedAllowsPublicRepositories.Reset()
			if err := s.InheritedAllowsPublicRepositories.ReadJSON(d); err != nil {
				return err
			}
		case "allows_public_repositories":
			v, err := d.Bool()
			s.AllowsPublicRepositories = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RunnerLabelsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads RunnerLabelsItem from json stream.
func (s *RunnerLabelsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RunnerLabelsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RunnerLabelsItemType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads RunnerLabelsItemType from json reader.
func (s *RunnerLabelsItemType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RunnerLabelsItemType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = RunnerLabelsItemType(v)
	return nil
}

func (ScimDeleteUserFromOrgApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ScimDeleteUserFromOrgApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ScimDeleteUserFromOrgApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ScimDeleteUserFromOrgApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (ScimDeleteUserFromOrgApplicationScimJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (ScimDeleteUserFromOrgApplicationScimJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (ScimDeleteUserFromOrgApplicationScimJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (ScimDeleteUserFromOrgApplicationScimJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ScimDeleteUserFromOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads ScimDeleteUserFromOrgNoContent from json stream.
func (s *ScimDeleteUserFromOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimDeleteUserFromOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseGroup) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("id")
	e.Str(s.ID)
	if s.ExternalId.Set {
		more.More()
		e.ObjField("externalId")
		s.ExternalId.WriteJSON(e)
	}
	if s.DisplayName.Set {
		more.More()
		e.ObjField("displayName")
		s.DisplayName.WriteJSON(e)
	}
	if s.Members != nil {
		more.More()
		e.ObjField("members")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Members {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Meta.Set {
		more.More()
		e.ObjField("meta")
		s.Meta.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimEnterpriseGroup from json stream.
func (s *ScimEnterpriseGroup) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimEnterpriseGroup to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(d); err != nil {
				return err
			}
		case "displayName":
			s.DisplayName.Reset()
			if err := s.DisplayName.ReadJSON(d); err != nil {
				return err
			}
		case "members":
			s.Members = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ScimEnterpriseGroupMembersItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Members = append(s.Members, elem)
				return nil
			}); err != nil {
				return err
			}
		case "meta":
			s.Meta.Reset()
			if err := s.Meta.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseGroupMembersItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		e.ObjField("value")
		s.Value.WriteJSON(e)
	}
	if s.Ref.Set {
		more.More()
		e.ObjField("$ref")
		s.Ref.WriteJSON(e)
	}
	if s.Display.Set {
		more.More()
		e.ObjField("display")
		s.Display.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimEnterpriseGroupMembersItem from json stream.
func (s *ScimEnterpriseGroupMembersItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimEnterpriseGroupMembersItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(d); err != nil {
				return err
			}
		case "$ref":
			s.Ref.Reset()
			if err := s.Ref.ReadJSON(d); err != nil {
				return err
			}
		case "display":
			s.Display.Reset()
			if err := s.Display.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseGroupMeta) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ResourceType.Set {
		more.More()
		e.ObjField("resourceType")
		s.ResourceType.WriteJSON(e)
	}
	if s.Created.Set {
		more.More()
		e.ObjField("created")
		s.Created.WriteJSON(e)
	}
	if s.LastModified.Set {
		more.More()
		e.ObjField("lastModified")
		s.LastModified.WriteJSON(e)
	}
	if s.Location.Set {
		more.More()
		e.ObjField("location")
		s.Location.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimEnterpriseGroupMeta from json stream.
func (s *ScimEnterpriseGroupMeta) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimEnterpriseGroupMeta to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "resourceType":
			s.ResourceType.Reset()
			if err := s.ResourceType.ReadJSON(d); err != nil {
				return err
			}
		case "created":
			s.Created.Reset()
			if err := s.Created.ReadJSON(d); err != nil {
				return err
			}
		case "lastModified":
			s.LastModified.Reset()
			if err := s.LastModified.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseUser) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("id")
	e.Str(s.ID)
	if s.ExternalId.Set {
		more.More()
		e.ObjField("externalId")
		s.ExternalId.WriteJSON(e)
	}
	if s.UserName.Set {
		more.More()
		e.ObjField("userName")
		s.UserName.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Emails != nil {
		more.More()
		e.ObjField("emails")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Emails {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Groups != nil {
		more.More()
		e.ObjField("groups")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Active.Set {
		more.More()
		e.ObjField("active")
		s.Active.WriteJSON(e)
	}
	if s.Meta.Set {
		more.More()
		e.ObjField("meta")
		s.Meta.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimEnterpriseUser from json stream.
func (s *ScimEnterpriseUser) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimEnterpriseUser to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(d); err != nil {
				return err
			}
		case "userName":
			s.UserName.Reset()
			if err := s.UserName.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "emails":
			s.Emails = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ScimEnterpriseUserEmailsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Emails = append(s.Emails, elem)
				return nil
			}); err != nil {
				return err
			}
		case "groups":
			s.Groups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ScimEnterpriseUserGroupsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(d); err != nil {
				return err
			}
		case "meta":
			s.Meta.Reset()
			if err := s.Meta.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseUserEmailsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		e.ObjField("value")
		s.Value.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	if s.Primary.Set {
		more.More()
		e.ObjField("primary")
		s.Primary.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimEnterpriseUserEmailsItem from json stream.
func (s *ScimEnterpriseUserEmailsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimEnterpriseUserEmailsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "primary":
			s.Primary.Reset()
			if err := s.Primary.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseUserGroupsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		e.ObjField("value")
		s.Value.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimEnterpriseUserGroupsItem from json stream.
func (s *ScimEnterpriseUserGroupsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimEnterpriseUserGroupsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseUserMeta) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ResourceType.Set {
		more.More()
		e.ObjField("resourceType")
		s.ResourceType.WriteJSON(e)
	}
	if s.Created.Set {
		more.More()
		e.ObjField("created")
		s.Created.WriteJSON(e)
	}
	if s.LastModified.Set {
		more.More()
		e.ObjField("lastModified")
		s.LastModified.WriteJSON(e)
	}
	if s.Location.Set {
		more.More()
		e.ObjField("location")
		s.Location.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimEnterpriseUserMeta from json stream.
func (s *ScimEnterpriseUserMeta) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimEnterpriseUserMeta to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "resourceType":
			s.ResourceType.Reset()
			if err := s.ResourceType.ReadJSON(d); err != nil {
				return err
			}
		case "created":
			s.Created.Reset()
			if err := s.Created.ReadJSON(d); err != nil {
				return err
			}
		case "lastModified":
			s.LastModified.Reset()
			if err := s.LastModified.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseUserName) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.GivenName.Set {
		more.More()
		e.ObjField("givenName")
		s.GivenName.WriteJSON(e)
	}
	if s.FamilyName.Set {
		more.More()
		e.ObjField("familyName")
		s.FamilyName.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimEnterpriseUserName from json stream.
func (s *ScimEnterpriseUserName) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimEnterpriseUserName to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "givenName":
			s.GivenName.Reset()
			if err := s.GivenName.ReadJSON(d); err != nil {
				return err
			}
		case "familyName":
			s.FamilyName.Reset()
			if err := s.FamilyName.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimError) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	if s.Detail.Set {
		more.More()
		e.ObjField("detail")
		s.Detail.WriteJSON(e)
	}
	if s.Status.Set {
		more.More()
		e.ObjField("status")
		s.Status.WriteJSON(e)
	}
	if s.ScimType.Set {
		more.More()
		e.ObjField("scimType")
		s.ScimType.WriteJSON(e)
	}
	if s.Schemas != nil {
		more.More()
		e.ObjField("schemas")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Schemas {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ScimError from json stream.
func (s *ScimError) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimError to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		case "detail":
			s.Detail.Reset()
			if err := s.Detail.ReadJSON(d); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "scimType":
			s.ScimType.Reset()
			if err := s.ScimType.ReadJSON(d); err != nil {
				return err
			}
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimGroupListEnterprise) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("totalResults")
	e.Float64(s.TotalResults)
	more.More()
	e.ObjField("itemsPerPage")
	e.Float64(s.ItemsPerPage)
	more.More()
	e.ObjField("startIndex")
	e.Float64(s.StartIndex)
	more.More()
	e.ObjField("Resources")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Resources {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ScimGroupListEnterprise from json stream.
func (s *ScimGroupListEnterprise) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimGroupListEnterprise to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "totalResults":
			v, err := d.Float64()
			s.TotalResults = float64(v)
			if err != nil {
				return err
			}
		case "itemsPerPage":
			v, err := d.Float64()
			s.ItemsPerPage = float64(v)
			if err != nil {
				return err
			}
		case "startIndex":
			v, err := d.Float64()
			s.StartIndex = float64(v)
			if err != nil {
				return err
			}
		case "Resources":
			s.Resources = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ScimGroupListEnterpriseResourcesItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Resources = append(s.Resources, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimGroupListEnterpriseResourcesItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("id")
	e.Str(s.ID)
	if s.ExternalId.Set {
		more.More()
		e.ObjField("externalId")
		s.ExternalId.WriteJSON(e)
	}
	if s.DisplayName.Set {
		more.More()
		e.ObjField("displayName")
		s.DisplayName.WriteJSON(e)
	}
	if s.Members != nil {
		more.More()
		e.ObjField("members")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Members {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Meta.Set {
		more.More()
		e.ObjField("meta")
		s.Meta.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimGroupListEnterpriseResourcesItem from json stream.
func (s *ScimGroupListEnterpriseResourcesItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimGroupListEnterpriseResourcesItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(d); err != nil {
				return err
			}
		case "displayName":
			s.DisplayName.Reset()
			if err := s.DisplayName.ReadJSON(d); err != nil {
				return err
			}
		case "members":
			s.Members = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ScimGroupListEnterpriseResourcesItemMembersItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Members = append(s.Members, elem)
				return nil
			}); err != nil {
				return err
			}
		case "meta":
			s.Meta.Reset()
			if err := s.Meta.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimGroupListEnterpriseResourcesItemMembersItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		e.ObjField("value")
		s.Value.WriteJSON(e)
	}
	if s.Ref.Set {
		more.More()
		e.ObjField("$ref")
		s.Ref.WriteJSON(e)
	}
	if s.Display.Set {
		more.More()
		e.ObjField("display")
		s.Display.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimGroupListEnterpriseResourcesItemMembersItem from json stream.
func (s *ScimGroupListEnterpriseResourcesItemMembersItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimGroupListEnterpriseResourcesItemMembersItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(d); err != nil {
				return err
			}
		case "$ref":
			s.Ref.Reset()
			if err := s.Ref.ReadJSON(d); err != nil {
				return err
			}
		case "display":
			s.Display.Reset()
			if err := s.Display.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimGroupListEnterpriseResourcesItemMeta) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ResourceType.Set {
		more.More()
		e.ObjField("resourceType")
		s.ResourceType.WriteJSON(e)
	}
	if s.Created.Set {
		more.More()
		e.ObjField("created")
		s.Created.WriteJSON(e)
	}
	if s.LastModified.Set {
		more.More()
		e.ObjField("lastModified")
		s.LastModified.WriteJSON(e)
	}
	if s.Location.Set {
		more.More()
		e.ObjField("location")
		s.Location.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimGroupListEnterpriseResourcesItemMeta from json stream.
func (s *ScimGroupListEnterpriseResourcesItemMeta) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimGroupListEnterpriseResourcesItemMeta to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "resourceType":
			s.ResourceType.Reset()
			if err := s.ResourceType.ReadJSON(d); err != nil {
				return err
			}
		case "created":
			s.Created.Reset()
			if err := s.Created.ReadJSON(d); err != nil {
				return err
			}
		case "lastModified":
			s.LastModified.Reset()
			if err := s.LastModified.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimProvisionAndInviteUserReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("userName")
	e.Str(s.UserName)
	if s.DisplayName.Set {
		more.More()
		e.ObjField("displayName")
		s.DisplayName.WriteJSON(e)
	}
	more.More()
	e.ObjField("name")
	s.Name.WriteJSON(e)
	more.More()
	e.ObjField("emails")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Emails {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if s.Schemas != nil {
		more.More()
		e.ObjField("schemas")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Schemas {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.ExternalId.Set {
		more.More()
		e.ObjField("externalId")
		s.ExternalId.WriteJSON(e)
	}
	if s.Groups != nil {
		more.More()
		e.ObjField("groups")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Groups {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Active.Set {
		more.More()
		e.ObjField("active")
		s.Active.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimProvisionAndInviteUserReq from json stream.
func (s *ScimProvisionAndInviteUserReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimProvisionAndInviteUserReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "userName":
			v, err := d.Str()
			s.UserName = string(v)
			if err != nil {
				return err
			}
		case "displayName":
			s.DisplayName.Reset()
			if err := s.DisplayName.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "emails":
			s.Emails = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ScimProvisionAndInviteUserReqEmailsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Emails = append(s.Emails, elem)
				return nil
			}); err != nil {
				return err
			}
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(d); err != nil {
				return err
			}
		case "groups":
			s.Groups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimProvisionAndInviteUserReqEmailsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("value")
	e.Str(s.Value)
	if s.Primary.Set {
		more.More()
		e.ObjField("primary")
		s.Primary.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimProvisionAndInviteUserReqEmailsItem from json stream.
func (s *ScimProvisionAndInviteUserReqEmailsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimProvisionAndInviteUserReqEmailsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			v, err := d.Str()
			s.Value = string(v)
			if err != nil {
				return err
			}
		case "primary":
			s.Primary.Reset()
			if err := s.Primary.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimProvisionAndInviteUserReqName) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("givenName")
	e.Str(s.GivenName)
	more.More()
	e.ObjField("familyName")
	e.Str(s.FamilyName)
	if s.Formatted.Set {
		more.More()
		e.ObjField("formatted")
		s.Formatted.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimProvisionAndInviteUserReqName from json stream.
func (s *ScimProvisionAndInviteUserReqName) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimProvisionAndInviteUserReqName to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "givenName":
			v, err := d.Str()
			s.GivenName = string(v)
			if err != nil {
				return err
			}
		case "familyName":
			v, err := d.Str()
			s.FamilyName = string(v)
			if err != nil {
				return err
			}
		case "formatted":
			s.Formatted.Reset()
			if err := s.Formatted.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimSetInformationForProvisionedUserReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Schemas != nil {
		more.More()
		e.ObjField("schemas")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Schemas {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.DisplayName.Set {
		more.More()
		e.ObjField("displayName")
		s.DisplayName.WriteJSON(e)
	}
	if s.ExternalId.Set {
		more.More()
		e.ObjField("externalId")
		s.ExternalId.WriteJSON(e)
	}
	if s.Groups != nil {
		more.More()
		e.ObjField("groups")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Groups {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Active.Set {
		more.More()
		e.ObjField("active")
		s.Active.WriteJSON(e)
	}
	more.More()
	e.ObjField("userName")
	e.Str(s.UserName)
	more.More()
	e.ObjField("name")
	s.Name.WriteJSON(e)
	more.More()
	e.ObjField("emails")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Emails {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ScimSetInformationForProvisionedUserReq from json stream.
func (s *ScimSetInformationForProvisionedUserReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimSetInformationForProvisionedUserReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "displayName":
			s.DisplayName.Reset()
			if err := s.DisplayName.ReadJSON(d); err != nil {
				return err
			}
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(d); err != nil {
				return err
			}
		case "groups":
			s.Groups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(d); err != nil {
				return err
			}
		case "userName":
			v, err := d.Str()
			s.UserName = string(v)
			if err != nil {
				return err
			}
		case "name":
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "emails":
			s.Emails = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ScimSetInformationForProvisionedUserReqEmailsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Emails = append(s.Emails, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimSetInformationForProvisionedUserReqEmailsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	more.More()
	e.ObjField("value")
	e.Str(s.Value)
	if s.Primary.Set {
		more.More()
		e.ObjField("primary")
		s.Primary.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimSetInformationForProvisionedUserReqEmailsItem from json stream.
func (s *ScimSetInformationForProvisionedUserReqEmailsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimSetInformationForProvisionedUserReqEmailsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		case "value":
			v, err := d.Str()
			s.Value = string(v)
			if err != nil {
				return err
			}
		case "primary":
			s.Primary.Reset()
			if err := s.Primary.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimSetInformationForProvisionedUserReqName) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("givenName")
	e.Str(s.GivenName)
	more.More()
	e.ObjField("familyName")
	e.Str(s.FamilyName)
	if s.Formatted.Set {
		more.More()
		e.ObjField("formatted")
		s.Formatted.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimSetInformationForProvisionedUserReqName from json stream.
func (s *ScimSetInformationForProvisionedUserReqName) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimSetInformationForProvisionedUserReqName to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "givenName":
			v, err := d.Str()
			s.GivenName = string(v)
			if err != nil {
				return err
			}
		case "familyName":
			v, err := d.Str()
			s.FamilyName = string(v)
			if err != nil {
				return err
			}
		case "formatted":
			s.Formatted.Reset()
			if err := s.Formatted.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterprise) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("totalResults")
	e.Float64(s.TotalResults)
	more.More()
	e.ObjField("itemsPerPage")
	e.Float64(s.ItemsPerPage)
	more.More()
	e.ObjField("startIndex")
	e.Float64(s.StartIndex)
	more.More()
	e.ObjField("Resources")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Resources {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ScimUserListEnterprise from json stream.
func (s *ScimUserListEnterprise) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimUserListEnterprise to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "totalResults":
			v, err := d.Float64()
			s.TotalResults = float64(v)
			if err != nil {
				return err
			}
		case "itemsPerPage":
			v, err := d.Float64()
			s.ItemsPerPage = float64(v)
			if err != nil {
				return err
			}
		case "startIndex":
			v, err := d.Float64()
			s.StartIndex = float64(v)
			if err != nil {
				return err
			}
		case "Resources":
			s.Resources = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ScimUserListEnterpriseResourcesItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Resources = append(s.Resources, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterpriseResourcesItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("schemas")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Schemas {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("id")
	e.Str(s.ID)
	if s.ExternalId.Set {
		more.More()
		e.ObjField("externalId")
		s.ExternalId.WriteJSON(e)
	}
	if s.UserName.Set {
		more.More()
		e.ObjField("userName")
		s.UserName.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Emails != nil {
		more.More()
		e.ObjField("emails")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Emails {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Groups != nil {
		more.More()
		e.ObjField("groups")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Active.Set {
		more.More()
		e.ObjField("active")
		s.Active.WriteJSON(e)
	}
	if s.Meta.Set {
		more.More()
		e.ObjField("meta")
		s.Meta.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimUserListEnterpriseResourcesItem from json stream.
func (s *ScimUserListEnterpriseResourcesItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimUserListEnterpriseResourcesItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			s.Schemas = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Schemas = append(s.Schemas, elem)
				return nil
			}); err != nil {
				return err
			}
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(d); err != nil {
				return err
			}
		case "userName":
			s.UserName.Reset()
			if err := s.UserName.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "emails":
			s.Emails = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ScimUserListEnterpriseResourcesItemEmailsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Emails = append(s.Emails, elem)
				return nil
			}); err != nil {
				return err
			}
		case "groups":
			s.Groups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem ScimUserListEnterpriseResourcesItemGroupsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(d); err != nil {
				return err
			}
		case "meta":
			s.Meta.Reset()
			if err := s.Meta.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterpriseResourcesItemEmailsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		e.ObjField("value")
		s.Value.WriteJSON(e)
	}
	if s.Primary.Set {
		more.More()
		e.ObjField("primary")
		s.Primary.WriteJSON(e)
	}
	if s.Type.Set {
		more.More()
		e.ObjField("type")
		s.Type.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimUserListEnterpriseResourcesItemEmailsItem from json stream.
func (s *ScimUserListEnterpriseResourcesItemEmailsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimUserListEnterpriseResourcesItemEmailsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(d); err != nil {
				return err
			}
		case "primary":
			s.Primary.Reset()
			if err := s.Primary.ReadJSON(d); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterpriseResourcesItemGroupsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		e.ObjField("value")
		s.Value.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimUserListEnterpriseResourcesItemGroupsItem from json stream.
func (s *ScimUserListEnterpriseResourcesItemGroupsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimUserListEnterpriseResourcesItemGroupsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterpriseResourcesItemMeta) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ResourceType.Set {
		more.More()
		e.ObjField("resourceType")
		s.ResourceType.WriteJSON(e)
	}
	if s.Created.Set {
		more.More()
		e.ObjField("created")
		s.Created.WriteJSON(e)
	}
	if s.LastModified.Set {
		more.More()
		e.ObjField("lastModified")
		s.LastModified.WriteJSON(e)
	}
	if s.Location.Set {
		more.More()
		e.ObjField("location")
		s.Location.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimUserListEnterpriseResourcesItemMeta from json stream.
func (s *ScimUserListEnterpriseResourcesItemMeta) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimUserListEnterpriseResourcesItemMeta to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "resourceType":
			s.ResourceType.Reset()
			if err := s.ResourceType.ReadJSON(d); err != nil {
				return err
			}
		case "created":
			s.Created.Reset()
			if err := s.Created.ReadJSON(d); err != nil {
				return err
			}
		case "lastModified":
			s.LastModified.Reset()
			if err := s.LastModified.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterpriseResourcesItemName) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.GivenName.Set {
		more.More()
		e.ObjField("givenName")
		s.GivenName.WriteJSON(e)
	}
	if s.FamilyName.Set {
		more.More()
		e.ObjField("familyName")
		s.FamilyName.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ScimUserListEnterpriseResourcesItemName from json stream.
func (s *ScimUserListEnterpriseResourcesItemName) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ScimUserListEnterpriseResourcesItemName to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "givenName":
			s.GivenName.Reset()
			if err := s.GivenName.ReadJSON(d); err != nil {
				return err
			}
		case "familyName":
			s.FamilyName.Reset()
			if err := s.FamilyName.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SearchCodeOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("incomplete_results")
	e.Bool(s.IncompleteResults)
	more.More()
	e.ObjField("items")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads SearchCodeOK from json stream.
func (s *SearchCodeOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchCodeOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "incomplete_results":
			v, err := d.Bool()
			s.IncompleteResults = bool(v)
			if err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem CodeSearchResultItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SearchCodeOrder) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchCodeOrder from json reader.
func (s *SearchCodeOrder) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchCodeOrder to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchCodeOrder(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SearchCodeSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchCodeSort from json reader.
func (s *SearchCodeSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchCodeSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchCodeSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SearchCommitsOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("incomplete_results")
	e.Bool(s.IncompleteResults)
	more.More()
	e.ObjField("items")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads SearchCommitsOK from json stream.
func (s *SearchCommitsOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchCommitsOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "incomplete_results":
			v, err := d.Bool()
			s.IncompleteResults = bool(v)
			if err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem CommitSearchResultItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SearchCommitsOrder) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchCommitsOrder from json reader.
func (s *SearchCommitsOrder) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchCommitsOrder to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchCommitsOrder(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SearchCommitsSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchCommitsSort from json reader.
func (s *SearchCommitsSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchCommitsSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchCommitsSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SearchIssuesAndPullRequestsOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("incomplete_results")
	e.Bool(s.IncompleteResults)
	more.More()
	e.ObjField("items")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads SearchIssuesAndPullRequestsOK from json stream.
func (s *SearchIssuesAndPullRequestsOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchIssuesAndPullRequestsOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "incomplete_results":
			v, err := d.Bool()
			s.IncompleteResults = bool(v)
			if err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem IssueSearchResultItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SearchIssuesAndPullRequestsOrder) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchIssuesAndPullRequestsOrder from json reader.
func (s *SearchIssuesAndPullRequestsOrder) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchIssuesAndPullRequestsOrder to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchIssuesAndPullRequestsOrder(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SearchIssuesAndPullRequestsSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchIssuesAndPullRequestsSort from json reader.
func (s *SearchIssuesAndPullRequestsSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchIssuesAndPullRequestsSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchIssuesAndPullRequestsSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SearchLabelsOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("incomplete_results")
	e.Bool(s.IncompleteResults)
	more.More()
	e.ObjField("items")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads SearchLabelsOK from json stream.
func (s *SearchLabelsOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchLabelsOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "incomplete_results":
			v, err := d.Bool()
			s.IncompleteResults = bool(v)
			if err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem LabelSearchResultItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SearchLabelsOrder) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchLabelsOrder from json reader.
func (s *SearchLabelsOrder) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchLabelsOrder to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchLabelsOrder(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SearchLabelsSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchLabelsSort from json reader.
func (s *SearchLabelsSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchLabelsSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchLabelsSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SearchReposOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("incomplete_results")
	e.Bool(s.IncompleteResults)
	more.More()
	e.ObjField("items")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads SearchReposOK from json stream.
func (s *SearchReposOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchReposOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "incomplete_results":
			v, err := d.Bool()
			s.IncompleteResults = bool(v)
			if err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem RepoSearchResultItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SearchReposOrder) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchReposOrder from json reader.
func (s *SearchReposOrder) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchReposOrder to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchReposOrder(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SearchReposSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchReposSort from json reader.
func (s *SearchReposSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchReposSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchReposSort(v)
	return nil
}

func (SearchResultTextMatches) WriteJSON(e *json.Encoder)      {}
func (SearchResultTextMatches) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s SearchResultTextMatchesItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ObjectURL.Set {
		more.More()
		e.ObjField("object_url")
		s.ObjectURL.WriteJSON(e)
	}
	if s.ObjectType.Set {
		more.More()
		e.ObjField("object_type")
		s.ObjectType.WriteJSON(e)
	}
	if s.Property.Set {
		more.More()
		e.ObjField("property")
		s.Property.WriteJSON(e)
	}
	if s.Fragment.Set {
		more.More()
		e.ObjField("fragment")
		s.Fragment.WriteJSON(e)
	}
	if s.Matches != nil {
		more.More()
		e.ObjField("matches")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Matches {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads SearchResultTextMatchesItem from json stream.
func (s *SearchResultTextMatchesItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchResultTextMatchesItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "object_url":
			s.ObjectURL.Reset()
			if err := s.ObjectURL.ReadJSON(d); err != nil {
				return err
			}
		case "object_type":
			s.ObjectType.Reset()
			if err := s.ObjectType.ReadJSON(d); err != nil {
				return err
			}
		case "property":
			s.Property.Reset()
			if err := s.Property.ReadJSON(d); err != nil {
				return err
			}
		case "fragment":
			s.Fragment.Reset()
			if err := s.Fragment.ReadJSON(d); err != nil {
				return err
			}
		case "matches":
			s.Matches = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem SearchResultTextMatchesItemMatchesItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Matches = append(s.Matches, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SearchResultTextMatchesItemMatchesItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Text.Set {
		more.More()
		e.ObjField("text")
		s.Text.WriteJSON(e)
	}
	if s.Indices != nil {
		more.More()
		e.ObjField("indices")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Indices {
			more.More()
			e.Int(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads SearchResultTextMatchesItemMatchesItem from json stream.
func (s *SearchResultTextMatchesItemMatchesItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchResultTextMatchesItemMatchesItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "text":
			s.Text.Reset()
			if err := s.Text.ReadJSON(d); err != nil {
				return err
			}
		case "indices":
			s.Indices = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem int
				v, err := d.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.Indices = append(s.Indices, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SearchTopicsOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("incomplete_results")
	e.Bool(s.IncompleteResults)
	more.More()
	e.ObjField("items")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads SearchTopicsOK from json stream.
func (s *SearchTopicsOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchTopicsOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "incomplete_results":
			v, err := d.Bool()
			s.IncompleteResults = bool(v)
			if err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem TopicSearchResultItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SearchUsersOK) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_count")
	e.Int(s.TotalCount)
	more.More()
	e.ObjField("incomplete_results")
	e.Bool(s.IncompleteResults)
	more.More()
	e.ObjField("items")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads SearchUsersOK from json stream.
func (s *SearchUsersOK) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchUsersOK to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			v, err := d.Int()
			s.TotalCount = int(v)
			if err != nil {
				return err
			}
		case "incomplete_results":
			v, err := d.Bool()
			s.IncompleteResults = bool(v)
			if err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem UserSearchResultItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SearchUsersOrder) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchUsersOrder from json reader.
func (s *SearchUsersOrder) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchUsersOrder to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchUsersOrder(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SearchUsersSort) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SearchUsersSort from json reader.
func (s *SearchUsersSort) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SearchUsersSort to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SearchUsersSort(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningAlert) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Number.Set {
		more.More()
		e.ObjField("number")
		s.Number.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e)
	}
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.HTMLURL.Set {
		more.More()
		e.ObjField("html_url")
		s.HTMLURL.WriteJSON(e)
	}
	if s.LocationsURL.Set {
		more.More()
		e.ObjField("locations_url")
		s.LocationsURL.WriteJSON(e)
	}
	if s.State.Set {
		more.More()
		e.ObjField("state")
		s.State.WriteJSON(e)
	}
	if s.Resolution.Set {
		more.More()
		e.ObjField("resolution")
		s.Resolution.WriteJSON(e)
	}
	if s.ResolvedAt.Set {
		more.More()
		e.ObjField("resolved_at")
		s.ResolvedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.ResolvedBy.Set {
		more.More()
		e.ObjField("resolved_by")
		s.ResolvedBy.WriteJSON(e)
	}
	if s.SecretType.Set {
		more.More()
		e.ObjField("secret_type")
		s.SecretType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads SecretScanningAlert from json stream.
func (s *SecretScanningAlert) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SecretScanningAlert to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			s.Number.Reset()
			if err := s.Number.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(d); err != nil {
				return err
			}
		case "locations_url":
			s.LocationsURL.Reset()
			if err := s.LocationsURL.ReadJSON(d); err != nil {
				return err
			}
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "resolution":
			s.Resolution.Reset()
			if err := s.Resolution.ReadJSON(d); err != nil {
				return err
			}
		case "resolved_at":
			s.ResolvedAt.Reset()
			if err := s.ResolvedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "resolved_by":
			s.ResolvedBy.Reset()
			if err := s.ResolvedBy.ReadJSON(d); err != nil {
				return err
			}
		case "secret_type":
			s.SecretType.Reset()
			if err := s.SecretType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningAlertResolution) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SecretScanningAlertResolution from json reader.
func (s *SecretScanningAlertResolution) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SecretScanningAlertResolution to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SecretScanningAlertResolution(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningAlertState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SecretScanningAlertState from json reader.
func (s *SecretScanningAlertState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SecretScanningAlertState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SecretScanningAlertState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningGetAlertNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads SecretScanningGetAlertNotFound from json stream.
func (s *SecretScanningGetAlertNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SecretScanningGetAlertNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (SecretScanningListAlertsForOrgOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (SecretScanningListAlertsForOrgOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s SecretScanningListAlertsForOrgState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SecretScanningListAlertsForOrgState from json reader.
func (s *SecretScanningListAlertsForOrgState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SecretScanningListAlertsForOrgState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SecretScanningListAlertsForOrgState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningListAlertsForRepoNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads SecretScanningListAlertsForRepoNotFound from json stream.
func (s *SecretScanningListAlertsForRepoNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SecretScanningListAlertsForRepoNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (SecretScanningListAlertsForRepoOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (SecretScanningListAlertsForRepoOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s SecretScanningListAlertsForRepoState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads SecretScanningListAlertsForRepoState from json reader.
func (s *SecretScanningListAlertsForRepoState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SecretScanningListAlertsForRepoState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = SecretScanningListAlertsForRepoState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningUpdateAlertNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads SecretScanningUpdateAlertNotFound from json stream.
func (s *SecretScanningUpdateAlertNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SecretScanningUpdateAlertNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningUpdateAlertReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	if s.Resolution.Set {
		more.More()
		e.ObjField("resolution")
		s.Resolution.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads SecretScanningUpdateAlertReq from json stream.
func (s *SecretScanningUpdateAlertReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SecretScanningUpdateAlertReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "resolution":
			s.Resolution.Reset()
			if err := s.Resolution.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningUpdateAlertUnprocessableEntity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads SecretScanningUpdateAlertUnprocessableEntity from json stream.
func (s *SecretScanningUpdateAlertUnprocessableEntity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SecretScanningUpdateAlertUnprocessableEntity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SelectedActions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.GithubOwnedAllowed.Set {
		more.More()
		e.ObjField("github_owned_allowed")
		s.GithubOwnedAllowed.WriteJSON(e)
	}
	if s.VerifiedAllowed.Set {
		more.More()
		e.ObjField("verified_allowed")
		s.VerifiedAllowed.WriteJSON(e)
	}
	if s.PatternsAllowed != nil {
		more.More()
		e.ObjField("patterns_allowed")
		more.Down()
		e.ArrStart()
		for _, elem := range s.PatternsAllowed {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads SelectedActions from json stream.
func (s *SelectedActions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SelectedActions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "github_owned_allowed":
			s.GithubOwnedAllowed.Reset()
			if err := s.GithubOwnedAllowed.ReadJSON(d); err != nil {
				return err
			}
		case "verified_allowed":
			s.VerifiedAllowed.Reset()
			if err := s.VerifiedAllowed.ReadJSON(d); err != nil {
				return err
			}
		case "patterns_allowed":
			s.PatternsAllowed = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.PatternsAllowed = append(s.PatternsAllowed, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (SelectedActionsURL) WriteJSON(e *json.Encoder)      {}
func (SelectedActionsURL) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ServiceUnavailable) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Code.Set {
		more.More()
		e.ObjField("code")
		s.Code.WriteJSON(e)
	}
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ServiceUnavailable from json stream.
func (s *ServiceUnavailable) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ServiceUnavailable to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			s.Code.Reset()
			if err := s.Code.ReadJSON(d); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ShortBlob) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	e.ObjEnd()
}

// ReadJSON reads ShortBlob from json stream.
func (s *ShortBlob) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ShortBlob to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ShortBranch) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("commit")
	s.Commit.WriteJSON(e)
	more.More()
	e.ObjField("protected")
	e.Bool(s.Protected)
	if s.Protection.Set {
		more.More()
		e.ObjField("protection")
		s.Protection.WriteJSON(e)
	}
	if s.ProtectionURL.Set {
		more.More()
		e.ObjField("protection_url")
		s.ProtectionURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ShortBranch from json stream.
func (s *ShortBranch) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ShortBranch to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "commit":
			if err := s.Commit.ReadJSON(d); err != nil {
				return err
			}
		case "protected":
			v, err := d.Bool()
			s.Protected = bool(v)
			if err != nil {
				return err
			}
		case "protection":
			s.Protection.Reset()
			if err := s.Protection.ReadJSON(d); err != nil {
				return err
			}
		case "protection_url":
			s.ProtectionURL.Reset()
			if err := s.ProtectionURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ShortBranchCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads ShortBranchCommit from json stream.
func (s *ShortBranchCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ShortBranchCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SimpleCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Str(s.ID)
	more.More()
	e.ObjField("tree_id")
	e.Str(s.TreeID)
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("timestamp")
	json.WriteDateTime(e, s.Timestamp)
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("committer")
	s.Committer.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads SimpleCommit from json stream.
func (s *SimpleCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SimpleCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "tree_id":
			v, err := d.Str()
			s.TreeID = string(v)
			if err != nil {
				return err
			}
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "timestamp":
			v, err := json.ReadDateTime(d)
			s.Timestamp = v
			if err != nil {
				return err
			}
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "committer":
			if err := s.Committer.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SimpleCommitAuthor) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	e.ObjEnd()
}

// ReadJSON reads SimpleCommitAuthor from json stream.
func (s *SimpleCommitAuthor) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SimpleCommitAuthor to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SimpleCommitCommitter) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("email")
	e.Str(s.Email)
	e.ObjEnd()
}

// ReadJSON reads SimpleCommitCommitter from json stream.
func (s *SimpleCommitCommitter) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SimpleCommitCommitter to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "email":
			v, err := d.Str()
			s.Email = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SimpleCommitStatus) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("context")
	e.Str(s.Context)
	more.More()
	e.ObjField("target_url")
	json.WriteURI(e, s.TargetURL)
	if s.Required.Set {
		more.More()
		e.ObjField("required")
		s.Required.WriteJSON(e)
	}
	more.More()
	e.ObjField("avatar_url")
	s.AvatarURL.WriteJSON(e)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	e.ObjEnd()
}

// ReadJSON reads SimpleCommitStatus from json stream.
func (s *SimpleCommitStatus) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SimpleCommitStatus to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "context":
			v, err := d.Str()
			s.Context = string(v)
			if err != nil {
				return err
			}
		case "target_url":
			v, err := json.ReadURI(d)
			s.TargetURL = v
			if err != nil {
				return err
			}
		case "required":
			s.Required.Reset()
			if err := s.Required.ReadJSON(d); err != nil {
				return err
			}
		case "avatar_url":
			if err := s.AvatarURL.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SimpleUser) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("followers_url")
	json.WriteURI(e, s.FollowersURL)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("subscriptions_url")
	json.WriteURI(e, s.SubscriptionsURL)
	more.More()
	e.ObjField("organizations_url")
	json.WriteURI(e, s.OrganizationsURL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	more.More()
	e.ObjField("received_events_url")
	json.WriteURI(e, s.ReceivedEventsURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("site_admin")
	e.Bool(s.SiteAdmin)
	if s.StarredAt.Set {
		more.More()
		e.ObjField("starred_at")
		s.StarredAt.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads SimpleUser from json stream.
func (s *SimpleUser) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SimpleUser to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := json.ReadURI(d)
			s.FollowersURL = v
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "subscriptions_url":
			v, err := json.ReadURI(d)
			s.SubscriptionsURL = v
			if err != nil {
				return err
			}
		case "organizations_url":
			v, err := json.ReadURI(d)
			s.OrganizationsURL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "received_events_url":
			v, err := json.ReadURI(d)
			s.ReceivedEventsURL = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "site_admin":
			v, err := d.Bool()
			s.SiteAdmin = bool(v)
			if err != nil {
				return err
			}
		case "starred_at":
			s.StarredAt.Reset()
			if err := s.StarredAt.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s StarredRepository) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("starred_at")
	json.WriteDateTime(e, s.StarredAt)
	more.More()
	e.ObjField("repo")
	s.Repo.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads StarredRepository from json stream.
func (s *StarredRepository) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode StarredRepository to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "starred_at":
			v, err := json.ReadDateTime(d)
			s.StarredAt = v
			if err != nil {
				return err
			}
		case "repo":
			if err := s.Repo.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Status) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("avatar_url")
	s.AvatarURL.WriteJSON(e)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("description")
	e.Str(s.Description)
	more.More()
	e.ObjField("target_url")
	e.Str(s.TargetURL)
	more.More()
	e.ObjField("context")
	e.Str(s.Context)
	more.More()
	e.ObjField("created_at")
	e.Str(s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	e.Str(s.UpdatedAt)
	more.More()
	e.ObjField("creator")
	s.Creator.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads Status from json stream.
func (s *Status) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Status to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "avatar_url":
			if err := s.AvatarURL.ReadJSON(d); err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "description":
			v, err := d.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "target_url":
			v, err := d.Str()
			s.TargetURL = string(v)
			if err != nil {
				return err
			}
		case "context":
			v, err := d.Str()
			s.Context = string(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := d.Str()
			s.CreatedAt = string(v)
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := d.Str()
			s.UpdatedAt = string(v)
			if err != nil {
				return err
			}
		case "creator":
			if err := s.Creator.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s StatusCheckPolicy) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("strict")
	e.Bool(s.Strict)
	more.More()
	e.ObjField("contexts")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Contexts {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	more.More()
	e.ObjField("contexts_url")
	json.WriteURI(e, s.ContextsURL)
	e.ObjEnd()
}

// ReadJSON reads StatusCheckPolicy from json stream.
func (s *StatusCheckPolicy) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode StatusCheckPolicy to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "strict":
			v, err := d.Bool()
			s.Strict = bool(v)
			if err != nil {
				return err
			}
		case "contexts":
			s.Contexts = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Contexts = append(s.Contexts, elem)
				return nil
			}); err != nil {
				return err
			}
		case "contexts_url":
			v, err := json.ReadURI(d)
			s.ContextsURL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Tag) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("commit")
	s.Commit.WriteJSON(e)
	more.More()
	e.ObjField("zipball_url")
	json.WriteURI(e, s.ZipballURL)
	more.More()
	e.ObjField("tarball_url")
	json.WriteURI(e, s.TarballURL)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	e.ObjEnd()
}

// ReadJSON reads Tag from json stream.
func (s *Tag) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Tag to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "commit":
			if err := s.Commit.ReadJSON(d); err != nil {
				return err
			}
		case "zipball_url":
			v, err := json.ReadURI(d)
			s.ZipballURL = v
			if err != nil {
				return err
			}
		case "tarball_url":
			v, err := json.ReadURI(d)
			s.TarballURL = v
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TagCommit) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("sha")
	e.Str(s.Sha)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	e.ObjEnd()
}

// ReadJSON reads TagCommit from json stream.
func (s *TagCommit) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TagCommit to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "sha":
			v, err := d.Str()
			s.Sha = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Team) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("slug")
	e.Str(s.Slug)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	if s.Privacy.Set {
		more.More()
		e.ObjField("privacy")
		s.Privacy.WriteJSON(e)
	}
	more.More()
	e.ObjField("permission")
	e.Str(s.Permission)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("members_url")
	e.Str(s.MembersURL)
	more.More()
	e.ObjField("repositories_url")
	json.WriteURI(e, s.RepositoriesURL)
	more.More()
	e.ObjField("parent")
	s.Parent.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads Team from json stream.
func (s *Team) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Team to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "slug":
			v, err := d.Str()
			s.Slug = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(d); err != nil {
				return err
			}
		case "permission":
			v, err := d.Str()
			s.Permission = string(v)
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "members_url":
			v, err := d.Str()
			s.MembersURL = string(v)
			if err != nil {
				return err
			}
		case "repositories_url":
			v, err := json.ReadURI(d)
			s.RepositoriesURL = v
			if err != nil {
				return err
			}
		case "parent":
			if err := s.Parent.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamDiscussion) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	more.More()
	e.ObjField("body_html")
	e.Str(s.BodyHTML)
	more.More()
	e.ObjField("body_version")
	e.Str(s.BodyVersion)
	more.More()
	e.ObjField("comments_count")
	e.Int(s.CommentsCount)
	more.More()
	e.ObjField("comments_url")
	json.WriteURI(e, s.CommentsURL)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("last_edited_at")
	s.LastEditedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("pinned")
	e.Bool(s.Pinned)
	more.More()
	e.ObjField("private")
	e.Bool(s.Private)
	more.More()
	e.ObjField("team_url")
	json.WriteURI(e, s.TeamURL)
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	if s.Reactions.Set {
		more.More()
		e.ObjField("reactions")
		s.Reactions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamDiscussion from json stream.
func (s *TeamDiscussion) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamDiscussion to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "body_html":
			v, err := d.Str()
			s.BodyHTML = string(v)
			if err != nil {
				return err
			}
		case "body_version":
			v, err := d.Str()
			s.BodyVersion = string(v)
			if err != nil {
				return err
			}
		case "comments_count":
			v, err := d.Int()
			s.CommentsCount = int(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := json.ReadURI(d)
			s.CommentsURL = v
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "last_edited_at":
			if err := s.LastEditedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "pinned":
			v, err := d.Bool()
			s.Pinned = bool(v)
			if err != nil {
				return err
			}
		case "private":
			v, err := d.Bool()
			s.Private = bool(v)
			if err != nil {
				return err
			}
		case "team_url":
			v, err := json.ReadURI(d)
			s.TeamURL = v
			if err != nil {
				return err
			}
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamDiscussionComment) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("author")
	s.Author.WriteJSON(e)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	more.More()
	e.ObjField("body_html")
	e.Str(s.BodyHTML)
	more.More()
	e.ObjField("body_version")
	e.Str(s.BodyVersion)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("last_edited_at")
	s.LastEditedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("discussion_url")
	json.WriteURI(e, s.DiscussionURL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	if s.Reactions.Set {
		more.More()
		e.ObjField("reactions")
		s.Reactions.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamDiscussionComment from json stream.
func (s *TeamDiscussionComment) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamDiscussionComment to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "author":
			if err := s.Author.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "body_html":
			v, err := d.Str()
			s.BodyHTML = string(v)
			if err != nil {
				return err
			}
		case "body_version":
			v, err := d.Str()
			s.BodyVersion = string(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "last_edited_at":
			if err := s.LastEditedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "discussion_url":
			v, err := json.ReadURI(d)
			s.DiscussionURL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamFull) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("slug")
	e.Str(s.Slug)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	if s.Privacy.Set {
		more.More()
		e.ObjField("privacy")
		s.Privacy.WriteJSON(e)
	}
	more.More()
	e.ObjField("permission")
	e.Str(s.Permission)
	more.More()
	e.ObjField("members_url")
	e.Str(s.MembersURL)
	more.More()
	e.ObjField("repositories_url")
	json.WriteURI(e, s.RepositoriesURL)
	if s.Parent.Set {
		more.More()
		e.ObjField("parent")
		s.Parent.WriteJSON(e)
	}
	more.More()
	e.ObjField("members_count")
	e.Int(s.MembersCount)
	more.More()
	e.ObjField("repos_count")
	e.Int(s.ReposCount)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("organization")
	s.Organization.WriteJSON(e)
	if s.LdapDn.Set {
		more.More()
		e.ObjField("ldap_dn")
		s.LdapDn.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamFull from json stream.
func (s *TeamFull) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamFull to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "slug":
			v, err := d.Str()
			s.Slug = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(d); err != nil {
				return err
			}
		case "permission":
			v, err := d.Str()
			s.Permission = string(v)
			if err != nil {
				return err
			}
		case "members_url":
			v, err := d.Str()
			s.MembersURL = string(v)
			if err != nil {
				return err
			}
		case "repositories_url":
			v, err := json.ReadURI(d)
			s.RepositoriesURL = v
			if err != nil {
				return err
			}
		case "parent":
			s.Parent.Reset()
			if err := s.Parent.ReadJSON(d); err != nil {
				return err
			}
		case "members_count":
			v, err := d.Int()
			s.MembersCount = int(v)
			if err != nil {
				return err
			}
		case "repos_count":
			v, err := d.Int()
			s.ReposCount = int(v)
			if err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "organization":
			if err := s.Organization.ReadJSON(d); err != nil {
				return err
			}
		case "ldap_dn":
			s.LdapDn.Reset()
			if err := s.LdapDn.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamFullPrivacy) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamFullPrivacy from json reader.
func (s *TeamFullPrivacy) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamFullPrivacy to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamFullPrivacy(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamMembership) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("role")
	s.Role.WriteJSON(e)
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads TeamMembership from json stream.
func (s *TeamMembership) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamMembership to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "role":
			if err := s.Role.ReadJSON(d); err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamMembershipRole) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamMembershipRole from json reader.
func (s *TeamMembershipRole) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamMembershipRole to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamMembershipRole(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamMembershipState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamMembershipState from json reader.
func (s *TeamMembershipState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamMembershipState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamMembershipState(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("pull")
	e.Bool(s.Pull)
	more.More()
	e.ObjField("triage")
	e.Bool(s.Triage)
	more.More()
	e.ObjField("push")
	e.Bool(s.Push)
	more.More()
	e.ObjField("maintain")
	e.Bool(s.Maintain)
	more.More()
	e.ObjField("admin")
	e.Bool(s.Admin)
	e.ObjEnd()
}

// ReadJSON reads TeamPermissions from json stream.
func (s *TeamPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "pull":
			v, err := d.Bool()
			s.Pull = bool(v)
			if err != nil {
				return err
			}
		case "triage":
			v, err := d.Bool()
			s.Triage = bool(v)
			if err != nil {
				return err
			}
		case "push":
			v, err := d.Bool()
			s.Push = bool(v)
			if err != nil {
				return err
			}
		case "maintain":
			v, err := d.Bool()
			s.Maintain = bool(v)
			if err != nil {
				return err
			}
		case "admin":
			v, err := d.Bool()
			s.Admin = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamProject) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("owner_url")
	e.Str(s.OwnerURL)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("html_url")
	e.Str(s.HTMLURL)
	more.More()
	e.ObjField("columns_url")
	e.Str(s.ColumnsURL)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("body")
	s.Body.WriteJSON(e)
	more.More()
	e.ObjField("number")
	e.Int(s.Number)
	more.More()
	e.ObjField("state")
	e.Str(s.State)
	more.More()
	e.ObjField("creator")
	s.Creator.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	e.Str(s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	e.Str(s.UpdatedAt)
	if s.OrganizationPermission.Set {
		more.More()
		e.ObjField("organization_permission")
		s.OrganizationPermission.WriteJSON(e)
	}
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	more.More()
	e.ObjField("permissions")
	s.Permissions.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads TeamProject from json stream.
func (s *TeamProject) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamProject to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "owner_url":
			v, err := d.Str()
			s.OwnerURL = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := d.Str()
			s.HTMLURL = string(v)
			if err != nil {
				return err
			}
		case "columns_url":
			v, err := d.Str()
			s.ColumnsURL = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "body":
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		case "number":
			v, err := d.Int()
			s.Number = int(v)
			if err != nil {
				return err
			}
		case "state":
			v, err := d.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "creator":
			if err := s.Creator.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := d.Str()
			s.CreatedAt = string(v)
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := d.Str()
			s.UpdatedAt = string(v)
			if err != nil {
				return err
			}
		case "organization_permission":
			s.OrganizationPermission.Reset()
			if err := s.OrganizationPermission.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		case "permissions":
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamProjectPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("read")
	e.Bool(s.Read)
	more.More()
	e.ObjField("write")
	e.Bool(s.Write)
	more.More()
	e.ObjField("admin")
	e.Bool(s.Admin)
	e.ObjEnd()
}

// ReadJSON reads TeamProjectPermissions from json stream.
func (s *TeamProjectPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamProjectPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "read":
			v, err := d.Bool()
			s.Read = bool(v)
			if err != nil {
				return err
			}
		case "write":
			v, err := d.Bool()
			s.Write = bool(v)
			if err != nil {
				return err
			}
		case "admin":
			v, err := d.Bool()
			s.Admin = bool(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamRepository) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("full_name")
	e.Str(s.FullName)
	more.More()
	e.ObjField("license")
	s.License.WriteJSON(e)
	more.More()
	e.ObjField("forks")
	e.Int(s.Forks)
	if s.Permissions.Set {
		more.More()
		e.ObjField("permissions")
		s.Permissions.WriteJSON(e)
	}
	more.More()
	e.ObjField("owner")
	s.Owner.WriteJSON(e)
	more.More()
	e.ObjField("private")
	e.Bool(s.Private)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("fork")
	e.Bool(s.Fork)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("archive_url")
	e.Str(s.ArchiveURL)
	more.More()
	e.ObjField("assignees_url")
	e.Str(s.AssigneesURL)
	more.More()
	e.ObjField("blobs_url")
	e.Str(s.BlobsURL)
	more.More()
	e.ObjField("branches_url")
	e.Str(s.BranchesURL)
	more.More()
	e.ObjField("collaborators_url")
	e.Str(s.CollaboratorsURL)
	more.More()
	e.ObjField("comments_url")
	e.Str(s.CommentsURL)
	more.More()
	e.ObjField("commits_url")
	e.Str(s.CommitsURL)
	more.More()
	e.ObjField("compare_url")
	e.Str(s.CompareURL)
	more.More()
	e.ObjField("contents_url")
	e.Str(s.ContentsURL)
	more.More()
	e.ObjField("contributors_url")
	json.WriteURI(e, s.ContributorsURL)
	more.More()
	e.ObjField("deployments_url")
	json.WriteURI(e, s.DeploymentsURL)
	more.More()
	e.ObjField("downloads_url")
	json.WriteURI(e, s.DownloadsURL)
	more.More()
	e.ObjField("events_url")
	json.WriteURI(e, s.EventsURL)
	more.More()
	e.ObjField("forks_url")
	json.WriteURI(e, s.ForksURL)
	more.More()
	e.ObjField("git_commits_url")
	e.Str(s.GitCommitsURL)
	more.More()
	e.ObjField("git_refs_url")
	e.Str(s.GitRefsURL)
	more.More()
	e.ObjField("git_tags_url")
	e.Str(s.GitTagsURL)
	more.More()
	e.ObjField("git_url")
	e.Str(s.GitURL)
	more.More()
	e.ObjField("issue_comment_url")
	e.Str(s.IssueCommentURL)
	more.More()
	e.ObjField("issue_events_url")
	e.Str(s.IssueEventsURL)
	more.More()
	e.ObjField("issues_url")
	e.Str(s.IssuesURL)
	more.More()
	e.ObjField("keys_url")
	e.Str(s.KeysURL)
	more.More()
	e.ObjField("labels_url")
	e.Str(s.LabelsURL)
	more.More()
	e.ObjField("languages_url")
	json.WriteURI(e, s.LanguagesURL)
	more.More()
	e.ObjField("merges_url")
	json.WriteURI(e, s.MergesURL)
	more.More()
	e.ObjField("milestones_url")
	e.Str(s.MilestonesURL)
	more.More()
	e.ObjField("notifications_url")
	e.Str(s.NotificationsURL)
	more.More()
	e.ObjField("pulls_url")
	e.Str(s.PullsURL)
	more.More()
	e.ObjField("releases_url")
	e.Str(s.ReleasesURL)
	more.More()
	e.ObjField("ssh_url")
	e.Str(s.SSHURL)
	more.More()
	e.ObjField("stargazers_url")
	json.WriteURI(e, s.StargazersURL)
	more.More()
	e.ObjField("statuses_url")
	e.Str(s.StatusesURL)
	more.More()
	e.ObjField("subscribers_url")
	json.WriteURI(e, s.SubscribersURL)
	more.More()
	e.ObjField("subscription_url")
	json.WriteURI(e, s.SubscriptionURL)
	more.More()
	e.ObjField("tags_url")
	json.WriteURI(e, s.TagsURL)
	more.More()
	e.ObjField("teams_url")
	json.WriteURI(e, s.TeamsURL)
	more.More()
	e.ObjField("trees_url")
	e.Str(s.TreesURL)
	more.More()
	e.ObjField("clone_url")
	e.Str(s.CloneURL)
	more.More()
	e.ObjField("mirror_url")
	s.MirrorURL.WriteJSON(e)
	more.More()
	e.ObjField("hooks_url")
	json.WriteURI(e, s.HooksURL)
	more.More()
	e.ObjField("svn_url")
	json.WriteURI(e, s.SvnURL)
	more.More()
	e.ObjField("homepage")
	s.Homepage.WriteJSON(e)
	more.More()
	e.ObjField("language")
	s.Language.WriteJSON(e)
	more.More()
	e.ObjField("forks_count")
	e.Int(s.ForksCount)
	more.More()
	e.ObjField("stargazers_count")
	e.Int(s.StargazersCount)
	more.More()
	e.ObjField("watchers_count")
	e.Int(s.WatchersCount)
	more.More()
	e.ObjField("size")
	e.Int(s.Size)
	more.More()
	e.ObjField("default_branch")
	e.Str(s.DefaultBranch)
	more.More()
	e.ObjField("open_issues_count")
	e.Int(s.OpenIssuesCount)
	if s.IsTemplate.Set {
		more.More()
		e.ObjField("is_template")
		s.IsTemplate.WriteJSON(e)
	}
	if s.Topics != nil {
		more.More()
		e.ObjField("topics")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Topics {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("has_issues")
	e.Bool(s.HasIssues)
	more.More()
	e.ObjField("has_projects")
	e.Bool(s.HasProjects)
	more.More()
	e.ObjField("has_wiki")
	e.Bool(s.HasWiki)
	more.More()
	e.ObjField("has_pages")
	e.Bool(s.HasPages)
	more.More()
	e.ObjField("has_downloads")
	e.Bool(s.HasDownloads)
	more.More()
	e.ObjField("archived")
	e.Bool(s.Archived)
	more.More()
	e.ObjField("disabled")
	e.Bool(s.Disabled)
	if s.Visibility.Set {
		more.More()
		e.ObjField("visibility")
		s.Visibility.WriteJSON(e)
	}
	more.More()
	e.ObjField("pushed_at")
	s.PushedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("created_at")
	s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("updated_at")
	s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	if s.AllowRebaseMerge.Set {
		more.More()
		e.ObjField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(e)
	}
	if s.TemplateRepository.Set {
		more.More()
		e.ObjField("template_repository")
		s.TemplateRepository.WriteJSON(e)
	}
	if s.TempCloneToken.Set {
		more.More()
		e.ObjField("temp_clone_token")
		s.TempCloneToken.WriteJSON(e)
	}
	if s.AllowSquashMerge.Set {
		more.More()
		e.ObjField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(e)
	}
	if s.AllowAutoMerge.Set {
		more.More()
		e.ObjField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(e)
	}
	if s.DeleteBranchOnMerge.Set {
		more.More()
		e.ObjField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(e)
	}
	if s.AllowMergeCommit.Set {
		more.More()
		e.ObjField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(e)
	}
	if s.AllowForking.Set {
		more.More()
		e.ObjField("allow_forking")
		s.AllowForking.WriteJSON(e)
	}
	if s.SubscribersCount.Set {
		more.More()
		e.ObjField("subscribers_count")
		s.SubscribersCount.WriteJSON(e)
	}
	if s.NetworkCount.Set {
		more.More()
		e.ObjField("network_count")
		s.NetworkCount.WriteJSON(e)
	}
	more.More()
	e.ObjField("open_issues")
	e.Int(s.OpenIssues)
	more.More()
	e.ObjField("watchers")
	e.Int(s.Watchers)
	if s.MasterBranch.Set {
		more.More()
		e.ObjField("master_branch")
		s.MasterBranch.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamRepository from json stream.
func (s *TeamRepository) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamRepository to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "full_name":
			v, err := d.Str()
			s.FullName = string(v)
			if err != nil {
				return err
			}
		case "license":
			if err := s.License.ReadJSON(d); err != nil {
				return err
			}
		case "forks":
			v, err := d.Int()
			s.Forks = int(v)
			if err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(d); err != nil {
				return err
			}
		case "owner":
			if err := s.Owner.ReadJSON(d); err != nil {
				return err
			}
		case "private":
			v, err := d.Bool()
			s.Private = bool(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "fork":
			v, err := d.Bool()
			s.Fork = bool(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "archive_url":
			v, err := d.Str()
			s.ArchiveURL = string(v)
			if err != nil {
				return err
			}
		case "assignees_url":
			v, err := d.Str()
			s.AssigneesURL = string(v)
			if err != nil {
				return err
			}
		case "blobs_url":
			v, err := d.Str()
			s.BlobsURL = string(v)
			if err != nil {
				return err
			}
		case "branches_url":
			v, err := d.Str()
			s.BranchesURL = string(v)
			if err != nil {
				return err
			}
		case "collaborators_url":
			v, err := d.Str()
			s.CollaboratorsURL = string(v)
			if err != nil {
				return err
			}
		case "comments_url":
			v, err := d.Str()
			s.CommentsURL = string(v)
			if err != nil {
				return err
			}
		case "commits_url":
			v, err := d.Str()
			s.CommitsURL = string(v)
			if err != nil {
				return err
			}
		case "compare_url":
			v, err := d.Str()
			s.CompareURL = string(v)
			if err != nil {
				return err
			}
		case "contents_url":
			v, err := d.Str()
			s.ContentsURL = string(v)
			if err != nil {
				return err
			}
		case "contributors_url":
			v, err := json.ReadURI(d)
			s.ContributorsURL = v
			if err != nil {
				return err
			}
		case "deployments_url":
			v, err := json.ReadURI(d)
			s.DeploymentsURL = v
			if err != nil {
				return err
			}
		case "downloads_url":
			v, err := json.ReadURI(d)
			s.DownloadsURL = v
			if err != nil {
				return err
			}
		case "events_url":
			v, err := json.ReadURI(d)
			s.EventsURL = v
			if err != nil {
				return err
			}
		case "forks_url":
			v, err := json.ReadURI(d)
			s.ForksURL = v
			if err != nil {
				return err
			}
		case "git_commits_url":
			v, err := d.Str()
			s.GitCommitsURL = string(v)
			if err != nil {
				return err
			}
		case "git_refs_url":
			v, err := d.Str()
			s.GitRefsURL = string(v)
			if err != nil {
				return err
			}
		case "git_tags_url":
			v, err := d.Str()
			s.GitTagsURL = string(v)
			if err != nil {
				return err
			}
		case "git_url":
			v, err := d.Str()
			s.GitURL = string(v)
			if err != nil {
				return err
			}
		case "issue_comment_url":
			v, err := d.Str()
			s.IssueCommentURL = string(v)
			if err != nil {
				return err
			}
		case "issue_events_url":
			v, err := d.Str()
			s.IssueEventsURL = string(v)
			if err != nil {
				return err
			}
		case "issues_url":
			v, err := d.Str()
			s.IssuesURL = string(v)
			if err != nil {
				return err
			}
		case "keys_url":
			v, err := d.Str()
			s.KeysURL = string(v)
			if err != nil {
				return err
			}
		case "labels_url":
			v, err := d.Str()
			s.LabelsURL = string(v)
			if err != nil {
				return err
			}
		case "languages_url":
			v, err := json.ReadURI(d)
			s.LanguagesURL = v
			if err != nil {
				return err
			}
		case "merges_url":
			v, err := json.ReadURI(d)
			s.MergesURL = v
			if err != nil {
				return err
			}
		case "milestones_url":
			v, err := d.Str()
			s.MilestonesURL = string(v)
			if err != nil {
				return err
			}
		case "notifications_url":
			v, err := d.Str()
			s.NotificationsURL = string(v)
			if err != nil {
				return err
			}
		case "pulls_url":
			v, err := d.Str()
			s.PullsURL = string(v)
			if err != nil {
				return err
			}
		case "releases_url":
			v, err := d.Str()
			s.ReleasesURL = string(v)
			if err != nil {
				return err
			}
		case "ssh_url":
			v, err := d.Str()
			s.SSHURL = string(v)
			if err != nil {
				return err
			}
		case "stargazers_url":
			v, err := json.ReadURI(d)
			s.StargazersURL = v
			if err != nil {
				return err
			}
		case "statuses_url":
			v, err := d.Str()
			s.StatusesURL = string(v)
			if err != nil {
				return err
			}
		case "subscribers_url":
			v, err := json.ReadURI(d)
			s.SubscribersURL = v
			if err != nil {
				return err
			}
		case "subscription_url":
			v, err := json.ReadURI(d)
			s.SubscriptionURL = v
			if err != nil {
				return err
			}
		case "tags_url":
			v, err := json.ReadURI(d)
			s.TagsURL = v
			if err != nil {
				return err
			}
		case "teams_url":
			v, err := json.ReadURI(d)
			s.TeamsURL = v
			if err != nil {
				return err
			}
		case "trees_url":
			v, err := d.Str()
			s.TreesURL = string(v)
			if err != nil {
				return err
			}
		case "clone_url":
			v, err := d.Str()
			s.CloneURL = string(v)
			if err != nil {
				return err
			}
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(d); err != nil {
				return err
			}
		case "hooks_url":
			v, err := json.ReadURI(d)
			s.HooksURL = v
			if err != nil {
				return err
			}
		case "svn_url":
			v, err := json.ReadURI(d)
			s.SvnURL = v
			if err != nil {
				return err
			}
		case "homepage":
			if err := s.Homepage.ReadJSON(d); err != nil {
				return err
			}
		case "language":
			if err := s.Language.ReadJSON(d); err != nil {
				return err
			}
		case "forks_count":
			v, err := d.Int()
			s.ForksCount = int(v)
			if err != nil {
				return err
			}
		case "stargazers_count":
			v, err := d.Int()
			s.StargazersCount = int(v)
			if err != nil {
				return err
			}
		case "watchers_count":
			v, err := d.Int()
			s.WatchersCount = int(v)
			if err != nil {
				return err
			}
		case "size":
			v, err := d.Int()
			s.Size = int(v)
			if err != nil {
				return err
			}
		case "default_branch":
			v, err := d.Str()
			s.DefaultBranch = string(v)
			if err != nil {
				return err
			}
		case "open_issues_count":
			v, err := d.Int()
			s.OpenIssuesCount = int(v)
			if err != nil {
				return err
			}
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(d); err != nil {
				return err
			}
		case "topics":
			s.Topics = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Topics = append(s.Topics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "has_issues":
			v, err := d.Bool()
			s.HasIssues = bool(v)
			if err != nil {
				return err
			}
		case "has_projects":
			v, err := d.Bool()
			s.HasProjects = bool(v)
			if err != nil {
				return err
			}
		case "has_wiki":
			v, err := d.Bool()
			s.HasWiki = bool(v)
			if err != nil {
				return err
			}
		case "has_pages":
			v, err := d.Bool()
			s.HasPages = bool(v)
			if err != nil {
				return err
			}
		case "has_downloads":
			v, err := d.Bool()
			s.HasDownloads = bool(v)
			if err != nil {
				return err
			}
		case "archived":
			v, err := d.Bool()
			s.Archived = bool(v)
			if err != nil {
				return err
			}
		case "disabled":
			v, err := d.Bool()
			s.Disabled = bool(v)
			if err != nil {
				return err
			}
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		case "pushed_at":
			if err := s.PushedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "created_at":
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(d); err != nil {
				return err
			}
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(d); err != nil {
				return err
			}
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(d); err != nil {
				return err
			}
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(d); err != nil {
				return err
			}
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(d); err != nil {
				return err
			}
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(d); err != nil {
				return err
			}
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(d); err != nil {
				return err
			}
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(d); err != nil {
				return err
			}
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(d); err != nil {
				return err
			}
		case "open_issues":
			v, err := d.Int()
			s.OpenIssues = int(v)
			if err != nil {
				return err
			}
		case "watchers":
			v, err := d.Int()
			s.Watchers = int(v)
			if err != nil {
				return err
			}
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamRepositoryPermissions) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("admin")
	e.Bool(s.Admin)
	more.More()
	e.ObjField("pull")
	e.Bool(s.Pull)
	if s.Triage.Set {
		more.More()
		e.ObjField("triage")
		s.Triage.WriteJSON(e)
	}
	more.More()
	e.ObjField("push")
	e.Bool(s.Push)
	if s.Maintain.Set {
		more.More()
		e.ObjField("maintain")
		s.Maintain.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamRepositoryPermissions from json stream.
func (s *TeamRepositoryPermissions) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamRepositoryPermissions to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "admin":
			v, err := d.Bool()
			s.Admin = bool(v)
			if err != nil {
				return err
			}
		case "pull":
			v, err := d.Bool()
			s.Pull = bool(v)
			if err != nil {
				return err
			}
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(d); err != nil {
				return err
			}
		case "push":
			v, err := d.Bool()
			s.Push = bool(v)
			if err != nil {
				return err
			}
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("members_url")
	e.Str(s.MembersURL)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("permission")
	e.Str(s.Permission)
	if s.Privacy.Set {
		more.More()
		e.ObjField("privacy")
		s.Privacy.WriteJSON(e)
	}
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("repositories_url")
	json.WriteURI(e, s.RepositoriesURL)
	more.More()
	e.ObjField("slug")
	e.Str(s.Slug)
	if s.LdapDn.Set {
		more.More()
		e.ObjField("ldap_dn")
		s.LdapDn.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamSimple from json stream.
func (s *TeamSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "members_url":
			v, err := d.Str()
			s.MembersURL = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "permission":
			v, err := d.Str()
			s.Permission = string(v)
			if err != nil {
				return err
			}
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(d); err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "repositories_url":
			v, err := json.ReadURI(d)
			s.RepositoriesURL = v
			if err != nil {
				return err
			}
		case "slug":
			v, err := d.Str()
			s.Slug = string(v)
			if err != nil {
				return err
			}
		case "ldap_dn":
			s.LdapDn.Reset()
			if err := s.LdapDn.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddMemberLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddMemberLegacyNoContent from json stream.
func (s *TeamsAddMemberLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddMemberLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddMemberLegacyNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddMemberLegacyNotFound from json stream.
func (s *TeamsAddMemberLegacyNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddMemberLegacyNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddMemberLegacyUnprocessableEntity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddMemberLegacyUnprocessableEntity from json stream.
func (s *TeamsAddMemberLegacyUnprocessableEntity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddMemberLegacyUnprocessableEntity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserInOrgForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserInOrgForbidden from json stream.
func (s *TeamsAddOrUpdateMembershipForUserInOrgForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateMembershipForUserInOrgForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Role.Set {
		more.More()
		e.ObjField("role")
		s.Role.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserInOrgReq from json stream.
func (s *TeamsAddOrUpdateMembershipForUserInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateMembershipForUserInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserInOrgReqRole) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserInOrgReqRole from json reader.
func (s *TeamsAddOrUpdateMembershipForUserInOrgReqRole) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateMembershipForUserInOrgReqRole to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsAddOrUpdateMembershipForUserInOrgReqRole(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity from json stream.
func (s *TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserLegacyForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserLegacyForbidden from json stream.
func (s *TeamsAddOrUpdateMembershipForUserLegacyForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateMembershipForUserLegacyForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Role.Set {
		more.More()
		e.ObjField("role")
		s.Role.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserLegacyReq from json stream.
func (s *TeamsAddOrUpdateMembershipForUserLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateMembershipForUserLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserLegacyReqRole) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserLegacyReqRole from json reader.
func (s *TeamsAddOrUpdateMembershipForUserLegacyReqRole) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateMembershipForUserLegacyReqRole to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsAddOrUpdateMembershipForUserLegacyReqRole(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity from json stream.
func (s *TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsInOrgForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsInOrgForbidden from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateProjectPermissionsInOrgForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsInOrgNoContent from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateProjectPermissionsInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		e.ObjField("permission")
		s.Permission.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsInOrgReq from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateProjectPermissionsInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsInOrgReqPermission from json reader.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateProjectPermissionsInOrgReqPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsAddOrUpdateProjectPermissionsInOrgReqPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsLegacyForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		e.ObjField("message")
		s.Message.WriteJSON(e)
	}
	if s.DocumentationURL.Set {
		more.More()
		e.ObjField("documentation_url")
		s.DocumentationURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsLegacyForbidden from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateProjectPermissionsLegacyForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(d); err != nil {
				return err
			}
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsLegacyNoContent from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateProjectPermissionsLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		e.ObjField("permission")
		s.Permission.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsLegacyReq from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateProjectPermissionsLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsLegacyReqPermission from json reader.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateProjectPermissionsLegacyReqPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsAddOrUpdateProjectPermissionsLegacyReqPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateRepoPermissionsInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateRepoPermissionsInOrgNoContent from json stream.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateRepoPermissionsInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateRepoPermissionsInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		e.ObjField("permission")
		s.Permission.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateRepoPermissionsInOrgReq from json stream.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateRepoPermissionsInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsAddOrUpdateRepoPermissionsInOrgReqPermission from json reader.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateRepoPermissionsInOrgReqPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsAddOrUpdateRepoPermissionsInOrgReqPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateRepoPermissionsLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateRepoPermissionsLegacyNoContent from json stream.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateRepoPermissionsLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateRepoPermissionsLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		e.ObjField("permission")
		s.Permission.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsAddOrUpdateRepoPermissionsLegacyReq from json stream.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateRepoPermissionsLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsAddOrUpdateRepoPermissionsLegacyReqPermission from json reader.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsAddOrUpdateRepoPermissionsLegacyReqPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsAddOrUpdateRepoPermissionsLegacyReqPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsCheckPermissionsForProjectInOrgNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsCheckPermissionsForProjectInOrgNotFound from json stream.
func (s *TeamsCheckPermissionsForProjectInOrgNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCheckPermissionsForProjectInOrgNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCheckPermissionsForProjectLegacyNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsCheckPermissionsForProjectLegacyNotFound from json stream.
func (s *TeamsCheckPermissionsForProjectLegacyNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCheckPermissionsForProjectLegacyNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCheckPermissionsForRepoInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsCheckPermissionsForRepoInOrgNoContent from json stream.
func (s *TeamsCheckPermissionsForRepoInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCheckPermissionsForRepoInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCheckPermissionsForRepoInOrgNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsCheckPermissionsForRepoInOrgNotFound from json stream.
func (s *TeamsCheckPermissionsForRepoInOrgNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCheckPermissionsForRepoInOrgNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCheckPermissionsForRepoLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsCheckPermissionsForRepoLegacyNoContent from json stream.
func (s *TeamsCheckPermissionsForRepoLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCheckPermissionsForRepoLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCheckPermissionsForRepoLegacyNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsCheckPermissionsForRepoLegacyNotFound from json stream.
func (s *TeamsCheckPermissionsForRepoLegacyNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCheckPermissionsForRepoLegacyNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateDiscussionCommentInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads TeamsCreateDiscussionCommentInOrgReq from json stream.
func (s *TeamsCreateDiscussionCommentInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateDiscussionCommentInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateDiscussionCommentLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads TeamsCreateDiscussionCommentLegacyReq from json stream.
func (s *TeamsCreateDiscussionCommentLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateDiscussionCommentLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateDiscussionInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsCreateDiscussionInOrgReq from json stream.
func (s *TeamsCreateDiscussionInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateDiscussionInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateDiscussionLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	if s.Private.Set {
		more.More()
		e.ObjField("private")
		s.Private.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsCreateDiscussionLegacyReq from json stream.
func (s *TeamsCreateDiscussionLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateDiscussionLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Groups != nil {
		more.More()
		e.ObjField("groups")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq from json stream.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "groups":
			s.Groups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("group_id")
	e.Str(s.GroupID)
	more.More()
	e.ObjField("group_name")
	e.Str(s.GroupName)
	more.More()
	e.ObjField("group_description")
	e.Str(s.GroupDescription)
	e.ObjEnd()
}

// ReadJSON reads TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem from json stream.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "group_id":
			v, err := d.Str()
			s.GroupID = string(v)
			if err != nil {
				return err
			}
		case "group_name":
			v, err := d.Str()
			s.GroupName = string(v)
			if err != nil {
				return err
			}
		case "group_description":
			v, err := d.Str()
			s.GroupDescription = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("groups")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Groups {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if s.SyncedAt.Set {
		more.More()
		e.ObjField("synced_at")
		s.SyncedAt.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq from json stream.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "groups":
			s.Groups = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "synced_at":
			s.SyncedAt.Reset()
			if err := s.SyncedAt.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("group_id")
	e.Str(s.GroupID)
	more.More()
	e.ObjField("group_name")
	e.Str(s.GroupName)
	more.More()
	e.ObjField("group_description")
	e.Str(s.GroupDescription)
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem from json stream.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "group_id":
			v, err := d.Str()
			s.GroupID = string(v)
			if err != nil {
				return err
			}
		case "group_name":
			v, err := d.Str()
			s.GroupName = string(v)
			if err != nil {
				return err
			}
		case "group_description":
			v, err := d.Str()
			s.GroupDescription = string(v)
			if err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Maintainers != nil {
		more.More()
		e.ObjField("maintainers")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Maintainers {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.RepoNames != nil {
		more.More()
		e.ObjField("repo_names")
		more.Down()
		e.ArrStart()
		for _, elem := range s.RepoNames {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	if s.Privacy.Set {
		more.More()
		e.ObjField("privacy")
		s.Privacy.WriteJSON(e)
	}
	if s.Permission.Set {
		more.More()
		e.ObjField("permission")
		s.Permission.WriteJSON(e)
	}
	if s.ParentTeamID.Set {
		more.More()
		e.ObjField("parent_team_id")
		s.ParentTeamID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsCreateReq from json stream.
func (s *TeamsCreateReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "maintainers":
			s.Maintainers = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Maintainers = append(s.Maintainers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "repo_names":
			s.RepoNames = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.RepoNames = append(s.RepoNames, elem)
				return nil
			}); err != nil {
				return err
			}
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(d); err != nil {
				return err
			}
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(d); err != nil {
				return err
			}
		case "parent_team_id":
			s.ParentTeamID.Reset()
			if err := s.ParentTeamID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsCreateReqPermission from json reader.
func (s *TeamsCreateReqPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateReqPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsCreateReqPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateReqPrivacy) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsCreateReqPrivacy from json reader.
func (s *TeamsCreateReqPrivacy) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsCreateReqPrivacy to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsCreateReqPrivacy(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsDeleteDiscussionCommentInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsDeleteDiscussionCommentInOrgNoContent from json stream.
func (s *TeamsDeleteDiscussionCommentInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsDeleteDiscussionCommentInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsDeleteDiscussionCommentLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsDeleteDiscussionCommentLegacyNoContent from json stream.
func (s *TeamsDeleteDiscussionCommentLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsDeleteDiscussionCommentLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsDeleteDiscussionInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsDeleteDiscussionInOrgNoContent from json stream.
func (s *TeamsDeleteDiscussionInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsDeleteDiscussionInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsDeleteDiscussionLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsDeleteDiscussionLegacyNoContent from json stream.
func (s *TeamsDeleteDiscussionLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsDeleteDiscussionLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsDeleteInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsDeleteInOrgNoContent from json stream.
func (s *TeamsDeleteInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsDeleteInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsDeleteLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsDeleteLegacyNoContent from json stream.
func (s *TeamsDeleteLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsDeleteLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsGetMemberLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsGetMemberLegacyNoContent from json stream.
func (s *TeamsGetMemberLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsGetMemberLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsGetMemberLegacyNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsGetMemberLegacyNotFound from json stream.
func (s *TeamsGetMemberLegacyNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsGetMemberLegacyNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsGetMembershipForUserInOrgNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsGetMembershipForUserInOrgNotFound from json stream.
func (s *TeamsGetMembershipForUserInOrgNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsGetMembershipForUserInOrgNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsListDiscussionCommentsInOrgDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsListDiscussionCommentsInOrgDirection from json reader.
func (s *TeamsListDiscussionCommentsInOrgDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsListDiscussionCommentsInOrgDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsListDiscussionCommentsInOrgDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsListDiscussionCommentsLegacyDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsListDiscussionCommentsLegacyDirection from json reader.
func (s *TeamsListDiscussionCommentsLegacyDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsListDiscussionCommentsLegacyDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsListDiscussionCommentsLegacyDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsListDiscussionsInOrgDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsListDiscussionsInOrgDirection from json reader.
func (s *TeamsListDiscussionsInOrgDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsListDiscussionsInOrgDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsListDiscussionsInOrgDirection(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsListDiscussionsLegacyDirection) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsListDiscussionsLegacyDirection from json reader.
func (s *TeamsListDiscussionsLegacyDirection) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsListDiscussionsLegacyDirection to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsListDiscussionsLegacyDirection(v)
	return nil
}

func (TeamsListForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (TeamsListForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (TeamsListForAuthenticatedUserApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (TeamsListForAuthenticatedUserApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (TeamsListForAuthenticatedUserOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (TeamsListForAuthenticatedUserOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (TeamsListIdpGroupsForLegacyApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (TeamsListIdpGroupsForLegacyApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (TeamsListIdpGroupsForLegacyApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (TeamsListIdpGroupsForLegacyApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s TeamsListMembersInOrgRole) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsListMembersInOrgRole from json reader.
func (s *TeamsListMembersInOrgRole) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsListMembersInOrgRole to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsListMembersInOrgRole(v)
	return nil
}

func (TeamsListMembersLegacyOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (TeamsListMembersLegacyOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s TeamsListMembersLegacyRole) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsListMembersLegacyRole from json reader.
func (s *TeamsListMembersLegacyRole) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsListMembersLegacyRole to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsListMembersLegacyRole(v)
	return nil
}

func (TeamsListOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (TeamsListOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (TeamsListProjectsLegacyOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (TeamsListProjectsLegacyOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (TeamsListReposLegacyOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (TeamsListReposLegacyOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s TeamsRemoveMemberLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsRemoveMemberLegacyNoContent from json stream.
func (s *TeamsRemoveMemberLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsRemoveMemberLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsRemoveMemberLegacyNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsRemoveMemberLegacyNotFound from json stream.
func (s *TeamsRemoveMemberLegacyNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsRemoveMemberLegacyNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsRemoveMembershipForUserInOrgForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsRemoveMembershipForUserInOrgForbidden from json stream.
func (s *TeamsRemoveMembershipForUserInOrgForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsRemoveMembershipForUserInOrgForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsRemoveMembershipForUserInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsRemoveMembershipForUserInOrgNoContent from json stream.
func (s *TeamsRemoveMembershipForUserInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsRemoveMembershipForUserInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsRemoveMembershipForUserLegacyForbidden) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsRemoveMembershipForUserLegacyForbidden from json stream.
func (s *TeamsRemoveMembershipForUserLegacyForbidden) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsRemoveMembershipForUserLegacyForbidden to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsRemoveMembershipForUserLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsRemoveMembershipForUserLegacyNoContent from json stream.
func (s *TeamsRemoveMembershipForUserLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsRemoveMembershipForUserLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsRemoveProjectInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsRemoveProjectInOrgNoContent from json stream.
func (s *TeamsRemoveProjectInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsRemoveProjectInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsRemoveProjectLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsRemoveProjectLegacyNoContent from json stream.
func (s *TeamsRemoveProjectLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsRemoveProjectLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsRemoveRepoInOrgNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsRemoveRepoInOrgNoContent from json stream.
func (s *TeamsRemoveRepoInOrgNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsRemoveRepoInOrgNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsRemoveRepoLegacyNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads TeamsRemoveRepoLegacyNoContent from json stream.
func (s *TeamsRemoveRepoLegacyNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsRemoveRepoLegacyNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateDiscussionCommentInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads TeamsUpdateDiscussionCommentInOrgReq from json stream.
func (s *TeamsUpdateDiscussionCommentInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsUpdateDiscussionCommentInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateDiscussionCommentLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("body")
	e.Str(s.Body)
	e.ObjEnd()
}

// ReadJSON reads TeamsUpdateDiscussionCommentLegacyReq from json stream.
func (s *TeamsUpdateDiscussionCommentLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsUpdateDiscussionCommentLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			v, err := d.Str()
			s.Body = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateDiscussionInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Title.Set {
		more.More()
		e.ObjField("title")
		s.Title.WriteJSON(e)
	}
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsUpdateDiscussionInOrgReq from json stream.
func (s *TeamsUpdateDiscussionInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsUpdateDiscussionInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateDiscussionLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Title.Set {
		more.More()
		e.ObjField("title")
		s.Title.WriteJSON(e)
	}
	if s.Body.Set {
		more.More()
		e.ObjField("body")
		s.Body.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsUpdateDiscussionLegacyReq from json stream.
func (s *TeamsUpdateDiscussionLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsUpdateDiscussionLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateInOrgReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Privacy.Set {
		more.More()
		e.ObjField("privacy")
		s.Privacy.WriteJSON(e)
	}
	if s.Permission.Set {
		more.More()
		e.ObjField("permission")
		s.Permission.WriteJSON(e)
	}
	if s.ParentTeamID.Set {
		more.More()
		e.ObjField("parent_team_id")
		s.ParentTeamID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsUpdateInOrgReq from json stream.
func (s *TeamsUpdateInOrgReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsUpdateInOrgReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(d); err != nil {
				return err
			}
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(d); err != nil {
				return err
			}
		case "parent_team_id":
			s.ParentTeamID.Reset()
			if err := s.ParentTeamID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateInOrgReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsUpdateInOrgReqPermission from json reader.
func (s *TeamsUpdateInOrgReqPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsUpdateInOrgReqPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsUpdateInOrgReqPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateInOrgReqPrivacy) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsUpdateInOrgReqPrivacy from json reader.
func (s *TeamsUpdateInOrgReqPrivacy) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsUpdateInOrgReqPrivacy to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsUpdateInOrgReqPrivacy(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateLegacyReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	if s.Description.Set {
		more.More()
		e.ObjField("description")
		s.Description.WriteJSON(e)
	}
	if s.Privacy.Set {
		more.More()
		e.ObjField("privacy")
		s.Privacy.WriteJSON(e)
	}
	if s.Permission.Set {
		more.More()
		e.ObjField("permission")
		s.Permission.WriteJSON(e)
	}
	if s.ParentTeamID.Set {
		more.More()
		e.ObjField("parent_team_id")
		s.ParentTeamID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TeamsUpdateLegacyReq from json stream.
func (s *TeamsUpdateLegacyReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsUpdateLegacyReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(d); err != nil {
				return err
			}
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(d); err != nil {
				return err
			}
		case "parent_team_id":
			s.ParentTeamID.Reset()
			if err := s.ParentTeamID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateLegacyReqPermission) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsUpdateLegacyReqPermission from json reader.
func (s *TeamsUpdateLegacyReqPermission) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsUpdateLegacyReqPermission to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsUpdateLegacyReqPermission(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateLegacyReqPrivacy) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads TeamsUpdateLegacyReqPrivacy from json reader.
func (s *TeamsUpdateLegacyReqPrivacy) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TeamsUpdateLegacyReqPrivacy to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = TeamsUpdateLegacyReqPrivacy(v)
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Thread) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Str(s.ID)
	more.More()
	e.ObjField("repository")
	s.Repository.WriteJSON(e)
	more.More()
	e.ObjField("subject")
	s.Subject.WriteJSON(e)
	more.More()
	e.ObjField("reason")
	e.Str(s.Reason)
	more.More()
	e.ObjField("unread")
	e.Bool(s.Unread)
	more.More()
	e.ObjField("updated_at")
	e.Str(s.UpdatedAt)
	more.More()
	e.ObjField("last_read_at")
	s.LastReadAt.WriteJSON(e)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("subscription_url")
	e.Str(s.SubscriptionURL)
	e.ObjEnd()
}

// ReadJSON reads Thread from json stream.
func (s *Thread) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Thread to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "repository":
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "subject":
			if err := s.Subject.ReadJSON(d); err != nil {
				return err
			}
		case "reason":
			v, err := d.Str()
			s.Reason = string(v)
			if err != nil {
				return err
			}
		case "unread":
			v, err := d.Bool()
			s.Unread = bool(v)
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := d.Str()
			s.UpdatedAt = string(v)
			if err != nil {
				return err
			}
		case "last_read_at":
			if err := s.LastReadAt.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "subscription_url":
			v, err := d.Str()
			s.SubscriptionURL = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ThreadSubject) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("title")
	e.Str(s.Title)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("latest_comment_url")
	e.Str(s.LatestCommentURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	e.ObjEnd()
}

// ReadJSON reads ThreadSubject from json stream.
func (s *ThreadSubject) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ThreadSubject to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			v, err := d.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "latest_comment_url":
			v, err := d.Str()
			s.LatestCommentURL = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ThreadSubscription) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("subscribed")
	e.Bool(s.Subscribed)
	more.More()
	e.ObjField("ignored")
	e.Bool(s.Ignored)
	more.More()
	e.ObjField("reason")
	s.Reason.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	if s.ThreadURL.Set {
		more.More()
		e.ObjField("thread_url")
		s.ThreadURL.WriteJSON(e)
	}
	if s.RepositoryURL.Set {
		more.More()
		e.ObjField("repository_url")
		s.RepositoryURL.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads ThreadSubscription from json stream.
func (s *ThreadSubscription) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ThreadSubscription to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "subscribed":
			v, err := d.Bool()
			s.Subscribed = bool(v)
			if err != nil {
				return err
			}
		case "ignored":
			v, err := d.Bool()
			s.Ignored = bool(v)
			if err != nil {
				return err
			}
		case "reason":
			if err := s.Reason.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "thread_url":
			s.ThreadURL.Reset()
			if err := s.ThreadURL.ReadJSON(d); err != nil {
				return err
			}
		case "repository_url":
			s.RepositoryURL.Reset()
			if err := s.RepositoryURL.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Topic) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("names")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Names {
		more.More()
		e.Str(elem)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads Topic from json stream.
func (s *Topic) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Topic to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "names":
			s.Names = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Names = append(s.Names, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TopicSearchResultItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("display_name")
	s.DisplayName.WriteJSON(e)
	more.More()
	e.ObjField("short_description")
	s.ShortDescription.WriteJSON(e)
	more.More()
	e.ObjField("description")
	s.Description.WriteJSON(e)
	more.More()
	e.ObjField("created_by")
	s.CreatedBy.WriteJSON(e)
	more.More()
	e.ObjField("released")
	s.Released.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("featured")
	e.Bool(s.Featured)
	more.More()
	e.ObjField("curated")
	e.Bool(s.Curated)
	more.More()
	e.ObjField("score")
	e.Float64(s.Score)
	if s.RepositoryCount.Set {
		more.More()
		e.ObjField("repository_count")
		s.RepositoryCount.WriteJSON(e)
	}
	if s.LogoURL.Set {
		more.More()
		e.ObjField("logo_url")
		s.LogoURL.WriteJSON(e)
	}
	if s.TextMatches != nil {
		more.More()
		e.ObjField("text_matches")
		s.TextMatches.WriteJSON(e)
	}
	if s.Related.Set {
		more.More()
		e.ObjField("related")
		s.Related.WriteJSON(e)
	}
	if s.Aliases.Set {
		more.More()
		e.ObjField("aliases")
		s.Aliases.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TopicSearchResultItem from json stream.
func (s *TopicSearchResultItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TopicSearchResultItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "display_name":
			if err := s.DisplayName.ReadJSON(d); err != nil {
				return err
			}
		case "short_description":
			if err := s.ShortDescription.ReadJSON(d); err != nil {
				return err
			}
		case "description":
			if err := s.Description.ReadJSON(d); err != nil {
				return err
			}
		case "created_by":
			if err := s.CreatedBy.ReadJSON(d); err != nil {
				return err
			}
		case "released":
			if err := s.Released.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "featured":
			v, err := d.Bool()
			s.Featured = bool(v)
			if err != nil {
				return err
			}
		case "curated":
			v, err := d.Bool()
			s.Curated = bool(v)
			if err != nil {
				return err
			}
		case "score":
			v, err := d.Float64()
			s.Score = float64(v)
			if err != nil {
				return err
			}
		case "repository_count":
			s.RepositoryCount.Reset()
			if err := s.RepositoryCount.ReadJSON(d); err != nil {
				return err
			}
		case "logo_url":
			s.LogoURL.Reset()
			if err := s.LogoURL.ReadJSON(d); err != nil {
				return err
			}
		case "text_matches":
			s.TextMatches = nil
			var elem SearchResultTextMatches
			if err := fmt.Errorf(`decoding of "SearchResultTextMatches" (alias) is not implemented`); err != nil {
				return err
			}
			s.TextMatches = &elem
		case "related":
			s.Related.Reset()
			if err := s.Related.ReadJSON(d); err != nil {
				return err
			}
		case "aliases":
			s.Aliases.Reset()
			if err := s.Aliases.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TopicSearchResultItemAliasesItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.TopicRelation.Set {
		more.More()
		e.ObjField("topic_relation")
		s.TopicRelation.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TopicSearchResultItemAliasesItem from json stream.
func (s *TopicSearchResultItemAliasesItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TopicSearchResultItemAliasesItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "topic_relation":
			s.TopicRelation.Reset()
			if err := s.TopicRelation.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TopicSearchResultItemAliasesItemTopicRelation) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.TopicID.Set {
		more.More()
		e.ObjField("topic_id")
		s.TopicID.WriteJSON(e)
	}
	if s.RelationType.Set {
		more.More()
		e.ObjField("relation_type")
		s.RelationType.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TopicSearchResultItemAliasesItemTopicRelation from json stream.
func (s *TopicSearchResultItemAliasesItemTopicRelation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TopicSearchResultItemAliasesItemTopicRelation to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "topic_id":
			s.TopicID.Reset()
			if err := s.TopicID.ReadJSON(d); err != nil {
				return err
			}
		case "relation_type":
			s.RelationType.Reset()
			if err := s.RelationType.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TopicSearchResultItemRelatedItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.TopicRelation.Set {
		more.More()
		e.ObjField("topic_relation")
		s.TopicRelation.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TopicSearchResultItemRelatedItem from json stream.
func (s *TopicSearchResultItemRelatedItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TopicSearchResultItemRelatedItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "topic_relation":
			s.TopicRelation.Reset()
			if err := s.TopicRelation.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s TopicSearchResultItemRelatedItemTopicRelation) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		e.ObjField("id")
		s.ID.WriteJSON(e)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.TopicID.Set {
		more.More()
		e.ObjField("topic_id")
		s.TopicID.WriteJSON(e)
	}
	if s.RelationType.Set {
		more.More()
		e.ObjField("relation_type")
		s.RelationType.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads TopicSearchResultItemRelatedItemTopicRelation from json stream.
func (s *TopicSearchResultItemRelatedItemTopicRelation) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode TopicSearchResultItemRelatedItemTopicRelation to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(d); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "topic_id":
			s.TopicID.Reset()
			if err := s.TopicID.ReadJSON(d); err != nil {
				return err
			}
		case "relation_type":
			s.RelationType.Reset()
			if err := s.RelationType.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Traffic) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("timestamp")
	json.WriteDateTime(e, s.Timestamp)
	more.More()
	e.ObjField("uniques")
	e.Int(s.Uniques)
	more.More()
	e.ObjField("count")
	e.Int(s.Count)
	e.ObjEnd()
}

// ReadJSON reads Traffic from json stream.
func (s *Traffic) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Traffic to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "timestamp":
			v, err := json.ReadDateTime(d)
			s.Timestamp = v
			if err != nil {
				return err
			}
		case "uniques":
			v, err := d.Int()
			s.Uniques = int(v)
			if err != nil {
				return err
			}
		case "count":
			v, err := d.Int()
			s.Count = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UserMarketplacePurchase) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("billing_cycle")
	e.Str(s.BillingCycle)
	more.More()
	e.ObjField("next_billing_date")
	s.NextBillingDate.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("unit_count")
	s.UnitCount.WriteJSON(e)
	more.More()
	e.ObjField("on_free_trial")
	e.Bool(s.OnFreeTrial)
	more.More()
	e.ObjField("free_trial_ends_on")
	s.FreeTrialEndsOn.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("updated_at")
	s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	more.More()
	e.ObjField("account")
	s.Account.WriteJSON(e)
	more.More()
	e.ObjField("plan")
	s.Plan.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads UserMarketplacePurchase from json stream.
func (s *UserMarketplacePurchase) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UserMarketplacePurchase to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "billing_cycle":
			v, err := d.Str()
			s.BillingCycle = string(v)
			if err != nil {
				return err
			}
		case "next_billing_date":
			if err := s.NextBillingDate.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "unit_count":
			if err := s.UnitCount.ReadJSON(d); err != nil {
				return err
			}
		case "on_free_trial":
			v, err := d.Bool()
			s.OnFreeTrial = bool(v)
			if err != nil {
				return err
			}
		case "free_trial_ends_on":
			if err := s.FreeTrialEndsOn.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "account":
			if err := s.Account.ReadJSON(d); err != nil {
				return err
			}
		case "plan":
			if err := s.Plan.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UserSearchResultItem) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("login")
	e.Str(s.Login)
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("avatar_url")
	json.WriteURI(e, s.AvatarURL)
	more.More()
	e.ObjField("gravatar_id")
	s.GravatarID.WriteJSON(e)
	more.More()
	e.ObjField("url")
	json.WriteURI(e, s.URL)
	more.More()
	e.ObjField("html_url")
	json.WriteURI(e, s.HTMLURL)
	more.More()
	e.ObjField("followers_url")
	json.WriteURI(e, s.FollowersURL)
	more.More()
	e.ObjField("subscriptions_url")
	json.WriteURI(e, s.SubscriptionsURL)
	more.More()
	e.ObjField("organizations_url")
	json.WriteURI(e, s.OrganizationsURL)
	more.More()
	e.ObjField("repos_url")
	json.WriteURI(e, s.ReposURL)
	more.More()
	e.ObjField("received_events_url")
	json.WriteURI(e, s.ReceivedEventsURL)
	more.More()
	e.ObjField("type")
	e.Str(s.Type)
	more.More()
	e.ObjField("score")
	e.Float64(s.Score)
	more.More()
	e.ObjField("following_url")
	e.Str(s.FollowingURL)
	more.More()
	e.ObjField("gists_url")
	e.Str(s.GistsURL)
	more.More()
	e.ObjField("starred_url")
	e.Str(s.StarredURL)
	more.More()
	e.ObjField("events_url")
	e.Str(s.EventsURL)
	if s.PublicRepos.Set {
		more.More()
		e.ObjField("public_repos")
		s.PublicRepos.WriteJSON(e)
	}
	if s.PublicGists.Set {
		more.More()
		e.ObjField("public_gists")
		s.PublicGists.WriteJSON(e)
	}
	if s.Followers.Set {
		more.More()
		e.ObjField("followers")
		s.Followers.WriteJSON(e)
	}
	if s.Following.Set {
		more.More()
		e.ObjField("following")
		s.Following.WriteJSON(e)
	}
	if s.CreatedAt.Set {
		more.More()
		e.ObjField("created_at")
		s.CreatedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.UpdatedAt.Set {
		more.More()
		e.ObjField("updated_at")
		s.UpdatedAt.WriteJSON(e, json.WriteDateTime)
	}
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Bio.Set {
		more.More()
		e.ObjField("bio")
		s.Bio.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.Location.Set {
		more.More()
		e.ObjField("location")
		s.Location.WriteJSON(e)
	}
	more.More()
	e.ObjField("site_admin")
	e.Bool(s.SiteAdmin)
	if s.Hireable.Set {
		more.More()
		e.ObjField("hireable")
		s.Hireable.WriteJSON(e)
	}
	if s.TextMatches != nil {
		more.More()
		e.ObjField("text_matches")
		s.TextMatches.WriteJSON(e)
	}
	if s.Blog.Set {
		more.More()
		e.ObjField("blog")
		s.Blog.WriteJSON(e)
	}
	if s.Company.Set {
		more.More()
		e.ObjField("company")
		s.Company.WriteJSON(e)
	}
	if s.SuspendedAt.Set {
		more.More()
		e.ObjField("suspended_at")
		s.SuspendedAt.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads UserSearchResultItem from json stream.
func (s *UserSearchResultItem) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UserSearchResultItem to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "login":
			v, err := d.Str()
			s.Login = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "avatar_url":
			v, err := json.ReadURI(d)
			s.AvatarURL = v
			if err != nil {
				return err
			}
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(d); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(d)
			s.URL = v
			if err != nil {
				return err
			}
		case "html_url":
			v, err := json.ReadURI(d)
			s.HTMLURL = v
			if err != nil {
				return err
			}
		case "followers_url":
			v, err := json.ReadURI(d)
			s.FollowersURL = v
			if err != nil {
				return err
			}
		case "subscriptions_url":
			v, err := json.ReadURI(d)
			s.SubscriptionsURL = v
			if err != nil {
				return err
			}
		case "organizations_url":
			v, err := json.ReadURI(d)
			s.OrganizationsURL = v
			if err != nil {
				return err
			}
		case "repos_url":
			v, err := json.ReadURI(d)
			s.ReposURL = v
			if err != nil {
				return err
			}
		case "received_events_url":
			v, err := json.ReadURI(d)
			s.ReceivedEventsURL = v
			if err != nil {
				return err
			}
		case "type":
			v, err := d.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "score":
			v, err := d.Float64()
			s.Score = float64(v)
			if err != nil {
				return err
			}
		case "following_url":
			v, err := d.Str()
			s.FollowingURL = string(v)
			if err != nil {
				return err
			}
		case "gists_url":
			v, err := d.Str()
			s.GistsURL = string(v)
			if err != nil {
				return err
			}
		case "starred_url":
			v, err := d.Str()
			s.StarredURL = string(v)
			if err != nil {
				return err
			}
		case "events_url":
			v, err := d.Str()
			s.EventsURL = string(v)
			if err != nil {
				return err
			}
		case "public_repos":
			s.PublicRepos.Reset()
			if err := s.PublicRepos.ReadJSON(d); err != nil {
				return err
			}
		case "public_gists":
			s.PublicGists.Reset()
			if err := s.PublicGists.ReadJSON(d); err != nil {
				return err
			}
		case "followers":
			s.Followers.Reset()
			if err := s.Followers.ReadJSON(d); err != nil {
				return err
			}
		case "following":
			s.Following.Reset()
			if err := s.Following.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "bio":
			s.Bio.Reset()
			if err := s.Bio.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		case "site_admin":
			v, err := d.Bool()
			s.SiteAdmin = bool(v)
			if err != nil {
				return err
			}
		case "hireable":
			s.Hireable.Reset()
			if err := s.Hireable.ReadJSON(d); err != nil {
				return err
			}
		case "text_matches":
			s.TextMatches = nil
			var elem SearchResultTextMatches
			if err := fmt.Errorf(`decoding of "SearchResultTextMatches" (alias) is not implemented`); err != nil {
				return err
			}
			s.TextMatches = &elem
		case "blog":
			s.Blog.Reset()
			if err := s.Blog.ReadJSON(d); err != nil {
				return err
			}
		case "company":
			s.Company.Reset()
			if err := s.Company.ReadJSON(d); err != nil {
				return err
			}
		case "suspended_at":
			s.SuspendedAt.Reset()
			if err := s.SuspendedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UsersBlockNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads UsersBlockNoContent from json stream.
func (s *UsersBlockNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersBlockNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (UsersCheckBlockedApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (UsersCheckBlockedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (UsersCheckBlockedApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (UsersCheckBlockedApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (UsersCheckBlockedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (UsersCheckBlockedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s UsersCheckBlockedNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads UsersCheckBlockedNoContent from json stream.
func (s *UsersCheckBlockedNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersCheckBlockedNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UsersCheckFollowingForUserNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads UsersCheckFollowingForUserNoContent from json stream.
func (s *UsersCheckFollowingForUserNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersCheckFollowingForUserNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UsersCheckFollowingForUserNotFound) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads UsersCheckFollowingForUserNotFound from json stream.
func (s *UsersCheckFollowingForUserNotFound) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersCheckFollowingForUserNotFound to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s UsersCheckPersonIsFollowedByAuthenticatedNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads UsersCheckPersonIsFollowedByAuthenticatedNoContent from json stream.
func (s *UsersCheckPersonIsFollowedByAuthenticatedNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersCheckPersonIsFollowedByAuthenticatedNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UsersCreateGpgKeyForAuthenticatedReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("armored_public_key")
	e.Str(s.ArmoredPublicKey)
	e.ObjEnd()
}

// ReadJSON reads UsersCreateGpgKeyForAuthenticatedReq from json stream.
func (s *UsersCreateGpgKeyForAuthenticatedReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersCreateGpgKeyForAuthenticatedReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "armored_public_key":
			v, err := d.Str()
			s.ArmoredPublicKey = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UsersCreatePublicSSHKeyForAuthenticatedReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Title.Set {
		more.More()
		e.ObjField("title")
		s.Title.WriteJSON(e)
	}
	more.More()
	e.ObjField("key")
	e.Str(s.Key)
	e.ObjEnd()
}

// ReadJSON reads UsersCreatePublicSSHKeyForAuthenticatedReq from json stream.
func (s *UsersCreatePublicSSHKeyForAuthenticatedReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersCreatePublicSSHKeyForAuthenticatedReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(d); err != nil {
				return err
			}
		case "key":
			v, err := d.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UsersDeleteGpgKeyForAuthenticatedNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads UsersDeleteGpgKeyForAuthenticatedNoContent from json stream.
func (s *UsersDeleteGpgKeyForAuthenticatedNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersDeleteGpgKeyForAuthenticatedNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {
}
func (UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s UsersDeletePublicSSHKeyForAuthenticatedNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads UsersDeletePublicSSHKeyForAuthenticatedNoContent from json stream.
func (s *UsersDeletePublicSSHKeyForAuthenticatedNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersDeletePublicSSHKeyForAuthenticatedNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (UsersFollowApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (UsersFollowApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (UsersFollowApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (UsersFollowApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (UsersFollowApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (UsersFollowApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s UsersFollowNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads UsersFollowNoContent from json stream.
func (s *UsersFollowNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersFollowNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UsersGetContextForUserSubjectType) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads UsersGetContextForUserSubjectType from json reader.
func (s *UsersGetContextForUserSubjectType) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersGetContextForUserSubjectType to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = UsersGetContextForUserSubjectType(v)
	return nil
}

func (UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListBlockedByAuthenticatedApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersListBlockedByAuthenticatedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListBlockedByAuthenticatedApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (UsersListBlockedByAuthenticatedApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListBlockedByAuthenticatedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (UsersListBlockedByAuthenticatedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListBlockedByAuthenticatedOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (UsersListBlockedByAuthenticatedOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (UsersListEmailsForAuthenticatedApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersListEmailsForAuthenticatedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListEmailsForAuthenticatedApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (UsersListEmailsForAuthenticatedApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListEmailsForAuthenticatedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (UsersListEmailsForAuthenticatedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListEmailsForAuthenticatedOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (UsersListEmailsForAuthenticatedOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (UsersListFollowedByAuthenticatedApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersListFollowedByAuthenticatedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListFollowedByAuthenticatedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (UsersListFollowedByAuthenticatedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListFollowedByAuthenticatedOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (UsersListFollowedByAuthenticatedOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (UsersListFollowersForAuthenticatedUserApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersListFollowersForAuthenticatedUserApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListFollowersForAuthenticatedUserOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (UsersListFollowersForAuthenticatedUserOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListGpgKeysForAuthenticatedApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersListGpgKeysForAuthenticatedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListGpgKeysForAuthenticatedApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (UsersListGpgKeysForAuthenticatedApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListGpgKeysForAuthenticatedOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (UsersListGpgKeysForAuthenticatedOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (UsersListOKApplicationJSON) WriteJSON(e *json.Encoder)      {}
func (UsersListOKApplicationJSON) ReadJSON(d *json.Decoder) error { return nil }

func (UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListPublicEmailsForAuthenticatedOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (UsersListPublicEmailsForAuthenticatedOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden) WriteJSON(e *json.Encoder) {}
func (UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound) WriteJSON(e *json.Encoder) {}
func (UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized) WriteJSON(e *json.Encoder) {}
func (UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error {
	return nil
}

func (UsersListPublicSSHKeysForAuthenticatedOKApplicationJSON) WriteJSON(e *json.Encoder) {}
func (UsersListPublicSSHKeysForAuthenticatedOKApplicationJSON) ReadJSON(d *json.Decoder) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s UsersSetPrimaryEmailVisibilityForAuthenticatedReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("visibility")
	s.Visibility.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads UsersSetPrimaryEmailVisibilityForAuthenticatedReq from json stream.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersSetPrimaryEmailVisibilityForAuthenticatedReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "visibility":
			if err := s.Visibility.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility from json reader.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility(v)
	return nil
}

func (UsersUnblockApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (UsersUnblockApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (UsersUnblockApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (UsersUnblockApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (UsersUnblockApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (UsersUnblockApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s UsersUnblockNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads UsersUnblockNoContent from json stream.
func (s *UsersUnblockNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersUnblockNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

func (UsersUnfollowApplicationJSONForbidden) WriteJSON(e *json.Encoder)      {}
func (UsersUnfollowApplicationJSONForbidden) ReadJSON(d *json.Decoder) error { return nil }

func (UsersUnfollowApplicationJSONNotFound) WriteJSON(e *json.Encoder)      {}
func (UsersUnfollowApplicationJSONNotFound) ReadJSON(d *json.Decoder) error { return nil }

func (UsersUnfollowApplicationJSONUnauthorized) WriteJSON(e *json.Encoder)      {}
func (UsersUnfollowApplicationJSONUnauthorized) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s UsersUnfollowNoContent) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	e.ObjEnd()
}

// ReadJSON reads UsersUnfollowNoContent from json stream.
func (s *UsersUnfollowNoContent) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersUnfollowNoContent to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UsersUpdateAuthenticatedReq) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	if s.Email.Set {
		more.More()
		e.ObjField("email")
		s.Email.WriteJSON(e)
	}
	if s.Blog.Set {
		more.More()
		e.ObjField("blog")
		s.Blog.WriteJSON(e)
	}
	if s.TwitterUsername.Set {
		more.More()
		e.ObjField("twitter_username")
		s.TwitterUsername.WriteJSON(e)
	}
	if s.Company.Set {
		more.More()
		e.ObjField("company")
		s.Company.WriteJSON(e)
	}
	if s.Location.Set {
		more.More()
		e.ObjField("location")
		s.Location.WriteJSON(e)
	}
	if s.Hireable.Set {
		more.More()
		e.ObjField("hireable")
		s.Hireable.WriteJSON(e)
	}
	if s.Bio.Set {
		more.More()
		e.ObjField("bio")
		s.Bio.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads UsersUpdateAuthenticatedReq from json stream.
func (s *UsersUpdateAuthenticatedReq) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UsersUpdateAuthenticatedReq to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(d); err != nil {
				return err
			}
		case "blog":
			s.Blog.Reset()
			if err := s.Blog.ReadJSON(d); err != nil {
				return err
			}
		case "twitter_username":
			s.TwitterUsername.Reset()
			if err := s.TwitterUsername.ReadJSON(d); err != nil {
				return err
			}
		case "company":
			s.Company.Reset()
			if err := s.Company.ReadJSON(d); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(d); err != nil {
				return err
			}
		case "hireable":
			s.Hireable.Reset()
			if err := s.Hireable.ReadJSON(d); err != nil {
				return err
			}
		case "bio":
			s.Bio.Reset()
			if err := s.Bio.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ValidationErrorSimple) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("message")
	e.Str(s.Message)
	more.More()
	e.ObjField("documentation_url")
	e.Str(s.DocumentationURL)
	if s.Errors != nil {
		more.More()
		e.ObjField("errors")
		more.Down()
		e.ArrStart()
		for _, elem := range s.Errors {
			more.More()
			e.Str(elem)
		}
		e.ArrEnd()
		more.Up()
	}
	e.ObjEnd()
}

// ReadJSON reads ValidationErrorSimple from json stream.
func (s *ValidationErrorSimple) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ValidationErrorSimple to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			v, err := d.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "documentation_url":
			v, err := d.Str()
			s.DocumentationURL = string(v)
			if err != nil {
				return err
			}
		case "errors":
			s.Errors = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem string
				v, err := d.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Errors = append(s.Errors, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Verification) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("verified")
	e.Bool(s.Verified)
	more.More()
	e.ObjField("reason")
	e.Str(s.Reason)
	more.More()
	e.ObjField("payload")
	s.Payload.WriteJSON(e)
	more.More()
	e.ObjField("signature")
	s.Signature.WriteJSON(e)
	e.ObjEnd()
}

// ReadJSON reads Verification from json stream.
func (s *Verification) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Verification to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "verified":
			v, err := d.Bool()
			s.Verified = bool(v)
			if err != nil {
				return err
			}
		case "reason":
			v, err := d.Str()
			s.Reason = string(v)
			if err != nil {
				return err
			}
		case "payload":
			if err := s.Payload.ReadJSON(d); err != nil {
				return err
			}
		case "signature":
			if err := s.Signature.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ViewTraffic) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("count")
	e.Int(s.Count)
	more.More()
	e.ObjField("uniques")
	e.Int(s.Uniques)
	more.More()
	e.ObjField("views")
	more.Down()
	e.ArrStart()
	for _, elem := range s.Views {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	e.ObjEnd()
}

// ReadJSON reads ViewTraffic from json stream.
func (s *ViewTraffic) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ViewTraffic to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			v, err := d.Int()
			s.Count = int(v)
			if err != nil {
				return err
			}
		case "uniques":
			v, err := d.Int()
			s.Uniques = int(v)
			if err != nil {
				return err
			}
		case "views":
			s.Views = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem Traffic
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.Views = append(s.Views, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

func (WaitTimer) WriteJSON(e *json.Encoder)      {}
func (WaitTimer) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WebhookConfig) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.URL.Set {
		more.More()
		e.ObjField("url")
		s.URL.WriteJSON(e)
	}
	if s.ContentType.Set {
		more.More()
		e.ObjField("content_type")
		s.ContentType.WriteJSON(e)
	}
	if s.Secret.Set {
		more.More()
		e.ObjField("secret")
		s.Secret.WriteJSON(e)
	}
	if s.InsecureSsl != nil {
		more.More()
		e.ObjField("insecure_ssl")
		s.InsecureSsl.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads WebhookConfig from json stream.
func (s *WebhookConfig) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WebhookConfig to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(d); err != nil {
				return err
			}
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(d); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(d); err != nil {
				return err
			}
		case "insecure_ssl":
			s.InsecureSsl = nil
			var elem WebhookConfigInsecureSsl
			if err := elem.ReadJSON(d); err != nil {
				return err
			}
			s.InsecureSsl = &elem
		default:
			return d.Skip()
		}
		return nil
	})
}

func (WebhookConfigContentType) WriteJSON(e *json.Encoder)      {}
func (WebhookConfigContentType) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WebhookConfigInsecureSsl) WriteJSON(e *json.Encoder) {
	switch s.Type {
	case StringWebhookConfigInsecureSsl:
		e.Str(s.String)
	case Float64WebhookConfigInsecureSsl:
		e.Float64(s.Float64)
	}
}

// ReadJSON reads value from json reader.
func (s *WebhookConfigInsecureSsl) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WebhookConfigInsecureSsl to nil`)
	}
	switch t := d.Next(); t {
	case json.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringWebhookConfigInsecureSsl
	case json.Number:
		v, err := d.Float64()
		s.Float64 = float64(v)
		if err != nil {
			return err
		}
		s.Type = Float64WebhookConfigInsecureSsl
	default:
		return fmt.Errorf("unexpected json type %q", t)
	}
	return nil
}

func (WebhookConfigSecret) WriteJSON(e *json.Encoder)      {}
func (WebhookConfigSecret) ReadJSON(d *json.Decoder) error { return nil }

func (WebhookConfigURL) WriteJSON(e *json.Encoder)      {}
func (WebhookConfigURL) ReadJSON(d *json.Decoder) error { return nil }

// WriteJSON implements json.Marshaler.
func (s Workflow) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	more.More()
	e.ObjField("name")
	e.Str(s.Name)
	more.More()
	e.ObjField("path")
	e.Str(s.Path)
	more.More()
	e.ObjField("state")
	s.State.WriteJSON(e)
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("html_url")
	e.Str(s.HTMLURL)
	more.More()
	e.ObjField("badge_url")
	e.Str(s.BadgeURL)
	if s.DeletedAt.Set {
		more.More()
		e.ObjField("deleted_at")
		s.DeletedAt.WriteJSON(e, json.WriteDateTime)
	}
	e.ObjEnd()
}

// ReadJSON reads Workflow from json stream.
func (s *Workflow) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Workflow to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := d.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "path":
			v, err := d.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "state":
			if err := s.State.ReadJSON(d); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := d.Str()
			s.HTMLURL = string(v)
			if err != nil {
				return err
			}
		case "badge_url":
			v, err := d.Str()
			s.BadgeURL = string(v)
			if err != nil {
				return err
			}
		case "deleted_at":
			s.DeletedAt.Reset()
			if err := s.DeletedAt.ReadJSON(d, json.ReadDateTime); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRun) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("id")
	e.Int(s.ID)
	if s.Name.Set {
		more.More()
		e.ObjField("name")
		s.Name.WriteJSON(e)
	}
	more.More()
	e.ObjField("node_id")
	e.Str(s.NodeID)
	if s.CheckSuiteID.Set {
		more.More()
		e.ObjField("check_suite_id")
		s.CheckSuiteID.WriteJSON(e)
	}
	if s.CheckSuiteNodeID.Set {
		more.More()
		e.ObjField("check_suite_node_id")
		s.CheckSuiteNodeID.WriteJSON(e)
	}
	more.More()
	e.ObjField("head_branch")
	s.HeadBranch.WriteJSON(e)
	more.More()
	e.ObjField("head_sha")
	e.Str(s.HeadSha)
	more.More()
	e.ObjField("run_number")
	e.Int(s.RunNumber)
	if s.RunAttempt.Set {
		more.More()
		e.ObjField("run_attempt")
		s.RunAttempt.WriteJSON(e)
	}
	more.More()
	e.ObjField("event")
	e.Str(s.Event)
	more.More()
	e.ObjField("status")
	s.Status.WriteJSON(e)
	more.More()
	e.ObjField("conclusion")
	s.Conclusion.WriteJSON(e)
	more.More()
	e.ObjField("workflow_id")
	e.Int(s.WorkflowID)
	more.More()
	e.ObjField("url")
	e.Str(s.URL)
	more.More()
	e.ObjField("html_url")
	e.Str(s.HTMLURL)
	more.More()
	e.ObjField("pull_requests")
	if s.PullRequests == nil {
		e.Null()
	} else {
		more.Down()
		e.ArrStart()
		for _, elem := range s.PullRequests {
			more.More()
			elem.WriteJSON(e)
		}
		e.ArrEnd()
		more.Up()
	}
	more.More()
	e.ObjField("created_at")
	json.WriteDateTime(e, s.CreatedAt)
	more.More()
	e.ObjField("updated_at")
	json.WriteDateTime(e, s.UpdatedAt)
	more.More()
	e.ObjField("jobs_url")
	e.Str(s.JobsURL)
	more.More()
	e.ObjField("logs_url")
	e.Str(s.LogsURL)
	more.More()
	e.ObjField("check_suite_url")
	e.Str(s.CheckSuiteURL)
	more.More()
	e.ObjField("artifacts_url")
	e.Str(s.ArtifactsURL)
	more.More()
	e.ObjField("cancel_url")
	e.Str(s.CancelURL)
	more.More()
	e.ObjField("rerun_url")
	e.Str(s.RerunURL)
	if s.PreviousAttemptURL.Set {
		more.More()
		e.ObjField("previous_attempt_url")
		s.PreviousAttemptURL.WriteJSON(e)
	}
	more.More()
	e.ObjField("workflow_url")
	e.Str(s.WorkflowURL)
	more.More()
	e.ObjField("head_commit")
	s.HeadCommit.WriteJSON(e)
	more.More()
	e.ObjField("repository")
	s.Repository.WriteJSON(e)
	more.More()
	e.ObjField("head_repository")
	s.HeadRepository.WriteJSON(e)
	if s.HeadRepositoryID.Set {
		more.More()
		e.ObjField("head_repository_id")
		s.HeadRepositoryID.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads WorkflowRun from json stream.
func (s *WorkflowRun) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WorkflowRun to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			v, err := d.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(d); err != nil {
				return err
			}
		case "node_id":
			v, err := d.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "check_suite_id":
			s.CheckSuiteID.Reset()
			if err := s.CheckSuiteID.ReadJSON(d); err != nil {
				return err
			}
		case "check_suite_node_id":
			s.CheckSuiteNodeID.Reset()
			if err := s.CheckSuiteNodeID.ReadJSON(d); err != nil {
				return err
			}
		case "head_branch":
			if err := s.HeadBranch.ReadJSON(d); err != nil {
				return err
			}
		case "head_sha":
			v, err := d.Str()
			s.HeadSha = string(v)
			if err != nil {
				return err
			}
		case "run_number":
			v, err := d.Int()
			s.RunNumber = int(v)
			if err != nil {
				return err
			}
		case "run_attempt":
			s.RunAttempt.Reset()
			if err := s.RunAttempt.ReadJSON(d); err != nil {
				return err
			}
		case "event":
			v, err := d.Str()
			s.Event = string(v)
			if err != nil {
				return err
			}
		case "status":
			if err := s.Status.ReadJSON(d); err != nil {
				return err
			}
		case "conclusion":
			if err := s.Conclusion.ReadJSON(d); err != nil {
				return err
			}
		case "workflow_id":
			v, err := d.Int()
			s.WorkflowID = int(v)
			if err != nil {
				return err
			}
		case "url":
			v, err := d.Str()
			s.URL = string(v)
			if err != nil {
				return err
			}
		case "html_url":
			v, err := d.Str()
			s.HTMLURL = string(v)
			if err != nil {
				return err
			}
		case "pull_requests":
			s.PullRequests = nil
			if err := d.Arr(func(d *json.Decoder) error {
				var elem PullRequestMinimal
				if err := elem.ReadJSON(d); err != nil {
					return err
				}
				s.PullRequests = append(s.PullRequests, elem)
				return nil
			}); err != nil {
				return err
			}
		case "created_at":
			v, err := json.ReadDateTime(d)
			s.CreatedAt = v
			if err != nil {
				return err
			}
		case "updated_at":
			v, err := json.ReadDateTime(d)
			s.UpdatedAt = v
			if err != nil {
				return err
			}
		case "jobs_url":
			v, err := d.Str()
			s.JobsURL = string(v)
			if err != nil {
				return err
			}
		case "logs_url":
			v, err := d.Str()
			s.LogsURL = string(v)
			if err != nil {
				return err
			}
		case "check_suite_url":
			v, err := d.Str()
			s.CheckSuiteURL = string(v)
			if err != nil {
				return err
			}
		case "artifacts_url":
			v, err := d.Str()
			s.ArtifactsURL = string(v)
			if err != nil {
				return err
			}
		case "cancel_url":
			v, err := d.Str()
			s.CancelURL = string(v)
			if err != nil {
				return err
			}
		case "rerun_url":
			v, err := d.Str()
			s.RerunURL = string(v)
			if err != nil {
				return err
			}
		case "previous_attempt_url":
			s.PreviousAttemptURL.Reset()
			if err := s.PreviousAttemptURL.ReadJSON(d); err != nil {
				return err
			}
		case "workflow_url":
			v, err := d.Str()
			s.WorkflowURL = string(v)
			if err != nil {
				return err
			}
		case "head_commit":
			if err := s.HeadCommit.ReadJSON(d); err != nil {
				return err
			}
		case "repository":
			if err := s.Repository.ReadJSON(d); err != nil {
				return err
			}
		case "head_repository":
			if err := s.HeadRepository.ReadJSON(d); err != nil {
				return err
			}
		case "head_repository_id":
			s.HeadRepositoryID.Reset()
			if err := s.HeadRepositoryID.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRunUsage) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("billable")
	s.Billable.WriteJSON(e)
	if s.RunDurationMs.Set {
		more.More()
		e.ObjField("run_duration_ms")
		s.RunDurationMs.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads WorkflowRunUsage from json stream.
func (s *WorkflowRunUsage) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WorkflowRunUsage to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "billable":
			if err := s.Billable.ReadJSON(d); err != nil {
				return err
			}
		case "run_duration_ms":
			s.RunDurationMs.Reset()
			if err := s.RunDurationMs.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRunUsageBillable) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	if s.UBUNTU.Set {
		more.More()
		e.ObjField("UBUNTU")
		s.UBUNTU.WriteJSON(e)
	}
	if s.MACOS.Set {
		more.More()
		e.ObjField("MACOS")
		s.MACOS.WriteJSON(e)
	}
	if s.WINDOWS.Set {
		more.More()
		e.ObjField("WINDOWS")
		s.WINDOWS.WriteJSON(e)
	}
	e.ObjEnd()
}

// ReadJSON reads WorkflowRunUsageBillable from json stream.
func (s *WorkflowRunUsageBillable) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WorkflowRunUsageBillable to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "UBUNTU":
			s.UBUNTU.Reset()
			if err := s.UBUNTU.ReadJSON(d); err != nil {
				return err
			}
		case "MACOS":
			s.MACOS.Reset()
			if err := s.MACOS.ReadJSON(d); err != nil {
				return err
			}
		case "WINDOWS":
			s.WINDOWS.Reset()
			if err := s.WINDOWS.ReadJSON(d); err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRunUsageBillableMACOS) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_ms")
	e.Int(s.TotalMs)
	more.More()
	e.ObjField("jobs")
	e.Int(s.Jobs)
	e.ObjEnd()
}

// ReadJSON reads WorkflowRunUsageBillableMACOS from json stream.
func (s *WorkflowRunUsageBillableMACOS) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WorkflowRunUsageBillableMACOS to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_ms":
			v, err := d.Int()
			s.TotalMs = int(v)
			if err != nil {
				return err
			}
		case "jobs":
			v, err := d.Int()
			s.Jobs = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRunUsageBillableUBUNTU) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_ms")
	e.Int(s.TotalMs)
	more.More()
	e.ObjField("jobs")
	e.Int(s.Jobs)
	e.ObjEnd()
}

// ReadJSON reads WorkflowRunUsageBillableUBUNTU from json stream.
func (s *WorkflowRunUsageBillableUBUNTU) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WorkflowRunUsageBillableUBUNTU to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_ms":
			v, err := d.Int()
			s.TotalMs = int(v)
			if err != nil {
				return err
			}
		case "jobs":
			v, err := d.Int()
			s.Jobs = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRunUsageBillableWINDOWS) WriteJSON(e *json.Encoder) {
	e.ObjStart()
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	e.ObjField("total_ms")
	e.Int(s.TotalMs)
	more.More()
	e.ObjField("jobs")
	e.Int(s.Jobs)
	e.ObjEnd()
}

// ReadJSON reads WorkflowRunUsageBillableWINDOWS from json stream.
func (s *WorkflowRunUsageBillableWINDOWS) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WorkflowRunUsageBillableWINDOWS to nil`)
	}
	return d.ObjBytes(func(d *json.Decoder, k []byte) error {
		switch string(k) {
		case "total_ms":
			v, err := d.Int()
			s.TotalMs = int(v)
			if err != nil {
				return err
			}
		case "jobs":
			v, err := d.Int()
			s.Jobs = int(v)
			if err != nil {
				return err
			}
		default:
			return d.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s WorkflowState) WriteJSON(e *json.Encoder) {
	e.Str(string(s))
}

// ReadJSON reads WorkflowState from json reader.
func (s *WorkflowState) ReadJSON(d *json.Decoder) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WorkflowState to nil`)
	}
	v, err := d.Str()
	if err != nil {
		return err
	}
	*s = WorkflowState(v)
	return nil
}
