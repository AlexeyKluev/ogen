// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

// WriteJSON implements json.Marshaler.
func (s APIOverview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.API != nil {
		more.More()
		j.WriteObjectField("api")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.API {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Actions != nil {
		more.More()
		j.WriteObjectField("actions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Actions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Dependabot != nil {
		more.More()
		j.WriteObjectField("dependabot")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Dependabot {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Git != nil {
		more.More()
		j.WriteObjectField("git")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Git {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Hooks != nil {
		more.More()
		j.WriteObjectField("hooks")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Hooks {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Importer != nil {
		more.More()
		j.WriteObjectField("importer")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Importer {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Packages != nil {
		more.More()
		j.WriteObjectField("packages")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Packages {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Pages != nil {
		more.More()
		j.WriteObjectField("pages")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Pages {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.SSHKeyFingerprints.Set {
		more.More()
		j.WriteObjectField("ssh_key_fingerprints")
		s.SSHKeyFingerprints.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("verifiable_password_authentication")
	j.WriteBool(s.VerifiablePasswordAuthentication)

	if s.Web != nil {
		more.More()
		j.WriteObjectField("web")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Web {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes APIOverview json value to io.Writer.
func (s APIOverview) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads APIOverview json value from io.Reader.
func (s *APIOverview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads APIOverview from json stream.
func (s *APIOverview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "api":
			// Unsupported kind "array" for field "API".
			i.Skip()
			return true
		case "actions":
			// Unsupported kind "array" for field "Actions".
			i.Skip()
			return true
		case "dependabot":
			// Unsupported kind "array" for field "Dependabot".
			i.Skip()
			return true
		case "git":
			// Unsupported kind "array" for field "Git".
			i.Skip()
			return true
		case "hooks":
			// Unsupported kind "array" for field "Hooks".
			i.Skip()
			return true
		case "importer":
			// Unsupported kind "array" for field "Importer".
			i.Skip()
			return true
		case "packages":
			// Unsupported kind "array" for field "Packages".
			i.Skip()
			return true
		case "pages":
			// Unsupported kind "array" for field "Pages".
			i.Skip()
			return true
		case "ssh_key_fingerprints":
			s.SSHKeyFingerprints.Reset()
			if err := s.SSHKeyFingerprints.ReadJSON(i); err != nil {
				i.ReportError("Field SSHKeyFingerprints", err.Error())
				return false
			}
			return true
		case "verifiable_password_authentication":
			s.VerifiablePasswordAuthentication = i.ReadBool()
			return i.Error == nil
		case "web":
			// Unsupported kind "array" for field "Web".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s APIOverviewSSHKeyFingerprints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.SHA256DSA.Set {
		more.More()
		j.WriteObjectField("SHA256_DSA")
		s.SHA256DSA.WriteJSON(j)
	}

	if s.SHA256ECDSA.Set {
		more.More()
		j.WriteObjectField("SHA256_ECDSA")
		s.SHA256ECDSA.WriteJSON(j)
	}

	if s.SHA256ED25519.Set {
		more.More()
		j.WriteObjectField("SHA256_ED25519")
		s.SHA256ED25519.WriteJSON(j)
	}

	if s.SHA256RSA.Set {
		more.More()
		j.WriteObjectField("SHA256_RSA")
		s.SHA256RSA.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes APIOverviewSSHKeyFingerprints json value to io.Writer.
func (s APIOverviewSSHKeyFingerprints) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads APIOverviewSSHKeyFingerprints json value from io.Reader.
func (s *APIOverviewSSHKeyFingerprints) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads APIOverviewSSHKeyFingerprints from json stream.
func (s *APIOverviewSSHKeyFingerprints) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "SHA256_DSA":
			s.SHA256DSA.Reset()
			if err := s.SHA256DSA.ReadJSON(i); err != nil {
				i.ReportError("Field SHA256DSA", err.Error())
				return false
			}
			return true
		case "SHA256_ECDSA":
			s.SHA256ECDSA.Reset()
			if err := s.SHA256ECDSA.ReadJSON(i); err != nil {
				i.ReportError("Field SHA256ECDSA", err.Error())
				return false
			}
			return true
		case "SHA256_ED25519":
			s.SHA256ED25519.Reset()
			if err := s.SHA256ED25519.ReadJSON(i); err != nil {
				i.ReportError("Field SHA256ED25519", err.Error())
				return false
			}
			return true
		case "SHA256_RSA":
			s.SHA256RSA.Reset()
			if err := s.SHA256RSA.ReadJSON(i); err != nil {
				i.ReportError("Field SHA256RSA", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsBillingUsage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("included_minutes")
	j.WriteInt(s.IncludedMinutes)

	more.More()
	j.WriteObjectField("minutes_used_breakdown")
	s.MinutesUsedBreakdown.WriteJSON(j)

	more.More()
	j.WriteObjectField("total_minutes_used")
	j.WriteInt(s.TotalMinutesUsed)

	more.More()
	j.WriteObjectField("total_paid_minutes_used")
	j.WriteInt(s.TotalPaidMinutesUsed)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsBillingUsage json value to io.Writer.
func (s ActionsBillingUsage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsBillingUsage json value from io.Reader.
func (s *ActionsBillingUsage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsBillingUsage from json stream.
func (s *ActionsBillingUsage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "included_minutes":
			s.IncludedMinutes = i.ReadInt()
			return i.Error == nil
		case "minutes_used_breakdown":
			if err := s.MinutesUsedBreakdown.ReadJSON(i); err != nil {
				i.ReportError("Field MinutesUsedBreakdown", err.Error())
				return false
			}
			return true
		case "total_minutes_used":
			s.TotalMinutesUsed = i.ReadInt()
			return i.Error == nil
		case "total_paid_minutes_used":
			s.TotalPaidMinutesUsed = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsBillingUsageMinutesUsedBreakdown) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MACOS.Set {
		more.More()
		j.WriteObjectField("MACOS")
		s.MACOS.WriteJSON(j)
	}

	if s.UBUNTU.Set {
		more.More()
		j.WriteObjectField("UBUNTU")
		s.UBUNTU.WriteJSON(j)
	}

	if s.WINDOWS.Set {
		more.More()
		j.WriteObjectField("WINDOWS")
		s.WINDOWS.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsBillingUsageMinutesUsedBreakdown json value to io.Writer.
func (s ActionsBillingUsageMinutesUsedBreakdown) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsBillingUsageMinutesUsedBreakdown json value from io.Reader.
func (s *ActionsBillingUsageMinutesUsedBreakdown) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsBillingUsageMinutesUsedBreakdown from json stream.
func (s *ActionsBillingUsageMinutesUsedBreakdown) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "MACOS":
			s.MACOS.Reset()
			if err := s.MACOS.ReadJSON(i); err != nil {
				i.ReportError("Field MACOS", err.Error())
				return false
			}
			return true
		case "UBUNTU":
			s.UBUNTU.Reset()
			if err := s.UBUNTU.ReadJSON(i); err != nil {
				i.ReportError("Field UBUNTU", err.Error())
				return false
			}
			return true
		case "WINDOWS":
			s.WINDOWS.Reset()
			if err := s.WINDOWS.ReadJSON(i); err != nil {
				i.ReportError("Field WINDOWS", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("encrypted_value")
	j.WriteString(s.EncryptedValue)

	more.More()
	j.WriteObjectField("key_id")
	j.WriteString(s.KeyID)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest json value to io.Writer.
func (s ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest json value from io.Reader.
func (s *ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest from json stream.
func (s *ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "encrypted_value":
			s.EncryptedValue = i.ReadString()
			return i.Error == nil
		case "key_id":
			s.KeyID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateOrgSecretApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EncryptedValue.Set {
		more.More()
		j.WriteObjectField("encrypted_value")
		s.EncryptedValue.WriteJSON(j)
	}

	if s.KeyID.Set {
		more.More()
		j.WriteObjectField("key_id")
		s.KeyID.WriteJSON(j)
	}

	if s.SelectedRepositoryIds != nil {
		more.More()
		j.WriteObjectField("selected_repository_ids")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.SelectedRepositoryIds {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("visibility")
	s.Visibility.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsCreateOrUpdateOrgSecretApplicationJSONRequest json value to io.Writer.
func (s ActionsCreateOrUpdateOrgSecretApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsCreateOrUpdateOrgSecretApplicationJSONRequest json value from io.Reader.
func (s *ActionsCreateOrUpdateOrgSecretApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsCreateOrUpdateOrgSecretApplicationJSONRequest from json stream.
func (s *ActionsCreateOrUpdateOrgSecretApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "encrypted_value":
			s.EncryptedValue.Reset()
			if err := s.EncryptedValue.ReadJSON(i); err != nil {
				i.ReportError("Field EncryptedValue", err.Error())
				return false
			}
			return true
		case "key_id":
			s.KeyID.Reset()
			if err := s.KeyID.ReadJSON(i); err != nil {
				i.ReportError("Field KeyID", err.Error())
				return false
			}
			return true
		case "selected_repository_ids":
			// Unsupported kind "array" for field "SelectedRepositoryIds".
			i.Skip()
			return true
		case "visibility":
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibility from json stream.
func (s *ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	*s = ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibility(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateOrUpdateRepoSecretApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EncryptedValue.Set {
		more.More()
		j.WriteObjectField("encrypted_value")
		s.EncryptedValue.WriteJSON(j)
	}

	if s.KeyID.Set {
		more.More()
		j.WriteObjectField("key_id")
		s.KeyID.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsCreateOrUpdateRepoSecretApplicationJSONRequest json value to io.Writer.
func (s ActionsCreateOrUpdateRepoSecretApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsCreateOrUpdateRepoSecretApplicationJSONRequest json value from io.Reader.
func (s *ActionsCreateOrUpdateRepoSecretApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsCreateOrUpdateRepoSecretApplicationJSONRequest from json stream.
func (s *ActionsCreateOrUpdateRepoSecretApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "encrypted_value":
			s.EncryptedValue.Reset()
			if err := s.EncryptedValue.ReadJSON(i); err != nil {
				i.ReportError("Field EncryptedValue", err.Error())
				return false
			}
			return true
		case "key_id":
			s.KeyID.Reset()
			if err := s.KeyID.ReadJSON(i); err != nil {
				i.ReportError("Field KeyID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.Runners != nil {
		more.More()
		j.WriteObjectField("runners")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Runners {
			more.More()
			j.WriteInt(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.SelectedRepositoryIds != nil {
		more.More()
		j.WriteObjectField("selected_repository_ids")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.SelectedRepositoryIds {
			more.More()
			j.WriteInt(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest json value to io.Writer.
func (s ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest json value from io.Reader.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest from json stream.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "runners":
			// Unsupported kind "array" for field "Runners".
			i.Skip()
			return true
		case "selected_repository_ids":
			// Unsupported kind "array" for field "SelectedRepositoryIds".
			i.Skip()
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility from json stream.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	*s = ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsEnterprisePermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedActions.Set {
		more.More()
		j.WriteObjectField("allowed_actions")
		s.AllowedActions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("enabled_organizations")
	s.EnabledOrganizations.WriteJSON(j)

	// Unsupported kind "pointer" for field "selected_actions_url".

	if s.SelectedOrganizationsURL.Set {
		more.More()
		j.WriteObjectField("selected_organizations_url")
		s.SelectedOrganizationsURL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsEnterprisePermissions json value to io.Writer.
func (s ActionsEnterprisePermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsEnterprisePermissions json value from io.Reader.
func (s *ActionsEnterprisePermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsEnterprisePermissions from json stream.
func (s *ActionsEnterprisePermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(i); err != nil {
				i.ReportError("Field AllowedActions", err.Error())
				return false
			}
			return true
		case "enabled_organizations":
			if err := s.EnabledOrganizations.ReadJSON(i); err != nil {
				i.ReportError("Field EnabledOrganizations", err.Error())
				return false
			}
			return true
		case "selected_actions_url":
			// Unsupported kind "pointer" for field "SelectedActionsURL".
			i.Skip()
			return true
		case "selected_organizations_url":
			s.SelectedOrganizationsURL.Reset()
			if err := s.SelectedOrganizationsURL.ReadJSON(i); err != nil {
				i.ReportError("Field SelectedOrganizationsURL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListArtifactsForRepo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("artifacts")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Artifacts {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListArtifactsForRepo json value to io.Writer.
func (s ActionsListArtifactsForRepo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListArtifactsForRepo json value from io.Reader.
func (s *ActionsListArtifactsForRepo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListArtifactsForRepo from json stream.
func (s *ActionsListArtifactsForRepo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "artifacts":
			// Unsupported kind "array" for field "Artifacts".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListEnvironmentSecrets) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("secrets")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Secrets {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListEnvironmentSecrets json value to io.Writer.
func (s ActionsListEnvironmentSecrets) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListEnvironmentSecrets json value from io.Reader.
func (s *ActionsListEnvironmentSecrets) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListEnvironmentSecrets from json stream.
func (s *ActionsListEnvironmentSecrets) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "secrets":
			// Unsupported kind "array" for field "Secrets".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListOrgSecrets) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("secrets")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Secrets {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListOrgSecrets json value to io.Writer.
func (s ActionsListOrgSecrets) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListOrgSecrets json value from io.Reader.
func (s *ActionsListOrgSecrets) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListOrgSecrets from json stream.
func (s *ActionsListOrgSecrets) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "secrets":
			// Unsupported kind "array" for field "Secrets".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListRepoAccessToSelfHostedRunnerGroupInOrg) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("repositories")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteFloat64(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListRepoAccessToSelfHostedRunnerGroupInOrg json value to io.Writer.
func (s ActionsListRepoAccessToSelfHostedRunnerGroupInOrg) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListRepoAccessToSelfHostedRunnerGroupInOrg json value from io.Reader.
func (s *ActionsListRepoAccessToSelfHostedRunnerGroupInOrg) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListRepoAccessToSelfHostedRunnerGroupInOrg from json stream.
func (s *ActionsListRepoAccessToSelfHostedRunnerGroupInOrg) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListRepoSecrets) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("secrets")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Secrets {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListRepoSecrets json value to io.Writer.
func (s ActionsListRepoSecrets) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListRepoSecrets json value from io.Reader.
func (s *ActionsListRepoSecrets) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListRepoSecrets from json stream.
func (s *ActionsListRepoSecrets) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "secrets":
			// Unsupported kind "array" for field "Secrets".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListRepoWorkflows) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	more.More()
	j.WriteObjectField("workflows")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Workflows {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListRepoWorkflows json value to io.Writer.
func (s ActionsListRepoWorkflows) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListRepoWorkflows json value from io.Reader.
func (s *ActionsListRepoWorkflows) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListRepoWorkflows from json stream.
func (s *ActionsListRepoWorkflows) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		case "workflows":
			// Unsupported kind "array" for field "Workflows".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelectedReposForOrgSecret) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("repositories")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListSelectedReposForOrgSecret json value to io.Writer.
func (s ActionsListSelectedReposForOrgSecret) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListSelectedReposForOrgSecret json value from io.Reader.
func (s *ActionsListSelectedReposForOrgSecret) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListSelectedReposForOrgSecret from json stream.
func (s *ActionsListSelectedReposForOrgSecret) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelectedRepositoriesEnabledGithubActionsOrganization) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("repositories")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteFloat64(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListSelectedRepositoriesEnabledGithubActionsOrganization json value to io.Writer.
func (s ActionsListSelectedRepositoriesEnabledGithubActionsOrganization) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListSelectedRepositoriesEnabledGithubActionsOrganization json value from io.Reader.
func (s *ActionsListSelectedRepositoriesEnabledGithubActionsOrganization) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListSelectedRepositoriesEnabledGithubActionsOrganization from json stream.
func (s *ActionsListSelectedRepositoriesEnabledGithubActionsOrganization) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelfHostedRunnerGroupsForOrg) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("runner_groups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.RunnerGroups {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteFloat64(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListSelfHostedRunnerGroupsForOrg json value to io.Writer.
func (s ActionsListSelfHostedRunnerGroupsForOrg) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListSelfHostedRunnerGroupsForOrg json value from io.Reader.
func (s *ActionsListSelfHostedRunnerGroupsForOrg) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListSelfHostedRunnerGroupsForOrg from json stream.
func (s *ActionsListSelfHostedRunnerGroupsForOrg) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "runner_groups":
			// Unsupported kind "array" for field "RunnerGroups".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelfHostedRunnersForOrg) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("runners")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Runners {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListSelfHostedRunnersForOrg json value to io.Writer.
func (s ActionsListSelfHostedRunnersForOrg) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListSelfHostedRunnersForOrg json value from io.Reader.
func (s *ActionsListSelfHostedRunnersForOrg) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListSelfHostedRunnersForOrg from json stream.
func (s *ActionsListSelfHostedRunnersForOrg) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "runners":
			// Unsupported kind "array" for field "Runners".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelfHostedRunnersForRepo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("runners")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Runners {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListSelfHostedRunnersForRepo json value to io.Writer.
func (s ActionsListSelfHostedRunnersForRepo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListSelfHostedRunnersForRepo json value from io.Reader.
func (s *ActionsListSelfHostedRunnersForRepo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListSelfHostedRunnersForRepo from json stream.
func (s *ActionsListSelfHostedRunnersForRepo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "runners":
			// Unsupported kind "array" for field "Runners".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListSelfHostedRunnersInGroupForOrg) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("runners")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Runners {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteFloat64(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListSelfHostedRunnersInGroupForOrg json value to io.Writer.
func (s ActionsListSelfHostedRunnersInGroupForOrg) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListSelfHostedRunnersInGroupForOrg json value from io.Reader.
func (s *ActionsListSelfHostedRunnersInGroupForOrg) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListSelfHostedRunnersInGroupForOrg from json stream.
func (s *ActionsListSelfHostedRunnersInGroupForOrg) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "runners":
			// Unsupported kind "array" for field "Runners".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsListWorkflowRunArtifacts) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("artifacts")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Artifacts {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsListWorkflowRunArtifacts json value to io.Writer.
func (s ActionsListWorkflowRunArtifacts) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsListWorkflowRunArtifacts json value from io.Reader.
func (s *ActionsListWorkflowRunArtifacts) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsListWorkflowRunArtifacts from json stream.
func (s *ActionsListWorkflowRunArtifacts) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "artifacts":
			// Unsupported kind "array" for field "Artifacts".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsOrganizationPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedActions.Set {
		more.More()
		j.WriteObjectField("allowed_actions")
		s.AllowedActions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("enabled_repositories")
	s.EnabledRepositories.WriteJSON(j)

	// Unsupported kind "pointer" for field "selected_actions_url".

	if s.SelectedRepositoriesURL.Set {
		more.More()
		j.WriteObjectField("selected_repositories_url")
		s.SelectedRepositoriesURL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsOrganizationPermissions json value to io.Writer.
func (s ActionsOrganizationPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsOrganizationPermissions json value from io.Reader.
func (s *ActionsOrganizationPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsOrganizationPermissions from json stream.
func (s *ActionsOrganizationPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(i); err != nil {
				i.ReportError("Field AllowedActions", err.Error())
				return false
			}
			return true
		case "enabled_repositories":
			if err := s.EnabledRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field EnabledRepositories", err.Error())
				return false
			}
			return true
		case "selected_actions_url":
			// Unsupported kind "pointer" for field "SelectedActionsURL".
			i.Skip()
			return true
		case "selected_repositories_url":
			s.SelectedRepositoriesURL.Reset()
			if err := s.SelectedRepositoriesURL.ReadJSON(i); err != nil {
				i.ReportError("Field SelectedRepositoriesURL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsPublicKey) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CreatedAt.Set {
		more.More()
		j.WriteObjectField("created_at")
		s.CreatedAt.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	more.More()
	j.WriteObjectField("key_id")
	j.WriteString(s.KeyID)

	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsPublicKey json value to io.Writer.
func (s ActionsPublicKey) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsPublicKey json value from io.Reader.
func (s *ActionsPublicKey) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsPublicKey from json stream.
func (s *ActionsPublicKey) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(i); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "key_id":
			s.KeyID = i.ReadString()
			return i.Error == nil
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsRepositoryPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedActions.Set {
		more.More()
		j.WriteObjectField("allowed_actions")
		s.AllowedActions.WriteJSON(j)
	}

	// Unsupported kind "alias" for field "enabled".

	// Unsupported kind "pointer" for field "selected_actions_url".

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsRepositoryPermissions json value to io.Writer.
func (s ActionsRepositoryPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsRepositoryPermissions json value from io.Reader.
func (s *ActionsRepositoryPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsRepositoryPermissions from json stream.
func (s *ActionsRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(i); err != nil {
				i.ReportError("Field AllowedActions", err.Error())
				return false
			}
			return true
		case "enabled":
			// Unsupported kind "alias" for field "Enabled".
			i.Skip()
			return true
		case "selected_actions_url":
			// Unsupported kind "pointer" for field "SelectedActionsURL".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsReviewPendingDeploymentsForRunApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("comment")
	j.WriteString(s.Comment)

	more.More()
	j.WriteObjectField("environment_ids")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.EnvironmentIds {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsReviewPendingDeploymentsForRunApplicationJSONRequest json value to io.Writer.
func (s ActionsReviewPendingDeploymentsForRunApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsReviewPendingDeploymentsForRunApplicationJSONRequest json value from io.Reader.
func (s *ActionsReviewPendingDeploymentsForRunApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsReviewPendingDeploymentsForRunApplicationJSONRequest from json stream.
func (s *ActionsReviewPendingDeploymentsForRunApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "comment":
			s.Comment = i.ReadString()
			return i.Error == nil
		case "environment_ids":
			// Unsupported kind "array" for field "EnvironmentIds".
			i.Skip()
			return true
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsReviewPendingDeploymentsForRunApplicationJSONRequestState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ActionsReviewPendingDeploymentsForRunApplicationJSONRequestState from json stream.
func (s *ActionsReviewPendingDeploymentsForRunApplicationJSONRequestState) ReadJSON(i *json.Iterator) error {
	*s = ActionsReviewPendingDeploymentsForRunApplicationJSONRequestState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsSecret) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsSecret json value to io.Writer.
func (s ActionsSecret) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsSecret json value from io.Reader.
func (s *ActionsSecret) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsSecret from json stream.
func (s *ActionsSecret) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedActions.Set {
		more.More()
		j.WriteObjectField("allowed_actions")
		s.AllowedActions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("enabled_repositories")
	s.EnabledRepositories.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest json value to io.Writer.
func (s ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest json value from io.Reader.
func (s *ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest from json stream.
func (s *ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(i); err != nil {
				i.ReportError("Field AllowedActions", err.Error())
				return false
			}
			return true
		case "enabled_repositories":
			if err := s.EnabledRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field EnabledRepositories", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedActions.Set {
		more.More()
		j.WriteObjectField("allowed_actions")
		s.AllowedActions.WriteJSON(j)
	}

	// Unsupported kind "alias" for field "enabled".

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest json value to io.Writer.
func (s ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest json value from io.Reader.
func (s *ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest from json stream.
func (s *ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(i); err != nil {
				i.ReportError("Field AllowedActions", err.Error())
				return false
			}
			return true
		case "enabled":
			// Unsupported kind "alias" for field "Enabled".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("selected_repository_ids")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.SelectedRepositoryIds {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest json value to io.Writer.
func (s ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest json value from io.Reader.
func (s *ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest from json stream.
func (s *ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "selected_repository_ids":
			// Unsupported kind "array" for field "SelectedRepositoryIds".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetSelectedReposForOrgSecretApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("selected_repository_ids")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.SelectedRepositoryIds {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsSetSelectedReposForOrgSecretApplicationJSONRequest json value to io.Writer.
func (s ActionsSetSelectedReposForOrgSecretApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsSetSelectedReposForOrgSecretApplicationJSONRequest json value from io.Reader.
func (s *ActionsSetSelectedReposForOrgSecretApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsSetSelectedReposForOrgSecretApplicationJSONRequest from json stream.
func (s *ActionsSetSelectedReposForOrgSecretApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "selected_repository_ids":
			// Unsupported kind "array" for field "SelectedRepositoryIds".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("selected_repository_ids")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.SelectedRepositoryIds {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest json value to io.Writer.
func (s ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest json value from io.Reader.
func (s *ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest from json stream.
func (s *ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "selected_repository_ids":
			// Unsupported kind "array" for field "SelectedRepositoryIds".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("runners")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Runners {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest json value to io.Writer.
func (s ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest json value from io.Reader.
func (s *ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest from json stream.
func (s *ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "runners":
			// Unsupported kind "array" for field "Runners".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest json value to io.Writer.
func (s ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest json value from io.Reader.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest from json stream.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility from json stream.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	*s = ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkNotificationsAsReadAccepted) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActivityMarkNotificationsAsReadAccepted json value to io.Writer.
func (s ActivityMarkNotificationsAsReadAccepted) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActivityMarkNotificationsAsReadAccepted json value from io.Reader.
func (s *ActivityMarkNotificationsAsReadAccepted) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActivityMarkNotificationsAsReadAccepted from json stream.
func (s *ActivityMarkNotificationsAsReadAccepted) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkNotificationsAsReadApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastReadAt.Set {
		more.More()
		j.WriteObjectField("last_read_at")
		s.LastReadAt.WriteJSON(j, json.WriteDateTime)
	}

	if s.Read.Set {
		more.More()
		j.WriteObjectField("read")
		s.Read.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActivityMarkNotificationsAsReadApplicationJSONRequest json value to io.Writer.
func (s ActivityMarkNotificationsAsReadApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActivityMarkNotificationsAsReadApplicationJSONRequest json value from io.Reader.
func (s *ActivityMarkNotificationsAsReadApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActivityMarkNotificationsAsReadApplicationJSONRequest from json stream.
func (s *ActivityMarkNotificationsAsReadApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "last_read_at":
			s.LastReadAt.Reset()
			if err := s.LastReadAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field LastReadAt", err.Error())
				return false
			}
			return true
		case "read":
			s.Read.Reset()
			if err := s.Read.ReadJSON(i); err != nil {
				i.ReportError("Field Read", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkRepoNotificationsAsReadAccepted) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActivityMarkRepoNotificationsAsReadAccepted json value to io.Writer.
func (s ActivityMarkRepoNotificationsAsReadAccepted) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActivityMarkRepoNotificationsAsReadAccepted json value from io.Reader.
func (s *ActivityMarkRepoNotificationsAsReadAccepted) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActivityMarkRepoNotificationsAsReadAccepted from json stream.
func (s *ActivityMarkRepoNotificationsAsReadAccepted) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActivityMarkRepoNotificationsAsReadApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastReadAt.Set {
		more.More()
		j.WriteObjectField("last_read_at")
		s.LastReadAt.WriteJSON(j, json.WriteDateTime)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActivityMarkRepoNotificationsAsReadApplicationJSONRequest json value to io.Writer.
func (s ActivityMarkRepoNotificationsAsReadApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActivityMarkRepoNotificationsAsReadApplicationJSONRequest json value from io.Reader.
func (s *ActivityMarkRepoNotificationsAsReadApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActivityMarkRepoNotificationsAsReadApplicationJSONRequest from json stream.
func (s *ActivityMarkRepoNotificationsAsReadApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "last_read_at":
			s.LastReadAt.Reset()
			if err := s.LastReadAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field LastReadAt", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActivitySetRepoSubscriptionApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ignored.Set {
		more.More()
		j.WriteObjectField("ignored")
		s.Ignored.WriteJSON(j)
	}

	if s.Subscribed.Set {
		more.More()
		j.WriteObjectField("subscribed")
		s.Subscribed.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActivitySetRepoSubscriptionApplicationJSONRequest json value to io.Writer.
func (s ActivitySetRepoSubscriptionApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActivitySetRepoSubscriptionApplicationJSONRequest json value from io.Reader.
func (s *ActivitySetRepoSubscriptionApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActivitySetRepoSubscriptionApplicationJSONRequest from json stream.
func (s *ActivitySetRepoSubscriptionApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ignored":
			s.Ignored.Reset()
			if err := s.Ignored.ReadJSON(i); err != nil {
				i.ReportError("Field Ignored", err.Error())
				return false
			}
			return true
		case "subscribed":
			s.Subscribed.Reset()
			if err := s.Subscribed.ReadJSON(i); err != nil {
				i.ReportError("Field Subscribed", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ActivitySetThreadSubscriptionApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ignored.Set {
		more.More()
		j.WriteObjectField("ignored")
		s.Ignored.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ActivitySetThreadSubscriptionApplicationJSONRequest json value to io.Writer.
func (s ActivitySetThreadSubscriptionApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ActivitySetThreadSubscriptionApplicationJSONRequest json value from io.Reader.
func (s *ActivitySetThreadSubscriptionApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ActivitySetThreadSubscriptionApplicationJSONRequest from json stream.
func (s *ActivitySetThreadSubscriptionApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ignored":
			s.Ignored.Reset()
			if err := s.Ignored.ReadJSON(i); err != nil {
				i.ReportError("Field Ignored", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AllowedActions) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AllowedActions from json stream.
func (s *AllowedActions) ReadJSON(i *json.Iterator) error {
	*s = AllowedActions(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Actions.Set {
		more.More()
		j.WriteObjectField("actions")
		s.Actions.WriteJSON(j)
	}

	if s.Administration.Set {
		more.More()
		j.WriteObjectField("administration")
		s.Administration.WriteJSON(j)
	}

	if s.Checks.Set {
		more.More()
		j.WriteObjectField("checks")
		s.Checks.WriteJSON(j)
	}

	if s.ContentReferences.Set {
		more.More()
		j.WriteObjectField("content_references")
		s.ContentReferences.WriteJSON(j)
	}

	if s.Contents.Set {
		more.More()
		j.WriteObjectField("contents")
		s.Contents.WriteJSON(j)
	}

	if s.Deployments.Set {
		more.More()
		j.WriteObjectField("deployments")
		s.Deployments.WriteJSON(j)
	}

	if s.Environments.Set {
		more.More()
		j.WriteObjectField("environments")
		s.Environments.WriteJSON(j)
	}

	if s.Issues.Set {
		more.More()
		j.WriteObjectField("issues")
		s.Issues.WriteJSON(j)
	}

	if s.Members.Set {
		more.More()
		j.WriteObjectField("members")
		s.Members.WriteJSON(j)
	}

	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}

	if s.OrganizationAdministration.Set {
		more.More()
		j.WriteObjectField("organization_administration")
		s.OrganizationAdministration.WriteJSON(j)
	}

	if s.OrganizationHooks.Set {
		more.More()
		j.WriteObjectField("organization_hooks")
		s.OrganizationHooks.WriteJSON(j)
	}

	if s.OrganizationPackages.Set {
		more.More()
		j.WriteObjectField("organization_packages")
		s.OrganizationPackages.WriteJSON(j)
	}

	if s.OrganizationPlan.Set {
		more.More()
		j.WriteObjectField("organization_plan")
		s.OrganizationPlan.WriteJSON(j)
	}

	if s.OrganizationProjects.Set {
		more.More()
		j.WriteObjectField("organization_projects")
		s.OrganizationProjects.WriteJSON(j)
	}

	if s.OrganizationSecrets.Set {
		more.More()
		j.WriteObjectField("organization_secrets")
		s.OrganizationSecrets.WriteJSON(j)
	}

	if s.OrganizationSelfHostedRunners.Set {
		more.More()
		j.WriteObjectField("organization_self_hosted_runners")
		s.OrganizationSelfHostedRunners.WriteJSON(j)
	}

	if s.OrganizationUserBlocking.Set {
		more.More()
		j.WriteObjectField("organization_user_blocking")
		s.OrganizationUserBlocking.WriteJSON(j)
	}

	if s.Packages.Set {
		more.More()
		j.WriteObjectField("packages")
		s.Packages.WriteJSON(j)
	}

	if s.Pages.Set {
		more.More()
		j.WriteObjectField("pages")
		s.Pages.WriteJSON(j)
	}

	if s.PullRequests.Set {
		more.More()
		j.WriteObjectField("pull_requests")
		s.PullRequests.WriteJSON(j)
	}

	if s.RepositoryHooks.Set {
		more.More()
		j.WriteObjectField("repository_hooks")
		s.RepositoryHooks.WriteJSON(j)
	}

	if s.RepositoryProjects.Set {
		more.More()
		j.WriteObjectField("repository_projects")
		s.RepositoryProjects.WriteJSON(j)
	}

	if s.SecretScanningAlerts.Set {
		more.More()
		j.WriteObjectField("secret_scanning_alerts")
		s.SecretScanningAlerts.WriteJSON(j)
	}

	if s.Secrets.Set {
		more.More()
		j.WriteObjectField("secrets")
		s.Secrets.WriteJSON(j)
	}

	if s.SecurityEvents.Set {
		more.More()
		j.WriteObjectField("security_events")
		s.SecurityEvents.WriteJSON(j)
	}

	if s.SingleFile.Set {
		more.More()
		j.WriteObjectField("single_file")
		s.SingleFile.WriteJSON(j)
	}

	if s.Statuses.Set {
		more.More()
		j.WriteObjectField("statuses")
		s.Statuses.WriteJSON(j)
	}

	if s.TeamDiscussions.Set {
		more.More()
		j.WriteObjectField("team_discussions")
		s.TeamDiscussions.WriteJSON(j)
	}

	if s.VulnerabilityAlerts.Set {
		more.More()
		j.WriteObjectField("vulnerability_alerts")
		s.VulnerabilityAlerts.WriteJSON(j)
	}

	if s.Workflows.Set {
		more.More()
		j.WriteObjectField("workflows")
		s.Workflows.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes AppPermissions json value to io.Writer.
func (s AppPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AppPermissions json value from io.Reader.
func (s *AppPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AppPermissions from json stream.
func (s *AppPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "actions":
			s.Actions.Reset()
			if err := s.Actions.ReadJSON(i); err != nil {
				i.ReportError("Field Actions", err.Error())
				return false
			}
			return true
		case "administration":
			s.Administration.Reset()
			if err := s.Administration.ReadJSON(i); err != nil {
				i.ReportError("Field Administration", err.Error())
				return false
			}
			return true
		case "checks":
			s.Checks.Reset()
			if err := s.Checks.ReadJSON(i); err != nil {
				i.ReportError("Field Checks", err.Error())
				return false
			}
			return true
		case "content_references":
			s.ContentReferences.Reset()
			if err := s.ContentReferences.ReadJSON(i); err != nil {
				i.ReportError("Field ContentReferences", err.Error())
				return false
			}
			return true
		case "contents":
			s.Contents.Reset()
			if err := s.Contents.ReadJSON(i); err != nil {
				i.ReportError("Field Contents", err.Error())
				return false
			}
			return true
		case "deployments":
			s.Deployments.Reset()
			if err := s.Deployments.ReadJSON(i); err != nil {
				i.ReportError("Field Deployments", err.Error())
				return false
			}
			return true
		case "environments":
			s.Environments.Reset()
			if err := s.Environments.ReadJSON(i); err != nil {
				i.ReportError("Field Environments", err.Error())
				return false
			}
			return true
		case "issues":
			s.Issues.Reset()
			if err := s.Issues.ReadJSON(i); err != nil {
				i.ReportError("Field Issues", err.Error())
				return false
			}
			return true
		case "members":
			s.Members.Reset()
			if err := s.Members.ReadJSON(i); err != nil {
				i.ReportError("Field Members", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "organization_administration":
			s.OrganizationAdministration.Reset()
			if err := s.OrganizationAdministration.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationAdministration", err.Error())
				return false
			}
			return true
		case "organization_hooks":
			s.OrganizationHooks.Reset()
			if err := s.OrganizationHooks.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationHooks", err.Error())
				return false
			}
			return true
		case "organization_packages":
			s.OrganizationPackages.Reset()
			if err := s.OrganizationPackages.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationPackages", err.Error())
				return false
			}
			return true
		case "organization_plan":
			s.OrganizationPlan.Reset()
			if err := s.OrganizationPlan.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationPlan", err.Error())
				return false
			}
			return true
		case "organization_projects":
			s.OrganizationProjects.Reset()
			if err := s.OrganizationProjects.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationProjects", err.Error())
				return false
			}
			return true
		case "organization_secrets":
			s.OrganizationSecrets.Reset()
			if err := s.OrganizationSecrets.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationSecrets", err.Error())
				return false
			}
			return true
		case "organization_self_hosted_runners":
			s.OrganizationSelfHostedRunners.Reset()
			if err := s.OrganizationSelfHostedRunners.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationSelfHostedRunners", err.Error())
				return false
			}
			return true
		case "organization_user_blocking":
			s.OrganizationUserBlocking.Reset()
			if err := s.OrganizationUserBlocking.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationUserBlocking", err.Error())
				return false
			}
			return true
		case "packages":
			s.Packages.Reset()
			if err := s.Packages.ReadJSON(i); err != nil {
				i.ReportError("Field Packages", err.Error())
				return false
			}
			return true
		case "pages":
			s.Pages.Reset()
			if err := s.Pages.ReadJSON(i); err != nil {
				i.ReportError("Field Pages", err.Error())
				return false
			}
			return true
		case "pull_requests":
			s.PullRequests.Reset()
			if err := s.PullRequests.ReadJSON(i); err != nil {
				i.ReportError("Field PullRequests", err.Error())
				return false
			}
			return true
		case "repository_hooks":
			s.RepositoryHooks.Reset()
			if err := s.RepositoryHooks.ReadJSON(i); err != nil {
				i.ReportError("Field RepositoryHooks", err.Error())
				return false
			}
			return true
		case "repository_projects":
			s.RepositoryProjects.Reset()
			if err := s.RepositoryProjects.ReadJSON(i); err != nil {
				i.ReportError("Field RepositoryProjects", err.Error())
				return false
			}
			return true
		case "secret_scanning_alerts":
			s.SecretScanningAlerts.Reset()
			if err := s.SecretScanningAlerts.ReadJSON(i); err != nil {
				i.ReportError("Field SecretScanningAlerts", err.Error())
				return false
			}
			return true
		case "secrets":
			s.Secrets.Reset()
			if err := s.Secrets.ReadJSON(i); err != nil {
				i.ReportError("Field Secrets", err.Error())
				return false
			}
			return true
		case "security_events":
			s.SecurityEvents.Reset()
			if err := s.SecurityEvents.ReadJSON(i); err != nil {
				i.ReportError("Field SecurityEvents", err.Error())
				return false
			}
			return true
		case "single_file":
			s.SingleFile.Reset()
			if err := s.SingleFile.ReadJSON(i); err != nil {
				i.ReportError("Field SingleFile", err.Error())
				return false
			}
			return true
		case "statuses":
			s.Statuses.Reset()
			if err := s.Statuses.ReadJSON(i); err != nil {
				i.ReportError("Field Statuses", err.Error())
				return false
			}
			return true
		case "team_discussions":
			s.TeamDiscussions.Reset()
			if err := s.TeamDiscussions.ReadJSON(i); err != nil {
				i.ReportError("Field TeamDiscussions", err.Error())
				return false
			}
			return true
		case "vulnerability_alerts":
			s.VulnerabilityAlerts.Reset()
			if err := s.VulnerabilityAlerts.ReadJSON(i); err != nil {
				i.ReportError("Field VulnerabilityAlerts", err.Error())
				return false
			}
			return true
		case "workflows":
			s.Workflows.Reset()
			if err := s.Workflows.ReadJSON(i); err != nil {
				i.ReportError("Field Workflows", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsActions) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsActions from json stream.
func (s *AppPermissionsActions) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsActions(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsAdministration) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsAdministration from json stream.
func (s *AppPermissionsAdministration) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsAdministration(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsChecks) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsChecks from json stream.
func (s *AppPermissionsChecks) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsChecks(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsContentReferences) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsContentReferences from json stream.
func (s *AppPermissionsContentReferences) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsContentReferences(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsContents) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsContents from json stream.
func (s *AppPermissionsContents) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsContents(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsDeployments) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsDeployments from json stream.
func (s *AppPermissionsDeployments) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsDeployments(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsEnvironments) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsEnvironments from json stream.
func (s *AppPermissionsEnvironments) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsEnvironments(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsIssues) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsIssues from json stream.
func (s *AppPermissionsIssues) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsIssues(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsMembers) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsMembers from json stream.
func (s *AppPermissionsMembers) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsMembers(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsMetadata) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsMetadata from json stream.
func (s *AppPermissionsMetadata) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsMetadata(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationAdministration) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsOrganizationAdministration from json stream.
func (s *AppPermissionsOrganizationAdministration) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsOrganizationAdministration(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationHooks) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsOrganizationHooks from json stream.
func (s *AppPermissionsOrganizationHooks) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsOrganizationHooks(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationPackages) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsOrganizationPackages from json stream.
func (s *AppPermissionsOrganizationPackages) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsOrganizationPackages(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationPlan) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsOrganizationPlan from json stream.
func (s *AppPermissionsOrganizationPlan) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsOrganizationPlan(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationProjects) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsOrganizationProjects from json stream.
func (s *AppPermissionsOrganizationProjects) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsOrganizationProjects(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationSecrets) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsOrganizationSecrets from json stream.
func (s *AppPermissionsOrganizationSecrets) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsOrganizationSecrets(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationSelfHostedRunners) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsOrganizationSelfHostedRunners from json stream.
func (s *AppPermissionsOrganizationSelfHostedRunners) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsOrganizationSelfHostedRunners(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsOrganizationUserBlocking) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsOrganizationUserBlocking from json stream.
func (s *AppPermissionsOrganizationUserBlocking) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsOrganizationUserBlocking(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsPackages) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsPackages from json stream.
func (s *AppPermissionsPackages) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsPackages(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsPages) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsPages from json stream.
func (s *AppPermissionsPages) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsPages(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsPullRequests) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsPullRequests from json stream.
func (s *AppPermissionsPullRequests) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsPullRequests(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsRepositoryHooks) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsRepositoryHooks from json stream.
func (s *AppPermissionsRepositoryHooks) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsRepositoryHooks(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsRepositoryProjects) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsRepositoryProjects from json stream.
func (s *AppPermissionsRepositoryProjects) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsRepositoryProjects(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsSecretScanningAlerts) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsSecretScanningAlerts from json stream.
func (s *AppPermissionsSecretScanningAlerts) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsSecretScanningAlerts(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsSecrets) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsSecrets from json stream.
func (s *AppPermissionsSecrets) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsSecrets(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsSecurityEvents) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsSecurityEvents from json stream.
func (s *AppPermissionsSecurityEvents) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsSecurityEvents(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsSingleFile) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsSingleFile from json stream.
func (s *AppPermissionsSingleFile) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsSingleFile(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsStatuses) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsStatuses from json stream.
func (s *AppPermissionsStatuses) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsStatuses(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsTeamDiscussions) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsTeamDiscussions from json stream.
func (s *AppPermissionsTeamDiscussions) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsTeamDiscussions(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsVulnerabilityAlerts) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsVulnerabilityAlerts from json stream.
func (s *AppPermissionsVulnerabilityAlerts) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsVulnerabilityAlerts(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppPermissionsWorkflows) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AppPermissionsWorkflows from json stream.
func (s *AppPermissionsWorkflows) ReadJSON(i *json.Iterator) error {
	*s = AppPermissionsWorkflows(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ApplicationGrant) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("app")
	s.App.WriteJSON(j)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("scopes")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Scopes {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ApplicationGrant json value to io.Writer.
func (s ApplicationGrant) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ApplicationGrant json value from io.Reader.
func (s *ApplicationGrant) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ApplicationGrant from json stream.
func (s *ApplicationGrant) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "app":
			if err := s.App.ReadJSON(i); err != nil {
				i.ReportError("Field App", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "scopes":
			// Unsupported kind "array" for field "Scopes".
			i.Skip()
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ApplicationGrantApp) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("client_id")
	j.WriteString(s.ClientID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ApplicationGrantApp json value to io.Writer.
func (s ApplicationGrantApp) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ApplicationGrantApp json value from io.Reader.
func (s *ApplicationGrantApp) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ApplicationGrantApp from json stream.
func (s *ApplicationGrantApp) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "client_id":
			s.ClientID = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppsCheckTokenApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("access_token")
	j.WriteString(s.AccessToken)

	j.WriteObjectEnd()
}

// WriteJSONTo writes AppsCheckTokenApplicationJSONRequest json value to io.Writer.
func (s AppsCheckTokenApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AppsCheckTokenApplicationJSONRequest json value from io.Reader.
func (s *AppsCheckTokenApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AppsCheckTokenApplicationJSONRequest from json stream.
func (s *AppsCheckTokenApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "access_token":
			s.AccessToken = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppsCreateContentAttachmentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	j.WriteObjectEnd()
}

// WriteJSONTo writes AppsCreateContentAttachmentApplicationJSONRequest json value to io.Writer.
func (s AppsCreateContentAttachmentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AppsCreateContentAttachmentApplicationJSONRequest json value from io.Reader.
func (s *AppsCreateContentAttachmentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AppsCreateContentAttachmentApplicationJSONRequest from json stream.
func (s *AppsCreateContentAttachmentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppsCreateInstallationAccessTokenApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	if s.Repositories != nil {
		more.More()
		j.WriteObjectField("repositories")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Repositories {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.RepositoryIds != nil {
		more.More()
		j.WriteObjectField("repository_ids")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RepositoryIds {
			more.More()
			j.WriteInt(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes AppsCreateInstallationAccessTokenApplicationJSONRequest json value to io.Writer.
func (s AppsCreateInstallationAccessTokenApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AppsCreateInstallationAccessTokenApplicationJSONRequest json value from io.Reader.
func (s *AppsCreateInstallationAccessTokenApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AppsCreateInstallationAccessTokenApplicationJSONRequest from json stream.
func (s *AppsCreateInstallationAccessTokenApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		case "repository_ids":
			// Unsupported kind "array" for field "RepositoryIds".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppsDeleteAuthorizationApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("access_token")
	j.WriteString(s.AccessToken)

	j.WriteObjectEnd()
}

// WriteJSONTo writes AppsDeleteAuthorizationApplicationJSONRequest json value to io.Writer.
func (s AppsDeleteAuthorizationApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AppsDeleteAuthorizationApplicationJSONRequest json value from io.Reader.
func (s *AppsDeleteAuthorizationApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AppsDeleteAuthorizationApplicationJSONRequest from json stream.
func (s *AppsDeleteAuthorizationApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "access_token":
			s.AccessToken = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppsDeleteTokenApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("access_token")
	j.WriteString(s.AccessToken)

	j.WriteObjectEnd()
}

// WriteJSONTo writes AppsDeleteTokenApplicationJSONRequest json value to io.Writer.
func (s AppsDeleteTokenApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AppsDeleteTokenApplicationJSONRequest json value from io.Reader.
func (s *AppsDeleteTokenApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AppsDeleteTokenApplicationJSONRequest from json stream.
func (s *AppsDeleteTokenApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "access_token":
			s.AccessToken = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppsListInstallationReposForAuthenticatedUserOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("repositories")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.RepositorySelection.Set {
		more.More()
		j.WriteObjectField("repository_selection")
		s.RepositorySelection.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes AppsListInstallationReposForAuthenticatedUserOK json value to io.Writer.
func (s AppsListInstallationReposForAuthenticatedUserOK) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AppsListInstallationReposForAuthenticatedUserOK json value from io.Reader.
func (s *AppsListInstallationReposForAuthenticatedUserOK) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AppsListInstallationReposForAuthenticatedUserOK from json stream.
func (s *AppsListInstallationReposForAuthenticatedUserOK) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		case "repository_selection":
			s.RepositorySelection.Reset()
			if err := s.RepositorySelection.ReadJSON(i); err != nil {
				i.ReportError("Field RepositorySelection", err.Error())
				return false
			}
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppsListReposAccessibleToInstallationOK) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("repositories")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.RepositorySelection.Set {
		more.More()
		j.WriteObjectField("repository_selection")
		s.RepositorySelection.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes AppsListReposAccessibleToInstallationOK json value to io.Writer.
func (s AppsListReposAccessibleToInstallationOK) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AppsListReposAccessibleToInstallationOK json value from io.Reader.
func (s *AppsListReposAccessibleToInstallationOK) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AppsListReposAccessibleToInstallationOK from json stream.
func (s *AppsListReposAccessibleToInstallationOK) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		case "repository_selection":
			s.RepositorySelection.Reset()
			if err := s.RepositorySelection.ReadJSON(i); err != nil {
				i.ReportError("Field RepositorySelection", err.Error())
				return false
			}
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppsResetTokenApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("access_token")
	j.WriteString(s.AccessToken)

	j.WriteObjectEnd()
}

// WriteJSONTo writes AppsResetTokenApplicationJSONRequest json value to io.Writer.
func (s AppsResetTokenApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AppsResetTokenApplicationJSONRequest json value from io.Reader.
func (s *AppsResetTokenApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AppsResetTokenApplicationJSONRequest from json stream.
func (s *AppsResetTokenApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "access_token":
			s.AccessToken = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AppsScopeTokenApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("access_token")
	j.WriteString(s.AccessToken)

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	if s.Repositories != nil {
		more.More()
		j.WriteObjectField("repositories")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Repositories {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.RepositoryIds != nil {
		more.More()
		j.WriteObjectField("repository_ids")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RepositoryIds {
			more.More()
			j.WriteInt(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Target.Set {
		more.More()
		j.WriteObjectField("target")
		s.Target.WriteJSON(j)
	}

	if s.TargetID.Set {
		more.More()
		j.WriteObjectField("target_id")
		s.TargetID.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes AppsScopeTokenApplicationJSONRequest json value to io.Writer.
func (s AppsScopeTokenApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AppsScopeTokenApplicationJSONRequest json value from io.Reader.
func (s *AppsScopeTokenApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AppsScopeTokenApplicationJSONRequest from json stream.
func (s *AppsScopeTokenApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "access_token":
			s.AccessToken = i.ReadString()
			return i.Error == nil
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		case "repository_ids":
			// Unsupported kind "array" for field "RepositoryIds".
			i.Skip()
			return true
		case "target":
			s.Target.Reset()
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		case "target_id":
			s.TargetID.Reset()
			if err := s.TargetID.ReadJSON(i); err != nil {
				i.ReportError("Field TargetID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Artifact) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("archive_download_url")
	j.WriteString(s.ArchiveDownloadURL)

	more.More()
	j.WriteObjectField("created_at")
	s.CreatedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("expired")
	j.WriteBool(s.Expired)

	more.More()
	j.WriteObjectField("expires_at")
	s.ExpiresAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("size_in_bytes")
	j.WriteInt(s.SizeInBytes)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	s.UpdatedAt.WriteJSON(j, json.WriteDateTime)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Artifact json value to io.Writer.
func (s Artifact) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Artifact json value from io.Reader.
func (s *Artifact) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Artifact from json stream.
func (s *Artifact) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "archive_download_url":
			s.ArchiveDownloadURL = i.ReadString()
			return i.Error == nil
		case "created_at":
			if err := s.CreatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "expired":
			s.Expired = i.ReadBool()
			return i.Error == nil
		case "expires_at":
			if err := s.ExpiresAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field ExpiresAt", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "size_in_bytes":
			s.SizeInBytes = i.ReadInt()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AuthenticationToken) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("expires_at")
	json.WriteDateTime(j, s.ExpiresAt)

	// Unsupported kind "pointer" for field "permissions".

	if s.Repositories != nil {
		more.More()
		j.WriteObjectField("repositories")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Repositories {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.RepositorySelection.Set {
		more.More()
		j.WriteObjectField("repository_selection")
		s.RepositorySelection.WriteJSON(j)
	}

	if s.SingleFile.Set {
		more.More()
		j.WriteObjectField("single_file")
		s.SingleFile.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("token")
	j.WriteString(s.Token)

	j.WriteObjectEnd()
}

// WriteJSONTo writes AuthenticationToken json value to io.Writer.
func (s AuthenticationToken) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AuthenticationToken json value from io.Reader.
func (s *AuthenticationToken) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AuthenticationToken from json stream.
func (s *AuthenticationToken) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expires_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field ExpiresAt", err.Error())
				return false
			}
			s.ExpiresAt = v
			return true
		case "permissions":
			// Unsupported kind "pointer" for field "Permissions".
			i.Skip()
			return true
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		case "repository_selection":
			s.RepositorySelection.Reset()
			if err := s.RepositorySelection.ReadJSON(i); err != nil {
				i.ReportError("Field RepositorySelection", err.Error())
				return false
			}
			return true
		case "single_file":
			s.SingleFile.Reset()
			if err := s.SingleFile.ReadJSON(i); err != nil {
				i.ReportError("Field SingleFile", err.Error())
				return false
			}
			return true
		case "token":
			s.Token = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AuthenticationTokenRepositorySelection) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AuthenticationTokenRepositorySelection from json stream.
func (s *AuthenticationTokenRepositorySelection) ReadJSON(i *json.Iterator) error {
	*s = AuthenticationTokenRepositorySelection(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AuthorAssociation) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads AuthorAssociation from json stream.
func (s *AuthorAssociation) ReadJSON(i *json.Iterator) error {
	*s = AuthorAssociation(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Authorization) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("app")
	s.App.WriteJSON(j)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("expires_at")
	s.ExpiresAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("fingerprint")
	s.Fingerprint.WriteJSON(j)

	more.More()
	j.WriteObjectField("hashed_token")
	s.HashedToken.WriteJSON(j)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.Installation.Set {
		more.More()
		j.WriteObjectField("installation")
		s.Installation.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("note")
	s.Note.WriteJSON(j)

	more.More()
	j.WriteObjectField("note_url")
	s.NoteURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("scopes")
	if s.Scopes == nil {
		j.WriteNil()
	} else {
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Scopes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("token")
	j.WriteString(s.Token)

	more.More()
	j.WriteObjectField("token_last_eight")
	s.TokenLastEight.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes Authorization json value to io.Writer.
func (s Authorization) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Authorization json value from io.Reader.
func (s *Authorization) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Authorization from json stream.
func (s *Authorization) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "app":
			if err := s.App.ReadJSON(i); err != nil {
				i.ReportError("Field App", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "expires_at":
			if err := s.ExpiresAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field ExpiresAt", err.Error())
				return false
			}
			return true
		case "fingerprint":
			if err := s.Fingerprint.ReadJSON(i); err != nil {
				i.ReportError("Field Fingerprint", err.Error())
				return false
			}
			return true
		case "hashed_token":
			if err := s.HashedToken.ReadJSON(i); err != nil {
				i.ReportError("Field HashedToken", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "installation":
			s.Installation.Reset()
			if err := s.Installation.ReadJSON(i); err != nil {
				i.ReportError("Field Installation", err.Error())
				return false
			}
			return true
		case "note":
			if err := s.Note.ReadJSON(i); err != nil {
				i.ReportError("Field Note", err.Error())
				return false
			}
			return true
		case "note_url":
			if err := s.NoteURL.ReadJSON(i); err != nil {
				i.ReportError("Field NoteURL", err.Error())
				return false
			}
			return true
		case "scopes":
			// Unsupported kind "array" for field "Scopes".
			i.Skip()
			return true
		case "token":
			s.Token = i.ReadString()
			return i.Error == nil
		case "token_last_eight":
			if err := s.TokenLastEight.ReadJSON(i); err != nil {
				i.ReportError("Field TokenLastEight", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AuthorizationApp) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("client_id")
	j.WriteString(s.ClientID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes AuthorizationApp json value to io.Writer.
func (s AuthorizationApp) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AuthorizationApp json value from io.Reader.
func (s *AuthorizationApp) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AuthorizationApp from json stream.
func (s *AuthorizationApp) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "client_id":
			s.ClientID = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Autolink) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("key_prefix")
	j.WriteString(s.KeyPrefix)

	more.More()
	j.WriteObjectField("url_template")
	j.WriteString(s.URLTemplate)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Autolink json value to io.Writer.
func (s Autolink) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Autolink json value from io.Reader.
func (s *Autolink) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Autolink from json stream.
func (s *Autolink) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "key_prefix":
			s.KeyPrefix = i.ReadString()
			return i.Error == nil
		case "url_template":
			s.URLTemplate = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BaseGist) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("comments")
	j.WriteInt(s.Comments)

	more.More()
	j.WriteObjectField("comments_url")
	json.WriteURI(j, s.CommentsURL)

	more.More()
	j.WriteObjectField("commits_url")
	json.WriteURI(j, s.CommitsURL)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	// Unsupported kind "primitive" for field "files".

	if s.Forks != nil {
		more.More()
		j.WriteObjectField("forks")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Forks {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("forks_url")
	json.WriteURI(j, s.ForksURL)

	more.More()
	j.WriteObjectField("git_pull_url")
	json.WriteURI(j, s.GitPullURL)

	more.More()
	j.WriteObjectField("git_push_url")
	json.WriteURI(j, s.GitPushURL)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	if s.History != nil {
		more.More()
		j.WriteObjectField("history")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.History {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	if s.Owner.Set {
		more.More()
		j.WriteObjectField("owner")
		s.Owner.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("public")
	j.WriteBool(s.Public)

	if s.Truncated.Set {
		more.More()
		j.WriteObjectField("truncated")
		s.Truncated.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes BaseGist json value to io.Writer.
func (s BaseGist) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BaseGist json value from io.Reader.
func (s *BaseGist) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BaseGist from json stream.
func (s *BaseGist) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "comments":
			s.Comments = i.ReadInt()
			return i.Error == nil
		case "comments_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field CommentsURL", err.Error())
				return false
			}
			s.CommentsURL = v
			return true
		case "commits_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field CommitsURL", err.Error())
				return false
			}
			s.CommitsURL = v
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "files":
			// Unsupported kind "primitive" for field "Files".
			i.Skip()
			return true
		case "forks":
			// Unsupported kind "array" for field "Forks".
			i.Skip()
			return true
		case "forks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ForksURL", err.Error())
				return false
			}
			s.ForksURL = v
			return true
		case "git_pull_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field GitPullURL", err.Error())
				return false
			}
			s.GitPullURL = v
			return true
		case "git_push_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field GitPushURL", err.Error())
				return false
			}
			s.GitPushURL = v
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "history":
			// Unsupported kind "array" for field "History".
			i.Skip()
			return true
		case "id":
			s.ID = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "public":
			s.Public = i.ReadBool()
			return i.Error == nil
		case "truncated":
			s.Truncated.Reset()
			if err := s.Truncated.ReadJSON(i); err != nil {
				i.ReportError("Field Truncated", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BasicError) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BasicError json value to io.Writer.
func (s BasicError) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BasicError json value from io.Reader.
func (s *BasicError) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BasicError from json stream.
func (s *BasicError) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Blob) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	j.WriteString(s.Content)

	more.More()
	j.WriteObjectField("encoding")
	j.WriteString(s.Encoding)

	if s.HighlightedContent.Set {
		more.More()
		j.WriteObjectField("highlighted_content")
		s.HighlightedContent.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("size")
	s.Size.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Blob json value to io.Writer.
func (s Blob) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Blob json value from io.Reader.
func (s *Blob) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Blob from json stream.
func (s *Blob) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			s.Content = i.ReadString()
			return i.Error == nil
		case "encoding":
			s.Encoding = i.ReadString()
			return i.Error == nil
		case "highlighted_content":
			s.HighlightedContent.Reset()
			if err := s.HighlightedContent.ReadJSON(i); err != nil {
				i.ReportError("Field HighlightedContent", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "size":
			if err := s.Size.ReadJSON(i); err != nil {
				i.ReportError("Field Size", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchProtection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowDeletions.Set {
		more.More()
		j.WriteObjectField("allow_deletions")
		s.AllowDeletions.WriteJSON(j)
	}

	if s.AllowForcePushes.Set {
		more.More()
		j.WriteObjectField("allow_force_pushes")
		s.AllowForcePushes.WriteJSON(j)
	}

	if s.Enabled.Set {
		more.More()
		j.WriteObjectField("enabled")
		s.Enabled.WriteJSON(j)
	}

	if s.EnforceAdmins.Set {
		more.More()
		j.WriteObjectField("enforce_admins")
		s.EnforceAdmins.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.ProtectionURL.Set {
		more.More()
		j.WriteObjectField("protection_url")
		s.ProtectionURL.WriteJSON(j)
	}

	if s.RequiredConversationResolution.Set {
		more.More()
		j.WriteObjectField("required_conversation_resolution")
		s.RequiredConversationResolution.WriteJSON(j)
	}

	if s.RequiredLinearHistory.Set {
		more.More()
		j.WriteObjectField("required_linear_history")
		s.RequiredLinearHistory.WriteJSON(j)
	}

	if s.RequiredPullRequestReviews.Set {
		more.More()
		j.WriteObjectField("required_pull_request_reviews")
		s.RequiredPullRequestReviews.WriteJSON(j)
	}

	if s.RequiredSignatures.Set {
		more.More()
		j.WriteObjectField("required_signatures")
		s.RequiredSignatures.WriteJSON(j)
	}

	if s.RequiredStatusChecks.Set {
		more.More()
		j.WriteObjectField("required_status_checks")
		s.RequiredStatusChecks.WriteJSON(j)
	}

	if s.Restrictions.Set {
		more.More()
		j.WriteObjectField("restrictions")
		s.Restrictions.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchProtection json value to io.Writer.
func (s BranchProtection) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchProtection json value from io.Reader.
func (s *BranchProtection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchProtection from json stream.
func (s *BranchProtection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_deletions":
			s.AllowDeletions.Reset()
			if err := s.AllowDeletions.ReadJSON(i); err != nil {
				i.ReportError("Field AllowDeletions", err.Error())
				return false
			}
			return true
		case "allow_force_pushes":
			s.AllowForcePushes.Reset()
			if err := s.AllowForcePushes.ReadJSON(i); err != nil {
				i.ReportError("Field AllowForcePushes", err.Error())
				return false
			}
			return true
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(i); err != nil {
				i.ReportError("Field Enabled", err.Error())
				return false
			}
			return true
		case "enforce_admins":
			s.EnforceAdmins.Reset()
			if err := s.EnforceAdmins.ReadJSON(i); err != nil {
				i.ReportError("Field EnforceAdmins", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "protection_url":
			s.ProtectionURL.Reset()
			if err := s.ProtectionURL.ReadJSON(i); err != nil {
				i.ReportError("Field ProtectionURL", err.Error())
				return false
			}
			return true
		case "required_conversation_resolution":
			s.RequiredConversationResolution.Reset()
			if err := s.RequiredConversationResolution.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredConversationResolution", err.Error())
				return false
			}
			return true
		case "required_linear_history":
			s.RequiredLinearHistory.Reset()
			if err := s.RequiredLinearHistory.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredLinearHistory", err.Error())
				return false
			}
			return true
		case "required_pull_request_reviews":
			s.RequiredPullRequestReviews.Reset()
			if err := s.RequiredPullRequestReviews.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredPullRequestReviews", err.Error())
				return false
			}
			return true
		case "required_signatures":
			s.RequiredSignatures.Reset()
			if err := s.RequiredSignatures.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredSignatures", err.Error())
				return false
			}
			return true
		case "required_status_checks":
			s.RequiredStatusChecks.Reset()
			if err := s.RequiredStatusChecks.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredStatusChecks", err.Error())
				return false
			}
			return true
		case "restrictions":
			s.Restrictions.Reset()
			if err := s.Restrictions.ReadJSON(i); err != nil {
				i.ReportError("Field Restrictions", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionAllowDeletions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Enabled.Set {
		more.More()
		j.WriteObjectField("enabled")
		s.Enabled.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchProtectionAllowDeletions json value to io.Writer.
func (s BranchProtectionAllowDeletions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchProtectionAllowDeletions json value from io.Reader.
func (s *BranchProtectionAllowDeletions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchProtectionAllowDeletions from json stream.
func (s *BranchProtectionAllowDeletions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(i); err != nil {
				i.ReportError("Field Enabled", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionAllowForcePushes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Enabled.Set {
		more.More()
		j.WriteObjectField("enabled")
		s.Enabled.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchProtectionAllowForcePushes json value to io.Writer.
func (s BranchProtectionAllowForcePushes) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchProtectionAllowForcePushes json value from io.Reader.
func (s *BranchProtectionAllowForcePushes) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchProtectionAllowForcePushes from json stream.
func (s *BranchProtectionAllowForcePushes) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(i); err != nil {
				i.ReportError("Field Enabled", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionRequiredConversationResolution) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Enabled.Set {
		more.More()
		j.WriteObjectField("enabled")
		s.Enabled.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchProtectionRequiredConversationResolution json value to io.Writer.
func (s BranchProtectionRequiredConversationResolution) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchProtectionRequiredConversationResolution json value from io.Reader.
func (s *BranchProtectionRequiredConversationResolution) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchProtectionRequiredConversationResolution from json stream.
func (s *BranchProtectionRequiredConversationResolution) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(i); err != nil {
				i.ReportError("Field Enabled", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionRequiredLinearHistory) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Enabled.Set {
		more.More()
		j.WriteObjectField("enabled")
		s.Enabled.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchProtectionRequiredLinearHistory json value to io.Writer.
func (s BranchProtectionRequiredLinearHistory) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchProtectionRequiredLinearHistory json value from io.Reader.
func (s *BranchProtectionRequiredLinearHistory) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchProtectionRequiredLinearHistory from json stream.
func (s *BranchProtectionRequiredLinearHistory) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(i); err != nil {
				i.ReportError("Field Enabled", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionRequiredSignatures) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("enabled")
	j.WriteBool(s.Enabled)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchProtectionRequiredSignatures json value to io.Writer.
func (s BranchProtectionRequiredSignatures) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchProtectionRequiredSignatures json value from io.Reader.
func (s *BranchProtectionRequiredSignatures) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchProtectionRequiredSignatures from json stream.
func (s *BranchProtectionRequiredSignatures) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled = i.ReadBool()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchProtectionRequiredStatusChecks) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("contexts")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Contexts {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.ContextsURL.Set {
		more.More()
		j.WriteObjectField("contexts_url")
		s.ContextsURL.WriteJSON(j)
	}

	if s.EnforcementLevel.Set {
		more.More()
		j.WriteObjectField("enforcement_level")
		s.EnforcementLevel.WriteJSON(j)
	}

	if s.Strict.Set {
		more.More()
		j.WriteObjectField("strict")
		s.Strict.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchProtectionRequiredStatusChecks json value to io.Writer.
func (s BranchProtectionRequiredStatusChecks) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchProtectionRequiredStatusChecks json value from io.Reader.
func (s *BranchProtectionRequiredStatusChecks) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchProtectionRequiredStatusChecks from json stream.
func (s *BranchProtectionRequiredStatusChecks) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "contexts":
			// Unsupported kind "array" for field "Contexts".
			i.Skip()
			return true
		case "contexts_url":
			s.ContextsURL.Reset()
			if err := s.ContextsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ContextsURL", err.Error())
				return false
			}
			return true
		case "enforcement_level":
			s.EnforcementLevel.Reset()
			if err := s.EnforcementLevel.ReadJSON(i); err != nil {
				i.ReportError("Field EnforcementLevel", err.Error())
				return false
			}
			return true
		case "strict":
			s.Strict.Reset()
			if err := s.Strict.ReadJSON(i); err != nil {
				i.ReportError("Field Strict", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apps")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Apps {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("apps_url")
	json.WriteURI(j, s.AppsURL)

	more.More()
	j.WriteObjectField("teams")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Teams {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("teams_url")
	json.WriteURI(j, s.TeamsURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("users")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Users {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("users_url")
	json.WriteURI(j, s.UsersURL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchRestrictionPolicy json value to io.Writer.
func (s BranchRestrictionPolicy) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchRestrictionPolicy json value from io.Reader.
func (s *BranchRestrictionPolicy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchRestrictionPolicy from json stream.
func (s *BranchRestrictionPolicy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apps":
			// Unsupported kind "array" for field "Apps".
			i.Skip()
			return true
		case "apps_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field AppsURL", err.Error())
				return false
			}
			s.AppsURL = v
			return true
		case "teams":
			// Unsupported kind "array" for field "Teams".
			i.Skip()
			return true
		case "teams_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TeamsURL", err.Error())
				return false
			}
			s.TeamsURL = v
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "users":
			// Unsupported kind "array" for field "Users".
			i.Skip()
			return true
		case "users_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field UsersURL", err.Error())
				return false
			}
			s.UsersURL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicyAppsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CreatedAt.Set {
		more.More()
		j.WriteObjectField("created_at")
		s.CreatedAt.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.Events != nil {
		more.More()
		j.WriteObjectField("events")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Events {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.ExternalURL.Set {
		more.More()
		j.WriteObjectField("external_url")
		s.ExternalURL.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.Owner.Set {
		more.More()
		j.WriteObjectField("owner")
		s.Owner.WriteJSON(j)
	}

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	if s.Slug.Set {
		more.More()
		j.WriteObjectField("slug")
		s.Slug.WriteJSON(j)
	}

	if s.UpdatedAt.Set {
		more.More()
		j.WriteObjectField("updated_at")
		s.UpdatedAt.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchRestrictionPolicyAppsItem json value to io.Writer.
func (s BranchRestrictionPolicyAppsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchRestrictionPolicyAppsItem json value from io.Reader.
func (s *BranchRestrictionPolicyAppsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchRestrictionPolicyAppsItem from json stream.
func (s *BranchRestrictionPolicyAppsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(i); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "events":
			// Unsupported kind "array" for field "Events".
			i.Skip()
			return true
		case "external_url":
			s.ExternalURL.Reset()
			if err := s.ExternalURL.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalURL", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "slug":
			s.Slug.Reset()
			if err := s.Slug.ReadJSON(i); err != nil {
				i.ReportError("Field Slug", err.Error())
				return false
			}
			return true
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(i); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicyAppsItemOwner) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvatarURL.Set {
		more.More()
		j.WriteObjectField("avatar_url")
		s.AvatarURL.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.EventsURL.Set {
		more.More()
		j.WriteObjectField("events_url")
		s.EventsURL.WriteJSON(j)
	}

	if s.FollowersURL.Set {
		more.More()
		j.WriteObjectField("followers_url")
		s.FollowersURL.WriteJSON(j)
	}

	if s.FollowingURL.Set {
		more.More()
		j.WriteObjectField("following_url")
		s.FollowingURL.WriteJSON(j)
	}

	if s.GistsURL.Set {
		more.More()
		j.WriteObjectField("gists_url")
		s.GistsURL.WriteJSON(j)
	}

	if s.GravatarID.Set {
		more.More()
		j.WriteObjectField("gravatar_id")
		s.GravatarID.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.HooksURL.Set {
		more.More()
		j.WriteObjectField("hooks_url")
		s.HooksURL.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.IssuesURL.Set {
		more.More()
		j.WriteObjectField("issues_url")
		s.IssuesURL.WriteJSON(j)
	}

	if s.Login.Set {
		more.More()
		j.WriteObjectField("login")
		s.Login.WriteJSON(j)
	}

	if s.MembersURL.Set {
		more.More()
		j.WriteObjectField("members_url")
		s.MembersURL.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.OrganizationsURL.Set {
		more.More()
		j.WriteObjectField("organizations_url")
		s.OrganizationsURL.WriteJSON(j)
	}

	if s.PublicMembersURL.Set {
		more.More()
		j.WriteObjectField("public_members_url")
		s.PublicMembersURL.WriteJSON(j)
	}

	if s.ReceivedEventsURL.Set {
		more.More()
		j.WriteObjectField("received_events_url")
		s.ReceivedEventsURL.WriteJSON(j)
	}

	if s.ReposURL.Set {
		more.More()
		j.WriteObjectField("repos_url")
		s.ReposURL.WriteJSON(j)
	}

	if s.SiteAdmin.Set {
		more.More()
		j.WriteObjectField("site_admin")
		s.SiteAdmin.WriteJSON(j)
	}

	if s.StarredURL.Set {
		more.More()
		j.WriteObjectField("starred_url")
		s.StarredURL.WriteJSON(j)
	}

	if s.SubscriptionsURL.Set {
		more.More()
		j.WriteObjectField("subscriptions_url")
		s.SubscriptionsURL.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchRestrictionPolicyAppsItemOwner json value to io.Writer.
func (s BranchRestrictionPolicyAppsItemOwner) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchRestrictionPolicyAppsItemOwner json value from io.Reader.
func (s *BranchRestrictionPolicyAppsItemOwner) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchRestrictionPolicyAppsItemOwner from json stream.
func (s *BranchRestrictionPolicyAppsItemOwner) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			s.AvatarURL.Reset()
			if err := s.AvatarURL.ReadJSON(i); err != nil {
				i.ReportError("Field AvatarURL", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			return true
		case "followers_url":
			s.FollowersURL.Reset()
			if err := s.FollowersURL.ReadJSON(i); err != nil {
				i.ReportError("Field FollowersURL", err.Error())
				return false
			}
			return true
		case "following_url":
			s.FollowingURL.Reset()
			if err := s.FollowingURL.ReadJSON(i); err != nil {
				i.ReportError("Field FollowingURL", err.Error())
				return false
			}
			return true
		case "gists_url":
			s.GistsURL.Reset()
			if err := s.GistsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GistsURL", err.Error())
				return false
			}
			return true
		case "gravatar_id":
			s.GravatarID.Reset()
			if err := s.GravatarID.ReadJSON(i); err != nil {
				i.ReportError("Field GravatarID", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "hooks_url":
			s.HooksURL.Reset()
			if err := s.HooksURL.ReadJSON(i); err != nil {
				i.ReportError("Field HooksURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "issues_url":
			s.IssuesURL.Reset()
			if err := s.IssuesURL.ReadJSON(i); err != nil {
				i.ReportError("Field IssuesURL", err.Error())
				return false
			}
			return true
		case "login":
			s.Login.Reset()
			if err := s.Login.ReadJSON(i); err != nil {
				i.ReportError("Field Login", err.Error())
				return false
			}
			return true
		case "members_url":
			s.MembersURL.Reset()
			if err := s.MembersURL.ReadJSON(i); err != nil {
				i.ReportError("Field MembersURL", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "organizations_url":
			s.OrganizationsURL.Reset()
			if err := s.OrganizationsURL.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationsURL", err.Error())
				return false
			}
			return true
		case "public_members_url":
			s.PublicMembersURL.Reset()
			if err := s.PublicMembersURL.ReadJSON(i); err != nil {
				i.ReportError("Field PublicMembersURL", err.Error())
				return false
			}
			return true
		case "received_events_url":
			s.ReceivedEventsURL.Reset()
			if err := s.ReceivedEventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReceivedEventsURL", err.Error())
				return false
			}
			return true
		case "repos_url":
			s.ReposURL.Reset()
			if err := s.ReposURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReposURL", err.Error())
				return false
			}
			return true
		case "site_admin":
			s.SiteAdmin.Reset()
			if err := s.SiteAdmin.ReadJSON(i); err != nil {
				i.ReportError("Field SiteAdmin", err.Error())
				return false
			}
			return true
		case "starred_url":
			s.StarredURL.Reset()
			if err := s.StarredURL.ReadJSON(i); err != nil {
				i.ReportError("Field StarredURL", err.Error())
				return false
			}
			return true
		case "subscriptions_url":
			s.SubscriptionsURL.Reset()
			if err := s.SubscriptionsURL.ReadJSON(i); err != nil {
				i.ReportError("Field SubscriptionsURL", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicyAppsItemPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Contents.Set {
		more.More()
		j.WriteObjectField("contents")
		s.Contents.WriteJSON(j)
	}

	if s.Issues.Set {
		more.More()
		j.WriteObjectField("issues")
		s.Issues.WriteJSON(j)
	}

	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}

	if s.SingleFile.Set {
		more.More()
		j.WriteObjectField("single_file")
		s.SingleFile.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchRestrictionPolicyAppsItemPermissions json value to io.Writer.
func (s BranchRestrictionPolicyAppsItemPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchRestrictionPolicyAppsItemPermissions json value from io.Reader.
func (s *BranchRestrictionPolicyAppsItemPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchRestrictionPolicyAppsItemPermissions from json stream.
func (s *BranchRestrictionPolicyAppsItemPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "contents":
			s.Contents.Reset()
			if err := s.Contents.ReadJSON(i); err != nil {
				i.ReportError("Field Contents", err.Error())
				return false
			}
			return true
		case "issues":
			s.Issues.Reset()
			if err := s.Issues.ReadJSON(i); err != nil {
				i.ReportError("Field Issues", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "single_file":
			s.SingleFile.Reset()
			if err := s.SingleFile.ReadJSON(i); err != nil {
				i.ReportError("Field SingleFile", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicyTeamsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.MembersURL.Set {
		more.More()
		j.WriteObjectField("members_url")
		s.MembersURL.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.Parent.Set {
		more.More()
		j.WriteObjectField("parent")
		s.Parent.WriteJSON(j)
	}

	if s.Permission.Set {
		more.More()
		j.WriteObjectField("permission")
		s.Permission.WriteJSON(j)
	}

	if s.Privacy.Set {
		more.More()
		j.WriteObjectField("privacy")
		s.Privacy.WriteJSON(j)
	}

	if s.RepositoriesURL.Set {
		more.More()
		j.WriteObjectField("repositories_url")
		s.RepositoriesURL.WriteJSON(j)
	}

	if s.Slug.Set {
		more.More()
		j.WriteObjectField("slug")
		s.Slug.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchRestrictionPolicyTeamsItem json value to io.Writer.
func (s BranchRestrictionPolicyTeamsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchRestrictionPolicyTeamsItem json value from io.Reader.
func (s *BranchRestrictionPolicyTeamsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchRestrictionPolicyTeamsItem from json stream.
func (s *BranchRestrictionPolicyTeamsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "members_url":
			s.MembersURL.Reset()
			if err := s.MembersURL.ReadJSON(i); err != nil {
				i.ReportError("Field MembersURL", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "parent":
			s.Parent.Reset()
			if err := s.Parent.ReadJSON(i); err != nil {
				i.ReportError("Field Parent", err.Error())
				return false
			}
			return true
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(i); err != nil {
				i.ReportError("Field Permission", err.Error())
				return false
			}
			return true
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(i); err != nil {
				i.ReportError("Field Privacy", err.Error())
				return false
			}
			return true
		case "repositories_url":
			s.RepositoriesURL.Reset()
			if err := s.RepositoriesURL.ReadJSON(i); err != nil {
				i.ReportError("Field RepositoriesURL", err.Error())
				return false
			}
			return true
		case "slug":
			s.Slug.Reset()
			if err := s.Slug.ReadJSON(i); err != nil {
				i.ReportError("Field Slug", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchRestrictionPolicyUsersItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvatarURL.Set {
		more.More()
		j.WriteObjectField("avatar_url")
		s.AvatarURL.WriteJSON(j)
	}

	if s.EventsURL.Set {
		more.More()
		j.WriteObjectField("events_url")
		s.EventsURL.WriteJSON(j)
	}

	if s.FollowersURL.Set {
		more.More()
		j.WriteObjectField("followers_url")
		s.FollowersURL.WriteJSON(j)
	}

	if s.FollowingURL.Set {
		more.More()
		j.WriteObjectField("following_url")
		s.FollowingURL.WriteJSON(j)
	}

	if s.GistsURL.Set {
		more.More()
		j.WriteObjectField("gists_url")
		s.GistsURL.WriteJSON(j)
	}

	if s.GravatarID.Set {
		more.More()
		j.WriteObjectField("gravatar_id")
		s.GravatarID.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.Login.Set {
		more.More()
		j.WriteObjectField("login")
		s.Login.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.OrganizationsURL.Set {
		more.More()
		j.WriteObjectField("organizations_url")
		s.OrganizationsURL.WriteJSON(j)
	}

	if s.ReceivedEventsURL.Set {
		more.More()
		j.WriteObjectField("received_events_url")
		s.ReceivedEventsURL.WriteJSON(j)
	}

	if s.ReposURL.Set {
		more.More()
		j.WriteObjectField("repos_url")
		s.ReposURL.WriteJSON(j)
	}

	if s.SiteAdmin.Set {
		more.More()
		j.WriteObjectField("site_admin")
		s.SiteAdmin.WriteJSON(j)
	}

	if s.StarredURL.Set {
		more.More()
		j.WriteObjectField("starred_url")
		s.StarredURL.WriteJSON(j)
	}

	if s.SubscriptionsURL.Set {
		more.More()
		j.WriteObjectField("subscriptions_url")
		s.SubscriptionsURL.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchRestrictionPolicyUsersItem json value to io.Writer.
func (s BranchRestrictionPolicyUsersItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchRestrictionPolicyUsersItem json value from io.Reader.
func (s *BranchRestrictionPolicyUsersItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchRestrictionPolicyUsersItem from json stream.
func (s *BranchRestrictionPolicyUsersItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			s.AvatarURL.Reset()
			if err := s.AvatarURL.ReadJSON(i); err != nil {
				i.ReportError("Field AvatarURL", err.Error())
				return false
			}
			return true
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			return true
		case "followers_url":
			s.FollowersURL.Reset()
			if err := s.FollowersURL.ReadJSON(i); err != nil {
				i.ReportError("Field FollowersURL", err.Error())
				return false
			}
			return true
		case "following_url":
			s.FollowingURL.Reset()
			if err := s.FollowingURL.ReadJSON(i); err != nil {
				i.ReportError("Field FollowingURL", err.Error())
				return false
			}
			return true
		case "gists_url":
			s.GistsURL.Reset()
			if err := s.GistsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GistsURL", err.Error())
				return false
			}
			return true
		case "gravatar_id":
			s.GravatarID.Reset()
			if err := s.GravatarID.ReadJSON(i); err != nil {
				i.ReportError("Field GravatarID", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "login":
			s.Login.Reset()
			if err := s.Login.ReadJSON(i); err != nil {
				i.ReportError("Field Login", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "organizations_url":
			s.OrganizationsURL.Reset()
			if err := s.OrganizationsURL.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationsURL", err.Error())
				return false
			}
			return true
		case "received_events_url":
			s.ReceivedEventsURL.Reset()
			if err := s.ReceivedEventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReceivedEventsURL", err.Error())
				return false
			}
			return true
		case "repos_url":
			s.ReposURL.Reset()
			if err := s.ReposURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReposURL", err.Error())
				return false
			}
			return true
		case "site_admin":
			s.SiteAdmin.Reset()
			if err := s.SiteAdmin.ReadJSON(i); err != nil {
				i.ReportError("Field SiteAdmin", err.Error())
				return false
			}
			return true
		case "starred_url":
			s.StarredURL.Reset()
			if err := s.StarredURL.ReadJSON(i); err != nil {
				i.ReportError("Field StarredURL", err.Error())
				return false
			}
			return true
		case "subscriptions_url":
			s.SubscriptionsURL.Reset()
			if err := s.SubscriptionsURL.ReadJSON(i); err != nil {
				i.ReportError("Field SubscriptionsURL", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchShort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("commit")
	s.Commit.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("protected")
	j.WriteBool(s.Protected)

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchShort json value to io.Writer.
func (s BranchShort) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchShort json value from io.Reader.
func (s *BranchShort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchShort from json stream.
func (s *BranchShort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commit":
			if err := s.Commit.ReadJSON(i); err != nil {
				i.ReportError("Field Commit", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "protected":
			s.Protected = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchShortCommit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchShortCommit json value to io.Writer.
func (s BranchShortCommit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchShortCommit json value from io.Reader.
func (s *BranchShortCommit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchShortCommit from json stream.
func (s *BranchShortCommit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchWithProtection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("commit")
	s.Commit.WriteJSON(j)

	more.More()
	j.WriteObjectField("_links")
	s.Links.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.Pattern.Set {
		more.More()
		j.WriteObjectField("pattern")
		s.Pattern.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("protected")
	j.WriteBool(s.Protected)

	more.More()
	j.WriteObjectField("protection")
	s.Protection.WriteJSON(j)

	more.More()
	j.WriteObjectField("protection_url")
	json.WriteURI(j, s.ProtectionURL)

	if s.RequiredApprovingReviewCount.Set {
		more.More()
		j.WriteObjectField("required_approving_review_count")
		s.RequiredApprovingReviewCount.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchWithProtection json value to io.Writer.
func (s BranchWithProtection) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchWithProtection json value from io.Reader.
func (s *BranchWithProtection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchWithProtection from json stream.
func (s *BranchWithProtection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commit":
			if err := s.Commit.ReadJSON(i); err != nil {
				i.ReportError("Field Commit", err.Error())
				return false
			}
			return true
		case "_links":
			if err := s.Links.ReadJSON(i); err != nil {
				i.ReportError("Field Links", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "pattern":
			s.Pattern.Reset()
			if err := s.Pattern.ReadJSON(i); err != nil {
				i.ReportError("Field Pattern", err.Error())
				return false
			}
			return true
		case "protected":
			s.Protected = i.ReadBool()
			return i.Error == nil
		case "protection":
			if err := s.Protection.ReadJSON(i); err != nil {
				i.ReportError("Field Protection", err.Error())
				return false
			}
			return true
		case "protection_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ProtectionURL", err.Error())
				return false
			}
			s.ProtectionURL = v
			return true
		case "required_approving_review_count":
			s.RequiredApprovingReviewCount.Reset()
			if err := s.RequiredApprovingReviewCount.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredApprovingReviewCount", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BranchWithProtectionLinks) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("html")
	j.WriteString(s.HTML)

	more.More()
	j.WriteObjectField("self")
	json.WriteURI(j, s.Self)

	j.WriteObjectEnd()
}

// WriteJSONTo writes BranchWithProtectionLinks json value to io.Writer.
func (s BranchWithProtectionLinks) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BranchWithProtectionLinks json value from io.Reader.
func (s *BranchWithProtectionLinks) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BranchWithProtectionLinks from json stream.
func (s *BranchWithProtectionLinks) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html":
			s.HTML = i.ReadString()
			return i.Error == nil
		case "self":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field Self", err.Error())
				return false
			}
			s.Self = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckAnnotation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("annotation_level")
	s.AnnotationLevel.WriteJSON(j)

	more.More()
	j.WriteObjectField("blob_href")
	j.WriteString(s.BlobHref)

	more.More()
	j.WriteObjectField("end_column")
	s.EndColumn.WriteJSON(j)

	more.More()
	j.WriteObjectField("end_line")
	j.WriteInt(s.EndLine)

	more.More()
	j.WriteObjectField("message")
	s.Message.WriteJSON(j)

	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)

	more.More()
	j.WriteObjectField("raw_details")
	s.RawDetails.WriteJSON(j)

	more.More()
	j.WriteObjectField("start_column")
	s.StartColumn.WriteJSON(j)

	more.More()
	j.WriteObjectField("start_line")
	j.WriteInt(s.StartLine)

	more.More()
	j.WriteObjectField("title")
	s.Title.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CheckAnnotation json value to io.Writer.
func (s CheckAnnotation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CheckAnnotation json value from io.Reader.
func (s *CheckAnnotation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CheckAnnotation from json stream.
func (s *CheckAnnotation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "annotation_level":
			if err := s.AnnotationLevel.ReadJSON(i); err != nil {
				i.ReportError("Field AnnotationLevel", err.Error())
				return false
			}
			return true
		case "blob_href":
			s.BlobHref = i.ReadString()
			return i.Error == nil
		case "end_column":
			if err := s.EndColumn.ReadJSON(i); err != nil {
				i.ReportError("Field EndColumn", err.Error())
				return false
			}
			return true
		case "end_line":
			s.EndLine = i.ReadInt()
			return i.Error == nil
		case "message":
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "raw_details":
			if err := s.RawDetails.ReadJSON(i); err != nil {
				i.ReportError("Field RawDetails", err.Error())
				return false
			}
			return true
		case "start_column":
			if err := s.StartColumn.ReadJSON(i); err != nil {
				i.ReportError("Field StartColumn", err.Error())
				return false
			}
			return true
		case "start_line":
			s.StartLine = i.ReadInt()
			return i.Error == nil
		case "title":
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckRun) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("app")
	s.App.WriteJSON(j)

	more.More()
	j.WriteObjectField("check_suite")
	s.CheckSuite.WriteJSON(j)

	more.More()
	j.WriteObjectField("completed_at")
	s.CompletedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("conclusion")
	s.Conclusion.WriteJSON(j)

	if s.Deployment.Set {
		more.More()
		j.WriteObjectField("deployment")
		s.Deployment.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("details_url")
	s.DetailsURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("external_id")
	s.ExternalID.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	s.HTMLURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("head_sha")
	j.WriteString(s.HeadSha)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("output")
	s.Output.WriteJSON(j)

	more.More()
	j.WriteObjectField("pull_requests")
	j.WriteString(s.PullRequests)

	more.More()
	j.WriteObjectField("started_at")
	s.StartedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CheckRun json value to io.Writer.
func (s CheckRun) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CheckRun json value from io.Reader.
func (s *CheckRun) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CheckRun from json stream.
func (s *CheckRun) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "app":
			if err := s.App.ReadJSON(i); err != nil {
				i.ReportError("Field App", err.Error())
				return false
			}
			return true
		case "check_suite":
			if err := s.CheckSuite.ReadJSON(i); err != nil {
				i.ReportError("Field CheckSuite", err.Error())
				return false
			}
			return true
		case "completed_at":
			if err := s.CompletedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CompletedAt", err.Error())
				return false
			}
			return true
		case "conclusion":
			if err := s.Conclusion.ReadJSON(i); err != nil {
				i.ReportError("Field Conclusion", err.Error())
				return false
			}
			return true
		case "deployment":
			s.Deployment.Reset()
			if err := s.Deployment.ReadJSON(i); err != nil {
				i.ReportError("Field Deployment", err.Error())
				return false
			}
			return true
		case "details_url":
			if err := s.DetailsURL.ReadJSON(i); err != nil {
				i.ReportError("Field DetailsURL", err.Error())
				return false
			}
			return true
		case "external_id":
			if err := s.ExternalID.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalID", err.Error())
				return false
			}
			return true
		case "html_url":
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "head_sha":
			s.HeadSha = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "output":
			if err := s.Output.ReadJSON(i); err != nil {
				i.ReportError("Field Output", err.Error())
				return false
			}
			return true
		case "pull_requests":
			s.PullRequests = i.ReadString()
			return i.Error == nil
		case "started_at":
			if err := s.StartedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field StartedAt", err.Error())
				return false
			}
			return true
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckRunCheckSuite) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CheckRunCheckSuite json value to io.Writer.
func (s CheckRunCheckSuite) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CheckRunCheckSuite json value from io.Reader.
func (s *CheckRunCheckSuite) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CheckRunCheckSuite from json stream.
func (s *CheckRunCheckSuite) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckRunConclusion) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CheckRunConclusion from json stream.
func (s *CheckRunConclusion) ReadJSON(i *json.Iterator) error {
	*s = CheckRunConclusion(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckRunOutput) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("annotations_count")
	j.WriteInt(s.AnnotationsCount)

	more.More()
	j.WriteObjectField("annotations_url")
	json.WriteURI(j, s.AnnotationsURL)

	more.More()
	j.WriteObjectField("summary")
	s.Summary.WriteJSON(j)

	more.More()
	j.WriteObjectField("text")
	s.Text.WriteJSON(j)

	more.More()
	j.WriteObjectField("title")
	s.Title.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CheckRunOutput json value to io.Writer.
func (s CheckRunOutput) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CheckRunOutput json value from io.Reader.
func (s *CheckRunOutput) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CheckRunOutput from json stream.
func (s *CheckRunOutput) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "annotations_count":
			s.AnnotationsCount = i.ReadInt()
			return i.Error == nil
		case "annotations_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field AnnotationsURL", err.Error())
				return false
			}
			s.AnnotationsURL = v
			return true
		case "summary":
			if err := s.Summary.ReadJSON(i); err != nil {
				i.ReportError("Field Summary", err.Error())
				return false
			}
			return true
		case "text":
			if err := s.Text.ReadJSON(i); err != nil {
				i.ReportError("Field Text", err.Error())
				return false
			}
			return true
		case "title":
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckRunStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CheckRunStatus from json stream.
func (s *CheckRunStatus) ReadJSON(i *json.Iterator) error {
	*s = CheckRunStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckSuite) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("after")
	s.After.WriteJSON(j)

	more.More()
	j.WriteObjectField("app")
	s.App.WriteJSON(j)

	more.More()
	j.WriteObjectField("before")
	s.Before.WriteJSON(j)

	more.More()
	j.WriteObjectField("check_runs_url")
	j.WriteString(s.CheckRunsURL)

	more.More()
	j.WriteObjectField("conclusion")
	s.Conclusion.WriteJSON(j)

	more.More()
	j.WriteObjectField("created_at")
	s.CreatedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("head_branch")
	s.HeadBranch.WriteJSON(j)

	more.More()
	j.WriteObjectField("head_commit")
	s.HeadCommit.WriteJSON(j)

	more.More()
	j.WriteObjectField("head_sha")
	j.WriteString(s.HeadSha)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("latest_check_runs_count")
	j.WriteInt(s.LatestCheckRunsCount)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("pull_requests")
	if s.PullRequests == nil {
		j.WriteNil()
	} else {
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PullRequests {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("repository")
	s.Repository.WriteJSON(j)

	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	s.URL.WriteJSON(j)

	more.More()
	j.WriteObjectField("updated_at")
	s.UpdatedAt.WriteJSON(j, json.WriteDateTime)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CheckSuite json value to io.Writer.
func (s CheckSuite) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CheckSuite json value from io.Reader.
func (s *CheckSuite) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CheckSuite from json stream.
func (s *CheckSuite) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "after":
			if err := s.After.ReadJSON(i); err != nil {
				i.ReportError("Field After", err.Error())
				return false
			}
			return true
		case "app":
			if err := s.App.ReadJSON(i); err != nil {
				i.ReportError("Field App", err.Error())
				return false
			}
			return true
		case "before":
			if err := s.Before.ReadJSON(i); err != nil {
				i.ReportError("Field Before", err.Error())
				return false
			}
			return true
		case "check_runs_url":
			s.CheckRunsURL = i.ReadString()
			return i.Error == nil
		case "conclusion":
			if err := s.Conclusion.ReadJSON(i); err != nil {
				i.ReportError("Field Conclusion", err.Error())
				return false
			}
			return true
		case "created_at":
			if err := s.CreatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "head_branch":
			if err := s.HeadBranch.ReadJSON(i); err != nil {
				i.ReportError("Field HeadBranch", err.Error())
				return false
			}
			return true
		case "head_commit":
			if err := s.HeadCommit.ReadJSON(i); err != nil {
				i.ReportError("Field HeadCommit", err.Error())
				return false
			}
			return true
		case "head_sha":
			s.HeadSha = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "latest_check_runs_count":
			s.LatestCheckRunsCount = i.ReadInt()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "pull_requests":
			// Unsupported kind "array" for field "PullRequests".
			i.Skip()
			return true
		case "repository":
			if err := s.Repository.ReadJSON(i); err != nil {
				i.ReportError("Field Repository", err.Error())
				return false
			}
			return true
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "url":
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckSuiteConclusion) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CheckSuiteConclusion from json stream.
func (s *CheckSuiteConclusion) ReadJSON(i *json.Iterator) error {
	*s = CheckSuiteConclusion(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckSuitePreference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("preferences")
	s.Preferences.WriteJSON(j)

	more.More()
	j.WriteObjectField("repository")
	s.Repository.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CheckSuitePreference json value to io.Writer.
func (s CheckSuitePreference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CheckSuitePreference json value from io.Reader.
func (s *CheckSuitePreference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CheckSuitePreference from json stream.
func (s *CheckSuitePreference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "preferences":
			if err := s.Preferences.ReadJSON(i); err != nil {
				i.ReportError("Field Preferences", err.Error())
				return false
			}
			return true
		case "repository":
			if err := s.Repository.ReadJSON(i); err != nil {
				i.ReportError("Field Repository", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckSuitePreferencePreferences) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AutoTriggerChecks != nil {
		more.More()
		j.WriteObjectField("auto_trigger_checks")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AutoTriggerChecks {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CheckSuitePreferencePreferences json value to io.Writer.
func (s CheckSuitePreferencePreferences) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CheckSuitePreferencePreferences json value from io.Reader.
func (s *CheckSuitePreferencePreferences) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CheckSuitePreferencePreferences from json stream.
func (s *CheckSuitePreferencePreferences) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "auto_trigger_checks":
			// Unsupported kind "array" for field "AutoTriggerChecks".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckSuitePreferencePreferencesAutoTriggerChecksItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("app_id")
	j.WriteInt(s.AppID)

	more.More()
	j.WriteObjectField("setting")
	j.WriteBool(s.Setting)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CheckSuitePreferencePreferencesAutoTriggerChecksItem json value to io.Writer.
func (s CheckSuitePreferencePreferencesAutoTriggerChecksItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CheckSuitePreferencePreferencesAutoTriggerChecksItem json value from io.Reader.
func (s *CheckSuitePreferencePreferencesAutoTriggerChecksItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CheckSuitePreferencePreferencesAutoTriggerChecksItem from json stream.
func (s *CheckSuitePreferencePreferencesAutoTriggerChecksItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "app_id":
			s.AppID = i.ReadInt()
			return i.Error == nil
		case "setting":
			s.Setting = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CheckSuiteStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CheckSuiteStatus from json stream.
func (s *CheckSuiteStatus) ReadJSON(i *json.Iterator) error {
	*s = CheckSuiteStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChecksCreateSuiteApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("head_sha")
	j.WriteString(s.HeadSha)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ChecksCreateSuiteApplicationJSONRequest json value to io.Writer.
func (s ChecksCreateSuiteApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ChecksCreateSuiteApplicationJSONRequest json value from io.Reader.
func (s *ChecksCreateSuiteApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ChecksCreateSuiteApplicationJSONRequest from json stream.
func (s *ChecksCreateSuiteApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "head_sha":
			s.HeadSha = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChecksListSuitesForRef) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("check_suites")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.CheckSuites {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ChecksListSuitesForRef json value to io.Writer.
func (s ChecksListSuitesForRef) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ChecksListSuitesForRef json value from io.Reader.
func (s *ChecksListSuitesForRef) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ChecksListSuitesForRef from json stream.
func (s *ChecksListSuitesForRef) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "check_suites":
			// Unsupported kind "array" for field "CheckSuites".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChecksSetSuitesPreferencesApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AutoTriggerChecks != nil {
		more.More()
		j.WriteObjectField("auto_trigger_checks")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AutoTriggerChecks {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ChecksSetSuitesPreferencesApplicationJSONRequest json value to io.Writer.
func (s ChecksSetSuitesPreferencesApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ChecksSetSuitesPreferencesApplicationJSONRequest json value from io.Reader.
func (s *ChecksSetSuitesPreferencesApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ChecksSetSuitesPreferencesApplicationJSONRequest from json stream.
func (s *ChecksSetSuitesPreferencesApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "auto_trigger_checks":
			// Unsupported kind "array" for field "AutoTriggerChecks".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("app_id")
	j.WriteInt(s.AppID)

	more.More()
	j.WriteObjectField("setting")
	j.WriteBool(s.Setting)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem json value to io.Writer.
func (s ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem json value from io.Reader.
func (s *ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem from json stream.
func (s *ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "app_id":
			s.AppID = i.ReadInt()
			return i.Error == nil
		case "setting":
			s.Setting = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeOfConduct) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("html_url")
	s.HTMLURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeOfConduct json value to io.Writer.
func (s CodeOfConduct) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeOfConduct json value from io.Reader.
func (s *CodeOfConduct) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeOfConduct from json stream.
func (s *CodeOfConduct) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "html_url":
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeOfConductSimple) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("html_url")
	s.HTMLURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeOfConductSimple json value to io.Writer.
func (s CodeOfConductSimple) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeOfConductSimple json value from io.Reader.
func (s *CodeOfConductSimple) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeOfConductSimple from json stream.
func (s *CodeOfConductSimple) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html_url":
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertClassification) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CodeScanningAlertClassification from json stream.
func (s *CodeScanningAlertClassification) ReadJSON(i *json.Iterator) error {
	*s = CodeScanningAlertClassification(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertDismissedReason) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CodeScanningAlertDismissedReason from json stream.
func (s *CodeScanningAlertDismissedReason) ReadJSON(i *json.Iterator) error {
	*s = CodeScanningAlertDismissedReason(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertInstance) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "analysis_key".

	// Unsupported kind "pointer" for field "category".

	if s.Classifications != nil {
		more.More()
		j.WriteObjectField("classifications")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Classifications {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.CommitSha.Set {
		more.More()
		j.WriteObjectField("commit_sha")
		s.CommitSha.WriteJSON(j)
	}

	// Unsupported kind "pointer" for field "environment".

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	// Unsupported kind "pointer" for field "ref".

	if s.State.Set {
		more.More()
		j.WriteObjectField("state")
		s.State.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeScanningAlertInstance json value to io.Writer.
func (s CodeScanningAlertInstance) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeScanningAlertInstance json value from io.Reader.
func (s *CodeScanningAlertInstance) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeScanningAlertInstance from json stream.
func (s *CodeScanningAlertInstance) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "analysis_key":
			// Unsupported kind "pointer" for field "AnalysisKey".
			i.Skip()
			return true
		case "category":
			// Unsupported kind "pointer" for field "Category".
			i.Skip()
			return true
		case "classifications":
			// Unsupported kind "array" for field "Classifications".
			i.Skip()
			return true
		case "commit_sha":
			s.CommitSha.Reset()
			if err := s.CommitSha.ReadJSON(i); err != nil {
				i.ReportError("Field CommitSha", err.Error())
				return false
			}
			return true
		case "environment":
			// Unsupported kind "pointer" for field "Environment".
			i.Skip()
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(i); err != nil {
				i.ReportError("Field Location", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "ref":
			// Unsupported kind "pointer" for field "Ref".
			i.Skip()
			return true
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertInstanceMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Text.Set {
		more.More()
		j.WriteObjectField("text")
		s.Text.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeScanningAlertInstanceMessage json value to io.Writer.
func (s CodeScanningAlertInstanceMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeScanningAlertInstanceMessage json value from io.Reader.
func (s *CodeScanningAlertInstanceMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeScanningAlertInstanceMessage from json stream.
func (s *CodeScanningAlertInstanceMessage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "text":
			s.Text.Reset()
			if err := s.Text.ReadJSON(i); err != nil {
				i.ReportError("Field Text", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertLocation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EndColumn.Set {
		more.More()
		j.WriteObjectField("end_column")
		s.EndColumn.WriteJSON(j)
	}

	if s.EndLine.Set {
		more.More()
		j.WriteObjectField("end_line")
		s.EndLine.WriteJSON(j)
	}

	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}

	if s.StartColumn.Set {
		more.More()
		j.WriteObjectField("start_column")
		s.StartColumn.WriteJSON(j)
	}

	if s.StartLine.Set {
		more.More()
		j.WriteObjectField("start_line")
		s.StartLine.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeScanningAlertLocation json value to io.Writer.
func (s CodeScanningAlertLocation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeScanningAlertLocation json value from io.Reader.
func (s *CodeScanningAlertLocation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeScanningAlertLocation from json stream.
func (s *CodeScanningAlertLocation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "end_column":
			s.EndColumn.Reset()
			if err := s.EndColumn.ReadJSON(i); err != nil {
				i.ReportError("Field EndColumn", err.Error())
				return false
			}
			return true
		case "end_line":
			s.EndLine.Reset()
			if err := s.EndLine.ReadJSON(i); err != nil {
				i.ReportError("Field EndLine", err.Error())
				return false
			}
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "start_column":
			s.StartColumn.Reset()
			if err := s.StartColumn.ReadJSON(i); err != nil {
				i.ReportError("Field StartColumn", err.Error())
				return false
			}
			return true
		case "start_line":
			s.StartLine.Reset()
			if err := s.StartLine.ReadJSON(i); err != nil {
				i.ReportError("Field StartLine", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertSetState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CodeScanningAlertSetState from json stream.
func (s *CodeScanningAlertSetState) ReadJSON(i *json.Iterator) error {
	*s = CodeScanningAlertSetState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAlertState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CodeScanningAlertState from json stream.
func (s *CodeScanningAlertState) ReadJSON(i *json.Iterator) error {
	*s = CodeScanningAlertState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAnalysis) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "alias" for field "analysis_key".

	// Unsupported kind "pointer" for field "category".

	// Unsupported kind "alias" for field "commit_sha".

	// Unsupported kind "alias" for field "created_at".

	more.More()
	j.WriteObjectField("deletable")
	j.WriteBool(s.Deletable)

	// Unsupported kind "alias" for field "environment".

	more.More()
	j.WriteObjectField("error")
	j.WriteString(s.Error)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	// Unsupported kind "alias" for field "ref".

	more.More()
	j.WriteObjectField("results_count")
	j.WriteInt(s.ResultsCount)

	more.More()
	j.WriteObjectField("rules_count")
	j.WriteInt(s.RulesCount)

	// Unsupported kind "alias" for field "sarif_id".

	more.More()
	j.WriteObjectField("tool")
	s.Tool.WriteJSON(j)

	if s.ToolName.Set {
		more.More()
		j.WriteObjectField("tool_name")
		s.ToolName.WriteJSON(j)
	}

	// Unsupported kind "alias" for field "url".

	more.More()
	j.WriteObjectField("warning")
	j.WriteString(s.Warning)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeScanningAnalysis json value to io.Writer.
func (s CodeScanningAnalysis) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeScanningAnalysis json value from io.Reader.
func (s *CodeScanningAnalysis) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeScanningAnalysis from json stream.
func (s *CodeScanningAnalysis) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "analysis_key":
			// Unsupported kind "alias" for field "AnalysisKey".
			i.Skip()
			return true
		case "category":
			// Unsupported kind "pointer" for field "Category".
			i.Skip()
			return true
		case "commit_sha":
			// Unsupported kind "alias" for field "CommitSha".
			i.Skip()
			return true
		case "created_at":
			// Unsupported kind "alias" for field "CreatedAt".
			i.Skip()
			return true
		case "deletable":
			s.Deletable = i.ReadBool()
			return i.Error == nil
		case "environment":
			// Unsupported kind "alias" for field "Environment".
			i.Skip()
			return true
		case "error":
			s.Error = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "ref":
			// Unsupported kind "alias" for field "Ref".
			i.Skip()
			return true
		case "results_count":
			s.ResultsCount = i.ReadInt()
			return i.Error == nil
		case "rules_count":
			s.RulesCount = i.ReadInt()
			return i.Error == nil
		case "sarif_id":
			// Unsupported kind "alias" for field "SarifID".
			i.Skip()
			return true
		case "tool":
			if err := s.Tool.ReadJSON(i); err != nil {
				i.ReportError("Field Tool", err.Error())
				return false
			}
			return true
		case "tool_name":
			s.ToolName.Reset()
			if err := s.ToolName.ReadJSON(i); err != nil {
				i.ReportError("Field ToolName", err.Error())
				return false
			}
			return true
		case "url":
			// Unsupported kind "alias" for field "URL".
			i.Skip()
			return true
		case "warning":
			s.Warning = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAnalysisDeletion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("confirm_delete_url")
	s.ConfirmDeleteURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("next_analysis_url")
	s.NextAnalysisURL.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeScanningAnalysisDeletion json value to io.Writer.
func (s CodeScanningAnalysisDeletion) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeScanningAnalysisDeletion json value from io.Reader.
func (s *CodeScanningAnalysisDeletion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeScanningAnalysisDeletion from json stream.
func (s *CodeScanningAnalysisDeletion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "confirm_delete_url":
			if err := s.ConfirmDeleteURL.ReadJSON(i); err != nil {
				i.ReportError("Field ConfirmDeleteURL", err.Error())
				return false
			}
			return true
		case "next_analysis_url":
			if err := s.NextAnalysisURL.ReadJSON(i); err != nil {
				i.ReportError("Field NextAnalysisURL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningAnalysisTool) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "guid".

	// Unsupported kind "pointer" for field "name".

	// Unsupported kind "pointer" for field "version".

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeScanningAnalysisTool json value to io.Writer.
func (s CodeScanningAnalysisTool) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeScanningAnalysisTool json value from io.Reader.
func (s *CodeScanningAnalysisTool) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeScanningAnalysisTool from json stream.
func (s *CodeScanningAnalysisTool) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "guid":
			// Unsupported kind "pointer" for field "GUID".
			i.Skip()
			return true
		case "name":
			// Unsupported kind "pointer" for field "Name".
			i.Skip()
			return true
		case "version":
			// Unsupported kind "pointer" for field "Version".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningSarifsReceipt) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "id".

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeScanningSarifsReceipt json value to io.Writer.
func (s CodeScanningSarifsReceipt) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeScanningSarifsReceipt json value from io.Reader.
func (s *CodeScanningSarifsReceipt) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeScanningSarifsReceipt from json stream.
func (s *CodeScanningSarifsReceipt) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "id":
			// Unsupported kind "pointer" for field "ID".
			i.Skip()
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningSarifsStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AnalysesURL.Set {
		more.More()
		j.WriteObjectField("analyses_url")
		s.AnalysesURL.WriteJSON(j)
	}

	if s.ProcessingStatus.Set {
		more.More()
		j.WriteObjectField("processing_status")
		s.ProcessingStatus.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeScanningSarifsStatus json value to io.Writer.
func (s CodeScanningSarifsStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeScanningSarifsStatus json value from io.Reader.
func (s *CodeScanningSarifsStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeScanningSarifsStatus from json stream.
func (s *CodeScanningSarifsStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "analyses_url":
			s.AnalysesURL.Reset()
			if err := s.AnalysesURL.ReadJSON(i); err != nil {
				i.ReportError("Field AnalysesURL", err.Error())
				return false
			}
			return true
		case "processing_status":
			s.ProcessingStatus.Reset()
			if err := s.ProcessingStatus.ReadJSON(i); err != nil {
				i.ReportError("Field ProcessingStatus", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningSarifsStatusProcessingStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CodeScanningSarifsStatusProcessingStatus from json stream.
func (s *CodeScanningSarifsStatusProcessingStatus) ReadJSON(i *json.Iterator) error {
	*s = CodeScanningSarifsStatusProcessingStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningUpdateAlertApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DismissedReason.Set {
		more.More()
		j.WriteObjectField("dismissed_reason")
		s.DismissedReason.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeScanningUpdateAlertApplicationJSONRequest json value to io.Writer.
func (s CodeScanningUpdateAlertApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeScanningUpdateAlertApplicationJSONRequest json value from io.Reader.
func (s *CodeScanningUpdateAlertApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeScanningUpdateAlertApplicationJSONRequest from json stream.
func (s *CodeScanningUpdateAlertApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "dismissed_reason":
			s.DismissedReason.Reset()
			if err := s.DismissedReason.ReadJSON(i); err != nil {
				i.ReportError("Field DismissedReason", err.Error())
				return false
			}
			return true
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CodeScanningUploadSarifApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CheckoutURI.Set {
		more.More()
		j.WriteObjectField("checkout_uri")
		s.CheckoutURI.WriteJSON(j)
	}

	// Unsupported kind "alias" for field "commit_sha".

	// Unsupported kind "alias" for field "ref".

	// Unsupported kind "alias" for field "sarif".

	if s.StartedAt.Set {
		more.More()
		j.WriteObjectField("started_at")
		s.StartedAt.WriteJSON(j, json.WriteDateTime)
	}

	if s.ToolName.Set {
		more.More()
		j.WriteObjectField("tool_name")
		s.ToolName.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CodeScanningUploadSarifApplicationJSONRequest json value to io.Writer.
func (s CodeScanningUploadSarifApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CodeScanningUploadSarifApplicationJSONRequest json value from io.Reader.
func (s *CodeScanningUploadSarifApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CodeScanningUploadSarifApplicationJSONRequest from json stream.
func (s *CodeScanningUploadSarifApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "checkout_uri":
			s.CheckoutURI.Reset()
			if err := s.CheckoutURI.ReadJSON(i); err != nil {
				i.ReportError("Field CheckoutURI", err.Error())
				return false
			}
			return true
		case "commit_sha":
			// Unsupported kind "alias" for field "CommitSha".
			i.Skip()
			return true
		case "ref":
			// Unsupported kind "alias" for field "Ref".
			i.Skip()
			return true
		case "sarif":
			// Unsupported kind "alias" for field "Sarif".
			i.Skip()
			return true
		case "started_at":
			s.StartedAt.Reset()
			if err := s.StartedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field StartedAt", err.Error())
				return false
			}
			return true
		case "tool_name":
			s.ToolName.Reset()
			if err := s.ToolName.ReadJSON(i); err != nil {
				i.ReportError("Field ToolName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CombinedBillingUsage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("days_left_in_billing_cycle")
	j.WriteInt(s.DaysLeftInBillingCycle)

	more.More()
	j.WriteObjectField("estimated_paid_storage_for_month")
	j.WriteInt(s.EstimatedPaidStorageForMonth)

	more.More()
	j.WriteObjectField("estimated_storage_for_month")
	j.WriteInt(s.EstimatedStorageForMonth)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CombinedBillingUsage json value to io.Writer.
func (s CombinedBillingUsage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CombinedBillingUsage json value from io.Reader.
func (s *CombinedBillingUsage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CombinedBillingUsage from json stream.
func (s *CombinedBillingUsage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "days_left_in_billing_cycle":
			s.DaysLeftInBillingCycle = i.ReadInt()
			return i.Error == nil
		case "estimated_paid_storage_for_month":
			s.EstimatedPaidStorageForMonth = i.ReadInt()
			return i.Error == nil
		case "estimated_storage_for_month":
			s.EstimatedStorageForMonth = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CombinedCommitStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("commit_url")
	json.WriteURI(j, s.CommitURL)

	more.More()
	j.WriteObjectField("repository")
	s.Repository.WriteJSON(j)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("state")
	j.WriteString(s.State)

	more.More()
	j.WriteObjectField("statuses")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Statuses {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CombinedCommitStatus json value to io.Writer.
func (s CombinedCommitStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CombinedCommitStatus json value from io.Reader.
func (s *CombinedCommitStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CombinedCommitStatus from json stream.
func (s *CombinedCommitStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commit_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field CommitURL", err.Error())
				return false
			}
			s.CommitURL = v
			return true
		case "repository":
			if err := s.Repository.ReadJSON(i); err != nil {
				i.ReportError("Field Repository", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "state":
			s.State = i.ReadString()
			return i.Error == nil
		case "statuses":
			// Unsupported kind "array" for field "Statuses".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Commit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author")
	s.Author.WriteJSON(j)

	more.More()
	j.WriteObjectField("comments_url")
	json.WriteURI(j, s.CommentsURL)

	more.More()
	j.WriteObjectField("commit")
	s.Commit.WriteJSON(j)

	more.More()
	j.WriteObjectField("committer")
	s.Committer.WriteJSON(j)

	if s.Files != nil {
		more.More()
		j.WriteObjectField("files")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Files {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("parents")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Parents {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	if s.Stats.Set {
		more.More()
		j.WriteObjectField("stats")
		s.Stats.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Commit json value to io.Writer.
func (s Commit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Commit json value from io.Reader.
func (s *Commit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Commit from json stream.
func (s *Commit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "comments_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field CommentsURL", err.Error())
				return false
			}
			s.CommentsURL = v
			return true
		case "commit":
			if err := s.Commit.ReadJSON(i); err != nil {
				i.ReportError("Field Commit", err.Error())
				return false
			}
			return true
		case "committer":
			if err := s.Committer.ReadJSON(i); err != nil {
				i.ReportError("Field Committer", err.Error())
				return false
			}
			return true
		case "files":
			// Unsupported kind "array" for field "Files".
			i.Skip()
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "parents":
			// Unsupported kind "array" for field "Parents".
			i.Skip()
			return true
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "stats":
			s.Stats.Reset()
			if err := s.Stats.ReadJSON(i); err != nil {
				i.ReportError("Field Stats", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommitActivity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("days")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Days {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total")
	j.WriteInt(s.Total)

	more.More()
	j.WriteObjectField("week")
	j.WriteInt(s.Week)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CommitActivity json value to io.Writer.
func (s CommitActivity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CommitActivity json value from io.Reader.
func (s *CommitActivity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CommitActivity from json stream.
func (s *CommitActivity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "days":
			// Unsupported kind "array" for field "Days".
			i.Skip()
			return true
		case "total":
			s.Total = i.ReadInt()
			return i.Error == nil
		case "week":
			s.Week = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommitComment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author_association")
	s.AuthorAssociation.WriteJSON(j)

	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	more.More()
	j.WriteObjectField("commit_id")
	j.WriteString(s.CommitID)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("line")
	s.Line.WriteJSON(j)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("path")
	s.Path.WriteJSON(j)

	more.More()
	j.WriteObjectField("position")
	s.Position.WriteJSON(j)

	if s.Reactions.Set {
		more.More()
		j.WriteObjectField("reactions")
		s.Reactions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CommitComment json value to io.Writer.
func (s CommitComment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CommitComment json value from io.Reader.
func (s *CommitComment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CommitComment from json stream.
func (s *CommitComment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(i); err != nil {
				i.ReportError("Field AuthorAssociation", err.Error())
				return false
			}
			return true
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "commit_id":
			s.CommitID = i.ReadString()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "line":
			if err := s.Line.ReadJSON(i); err != nil {
				i.ReportError("Field Line", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "path":
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "position":
			if err := s.Position.ReadJSON(i); err != nil {
				i.ReportError("Field Position", err.Error())
				return false
			}
			return true
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(i); err != nil {
				i.ReportError("Field Reactions", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommitCommit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author")
	s.Author.WriteJSON(j)

	more.More()
	j.WriteObjectField("comment_count")
	j.WriteInt(s.CommentCount)

	more.More()
	j.WriteObjectField("committer")
	s.Committer.WriteJSON(j)

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	more.More()
	j.WriteObjectField("tree")
	s.Tree.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	if s.Verification.Set {
		more.More()
		j.WriteObjectField("verification")
		s.Verification.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CommitCommit json value to io.Writer.
func (s CommitCommit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CommitCommit json value from io.Reader.
func (s *CommitCommit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CommitCommit from json stream.
func (s *CommitCommit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "comment_count":
			s.CommentCount = i.ReadInt()
			return i.Error == nil
		case "committer":
			if err := s.Committer.ReadJSON(i); err != nil {
				i.ReportError("Field Committer", err.Error())
				return false
			}
			return true
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "tree":
			if err := s.Tree.ReadJSON(i); err != nil {
				i.ReportError("Field Tree", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "verification":
			s.Verification.Reset()
			if err := s.Verification.ReadJSON(i); err != nil {
				i.ReportError("Field Verification", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommitCommitTree) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CommitCommitTree json value to io.Writer.
func (s CommitCommitTree) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CommitCommitTree json value from io.Reader.
func (s *CommitCommitTree) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CommitCommitTree from json stream.
func (s *CommitCommitTree) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommitComparison) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ahead_by")
	j.WriteInt(s.AheadBy)

	more.More()
	j.WriteObjectField("base_commit")
	s.BaseCommit.WriteJSON(j)

	more.More()
	j.WriteObjectField("behind_by")
	j.WriteInt(s.BehindBy)

	more.More()
	j.WriteObjectField("commits")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Commits {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("diff_url")
	json.WriteURI(j, s.DiffURL)

	if s.Files != nil {
		more.More()
		j.WriteObjectField("files")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Files {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("merge_base_commit")
	s.MergeBaseCommit.WriteJSON(j)

	more.More()
	j.WriteObjectField("patch_url")
	json.WriteURI(j, s.PatchURL)

	more.More()
	j.WriteObjectField("permalink_url")
	json.WriteURI(j, s.PermalinkURL)

	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)

	more.More()
	j.WriteObjectField("total_commits")
	j.WriteInt(s.TotalCommits)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CommitComparison json value to io.Writer.
func (s CommitComparison) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CommitComparison json value from io.Reader.
func (s *CommitComparison) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CommitComparison from json stream.
func (s *CommitComparison) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ahead_by":
			s.AheadBy = i.ReadInt()
			return i.Error == nil
		case "base_commit":
			if err := s.BaseCommit.ReadJSON(i); err != nil {
				i.ReportError("Field BaseCommit", err.Error())
				return false
			}
			return true
		case "behind_by":
			s.BehindBy = i.ReadInt()
			return i.Error == nil
		case "commits":
			// Unsupported kind "array" for field "Commits".
			i.Skip()
			return true
		case "diff_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DiffURL", err.Error())
				return false
			}
			s.DiffURL = v
			return true
		case "files":
			// Unsupported kind "array" for field "Files".
			i.Skip()
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "merge_base_commit":
			if err := s.MergeBaseCommit.ReadJSON(i); err != nil {
				i.ReportError("Field MergeBaseCommit", err.Error())
				return false
			}
			return true
		case "patch_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field PatchURL", err.Error())
				return false
			}
			s.PatchURL = v
			return true
		case "permalink_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field PermalinkURL", err.Error())
				return false
			}
			s.PermalinkURL = v
			return true
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "total_commits":
			s.TotalCommits = i.ReadInt()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommitComparisonStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads CommitComparisonStatus from json stream.
func (s *CommitComparisonStatus) ReadJSON(i *json.Iterator) error {
	*s = CommitComparisonStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommitFilesItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Additions.Set {
		more.More()
		j.WriteObjectField("additions")
		s.Additions.WriteJSON(j)
	}

	if s.BlobURL.Set {
		more.More()
		j.WriteObjectField("blob_url")
		s.BlobURL.WriteJSON(j)
	}

	if s.Changes.Set {
		more.More()
		j.WriteObjectField("changes")
		s.Changes.WriteJSON(j)
	}

	if s.ContentsURL.Set {
		more.More()
		j.WriteObjectField("contents_url")
		s.ContentsURL.WriteJSON(j)
	}

	if s.Deletions.Set {
		more.More()
		j.WriteObjectField("deletions")
		s.Deletions.WriteJSON(j)
	}

	if s.Filename.Set {
		more.More()
		j.WriteObjectField("filename")
		s.Filename.WriteJSON(j)
	}

	if s.Patch.Set {
		more.More()
		j.WriteObjectField("patch")
		s.Patch.WriteJSON(j)
	}

	if s.PreviousFilename.Set {
		more.More()
		j.WriteObjectField("previous_filename")
		s.PreviousFilename.WriteJSON(j)
	}

	if s.RawURL.Set {
		more.More()
		j.WriteObjectField("raw_url")
		s.RawURL.WriteJSON(j)
	}

	if s.Sha.Set {
		more.More()
		j.WriteObjectField("sha")
		s.Sha.WriteJSON(j)
	}

	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CommitFilesItem json value to io.Writer.
func (s CommitFilesItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CommitFilesItem json value from io.Reader.
func (s *CommitFilesItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CommitFilesItem from json stream.
func (s *CommitFilesItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "additions":
			s.Additions.Reset()
			if err := s.Additions.ReadJSON(i); err != nil {
				i.ReportError("Field Additions", err.Error())
				return false
			}
			return true
		case "blob_url":
			s.BlobURL.Reset()
			if err := s.BlobURL.ReadJSON(i); err != nil {
				i.ReportError("Field BlobURL", err.Error())
				return false
			}
			return true
		case "changes":
			s.Changes.Reset()
			if err := s.Changes.ReadJSON(i); err != nil {
				i.ReportError("Field Changes", err.Error())
				return false
			}
			return true
		case "contents_url":
			s.ContentsURL.Reset()
			if err := s.ContentsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ContentsURL", err.Error())
				return false
			}
			return true
		case "deletions":
			s.Deletions.Reset()
			if err := s.Deletions.ReadJSON(i); err != nil {
				i.ReportError("Field Deletions", err.Error())
				return false
			}
			return true
		case "filename":
			s.Filename.Reset()
			if err := s.Filename.ReadJSON(i); err != nil {
				i.ReportError("Field Filename", err.Error())
				return false
			}
			return true
		case "patch":
			s.Patch.Reset()
			if err := s.Patch.ReadJSON(i); err != nil {
				i.ReportError("Field Patch", err.Error())
				return false
			}
			return true
		case "previous_filename":
			s.PreviousFilename.Reset()
			if err := s.PreviousFilename.ReadJSON(i); err != nil {
				i.ReportError("Field PreviousFilename", err.Error())
				return false
			}
			return true
		case "raw_url":
			s.RawURL.Reset()
			if err := s.RawURL.ReadJSON(i); err != nil {
				i.ReportError("Field RawURL", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(i); err != nil {
				i.ReportError("Field Sha", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommitParentsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CommitParentsItem json value to io.Writer.
func (s CommitParentsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CommitParentsItem json value from io.Reader.
func (s *CommitParentsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CommitParentsItem from json stream.
func (s *CommitParentsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommitStats) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Additions.Set {
		more.More()
		j.WriteObjectField("additions")
		s.Additions.WriteJSON(j)
	}

	if s.Deletions.Set {
		more.More()
		j.WriteObjectField("deletions")
		s.Deletions.WriteJSON(j)
	}

	if s.Total.Set {
		more.More()
		j.WriteObjectField("total")
		s.Total.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CommitStats json value to io.Writer.
func (s CommitStats) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CommitStats json value from io.Reader.
func (s *CommitStats) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CommitStats from json stream.
func (s *CommitStats) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "additions":
			s.Additions.Reset()
			if err := s.Additions.ReadJSON(i); err != nil {
				i.ReportError("Field Additions", err.Error())
				return false
			}
			return true
		case "deletions":
			s.Deletions.Reset()
			if err := s.Deletions.ReadJSON(i); err != nil {
				i.ReportError("Field Deletions", err.Error())
				return false
			}
			return true
		case "total":
			s.Total.Reset()
			if err := s.Total.ReadJSON(i); err != nil {
				i.ReportError("Field Total", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommunityProfile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContentReportsEnabled.Set {
		more.More()
		j.WriteObjectField("content_reports_enabled")
		s.ContentReportsEnabled.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("documentation")
	s.Documentation.WriteJSON(j)

	more.More()
	j.WriteObjectField("files")
	s.Files.WriteJSON(j)

	more.More()
	j.WriteObjectField("health_percentage")
	j.WriteInt(s.HealthPercentage)

	more.More()
	j.WriteObjectField("updated_at")
	s.UpdatedAt.WriteJSON(j, json.WriteDateTime)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CommunityProfile json value to io.Writer.
func (s CommunityProfile) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CommunityProfile json value from io.Reader.
func (s *CommunityProfile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CommunityProfile from json stream.
func (s *CommunityProfile) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content_reports_enabled":
			s.ContentReportsEnabled.Reset()
			if err := s.ContentReportsEnabled.ReadJSON(i); err != nil {
				i.ReportError("Field ContentReportsEnabled", err.Error())
				return false
			}
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "documentation":
			if err := s.Documentation.ReadJSON(i); err != nil {
				i.ReportError("Field Documentation", err.Error())
				return false
			}
			return true
		case "files":
			if err := s.Files.ReadJSON(i); err != nil {
				i.ReportError("Field Files", err.Error())
				return false
			}
			return true
		case "health_percentage":
			s.HealthPercentage = i.ReadInt()
			return i.Error == nil
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CommunityProfileFiles) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("code_of_conduct")
	s.CodeOfConduct.WriteJSON(j)

	more.More()
	j.WriteObjectField("code_of_conduct_file")
	s.CodeOfConductFile.WriteJSON(j)

	more.More()
	j.WriteObjectField("contributing")
	s.Contributing.WriteJSON(j)

	more.More()
	j.WriteObjectField("issue_template")
	s.IssueTemplate.WriteJSON(j)

	more.More()
	j.WriteObjectField("license")
	s.License.WriteJSON(j)

	more.More()
	j.WriteObjectField("pull_request_template")
	s.PullRequestTemplate.WriteJSON(j)

	more.More()
	j.WriteObjectField("readme")
	s.Readme.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes CommunityProfileFiles json value to io.Writer.
func (s CommunityProfileFiles) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CommunityProfileFiles json value from io.Reader.
func (s *CommunityProfileFiles) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CommunityProfileFiles from json stream.
func (s *CommunityProfileFiles) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "code_of_conduct":
			if err := s.CodeOfConduct.ReadJSON(i); err != nil {
				i.ReportError("Field CodeOfConduct", err.Error())
				return false
			}
			return true
		case "code_of_conduct_file":
			if err := s.CodeOfConductFile.ReadJSON(i); err != nil {
				i.ReportError("Field CodeOfConductFile", err.Error())
				return false
			}
			return true
		case "contributing":
			if err := s.Contributing.ReadJSON(i); err != nil {
				i.ReportError("Field Contributing", err.Error())
				return false
			}
			return true
		case "issue_template":
			if err := s.IssueTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IssueTemplate", err.Error())
				return false
			}
			return true
		case "license":
			if err := s.License.ReadJSON(i); err != nil {
				i.ReportError("Field License", err.Error())
				return false
			}
			return true
		case "pull_request_template":
			if err := s.PullRequestTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field PullRequestTemplate", err.Error())
				return false
			}
			return true
		case "readme":
			if err := s.Readme.ReadJSON(i); err != nil {
				i.ReportError("Field Readme", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ContentFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	j.WriteString(s.Content)

	more.More()
	j.WriteObjectField("download_url")
	s.DownloadURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("encoding")
	j.WriteString(s.Encoding)

	more.More()
	j.WriteObjectField("git_url")
	s.GitURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	s.HTMLURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("_links")
	s.Links.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("size")
	j.WriteInt(s.Size)

	if s.SubmoduleGitURL.Set {
		more.More()
		j.WriteObjectField("submodule_git_url")
		s.SubmoduleGitURL.WriteJSON(j)
	}

	if s.Target.Set {
		more.More()
		j.WriteObjectField("target")
		s.Target.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ContentFile json value to io.Writer.
func (s ContentFile) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ContentFile json value from io.Reader.
func (s *ContentFile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ContentFile from json stream.
func (s *ContentFile) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			s.Content = i.ReadString()
			return i.Error == nil
		case "download_url":
			if err := s.DownloadURL.ReadJSON(i); err != nil {
				i.ReportError("Field DownloadURL", err.Error())
				return false
			}
			return true
		case "encoding":
			s.Encoding = i.ReadString()
			return i.Error == nil
		case "git_url":
			if err := s.GitURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitURL", err.Error())
				return false
			}
			return true
		case "html_url":
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "_links":
			if err := s.Links.ReadJSON(i); err != nil {
				i.ReportError("Field Links", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "size":
			s.Size = i.ReadInt()
			return i.Error == nil
		case "submodule_git_url":
			s.SubmoduleGitURL.Reset()
			if err := s.SubmoduleGitURL.ReadJSON(i); err != nil {
				i.ReportError("Field SubmoduleGitURL", err.Error())
				return false
			}
			return true
		case "target":
			s.Target.Reset()
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ContentFileLinks) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("git")
	s.Git.WriteJSON(j)

	more.More()
	j.WriteObjectField("html")
	s.HTML.WriteJSON(j)

	more.More()
	j.WriteObjectField("self")
	json.WriteURI(j, s.Self)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ContentFileLinks json value to io.Writer.
func (s ContentFileLinks) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ContentFileLinks json value from io.Reader.
func (s *ContentFileLinks) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ContentFileLinks from json stream.
func (s *ContentFileLinks) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "git":
			if err := s.Git.ReadJSON(i); err != nil {
				i.ReportError("Field Git", err.Error())
				return false
			}
			return true
		case "html":
			if err := s.HTML.ReadJSON(i); err != nil {
				i.ReportError("Field HTML", err.Error())
				return false
			}
			return true
		case "self":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field Self", err.Error())
				return false
			}
			s.Self = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ContentReferenceAttachment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ContentReferenceAttachment json value to io.Writer.
func (s ContentReferenceAttachment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ContentReferenceAttachment json value from io.Reader.
func (s *ContentReferenceAttachment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ContentReferenceAttachment from json stream.
func (s *ContentReferenceAttachment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ContentTraffic) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("count")
	j.WriteInt(s.Count)

	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	more.More()
	j.WriteObjectField("uniques")
	j.WriteInt(s.Uniques)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ContentTraffic json value to io.Writer.
func (s ContentTraffic) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ContentTraffic json value from io.Reader.
func (s *ContentTraffic) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ContentTraffic from json stream.
func (s *ContentTraffic) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "count":
			s.Count = i.ReadInt()
			return i.Error == nil
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		case "uniques":
			s.Uniques = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Contributor) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvatarURL.Set {
		more.More()
		j.WriteObjectField("avatar_url")
		s.AvatarURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("contributions")
	j.WriteInt(s.Contributions)

	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.EventsURL.Set {
		more.More()
		j.WriteObjectField("events_url")
		s.EventsURL.WriteJSON(j)
	}

	if s.FollowersURL.Set {
		more.More()
		j.WriteObjectField("followers_url")
		s.FollowersURL.WriteJSON(j)
	}

	if s.FollowingURL.Set {
		more.More()
		j.WriteObjectField("following_url")
		s.FollowingURL.WriteJSON(j)
	}

	if s.GistsURL.Set {
		more.More()
		j.WriteObjectField("gists_url")
		s.GistsURL.WriteJSON(j)
	}

	if s.GravatarID.Set {
		more.More()
		j.WriteObjectField("gravatar_id")
		s.GravatarID.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.Login.Set {
		more.More()
		j.WriteObjectField("login")
		s.Login.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.OrganizationsURL.Set {
		more.More()
		j.WriteObjectField("organizations_url")
		s.OrganizationsURL.WriteJSON(j)
	}

	if s.ReceivedEventsURL.Set {
		more.More()
		j.WriteObjectField("received_events_url")
		s.ReceivedEventsURL.WriteJSON(j)
	}

	if s.ReposURL.Set {
		more.More()
		j.WriteObjectField("repos_url")
		s.ReposURL.WriteJSON(j)
	}

	if s.SiteAdmin.Set {
		more.More()
		j.WriteObjectField("site_admin")
		s.SiteAdmin.WriteJSON(j)
	}

	if s.StarredURL.Set {
		more.More()
		j.WriteObjectField("starred_url")
		s.StarredURL.WriteJSON(j)
	}

	if s.SubscriptionsURL.Set {
		more.More()
		j.WriteObjectField("subscriptions_url")
		s.SubscriptionsURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes Contributor json value to io.Writer.
func (s Contributor) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Contributor json value from io.Reader.
func (s *Contributor) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Contributor from json stream.
func (s *Contributor) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			s.AvatarURL.Reset()
			if err := s.AvatarURL.ReadJSON(i); err != nil {
				i.ReportError("Field AvatarURL", err.Error())
				return false
			}
			return true
		case "contributions":
			s.Contributions = i.ReadInt()
			return i.Error == nil
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			return true
		case "followers_url":
			s.FollowersURL.Reset()
			if err := s.FollowersURL.ReadJSON(i); err != nil {
				i.ReportError("Field FollowersURL", err.Error())
				return false
			}
			return true
		case "following_url":
			s.FollowingURL.Reset()
			if err := s.FollowingURL.ReadJSON(i); err != nil {
				i.ReportError("Field FollowingURL", err.Error())
				return false
			}
			return true
		case "gists_url":
			s.GistsURL.Reset()
			if err := s.GistsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GistsURL", err.Error())
				return false
			}
			return true
		case "gravatar_id":
			s.GravatarID.Reset()
			if err := s.GravatarID.ReadJSON(i); err != nil {
				i.ReportError("Field GravatarID", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "login":
			s.Login.Reset()
			if err := s.Login.ReadJSON(i); err != nil {
				i.ReportError("Field Login", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "organizations_url":
			s.OrganizationsURL.Reset()
			if err := s.OrganizationsURL.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationsURL", err.Error())
				return false
			}
			return true
		case "received_events_url":
			s.ReceivedEventsURL.Reset()
			if err := s.ReceivedEventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReceivedEventsURL", err.Error())
				return false
			}
			return true
		case "repos_url":
			s.ReposURL.Reset()
			if err := s.ReposURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReposURL", err.Error())
				return false
			}
			return true
		case "site_admin":
			s.SiteAdmin.Reset()
			if err := s.SiteAdmin.ReadJSON(i); err != nil {
				i.ReportError("Field SiteAdmin", err.Error())
				return false
			}
			return true
		case "starred_url":
			s.StarredURL.Reset()
			if err := s.StarredURL.ReadJSON(i); err != nil {
				i.ReportError("Field StarredURL", err.Error())
				return false
			}
			return true
		case "subscriptions_url":
			s.SubscriptionsURL.Reset()
			if err := s.SubscriptionsURL.ReadJSON(i); err != nil {
				i.ReportError("Field SubscriptionsURL", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ContributorActivity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author")
	s.Author.WriteJSON(j)

	more.More()
	j.WriteObjectField("total")
	j.WriteInt(s.Total)

	more.More()
	j.WriteObjectField("weeks")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Weeks {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ContributorActivity json value to io.Writer.
func (s ContributorActivity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ContributorActivity json value from io.Reader.
func (s *ContributorActivity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ContributorActivity from json stream.
func (s *ContributorActivity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "total":
			s.Total = i.ReadInt()
			return i.Error == nil
		case "weeks":
			// Unsupported kind "array" for field "Weeks".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ContributorActivityWeeksItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.A.Set {
		more.More()
		j.WriteObjectField("a")
		s.A.WriteJSON(j)
	}

	if s.C.Set {
		more.More()
		j.WriteObjectField("c")
		s.C.WriteJSON(j)
	}

	if s.D.Set {
		more.More()
		j.WriteObjectField("d")
		s.D.WriteJSON(j)
	}

	if s.W.Set {
		more.More()
		j.WriteObjectField("w")
		s.W.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ContributorActivityWeeksItem json value to io.Writer.
func (s ContributorActivityWeeksItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ContributorActivityWeeksItem json value from io.Reader.
func (s *ContributorActivityWeeksItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ContributorActivityWeeksItem from json stream.
func (s *ContributorActivityWeeksItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "a":
			s.A.Reset()
			if err := s.A.ReadJSON(i); err != nil {
				i.ReportError("Field A", err.Error())
				return false
			}
			return true
		case "c":
			s.C.Reset()
			if err := s.C.ReadJSON(i); err != nil {
				i.ReportError("Field C", err.Error())
				return false
			}
			return true
		case "d":
			s.D.Reset()
			if err := s.D.ReadJSON(i); err != nil {
				i.ReportError("Field D", err.Error())
				return false
			}
			return true
		case "w":
			s.W.Reset()
			if err := s.W.ReadJSON(i); err != nil {
				i.ReportError("Field W", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CredentialAuthorization) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AuthorizedCredentialID.Set {
		more.More()
		j.WriteObjectField("authorized_credential_id")
		s.AuthorizedCredentialID.WriteJSON(j)
	}

	if s.AuthorizedCredentialNote.Set {
		more.More()
		j.WriteObjectField("authorized_credential_note")
		s.AuthorizedCredentialNote.WriteJSON(j)
	}

	if s.AuthorizedCredentialTitle.Set {
		more.More()
		j.WriteObjectField("authorized_credential_title")
		s.AuthorizedCredentialTitle.WriteJSON(j)
	}

	if s.CredentialAccessedAt.Set {
		more.More()
		j.WriteObjectField("credential_accessed_at")
		s.CredentialAccessedAt.WriteJSON(j, json.WriteDateTime)
	}

	more.More()
	j.WriteObjectField("credential_authorized_at")
	json.WriteDateTime(j, s.CredentialAuthorizedAt)

	more.More()
	j.WriteObjectField("credential_id")
	j.WriteInt(s.CredentialID)

	more.More()
	j.WriteObjectField("credential_type")
	j.WriteString(s.CredentialType)

	if s.Fingerprint.Set {
		more.More()
		j.WriteObjectField("fingerprint")
		s.Fingerprint.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("login")
	j.WriteString(s.Login)

	if s.Scopes != nil {
		more.More()
		j.WriteObjectField("scopes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Scopes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.TokenLastEight.Set {
		more.More()
		j.WriteObjectField("token_last_eight")
		s.TokenLastEight.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes CredentialAuthorization json value to io.Writer.
func (s CredentialAuthorization) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CredentialAuthorization json value from io.Reader.
func (s *CredentialAuthorization) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CredentialAuthorization from json stream.
func (s *CredentialAuthorization) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "authorized_credential_id":
			s.AuthorizedCredentialID.Reset()
			if err := s.AuthorizedCredentialID.ReadJSON(i); err != nil {
				i.ReportError("Field AuthorizedCredentialID", err.Error())
				return false
			}
			return true
		case "authorized_credential_note":
			s.AuthorizedCredentialNote.Reset()
			if err := s.AuthorizedCredentialNote.ReadJSON(i); err != nil {
				i.ReportError("Field AuthorizedCredentialNote", err.Error())
				return false
			}
			return true
		case "authorized_credential_title":
			s.AuthorizedCredentialTitle.Reset()
			if err := s.AuthorizedCredentialTitle.ReadJSON(i); err != nil {
				i.ReportError("Field AuthorizedCredentialTitle", err.Error())
				return false
			}
			return true
		case "credential_accessed_at":
			s.CredentialAccessedAt.Reset()
			if err := s.CredentialAccessedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CredentialAccessedAt", err.Error())
				return false
			}
			return true
		case "credential_authorized_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CredentialAuthorizedAt", err.Error())
				return false
			}
			s.CredentialAuthorizedAt = v
			return true
		case "credential_id":
			s.CredentialID = i.ReadInt()
			return i.Error == nil
		case "credential_type":
			s.CredentialType = i.ReadString()
			return i.Error == nil
		case "fingerprint":
			s.Fingerprint.Reset()
			if err := s.Fingerprint.ReadJSON(i); err != nil {
				i.ReportError("Field Fingerprint", err.Error())
				return false
			}
			return true
		case "login":
			s.Login = i.ReadString()
			return i.Error == nil
		case "scopes":
			// Unsupported kind "array" for field "Scopes".
			i.Skip()
			return true
		case "token_last_eight":
			s.TokenLastEight.Reset()
			if err := s.TokenLastEight.ReadJSON(i); err != nil {
				i.ReportError("Field TokenLastEight", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeployKey) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	j.WriteString(s.CreatedAt)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	more.More()
	j.WriteObjectField("read_only")
	j.WriteBool(s.ReadOnly)

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	more.More()
	j.WriteObjectField("verified")
	j.WriteBool(s.Verified)

	j.WriteObjectEnd()
}

// WriteJSONTo writes DeployKey json value to io.Writer.
func (s DeployKey) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeployKey json value from io.Reader.
func (s *DeployKey) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeployKey from json stream.
func (s *DeployKey) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			s.CreatedAt = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "read_only":
			s.ReadOnly = i.ReadBool()
			return i.Error == nil
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		case "verified":
			s.Verified = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeploymentSimple) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("environment")
	j.WriteString(s.Environment)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	if s.OriginalEnvironment.Set {
		more.More()
		j.WriteObjectField("original_environment")
		s.OriginalEnvironment.WriteJSON(j)
	}

	if s.PerformedViaGithubApp.Set {
		more.More()
		j.WriteObjectField("performed_via_github_app")
		s.PerformedViaGithubApp.WriteJSON(j)
	}

	if s.ProductionEnvironment.Set {
		more.More()
		j.WriteObjectField("production_environment")
		s.ProductionEnvironment.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("repository_url")
	json.WriteURI(j, s.RepositoryURL)

	more.More()
	j.WriteObjectField("statuses_url")
	json.WriteURI(j, s.StatusesURL)

	more.More()
	j.WriteObjectField("task")
	j.WriteString(s.Task)

	if s.TransientEnvironment.Set {
		more.More()
		j.WriteObjectField("transient_environment")
		s.TransientEnvironment.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes DeploymentSimple json value to io.Writer.
func (s DeploymentSimple) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeploymentSimple json value from io.Reader.
func (s *DeploymentSimple) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeploymentSimple from json stream.
func (s *DeploymentSimple) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "environment":
			s.Environment = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "original_environment":
			s.OriginalEnvironment.Reset()
			if err := s.OriginalEnvironment.ReadJSON(i); err != nil {
				i.ReportError("Field OriginalEnvironment", err.Error())
				return false
			}
			return true
		case "performed_via_github_app":
			s.PerformedViaGithubApp.Reset()
			if err := s.PerformedViaGithubApp.ReadJSON(i); err != nil {
				i.ReportError("Field PerformedViaGithubApp", err.Error())
				return false
			}
			return true
		case "production_environment":
			s.ProductionEnvironment.Reset()
			if err := s.ProductionEnvironment.ReadJSON(i); err != nil {
				i.ReportError("Field ProductionEnvironment", err.Error())
				return false
			}
			return true
		case "repository_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field RepositoryURL", err.Error())
				return false
			}
			s.RepositoryURL = v
			return true
		case "statuses_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field StatusesURL", err.Error())
				return false
			}
			s.StatusesURL = v
			return true
		case "task":
			s.Task = i.ReadString()
			return i.Error == nil
		case "transient_environment":
			s.TransientEnvironment.Reset()
			if err := s.TransientEnvironment.ReadJSON(i); err != nil {
				i.ReportError("Field TransientEnvironment", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeploymentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("creator")
	s.Creator.WriteJSON(j)

	more.More()
	j.WriteObjectField("deployment_url")
	json.WriteURI(j, s.DeploymentURL)

	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)

	if s.Environment.Set {
		more.More()
		j.WriteObjectField("environment")
		s.Environment.WriteJSON(j)
	}

	if s.EnvironmentURL.Set {
		more.More()
		j.WriteObjectField("environment_url")
		s.EnvironmentURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.LogURL.Set {
		more.More()
		j.WriteObjectField("log_url")
		s.LogURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	if s.PerformedViaGithubApp.Set {
		more.More()
		j.WriteObjectField("performed_via_github_app")
		s.PerformedViaGithubApp.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("repository_url")
	json.WriteURI(j, s.RepositoryURL)

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	more.More()
	j.WriteObjectField("target_url")
	json.WriteURI(j, s.TargetURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes DeploymentStatus json value to io.Writer.
func (s DeploymentStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeploymentStatus json value from io.Reader.
func (s *DeploymentStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeploymentStatus from json stream.
func (s *DeploymentStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "creator":
			if err := s.Creator.ReadJSON(i); err != nil {
				i.ReportError("Field Creator", err.Error())
				return false
			}
			return true
		case "deployment_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DeploymentURL", err.Error())
				return false
			}
			s.DeploymentURL = v
			return true
		case "description":
			s.Description = i.ReadString()
			return i.Error == nil
		case "environment":
			s.Environment.Reset()
			if err := s.Environment.ReadJSON(i); err != nil {
				i.ReportError("Field Environment", err.Error())
				return false
			}
			return true
		case "environment_url":
			s.EnvironmentURL.Reset()
			if err := s.EnvironmentURL.ReadJSON(i); err != nil {
				i.ReportError("Field EnvironmentURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "log_url":
			s.LogURL.Reset()
			if err := s.LogURL.ReadJSON(i); err != nil {
				i.ReportError("Field LogURL", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "performed_via_github_app":
			s.PerformedViaGithubApp.Reset()
			if err := s.PerformedViaGithubApp.ReadJSON(i); err != nil {
				i.ReportError("Field PerformedViaGithubApp", err.Error())
				return false
			}
			return true
		case "repository_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field RepositoryURL", err.Error())
				return false
			}
			s.RepositoryURL = v
			return true
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "target_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TargetURL", err.Error())
				return false
			}
			s.TargetURL = v
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeploymentStatusState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads DeploymentStatusState from json stream.
func (s *DeploymentStatusState) ReadJSON(i *json.Iterator) error {
	*s = DeploymentStatusState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DiffEntry) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("additions")
	j.WriteInt(s.Additions)

	more.More()
	j.WriteObjectField("blob_url")
	json.WriteURI(j, s.BlobURL)

	more.More()
	j.WriteObjectField("changes")
	j.WriteInt(s.Changes)

	more.More()
	j.WriteObjectField("contents_url")
	json.WriteURI(j, s.ContentsURL)

	more.More()
	j.WriteObjectField("deletions")
	j.WriteInt(s.Deletions)

	more.More()
	j.WriteObjectField("filename")
	j.WriteString(s.Filename)

	if s.Patch.Set {
		more.More()
		j.WriteObjectField("patch")
		s.Patch.WriteJSON(j)
	}

	if s.PreviousFilename.Set {
		more.More()
		j.WriteObjectField("previous_filename")
		s.PreviousFilename.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("raw_url")
	json.WriteURI(j, s.RawURL)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes DiffEntry json value to io.Writer.
func (s DiffEntry) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DiffEntry json value from io.Reader.
func (s *DiffEntry) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DiffEntry from json stream.
func (s *DiffEntry) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "additions":
			s.Additions = i.ReadInt()
			return i.Error == nil
		case "blob_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field BlobURL", err.Error())
				return false
			}
			s.BlobURL = v
			return true
		case "changes":
			s.Changes = i.ReadInt()
			return i.Error == nil
		case "contents_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ContentsURL", err.Error())
				return false
			}
			s.ContentsURL = v
			return true
		case "deletions":
			s.Deletions = i.ReadInt()
			return i.Error == nil
		case "filename":
			s.Filename = i.ReadString()
			return i.Error == nil
		case "patch":
			s.Patch.Reset()
			if err := s.Patch.ReadJSON(i); err != nil {
				i.ReportError("Field Patch", err.Error())
				return false
			}
			return true
		case "previous_filename":
			s.PreviousFilename.Reset()
			if err := s.PreviousFilename.ReadJSON(i); err != nil {
				i.ReportError("Field PreviousFilename", err.Error())
				return false
			}
			return true
		case "raw_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field RawURL", err.Error())
				return false
			}
			s.RawURL = v
			return true
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DiffEntryStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads DiffEntryStatus from json stream.
func (s *DiffEntryStatus) ReadJSON(i *json.Iterator) error {
	*s = DiffEntryStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Email) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("primary")
	j.WriteBool(s.Primary)

	more.More()
	j.WriteObjectField("verified")
	j.WriteBool(s.Verified)

	more.More()
	j.WriteObjectField("visibility")
	s.Visibility.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Email json value to io.Writer.
func (s Email) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Email json value from io.Reader.
func (s *Email) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Email from json stream.
func (s *Email) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "primary":
			s.Primary = i.ReadBool()
			return i.Error == nil
		case "verified":
			s.Verified = i.ReadBool()
			return i.Error == nil
		case "visibility":
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnabledOrganizations) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads EnabledOrganizations from json stream.
func (s *EnabledOrganizations) ReadJSON(i *json.Iterator) error {
	*s = EnabledOrganizations(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnabledRepositories) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads EnabledRepositories from json stream.
func (s *EnabledRepositories) ReadJSON(i *json.Iterator) error {
	*s = EnabledRepositories(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.Runners != nil {
		more.More()
		j.WriteObjectField("runners")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Runners {
			more.More()
			j.WriteInt(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.SelectedOrganizationIds != nil {
		more.More()
		j.WriteObjectField("selected_organization_ids")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.SelectedOrganizationIds {
			more.More()
			j.WriteInt(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest from json stream.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "runners":
			// Unsupported kind "array" for field "Runners".
			i.Skip()
			return true
		case "selected_organization_ids":
			// Unsupported kind "array" for field "SelectedOrganizationIds".
			i.Skip()
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility from json stream.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	*s = EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("organizations")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Organizations {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteFloat64(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise json value to io.Writer.
func (s EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise json value from io.Reader.
func (s *EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise from json stream.
func (s *EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "organizations":
			// Unsupported kind "array" for field "Organizations".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("organizations")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Organizations {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteFloat64(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise json value to io.Writer.
func (s EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise json value from io.Reader.
func (s *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise from json stream.
func (s *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "organizations":
			// Unsupported kind "array" for field "Organizations".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("runner_groups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.RunnerGroups {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteFloat64(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise json value to io.Writer.
func (s EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise json value from io.Reader.
func (s *EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise from json stream.
func (s *EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "runner_groups":
			// Unsupported kind "array" for field "RunnerGroups".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminListSelfHostedRunnersForEnterprise) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Runners != nil {
		more.More()
		j.WriteObjectField("runners")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Runners {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.TotalCount.Set {
		more.More()
		j.WriteObjectField("total_count")
		s.TotalCount.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminListSelfHostedRunnersForEnterprise json value to io.Writer.
func (s EnterpriseAdminListSelfHostedRunnersForEnterprise) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminListSelfHostedRunnersForEnterprise json value from io.Reader.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterprise) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminListSelfHostedRunnersForEnterprise from json stream.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterprise) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "runners":
			// Unsupported kind "array" for field "Runners".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount.Reset()
			if err := s.TotalCount.ReadJSON(i); err != nil {
				i.ReportError("Field TotalCount", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("runners")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Runners {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("total_count")
	j.WriteFloat64(s.TotalCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise json value to io.Writer.
func (s EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise json value from io.Reader.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise from json stream.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "runners":
			// Unsupported kind "array" for field "Runners".
			i.Skip()
			return true
		case "total_count":
			s.TotalCount = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("displayName")
	j.WriteString(s.DisplayName)

	if s.Members != nil {
		more.More()
		j.WriteObjectField("members")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Members {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "displayName":
			s.DisplayName = i.ReadString()
			return i.Error == nil
		case "members":
			// Unsupported kind "array" for field "Members".
			i.Skip()
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem json value to io.Writer.
func (s EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem json value from io.Reader.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "value":
			s.Value = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("emails")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Emails {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("name")
	s.Name.WriteJSON(j)

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("userName")
	j.WriteString(s.UserName)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "emails":
			// Unsupported kind "array" for field "Emails".
			i.Skip()
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "name":
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		case "userName":
			s.UserName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("primary")
	j.WriteBool(s.Primary)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem json value to io.Writer.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem json value from io.Reader.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "primary":
			s.Primary = i.ReadBool()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "value":
			s.Value = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem json value to io.Writer.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem json value from io.Reader.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("familyName")
	j.WriteString(s.FamilyName)

	more.More()
	j.WriteObjectField("givenName")
	j.WriteString(s.GivenName)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName json value to io.Writer.
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName json value from io.Reader.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName from json stream.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "familyName":
			s.FamilyName = i.ReadString()
			return i.Error == nil
		case "givenName":
			s.GivenName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowedActions.Set {
		more.More()
		j.WriteObjectField("allowed_actions")
		s.AllowedActions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("enabled_organizations")
	s.EnabledOrganizations.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest from json stream.
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed_actions":
			s.AllowedActions.Reset()
			if err := s.AllowedActions.ReadJSON(i); err != nil {
				i.ReportError("Field AllowedActions", err.Error())
				return false
			}
			return true
		case "enabled_organizations":
			if err := s.EnabledOrganizations.ReadJSON(i); err != nil {
				i.ReportError("Field EnabledOrganizations", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("displayName")
	j.WriteString(s.DisplayName)

	if s.Members != nil {
		more.More()
		j.WriteObjectField("members")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Members {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "displayName":
			s.DisplayName = i.ReadString()
			return i.Error == nil
		case "members":
			// Unsupported kind "array" for field "Members".
			i.Skip()
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem json value to io.Writer.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem json value from io.Reader.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "value":
			s.Value = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("emails")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Emails {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("name")
	s.Name.WriteJSON(j)

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("userName")
	j.WriteString(s.UserName)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "emails":
			// Unsupported kind "array" for field "Emails".
			i.Skip()
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "name":
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		case "userName":
			s.UserName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("primary")
	j.WriteBool(s.Primary)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem json value to io.Writer.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem json value from io.Reader.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "primary":
			s.Primary = i.ReadBool()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "value":
			s.Value = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem json value to io.Writer.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem json value from io.Reader.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("familyName")
	j.WriteString(s.FamilyName)

	more.More()
	j.WriteObjectField("givenName")
	j.WriteString(s.GivenName)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName json value to io.Writer.
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName json value from io.Reader.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName from json stream.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "familyName":
			s.FamilyName = i.ReadString()
			return i.Error == nil
		case "givenName":
			s.GivenName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("selected_organization_ids")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.SelectedOrganizationIds {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest from json stream.
func (s *EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "selected_organization_ids":
			// Unsupported kind "array" for field "SelectedOrganizationIds".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("selected_organization_ids")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.SelectedOrganizationIds {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest from json stream.
func (s *EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "selected_organization_ids":
			// Unsupported kind "array" for field "SelectedOrganizationIds".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("runners")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Runners {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest from json stream.
func (s *EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "runners":
			// Unsupported kind "array" for field "Runners".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("Operations")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Operations { // Unsupported kind "primitive" for field "".
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest from json stream.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "Operations":
			// Unsupported kind "array" for field "Operations".
			i.Skip()
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest json value to io.Writer.
func (s EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest json value from io.Reader.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest from json stream.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility from json stream.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	*s = EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnvironmentApprovals) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("comment")
	j.WriteString(s.Comment)

	more.More()
	j.WriteObjectField("environments")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Environments {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnvironmentApprovals json value to io.Writer.
func (s EnvironmentApprovals) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnvironmentApprovals json value from io.Reader.
func (s *EnvironmentApprovals) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnvironmentApprovals from json stream.
func (s *EnvironmentApprovals) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "comment":
			s.Comment = i.ReadString()
			return i.Error == nil
		case "environments":
			// Unsupported kind "array" for field "Environments".
			i.Skip()
			return true
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnvironmentApprovalsEnvironmentsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CreatedAt.Set {
		more.More()
		j.WriteObjectField("created_at")
		s.CreatedAt.WriteJSON(j, json.WriteDateTime)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	if s.UpdatedAt.Set {
		more.More()
		j.WriteObjectField("updated_at")
		s.UpdatedAt.WriteJSON(j, json.WriteDateTime)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes EnvironmentApprovalsEnvironmentsItem json value to io.Writer.
func (s EnvironmentApprovalsEnvironmentsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EnvironmentApprovalsEnvironmentsItem json value from io.Reader.
func (s *EnvironmentApprovalsEnvironmentsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EnvironmentApprovalsEnvironmentsItem from json stream.
func (s *EnvironmentApprovalsEnvironmentsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EnvironmentApprovalsState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads EnvironmentApprovalsState from json stream.
func (s *EnvironmentApprovalsState) ReadJSON(i *json.Iterator) error {
	*s = EnvironmentApprovalsState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Feed) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CurrentUserActorURL.Set {
		more.More()
		j.WriteObjectField("current_user_actor_url")
		s.CurrentUserActorURL.WriteJSON(j)
	}

	if s.CurrentUserOrganizationURL.Set {
		more.More()
		j.WriteObjectField("current_user_organization_url")
		s.CurrentUserOrganizationURL.WriteJSON(j)
	}

	if s.CurrentUserOrganizationUrls != nil {
		more.More()
		j.WriteObjectField("current_user_organization_urls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CurrentUserOrganizationUrls {
			more.More()
			json.WriteURI(j, elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.CurrentUserPublicURL.Set {
		more.More()
		j.WriteObjectField("current_user_public_url")
		s.CurrentUserPublicURL.WriteJSON(j)
	}

	if s.CurrentUserURL.Set {
		more.More()
		j.WriteObjectField("current_user_url")
		s.CurrentUserURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("_links")
	s.Links.WriteJSON(j)

	if s.SecurityAdvisoriesURL.Set {
		more.More()
		j.WriteObjectField("security_advisories_url")
		s.SecurityAdvisoriesURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("timeline_url")
	j.WriteString(s.TimelineURL)

	more.More()
	j.WriteObjectField("user_url")
	j.WriteString(s.UserURL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Feed json value to io.Writer.
func (s Feed) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Feed json value from io.Reader.
func (s *Feed) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Feed from json stream.
func (s *Feed) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "current_user_actor_url":
			s.CurrentUserActorURL.Reset()
			if err := s.CurrentUserActorURL.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentUserActorURL", err.Error())
				return false
			}
			return true
		case "current_user_organization_url":
			s.CurrentUserOrganizationURL.Reset()
			if err := s.CurrentUserOrganizationURL.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentUserOrganizationURL", err.Error())
				return false
			}
			return true
		case "current_user_organization_urls":
			// Unsupported kind "array" for field "CurrentUserOrganizationUrls".
			i.Skip()
			return true
		case "current_user_public_url":
			s.CurrentUserPublicURL.Reset()
			if err := s.CurrentUserPublicURL.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentUserPublicURL", err.Error())
				return false
			}
			return true
		case "current_user_url":
			s.CurrentUserURL.Reset()
			if err := s.CurrentUserURL.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentUserURL", err.Error())
				return false
			}
			return true
		case "_links":
			if err := s.Links.ReadJSON(i); err != nil {
				i.ReportError("Field Links", err.Error())
				return false
			}
			return true
		case "security_advisories_url":
			s.SecurityAdvisoriesURL.Reset()
			if err := s.SecurityAdvisoriesURL.ReadJSON(i); err != nil {
				i.ReportError("Field SecurityAdvisoriesURL", err.Error())
				return false
			}
			return true
		case "timeline_url":
			s.TimelineURL = i.ReadString()
			return i.Error == nil
		case "user_url":
			s.UserURL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FeedLinks) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CurrentUser.Set {
		more.More()
		j.WriteObjectField("current_user")
		s.CurrentUser.WriteJSON(j)
	}

	if s.CurrentUserActor.Set {
		more.More()
		j.WriteObjectField("current_user_actor")
		s.CurrentUserActor.WriteJSON(j)
	}

	if s.CurrentUserOrganization.Set {
		more.More()
		j.WriteObjectField("current_user_organization")
		s.CurrentUserOrganization.WriteJSON(j)
	}

	if s.CurrentUserOrganizations != nil {
		more.More()
		j.WriteObjectField("current_user_organizations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CurrentUserOrganizations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.CurrentUserPublic.Set {
		more.More()
		j.WriteObjectField("current_user_public")
		s.CurrentUserPublic.WriteJSON(j)
	}

	if s.SecurityAdvisories.Set {
		more.More()
		j.WriteObjectField("security_advisories")
		s.SecurityAdvisories.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("timeline")
	s.Timeline.WriteJSON(j)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes FeedLinks json value to io.Writer.
func (s FeedLinks) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FeedLinks json value from io.Reader.
func (s *FeedLinks) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FeedLinks from json stream.
func (s *FeedLinks) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "current_user":
			s.CurrentUser.Reset()
			if err := s.CurrentUser.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentUser", err.Error())
				return false
			}
			return true
		case "current_user_actor":
			s.CurrentUserActor.Reset()
			if err := s.CurrentUserActor.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentUserActor", err.Error())
				return false
			}
			return true
		case "current_user_organization":
			s.CurrentUserOrganization.Reset()
			if err := s.CurrentUserOrganization.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentUserOrganization", err.Error())
				return false
			}
			return true
		case "current_user_organizations":
			// Unsupported kind "array" for field "CurrentUserOrganizations".
			i.Skip()
			return true
		case "current_user_public":
			s.CurrentUserPublic.Reset()
			if err := s.CurrentUserPublic.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentUserPublic", err.Error())
				return false
			}
			return true
		case "security_advisories":
			s.SecurityAdvisories.Reset()
			if err := s.SecurityAdvisories.ReadJSON(i); err != nil {
				i.ReportError("Field SecurityAdvisories", err.Error())
				return false
			}
			return true
		case "timeline":
			if err := s.Timeline.ReadJSON(i); err != nil {
				i.ReportError("Field Timeline", err.Error())
				return false
			}
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FileCommit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("commit")
	s.Commit.WriteJSON(j)

	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes FileCommit json value to io.Writer.
func (s FileCommit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FileCommit json value from io.Reader.
func (s *FileCommit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FileCommit from json stream.
func (s *FileCommit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commit":
			if err := s.Commit.ReadJSON(i); err != nil {
				i.ReportError("Field Commit", err.Error())
				return false
			}
			return true
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Author.Set {
		more.More()
		j.WriteObjectField("author")
		s.Author.WriteJSON(j)
	}

	if s.Committer.Set {
		more.More()
		j.WriteObjectField("committer")
		s.Committer.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.Parents != nil {
		more.More()
		j.WriteObjectField("parents")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Parents {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Sha.Set {
		more.More()
		j.WriteObjectField("sha")
		s.Sha.WriteJSON(j)
	}

	if s.Tree.Set {
		more.More()
		j.WriteObjectField("tree")
		s.Tree.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	if s.Verification.Set {
		more.More()
		j.WriteObjectField("verification")
		s.Verification.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FileCommitCommit json value to io.Writer.
func (s FileCommitCommit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FileCommitCommit json value from io.Reader.
func (s *FileCommitCommit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FileCommitCommit from json stream.
func (s *FileCommitCommit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			s.Author.Reset()
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "committer":
			s.Committer.Reset()
			if err := s.Committer.ReadJSON(i); err != nil {
				i.ReportError("Field Committer", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "parents":
			// Unsupported kind "array" for field "Parents".
			i.Skip()
			return true
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(i); err != nil {
				i.ReportError("Field Sha", err.Error())
				return false
			}
			return true
		case "tree":
			s.Tree.Reset()
			if err := s.Tree.ReadJSON(i); err != nil {
				i.ReportError("Field Tree", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		case "verification":
			s.Verification.Reset()
			if err := s.Verification.ReadJSON(i); err != nil {
				i.ReportError("Field Verification", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommitAuthor) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Date.Set {
		more.More()
		j.WriteObjectField("date")
		s.Date.WriteJSON(j)
	}

	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FileCommitCommitAuthor json value to io.Writer.
func (s FileCommitCommitAuthor) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FileCommitCommitAuthor json value from io.Reader.
func (s *FileCommitCommitAuthor) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FileCommitCommitAuthor from json stream.
func (s *FileCommitCommitAuthor) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(i); err != nil {
				i.ReportError("Field Date", err.Error())
				return false
			}
			return true
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommitCommitter) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Date.Set {
		more.More()
		j.WriteObjectField("date")
		s.Date.WriteJSON(j)
	}

	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FileCommitCommitCommitter json value to io.Writer.
func (s FileCommitCommitCommitter) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FileCommitCommitCommitter json value from io.Reader.
func (s *FileCommitCommitCommitter) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FileCommitCommitCommitter from json stream.
func (s *FileCommitCommitCommitter) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(i); err != nil {
				i.ReportError("Field Date", err.Error())
				return false
			}
			return true
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommitParentsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.Sha.Set {
		more.More()
		j.WriteObjectField("sha")
		s.Sha.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FileCommitCommitParentsItem json value to io.Writer.
func (s FileCommitCommitParentsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FileCommitCommitParentsItem json value from io.Reader.
func (s *FileCommitCommitParentsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FileCommitCommitParentsItem from json stream.
func (s *FileCommitCommitParentsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(i); err != nil {
				i.ReportError("Field Sha", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommitTree) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Sha.Set {
		more.More()
		j.WriteObjectField("sha")
		s.Sha.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FileCommitCommitTree json value to io.Writer.
func (s FileCommitCommitTree) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FileCommitCommitTree json value from io.Reader.
func (s *FileCommitCommitTree) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FileCommitCommitTree from json stream.
func (s *FileCommitCommitTree) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(i); err != nil {
				i.ReportError("Field Sha", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FileCommitCommitVerification) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Payload.Set {
		more.More()
		j.WriteObjectField("payload")
		s.Payload.WriteJSON(j)
	}

	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}

	if s.Signature.Set {
		more.More()
		j.WriteObjectField("signature")
		s.Signature.WriteJSON(j)
	}

	if s.Verified.Set {
		more.More()
		j.WriteObjectField("verified")
		s.Verified.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FileCommitCommitVerification json value to io.Writer.
func (s FileCommitCommitVerification) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FileCommitCommitVerification json value from io.Reader.
func (s *FileCommitCommitVerification) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FileCommitCommitVerification from json stream.
func (s *FileCommitCommitVerification) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "payload":
			s.Payload.Reset()
			if err := s.Payload.ReadJSON(i); err != nil {
				i.ReportError("Field Payload", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "signature":
			s.Signature.Reset()
			if err := s.Signature.ReadJSON(i); err != nil {
				i.ReportError("Field Signature", err.Error())
				return false
			}
			return true
		case "verified":
			s.Verified.Reset()
			if err := s.Verified.ReadJSON(i); err != nil {
				i.ReportError("Field Verified", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FileCommitContent) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DownloadURL.Set {
		more.More()
		j.WriteObjectField("download_url")
		s.DownloadURL.WriteJSON(j)
	}

	if s.GitURL.Set {
		more.More()
		j.WriteObjectField("git_url")
		s.GitURL.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.Links.Set {
		more.More()
		j.WriteObjectField("_links")
		s.Links.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}

	if s.Sha.Set {
		more.More()
		j.WriteObjectField("sha")
		s.Sha.WriteJSON(j)
	}

	if s.Size.Set {
		more.More()
		j.WriteObjectField("size")
		s.Size.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FileCommitContent json value to io.Writer.
func (s FileCommitContent) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FileCommitContent json value from io.Reader.
func (s *FileCommitContent) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FileCommitContent from json stream.
func (s *FileCommitContent) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "download_url":
			s.DownloadURL.Reset()
			if err := s.DownloadURL.ReadJSON(i); err != nil {
				i.ReportError("Field DownloadURL", err.Error())
				return false
			}
			return true
		case "git_url":
			s.GitURL.Reset()
			if err := s.GitURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitURL", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "_links":
			s.Links.Reset()
			if err := s.Links.ReadJSON(i); err != nil {
				i.ReportError("Field Links", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(i); err != nil {
				i.ReportError("Field Sha", err.Error())
				return false
			}
			return true
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(i); err != nil {
				i.ReportError("Field Size", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FileCommitContentLinks) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Git.Set {
		more.More()
		j.WriteObjectField("git")
		s.Git.WriteJSON(j)
	}

	if s.HTML.Set {
		more.More()
		j.WriteObjectField("html")
		s.HTML.WriteJSON(j)
	}

	if s.Self.Set {
		more.More()
		j.WriteObjectField("self")
		s.Self.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FileCommitContentLinks json value to io.Writer.
func (s FileCommitContentLinks) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FileCommitContentLinks json value from io.Reader.
func (s *FileCommitContentLinks) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FileCommitContentLinks from json stream.
func (s *FileCommitContentLinks) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "git":
			s.Git.Reset()
			if err := s.Git.ReadJSON(i); err != nil {
				i.ReportError("Field Git", err.Error())
				return false
			}
			return true
		case "html":
			s.HTML.Reset()
			if err := s.HTML.ReadJSON(i); err != nil {
				i.ReportError("Field HTML", err.Error())
				return false
			}
			return true
		case "self":
			s.Self.Reset()
			if err := s.Self.ReadJSON(i); err != nil {
				i.ReportError("Field Self", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ForbiddenGist) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Block.Set {
		more.More()
		j.WriteObjectField("block")
		s.Block.WriteJSON(j)
	}

	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ForbiddenGist json value to io.Writer.
func (s ForbiddenGist) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ForbiddenGist json value from io.Reader.
func (s *ForbiddenGist) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ForbiddenGist from json stream.
func (s *ForbiddenGist) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "block":
			s.Block.Reset()
			if err := s.Block.ReadJSON(i); err != nil {
				i.ReportError("Field Block", err.Error())
				return false
			}
			return true
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ForbiddenGistBlock) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CreatedAt.Set {
		more.More()
		j.WriteObjectField("created_at")
		s.CreatedAt.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ForbiddenGistBlock json value to io.Writer.
func (s ForbiddenGistBlock) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ForbiddenGistBlock json value from io.Reader.
func (s *ForbiddenGistBlock) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ForbiddenGistBlock from json stream.
func (s *ForbiddenGistBlock) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(i); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FullRepository) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowAutoMerge.Set {
		more.More()
		j.WriteObjectField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(j)
	}

	if s.AllowForking.Set {
		more.More()
		j.WriteObjectField("allow_forking")
		s.AllowForking.WriteJSON(j)
	}

	if s.AllowMergeCommit.Set {
		more.More()
		j.WriteObjectField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(j)
	}

	if s.AllowRebaseMerge.Set {
		more.More()
		j.WriteObjectField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(j)
	}

	if s.AllowSquashMerge.Set {
		more.More()
		j.WriteObjectField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(j)
	}

	if s.AnonymousAccessEnabled.Set {
		more.More()
		j.WriteObjectField("anonymous_access_enabled")
		s.AnonymousAccessEnabled.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("archive_url")
	j.WriteString(s.ArchiveURL)

	more.More()
	j.WriteObjectField("archived")
	j.WriteBool(s.Archived)

	more.More()
	j.WriteObjectField("assignees_url")
	j.WriteString(s.AssigneesURL)

	more.More()
	j.WriteObjectField("blobs_url")
	j.WriteString(s.BlobsURL)

	more.More()
	j.WriteObjectField("branches_url")
	j.WriteString(s.BranchesURL)

	more.More()
	j.WriteObjectField("clone_url")
	j.WriteString(s.CloneURL)

	if s.CodeOfConduct.Set {
		more.More()
		j.WriteObjectField("code_of_conduct")
		s.CodeOfConduct.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("collaborators_url")
	j.WriteString(s.CollaboratorsURL)

	more.More()
	j.WriteObjectField("comments_url")
	j.WriteString(s.CommentsURL)

	more.More()
	j.WriteObjectField("commits_url")
	j.WriteString(s.CommitsURL)

	more.More()
	j.WriteObjectField("compare_url")
	j.WriteString(s.CompareURL)

	more.More()
	j.WriteObjectField("contents_url")
	j.WriteString(s.ContentsURL)

	more.More()
	j.WriteObjectField("contributors_url")
	json.WriteURI(j, s.ContributorsURL)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("default_branch")
	j.WriteString(s.DefaultBranch)

	if s.DeleteBranchOnMerge.Set {
		more.More()
		j.WriteObjectField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("deployments_url")
	json.WriteURI(j, s.DeploymentsURL)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("disabled")
	j.WriteBool(s.Disabled)

	more.More()
	j.WriteObjectField("downloads_url")
	json.WriteURI(j, s.DownloadsURL)

	more.More()
	j.WriteObjectField("events_url")
	json.WriteURI(j, s.EventsURL)

	more.More()
	j.WriteObjectField("fork")
	j.WriteBool(s.Fork)

	more.More()
	j.WriteObjectField("forks")
	j.WriteInt(s.Forks)

	more.More()
	j.WriteObjectField("forks_count")
	j.WriteInt(s.ForksCount)

	more.More()
	j.WriteObjectField("forks_url")
	json.WriteURI(j, s.ForksURL)

	more.More()
	j.WriteObjectField("full_name")
	j.WriteString(s.FullName)

	more.More()
	j.WriteObjectField("git_commits_url")
	j.WriteString(s.GitCommitsURL)

	more.More()
	j.WriteObjectField("git_refs_url")
	j.WriteString(s.GitRefsURL)

	more.More()
	j.WriteObjectField("git_tags_url")
	j.WriteString(s.GitTagsURL)

	more.More()
	j.WriteObjectField("git_url")
	j.WriteString(s.GitURL)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("has_downloads")
	j.WriteBool(s.HasDownloads)

	more.More()
	j.WriteObjectField("has_issues")
	j.WriteBool(s.HasIssues)

	more.More()
	j.WriteObjectField("has_pages")
	j.WriteBool(s.HasPages)

	more.More()
	j.WriteObjectField("has_projects")
	j.WriteBool(s.HasProjects)

	more.More()
	j.WriteObjectField("has_wiki")
	j.WriteBool(s.HasWiki)

	more.More()
	j.WriteObjectField("homepage")
	s.Homepage.WriteJSON(j)

	more.More()
	j.WriteObjectField("hooks_url")
	json.WriteURI(j, s.HooksURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.IsTemplate.Set {
		more.More()
		j.WriteObjectField("is_template")
		s.IsTemplate.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("issue_comment_url")
	j.WriteString(s.IssueCommentURL)

	more.More()
	j.WriteObjectField("issue_events_url")
	j.WriteString(s.IssueEventsURL)

	more.More()
	j.WriteObjectField("issues_url")
	j.WriteString(s.IssuesURL)

	more.More()
	j.WriteObjectField("keys_url")
	j.WriteString(s.KeysURL)

	more.More()
	j.WriteObjectField("labels_url")
	j.WriteString(s.LabelsURL)

	more.More()
	j.WriteObjectField("language")
	s.Language.WriteJSON(j)

	more.More()
	j.WriteObjectField("languages_url")
	json.WriteURI(j, s.LanguagesURL)

	more.More()
	j.WriteObjectField("license")
	s.License.WriteJSON(j)

	if s.MasterBranch.Set {
		more.More()
		j.WriteObjectField("master_branch")
		s.MasterBranch.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("merges_url")
	json.WriteURI(j, s.MergesURL)

	more.More()
	j.WriteObjectField("milestones_url")
	j.WriteString(s.MilestonesURL)

	more.More()
	j.WriteObjectField("mirror_url")
	s.MirrorURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("network_count")
	j.WriteInt(s.NetworkCount)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("notifications_url")
	j.WriteString(s.NotificationsURL)

	more.More()
	j.WriteObjectField("open_issues")
	j.WriteInt(s.OpenIssues)

	more.More()
	j.WriteObjectField("open_issues_count")
	j.WriteInt(s.OpenIssuesCount)

	if s.Organization.Set {
		more.More()
		j.WriteObjectField("organization")
		s.Organization.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("owner")
	s.Owner.WriteJSON(j)

	if s.Parent.Set {
		more.More()
		j.WriteObjectField("parent")
		s.Parent.WriteJSON(j)
	}

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("private")
	j.WriteBool(s.Private)

	more.More()
	j.WriteObjectField("pulls_url")
	j.WriteString(s.PullsURL)

	more.More()
	j.WriteObjectField("pushed_at")
	json.WriteDateTime(j, s.PushedAt)

	more.More()
	j.WriteObjectField("releases_url")
	j.WriteString(s.ReleasesURL)

	more.More()
	j.WriteObjectField("ssh_url")
	j.WriteString(s.SSHURL)

	if s.SecurityAndAnalysis.Set {
		more.More()
		j.WriteObjectField("security_and_analysis")
		s.SecurityAndAnalysis.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("size")
	j.WriteInt(s.Size)

	if s.Source.Set {
		more.More()
		j.WriteObjectField("source")
		s.Source.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("stargazers_count")
	j.WriteInt(s.StargazersCount)

	more.More()
	j.WriteObjectField("stargazers_url")
	json.WriteURI(j, s.StargazersURL)

	more.More()
	j.WriteObjectField("statuses_url")
	j.WriteString(s.StatusesURL)

	more.More()
	j.WriteObjectField("subscribers_count")
	j.WriteInt(s.SubscribersCount)

	more.More()
	j.WriteObjectField("subscribers_url")
	json.WriteURI(j, s.SubscribersURL)

	more.More()
	j.WriteObjectField("subscription_url")
	json.WriteURI(j, s.SubscriptionURL)

	more.More()
	j.WriteObjectField("svn_url")
	json.WriteURI(j, s.SvnURL)

	more.More()
	j.WriteObjectField("tags_url")
	json.WriteURI(j, s.TagsURL)

	more.More()
	j.WriteObjectField("teams_url")
	json.WriteURI(j, s.TeamsURL)

	if s.TempCloneToken.Set {
		more.More()
		j.WriteObjectField("temp_clone_token")
		s.TempCloneToken.WriteJSON(j)
	}

	if s.TemplateRepository.Set {
		more.More()
		j.WriteObjectField("template_repository")
		s.TemplateRepository.WriteJSON(j)
	}

	if s.Topics != nil {
		more.More()
		j.WriteObjectField("topics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Topics {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("trees_url")
	j.WriteString(s.TreesURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("watchers")
	j.WriteInt(s.Watchers)

	more.More()
	j.WriteObjectField("watchers_count")
	j.WriteInt(s.WatchersCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes FullRepository json value to io.Writer.
func (s FullRepository) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FullRepository json value from io.Reader.
func (s *FullRepository) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FullRepository from json stream.
func (s *FullRepository) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowAutoMerge", err.Error())
				return false
			}
			return true
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(i); err != nil {
				i.ReportError("Field AllowForking", err.Error())
				return false
			}
			return true
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(i); err != nil {
				i.ReportError("Field AllowMergeCommit", err.Error())
				return false
			}
			return true
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowRebaseMerge", err.Error())
				return false
			}
			return true
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSquashMerge", err.Error())
				return false
			}
			return true
		case "anonymous_access_enabled":
			s.AnonymousAccessEnabled.Reset()
			if err := s.AnonymousAccessEnabled.ReadJSON(i); err != nil {
				i.ReportError("Field AnonymousAccessEnabled", err.Error())
				return false
			}
			return true
		case "archive_url":
			s.ArchiveURL = i.ReadString()
			return i.Error == nil
		case "archived":
			s.Archived = i.ReadBool()
			return i.Error == nil
		case "assignees_url":
			s.AssigneesURL = i.ReadString()
			return i.Error == nil
		case "blobs_url":
			s.BlobsURL = i.ReadString()
			return i.Error == nil
		case "branches_url":
			s.BranchesURL = i.ReadString()
			return i.Error == nil
		case "clone_url":
			s.CloneURL = i.ReadString()
			return i.Error == nil
		case "code_of_conduct":
			s.CodeOfConduct.Reset()
			if err := s.CodeOfConduct.ReadJSON(i); err != nil {
				i.ReportError("Field CodeOfConduct", err.Error())
				return false
			}
			return true
		case "collaborators_url":
			s.CollaboratorsURL = i.ReadString()
			return i.Error == nil
		case "comments_url":
			s.CommentsURL = i.ReadString()
			return i.Error == nil
		case "commits_url":
			s.CommitsURL = i.ReadString()
			return i.Error == nil
		case "compare_url":
			s.CompareURL = i.ReadString()
			return i.Error == nil
		case "contents_url":
			s.ContentsURL = i.ReadString()
			return i.Error == nil
		case "contributors_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ContributorsURL", err.Error())
				return false
			}
			s.ContributorsURL = v
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "default_branch":
			s.DefaultBranch = i.ReadString()
			return i.Error == nil
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(i); err != nil {
				i.ReportError("Field DeleteBranchOnMerge", err.Error())
				return false
			}
			return true
		case "deployments_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DeploymentsURL", err.Error())
				return false
			}
			s.DeploymentsURL = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "disabled":
			s.Disabled = i.ReadBool()
			return i.Error == nil
		case "downloads_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DownloadsURL", err.Error())
				return false
			}
			s.DownloadsURL = v
			return true
		case "events_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			s.EventsURL = v
			return true
		case "fork":
			s.Fork = i.ReadBool()
			return i.Error == nil
		case "forks":
			s.Forks = i.ReadInt()
			return i.Error == nil
		case "forks_count":
			s.ForksCount = i.ReadInt()
			return i.Error == nil
		case "forks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ForksURL", err.Error())
				return false
			}
			s.ForksURL = v
			return true
		case "full_name":
			s.FullName = i.ReadString()
			return i.Error == nil
		case "git_commits_url":
			s.GitCommitsURL = i.ReadString()
			return i.Error == nil
		case "git_refs_url":
			s.GitRefsURL = i.ReadString()
			return i.Error == nil
		case "git_tags_url":
			s.GitTagsURL = i.ReadString()
			return i.Error == nil
		case "git_url":
			s.GitURL = i.ReadString()
			return i.Error == nil
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "has_downloads":
			s.HasDownloads = i.ReadBool()
			return i.Error == nil
		case "has_issues":
			s.HasIssues = i.ReadBool()
			return i.Error == nil
		case "has_pages":
			s.HasPages = i.ReadBool()
			return i.Error == nil
		case "has_projects":
			s.HasProjects = i.ReadBool()
			return i.Error == nil
		case "has_wiki":
			s.HasWiki = i.ReadBool()
			return i.Error == nil
		case "homepage":
			if err := s.Homepage.ReadJSON(i); err != nil {
				i.ReportError("Field Homepage", err.Error())
				return false
			}
			return true
		case "hooks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HooksURL", err.Error())
				return false
			}
			s.HooksURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IsTemplate", err.Error())
				return false
			}
			return true
		case "issue_comment_url":
			s.IssueCommentURL = i.ReadString()
			return i.Error == nil
		case "issue_events_url":
			s.IssueEventsURL = i.ReadString()
			return i.Error == nil
		case "issues_url":
			s.IssuesURL = i.ReadString()
			return i.Error == nil
		case "keys_url":
			s.KeysURL = i.ReadString()
			return i.Error == nil
		case "labels_url":
			s.LabelsURL = i.ReadString()
			return i.Error == nil
		case "language":
			if err := s.Language.ReadJSON(i); err != nil {
				i.ReportError("Field Language", err.Error())
				return false
			}
			return true
		case "languages_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field LanguagesURL", err.Error())
				return false
			}
			s.LanguagesURL = v
			return true
		case "license":
			if err := s.License.ReadJSON(i); err != nil {
				i.ReportError("Field License", err.Error())
				return false
			}
			return true
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(i); err != nil {
				i.ReportError("Field MasterBranch", err.Error())
				return false
			}
			return true
		case "merges_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field MergesURL", err.Error())
				return false
			}
			s.MergesURL = v
			return true
		case "milestones_url":
			s.MilestonesURL = i.ReadString()
			return i.Error == nil
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(i); err != nil {
				i.ReportError("Field MirrorURL", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "network_count":
			s.NetworkCount = i.ReadInt()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "notifications_url":
			s.NotificationsURL = i.ReadString()
			return i.Error == nil
		case "open_issues":
			s.OpenIssues = i.ReadInt()
			return i.Error == nil
		case "open_issues_count":
			s.OpenIssuesCount = i.ReadInt()
			return i.Error == nil
		case "organization":
			s.Organization.Reset()
			if err := s.Organization.ReadJSON(i); err != nil {
				i.ReportError("Field Organization", err.Error())
				return false
			}
			return true
		case "owner":
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "parent":
			s.Parent.Reset()
			if err := s.Parent.ReadJSON(i); err != nil {
				i.ReportError("Field Parent", err.Error())
				return false
			}
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "private":
			s.Private = i.ReadBool()
			return i.Error == nil
		case "pulls_url":
			s.PullsURL = i.ReadString()
			return i.Error == nil
		case "pushed_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field PushedAt", err.Error())
				return false
			}
			s.PushedAt = v
			return true
		case "releases_url":
			s.ReleasesURL = i.ReadString()
			return i.Error == nil
		case "ssh_url":
			s.SSHURL = i.ReadString()
			return i.Error == nil
		case "security_and_analysis":
			s.SecurityAndAnalysis.Reset()
			if err := s.SecurityAndAnalysis.ReadJSON(i); err != nil {
				i.ReportError("Field SecurityAndAnalysis", err.Error())
				return false
			}
			return true
		case "size":
			s.Size = i.ReadInt()
			return i.Error == nil
		case "source":
			s.Source.Reset()
			if err := s.Source.ReadJSON(i); err != nil {
				i.ReportError("Field Source", err.Error())
				return false
			}
			return true
		case "stargazers_count":
			s.StargazersCount = i.ReadInt()
			return i.Error == nil
		case "stargazers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field StargazersURL", err.Error())
				return false
			}
			s.StargazersURL = v
			return true
		case "statuses_url":
			s.StatusesURL = i.ReadString()
			return i.Error == nil
		case "subscribers_count":
			s.SubscribersCount = i.ReadInt()
			return i.Error == nil
		case "subscribers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscribersURL", err.Error())
				return false
			}
			s.SubscribersURL = v
			return true
		case "subscription_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscriptionURL", err.Error())
				return false
			}
			s.SubscriptionURL = v
			return true
		case "svn_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SvnURL", err.Error())
				return false
			}
			s.SvnURL = v
			return true
		case "tags_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TagsURL", err.Error())
				return false
			}
			s.TagsURL = v
			return true
		case "teams_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TeamsURL", err.Error())
				return false
			}
			s.TeamsURL = v
			return true
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(i); err != nil {
				i.ReportError("Field TempCloneToken", err.Error())
				return false
			}
			return true
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(i); err != nil {
				i.ReportError("Field TemplateRepository", err.Error())
				return false
			}
			return true
		case "topics":
			// Unsupported kind "array" for field "Topics".
			i.Skip()
			return true
		case "trees_url":
			s.TreesURL = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		case "watchers":
			s.Watchers = i.ReadInt()
			return i.Error == nil
		case "watchers_count":
			s.WatchersCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FullRepositoryPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admin")
	j.WriteBool(s.Admin)

	if s.Maintain.Set {
		more.More()
		j.WriteObjectField("maintain")
		s.Maintain.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("pull")
	j.WriteBool(s.Pull)

	more.More()
	j.WriteObjectField("push")
	j.WriteBool(s.Push)

	if s.Triage.Set {
		more.More()
		j.WriteObjectField("triage")
		s.Triage.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FullRepositoryPermissions json value to io.Writer.
func (s FullRepositoryPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FullRepositoryPermissions json value from io.Reader.
func (s *FullRepositoryPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FullRepositoryPermissions from json stream.
func (s *FullRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admin":
			s.Admin = i.ReadBool()
			return i.Error == nil
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(i); err != nil {
				i.ReportError("Field Maintain", err.Error())
				return false
			}
			return true
		case "pull":
			s.Pull = i.ReadBool()
			return i.Error == nil
		case "push":
			s.Push = i.ReadBool()
			return i.Error == nil
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(i); err != nil {
				i.ReportError("Field Triage", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FullRepositorySecurityAndAnalysis) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AdvancedSecurity.Set {
		more.More()
		j.WriteObjectField("advanced_security")
		s.AdvancedSecurity.WriteJSON(j)
	}

	if s.SecretScanning.Set {
		more.More()
		j.WriteObjectField("secret_scanning")
		s.SecretScanning.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FullRepositorySecurityAndAnalysis json value to io.Writer.
func (s FullRepositorySecurityAndAnalysis) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FullRepositorySecurityAndAnalysis json value from io.Reader.
func (s *FullRepositorySecurityAndAnalysis) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FullRepositorySecurityAndAnalysis from json stream.
func (s *FullRepositorySecurityAndAnalysis) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "advanced_security":
			s.AdvancedSecurity.Reset()
			if err := s.AdvancedSecurity.ReadJSON(i); err != nil {
				i.ReportError("Field AdvancedSecurity", err.Error())
				return false
			}
			return true
		case "secret_scanning":
			s.SecretScanning.Reset()
			if err := s.SecretScanning.ReadJSON(i); err != nil {
				i.ReportError("Field SecretScanning", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FullRepositorySecurityAndAnalysisAdvancedSecurity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FullRepositorySecurityAndAnalysisAdvancedSecurity json value to io.Writer.
func (s FullRepositorySecurityAndAnalysisAdvancedSecurity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FullRepositorySecurityAndAnalysisAdvancedSecurity json value from io.Reader.
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FullRepositorySecurityAndAnalysisAdvancedSecurity from json stream.
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads FullRepositorySecurityAndAnalysisAdvancedSecurityStatus from json stream.
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) ReadJSON(i *json.Iterator) error {
	*s = FullRepositorySecurityAndAnalysisAdvancedSecurityStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FullRepositorySecurityAndAnalysisSecretScanning) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes FullRepositorySecurityAndAnalysisSecretScanning json value to io.Writer.
func (s FullRepositorySecurityAndAnalysisSecretScanning) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads FullRepositorySecurityAndAnalysisSecretScanning json value from io.Reader.
func (s *FullRepositorySecurityAndAnalysisSecretScanning) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads FullRepositorySecurityAndAnalysisSecretScanning from json stream.
func (s *FullRepositorySecurityAndAnalysisSecretScanning) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s FullRepositorySecurityAndAnalysisSecretScanningStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads FullRepositorySecurityAndAnalysisSecretScanningStatus from json stream.
func (s *FullRepositorySecurityAndAnalysisSecretScanningStatus) ReadJSON(i *json.Iterator) error {
	*s = FullRepositorySecurityAndAnalysisSecretScanningStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GistComment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author_association")
	s.AuthorAssociation.WriteJSON(j)

	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GistComment json value to io.Writer.
func (s GistComment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GistComment json value from io.Reader.
func (s *GistComment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GistComment from json stream.
func (s *GistComment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(i); err != nil {
				i.ReportError("Field AuthorAssociation", err.Error())
				return false
			}
			return true
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GistCommit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("change_status")
	s.ChangeStatus.WriteJSON(j)

	more.More()
	j.WriteObjectField("committed_at")
	json.WriteDateTime(j, s.CommittedAt)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	more.More()
	j.WriteObjectField("version")
	j.WriteString(s.Version)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GistCommit json value to io.Writer.
func (s GistCommit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GistCommit json value from io.Reader.
func (s *GistCommit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GistCommit from json stream.
func (s *GistCommit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "change_status":
			if err := s.ChangeStatus.ReadJSON(i); err != nil {
				i.ReportError("Field ChangeStatus", err.Error())
				return false
			}
			return true
		case "committed_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CommittedAt", err.Error())
				return false
			}
			s.CommittedAt = v
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		case "version":
			s.Version = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GistCommitChangeStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Additions.Set {
		more.More()
		j.WriteObjectField("additions")
		s.Additions.WriteJSON(j)
	}

	if s.Deletions.Set {
		more.More()
		j.WriteObjectField("deletions")
		s.Deletions.WriteJSON(j)
	}

	if s.Total.Set {
		more.More()
		j.WriteObjectField("total")
		s.Total.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes GistCommitChangeStatus json value to io.Writer.
func (s GistCommitChangeStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GistCommitChangeStatus json value from io.Reader.
func (s *GistCommitChangeStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GistCommitChangeStatus from json stream.
func (s *GistCommitChangeStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "additions":
			s.Additions.Reset()
			if err := s.Additions.ReadJSON(i); err != nil {
				i.ReportError("Field Additions", err.Error())
				return false
			}
			return true
		case "deletions":
			s.Deletions.Reset()
			if err := s.Deletions.ReadJSON(i); err != nil {
				i.ReportError("Field Deletions", err.Error())
				return false
			}
			return true
		case "total":
			s.Total.Reset()
			if err := s.Total.ReadJSON(i); err != nil {
				i.ReportError("Field Total", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GistsCreateCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GistsCreateCommentApplicationJSONRequest json value to io.Writer.
func (s GistsCreateCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GistsCreateCommentApplicationJSONRequest json value from io.Reader.
func (s *GistsCreateCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GistsCreateCommentApplicationJSONRequest from json stream.
func (s *GistsCreateCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GistsUpdateCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GistsUpdateCommentApplicationJSONRequest json value to io.Writer.
func (s GistsUpdateCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GistsUpdateCommentApplicationJSONRequest json value from io.Reader.
func (s *GistsUpdateCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GistsUpdateCommentApplicationJSONRequest from json stream.
func (s *GistsUpdateCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCommit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author")
	s.Author.WriteJSON(j)

	more.More()
	j.WriteObjectField("committer")
	s.Committer.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("parents")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Parents {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("tree")
	s.Tree.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("verification")
	s.Verification.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCommit json value to io.Writer.
func (s GitCommit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCommit json value from io.Reader.
func (s *GitCommit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCommit from json stream.
func (s *GitCommit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "committer":
			if err := s.Committer.ReadJSON(i); err != nil {
				i.ReportError("Field Committer", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "parents":
			// Unsupported kind "array" for field "Parents".
			i.Skip()
			return true
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "tree":
			if err := s.Tree.ReadJSON(i); err != nil {
				i.ReportError("Field Tree", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "verification":
			if err := s.Verification.ReadJSON(i); err != nil {
				i.ReportError("Field Verification", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCommitAuthor) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("date")
	json.WriteDateTime(j, s.Date)

	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCommitAuthor json value to io.Writer.
func (s GitCommitAuthor) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCommitAuthor json value from io.Reader.
func (s *GitCommitAuthor) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCommitAuthor from json stream.
func (s *GitCommitAuthor) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field Date", err.Error())
				return false
			}
			s.Date = v
			return true
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCommitCommitter) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("date")
	json.WriteDateTime(j, s.Date)

	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCommitCommitter json value to io.Writer.
func (s GitCommitCommitter) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCommitCommitter json value from io.Reader.
func (s *GitCommitCommitter) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCommitCommitter from json stream.
func (s *GitCommitCommitter) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field Date", err.Error())
				return false
			}
			s.Date = v
			return true
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCommitParentsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCommitParentsItem json value to io.Writer.
func (s GitCommitParentsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCommitParentsItem json value from io.Reader.
func (s *GitCommitParentsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCommitParentsItem from json stream.
func (s *GitCommitParentsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCommitTree) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCommitTree json value to io.Writer.
func (s GitCommitTree) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCommitTree json value from io.Reader.
func (s *GitCommitTree) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCommitTree from json stream.
func (s *GitCommitTree) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCommitVerification) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("payload")
	s.Payload.WriteJSON(j)

	more.More()
	j.WriteObjectField("reason")
	j.WriteString(s.Reason)

	more.More()
	j.WriteObjectField("signature")
	s.Signature.WriteJSON(j)

	more.More()
	j.WriteObjectField("verified")
	j.WriteBool(s.Verified)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCommitVerification json value to io.Writer.
func (s GitCommitVerification) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCommitVerification json value from io.Reader.
func (s *GitCommitVerification) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCommitVerification from json stream.
func (s *GitCommitVerification) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "payload":
			if err := s.Payload.ReadJSON(i); err != nil {
				i.ReportError("Field Payload", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason = i.ReadString()
			return i.Error == nil
		case "signature":
			if err := s.Signature.ReadJSON(i); err != nil {
				i.ReportError("Field Signature", err.Error())
				return false
			}
			return true
		case "verified":
			s.Verified = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateBlobApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	j.WriteString(s.Content)

	if s.Encoding.Set {
		more.More()
		j.WriteObjectField("encoding")
		s.Encoding.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCreateBlobApplicationJSONRequest json value to io.Writer.
func (s GitCreateBlobApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCreateBlobApplicationJSONRequest json value from io.Reader.
func (s *GitCreateBlobApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCreateBlobApplicationJSONRequest from json stream.
func (s *GitCreateBlobApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			s.Content = i.ReadString()
			return i.Error == nil
		case "encoding":
			s.Encoding.Reset()
			if err := s.Encoding.ReadJSON(i); err != nil {
				i.ReportError("Field Encoding", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateCommitApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Author.Set {
		more.More()
		j.WriteObjectField("author")
		s.Author.WriteJSON(j)
	}

	if s.Committer.Set {
		more.More()
		j.WriteObjectField("committer")
		s.Committer.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	if s.Parents != nil {
		more.More()
		j.WriteObjectField("parents")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Parents {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Signature.Set {
		more.More()
		j.WriteObjectField("signature")
		s.Signature.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("tree")
	j.WriteString(s.Tree)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCreateCommitApplicationJSONRequest json value to io.Writer.
func (s GitCreateCommitApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCreateCommitApplicationJSONRequest json value from io.Reader.
func (s *GitCreateCommitApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCreateCommitApplicationJSONRequest from json stream.
func (s *GitCreateCommitApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			s.Author.Reset()
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "committer":
			s.Committer.Reset()
			if err := s.Committer.ReadJSON(i); err != nil {
				i.ReportError("Field Committer", err.Error())
				return false
			}
			return true
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "parents":
			// Unsupported kind "array" for field "Parents".
			i.Skip()
			return true
		case "signature":
			s.Signature.Reset()
			if err := s.Signature.ReadJSON(i); err != nil {
				i.ReportError("Field Signature", err.Error())
				return false
			}
			return true
		case "tree":
			s.Tree = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateCommitApplicationJSONRequestAuthor) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Date.Set {
		more.More()
		j.WriteObjectField("date")
		s.Date.WriteJSON(j, json.WriteDateTime)
	}

	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCreateCommitApplicationJSONRequestAuthor json value to io.Writer.
func (s GitCreateCommitApplicationJSONRequestAuthor) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCreateCommitApplicationJSONRequestAuthor json value from io.Reader.
func (s *GitCreateCommitApplicationJSONRequestAuthor) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCreateCommitApplicationJSONRequestAuthor from json stream.
func (s *GitCreateCommitApplicationJSONRequestAuthor) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field Date", err.Error())
				return false
			}
			return true
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateCommitApplicationJSONRequestCommitter) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Date.Set {
		more.More()
		j.WriteObjectField("date")
		s.Date.WriteJSON(j, json.WriteDateTime)
	}

	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCreateCommitApplicationJSONRequestCommitter json value to io.Writer.
func (s GitCreateCommitApplicationJSONRequestCommitter) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCreateCommitApplicationJSONRequestCommitter json value from io.Reader.
func (s *GitCreateCommitApplicationJSONRequestCommitter) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCreateCommitApplicationJSONRequestCommitter from json stream.
func (s *GitCreateCommitApplicationJSONRequestCommitter) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field Date", err.Error())
				return false
			}
			return true
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateRefApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Key.Set {
		more.More()
		j.WriteObjectField("key")
		s.Key.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("ref")
	j.WriteString(s.Ref)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCreateRefApplicationJSONRequest json value to io.Writer.
func (s GitCreateRefApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCreateRefApplicationJSONRequest json value from io.Reader.
func (s *GitCreateRefApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCreateRefApplicationJSONRequest from json stream.
func (s *GitCreateRefApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key.Reset()
			if err := s.Key.ReadJSON(i); err != nil {
				i.ReportError("Field Key", err.Error())
				return false
			}
			return true
		case "ref":
			s.Ref = i.ReadString()
			return i.Error == nil
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTagApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	more.More()
	j.WriteObjectField("object")
	j.WriteString(s.Object)

	more.More()
	j.WriteObjectField("tag")
	j.WriteString(s.Tag)

	if s.Tagger.Set {
		more.More()
		j.WriteObjectField("tagger")
		s.Tagger.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("type")
	s.Type.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCreateTagApplicationJSONRequest json value to io.Writer.
func (s GitCreateTagApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCreateTagApplicationJSONRequest json value from io.Reader.
func (s *GitCreateTagApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCreateTagApplicationJSONRequest from json stream.
func (s *GitCreateTagApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "object":
			s.Object = i.ReadString()
			return i.Error == nil
		case "tag":
			s.Tag = i.ReadString()
			return i.Error == nil
		case "tagger":
			s.Tagger.Reset()
			if err := s.Tagger.ReadJSON(i); err != nil {
				i.ReportError("Field Tagger", err.Error())
				return false
			}
			return true
		case "type":
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTagApplicationJSONRequestTagger) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Date.Set {
		more.More()
		j.WriteObjectField("date")
		s.Date.WriteJSON(j, json.WriteDateTime)
	}

	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCreateTagApplicationJSONRequestTagger json value to io.Writer.
func (s GitCreateTagApplicationJSONRequestTagger) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCreateTagApplicationJSONRequestTagger json value from io.Reader.
func (s *GitCreateTagApplicationJSONRequestTagger) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCreateTagApplicationJSONRequestTagger from json stream.
func (s *GitCreateTagApplicationJSONRequestTagger) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field Date", err.Error())
				return false
			}
			return true
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTagApplicationJSONRequestType) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads GitCreateTagApplicationJSONRequestType from json stream.
func (s *GitCreateTagApplicationJSONRequestType) ReadJSON(i *json.Iterator) error {
	*s = GitCreateTagApplicationJSONRequestType(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTreeApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.BaseTree.Set {
		more.More()
		j.WriteObjectField("base_tree")
		s.BaseTree.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("tree")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Tree {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCreateTreeApplicationJSONRequest json value to io.Writer.
func (s GitCreateTreeApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCreateTreeApplicationJSONRequest json value from io.Reader.
func (s *GitCreateTreeApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCreateTreeApplicationJSONRequest from json stream.
func (s *GitCreateTreeApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "base_tree":
			s.BaseTree.Reset()
			if err := s.BaseTree.ReadJSON(i); err != nil {
				i.ReportError("Field BaseTree", err.Error())
				return false
			}
			return true
		case "tree":
			// Unsupported kind "array" for field "Tree".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTreeApplicationJSONRequestTreeItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Content.Set {
		more.More()
		j.WriteObjectField("content")
		s.Content.WriteJSON(j)
	}

	if s.Mode.Set {
		more.More()
		j.WriteObjectField("mode")
		s.Mode.WriteJSON(j)
	}

	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}

	if s.Sha.Set {
		more.More()
		j.WriteObjectField("sha")
		s.Sha.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitCreateTreeApplicationJSONRequestTreeItem json value to io.Writer.
func (s GitCreateTreeApplicationJSONRequestTreeItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitCreateTreeApplicationJSONRequestTreeItem json value from io.Reader.
func (s *GitCreateTreeApplicationJSONRequestTreeItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitCreateTreeApplicationJSONRequestTreeItem from json stream.
func (s *GitCreateTreeApplicationJSONRequestTreeItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			s.Content.Reset()
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(i); err != nil {
				i.ReportError("Field Mode", err.Error())
				return false
			}
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(i); err != nil {
				i.ReportError("Field Sha", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTreeApplicationJSONRequestTreeItemMode) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads GitCreateTreeApplicationJSONRequestTreeItemMode from json stream.
func (s *GitCreateTreeApplicationJSONRequestTreeItemMode) ReadJSON(i *json.Iterator) error {
	*s = GitCreateTreeApplicationJSONRequestTreeItemMode(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitCreateTreeApplicationJSONRequestTreeItemType) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads GitCreateTreeApplicationJSONRequestTreeItemType from json stream.
func (s *GitCreateTreeApplicationJSONRequestTreeItemType) ReadJSON(i *json.Iterator) error {
	*s = GitCreateTreeApplicationJSONRequestTreeItemType(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitRef) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("object")
	s.Object.WriteJSON(j)

	more.More()
	j.WriteObjectField("ref")
	j.WriteString(s.Ref)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitRef json value to io.Writer.
func (s GitRef) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitRef json value from io.Reader.
func (s *GitRef) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitRef from json stream.
func (s *GitRef) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "object":
			if err := s.Object.ReadJSON(i); err != nil {
				i.ReportError("Field Object", err.Error())
				return false
			}
			return true
		case "ref":
			s.Ref = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitRefObject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitRefObject json value to io.Writer.
func (s GitRefObject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitRefObject json value from io.Reader.
func (s *GitRefObject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitRefObject from json stream.
func (s *GitRefObject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitTag) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("object")
	s.Object.WriteJSON(j)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("tag")
	j.WriteString(s.Tag)

	more.More()
	j.WriteObjectField("tagger")
	s.Tagger.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	if s.Verification.Set {
		more.More()
		j.WriteObjectField("verification")
		s.Verification.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitTag json value to io.Writer.
func (s GitTag) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitTag json value from io.Reader.
func (s *GitTag) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitTag from json stream.
func (s *GitTag) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "object":
			if err := s.Object.ReadJSON(i); err != nil {
				i.ReportError("Field Object", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "tag":
			s.Tag = i.ReadString()
			return i.Error == nil
		case "tagger":
			if err := s.Tagger.ReadJSON(i); err != nil {
				i.ReportError("Field Tagger", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "verification":
			s.Verification.Reset()
			if err := s.Verification.ReadJSON(i); err != nil {
				i.ReportError("Field Verification", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitTagObject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitTagObject json value to io.Writer.
func (s GitTagObject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitTagObject json value from io.Reader.
func (s *GitTagObject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitTagObject from json stream.
func (s *GitTagObject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitTagTagger) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("date")
	j.WriteString(s.Date)

	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitTagTagger json value to io.Writer.
func (s GitTagTagger) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitTagTagger json value from io.Reader.
func (s *GitTagTagger) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitTagTagger from json stream.
func (s *GitTagTagger) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			s.Date = i.ReadString()
			return i.Error == nil
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitTree) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("tree")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Tree {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("truncated")
	j.WriteBool(s.Truncated)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitTree json value to io.Writer.
func (s GitTree) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitTree json value from io.Reader.
func (s *GitTree) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitTree from json stream.
func (s *GitTree) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "tree":
			// Unsupported kind "array" for field "Tree".
			i.Skip()
			return true
		case "truncated":
			s.Truncated = i.ReadBool()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitTreeTreeItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Mode.Set {
		more.More()
		j.WriteObjectField("mode")
		s.Mode.WriteJSON(j)
	}

	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}

	if s.Sha.Set {
		more.More()
		j.WriteObjectField("sha")
		s.Sha.WriteJSON(j)
	}

	if s.Size.Set {
		more.More()
		j.WriteObjectField("size")
		s.Size.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitTreeTreeItem json value to io.Writer.
func (s GitTreeTreeItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitTreeTreeItem json value from io.Reader.
func (s *GitTreeTreeItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitTreeTreeItem from json stream.
func (s *GitTreeTreeItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(i); err != nil {
				i.ReportError("Field Mode", err.Error())
				return false
			}
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(i); err != nil {
				i.ReportError("Field Sha", err.Error())
				return false
			}
			return true
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(i); err != nil {
				i.ReportError("Field Size", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitUpdateRefApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Force.Set {
		more.More()
		j.WriteObjectField("force")
		s.Force.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitUpdateRefApplicationJSONRequest json value to io.Writer.
func (s GitUpdateRefApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitUpdateRefApplicationJSONRequest json value from io.Reader.
func (s *GitUpdateRefApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitUpdateRefApplicationJSONRequest from json stream.
func (s *GitUpdateRefApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "force":
			s.Force.Reset()
			if err := s.Force.ReadJSON(i); err != nil {
				i.ReportError("Field Force", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GitignoreTemplate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("source")
	j.WriteString(s.Source)

	j.WriteObjectEnd()
}

// WriteJSONTo writes GitignoreTemplate json value to io.Writer.
func (s GitignoreTemplate) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GitignoreTemplate json value from io.Reader.
func (s *GitignoreTemplate) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GitignoreTemplate from json stream.
func (s *GitignoreTemplate) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "source":
			s.Source = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GpgKey) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("can_certify")
	j.WriteBool(s.CanCertify)

	more.More()
	j.WriteObjectField("can_encrypt_comms")
	j.WriteBool(s.CanEncryptComms)

	more.More()
	j.WriteObjectField("can_encrypt_storage")
	j.WriteBool(s.CanEncryptStorage)

	more.More()
	j.WriteObjectField("can_sign")
	j.WriteBool(s.CanSign)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("emails")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Emails {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("expires_at")
	s.ExpiresAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("key_id")
	j.WriteString(s.KeyID)

	more.More()
	j.WriteObjectField("primary_key_id")
	s.PrimaryKeyID.WriteJSON(j)

	more.More()
	j.WriteObjectField("public_key")
	j.WriteString(s.PublicKey)

	more.More()
	j.WriteObjectField("raw_key")
	s.RawKey.WriteJSON(j)

	more.More()
	j.WriteObjectField("subkeys")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Subkeys {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes GpgKey json value to io.Writer.
func (s GpgKey) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GpgKey json value from io.Reader.
func (s *GpgKey) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GpgKey from json stream.
func (s *GpgKey) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_certify":
			s.CanCertify = i.ReadBool()
			return i.Error == nil
		case "can_encrypt_comms":
			s.CanEncryptComms = i.ReadBool()
			return i.Error == nil
		case "can_encrypt_storage":
			s.CanEncryptStorage = i.ReadBool()
			return i.Error == nil
		case "can_sign":
			s.CanSign = i.ReadBool()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "emails":
			// Unsupported kind "array" for field "Emails".
			i.Skip()
			return true
		case "expires_at":
			if err := s.ExpiresAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field ExpiresAt", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "key_id":
			s.KeyID = i.ReadString()
			return i.Error == nil
		case "primary_key_id":
			if err := s.PrimaryKeyID.ReadJSON(i); err != nil {
				i.ReportError("Field PrimaryKeyID", err.Error())
				return false
			}
			return true
		case "public_key":
			s.PublicKey = i.ReadString()
			return i.Error == nil
		case "raw_key":
			if err := s.RawKey.ReadJSON(i); err != nil {
				i.ReportError("Field RawKey", err.Error())
				return false
			}
			return true
		case "subkeys":
			// Unsupported kind "array" for field "Subkeys".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GpgKeyEmailsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.Verified.Set {
		more.More()
		j.WriteObjectField("verified")
		s.Verified.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes GpgKeyEmailsItem json value to io.Writer.
func (s GpgKeyEmailsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GpgKeyEmailsItem json value from io.Reader.
func (s *GpgKeyEmailsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GpgKeyEmailsItem from json stream.
func (s *GpgKeyEmailsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "verified":
			s.Verified.Reset()
			if err := s.Verified.ReadJSON(i); err != nil {
				i.ReportError("Field Verified", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GpgKeySubkeysItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CanCertify.Set {
		more.More()
		j.WriteObjectField("can_certify")
		s.CanCertify.WriteJSON(j)
	}

	if s.CanEncryptComms.Set {
		more.More()
		j.WriteObjectField("can_encrypt_comms")
		s.CanEncryptComms.WriteJSON(j)
	}

	if s.CanEncryptStorage.Set {
		more.More()
		j.WriteObjectField("can_encrypt_storage")
		s.CanEncryptStorage.WriteJSON(j)
	}

	if s.CanSign.Set {
		more.More()
		j.WriteObjectField("can_sign")
		s.CanSign.WriteJSON(j)
	}

	if s.CreatedAt.Set {
		more.More()
		j.WriteObjectField("created_at")
		s.CreatedAt.WriteJSON(j)
	}

	if s.Emails != nil {
		more.More()
		j.WriteObjectField("emails")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Emails {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.ExpiresAt.Set {
		more.More()
		j.WriteObjectField("expires_at")
		s.ExpiresAt.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.KeyID.Set {
		more.More()
		j.WriteObjectField("key_id")
		s.KeyID.WriteJSON(j)
	}

	if s.PrimaryKeyID.Set {
		more.More()
		j.WriteObjectField("primary_key_id")
		s.PrimaryKeyID.WriteJSON(j)
	}

	if s.PublicKey.Set {
		more.More()
		j.WriteObjectField("public_key")
		s.PublicKey.WriteJSON(j)
	}

	if s.RawKey.Set {
		more.More()
		j.WriteObjectField("raw_key")
		s.RawKey.WriteJSON(j)
	}

	if s.Subkeys != nil {
		more.More()
		j.WriteObjectField("subkeys")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Subkeys {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes GpgKeySubkeysItem json value to io.Writer.
func (s GpgKeySubkeysItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GpgKeySubkeysItem json value from io.Reader.
func (s *GpgKeySubkeysItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GpgKeySubkeysItem from json stream.
func (s *GpgKeySubkeysItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_certify":
			s.CanCertify.Reset()
			if err := s.CanCertify.ReadJSON(i); err != nil {
				i.ReportError("Field CanCertify", err.Error())
				return false
			}
			return true
		case "can_encrypt_comms":
			s.CanEncryptComms.Reset()
			if err := s.CanEncryptComms.ReadJSON(i); err != nil {
				i.ReportError("Field CanEncryptComms", err.Error())
				return false
			}
			return true
		case "can_encrypt_storage":
			s.CanEncryptStorage.Reset()
			if err := s.CanEncryptStorage.ReadJSON(i); err != nil {
				i.ReportError("Field CanEncryptStorage", err.Error())
				return false
			}
			return true
		case "can_sign":
			s.CanSign.Reset()
			if err := s.CanSign.ReadJSON(i); err != nil {
				i.ReportError("Field CanSign", err.Error())
				return false
			}
			return true
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(i); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "emails":
			// Unsupported kind "array" for field "Emails".
			i.Skip()
			return true
		case "expires_at":
			s.ExpiresAt.Reset()
			if err := s.ExpiresAt.ReadJSON(i); err != nil {
				i.ReportError("Field ExpiresAt", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "key_id":
			s.KeyID.Reset()
			if err := s.KeyID.ReadJSON(i); err != nil {
				i.ReportError("Field KeyID", err.Error())
				return false
			}
			return true
		case "primary_key_id":
			s.PrimaryKeyID.Reset()
			if err := s.PrimaryKeyID.ReadJSON(i); err != nil {
				i.ReportError("Field PrimaryKeyID", err.Error())
				return false
			}
			return true
		case "public_key":
			s.PublicKey.Reset()
			if err := s.PublicKey.ReadJSON(i); err != nil {
				i.ReportError("Field PublicKey", err.Error())
				return false
			}
			return true
		case "raw_key":
			s.RawKey.Reset()
			if err := s.RawKey.ReadJSON(i); err != nil {
				i.ReportError("Field RawKey", err.Error())
				return false
			}
			return true
		case "subkeys":
			// Unsupported kind "array" for field "Subkeys".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GroupMapping) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes GroupMapping json value to io.Writer.
func (s GroupMapping) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GroupMapping json value from io.Reader.
func (s *GroupMapping) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GroupMapping from json stream.
func (s *GroupMapping) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GroupMappingGroupsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("group_description")
	j.WriteString(s.GroupDescription)

	more.More()
	j.WriteObjectField("group_id")
	j.WriteString(s.GroupID)

	more.More()
	j.WriteObjectField("group_name")
	j.WriteString(s.GroupName)

	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}

	if s.SyncedAt.Set {
		more.More()
		j.WriteObjectField("synced_at")
		s.SyncedAt.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes GroupMappingGroupsItem json value to io.Writer.
func (s GroupMappingGroupsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GroupMappingGroupsItem json value from io.Reader.
func (s *GroupMappingGroupsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GroupMappingGroupsItem from json stream.
func (s *GroupMappingGroupsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "group_description":
			s.GroupDescription = i.ReadString()
			return i.Error == nil
		case "group_id":
			s.GroupID = i.ReadString()
			return i.Error == nil
		case "group_name":
			s.GroupName = i.ReadString()
			return i.Error == nil
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "synced_at":
			s.SyncedAt.Reset()
			if err := s.SyncedAt.ReadJSON(i); err != nil {
				i.ReportError("Field SyncedAt", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s HookDeliveryItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("action")
	s.Action.WriteJSON(j)

	more.More()
	j.WriteObjectField("delivered_at")
	json.WriteDateTime(j, s.DeliveredAt)

	more.More()
	j.WriteObjectField("duration")
	j.WriteFloat64(s.Duration)

	more.More()
	j.WriteObjectField("event")
	j.WriteString(s.Event)

	more.More()
	j.WriteObjectField("guid")
	j.WriteString(s.GUID)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("installation_id")
	s.InstallationID.WriteJSON(j)

	more.More()
	j.WriteObjectField("redelivery")
	j.WriteBool(s.Redelivery)

	more.More()
	j.WriteObjectField("repository_id")
	s.RepositoryID.WriteJSON(j)

	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)

	more.More()
	j.WriteObjectField("status_code")
	j.WriteInt(s.StatusCode)

	j.WriteObjectEnd()
}

// WriteJSONTo writes HookDeliveryItem json value to io.Writer.
func (s HookDeliveryItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads HookDeliveryItem json value from io.Reader.
func (s *HookDeliveryItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads HookDeliveryItem from json stream.
func (s *HookDeliveryItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "action":
			if err := s.Action.ReadJSON(i); err != nil {
				i.ReportError("Field Action", err.Error())
				return false
			}
			return true
		case "delivered_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field DeliveredAt", err.Error())
				return false
			}
			s.DeliveredAt = v
			return true
		case "duration":
			s.Duration = i.ReadFloat64()
			return i.Error == nil
		case "event":
			s.Event = i.ReadString()
			return i.Error == nil
		case "guid":
			s.GUID = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "installation_id":
			if err := s.InstallationID.ReadJSON(i); err != nil {
				i.ReportError("Field InstallationID", err.Error())
				return false
			}
			return true
		case "redelivery":
			s.Redelivery = i.ReadBool()
			return i.Error == nil
		case "repository_id":
			if err := s.RepositoryID.ReadJSON(i); err != nil {
				i.ReportError("Field RepositoryID", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "status_code":
			s.StatusCode = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Import) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AuthorsCount.Set {
		more.More()
		j.WriteObjectField("authors_count")
		s.AuthorsCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("authors_url")
	json.WriteURI(j, s.AuthorsURL)

	if s.CommitCount.Set {
		more.More()
		j.WriteObjectField("commit_count")
		s.CommitCount.WriteJSON(j)
	}

	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}

	if s.FailedStep.Set {
		more.More()
		j.WriteObjectField("failed_step")
		s.FailedStep.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	if s.HasLargeFiles.Set {
		more.More()
		j.WriteObjectField("has_large_files")
		s.HasLargeFiles.WriteJSON(j)
	}

	if s.ImportPercent.Set {
		more.More()
		j.WriteObjectField("import_percent")
		s.ImportPercent.WriteJSON(j)
	}

	if s.LargeFilesCount.Set {
		more.More()
		j.WriteObjectField("large_files_count")
		s.LargeFilesCount.WriteJSON(j)
	}

	if s.LargeFilesSize.Set {
		more.More()
		j.WriteObjectField("large_files_size")
		s.LargeFilesSize.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	if s.ProjectChoices != nil {
		more.More()
		j.WriteObjectField("project_choices")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ProjectChoices {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.PushPercent.Set {
		more.More()
		j.WriteObjectField("push_percent")
		s.PushPercent.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("repository_url")
	json.WriteURI(j, s.RepositoryURL)

	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)

	if s.StatusText.Set {
		more.More()
		j.WriteObjectField("status_text")
		s.StatusText.WriteJSON(j)
	}

	if s.SvcRoot.Set {
		more.More()
		j.WriteObjectField("svc_root")
		s.SvcRoot.WriteJSON(j)
	}

	if s.SvnRoot.Set {
		more.More()
		j.WriteObjectField("svn_root")
		s.SvnRoot.WriteJSON(j)
	}

	if s.TfvcProject.Set {
		more.More()
		j.WriteObjectField("tfvc_project")
		s.TfvcProject.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	if s.UseLfs.Set {
		more.More()
		j.WriteObjectField("use_lfs")
		s.UseLfs.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("vcs")
	s.Vcs.WriteJSON(j)

	more.More()
	j.WriteObjectField("vcs_url")
	j.WriteString(s.VcsURL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Import json value to io.Writer.
func (s Import) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Import json value from io.Reader.
func (s *Import) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Import from json stream.
func (s *Import) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "authors_count":
			s.AuthorsCount.Reset()
			if err := s.AuthorsCount.ReadJSON(i); err != nil {
				i.ReportError("Field AuthorsCount", err.Error())
				return false
			}
			return true
		case "authors_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field AuthorsURL", err.Error())
				return false
			}
			s.AuthorsURL = v
			return true
		case "commit_count":
			s.CommitCount.Reset()
			if err := s.CommitCount.ReadJSON(i); err != nil {
				i.ReportError("Field CommitCount", err.Error())
				return false
			}
			return true
		case "error_message":
			s.ErrorMessage.Reset()
			if err := s.ErrorMessage.ReadJSON(i); err != nil {
				i.ReportError("Field ErrorMessage", err.Error())
				return false
			}
			return true
		case "failed_step":
			s.FailedStep.Reset()
			if err := s.FailedStep.ReadJSON(i); err != nil {
				i.ReportError("Field FailedStep", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "has_large_files":
			s.HasLargeFiles.Reset()
			if err := s.HasLargeFiles.ReadJSON(i); err != nil {
				i.ReportError("Field HasLargeFiles", err.Error())
				return false
			}
			return true
		case "import_percent":
			s.ImportPercent.Reset()
			if err := s.ImportPercent.ReadJSON(i); err != nil {
				i.ReportError("Field ImportPercent", err.Error())
				return false
			}
			return true
		case "large_files_count":
			s.LargeFilesCount.Reset()
			if err := s.LargeFilesCount.ReadJSON(i); err != nil {
				i.ReportError("Field LargeFilesCount", err.Error())
				return false
			}
			return true
		case "large_files_size":
			s.LargeFilesSize.Reset()
			if err := s.LargeFilesSize.ReadJSON(i); err != nil {
				i.ReportError("Field LargeFilesSize", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "project_choices":
			// Unsupported kind "array" for field "ProjectChoices".
			i.Skip()
			return true
		case "push_percent":
			s.PushPercent.Reset()
			if err := s.PushPercent.ReadJSON(i); err != nil {
				i.ReportError("Field PushPercent", err.Error())
				return false
			}
			return true
		case "repository_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field RepositoryURL", err.Error())
				return false
			}
			s.RepositoryURL = v
			return true
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "status_text":
			s.StatusText.Reset()
			if err := s.StatusText.ReadJSON(i); err != nil {
				i.ReportError("Field StatusText", err.Error())
				return false
			}
			return true
		case "svc_root":
			s.SvcRoot.Reset()
			if err := s.SvcRoot.ReadJSON(i); err != nil {
				i.ReportError("Field SvcRoot", err.Error())
				return false
			}
			return true
		case "svn_root":
			s.SvnRoot.Reset()
			if err := s.SvnRoot.ReadJSON(i); err != nil {
				i.ReportError("Field SvnRoot", err.Error())
				return false
			}
			return true
		case "tfvc_project":
			s.TfvcProject.Reset()
			if err := s.TfvcProject.ReadJSON(i); err != nil {
				i.ReportError("Field TfvcProject", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "use_lfs":
			s.UseLfs.Reset()
			if err := s.UseLfs.ReadJSON(i); err != nil {
				i.ReportError("Field UseLfs", err.Error())
				return false
			}
			return true
		case "vcs":
			if err := s.Vcs.ReadJSON(i); err != nil {
				i.ReportError("Field Vcs", err.Error())
				return false
			}
			return true
		case "vcs_url":
			s.VcsURL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ImportProjectChoicesItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HumanName.Set {
		more.More()
		j.WriteObjectField("human_name")
		s.HumanName.WriteJSON(j)
	}

	if s.TfvcProject.Set {
		more.More()
		j.WriteObjectField("tfvc_project")
		s.TfvcProject.WriteJSON(j)
	}

	if s.Vcs.Set {
		more.More()
		j.WriteObjectField("vcs")
		s.Vcs.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ImportProjectChoicesItem json value to io.Writer.
func (s ImportProjectChoicesItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ImportProjectChoicesItem json value from io.Reader.
func (s *ImportProjectChoicesItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ImportProjectChoicesItem from json stream.
func (s *ImportProjectChoicesItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "human_name":
			s.HumanName.Reset()
			if err := s.HumanName.ReadJSON(i); err != nil {
				i.ReportError("Field HumanName", err.Error())
				return false
			}
			return true
		case "tfvc_project":
			s.TfvcProject.Reset()
			if err := s.TfvcProject.ReadJSON(i); err != nil {
				i.ReportError("Field TfvcProject", err.Error())
				return false
			}
			return true
		case "vcs":
			s.Vcs.Reset()
			if err := s.Vcs.ReadJSON(i); err != nil {
				i.ReportError("Field Vcs", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ImportStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ImportStatus from json stream.
func (s *ImportStatus) ReadJSON(i *json.Iterator) error {
	*s = ImportStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InstallationToken) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("expires_at")
	j.WriteString(s.ExpiresAt)

	if s.HasMultipleSingleFiles.Set {
		more.More()
		j.WriteObjectField("has_multiple_single_files")
		s.HasMultipleSingleFiles.WriteJSON(j)
	}

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	if s.Repositories != nil {
		more.More()
		j.WriteObjectField("repositories")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Repositories {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.RepositorySelection.Set {
		more.More()
		j.WriteObjectField("repository_selection")
		s.RepositorySelection.WriteJSON(j)
	}

	if s.SingleFile.Set {
		more.More()
		j.WriteObjectField("single_file")
		s.SingleFile.WriteJSON(j)
	}

	if s.SingleFilePaths != nil {
		more.More()
		j.WriteObjectField("single_file_paths")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.SingleFilePaths {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("token")
	j.WriteString(s.Token)

	j.WriteObjectEnd()
}

// WriteJSONTo writes InstallationToken json value to io.Writer.
func (s InstallationToken) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads InstallationToken json value from io.Reader.
func (s *InstallationToken) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads InstallationToken from json stream.
func (s *InstallationToken) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expires_at":
			s.ExpiresAt = i.ReadString()
			return i.Error == nil
		case "has_multiple_single_files":
			s.HasMultipleSingleFiles.Reset()
			if err := s.HasMultipleSingleFiles.ReadJSON(i); err != nil {
				i.ReportError("Field HasMultipleSingleFiles", err.Error())
				return false
			}
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		case "repository_selection":
			s.RepositorySelection.Reset()
			if err := s.RepositorySelection.ReadJSON(i); err != nil {
				i.ReportError("Field RepositorySelection", err.Error())
				return false
			}
			return true
		case "single_file":
			s.SingleFile.Reset()
			if err := s.SingleFile.ReadJSON(i); err != nil {
				i.ReportError("Field SingleFile", err.Error())
				return false
			}
			return true
		case "single_file_paths":
			// Unsupported kind "array" for field "SingleFilePaths".
			i.Skip()
			return true
		case "token":
			s.Token = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InstallationTokenRepositorySelection) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads InstallationTokenRepositorySelection from json stream.
func (s *InstallationTokenRepositorySelection) ReadJSON(i *json.Iterator) error {
	*s = InstallationTokenRepositorySelection(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Integration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClientID.Set {
		more.More()
		j.WriteObjectField("client_id")
		s.ClientID.WriteJSON(j)
	}

	if s.ClientSecret.Set {
		more.More()
		j.WriteObjectField("client_secret")
		s.ClientSecret.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("events")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Events {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("external_url")
	json.WriteURI(j, s.ExternalURL)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.InstallationsCount.Set {
		more.More()
		j.WriteObjectField("installations_count")
		s.InstallationsCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("owner")
	s.Owner.WriteJSON(j)

	if s.Pem.Set {
		more.More()
		j.WriteObjectField("pem")
		s.Pem.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("permissions")
	s.Permissions.WriteJSON(j)

	if s.Slug.Set {
		more.More()
		j.WriteObjectField("slug")
		s.Slug.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	if s.WebhookSecret.Set {
		more.More()
		j.WriteObjectField("webhook_secret")
		s.WebhookSecret.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes Integration json value to io.Writer.
func (s Integration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Integration json value from io.Reader.
func (s *Integration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Integration from json stream.
func (s *Integration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "client_id":
			s.ClientID.Reset()
			if err := s.ClientID.ReadJSON(i); err != nil {
				i.ReportError("Field ClientID", err.Error())
				return false
			}
			return true
		case "client_secret":
			s.ClientSecret.Reset()
			if err := s.ClientSecret.ReadJSON(i); err != nil {
				i.ReportError("Field ClientSecret", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "events":
			// Unsupported kind "array" for field "Events".
			i.Skip()
			return true
		case "external_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ExternalURL", err.Error())
				return false
			}
			s.ExternalURL = v
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "installations_count":
			s.InstallationsCount.Reset()
			if err := s.InstallationsCount.ReadJSON(i); err != nil {
				i.ReportError("Field InstallationsCount", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "owner":
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "pem":
			s.Pem.Reset()
			if err := s.Pem.ReadJSON(i); err != nil {
				i.ReportError("Field Pem", err.Error())
				return false
			}
			return true
		case "permissions":
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "slug":
			s.Slug.Reset()
			if err := s.Slug.ReadJSON(i); err != nil {
				i.ReportError("Field Slug", err.Error())
				return false
			}
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "webhook_secret":
			s.WebhookSecret.Reset()
			if err := s.WebhookSecret.ReadJSON(i); err != nil {
				i.ReportError("Field WebhookSecret", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IntegrationPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Checks.Set {
		more.More()
		j.WriteObjectField("checks")
		s.Checks.WriteJSON(j)
	}

	if s.Contents.Set {
		more.More()
		j.WriteObjectField("contents")
		s.Contents.WriteJSON(j)
	}

	if s.Deployments.Set {
		more.More()
		j.WriteObjectField("deployments")
		s.Deployments.WriteJSON(j)
	}

	if s.Issues.Set {
		more.More()
		j.WriteObjectField("issues")
		s.Issues.WriteJSON(j)
	}

	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes IntegrationPermissions json value to io.Writer.
func (s IntegrationPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IntegrationPermissions json value from io.Reader.
func (s *IntegrationPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IntegrationPermissions from json stream.
func (s *IntegrationPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "checks":
			s.Checks.Reset()
			if err := s.Checks.ReadJSON(i); err != nil {
				i.ReportError("Field Checks", err.Error())
				return false
			}
			return true
		case "contents":
			s.Contents.Reset()
			if err := s.Contents.ReadJSON(i); err != nil {
				i.ReportError("Field Contents", err.Error())
				return false
			}
			return true
		case "deployments":
			s.Deployments.Reset()
			if err := s.Deployments.ReadJSON(i); err != nil {
				i.ReportError("Field Deployments", err.Error())
				return false
			}
			return true
		case "issues":
			s.Issues.Reset()
			if err := s.Issues.ReadJSON(i); err != nil {
				i.ReportError("Field Issues", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InteractionExpiry) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads InteractionExpiry from json stream.
func (s *InteractionExpiry) ReadJSON(i *json.Iterator) error {
	*s = InteractionExpiry(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InteractionGroup) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads InteractionGroup from json stream.
func (s *InteractionGroup) ReadJSON(i *json.Iterator) error {
	*s = InteractionGroup(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InteractionLimit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Expiry.Set {
		more.More()
		j.WriteObjectField("expiry")
		s.Expiry.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("limit")
	s.Limit.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes InteractionLimit json value to io.Writer.
func (s InteractionLimit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads InteractionLimit json value from io.Reader.
func (s *InteractionLimit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads InteractionLimit from json stream.
func (s *InteractionLimit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expiry":
			s.Expiry.Reset()
			if err := s.Expiry.ReadJSON(i); err != nil {
				i.ReportError("Field Expiry", err.Error())
				return false
			}
			return true
		case "limit":
			if err := s.Limit.ReadJSON(i); err != nil {
				i.ReportError("Field Limit", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InteractionLimitResponse) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("expires_at")
	json.WriteDateTime(j, s.ExpiresAt)

	more.More()
	j.WriteObjectField("limit")
	s.Limit.WriteJSON(j)

	more.More()
	j.WriteObjectField("origin")
	j.WriteString(s.Origin)

	j.WriteObjectEnd()
}

// WriteJSONTo writes InteractionLimitResponse json value to io.Writer.
func (s InteractionLimitResponse) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads InteractionLimitResponse json value from io.Reader.
func (s *InteractionLimitResponse) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads InteractionLimitResponse from json stream.
func (s *InteractionLimitResponse) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expires_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field ExpiresAt", err.Error())
				return false
			}
			s.ExpiresAt = v
			return true
		case "limit":
			if err := s.Limit.ReadJSON(i); err != nil {
				i.ReportError("Field Limit", err.Error())
				return false
			}
			return true
		case "origin":
			s.Origin = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssueComment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author_association")
	s.AuthorAssociation.WriteJSON(j)

	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	if s.BodyHTML.Set {
		more.More()
		j.WriteObjectField("body_html")
		s.BodyHTML.WriteJSON(j)
	}

	if s.BodyText.Set {
		more.More()
		j.WriteObjectField("body_text")
		s.BodyText.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("issue_url")
	json.WriteURI(j, s.IssueURL)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	if s.PerformedViaGithubApp.Set {
		more.More()
		j.WriteObjectField("performed_via_github_app")
		s.PerformedViaGithubApp.WriteJSON(j)
	}

	if s.Reactions.Set {
		more.More()
		j.WriteObjectField("reactions")
		s.Reactions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes IssueComment json value to io.Writer.
func (s IssueComment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IssueComment json value from io.Reader.
func (s *IssueComment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IssueComment from json stream.
func (s *IssueComment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(i); err != nil {
				i.ReportError("Field AuthorAssociation", err.Error())
				return false
			}
			return true
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(i); err != nil {
				i.ReportError("Field BodyHTML", err.Error())
				return false
			}
			return true
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(i); err != nil {
				i.ReportError("Field BodyText", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "issue_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field IssueURL", err.Error())
				return false
			}
			s.IssueURL = v
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "performed_via_github_app":
			s.PerformedViaGithubApp.Reset()
			if err := s.PerformedViaGithubApp.ReadJSON(i); err != nil {
				i.ReportError("Field PerformedViaGithubApp", err.Error())
				return false
			}
			return true
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(i); err != nil {
				i.ReportError("Field Reactions", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesAddAssigneesApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Assignees != nil {
		more.More()
		j.WriteObjectField("assignees")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Assignees {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes IssuesAddAssigneesApplicationJSONRequest json value to io.Writer.
func (s IssuesAddAssigneesApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IssuesAddAssigneesApplicationJSONRequest json value from io.Reader.
func (s *IssuesAddAssigneesApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IssuesAddAssigneesApplicationJSONRequest from json stream.
func (s *IssuesAddAssigneesApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "assignees":
			// Unsupported kind "array" for field "Assignees".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesCreateCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes IssuesCreateCommentApplicationJSONRequest json value to io.Writer.
func (s IssuesCreateCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IssuesCreateCommentApplicationJSONRequest json value from io.Reader.
func (s *IssuesCreateCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IssuesCreateCommentApplicationJSONRequest from json stream.
func (s *IssuesCreateCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesCreateLabelApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Color.Set {
		more.More()
		j.WriteObjectField("color")
		s.Color.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes IssuesCreateLabelApplicationJSONRequest json value to io.Writer.
func (s IssuesCreateLabelApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IssuesCreateLabelApplicationJSONRequest json value from io.Reader.
func (s *IssuesCreateLabelApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IssuesCreateLabelApplicationJSONRequest from json stream.
func (s *IssuesCreateLabelApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "color":
			s.Color.Reset()
			if err := s.Color.ReadJSON(i); err != nil {
				i.ReportError("Field Color", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesCreateMilestoneApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.DueOn.Set {
		more.More()
		j.WriteObjectField("due_on")
		s.DueOn.WriteJSON(j, json.WriteDateTime)
	}

	if s.State.Set {
		more.More()
		j.WriteObjectField("state")
		s.State.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	j.WriteObjectEnd()
}

// WriteJSONTo writes IssuesCreateMilestoneApplicationJSONRequest json value to io.Writer.
func (s IssuesCreateMilestoneApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IssuesCreateMilestoneApplicationJSONRequest json value from io.Reader.
func (s *IssuesCreateMilestoneApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IssuesCreateMilestoneApplicationJSONRequest from json stream.
func (s *IssuesCreateMilestoneApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "due_on":
			s.DueOn.Reset()
			if err := s.DueOn.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field DueOn", err.Error())
				return false
			}
			return true
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesCreateMilestoneApplicationJSONRequestState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads IssuesCreateMilestoneApplicationJSONRequestState from json stream.
func (s *IssuesCreateMilestoneApplicationJSONRequestState) ReadJSON(i *json.Iterator) error {
	*s = IssuesCreateMilestoneApplicationJSONRequestState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesLockApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LockReason.Set {
		more.More()
		j.WriteObjectField("lock_reason")
		s.LockReason.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes IssuesLockApplicationJSONRequest json value to io.Writer.
func (s IssuesLockApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IssuesLockApplicationJSONRequest json value from io.Reader.
func (s *IssuesLockApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IssuesLockApplicationJSONRequest from json stream.
func (s *IssuesLockApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lock_reason":
			s.LockReason.Reset()
			if err := s.LockReason.ReadJSON(i); err != nil {
				i.ReportError("Field LockReason", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesLockApplicationJSONRequestLockReason) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads IssuesLockApplicationJSONRequestLockReason from json stream.
func (s *IssuesLockApplicationJSONRequestLockReason) ReadJSON(i *json.Iterator) error {
	*s = IssuesLockApplicationJSONRequestLockReason(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesRemoveAssigneesApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Assignees != nil {
		more.More()
		j.WriteObjectField("assignees")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Assignees {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes IssuesRemoveAssigneesApplicationJSONRequest json value to io.Writer.
func (s IssuesRemoveAssigneesApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IssuesRemoveAssigneesApplicationJSONRequest json value from io.Reader.
func (s *IssuesRemoveAssigneesApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IssuesRemoveAssigneesApplicationJSONRequest from json stream.
func (s *IssuesRemoveAssigneesApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "assignees":
			// Unsupported kind "array" for field "Assignees".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesUpdateCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes IssuesUpdateCommentApplicationJSONRequest json value to io.Writer.
func (s IssuesUpdateCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IssuesUpdateCommentApplicationJSONRequest json value from io.Reader.
func (s *IssuesUpdateCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IssuesUpdateCommentApplicationJSONRequest from json stream.
func (s *IssuesUpdateCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesUpdateLabelApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Color.Set {
		more.More()
		j.WriteObjectField("color")
		s.Color.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.NewName.Set {
		more.More()
		j.WriteObjectField("new_name")
		s.NewName.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes IssuesUpdateLabelApplicationJSONRequest json value to io.Writer.
func (s IssuesUpdateLabelApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IssuesUpdateLabelApplicationJSONRequest json value from io.Reader.
func (s *IssuesUpdateLabelApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IssuesUpdateLabelApplicationJSONRequest from json stream.
func (s *IssuesUpdateLabelApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "color":
			s.Color.Reset()
			if err := s.Color.ReadJSON(i); err != nil {
				i.ReportError("Field Color", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "new_name":
			s.NewName.Reset()
			if err := s.NewName.ReadJSON(i); err != nil {
				i.ReportError("Field NewName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesUpdateMilestoneApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.DueOn.Set {
		more.More()
		j.WriteObjectField("due_on")
		s.DueOn.WriteJSON(j, json.WriteDateTime)
	}

	if s.State.Set {
		more.More()
		j.WriteObjectField("state")
		s.State.WriteJSON(j)
	}

	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes IssuesUpdateMilestoneApplicationJSONRequest json value to io.Writer.
func (s IssuesUpdateMilestoneApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IssuesUpdateMilestoneApplicationJSONRequest json value from io.Reader.
func (s *IssuesUpdateMilestoneApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IssuesUpdateMilestoneApplicationJSONRequest from json stream.
func (s *IssuesUpdateMilestoneApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "due_on":
			s.DueOn.Reset()
			if err := s.DueOn.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field DueOn", err.Error())
				return false
			}
			return true
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IssuesUpdateMilestoneApplicationJSONRequestState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads IssuesUpdateMilestoneApplicationJSONRequestState from json stream.
func (s *IssuesUpdateMilestoneApplicationJSONRequestState) ReadJSON(i *json.Iterator) error {
	*s = IssuesUpdateMilestoneApplicationJSONRequestState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Job) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("check_run_url")
	j.WriteString(s.CheckRunURL)

	more.More()
	j.WriteObjectField("completed_at")
	s.CompletedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("conclusion")
	s.Conclusion.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	s.HTMLURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("head_sha")
	j.WriteString(s.HeadSha)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("run_id")
	j.WriteInt(s.RunID)

	more.More()
	j.WriteObjectField("run_url")
	j.WriteString(s.RunURL)

	more.More()
	j.WriteObjectField("started_at")
	json.WriteDateTime(j, s.StartedAt)

	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)

	if s.Steps != nil {
		more.More()
		j.WriteObjectField("steps")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Steps {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Job json value to io.Writer.
func (s Job) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Job json value from io.Reader.
func (s *Job) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Job from json stream.
func (s *Job) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "check_run_url":
			s.CheckRunURL = i.ReadString()
			return i.Error == nil
		case "completed_at":
			if err := s.CompletedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CompletedAt", err.Error())
				return false
			}
			return true
		case "conclusion":
			if err := s.Conclusion.ReadJSON(i); err != nil {
				i.ReportError("Field Conclusion", err.Error())
				return false
			}
			return true
		case "html_url":
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "head_sha":
			s.HeadSha = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "run_id":
			s.RunID = i.ReadInt()
			return i.Error == nil
		case "run_url":
			s.RunURL = i.ReadString()
			return i.Error == nil
		case "started_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field StartedAt", err.Error())
				return false
			}
			s.StartedAt = v
			return true
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "steps":
			// Unsupported kind "array" for field "Steps".
			i.Skip()
			return true
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s JobStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads JobStatus from json stream.
func (s *JobStatus) ReadJSON(i *json.Iterator) error {
	*s = JobStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s JobStepsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CompletedAt.Set {
		more.More()
		j.WriteObjectField("completed_at")
		s.CompletedAt.WriteJSON(j, json.WriteDateTime)
	}

	more.More()
	j.WriteObjectField("conclusion")
	s.Conclusion.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("number")
	j.WriteInt(s.Number)

	if s.StartedAt.Set {
		more.More()
		j.WriteObjectField("started_at")
		s.StartedAt.WriteJSON(j, json.WriteDateTime)
	}

	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes JobStepsItem json value to io.Writer.
func (s JobStepsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads JobStepsItem json value from io.Reader.
func (s *JobStepsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads JobStepsItem from json stream.
func (s *JobStepsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "completed_at":
			s.CompletedAt.Reset()
			if err := s.CompletedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CompletedAt", err.Error())
				return false
			}
			return true
		case "conclusion":
			if err := s.Conclusion.ReadJSON(i); err != nil {
				i.ReportError("Field Conclusion", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "number":
			s.Number = i.ReadInt()
			return i.Error == nil
		case "started_at":
			s.StartedAt.Reset()
			if err := s.StartedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field StartedAt", err.Error())
				return false
			}
			return true
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s JobStepsItemStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads JobStepsItemStatus from json stream.
func (s *JobStepsItemStatus) ReadJSON(i *json.Iterator) error {
	*s = JobStepsItemStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Key) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	more.More()
	j.WriteObjectField("read_only")
	j.WriteBool(s.ReadOnly)

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	more.More()
	j.WriteObjectField("verified")
	j.WriteBool(s.Verified)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Key json value to io.Writer.
func (s Key) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Key json value from io.Reader.
func (s *Key) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Key from json stream.
func (s *Key) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "read_only":
			s.ReadOnly = i.ReadBool()
			return i.Error == nil
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		case "verified":
			s.Verified = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s KeySimple) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	j.WriteObjectEnd()
}

// WriteJSONTo writes KeySimple json value to io.Writer.
func (s KeySimple) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads KeySimple json value from io.Reader.
func (s *KeySimple) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads KeySimple from json stream.
func (s *KeySimple) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Label) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("color")
	j.WriteString(s.Color)

	more.More()
	j.WriteObjectField("default")
	j.WriteBool(s.Default)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt64(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Label json value to io.Writer.
func (s Label) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Label json value from io.Reader.
func (s *Label) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Label from json stream.
func (s *Label) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "color":
			s.Color = i.ReadString()
			return i.Error == nil
		case "default":
			s.Default = i.ReadBool()
			return i.Error == nil
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt64()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s License) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	more.More()
	j.WriteObjectField("conditions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Conditions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)

	more.More()
	j.WriteObjectField("featured")
	j.WriteBool(s.Featured)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("implementation")
	j.WriteString(s.Implementation)

	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	more.More()
	j.WriteObjectField("limitations")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Limitations {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("permissions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Permissions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("spdx_id")
	s.SpdxID.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	s.URL.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes License json value to io.Writer.
func (s License) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads License json value from io.Reader.
func (s *License) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads License from json stream.
func (s *License) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "description":
			s.Description = i.ReadString()
			return i.Error == nil
		case "featured":
			s.Featured = i.ReadBool()
			return i.Error == nil
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "implementation":
			s.Implementation = i.ReadString()
			return i.Error == nil
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "limitations":
			// Unsupported kind "array" for field "Limitations".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "permissions":
			// Unsupported kind "array" for field "Permissions".
			i.Skip()
			return true
		case "spdx_id":
			if err := s.SpdxID.ReadJSON(i); err != nil {
				i.ReportError("Field SpdxID", err.Error())
				return false
			}
			return true
		case "url":
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s LicenseContent) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	j.WriteString(s.Content)

	more.More()
	j.WriteObjectField("download_url")
	s.DownloadURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("encoding")
	j.WriteString(s.Encoding)

	more.More()
	j.WriteObjectField("git_url")
	s.GitURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	s.HTMLURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("license")
	s.License.WriteJSON(j)

	more.More()
	j.WriteObjectField("_links")
	s.Links.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("size")
	j.WriteInt(s.Size)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes LicenseContent json value to io.Writer.
func (s LicenseContent) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads LicenseContent json value from io.Reader.
func (s *LicenseContent) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads LicenseContent from json stream.
func (s *LicenseContent) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			s.Content = i.ReadString()
			return i.Error == nil
		case "download_url":
			if err := s.DownloadURL.ReadJSON(i); err != nil {
				i.ReportError("Field DownloadURL", err.Error())
				return false
			}
			return true
		case "encoding":
			s.Encoding = i.ReadString()
			return i.Error == nil
		case "git_url":
			if err := s.GitURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitURL", err.Error())
				return false
			}
			return true
		case "html_url":
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "license":
			if err := s.License.ReadJSON(i); err != nil {
				i.ReportError("Field License", err.Error())
				return false
			}
			return true
		case "_links":
			if err := s.Links.ReadJSON(i); err != nil {
				i.ReportError("Field Links", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "size":
			s.Size = i.ReadInt()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s LicenseContentLinks) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("git")
	s.Git.WriteJSON(j)

	more.More()
	j.WriteObjectField("html")
	s.HTML.WriteJSON(j)

	more.More()
	j.WriteObjectField("self")
	json.WriteURI(j, s.Self)

	j.WriteObjectEnd()
}

// WriteJSONTo writes LicenseContentLinks json value to io.Writer.
func (s LicenseContentLinks) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads LicenseContentLinks json value from io.Reader.
func (s *LicenseContentLinks) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads LicenseContentLinks from json stream.
func (s *LicenseContentLinks) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "git":
			if err := s.Git.ReadJSON(i); err != nil {
				i.ReportError("Field Git", err.Error())
				return false
			}
			return true
		case "html":
			if err := s.HTML.ReadJSON(i); err != nil {
				i.ReportError("Field HTML", err.Error())
				return false
			}
			return true
		case "self":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field Self", err.Error())
				return false
			}
			s.Self = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s LicenseSimple) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("spdx_id")
	s.SpdxID.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	s.URL.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes LicenseSimple json value to io.Writer.
func (s LicenseSimple) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads LicenseSimple json value from io.Reader.
func (s *LicenseSimple) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads LicenseSimple from json stream.
func (s *LicenseSimple) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "spdx_id":
			if err := s.SpdxID.ReadJSON(i); err != nil {
				i.ReportError("Field SpdxID", err.Error())
				return false
			}
			return true
		case "url":
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Link) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("href")
	j.WriteString(s.Href)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Link json value to io.Writer.
func (s Link) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Link json value from io.Reader.
func (s *Link) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Link from json stream.
func (s *Link) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "href":
			s.Href = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s LinkWithType) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("href")
	j.WriteString(s.Href)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	j.WriteObjectEnd()
}

// WriteJSONTo writes LinkWithType json value to io.Writer.
func (s LinkWithType) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads LinkWithType json value from io.Reader.
func (s *LinkWithType) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads LinkWithType from json stream.
func (s *LinkWithType) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "href":
			s.Href = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MarkdownRenderApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Context.Set {
		more.More()
		j.WriteObjectField("context")
		s.Context.WriteJSON(j)
	}

	if s.Mode.Set {
		more.More()
		j.WriteObjectField("mode")
		s.Mode.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("text")
	j.WriteString(s.Text)

	j.WriteObjectEnd()
}

// WriteJSONTo writes MarkdownRenderApplicationJSONRequest json value to io.Writer.
func (s MarkdownRenderApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MarkdownRenderApplicationJSONRequest json value from io.Reader.
func (s *MarkdownRenderApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MarkdownRenderApplicationJSONRequest from json stream.
func (s *MarkdownRenderApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "context":
			s.Context.Reset()
			if err := s.Context.ReadJSON(i); err != nil {
				i.ReportError("Field Context", err.Error())
				return false
			}
			return true
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(i); err != nil {
				i.ReportError("Field Mode", err.Error())
				return false
			}
			return true
		case "text":
			s.Text = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MarkdownRenderApplicationJSONRequestMode) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MarkdownRenderApplicationJSONRequestMode from json stream.
func (s *MarkdownRenderApplicationJSONRequestMode) ReadJSON(i *json.Iterator) error {
	*s = MarkdownRenderApplicationJSONRequestMode(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MarketplaceAccount) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("login")
	j.WriteString(s.Login)

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.OrganizationBillingEmail.Set {
		more.More()
		j.WriteObjectField("organization_billing_email")
		s.OrganizationBillingEmail.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes MarketplaceAccount json value to io.Writer.
func (s MarketplaceAccount) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MarketplaceAccount json value from io.Reader.
func (s *MarketplaceAccount) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MarketplaceAccount from json stream.
func (s *MarketplaceAccount) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "login":
			s.Login = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "organization_billing_email":
			s.OrganizationBillingEmail.Reset()
			if err := s.OrganizationBillingEmail.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationBillingEmail", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MarketplaceListingPlan) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("accounts_url")
	json.WriteURI(j, s.AccountsURL)

	more.More()
	j.WriteObjectField("bullets")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Bullets {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)

	more.More()
	j.WriteObjectField("has_free_trial")
	j.WriteBool(s.HasFreeTrial)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("monthly_price_in_cents")
	j.WriteInt(s.MonthlyPriceInCents)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("number")
	j.WriteInt(s.Number)

	more.More()
	j.WriteObjectField("price_model")
	j.WriteString(s.PriceModel)

	more.More()
	j.WriteObjectField("state")
	j.WriteString(s.State)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("unit_name")
	s.UnitName.WriteJSON(j)

	more.More()
	j.WriteObjectField("yearly_price_in_cents")
	j.WriteInt(s.YearlyPriceInCents)

	j.WriteObjectEnd()
}

// WriteJSONTo writes MarketplaceListingPlan json value to io.Writer.
func (s MarketplaceListingPlan) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MarketplaceListingPlan json value from io.Reader.
func (s *MarketplaceListingPlan) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MarketplaceListingPlan from json stream.
func (s *MarketplaceListingPlan) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "accounts_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field AccountsURL", err.Error())
				return false
			}
			s.AccountsURL = v
			return true
		case "bullets":
			// Unsupported kind "array" for field "Bullets".
			i.Skip()
			return true
		case "description":
			s.Description = i.ReadString()
			return i.Error == nil
		case "has_free_trial":
			s.HasFreeTrial = i.ReadBool()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "monthly_price_in_cents":
			s.MonthlyPriceInCents = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "number":
			s.Number = i.ReadInt()
			return i.Error == nil
		case "price_model":
			s.PriceModel = i.ReadString()
			return i.Error == nil
		case "state":
			s.State = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "unit_name":
			if err := s.UnitName.ReadJSON(i); err != nil {
				i.ReportError("Field UnitName", err.Error())
				return false
			}
			return true
		case "yearly_price_in_cents":
			s.YearlyPriceInCents = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MarketplacePurchase) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("login")
	j.WriteString(s.Login)

	if s.MarketplacePendingChange.Set {
		more.More()
		j.WriteObjectField("marketplace_pending_change")
		s.MarketplacePendingChange.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("marketplace_purchase")
	s.MarketplacePurchase.WriteJSON(j)

	if s.OrganizationBillingEmail.Set {
		more.More()
		j.WriteObjectField("organization_billing_email")
		s.OrganizationBillingEmail.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes MarketplacePurchase json value to io.Writer.
func (s MarketplacePurchase) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MarketplacePurchase json value from io.Reader.
func (s *MarketplacePurchase) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MarketplacePurchase from json stream.
func (s *MarketplacePurchase) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "login":
			s.Login = i.ReadString()
			return i.Error == nil
		case "marketplace_pending_change":
			s.MarketplacePendingChange.Reset()
			if err := s.MarketplacePendingChange.ReadJSON(i); err != nil {
				i.ReportError("Field MarketplacePendingChange", err.Error())
				return false
			}
			return true
		case "marketplace_purchase":
			if err := s.MarketplacePurchase.ReadJSON(i); err != nil {
				i.ReportError("Field MarketplacePurchase", err.Error())
				return false
			}
			return true
		case "organization_billing_email":
			s.OrganizationBillingEmail.Reset()
			if err := s.OrganizationBillingEmail.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationBillingEmail", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MarketplacePurchaseMarketplacePendingChange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EffectiveDate.Set {
		more.More()
		j.WriteObjectField("effective_date")
		s.EffectiveDate.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.IsInstalled.Set {
		more.More()
		j.WriteObjectField("is_installed")
		s.IsInstalled.WriteJSON(j)
	}

	if s.Plan.Set {
		more.More()
		j.WriteObjectField("plan")
		s.Plan.WriteJSON(j)
	}

	if s.UnitCount.Set {
		more.More()
		j.WriteObjectField("unit_count")
		s.UnitCount.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes MarketplacePurchaseMarketplacePendingChange json value to io.Writer.
func (s MarketplacePurchaseMarketplacePendingChange) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MarketplacePurchaseMarketplacePendingChange json value from io.Reader.
func (s *MarketplacePurchaseMarketplacePendingChange) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MarketplacePurchaseMarketplacePendingChange from json stream.
func (s *MarketplacePurchaseMarketplacePendingChange) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "effective_date":
			s.EffectiveDate.Reset()
			if err := s.EffectiveDate.ReadJSON(i); err != nil {
				i.ReportError("Field EffectiveDate", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "is_installed":
			s.IsInstalled.Reset()
			if err := s.IsInstalled.ReadJSON(i); err != nil {
				i.ReportError("Field IsInstalled", err.Error())
				return false
			}
			return true
		case "plan":
			s.Plan.Reset()
			if err := s.Plan.ReadJSON(i); err != nil {
				i.ReportError("Field Plan", err.Error())
				return false
			}
			return true
		case "unit_count":
			s.UnitCount.Reset()
			if err := s.UnitCount.ReadJSON(i); err != nil {
				i.ReportError("Field UnitCount", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MarketplacePurchaseMarketplacePurchase) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.BillingCycle.Set {
		more.More()
		j.WriteObjectField("billing_cycle")
		s.BillingCycle.WriteJSON(j)
	}

	if s.FreeTrialEndsOn.Set {
		more.More()
		j.WriteObjectField("free_trial_ends_on")
		s.FreeTrialEndsOn.WriteJSON(j)
	}

	if s.IsInstalled.Set {
		more.More()
		j.WriteObjectField("is_installed")
		s.IsInstalled.WriteJSON(j)
	}

	if s.NextBillingDate.Set {
		more.More()
		j.WriteObjectField("next_billing_date")
		s.NextBillingDate.WriteJSON(j)
	}

	if s.OnFreeTrial.Set {
		more.More()
		j.WriteObjectField("on_free_trial")
		s.OnFreeTrial.WriteJSON(j)
	}

	if s.Plan.Set {
		more.More()
		j.WriteObjectField("plan")
		s.Plan.WriteJSON(j)
	}

	if s.UnitCount.Set {
		more.More()
		j.WriteObjectField("unit_count")
		s.UnitCount.WriteJSON(j)
	}

	if s.UpdatedAt.Set {
		more.More()
		j.WriteObjectField("updated_at")
		s.UpdatedAt.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes MarketplacePurchaseMarketplacePurchase json value to io.Writer.
func (s MarketplacePurchaseMarketplacePurchase) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MarketplacePurchaseMarketplacePurchase json value from io.Reader.
func (s *MarketplacePurchaseMarketplacePurchase) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MarketplacePurchaseMarketplacePurchase from json stream.
func (s *MarketplacePurchaseMarketplacePurchase) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "billing_cycle":
			s.BillingCycle.Reset()
			if err := s.BillingCycle.ReadJSON(i); err != nil {
				i.ReportError("Field BillingCycle", err.Error())
				return false
			}
			return true
		case "free_trial_ends_on":
			s.FreeTrialEndsOn.Reset()
			if err := s.FreeTrialEndsOn.ReadJSON(i); err != nil {
				i.ReportError("Field FreeTrialEndsOn", err.Error())
				return false
			}
			return true
		case "is_installed":
			s.IsInstalled.Reset()
			if err := s.IsInstalled.ReadJSON(i); err != nil {
				i.ReportError("Field IsInstalled", err.Error())
				return false
			}
			return true
		case "next_billing_date":
			s.NextBillingDate.Reset()
			if err := s.NextBillingDate.ReadJSON(i); err != nil {
				i.ReportError("Field NextBillingDate", err.Error())
				return false
			}
			return true
		case "on_free_trial":
			s.OnFreeTrial.Reset()
			if err := s.OnFreeTrial.ReadJSON(i); err != nil {
				i.ReportError("Field OnFreeTrial", err.Error())
				return false
			}
			return true
		case "plan":
			s.Plan.Reset()
			if err := s.Plan.ReadJSON(i); err != nil {
				i.ReportError("Field Plan", err.Error())
				return false
			}
			return true
		case "unit_count":
			s.UnitCount.Reset()
			if err := s.UnitCount.ReadJSON(i); err != nil {
				i.ReportError("Field UnitCount", err.Error())
				return false
			}
			return true
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(i); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MergedUpstream) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.BaseBranch.Set {
		more.More()
		j.WriteObjectField("base_branch")
		s.BaseBranch.WriteJSON(j)
	}

	if s.MergeType.Set {
		more.More()
		j.WriteObjectField("merge_type")
		s.MergeType.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes MergedUpstream json value to io.Writer.
func (s MergedUpstream) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MergedUpstream json value from io.Reader.
func (s *MergedUpstream) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MergedUpstream from json stream.
func (s *MergedUpstream) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "base_branch":
			s.BaseBranch.Reset()
			if err := s.BaseBranch.ReadJSON(i); err != nil {
				i.ReportError("Field BaseBranch", err.Error())
				return false
			}
			return true
		case "merge_type":
			s.MergeType.Reset()
			if err := s.MergeType.ReadJSON(i); err != nil {
				i.ReportError("Field MergeType", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MergedUpstreamMergeType) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MergedUpstreamMergeType from json stream.
func (s *MergedUpstreamMergeType) ReadJSON(i *json.Iterator) error {
	*s = MergedUpstreamMergeType(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MetaRoot) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("authorizations_url")
	j.WriteString(s.AuthorizationsURL)

	more.More()
	j.WriteObjectField("code_search_url")
	j.WriteString(s.CodeSearchURL)

	more.More()
	j.WriteObjectField("commit_search_url")
	j.WriteString(s.CommitSearchURL)

	more.More()
	j.WriteObjectField("current_user_authorizations_html_url")
	j.WriteString(s.CurrentUserAuthorizationsHTMLURL)

	more.More()
	j.WriteObjectField("current_user_repositories_url")
	j.WriteString(s.CurrentUserRepositoriesURL)

	more.More()
	j.WriteObjectField("current_user_url")
	j.WriteString(s.CurrentUserURL)

	more.More()
	j.WriteObjectField("emails_url")
	j.WriteString(s.EmailsURL)

	more.More()
	j.WriteObjectField("emojis_url")
	j.WriteString(s.EmojisURL)

	more.More()
	j.WriteObjectField("events_url")
	j.WriteString(s.EventsURL)

	more.More()
	j.WriteObjectField("feeds_url")
	j.WriteString(s.FeedsURL)

	more.More()
	j.WriteObjectField("followers_url")
	j.WriteString(s.FollowersURL)

	more.More()
	j.WriteObjectField("following_url")
	j.WriteString(s.FollowingURL)

	more.More()
	j.WriteObjectField("gists_url")
	j.WriteString(s.GistsURL)

	more.More()
	j.WriteObjectField("hub_url")
	j.WriteString(s.HubURL)

	more.More()
	j.WriteObjectField("issue_search_url")
	j.WriteString(s.IssueSearchURL)

	more.More()
	j.WriteObjectField("issues_url")
	j.WriteString(s.IssuesURL)

	more.More()
	j.WriteObjectField("keys_url")
	j.WriteString(s.KeysURL)

	more.More()
	j.WriteObjectField("label_search_url")
	j.WriteString(s.LabelSearchURL)

	more.More()
	j.WriteObjectField("notifications_url")
	j.WriteString(s.NotificationsURL)

	more.More()
	j.WriteObjectField("organization_repositories_url")
	j.WriteString(s.OrganizationRepositoriesURL)

	more.More()
	j.WriteObjectField("organization_teams_url")
	j.WriteString(s.OrganizationTeamsURL)

	more.More()
	j.WriteObjectField("organization_url")
	j.WriteString(s.OrganizationURL)

	more.More()
	j.WriteObjectField("public_gists_url")
	j.WriteString(s.PublicGistsURL)

	more.More()
	j.WriteObjectField("rate_limit_url")
	j.WriteString(s.RateLimitURL)

	more.More()
	j.WriteObjectField("repository_search_url")
	j.WriteString(s.RepositorySearchURL)

	more.More()
	j.WriteObjectField("repository_url")
	j.WriteString(s.RepositoryURL)

	more.More()
	j.WriteObjectField("starred_gists_url")
	j.WriteString(s.StarredGistsURL)

	more.More()
	j.WriteObjectField("starred_url")
	j.WriteString(s.StarredURL)

	if s.TopicSearchURL.Set {
		more.More()
		j.WriteObjectField("topic_search_url")
		s.TopicSearchURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("user_organizations_url")
	j.WriteString(s.UserOrganizationsURL)

	more.More()
	j.WriteObjectField("user_repositories_url")
	j.WriteString(s.UserRepositoriesURL)

	more.More()
	j.WriteObjectField("user_search_url")
	j.WriteString(s.UserSearchURL)

	more.More()
	j.WriteObjectField("user_url")
	j.WriteString(s.UserURL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes MetaRoot json value to io.Writer.
func (s MetaRoot) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MetaRoot json value from io.Reader.
func (s *MetaRoot) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MetaRoot from json stream.
func (s *MetaRoot) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "authorizations_url":
			s.AuthorizationsURL = i.ReadString()
			return i.Error == nil
		case "code_search_url":
			s.CodeSearchURL = i.ReadString()
			return i.Error == nil
		case "commit_search_url":
			s.CommitSearchURL = i.ReadString()
			return i.Error == nil
		case "current_user_authorizations_html_url":
			s.CurrentUserAuthorizationsHTMLURL = i.ReadString()
			return i.Error == nil
		case "current_user_repositories_url":
			s.CurrentUserRepositoriesURL = i.ReadString()
			return i.Error == nil
		case "current_user_url":
			s.CurrentUserURL = i.ReadString()
			return i.Error == nil
		case "emails_url":
			s.EmailsURL = i.ReadString()
			return i.Error == nil
		case "emojis_url":
			s.EmojisURL = i.ReadString()
			return i.Error == nil
		case "events_url":
			s.EventsURL = i.ReadString()
			return i.Error == nil
		case "feeds_url":
			s.FeedsURL = i.ReadString()
			return i.Error == nil
		case "followers_url":
			s.FollowersURL = i.ReadString()
			return i.Error == nil
		case "following_url":
			s.FollowingURL = i.ReadString()
			return i.Error == nil
		case "gists_url":
			s.GistsURL = i.ReadString()
			return i.Error == nil
		case "hub_url":
			s.HubURL = i.ReadString()
			return i.Error == nil
		case "issue_search_url":
			s.IssueSearchURL = i.ReadString()
			return i.Error == nil
		case "issues_url":
			s.IssuesURL = i.ReadString()
			return i.Error == nil
		case "keys_url":
			s.KeysURL = i.ReadString()
			return i.Error == nil
		case "label_search_url":
			s.LabelSearchURL = i.ReadString()
			return i.Error == nil
		case "notifications_url":
			s.NotificationsURL = i.ReadString()
			return i.Error == nil
		case "organization_repositories_url":
			s.OrganizationRepositoriesURL = i.ReadString()
			return i.Error == nil
		case "organization_teams_url":
			s.OrganizationTeamsURL = i.ReadString()
			return i.Error == nil
		case "organization_url":
			s.OrganizationURL = i.ReadString()
			return i.Error == nil
		case "public_gists_url":
			s.PublicGistsURL = i.ReadString()
			return i.Error == nil
		case "rate_limit_url":
			s.RateLimitURL = i.ReadString()
			return i.Error == nil
		case "repository_search_url":
			s.RepositorySearchURL = i.ReadString()
			return i.Error == nil
		case "repository_url":
			s.RepositoryURL = i.ReadString()
			return i.Error == nil
		case "starred_gists_url":
			s.StarredGistsURL = i.ReadString()
			return i.Error == nil
		case "starred_url":
			s.StarredURL = i.ReadString()
			return i.Error == nil
		case "topic_search_url":
			s.TopicSearchURL.Reset()
			if err := s.TopicSearchURL.ReadJSON(i); err != nil {
				i.ReportError("Field TopicSearchURL", err.Error())
				return false
			}
			return true
		case "user_organizations_url":
			s.UserOrganizationsURL = i.ReadString()
			return i.Error == nil
		case "user_repositories_url":
			s.UserRepositoriesURL = i.ReadString()
			return i.Error == nil
		case "user_search_url":
			s.UserSearchURL = i.ReadString()
			return i.Error == nil
		case "user_url":
			s.UserURL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Migration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ArchiveURL.Set {
		more.More()
		j.WriteObjectField("archive_url")
		s.ArchiveURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	if s.Exclude != nil {
		more.More()
		j.WriteObjectField("exclude")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Exclude {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("exclude_attachments")
	j.WriteBool(s.ExcludeAttachments)

	more.More()
	j.WriteObjectField("exclude_git_data")
	j.WriteBool(s.ExcludeGitData)

	more.More()
	j.WriteObjectField("exclude_metadata")
	j.WriteBool(s.ExcludeMetadata)

	more.More()
	j.WriteObjectField("exclude_owner_projects")
	j.WriteBool(s.ExcludeOwnerProjects)

	more.More()
	j.WriteObjectField("exclude_releases")
	j.WriteBool(s.ExcludeReleases)

	more.More()
	j.WriteObjectField("guid")
	j.WriteString(s.GUID)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("lock_repositories")
	j.WriteBool(s.LockRepositories)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("owner")
	s.Owner.WriteJSON(j)

	more.More()
	j.WriteObjectField("repositories")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Repositories {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("state")
	j.WriteString(s.State)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Migration json value to io.Writer.
func (s Migration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Migration json value from io.Reader.
func (s *Migration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Migration from json stream.
func (s *Migration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "archive_url":
			s.ArchiveURL.Reset()
			if err := s.ArchiveURL.ReadJSON(i); err != nil {
				i.ReportError("Field ArchiveURL", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "exclude":
			// Unsupported kind "array" for field "Exclude".
			i.Skip()
			return true
		case "exclude_attachments":
			s.ExcludeAttachments = i.ReadBool()
			return i.Error == nil
		case "exclude_git_data":
			s.ExcludeGitData = i.ReadBool()
			return i.Error == nil
		case "exclude_metadata":
			s.ExcludeMetadata = i.ReadBool()
			return i.Error == nil
		case "exclude_owner_projects":
			s.ExcludeOwnerProjects = i.ReadBool()
			return i.Error == nil
		case "exclude_releases":
			s.ExcludeReleases = i.ReadBool()
			return i.Error == nil
		case "guid":
			s.GUID = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "lock_repositories":
			s.LockRepositories = i.ReadBool()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "owner":
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		case "state":
			s.State = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsGetStatusForOrgExcludeItem) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MigrationsGetStatusForOrgExcludeItem from json stream.
func (s *MigrationsGetStatusForOrgExcludeItem) ReadJSON(i *json.Iterator) error {
	*s = MigrationsGetStatusForOrgExcludeItem(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsListForOrgExcludeItem) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MigrationsListForOrgExcludeItem from json stream.
func (s *MigrationsListForOrgExcludeItem) ReadJSON(i *json.Iterator) error {
	*s = MigrationsListForOrgExcludeItem(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsMapCommitAuthorApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes MigrationsMapCommitAuthorApplicationJSONRequest json value to io.Writer.
func (s MigrationsMapCommitAuthorApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MigrationsMapCommitAuthorApplicationJSONRequest json value from io.Reader.
func (s *MigrationsMapCommitAuthorApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MigrationsMapCommitAuthorApplicationJSONRequest from json stream.
func (s *MigrationsMapCommitAuthorApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsSetLfsPreferenceApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("use_lfs")
	s.UseLfs.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes MigrationsSetLfsPreferenceApplicationJSONRequest json value to io.Writer.
func (s MigrationsSetLfsPreferenceApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MigrationsSetLfsPreferenceApplicationJSONRequest json value from io.Reader.
func (s *MigrationsSetLfsPreferenceApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MigrationsSetLfsPreferenceApplicationJSONRequest from json stream.
func (s *MigrationsSetLfsPreferenceApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "use_lfs":
			if err := s.UseLfs.ReadJSON(i); err != nil {
				i.ReportError("Field UseLfs", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsSetLfsPreferenceApplicationJSONRequestUseLfs) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MigrationsSetLfsPreferenceApplicationJSONRequestUseLfs from json stream.
func (s *MigrationsSetLfsPreferenceApplicationJSONRequestUseLfs) ReadJSON(i *json.Iterator) error {
	*s = MigrationsSetLfsPreferenceApplicationJSONRequestUseLfs(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartForAuthenticatedUserApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Exclude != nil {
		more.More()
		j.WriteObjectField("exclude")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Exclude {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.ExcludeAttachments.Set {
		more.More()
		j.WriteObjectField("exclude_attachments")
		s.ExcludeAttachments.WriteJSON(j)
	}

	if s.ExcludeOwnerProjects.Set {
		more.More()
		j.WriteObjectField("exclude_owner_projects")
		s.ExcludeOwnerProjects.WriteJSON(j)
	}

	if s.ExcludeReleases.Set {
		more.More()
		j.WriteObjectField("exclude_releases")
		s.ExcludeReleases.WriteJSON(j)
	}

	if s.LockRepositories.Set {
		more.More()
		j.WriteObjectField("lock_repositories")
		s.LockRepositories.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("repositories")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Repositories {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes MigrationsStartForAuthenticatedUserApplicationJSONRequest json value to io.Writer.
func (s MigrationsStartForAuthenticatedUserApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MigrationsStartForAuthenticatedUserApplicationJSONRequest json value from io.Reader.
func (s *MigrationsStartForAuthenticatedUserApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MigrationsStartForAuthenticatedUserApplicationJSONRequest from json stream.
func (s *MigrationsStartForAuthenticatedUserApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "exclude":
			// Unsupported kind "array" for field "Exclude".
			i.Skip()
			return true
		case "exclude_attachments":
			s.ExcludeAttachments.Reset()
			if err := s.ExcludeAttachments.ReadJSON(i); err != nil {
				i.ReportError("Field ExcludeAttachments", err.Error())
				return false
			}
			return true
		case "exclude_owner_projects":
			s.ExcludeOwnerProjects.Reset()
			if err := s.ExcludeOwnerProjects.ReadJSON(i); err != nil {
				i.ReportError("Field ExcludeOwnerProjects", err.Error())
				return false
			}
			return true
		case "exclude_releases":
			s.ExcludeReleases.Reset()
			if err := s.ExcludeReleases.ReadJSON(i); err != nil {
				i.ReportError("Field ExcludeReleases", err.Error())
				return false
			}
			return true
		case "lock_repositories":
			s.LockRepositories.Reset()
			if err := s.LockRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field LockRepositories", err.Error())
				return false
			}
			return true
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartForAuthenticatedUserApplicationJSONRequestExcludeItem) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MigrationsStartForAuthenticatedUserApplicationJSONRequestExcludeItem from json stream.
func (s *MigrationsStartForAuthenticatedUserApplicationJSONRequestExcludeItem) ReadJSON(i *json.Iterator) error {
	*s = MigrationsStartForAuthenticatedUserApplicationJSONRequestExcludeItem(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartForOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Exclude != nil {
		more.More()
		j.WriteObjectField("exclude")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Exclude {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.ExcludeAttachments.Set {
		more.More()
		j.WriteObjectField("exclude_attachments")
		s.ExcludeAttachments.WriteJSON(j)
	}

	if s.ExcludeOwnerProjects.Set {
		more.More()
		j.WriteObjectField("exclude_owner_projects")
		s.ExcludeOwnerProjects.WriteJSON(j)
	}

	if s.ExcludeReleases.Set {
		more.More()
		j.WriteObjectField("exclude_releases")
		s.ExcludeReleases.WriteJSON(j)
	}

	if s.LockRepositories.Set {
		more.More()
		j.WriteObjectField("lock_repositories")
		s.LockRepositories.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("repositories")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Repositories {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes MigrationsStartForOrgApplicationJSONRequest json value to io.Writer.
func (s MigrationsStartForOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MigrationsStartForOrgApplicationJSONRequest json value from io.Reader.
func (s *MigrationsStartForOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MigrationsStartForOrgApplicationJSONRequest from json stream.
func (s *MigrationsStartForOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "exclude":
			// Unsupported kind "array" for field "Exclude".
			i.Skip()
			return true
		case "exclude_attachments":
			s.ExcludeAttachments.Reset()
			if err := s.ExcludeAttachments.ReadJSON(i); err != nil {
				i.ReportError("Field ExcludeAttachments", err.Error())
				return false
			}
			return true
		case "exclude_owner_projects":
			s.ExcludeOwnerProjects.Reset()
			if err := s.ExcludeOwnerProjects.ReadJSON(i); err != nil {
				i.ReportError("Field ExcludeOwnerProjects", err.Error())
				return false
			}
			return true
		case "exclude_releases":
			s.ExcludeReleases.Reset()
			if err := s.ExcludeReleases.ReadJSON(i); err != nil {
				i.ReportError("Field ExcludeReleases", err.Error())
				return false
			}
			return true
		case "lock_repositories":
			s.LockRepositories.Reset()
			if err := s.LockRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field LockRepositories", err.Error())
				return false
			}
			return true
		case "repositories":
			// Unsupported kind "array" for field "Repositories".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartForOrgApplicationJSONRequestExcludeItem) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MigrationsStartForOrgApplicationJSONRequestExcludeItem from json stream.
func (s *MigrationsStartForOrgApplicationJSONRequestExcludeItem) ReadJSON(i *json.Iterator) error {
	*s = MigrationsStartForOrgApplicationJSONRequestExcludeItem(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartImportApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.TfvcProject.Set {
		more.More()
		j.WriteObjectField("tfvc_project")
		s.TfvcProject.WriteJSON(j)
	}

	if s.Vcs.Set {
		more.More()
		j.WriteObjectField("vcs")
		s.Vcs.WriteJSON(j)
	}

	if s.VcsPassword.Set {
		more.More()
		j.WriteObjectField("vcs_password")
		s.VcsPassword.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("vcs_url")
	j.WriteString(s.VcsURL)

	if s.VcsUsername.Set {
		more.More()
		j.WriteObjectField("vcs_username")
		s.VcsUsername.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes MigrationsStartImportApplicationJSONRequest json value to io.Writer.
func (s MigrationsStartImportApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MigrationsStartImportApplicationJSONRequest json value from io.Reader.
func (s *MigrationsStartImportApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MigrationsStartImportApplicationJSONRequest from json stream.
func (s *MigrationsStartImportApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "tfvc_project":
			s.TfvcProject.Reset()
			if err := s.TfvcProject.ReadJSON(i); err != nil {
				i.ReportError("Field TfvcProject", err.Error())
				return false
			}
			return true
		case "vcs":
			s.Vcs.Reset()
			if err := s.Vcs.ReadJSON(i); err != nil {
				i.ReportError("Field Vcs", err.Error())
				return false
			}
			return true
		case "vcs_password":
			s.VcsPassword.Reset()
			if err := s.VcsPassword.ReadJSON(i); err != nil {
				i.ReportError("Field VcsPassword", err.Error())
				return false
			}
			return true
		case "vcs_url":
			s.VcsURL = i.ReadString()
			return i.Error == nil
		case "vcs_username":
			s.VcsUsername.Reset()
			if err := s.VcsUsername.ReadJSON(i); err != nil {
				i.ReportError("Field VcsUsername", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsStartImportApplicationJSONRequestVcs) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MigrationsStartImportApplicationJSONRequestVcs from json stream.
func (s *MigrationsStartImportApplicationJSONRequestVcs) ReadJSON(i *json.Iterator) error {
	*s = MigrationsStartImportApplicationJSONRequestVcs(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MigrationsUpdateImportApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.TfvcProject.Set {
		more.More()
		j.WriteObjectField("tfvc_project")
		s.TfvcProject.WriteJSON(j)
	}

	if s.Vcs.Set {
		more.More()
		j.WriteObjectField("vcs")
		s.Vcs.WriteJSON(j)
	}

	if s.VcsPassword.Set {
		more.More()
		j.WriteObjectField("vcs_password")
		s.VcsPassword.WriteJSON(j)
	}

	if s.VcsUsername.Set {
		more.More()
		j.WriteObjectField("vcs_username")
		s.VcsUsername.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes MigrationsUpdateImportApplicationJSONRequest json value to io.Writer.
func (s MigrationsUpdateImportApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MigrationsUpdateImportApplicationJSONRequest json value from io.Reader.
func (s *MigrationsUpdateImportApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MigrationsUpdateImportApplicationJSONRequest from json stream.
func (s *MigrationsUpdateImportApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "tfvc_project":
			s.TfvcProject.Reset()
			if err := s.TfvcProject.ReadJSON(i); err != nil {
				i.ReportError("Field TfvcProject", err.Error())
				return false
			}
			return true
		case "vcs":
			s.Vcs.Reset()
			if err := s.Vcs.ReadJSON(i); err != nil {
				i.ReportError("Field Vcs", err.Error())
				return false
			}
			return true
		case "vcs_password":
			s.VcsPassword.Reset()
			if err := s.VcsPassword.ReadJSON(i); err != nil {
				i.ReportError("Field VcsPassword", err.Error())
				return false
			}
			return true
		case "vcs_username":
			s.VcsUsername.Reset()
			if err := s.VcsUsername.ReadJSON(i); err != nil {
				i.ReportError("Field VcsUsername", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Milestone) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("closed_at")
	s.ClosedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("closed_issues")
	j.WriteInt(s.ClosedIssues)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("creator")
	s.Creator.WriteJSON(j)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("due_on")
	s.DueOn.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("labels_url")
	json.WriteURI(j, s.LabelsURL)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("number")
	j.WriteInt(s.Number)

	more.More()
	j.WriteObjectField("open_issues")
	j.WriteInt(s.OpenIssues)

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Milestone json value to io.Writer.
func (s Milestone) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Milestone json value from io.Reader.
func (s *Milestone) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Milestone from json stream.
func (s *Milestone) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "closed_at":
			if err := s.ClosedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field ClosedAt", err.Error())
				return false
			}
			return true
		case "closed_issues":
			s.ClosedIssues = i.ReadInt()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "creator":
			if err := s.Creator.ReadJSON(i); err != nil {
				i.ReportError("Field Creator", err.Error())
				return false
			}
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "due_on":
			if err := s.DueOn.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field DueOn", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "labels_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field LabelsURL", err.Error())
				return false
			}
			s.LabelsURL = v
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "number":
			s.Number = i.ReadInt()
			return i.Error == nil
		case "open_issues":
			s.OpenIssues = i.ReadInt()
			return i.Error == nil
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MilestoneState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads MilestoneState from json stream.
func (s *MilestoneState) ReadJSON(i *json.Iterator) error {
	*s = MilestoneState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MinimalRepository) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowForking.Set {
		more.More()
		j.WriteObjectField("allow_forking")
		s.AllowForking.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("archive_url")
	j.WriteString(s.ArchiveURL)

	if s.Archived.Set {
		more.More()
		j.WriteObjectField("archived")
		s.Archived.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("assignees_url")
	j.WriteString(s.AssigneesURL)

	more.More()
	j.WriteObjectField("blobs_url")
	j.WriteString(s.BlobsURL)

	more.More()
	j.WriteObjectField("branches_url")
	j.WriteString(s.BranchesURL)

	if s.CloneURL.Set {
		more.More()
		j.WriteObjectField("clone_url")
		s.CloneURL.WriteJSON(j)
	}

	if s.CodeOfConduct.Set {
		more.More()
		j.WriteObjectField("code_of_conduct")
		s.CodeOfConduct.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("collaborators_url")
	j.WriteString(s.CollaboratorsURL)

	more.More()
	j.WriteObjectField("comments_url")
	j.WriteString(s.CommentsURL)

	more.More()
	j.WriteObjectField("commits_url")
	j.WriteString(s.CommitsURL)

	more.More()
	j.WriteObjectField("compare_url")
	j.WriteString(s.CompareURL)

	more.More()
	j.WriteObjectField("contents_url")
	j.WriteString(s.ContentsURL)

	more.More()
	j.WriteObjectField("contributors_url")
	json.WriteURI(j, s.ContributorsURL)

	if s.CreatedAt.Set {
		more.More()
		j.WriteObjectField("created_at")
		s.CreatedAt.WriteJSON(j, json.WriteDateTime)
	}

	if s.DefaultBranch.Set {
		more.More()
		j.WriteObjectField("default_branch")
		s.DefaultBranch.WriteJSON(j)
	}

	if s.DeleteBranchOnMerge.Set {
		more.More()
		j.WriteObjectField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("deployments_url")
	json.WriteURI(j, s.DeploymentsURL)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	if s.Disabled.Set {
		more.More()
		j.WriteObjectField("disabled")
		s.Disabled.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("downloads_url")
	json.WriteURI(j, s.DownloadsURL)

	more.More()
	j.WriteObjectField("events_url")
	json.WriteURI(j, s.EventsURL)

	more.More()
	j.WriteObjectField("fork")
	j.WriteBool(s.Fork)

	if s.Forks.Set {
		more.More()
		j.WriteObjectField("forks")
		s.Forks.WriteJSON(j)
	}

	if s.ForksCount.Set {
		more.More()
		j.WriteObjectField("forks_count")
		s.ForksCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("forks_url")
	json.WriteURI(j, s.ForksURL)

	more.More()
	j.WriteObjectField("full_name")
	j.WriteString(s.FullName)

	more.More()
	j.WriteObjectField("git_commits_url")
	j.WriteString(s.GitCommitsURL)

	more.More()
	j.WriteObjectField("git_refs_url")
	j.WriteString(s.GitRefsURL)

	more.More()
	j.WriteObjectField("git_tags_url")
	j.WriteString(s.GitTagsURL)

	if s.GitURL.Set {
		more.More()
		j.WriteObjectField("git_url")
		s.GitURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	if s.HasDownloads.Set {
		more.More()
		j.WriteObjectField("has_downloads")
		s.HasDownloads.WriteJSON(j)
	}

	if s.HasIssues.Set {
		more.More()
		j.WriteObjectField("has_issues")
		s.HasIssues.WriteJSON(j)
	}

	if s.HasPages.Set {
		more.More()
		j.WriteObjectField("has_pages")
		s.HasPages.WriteJSON(j)
	}

	if s.HasProjects.Set {
		more.More()
		j.WriteObjectField("has_projects")
		s.HasProjects.WriteJSON(j)
	}

	if s.HasWiki.Set {
		more.More()
		j.WriteObjectField("has_wiki")
		s.HasWiki.WriteJSON(j)
	}

	if s.Homepage.Set {
		more.More()
		j.WriteObjectField("homepage")
		s.Homepage.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("hooks_url")
	json.WriteURI(j, s.HooksURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.IsTemplate.Set {
		more.More()
		j.WriteObjectField("is_template")
		s.IsTemplate.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("issue_comment_url")
	j.WriteString(s.IssueCommentURL)

	more.More()
	j.WriteObjectField("issue_events_url")
	j.WriteString(s.IssueEventsURL)

	more.More()
	j.WriteObjectField("issues_url")
	j.WriteString(s.IssuesURL)

	more.More()
	j.WriteObjectField("keys_url")
	j.WriteString(s.KeysURL)

	more.More()
	j.WriteObjectField("labels_url")
	j.WriteString(s.LabelsURL)

	if s.Language.Set {
		more.More()
		j.WriteObjectField("language")
		s.Language.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("languages_url")
	json.WriteURI(j, s.LanguagesURL)

	if s.License.Set {
		more.More()
		j.WriteObjectField("license")
		s.License.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("merges_url")
	json.WriteURI(j, s.MergesURL)

	more.More()
	j.WriteObjectField("milestones_url")
	j.WriteString(s.MilestonesURL)

	if s.MirrorURL.Set {
		more.More()
		j.WriteObjectField("mirror_url")
		s.MirrorURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.NetworkCount.Set {
		more.More()
		j.WriteObjectField("network_count")
		s.NetworkCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("notifications_url")
	j.WriteString(s.NotificationsURL)

	if s.OpenIssues.Set {
		more.More()
		j.WriteObjectField("open_issues")
		s.OpenIssues.WriteJSON(j)
	}

	if s.OpenIssuesCount.Set {
		more.More()
		j.WriteObjectField("open_issues_count")
		s.OpenIssuesCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("owner")
	s.Owner.WriteJSON(j)

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("private")
	j.WriteBool(s.Private)

	more.More()
	j.WriteObjectField("pulls_url")
	j.WriteString(s.PullsURL)

	if s.PushedAt.Set {
		more.More()
		j.WriteObjectField("pushed_at")
		s.PushedAt.WriteJSON(j, json.WriteDateTime)
	}

	more.More()
	j.WriteObjectField("releases_url")
	j.WriteString(s.ReleasesURL)

	if s.SSHURL.Set {
		more.More()
		j.WriteObjectField("ssh_url")
		s.SSHURL.WriteJSON(j)
	}

	if s.Size.Set {
		more.More()
		j.WriteObjectField("size")
		s.Size.WriteJSON(j)
	}

	if s.StargazersCount.Set {
		more.More()
		j.WriteObjectField("stargazers_count")
		s.StargazersCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("stargazers_url")
	json.WriteURI(j, s.StargazersURL)

	more.More()
	j.WriteObjectField("statuses_url")
	j.WriteString(s.StatusesURL)

	if s.SubscribersCount.Set {
		more.More()
		j.WriteObjectField("subscribers_count")
		s.SubscribersCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("subscribers_url")
	json.WriteURI(j, s.SubscribersURL)

	more.More()
	j.WriteObjectField("subscription_url")
	json.WriteURI(j, s.SubscriptionURL)

	if s.SvnURL.Set {
		more.More()
		j.WriteObjectField("svn_url")
		s.SvnURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("tags_url")
	json.WriteURI(j, s.TagsURL)

	more.More()
	j.WriteObjectField("teams_url")
	json.WriteURI(j, s.TeamsURL)

	if s.TempCloneToken.Set {
		more.More()
		j.WriteObjectField("temp_clone_token")
		s.TempCloneToken.WriteJSON(j)
	}

	if s.TemplateRepository.Set {
		more.More()
		j.WriteObjectField("template_repository")
		s.TemplateRepository.WriteJSON(j)
	}

	if s.Topics != nil {
		more.More()
		j.WriteObjectField("topics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Topics {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("trees_url")
	j.WriteString(s.TreesURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	if s.UpdatedAt.Set {
		more.More()
		j.WriteObjectField("updated_at")
		s.UpdatedAt.WriteJSON(j, json.WriteDateTime)
	}

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	if s.Watchers.Set {
		more.More()
		j.WriteObjectField("watchers")
		s.Watchers.WriteJSON(j)
	}

	if s.WatchersCount.Set {
		more.More()
		j.WriteObjectField("watchers_count")
		s.WatchersCount.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes MinimalRepository json value to io.Writer.
func (s MinimalRepository) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MinimalRepository json value from io.Reader.
func (s *MinimalRepository) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MinimalRepository from json stream.
func (s *MinimalRepository) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(i); err != nil {
				i.ReportError("Field AllowForking", err.Error())
				return false
			}
			return true
		case "archive_url":
			s.ArchiveURL = i.ReadString()
			return i.Error == nil
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(i); err != nil {
				i.ReportError("Field Archived", err.Error())
				return false
			}
			return true
		case "assignees_url":
			s.AssigneesURL = i.ReadString()
			return i.Error == nil
		case "blobs_url":
			s.BlobsURL = i.ReadString()
			return i.Error == nil
		case "branches_url":
			s.BranchesURL = i.ReadString()
			return i.Error == nil
		case "clone_url":
			s.CloneURL.Reset()
			if err := s.CloneURL.ReadJSON(i); err != nil {
				i.ReportError("Field CloneURL", err.Error())
				return false
			}
			return true
		case "code_of_conduct":
			s.CodeOfConduct.Reset()
			if err := s.CodeOfConduct.ReadJSON(i); err != nil {
				i.ReportError("Field CodeOfConduct", err.Error())
				return false
			}
			return true
		case "collaborators_url":
			s.CollaboratorsURL = i.ReadString()
			return i.Error == nil
		case "comments_url":
			s.CommentsURL = i.ReadString()
			return i.Error == nil
		case "commits_url":
			s.CommitsURL = i.ReadString()
			return i.Error == nil
		case "compare_url":
			s.CompareURL = i.ReadString()
			return i.Error == nil
		case "contents_url":
			s.ContentsURL = i.ReadString()
			return i.Error == nil
		case "contributors_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ContributorsURL", err.Error())
				return false
			}
			s.ContributorsURL = v
			return true
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "default_branch":
			s.DefaultBranch.Reset()
			if err := s.DefaultBranch.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultBranch", err.Error())
				return false
			}
			return true
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(i); err != nil {
				i.ReportError("Field DeleteBranchOnMerge", err.Error())
				return false
			}
			return true
		case "deployments_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DeploymentsURL", err.Error())
				return false
			}
			s.DeploymentsURL = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "disabled":
			s.Disabled.Reset()
			if err := s.Disabled.ReadJSON(i); err != nil {
				i.ReportError("Field Disabled", err.Error())
				return false
			}
			return true
		case "downloads_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DownloadsURL", err.Error())
				return false
			}
			s.DownloadsURL = v
			return true
		case "events_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			s.EventsURL = v
			return true
		case "fork":
			s.Fork = i.ReadBool()
			return i.Error == nil
		case "forks":
			s.Forks.Reset()
			if err := s.Forks.ReadJSON(i); err != nil {
				i.ReportError("Field Forks", err.Error())
				return false
			}
			return true
		case "forks_count":
			s.ForksCount.Reset()
			if err := s.ForksCount.ReadJSON(i); err != nil {
				i.ReportError("Field ForksCount", err.Error())
				return false
			}
			return true
		case "forks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ForksURL", err.Error())
				return false
			}
			s.ForksURL = v
			return true
		case "full_name":
			s.FullName = i.ReadString()
			return i.Error == nil
		case "git_commits_url":
			s.GitCommitsURL = i.ReadString()
			return i.Error == nil
		case "git_refs_url":
			s.GitRefsURL = i.ReadString()
			return i.Error == nil
		case "git_tags_url":
			s.GitTagsURL = i.ReadString()
			return i.Error == nil
		case "git_url":
			s.GitURL.Reset()
			if err := s.GitURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitURL", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "has_downloads":
			s.HasDownloads.Reset()
			if err := s.HasDownloads.ReadJSON(i); err != nil {
				i.ReportError("Field HasDownloads", err.Error())
				return false
			}
			return true
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(i); err != nil {
				i.ReportError("Field HasIssues", err.Error())
				return false
			}
			return true
		case "has_pages":
			s.HasPages.Reset()
			if err := s.HasPages.ReadJSON(i); err != nil {
				i.ReportError("Field HasPages", err.Error())
				return false
			}
			return true
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(i); err != nil {
				i.ReportError("Field HasProjects", err.Error())
				return false
			}
			return true
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(i); err != nil {
				i.ReportError("Field HasWiki", err.Error())
				return false
			}
			return true
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(i); err != nil {
				i.ReportError("Field Homepage", err.Error())
				return false
			}
			return true
		case "hooks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HooksURL", err.Error())
				return false
			}
			s.HooksURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IsTemplate", err.Error())
				return false
			}
			return true
		case "issue_comment_url":
			s.IssueCommentURL = i.ReadString()
			return i.Error == nil
		case "issue_events_url":
			s.IssueEventsURL = i.ReadString()
			return i.Error == nil
		case "issues_url":
			s.IssuesURL = i.ReadString()
			return i.Error == nil
		case "keys_url":
			s.KeysURL = i.ReadString()
			return i.Error == nil
		case "labels_url":
			s.LabelsURL = i.ReadString()
			return i.Error == nil
		case "language":
			s.Language.Reset()
			if err := s.Language.ReadJSON(i); err != nil {
				i.ReportError("Field Language", err.Error())
				return false
			}
			return true
		case "languages_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field LanguagesURL", err.Error())
				return false
			}
			s.LanguagesURL = v
			return true
		case "license":
			s.License.Reset()
			if err := s.License.ReadJSON(i); err != nil {
				i.ReportError("Field License", err.Error())
				return false
			}
			return true
		case "merges_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field MergesURL", err.Error())
				return false
			}
			s.MergesURL = v
			return true
		case "milestones_url":
			s.MilestonesURL = i.ReadString()
			return i.Error == nil
		case "mirror_url":
			s.MirrorURL.Reset()
			if err := s.MirrorURL.ReadJSON(i); err != nil {
				i.ReportError("Field MirrorURL", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(i); err != nil {
				i.ReportError("Field NetworkCount", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "notifications_url":
			s.NotificationsURL = i.ReadString()
			return i.Error == nil
		case "open_issues":
			s.OpenIssues.Reset()
			if err := s.OpenIssues.ReadJSON(i); err != nil {
				i.ReportError("Field OpenIssues", err.Error())
				return false
			}
			return true
		case "open_issues_count":
			s.OpenIssuesCount.Reset()
			if err := s.OpenIssuesCount.ReadJSON(i); err != nil {
				i.ReportError("Field OpenIssuesCount", err.Error())
				return false
			}
			return true
		case "owner":
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "private":
			s.Private = i.ReadBool()
			return i.Error == nil
		case "pulls_url":
			s.PullsURL = i.ReadString()
			return i.Error == nil
		case "pushed_at":
			s.PushedAt.Reset()
			if err := s.PushedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field PushedAt", err.Error())
				return false
			}
			return true
		case "releases_url":
			s.ReleasesURL = i.ReadString()
			return i.Error == nil
		case "ssh_url":
			s.SSHURL.Reset()
			if err := s.SSHURL.ReadJSON(i); err != nil {
				i.ReportError("Field SSHURL", err.Error())
				return false
			}
			return true
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(i); err != nil {
				i.ReportError("Field Size", err.Error())
				return false
			}
			return true
		case "stargazers_count":
			s.StargazersCount.Reset()
			if err := s.StargazersCount.ReadJSON(i); err != nil {
				i.ReportError("Field StargazersCount", err.Error())
				return false
			}
			return true
		case "stargazers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field StargazersURL", err.Error())
				return false
			}
			s.StargazersURL = v
			return true
		case "statuses_url":
			s.StatusesURL = i.ReadString()
			return i.Error == nil
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(i); err != nil {
				i.ReportError("Field SubscribersCount", err.Error())
				return false
			}
			return true
		case "subscribers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscribersURL", err.Error())
				return false
			}
			s.SubscribersURL = v
			return true
		case "subscription_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscriptionURL", err.Error())
				return false
			}
			s.SubscriptionURL = v
			return true
		case "svn_url":
			s.SvnURL.Reset()
			if err := s.SvnURL.ReadJSON(i); err != nil {
				i.ReportError("Field SvnURL", err.Error())
				return false
			}
			return true
		case "tags_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TagsURL", err.Error())
				return false
			}
			s.TagsURL = v
			return true
		case "teams_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TeamsURL", err.Error())
				return false
			}
			s.TeamsURL = v
			return true
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(i); err != nil {
				i.ReportError("Field TempCloneToken", err.Error())
				return false
			}
			return true
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(i); err != nil {
				i.ReportError("Field TemplateRepository", err.Error())
				return false
			}
			return true
		case "topics":
			// Unsupported kind "array" for field "Topics".
			i.Skip()
			return true
		case "trees_url":
			s.TreesURL = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		case "watchers":
			s.Watchers.Reset()
			if err := s.Watchers.ReadJSON(i); err != nil {
				i.ReportError("Field Watchers", err.Error())
				return false
			}
			return true
		case "watchers_count":
			s.WatchersCount.Reset()
			if err := s.WatchersCount.ReadJSON(i); err != nil {
				i.ReportError("Field WatchersCount", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MinimalRepositoryLicense) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Key.Set {
		more.More()
		j.WriteObjectField("key")
		s.Key.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.SpdxID.Set {
		more.More()
		j.WriteObjectField("spdx_id")
		s.SpdxID.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes MinimalRepositoryLicense json value to io.Writer.
func (s MinimalRepositoryLicense) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MinimalRepositoryLicense json value from io.Reader.
func (s *MinimalRepositoryLicense) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MinimalRepositoryLicense from json stream.
func (s *MinimalRepositoryLicense) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key.Reset()
			if err := s.Key.ReadJSON(i); err != nil {
				i.ReportError("Field Key", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "spdx_id":
			s.SpdxID.Reset()
			if err := s.SpdxID.ReadJSON(i); err != nil {
				i.ReportError("Field SpdxID", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MinimalRepositoryPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Admin.Set {
		more.More()
		j.WriteObjectField("admin")
		s.Admin.WriteJSON(j)
	}

	if s.Maintain.Set {
		more.More()
		j.WriteObjectField("maintain")
		s.Maintain.WriteJSON(j)
	}

	if s.Pull.Set {
		more.More()
		j.WriteObjectField("pull")
		s.Pull.WriteJSON(j)
	}

	if s.Push.Set {
		more.More()
		j.WriteObjectField("push")
		s.Push.WriteJSON(j)
	}

	if s.Triage.Set {
		more.More()
		j.WriteObjectField("triage")
		s.Triage.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes MinimalRepositoryPermissions json value to io.Writer.
func (s MinimalRepositoryPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MinimalRepositoryPermissions json value from io.Reader.
func (s *MinimalRepositoryPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MinimalRepositoryPermissions from json stream.
func (s *MinimalRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admin":
			s.Admin.Reset()
			if err := s.Admin.ReadJSON(i); err != nil {
				i.ReportError("Field Admin", err.Error())
				return false
			}
			return true
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(i); err != nil {
				i.ReportError("Field Maintain", err.Error())
				return false
			}
			return true
		case "pull":
			s.Pull.Reset()
			if err := s.Pull.ReadJSON(i); err != nil {
				i.ReportError("Field Pull", err.Error())
				return false
			}
			return true
		case "push":
			s.Push.Reset()
			if err := s.Push.ReadJSON(i); err != nil {
				i.ReportError("Field Push", err.Error())
				return false
			}
			return true
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(i); err != nil {
				i.ReportError("Field Triage", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON writes json value of bool to json stream.
func (o NilBool) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *NilBool) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.BoolValue:
		o.Null = false
		o.Value = bool(i.ReadBool())
		return i.Error
	case json.NilValue:
		var v bool
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilBool", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CheckRunCheckSuite to json stream.
func (o NilCheckRunCheckSuite) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of CheckRunCheckSuite from json iterator.
func (o *NilCheckRunCheckSuite) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v CheckRunCheckSuite
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilCheckRunCheckSuite", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CheckRunConclusion to json stream.
func (o NilCheckRunConclusion) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of CheckRunConclusion from json iterator.
func (o *NilCheckRunConclusion) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Null = false
		o.Value = CheckRunConclusion(i.ReadString())
		return i.Error
	case json.NilValue:
		var v CheckRunConclusion
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilCheckRunConclusion", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CheckSuiteConclusion to json stream.
func (o NilCheckSuiteConclusion) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of CheckSuiteConclusion from json iterator.
func (o *NilCheckSuiteConclusion) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Null = false
		o.Value = CheckSuiteConclusion(i.ReadString())
		return i.Error
	case json.NilValue:
		var v CheckSuiteConclusion
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilCheckSuiteConclusion", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CheckSuiteStatus to json stream.
func (o NilCheckSuiteStatus) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of CheckSuiteStatus from json iterator.
func (o *NilCheckSuiteStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Null = false
		o.Value = CheckSuiteStatus(i.ReadString())
		return i.Error
	case json.NilValue:
		var v CheckSuiteStatus
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilCheckSuiteStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FileCommitContent to json stream.
func (o NilFileCommitContent) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of FileCommitContent from json iterator.
func (o *NilFileCommitContent) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v FileCommitContent
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilFileCommitContent", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of int to json stream.
func (o NilInt) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteInt(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *NilInt) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Null = false
		o.Value = int(i.ReadInt())
		return i.Error
	case json.NilValue:
		var v int
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilInt", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableSimpleCommitAuthor to json stream.
func (o NilNullableSimpleCommitAuthor) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableSimpleCommitAuthor from json iterator.
func (o *NilNullableSimpleCommitAuthor) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v NullableSimpleCommitAuthor
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilNullableSimpleCommitAuthor", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableSimpleCommitCommitter to json stream.
func (o NilNullableSimpleCommitCommitter) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableSimpleCommitCommitter from json iterator.
func (o *NilNullableSimpleCommitCommitter) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v NullableSimpleCommitCommitter
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilNullableSimpleCommitCommitter", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PageStatus to json stream.
func (o NilPageStatus) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of PageStatus from json iterator.
func (o *NilPageStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Null = false
		o.Value = PageStatus(i.ReadString())
		return i.Error
	case json.NilValue:
		var v PageStatus
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilPageStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews to json stream.
func (o NilReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews from json iterator.
func (o *NilReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks to json stream.
func (o NilReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks from json iterator.
func (o *NilReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposUpdateBranchProtectionApplicationJSONRequestRestrictions to json stream.
func (o NilReposUpdateBranchProtectionApplicationJSONRequestRestrictions) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposUpdateBranchProtectionApplicationJSONRequestRestrictions from json iterator.
func (o *NilReposUpdateBranchProtectionApplicationJSONRequestRestrictions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v ReposUpdateBranchProtectionApplicationJSONRequestRestrictions
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilReposUpdateBranchProtectionApplicationJSONRequestRestrictions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of SimpleCommitAuthor to json stream.
func (o NilSimpleCommitAuthor) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of SimpleCommitAuthor from json iterator.
func (o *NilSimpleCommitAuthor) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v SimpleCommitAuthor
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilSimpleCommitAuthor", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of SimpleCommitCommitter to json stream.
func (o NilSimpleCommitCommitter) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of SimpleCommitCommitter from json iterator.
func (o *NilSimpleCommitCommitter) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v SimpleCommitCommitter
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilSimpleCommitCommitter", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of string to json stream.
func (o NilString) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *NilString) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Null = false
		o.Value = string(i.ReadString())
		return i.Error
	case json.NilValue:
		var v string
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilString", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of time.Time to json stream.
func (o NilTime) WriteJSON(j *json.Stream, format func(*json.Stream, time.Time)) {
	if o.Null {
		j.WriteNil()
		return
	}
	format(j, o.Value)
}

// ReadJSON reads json value of time.Time from json iterator.
func (o *NilTime) ReadJSON(i *json.Iterator, format func(*json.Iterator) (time.Time, error)) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Null = false
		v, err := format(i)
		if err != nil {
			return err
		}
		o.Value = v
		return i.Error
	case json.NilValue:
		var v time.Time
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilTime", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of url.URL to json stream.
func (o NilURL) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	json.WriteURI(j, o.Value)
}

// ReadJSON reads json value of url.URL from json iterator.
func (o *NilURL) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Null = false
		v, err := json.ReadURI(i)
		if err != nil {
			return err
		}
		o.Value = v
		return i.Error
	case json.NilValue:
		var v url.URL
		o.Value = v
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading NilURL", i.WhatIsNext())
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s NullableCodeOfConductSimple) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("html_url")
	s.HTMLURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableCodeOfConductSimple json value to io.Writer.
func (s NullableCodeOfConductSimple) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableCodeOfConductSimple json value from io.Reader.
func (s *NullableCodeOfConductSimple) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableCodeOfConductSimple from json stream.
func (s *NullableCodeOfConductSimple) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html_url":
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableCommunityHealthFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableCommunityHealthFile json value to io.Writer.
func (s NullableCommunityHealthFile) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableCommunityHealthFile json value from io.Reader.
func (s *NullableCommunityHealthFile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableCommunityHealthFile from json stream.
func (s *NullableCommunityHealthFile) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableGitUser) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Date.Set {
		more.More()
		j.WriteObjectField("date")
		s.Date.WriteJSON(j)
	}

	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableGitUser json value to io.Writer.
func (s NullableGitUser) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableGitUser json value from io.Reader.
func (s *NullableGitUser) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableGitUser from json stream.
func (s *NullableGitUser) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(i); err != nil {
				i.ReportError("Field Date", err.Error())
				return false
			}
			return true
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableIntegration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClientID.Set {
		more.More()
		j.WriteObjectField("client_id")
		s.ClientID.WriteJSON(j)
	}

	if s.ClientSecret.Set {
		more.More()
		j.WriteObjectField("client_secret")
		s.ClientSecret.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("events")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Events {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("external_url")
	json.WriteURI(j, s.ExternalURL)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.InstallationsCount.Set {
		more.More()
		j.WriteObjectField("installations_count")
		s.InstallationsCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("owner")
	s.Owner.WriteJSON(j)

	if s.Pem.Set {
		more.More()
		j.WriteObjectField("pem")
		s.Pem.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("permissions")
	s.Permissions.WriteJSON(j)

	if s.Slug.Set {
		more.More()
		j.WriteObjectField("slug")
		s.Slug.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	if s.WebhookSecret.Set {
		more.More()
		j.WriteObjectField("webhook_secret")
		s.WebhookSecret.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableIntegration json value to io.Writer.
func (s NullableIntegration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableIntegration json value from io.Reader.
func (s *NullableIntegration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableIntegration from json stream.
func (s *NullableIntegration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "client_id":
			s.ClientID.Reset()
			if err := s.ClientID.ReadJSON(i); err != nil {
				i.ReportError("Field ClientID", err.Error())
				return false
			}
			return true
		case "client_secret":
			s.ClientSecret.Reset()
			if err := s.ClientSecret.ReadJSON(i); err != nil {
				i.ReportError("Field ClientSecret", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "events":
			// Unsupported kind "array" for field "Events".
			i.Skip()
			return true
		case "external_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ExternalURL", err.Error())
				return false
			}
			s.ExternalURL = v
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "installations_count":
			s.InstallationsCount.Reset()
			if err := s.InstallationsCount.ReadJSON(i); err != nil {
				i.ReportError("Field InstallationsCount", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "owner":
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "pem":
			s.Pem.Reset()
			if err := s.Pem.ReadJSON(i); err != nil {
				i.ReportError("Field Pem", err.Error())
				return false
			}
			return true
		case "permissions":
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "slug":
			s.Slug.Reset()
			if err := s.Slug.ReadJSON(i); err != nil {
				i.ReportError("Field Slug", err.Error())
				return false
			}
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "webhook_secret":
			s.WebhookSecret.Reset()
			if err := s.WebhookSecret.ReadJSON(i); err != nil {
				i.ReportError("Field WebhookSecret", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableIntegrationPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Checks.Set {
		more.More()
		j.WriteObjectField("checks")
		s.Checks.WriteJSON(j)
	}

	if s.Contents.Set {
		more.More()
		j.WriteObjectField("contents")
		s.Contents.WriteJSON(j)
	}

	if s.Deployments.Set {
		more.More()
		j.WriteObjectField("deployments")
		s.Deployments.WriteJSON(j)
	}

	if s.Issues.Set {
		more.More()
		j.WriteObjectField("issues")
		s.Issues.WriteJSON(j)
	}

	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableIntegrationPermissions json value to io.Writer.
func (s NullableIntegrationPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableIntegrationPermissions json value from io.Reader.
func (s *NullableIntegrationPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableIntegrationPermissions from json stream.
func (s *NullableIntegrationPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "checks":
			s.Checks.Reset()
			if err := s.Checks.ReadJSON(i); err != nil {
				i.ReportError("Field Checks", err.Error())
				return false
			}
			return true
		case "contents":
			s.Contents.Reset()
			if err := s.Contents.ReadJSON(i); err != nil {
				i.ReportError("Field Contents", err.Error())
				return false
			}
			return true
		case "deployments":
			s.Deployments.Reset()
			if err := s.Deployments.ReadJSON(i); err != nil {
				i.ReportError("Field Deployments", err.Error())
				return false
			}
			return true
		case "issues":
			s.Issues.Reset()
			if err := s.Issues.ReadJSON(i); err != nil {
				i.ReportError("Field Issues", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableLicenseSimple) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("spdx_id")
	s.SpdxID.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	s.URL.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableLicenseSimple json value to io.Writer.
func (s NullableLicenseSimple) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableLicenseSimple json value from io.Reader.
func (s *NullableLicenseSimple) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableLicenseSimple from json stream.
func (s *NullableLicenseSimple) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "spdx_id":
			if err := s.SpdxID.ReadJSON(i); err != nil {
				i.ReportError("Field SpdxID", err.Error())
				return false
			}
			return true
		case "url":
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableRepository) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowAutoMerge.Set {
		more.More()
		j.WriteObjectField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(j)
	}

	if s.AllowForking.Set {
		more.More()
		j.WriteObjectField("allow_forking")
		s.AllowForking.WriteJSON(j)
	}

	if s.AllowMergeCommit.Set {
		more.More()
		j.WriteObjectField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(j)
	}

	if s.AllowRebaseMerge.Set {
		more.More()
		j.WriteObjectField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(j)
	}

	if s.AllowSquashMerge.Set {
		more.More()
		j.WriteObjectField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("archive_url")
	j.WriteString(s.ArchiveURL)

	more.More()
	j.WriteObjectField("archived")
	j.WriteBool(s.Archived)

	more.More()
	j.WriteObjectField("assignees_url")
	j.WriteString(s.AssigneesURL)

	more.More()
	j.WriteObjectField("blobs_url")
	j.WriteString(s.BlobsURL)

	more.More()
	j.WriteObjectField("branches_url")
	j.WriteString(s.BranchesURL)

	more.More()
	j.WriteObjectField("clone_url")
	j.WriteString(s.CloneURL)

	more.More()
	j.WriteObjectField("collaborators_url")
	j.WriteString(s.CollaboratorsURL)

	more.More()
	j.WriteObjectField("comments_url")
	j.WriteString(s.CommentsURL)

	more.More()
	j.WriteObjectField("commits_url")
	j.WriteString(s.CommitsURL)

	more.More()
	j.WriteObjectField("compare_url")
	j.WriteString(s.CompareURL)

	more.More()
	j.WriteObjectField("contents_url")
	j.WriteString(s.ContentsURL)

	more.More()
	j.WriteObjectField("contributors_url")
	json.WriteURI(j, s.ContributorsURL)

	more.More()
	j.WriteObjectField("created_at")
	s.CreatedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("default_branch")
	j.WriteString(s.DefaultBranch)

	if s.DeleteBranchOnMerge.Set {
		more.More()
		j.WriteObjectField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("deployments_url")
	json.WriteURI(j, s.DeploymentsURL)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("disabled")
	j.WriteBool(s.Disabled)

	more.More()
	j.WriteObjectField("downloads_url")
	json.WriteURI(j, s.DownloadsURL)

	more.More()
	j.WriteObjectField("events_url")
	json.WriteURI(j, s.EventsURL)

	more.More()
	j.WriteObjectField("fork")
	j.WriteBool(s.Fork)

	more.More()
	j.WriteObjectField("forks")
	j.WriteInt(s.Forks)

	more.More()
	j.WriteObjectField("forks_count")
	j.WriteInt(s.ForksCount)

	more.More()
	j.WriteObjectField("forks_url")
	json.WriteURI(j, s.ForksURL)

	more.More()
	j.WriteObjectField("full_name")
	j.WriteString(s.FullName)

	more.More()
	j.WriteObjectField("git_commits_url")
	j.WriteString(s.GitCommitsURL)

	more.More()
	j.WriteObjectField("git_refs_url")
	j.WriteString(s.GitRefsURL)

	more.More()
	j.WriteObjectField("git_tags_url")
	j.WriteString(s.GitTagsURL)

	more.More()
	j.WriteObjectField("git_url")
	j.WriteString(s.GitURL)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("has_downloads")
	j.WriteBool(s.HasDownloads)

	more.More()
	j.WriteObjectField("has_issues")
	j.WriteBool(s.HasIssues)

	more.More()
	j.WriteObjectField("has_pages")
	j.WriteBool(s.HasPages)

	more.More()
	j.WriteObjectField("has_projects")
	j.WriteBool(s.HasProjects)

	more.More()
	j.WriteObjectField("has_wiki")
	j.WriteBool(s.HasWiki)

	more.More()
	j.WriteObjectField("homepage")
	s.Homepage.WriteJSON(j)

	more.More()
	j.WriteObjectField("hooks_url")
	json.WriteURI(j, s.HooksURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.IsTemplate.Set {
		more.More()
		j.WriteObjectField("is_template")
		s.IsTemplate.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("issue_comment_url")
	j.WriteString(s.IssueCommentURL)

	more.More()
	j.WriteObjectField("issue_events_url")
	j.WriteString(s.IssueEventsURL)

	more.More()
	j.WriteObjectField("issues_url")
	j.WriteString(s.IssuesURL)

	more.More()
	j.WriteObjectField("keys_url")
	j.WriteString(s.KeysURL)

	more.More()
	j.WriteObjectField("labels_url")
	j.WriteString(s.LabelsURL)

	more.More()
	j.WriteObjectField("language")
	s.Language.WriteJSON(j)

	more.More()
	j.WriteObjectField("languages_url")
	json.WriteURI(j, s.LanguagesURL)

	more.More()
	j.WriteObjectField("license")
	s.License.WriteJSON(j)

	if s.MasterBranch.Set {
		more.More()
		j.WriteObjectField("master_branch")
		s.MasterBranch.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("merges_url")
	json.WriteURI(j, s.MergesURL)

	more.More()
	j.WriteObjectField("milestones_url")
	j.WriteString(s.MilestonesURL)

	more.More()
	j.WriteObjectField("mirror_url")
	s.MirrorURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.NetworkCount.Set {
		more.More()
		j.WriteObjectField("network_count")
		s.NetworkCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("notifications_url")
	j.WriteString(s.NotificationsURL)

	more.More()
	j.WriteObjectField("open_issues")
	j.WriteInt(s.OpenIssues)

	more.More()
	j.WriteObjectField("open_issues_count")
	j.WriteInt(s.OpenIssuesCount)

	if s.Organization.Set {
		more.More()
		j.WriteObjectField("organization")
		s.Organization.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("owner")
	s.Owner.WriteJSON(j)

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("private")
	j.WriteBool(s.Private)

	more.More()
	j.WriteObjectField("pulls_url")
	j.WriteString(s.PullsURL)

	more.More()
	j.WriteObjectField("pushed_at")
	s.PushedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("releases_url")
	j.WriteString(s.ReleasesURL)

	more.More()
	j.WriteObjectField("ssh_url")
	j.WriteString(s.SSHURL)

	more.More()
	j.WriteObjectField("size")
	j.WriteInt(s.Size)

	more.More()
	j.WriteObjectField("stargazers_count")
	j.WriteInt(s.StargazersCount)

	more.More()
	j.WriteObjectField("stargazers_url")
	json.WriteURI(j, s.StargazersURL)

	if s.StarredAt.Set {
		more.More()
		j.WriteObjectField("starred_at")
		s.StarredAt.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("statuses_url")
	j.WriteString(s.StatusesURL)

	if s.SubscribersCount.Set {
		more.More()
		j.WriteObjectField("subscribers_count")
		s.SubscribersCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("subscribers_url")
	json.WriteURI(j, s.SubscribersURL)

	more.More()
	j.WriteObjectField("subscription_url")
	json.WriteURI(j, s.SubscriptionURL)

	more.More()
	j.WriteObjectField("svn_url")
	json.WriteURI(j, s.SvnURL)

	more.More()
	j.WriteObjectField("tags_url")
	json.WriteURI(j, s.TagsURL)

	more.More()
	j.WriteObjectField("teams_url")
	json.WriteURI(j, s.TeamsURL)

	if s.TempCloneToken.Set {
		more.More()
		j.WriteObjectField("temp_clone_token")
		s.TempCloneToken.WriteJSON(j)
	}

	if s.TemplateRepository.Set {
		more.More()
		j.WriteObjectField("template_repository")
		s.TemplateRepository.WriteJSON(j)
	}

	if s.Topics != nil {
		more.More()
		j.WriteObjectField("topics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Topics {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("trees_url")
	j.WriteString(s.TreesURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	s.UpdatedAt.WriteJSON(j, json.WriteDateTime)

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("watchers")
	j.WriteInt(s.Watchers)

	more.More()
	j.WriteObjectField("watchers_count")
	j.WriteInt(s.WatchersCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableRepository json value to io.Writer.
func (s NullableRepository) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableRepository json value from io.Reader.
func (s *NullableRepository) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableRepository from json stream.
func (s *NullableRepository) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowAutoMerge", err.Error())
				return false
			}
			return true
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(i); err != nil {
				i.ReportError("Field AllowForking", err.Error())
				return false
			}
			return true
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(i); err != nil {
				i.ReportError("Field AllowMergeCommit", err.Error())
				return false
			}
			return true
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowRebaseMerge", err.Error())
				return false
			}
			return true
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSquashMerge", err.Error())
				return false
			}
			return true
		case "archive_url":
			s.ArchiveURL = i.ReadString()
			return i.Error == nil
		case "archived":
			s.Archived = i.ReadBool()
			return i.Error == nil
		case "assignees_url":
			s.AssigneesURL = i.ReadString()
			return i.Error == nil
		case "blobs_url":
			s.BlobsURL = i.ReadString()
			return i.Error == nil
		case "branches_url":
			s.BranchesURL = i.ReadString()
			return i.Error == nil
		case "clone_url":
			s.CloneURL = i.ReadString()
			return i.Error == nil
		case "collaborators_url":
			s.CollaboratorsURL = i.ReadString()
			return i.Error == nil
		case "comments_url":
			s.CommentsURL = i.ReadString()
			return i.Error == nil
		case "commits_url":
			s.CommitsURL = i.ReadString()
			return i.Error == nil
		case "compare_url":
			s.CompareURL = i.ReadString()
			return i.Error == nil
		case "contents_url":
			s.ContentsURL = i.ReadString()
			return i.Error == nil
		case "contributors_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ContributorsURL", err.Error())
				return false
			}
			s.ContributorsURL = v
			return true
		case "created_at":
			if err := s.CreatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "default_branch":
			s.DefaultBranch = i.ReadString()
			return i.Error == nil
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(i); err != nil {
				i.ReportError("Field DeleteBranchOnMerge", err.Error())
				return false
			}
			return true
		case "deployments_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DeploymentsURL", err.Error())
				return false
			}
			s.DeploymentsURL = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "disabled":
			s.Disabled = i.ReadBool()
			return i.Error == nil
		case "downloads_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DownloadsURL", err.Error())
				return false
			}
			s.DownloadsURL = v
			return true
		case "events_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			s.EventsURL = v
			return true
		case "fork":
			s.Fork = i.ReadBool()
			return i.Error == nil
		case "forks":
			s.Forks = i.ReadInt()
			return i.Error == nil
		case "forks_count":
			s.ForksCount = i.ReadInt()
			return i.Error == nil
		case "forks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ForksURL", err.Error())
				return false
			}
			s.ForksURL = v
			return true
		case "full_name":
			s.FullName = i.ReadString()
			return i.Error == nil
		case "git_commits_url":
			s.GitCommitsURL = i.ReadString()
			return i.Error == nil
		case "git_refs_url":
			s.GitRefsURL = i.ReadString()
			return i.Error == nil
		case "git_tags_url":
			s.GitTagsURL = i.ReadString()
			return i.Error == nil
		case "git_url":
			s.GitURL = i.ReadString()
			return i.Error == nil
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "has_downloads":
			s.HasDownloads = i.ReadBool()
			return i.Error == nil
		case "has_issues":
			s.HasIssues = i.ReadBool()
			return i.Error == nil
		case "has_pages":
			s.HasPages = i.ReadBool()
			return i.Error == nil
		case "has_projects":
			s.HasProjects = i.ReadBool()
			return i.Error == nil
		case "has_wiki":
			s.HasWiki = i.ReadBool()
			return i.Error == nil
		case "homepage":
			if err := s.Homepage.ReadJSON(i); err != nil {
				i.ReportError("Field Homepage", err.Error())
				return false
			}
			return true
		case "hooks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HooksURL", err.Error())
				return false
			}
			s.HooksURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IsTemplate", err.Error())
				return false
			}
			return true
		case "issue_comment_url":
			s.IssueCommentURL = i.ReadString()
			return i.Error == nil
		case "issue_events_url":
			s.IssueEventsURL = i.ReadString()
			return i.Error == nil
		case "issues_url":
			s.IssuesURL = i.ReadString()
			return i.Error == nil
		case "keys_url":
			s.KeysURL = i.ReadString()
			return i.Error == nil
		case "labels_url":
			s.LabelsURL = i.ReadString()
			return i.Error == nil
		case "language":
			if err := s.Language.ReadJSON(i); err != nil {
				i.ReportError("Field Language", err.Error())
				return false
			}
			return true
		case "languages_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field LanguagesURL", err.Error())
				return false
			}
			s.LanguagesURL = v
			return true
		case "license":
			if err := s.License.ReadJSON(i); err != nil {
				i.ReportError("Field License", err.Error())
				return false
			}
			return true
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(i); err != nil {
				i.ReportError("Field MasterBranch", err.Error())
				return false
			}
			return true
		case "merges_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field MergesURL", err.Error())
				return false
			}
			s.MergesURL = v
			return true
		case "milestones_url":
			s.MilestonesURL = i.ReadString()
			return i.Error == nil
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(i); err != nil {
				i.ReportError("Field MirrorURL", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(i); err != nil {
				i.ReportError("Field NetworkCount", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "notifications_url":
			s.NotificationsURL = i.ReadString()
			return i.Error == nil
		case "open_issues":
			s.OpenIssues = i.ReadInt()
			return i.Error == nil
		case "open_issues_count":
			s.OpenIssuesCount = i.ReadInt()
			return i.Error == nil
		case "organization":
			s.Organization.Reset()
			if err := s.Organization.ReadJSON(i); err != nil {
				i.ReportError("Field Organization", err.Error())
				return false
			}
			return true
		case "owner":
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "private":
			s.Private = i.ReadBool()
			return i.Error == nil
		case "pulls_url":
			s.PullsURL = i.ReadString()
			return i.Error == nil
		case "pushed_at":
			if err := s.PushedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field PushedAt", err.Error())
				return false
			}
			return true
		case "releases_url":
			s.ReleasesURL = i.ReadString()
			return i.Error == nil
		case "ssh_url":
			s.SSHURL = i.ReadString()
			return i.Error == nil
		case "size":
			s.Size = i.ReadInt()
			return i.Error == nil
		case "stargazers_count":
			s.StargazersCount = i.ReadInt()
			return i.Error == nil
		case "stargazers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field StargazersURL", err.Error())
				return false
			}
			s.StargazersURL = v
			return true
		case "starred_at":
			s.StarredAt.Reset()
			if err := s.StarredAt.ReadJSON(i); err != nil {
				i.ReportError("Field StarredAt", err.Error())
				return false
			}
			return true
		case "statuses_url":
			s.StatusesURL = i.ReadString()
			return i.Error == nil
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(i); err != nil {
				i.ReportError("Field SubscribersCount", err.Error())
				return false
			}
			return true
		case "subscribers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscribersURL", err.Error())
				return false
			}
			s.SubscribersURL = v
			return true
		case "subscription_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscriptionURL", err.Error())
				return false
			}
			s.SubscriptionURL = v
			return true
		case "svn_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SvnURL", err.Error())
				return false
			}
			s.SvnURL = v
			return true
		case "tags_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TagsURL", err.Error())
				return false
			}
			s.TagsURL = v
			return true
		case "teams_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TeamsURL", err.Error())
				return false
			}
			s.TeamsURL = v
			return true
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(i); err != nil {
				i.ReportError("Field TempCloneToken", err.Error())
				return false
			}
			return true
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(i); err != nil {
				i.ReportError("Field TemplateRepository", err.Error())
				return false
			}
			return true
		case "topics":
			// Unsupported kind "array" for field "Topics".
			i.Skip()
			return true
		case "trees_url":
			s.TreesURL = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		case "watchers":
			s.Watchers = i.ReadInt()
			return i.Error == nil
		case "watchers_count":
			s.WatchersCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableRepositoryPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admin")
	j.WriteBool(s.Admin)

	if s.Maintain.Set {
		more.More()
		j.WriteObjectField("maintain")
		s.Maintain.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("pull")
	j.WriteBool(s.Pull)

	more.More()
	j.WriteObjectField("push")
	j.WriteBool(s.Push)

	if s.Triage.Set {
		more.More()
		j.WriteObjectField("triage")
		s.Triage.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableRepositoryPermissions json value to io.Writer.
func (s NullableRepositoryPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableRepositoryPermissions json value from io.Reader.
func (s *NullableRepositoryPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableRepositoryPermissions from json stream.
func (s *NullableRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admin":
			s.Admin = i.ReadBool()
			return i.Error == nil
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(i); err != nil {
				i.ReportError("Field Maintain", err.Error())
				return false
			}
			return true
		case "pull":
			s.Pull = i.ReadBool()
			return i.Error == nil
		case "push":
			s.Push = i.ReadBool()
			return i.Error == nil
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(i); err != nil {
				i.ReportError("Field Triage", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableRepositoryTemplateRepository) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowAutoMerge.Set {
		more.More()
		j.WriteObjectField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(j)
	}

	if s.AllowMergeCommit.Set {
		more.More()
		j.WriteObjectField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(j)
	}

	if s.AllowRebaseMerge.Set {
		more.More()
		j.WriteObjectField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(j)
	}

	if s.AllowSquashMerge.Set {
		more.More()
		j.WriteObjectField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(j)
	}

	if s.ArchiveURL.Set {
		more.More()
		j.WriteObjectField("archive_url")
		s.ArchiveURL.WriteJSON(j)
	}

	if s.Archived.Set {
		more.More()
		j.WriteObjectField("archived")
		s.Archived.WriteJSON(j)
	}

	if s.AssigneesURL.Set {
		more.More()
		j.WriteObjectField("assignees_url")
		s.AssigneesURL.WriteJSON(j)
	}

	if s.BlobsURL.Set {
		more.More()
		j.WriteObjectField("blobs_url")
		s.BlobsURL.WriteJSON(j)
	}

	if s.BranchesURL.Set {
		more.More()
		j.WriteObjectField("branches_url")
		s.BranchesURL.WriteJSON(j)
	}

	if s.CloneURL.Set {
		more.More()
		j.WriteObjectField("clone_url")
		s.CloneURL.WriteJSON(j)
	}

	if s.CollaboratorsURL.Set {
		more.More()
		j.WriteObjectField("collaborators_url")
		s.CollaboratorsURL.WriteJSON(j)
	}

	if s.CommentsURL.Set {
		more.More()
		j.WriteObjectField("comments_url")
		s.CommentsURL.WriteJSON(j)
	}

	if s.CommitsURL.Set {
		more.More()
		j.WriteObjectField("commits_url")
		s.CommitsURL.WriteJSON(j)
	}

	if s.CompareURL.Set {
		more.More()
		j.WriteObjectField("compare_url")
		s.CompareURL.WriteJSON(j)
	}

	if s.ContentsURL.Set {
		more.More()
		j.WriteObjectField("contents_url")
		s.ContentsURL.WriteJSON(j)
	}

	if s.ContributorsURL.Set {
		more.More()
		j.WriteObjectField("contributors_url")
		s.ContributorsURL.WriteJSON(j)
	}

	if s.CreatedAt.Set {
		more.More()
		j.WriteObjectField("created_at")
		s.CreatedAt.WriteJSON(j)
	}

	if s.DefaultBranch.Set {
		more.More()
		j.WriteObjectField("default_branch")
		s.DefaultBranch.WriteJSON(j)
	}

	if s.DeleteBranchOnMerge.Set {
		more.More()
		j.WriteObjectField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(j)
	}

	if s.DeploymentsURL.Set {
		more.More()
		j.WriteObjectField("deployments_url")
		s.DeploymentsURL.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.Disabled.Set {
		more.More()
		j.WriteObjectField("disabled")
		s.Disabled.WriteJSON(j)
	}

	if s.DownloadsURL.Set {
		more.More()
		j.WriteObjectField("downloads_url")
		s.DownloadsURL.WriteJSON(j)
	}

	if s.EventsURL.Set {
		more.More()
		j.WriteObjectField("events_url")
		s.EventsURL.WriteJSON(j)
	}

	if s.Fork.Set {
		more.More()
		j.WriteObjectField("fork")
		s.Fork.WriteJSON(j)
	}

	if s.ForksCount.Set {
		more.More()
		j.WriteObjectField("forks_count")
		s.ForksCount.WriteJSON(j)
	}

	if s.ForksURL.Set {
		more.More()
		j.WriteObjectField("forks_url")
		s.ForksURL.WriteJSON(j)
	}

	if s.FullName.Set {
		more.More()
		j.WriteObjectField("full_name")
		s.FullName.WriteJSON(j)
	}

	if s.GitCommitsURL.Set {
		more.More()
		j.WriteObjectField("git_commits_url")
		s.GitCommitsURL.WriteJSON(j)
	}

	if s.GitRefsURL.Set {
		more.More()
		j.WriteObjectField("git_refs_url")
		s.GitRefsURL.WriteJSON(j)
	}

	if s.GitTagsURL.Set {
		more.More()
		j.WriteObjectField("git_tags_url")
		s.GitTagsURL.WriteJSON(j)
	}

	if s.GitURL.Set {
		more.More()
		j.WriteObjectField("git_url")
		s.GitURL.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.HasDownloads.Set {
		more.More()
		j.WriteObjectField("has_downloads")
		s.HasDownloads.WriteJSON(j)
	}

	if s.HasIssues.Set {
		more.More()
		j.WriteObjectField("has_issues")
		s.HasIssues.WriteJSON(j)
	}

	if s.HasPages.Set {
		more.More()
		j.WriteObjectField("has_pages")
		s.HasPages.WriteJSON(j)
	}

	if s.HasProjects.Set {
		more.More()
		j.WriteObjectField("has_projects")
		s.HasProjects.WriteJSON(j)
	}

	if s.HasWiki.Set {
		more.More()
		j.WriteObjectField("has_wiki")
		s.HasWiki.WriteJSON(j)
	}

	if s.Homepage.Set {
		more.More()
		j.WriteObjectField("homepage")
		s.Homepage.WriteJSON(j)
	}

	if s.HooksURL.Set {
		more.More()
		j.WriteObjectField("hooks_url")
		s.HooksURL.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.IsTemplate.Set {
		more.More()
		j.WriteObjectField("is_template")
		s.IsTemplate.WriteJSON(j)
	}

	if s.IssueCommentURL.Set {
		more.More()
		j.WriteObjectField("issue_comment_url")
		s.IssueCommentURL.WriteJSON(j)
	}

	if s.IssueEventsURL.Set {
		more.More()
		j.WriteObjectField("issue_events_url")
		s.IssueEventsURL.WriteJSON(j)
	}

	if s.IssuesURL.Set {
		more.More()
		j.WriteObjectField("issues_url")
		s.IssuesURL.WriteJSON(j)
	}

	if s.KeysURL.Set {
		more.More()
		j.WriteObjectField("keys_url")
		s.KeysURL.WriteJSON(j)
	}

	if s.LabelsURL.Set {
		more.More()
		j.WriteObjectField("labels_url")
		s.LabelsURL.WriteJSON(j)
	}

	if s.Language.Set {
		more.More()
		j.WriteObjectField("language")
		s.Language.WriteJSON(j)
	}

	if s.LanguagesURL.Set {
		more.More()
		j.WriteObjectField("languages_url")
		s.LanguagesURL.WriteJSON(j)
	}

	if s.MergesURL.Set {
		more.More()
		j.WriteObjectField("merges_url")
		s.MergesURL.WriteJSON(j)
	}

	if s.MilestonesURL.Set {
		more.More()
		j.WriteObjectField("milestones_url")
		s.MilestonesURL.WriteJSON(j)
	}

	if s.MirrorURL.Set {
		more.More()
		j.WriteObjectField("mirror_url")
		s.MirrorURL.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.NetworkCount.Set {
		more.More()
		j.WriteObjectField("network_count")
		s.NetworkCount.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.NotificationsURL.Set {
		more.More()
		j.WriteObjectField("notifications_url")
		s.NotificationsURL.WriteJSON(j)
	}

	if s.OpenIssuesCount.Set {
		more.More()
		j.WriteObjectField("open_issues_count")
		s.OpenIssuesCount.WriteJSON(j)
	}

	if s.Owner.Set {
		more.More()
		j.WriteObjectField("owner")
		s.Owner.WriteJSON(j)
	}

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	if s.PullsURL.Set {
		more.More()
		j.WriteObjectField("pulls_url")
		s.PullsURL.WriteJSON(j)
	}

	if s.PushedAt.Set {
		more.More()
		j.WriteObjectField("pushed_at")
		s.PushedAt.WriteJSON(j)
	}

	if s.ReleasesURL.Set {
		more.More()
		j.WriteObjectField("releases_url")
		s.ReleasesURL.WriteJSON(j)
	}

	if s.SSHURL.Set {
		more.More()
		j.WriteObjectField("ssh_url")
		s.SSHURL.WriteJSON(j)
	}

	if s.Size.Set {
		more.More()
		j.WriteObjectField("size")
		s.Size.WriteJSON(j)
	}

	if s.StargazersCount.Set {
		more.More()
		j.WriteObjectField("stargazers_count")
		s.StargazersCount.WriteJSON(j)
	}

	if s.StargazersURL.Set {
		more.More()
		j.WriteObjectField("stargazers_url")
		s.StargazersURL.WriteJSON(j)
	}

	if s.StatusesURL.Set {
		more.More()
		j.WriteObjectField("statuses_url")
		s.StatusesURL.WriteJSON(j)
	}

	if s.SubscribersCount.Set {
		more.More()
		j.WriteObjectField("subscribers_count")
		s.SubscribersCount.WriteJSON(j)
	}

	if s.SubscribersURL.Set {
		more.More()
		j.WriteObjectField("subscribers_url")
		s.SubscribersURL.WriteJSON(j)
	}

	if s.SubscriptionURL.Set {
		more.More()
		j.WriteObjectField("subscription_url")
		s.SubscriptionURL.WriteJSON(j)
	}

	if s.SvnURL.Set {
		more.More()
		j.WriteObjectField("svn_url")
		s.SvnURL.WriteJSON(j)
	}

	if s.TagsURL.Set {
		more.More()
		j.WriteObjectField("tags_url")
		s.TagsURL.WriteJSON(j)
	}

	if s.TeamsURL.Set {
		more.More()
		j.WriteObjectField("teams_url")
		s.TeamsURL.WriteJSON(j)
	}

	if s.TempCloneToken.Set {
		more.More()
		j.WriteObjectField("temp_clone_token")
		s.TempCloneToken.WriteJSON(j)
	}

	if s.Topics != nil {
		more.More()
		j.WriteObjectField("topics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Topics {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.TreesURL.Set {
		more.More()
		j.WriteObjectField("trees_url")
		s.TreesURL.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	if s.UpdatedAt.Set {
		more.More()
		j.WriteObjectField("updated_at")
		s.UpdatedAt.WriteJSON(j)
	}

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	if s.WatchersCount.Set {
		more.More()
		j.WriteObjectField("watchers_count")
		s.WatchersCount.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableRepositoryTemplateRepository json value to io.Writer.
func (s NullableRepositoryTemplateRepository) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableRepositoryTemplateRepository json value from io.Reader.
func (s *NullableRepositoryTemplateRepository) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableRepositoryTemplateRepository from json stream.
func (s *NullableRepositoryTemplateRepository) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowAutoMerge", err.Error())
				return false
			}
			return true
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(i); err != nil {
				i.ReportError("Field AllowMergeCommit", err.Error())
				return false
			}
			return true
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowRebaseMerge", err.Error())
				return false
			}
			return true
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSquashMerge", err.Error())
				return false
			}
			return true
		case "archive_url":
			s.ArchiveURL.Reset()
			if err := s.ArchiveURL.ReadJSON(i); err != nil {
				i.ReportError("Field ArchiveURL", err.Error())
				return false
			}
			return true
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(i); err != nil {
				i.ReportError("Field Archived", err.Error())
				return false
			}
			return true
		case "assignees_url":
			s.AssigneesURL.Reset()
			if err := s.AssigneesURL.ReadJSON(i); err != nil {
				i.ReportError("Field AssigneesURL", err.Error())
				return false
			}
			return true
		case "blobs_url":
			s.BlobsURL.Reset()
			if err := s.BlobsURL.ReadJSON(i); err != nil {
				i.ReportError("Field BlobsURL", err.Error())
				return false
			}
			return true
		case "branches_url":
			s.BranchesURL.Reset()
			if err := s.BranchesURL.ReadJSON(i); err != nil {
				i.ReportError("Field BranchesURL", err.Error())
				return false
			}
			return true
		case "clone_url":
			s.CloneURL.Reset()
			if err := s.CloneURL.ReadJSON(i); err != nil {
				i.ReportError("Field CloneURL", err.Error())
				return false
			}
			return true
		case "collaborators_url":
			s.CollaboratorsURL.Reset()
			if err := s.CollaboratorsURL.ReadJSON(i); err != nil {
				i.ReportError("Field CollaboratorsURL", err.Error())
				return false
			}
			return true
		case "comments_url":
			s.CommentsURL.Reset()
			if err := s.CommentsURL.ReadJSON(i); err != nil {
				i.ReportError("Field CommentsURL", err.Error())
				return false
			}
			return true
		case "commits_url":
			s.CommitsURL.Reset()
			if err := s.CommitsURL.ReadJSON(i); err != nil {
				i.ReportError("Field CommitsURL", err.Error())
				return false
			}
			return true
		case "compare_url":
			s.CompareURL.Reset()
			if err := s.CompareURL.ReadJSON(i); err != nil {
				i.ReportError("Field CompareURL", err.Error())
				return false
			}
			return true
		case "contents_url":
			s.ContentsURL.Reset()
			if err := s.ContentsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ContentsURL", err.Error())
				return false
			}
			return true
		case "contributors_url":
			s.ContributorsURL.Reset()
			if err := s.ContributorsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ContributorsURL", err.Error())
				return false
			}
			return true
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(i); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "default_branch":
			s.DefaultBranch.Reset()
			if err := s.DefaultBranch.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultBranch", err.Error())
				return false
			}
			return true
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(i); err != nil {
				i.ReportError("Field DeleteBranchOnMerge", err.Error())
				return false
			}
			return true
		case "deployments_url":
			s.DeploymentsURL.Reset()
			if err := s.DeploymentsURL.ReadJSON(i); err != nil {
				i.ReportError("Field DeploymentsURL", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "disabled":
			s.Disabled.Reset()
			if err := s.Disabled.ReadJSON(i); err != nil {
				i.ReportError("Field Disabled", err.Error())
				return false
			}
			return true
		case "downloads_url":
			s.DownloadsURL.Reset()
			if err := s.DownloadsURL.ReadJSON(i); err != nil {
				i.ReportError("Field DownloadsURL", err.Error())
				return false
			}
			return true
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			return true
		case "fork":
			s.Fork.Reset()
			if err := s.Fork.ReadJSON(i); err != nil {
				i.ReportError("Field Fork", err.Error())
				return false
			}
			return true
		case "forks_count":
			s.ForksCount.Reset()
			if err := s.ForksCount.ReadJSON(i); err != nil {
				i.ReportError("Field ForksCount", err.Error())
				return false
			}
			return true
		case "forks_url":
			s.ForksURL.Reset()
			if err := s.ForksURL.ReadJSON(i); err != nil {
				i.ReportError("Field ForksURL", err.Error())
				return false
			}
			return true
		case "full_name":
			s.FullName.Reset()
			if err := s.FullName.ReadJSON(i); err != nil {
				i.ReportError("Field FullName", err.Error())
				return false
			}
			return true
		case "git_commits_url":
			s.GitCommitsURL.Reset()
			if err := s.GitCommitsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitCommitsURL", err.Error())
				return false
			}
			return true
		case "git_refs_url":
			s.GitRefsURL.Reset()
			if err := s.GitRefsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitRefsURL", err.Error())
				return false
			}
			return true
		case "git_tags_url":
			s.GitTagsURL.Reset()
			if err := s.GitTagsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitTagsURL", err.Error())
				return false
			}
			return true
		case "git_url":
			s.GitURL.Reset()
			if err := s.GitURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitURL", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "has_downloads":
			s.HasDownloads.Reset()
			if err := s.HasDownloads.ReadJSON(i); err != nil {
				i.ReportError("Field HasDownloads", err.Error())
				return false
			}
			return true
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(i); err != nil {
				i.ReportError("Field HasIssues", err.Error())
				return false
			}
			return true
		case "has_pages":
			s.HasPages.Reset()
			if err := s.HasPages.ReadJSON(i); err != nil {
				i.ReportError("Field HasPages", err.Error())
				return false
			}
			return true
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(i); err != nil {
				i.ReportError("Field HasProjects", err.Error())
				return false
			}
			return true
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(i); err != nil {
				i.ReportError("Field HasWiki", err.Error())
				return false
			}
			return true
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(i); err != nil {
				i.ReportError("Field Homepage", err.Error())
				return false
			}
			return true
		case "hooks_url":
			s.HooksURL.Reset()
			if err := s.HooksURL.ReadJSON(i); err != nil {
				i.ReportError("Field HooksURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IsTemplate", err.Error())
				return false
			}
			return true
		case "issue_comment_url":
			s.IssueCommentURL.Reset()
			if err := s.IssueCommentURL.ReadJSON(i); err != nil {
				i.ReportError("Field IssueCommentURL", err.Error())
				return false
			}
			return true
		case "issue_events_url":
			s.IssueEventsURL.Reset()
			if err := s.IssueEventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field IssueEventsURL", err.Error())
				return false
			}
			return true
		case "issues_url":
			s.IssuesURL.Reset()
			if err := s.IssuesURL.ReadJSON(i); err != nil {
				i.ReportError("Field IssuesURL", err.Error())
				return false
			}
			return true
		case "keys_url":
			s.KeysURL.Reset()
			if err := s.KeysURL.ReadJSON(i); err != nil {
				i.ReportError("Field KeysURL", err.Error())
				return false
			}
			return true
		case "labels_url":
			s.LabelsURL.Reset()
			if err := s.LabelsURL.ReadJSON(i); err != nil {
				i.ReportError("Field LabelsURL", err.Error())
				return false
			}
			return true
		case "language":
			s.Language.Reset()
			if err := s.Language.ReadJSON(i); err != nil {
				i.ReportError("Field Language", err.Error())
				return false
			}
			return true
		case "languages_url":
			s.LanguagesURL.Reset()
			if err := s.LanguagesURL.ReadJSON(i); err != nil {
				i.ReportError("Field LanguagesURL", err.Error())
				return false
			}
			return true
		case "merges_url":
			s.MergesURL.Reset()
			if err := s.MergesURL.ReadJSON(i); err != nil {
				i.ReportError("Field MergesURL", err.Error())
				return false
			}
			return true
		case "milestones_url":
			s.MilestonesURL.Reset()
			if err := s.MilestonesURL.ReadJSON(i); err != nil {
				i.ReportError("Field MilestonesURL", err.Error())
				return false
			}
			return true
		case "mirror_url":
			s.MirrorURL.Reset()
			if err := s.MirrorURL.ReadJSON(i); err != nil {
				i.ReportError("Field MirrorURL", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(i); err != nil {
				i.ReportError("Field NetworkCount", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "notifications_url":
			s.NotificationsURL.Reset()
			if err := s.NotificationsURL.ReadJSON(i); err != nil {
				i.ReportError("Field NotificationsURL", err.Error())
				return false
			}
			return true
		case "open_issues_count":
			s.OpenIssuesCount.Reset()
			if err := s.OpenIssuesCount.ReadJSON(i); err != nil {
				i.ReportError("Field OpenIssuesCount", err.Error())
				return false
			}
			return true
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		case "pulls_url":
			s.PullsURL.Reset()
			if err := s.PullsURL.ReadJSON(i); err != nil {
				i.ReportError("Field PullsURL", err.Error())
				return false
			}
			return true
		case "pushed_at":
			s.PushedAt.Reset()
			if err := s.PushedAt.ReadJSON(i); err != nil {
				i.ReportError("Field PushedAt", err.Error())
				return false
			}
			return true
		case "releases_url":
			s.ReleasesURL.Reset()
			if err := s.ReleasesURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReleasesURL", err.Error())
				return false
			}
			return true
		case "ssh_url":
			s.SSHURL.Reset()
			if err := s.SSHURL.ReadJSON(i); err != nil {
				i.ReportError("Field SSHURL", err.Error())
				return false
			}
			return true
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(i); err != nil {
				i.ReportError("Field Size", err.Error())
				return false
			}
			return true
		case "stargazers_count":
			s.StargazersCount.Reset()
			if err := s.StargazersCount.ReadJSON(i); err != nil {
				i.ReportError("Field StargazersCount", err.Error())
				return false
			}
			return true
		case "stargazers_url":
			s.StargazersURL.Reset()
			if err := s.StargazersURL.ReadJSON(i); err != nil {
				i.ReportError("Field StargazersURL", err.Error())
				return false
			}
			return true
		case "statuses_url":
			s.StatusesURL.Reset()
			if err := s.StatusesURL.ReadJSON(i); err != nil {
				i.ReportError("Field StatusesURL", err.Error())
				return false
			}
			return true
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(i); err != nil {
				i.ReportError("Field SubscribersCount", err.Error())
				return false
			}
			return true
		case "subscribers_url":
			s.SubscribersURL.Reset()
			if err := s.SubscribersURL.ReadJSON(i); err != nil {
				i.ReportError("Field SubscribersURL", err.Error())
				return false
			}
			return true
		case "subscription_url":
			s.SubscriptionURL.Reset()
			if err := s.SubscriptionURL.ReadJSON(i); err != nil {
				i.ReportError("Field SubscriptionURL", err.Error())
				return false
			}
			return true
		case "svn_url":
			s.SvnURL.Reset()
			if err := s.SvnURL.ReadJSON(i); err != nil {
				i.ReportError("Field SvnURL", err.Error())
				return false
			}
			return true
		case "tags_url":
			s.TagsURL.Reset()
			if err := s.TagsURL.ReadJSON(i); err != nil {
				i.ReportError("Field TagsURL", err.Error())
				return false
			}
			return true
		case "teams_url":
			s.TeamsURL.Reset()
			if err := s.TeamsURL.ReadJSON(i); err != nil {
				i.ReportError("Field TeamsURL", err.Error())
				return false
			}
			return true
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(i); err != nil {
				i.ReportError("Field TempCloneToken", err.Error())
				return false
			}
			return true
		case "topics":
			// Unsupported kind "array" for field "Topics".
			i.Skip()
			return true
		case "trees_url":
			s.TreesURL.Reset()
			if err := s.TreesURL.ReadJSON(i); err != nil {
				i.ReportError("Field TreesURL", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(i); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		case "watchers_count":
			s.WatchersCount.Reset()
			if err := s.WatchersCount.ReadJSON(i); err != nil {
				i.ReportError("Field WatchersCount", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableRepositoryTemplateRepositoryOwner) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvatarURL.Set {
		more.More()
		j.WriteObjectField("avatar_url")
		s.AvatarURL.WriteJSON(j)
	}

	if s.EventsURL.Set {
		more.More()
		j.WriteObjectField("events_url")
		s.EventsURL.WriteJSON(j)
	}

	if s.FollowersURL.Set {
		more.More()
		j.WriteObjectField("followers_url")
		s.FollowersURL.WriteJSON(j)
	}

	if s.FollowingURL.Set {
		more.More()
		j.WriteObjectField("following_url")
		s.FollowingURL.WriteJSON(j)
	}

	if s.GistsURL.Set {
		more.More()
		j.WriteObjectField("gists_url")
		s.GistsURL.WriteJSON(j)
	}

	if s.GravatarID.Set {
		more.More()
		j.WriteObjectField("gravatar_id")
		s.GravatarID.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.Login.Set {
		more.More()
		j.WriteObjectField("login")
		s.Login.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.OrganizationsURL.Set {
		more.More()
		j.WriteObjectField("organizations_url")
		s.OrganizationsURL.WriteJSON(j)
	}

	if s.ReceivedEventsURL.Set {
		more.More()
		j.WriteObjectField("received_events_url")
		s.ReceivedEventsURL.WriteJSON(j)
	}

	if s.ReposURL.Set {
		more.More()
		j.WriteObjectField("repos_url")
		s.ReposURL.WriteJSON(j)
	}

	if s.SiteAdmin.Set {
		more.More()
		j.WriteObjectField("site_admin")
		s.SiteAdmin.WriteJSON(j)
	}

	if s.StarredURL.Set {
		more.More()
		j.WriteObjectField("starred_url")
		s.StarredURL.WriteJSON(j)
	}

	if s.SubscriptionsURL.Set {
		more.More()
		j.WriteObjectField("subscriptions_url")
		s.SubscriptionsURL.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableRepositoryTemplateRepositoryOwner json value to io.Writer.
func (s NullableRepositoryTemplateRepositoryOwner) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableRepositoryTemplateRepositoryOwner json value from io.Reader.
func (s *NullableRepositoryTemplateRepositoryOwner) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableRepositoryTemplateRepositoryOwner from json stream.
func (s *NullableRepositoryTemplateRepositoryOwner) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			s.AvatarURL.Reset()
			if err := s.AvatarURL.ReadJSON(i); err != nil {
				i.ReportError("Field AvatarURL", err.Error())
				return false
			}
			return true
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			return true
		case "followers_url":
			s.FollowersURL.Reset()
			if err := s.FollowersURL.ReadJSON(i); err != nil {
				i.ReportError("Field FollowersURL", err.Error())
				return false
			}
			return true
		case "following_url":
			s.FollowingURL.Reset()
			if err := s.FollowingURL.ReadJSON(i); err != nil {
				i.ReportError("Field FollowingURL", err.Error())
				return false
			}
			return true
		case "gists_url":
			s.GistsURL.Reset()
			if err := s.GistsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GistsURL", err.Error())
				return false
			}
			return true
		case "gravatar_id":
			s.GravatarID.Reset()
			if err := s.GravatarID.ReadJSON(i); err != nil {
				i.ReportError("Field GravatarID", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "login":
			s.Login.Reset()
			if err := s.Login.ReadJSON(i); err != nil {
				i.ReportError("Field Login", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "organizations_url":
			s.OrganizationsURL.Reset()
			if err := s.OrganizationsURL.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationsURL", err.Error())
				return false
			}
			return true
		case "received_events_url":
			s.ReceivedEventsURL.Reset()
			if err := s.ReceivedEventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReceivedEventsURL", err.Error())
				return false
			}
			return true
		case "repos_url":
			s.ReposURL.Reset()
			if err := s.ReposURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReposURL", err.Error())
				return false
			}
			return true
		case "site_admin":
			s.SiteAdmin.Reset()
			if err := s.SiteAdmin.ReadJSON(i); err != nil {
				i.ReportError("Field SiteAdmin", err.Error())
				return false
			}
			return true
		case "starred_url":
			s.StarredURL.Reset()
			if err := s.StarredURL.ReadJSON(i); err != nil {
				i.ReportError("Field StarredURL", err.Error())
				return false
			}
			return true
		case "subscriptions_url":
			s.SubscriptionsURL.Reset()
			if err := s.SubscriptionsURL.ReadJSON(i); err != nil {
				i.ReportError("Field SubscriptionsURL", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableRepositoryTemplateRepositoryPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Admin.Set {
		more.More()
		j.WriteObjectField("admin")
		s.Admin.WriteJSON(j)
	}

	if s.Maintain.Set {
		more.More()
		j.WriteObjectField("maintain")
		s.Maintain.WriteJSON(j)
	}

	if s.Pull.Set {
		more.More()
		j.WriteObjectField("pull")
		s.Pull.WriteJSON(j)
	}

	if s.Push.Set {
		more.More()
		j.WriteObjectField("push")
		s.Push.WriteJSON(j)
	}

	if s.Triage.Set {
		more.More()
		j.WriteObjectField("triage")
		s.Triage.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableRepositoryTemplateRepositoryPermissions json value to io.Writer.
func (s NullableRepositoryTemplateRepositoryPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableRepositoryTemplateRepositoryPermissions json value from io.Reader.
func (s *NullableRepositoryTemplateRepositoryPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableRepositoryTemplateRepositoryPermissions from json stream.
func (s *NullableRepositoryTemplateRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admin":
			s.Admin.Reset()
			if err := s.Admin.ReadJSON(i); err != nil {
				i.ReportError("Field Admin", err.Error())
				return false
			}
			return true
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(i); err != nil {
				i.ReportError("Field Maintain", err.Error())
				return false
			}
			return true
		case "pull":
			s.Pull.Reset()
			if err := s.Pull.ReadJSON(i); err != nil {
				i.ReportError("Field Pull", err.Error())
				return false
			}
			return true
		case "push":
			s.Push.Reset()
			if err := s.Push.ReadJSON(i); err != nil {
				i.ReportError("Field Push", err.Error())
				return false
			}
			return true
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(i); err != nil {
				i.ReportError("Field Triage", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableScopedInstallation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("account")
	s.Account.WriteJSON(j)

	if s.HasMultipleSingleFiles.Set {
		more.More()
		j.WriteObjectField("has_multiple_single_files")
		s.HasMultipleSingleFiles.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("permissions")
	s.Permissions.WriteJSON(j)

	more.More()
	j.WriteObjectField("repositories_url")
	json.WriteURI(j, s.RepositoriesURL)

	more.More()
	j.WriteObjectField("repository_selection")
	s.RepositorySelection.WriteJSON(j)

	more.More()
	j.WriteObjectField("single_file_name")
	s.SingleFileName.WriteJSON(j)

	if s.SingleFilePaths != nil {
		more.More()
		j.WriteObjectField("single_file_paths")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.SingleFilePaths {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableScopedInstallation json value to io.Writer.
func (s NullableScopedInstallation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableScopedInstallation json value from io.Reader.
func (s *NullableScopedInstallation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableScopedInstallation from json stream.
func (s *NullableScopedInstallation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "account":
			if err := s.Account.ReadJSON(i); err != nil {
				i.ReportError("Field Account", err.Error())
				return false
			}
			return true
		case "has_multiple_single_files":
			s.HasMultipleSingleFiles.Reset()
			if err := s.HasMultipleSingleFiles.ReadJSON(i); err != nil {
				i.ReportError("Field HasMultipleSingleFiles", err.Error())
				return false
			}
			return true
		case "permissions":
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "repositories_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field RepositoriesURL", err.Error())
				return false
			}
			s.RepositoriesURL = v
			return true
		case "repository_selection":
			if err := s.RepositorySelection.ReadJSON(i); err != nil {
				i.ReportError("Field RepositorySelection", err.Error())
				return false
			}
			return true
		case "single_file_name":
			if err := s.SingleFileName.ReadJSON(i); err != nil {
				i.ReportError("Field SingleFileName", err.Error())
				return false
			}
			return true
		case "single_file_paths":
			// Unsupported kind "array" for field "SingleFilePaths".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableScopedInstallationRepositorySelection) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads NullableScopedInstallationRepositorySelection from json stream.
func (s *NullableScopedInstallationRepositorySelection) ReadJSON(i *json.Iterator) error {
	*s = NullableScopedInstallationRepositorySelection(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableSimpleCommit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author")
	s.Author.WriteJSON(j)

	more.More()
	j.WriteObjectField("committer")
	s.Committer.WriteJSON(j)

	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	more.More()
	j.WriteObjectField("timestamp")
	json.WriteDateTime(j, s.Timestamp)

	more.More()
	j.WriteObjectField("tree_id")
	j.WriteString(s.TreeID)

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableSimpleCommit json value to io.Writer.
func (s NullableSimpleCommit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableSimpleCommit json value from io.Reader.
func (s *NullableSimpleCommit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableSimpleCommit from json stream.
func (s *NullableSimpleCommit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "committer":
			if err := s.Committer.ReadJSON(i); err != nil {
				i.ReportError("Field Committer", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadString()
			return i.Error == nil
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "timestamp":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field Timestamp", err.Error())
				return false
			}
			s.Timestamp = v
			return true
		case "tree_id":
			s.TreeID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableSimpleCommitAuthor) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableSimpleCommitAuthor json value to io.Writer.
func (s NullableSimpleCommitAuthor) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableSimpleCommitAuthor json value from io.Reader.
func (s *NullableSimpleCommitAuthor) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableSimpleCommitAuthor from json stream.
func (s *NullableSimpleCommitAuthor) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableSimpleCommitCommitter) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableSimpleCommitCommitter json value to io.Writer.
func (s NullableSimpleCommitCommitter) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableSimpleCommitCommitter json value from io.Reader.
func (s *NullableSimpleCommitCommitter) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableSimpleCommitCommitter from json stream.
func (s *NullableSimpleCommitCommitter) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableSimpleUser) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("avatar_url")
	json.WriteURI(j, s.AvatarURL)

	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("events_url")
	j.WriteString(s.EventsURL)

	more.More()
	j.WriteObjectField("followers_url")
	json.WriteURI(j, s.FollowersURL)

	more.More()
	j.WriteObjectField("following_url")
	j.WriteString(s.FollowingURL)

	more.More()
	j.WriteObjectField("gists_url")
	j.WriteString(s.GistsURL)

	more.More()
	j.WriteObjectField("gravatar_id")
	s.GravatarID.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("login")
	j.WriteString(s.Login)

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("organizations_url")
	json.WriteURI(j, s.OrganizationsURL)

	more.More()
	j.WriteObjectField("received_events_url")
	json.WriteURI(j, s.ReceivedEventsURL)

	more.More()
	j.WriteObjectField("repos_url")
	json.WriteURI(j, s.ReposURL)

	more.More()
	j.WriteObjectField("site_admin")
	j.WriteBool(s.SiteAdmin)

	if s.StarredAt.Set {
		more.More()
		j.WriteObjectField("starred_at")
		s.StarredAt.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("starred_url")
	j.WriteString(s.StarredURL)

	more.More()
	j.WriteObjectField("subscriptions_url")
	json.WriteURI(j, s.SubscriptionsURL)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableSimpleUser json value to io.Writer.
func (s NullableSimpleUser) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableSimpleUser json value from io.Reader.
func (s *NullableSimpleUser) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableSimpleUser from json stream.
func (s *NullableSimpleUser) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field AvatarURL", err.Error())
				return false
			}
			s.AvatarURL = v
			return true
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "events_url":
			s.EventsURL = i.ReadString()
			return i.Error == nil
		case "followers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field FollowersURL", err.Error())
				return false
			}
			s.FollowersURL = v
			return true
		case "following_url":
			s.FollowingURL = i.ReadString()
			return i.Error == nil
		case "gists_url":
			s.GistsURL = i.ReadString()
			return i.Error == nil
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(i); err != nil {
				i.ReportError("Field GravatarID", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "login":
			s.Login = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "organizations_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field OrganizationsURL", err.Error())
				return false
			}
			s.OrganizationsURL = v
			return true
		case "received_events_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ReceivedEventsURL", err.Error())
				return false
			}
			s.ReceivedEventsURL = v
			return true
		case "repos_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ReposURL", err.Error())
				return false
			}
			s.ReposURL = v
			return true
		case "site_admin":
			s.SiteAdmin = i.ReadBool()
			return i.Error == nil
		case "starred_at":
			s.StarredAt.Reset()
			if err := s.StarredAt.ReadJSON(i); err != nil {
				i.ReportError("Field StarredAt", err.Error())
				return false
			}
			return true
		case "starred_url":
			s.StarredURL = i.ReadString()
			return i.Error == nil
		case "subscriptions_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscriptionsURL", err.Error())
				return false
			}
			s.SubscriptionsURL = v
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s NullableTeamSimple) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.LdapDn.Set {
		more.More()
		j.WriteObjectField("ldap_dn")
		s.LdapDn.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("members_url")
	j.WriteString(s.MembersURL)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("permission")
	j.WriteString(s.Permission)

	if s.Privacy.Set {
		more.More()
		j.WriteObjectField("privacy")
		s.Privacy.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("repositories_url")
	json.WriteURI(j, s.RepositoriesURL)

	more.More()
	j.WriteObjectField("slug")
	j.WriteString(s.Slug)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes NullableTeamSimple json value to io.Writer.
func (s NullableTeamSimple) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads NullableTeamSimple json value from io.Reader.
func (s *NullableTeamSimple) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads NullableTeamSimple from json stream.
func (s *NullableTeamSimple) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "ldap_dn":
			s.LdapDn.Reset()
			if err := s.LdapDn.ReadJSON(i); err != nil {
				i.ReportError("Field LdapDn", err.Error())
				return false
			}
			return true
		case "members_url":
			s.MembersURL = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "permission":
			s.Permission = i.ReadString()
			return i.Error == nil
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(i); err != nil {
				i.ReportError("Field Privacy", err.Error())
				return false
			}
			return true
		case "repositories_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field RepositoriesURL", err.Error())
				return false
			}
			s.RepositoriesURL = v
			return true
		case "slug":
			s.Slug = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON writes json value of APIOverviewSSHKeyFingerprints to json stream.
func (o OptAPIOverviewSSHKeyFingerprints) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of APIOverviewSSHKeyFingerprints from json iterator.
func (o *OptAPIOverviewSSHKeyFingerprints) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAPIOverviewSSHKeyFingerprints", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility to json stream.
func (o OptActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility from json iterator.
func (o *OptActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility to json stream.
func (o OptActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility from json iterator.
func (o *OptActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AllowedActions to json stream.
func (o OptAllowedActions) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AllowedActions from json iterator.
func (o *OptAllowedActions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AllowedActions(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAllowedActions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissions to json stream.
func (o OptAppPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of AppPermissions from json iterator.
func (o *OptAppPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsActions to json stream.
func (o OptAppPermissionsActions) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsActions from json iterator.
func (o *OptAppPermissionsActions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsActions(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsActions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsAdministration to json stream.
func (o OptAppPermissionsAdministration) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsAdministration from json iterator.
func (o *OptAppPermissionsAdministration) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsAdministration(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsAdministration", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsChecks to json stream.
func (o OptAppPermissionsChecks) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsChecks from json iterator.
func (o *OptAppPermissionsChecks) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsChecks(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsChecks", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsContentReferences to json stream.
func (o OptAppPermissionsContentReferences) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsContentReferences from json iterator.
func (o *OptAppPermissionsContentReferences) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsContentReferences(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsContentReferences", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsContents to json stream.
func (o OptAppPermissionsContents) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsContents from json iterator.
func (o *OptAppPermissionsContents) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsContents(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsContents", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsDeployments to json stream.
func (o OptAppPermissionsDeployments) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsDeployments from json iterator.
func (o *OptAppPermissionsDeployments) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsDeployments(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsDeployments", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsEnvironments to json stream.
func (o OptAppPermissionsEnvironments) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsEnvironments from json iterator.
func (o *OptAppPermissionsEnvironments) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsEnvironments(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsEnvironments", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsIssues to json stream.
func (o OptAppPermissionsIssues) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsIssues from json iterator.
func (o *OptAppPermissionsIssues) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsIssues(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsIssues", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsMembers to json stream.
func (o OptAppPermissionsMembers) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsMembers from json iterator.
func (o *OptAppPermissionsMembers) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsMembers(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsMembers", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsMetadata to json stream.
func (o OptAppPermissionsMetadata) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsMetadata from json iterator.
func (o *OptAppPermissionsMetadata) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsMetadata(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsMetadata", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsOrganizationAdministration to json stream.
func (o OptAppPermissionsOrganizationAdministration) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationAdministration from json iterator.
func (o *OptAppPermissionsOrganizationAdministration) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsOrganizationAdministration(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsOrganizationAdministration", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsOrganizationHooks to json stream.
func (o OptAppPermissionsOrganizationHooks) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationHooks from json iterator.
func (o *OptAppPermissionsOrganizationHooks) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsOrganizationHooks(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsOrganizationHooks", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsOrganizationPackages to json stream.
func (o OptAppPermissionsOrganizationPackages) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationPackages from json iterator.
func (o *OptAppPermissionsOrganizationPackages) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsOrganizationPackages(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsOrganizationPackages", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsOrganizationPlan to json stream.
func (o OptAppPermissionsOrganizationPlan) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationPlan from json iterator.
func (o *OptAppPermissionsOrganizationPlan) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsOrganizationPlan(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsOrganizationPlan", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsOrganizationProjects to json stream.
func (o OptAppPermissionsOrganizationProjects) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationProjects from json iterator.
func (o *OptAppPermissionsOrganizationProjects) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsOrganizationProjects(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsOrganizationProjects", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsOrganizationSecrets to json stream.
func (o OptAppPermissionsOrganizationSecrets) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationSecrets from json iterator.
func (o *OptAppPermissionsOrganizationSecrets) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsOrganizationSecrets(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsOrganizationSecrets", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsOrganizationSelfHostedRunners to json stream.
func (o OptAppPermissionsOrganizationSelfHostedRunners) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationSelfHostedRunners from json iterator.
func (o *OptAppPermissionsOrganizationSelfHostedRunners) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsOrganizationSelfHostedRunners(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsOrganizationSelfHostedRunners", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsOrganizationUserBlocking to json stream.
func (o OptAppPermissionsOrganizationUserBlocking) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsOrganizationUserBlocking from json iterator.
func (o *OptAppPermissionsOrganizationUserBlocking) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsOrganizationUserBlocking(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsOrganizationUserBlocking", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsPackages to json stream.
func (o OptAppPermissionsPackages) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsPackages from json iterator.
func (o *OptAppPermissionsPackages) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsPackages(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsPackages", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsPages to json stream.
func (o OptAppPermissionsPages) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsPages from json iterator.
func (o *OptAppPermissionsPages) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsPages(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsPages", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsPullRequests to json stream.
func (o OptAppPermissionsPullRequests) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsPullRequests from json iterator.
func (o *OptAppPermissionsPullRequests) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsPullRequests(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsPullRequests", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsRepositoryHooks to json stream.
func (o OptAppPermissionsRepositoryHooks) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsRepositoryHooks from json iterator.
func (o *OptAppPermissionsRepositoryHooks) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsRepositoryHooks(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsRepositoryHooks", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsRepositoryProjects to json stream.
func (o OptAppPermissionsRepositoryProjects) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsRepositoryProjects from json iterator.
func (o *OptAppPermissionsRepositoryProjects) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsRepositoryProjects(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsRepositoryProjects", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsSecretScanningAlerts to json stream.
func (o OptAppPermissionsSecretScanningAlerts) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsSecretScanningAlerts from json iterator.
func (o *OptAppPermissionsSecretScanningAlerts) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsSecretScanningAlerts(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsSecretScanningAlerts", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsSecrets to json stream.
func (o OptAppPermissionsSecrets) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsSecrets from json iterator.
func (o *OptAppPermissionsSecrets) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsSecrets(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsSecrets", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsSecurityEvents to json stream.
func (o OptAppPermissionsSecurityEvents) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsSecurityEvents from json iterator.
func (o *OptAppPermissionsSecurityEvents) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsSecurityEvents(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsSecurityEvents", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsSingleFile to json stream.
func (o OptAppPermissionsSingleFile) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsSingleFile from json iterator.
func (o *OptAppPermissionsSingleFile) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsSingleFile(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsSingleFile", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsStatuses to json stream.
func (o OptAppPermissionsStatuses) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsStatuses from json iterator.
func (o *OptAppPermissionsStatuses) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsStatuses(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsStatuses", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsTeamDiscussions to json stream.
func (o OptAppPermissionsTeamDiscussions) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsTeamDiscussions from json iterator.
func (o *OptAppPermissionsTeamDiscussions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsTeamDiscussions(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsTeamDiscussions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsVulnerabilityAlerts to json stream.
func (o OptAppPermissionsVulnerabilityAlerts) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsVulnerabilityAlerts from json iterator.
func (o *OptAppPermissionsVulnerabilityAlerts) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsVulnerabilityAlerts(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsVulnerabilityAlerts", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AppPermissionsWorkflows to json stream.
func (o OptAppPermissionsWorkflows) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AppPermissionsWorkflows from json iterator.
func (o *OptAppPermissionsWorkflows) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AppPermissionsWorkflows(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAppPermissionsWorkflows", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of AuthenticationTokenRepositorySelection to json stream.
func (o OptAuthenticationTokenRepositorySelection) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of AuthenticationTokenRepositorySelection from json iterator.
func (o *OptAuthenticationTokenRepositorySelection) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = AuthenticationTokenRepositorySelection(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAuthenticationTokenRepositorySelection", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(j *json.Stream) {
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.BoolValue:
		o.Set = true
		o.Value = bool(i.ReadBool())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBool", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BranchProtection to json stream.
func (o OptBranchProtection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BranchProtection from json iterator.
func (o *OptBranchProtection) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBranchProtection", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BranchProtectionAllowDeletions to json stream.
func (o OptBranchProtectionAllowDeletions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BranchProtectionAllowDeletions from json iterator.
func (o *OptBranchProtectionAllowDeletions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBranchProtectionAllowDeletions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BranchProtectionAllowForcePushes to json stream.
func (o OptBranchProtectionAllowForcePushes) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BranchProtectionAllowForcePushes from json iterator.
func (o *OptBranchProtectionAllowForcePushes) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBranchProtectionAllowForcePushes", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BranchProtectionRequiredConversationResolution to json stream.
func (o OptBranchProtectionRequiredConversationResolution) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BranchProtectionRequiredConversationResolution from json iterator.
func (o *OptBranchProtectionRequiredConversationResolution) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBranchProtectionRequiredConversationResolution", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BranchProtectionRequiredLinearHistory to json stream.
func (o OptBranchProtectionRequiredLinearHistory) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BranchProtectionRequiredLinearHistory from json iterator.
func (o *OptBranchProtectionRequiredLinearHistory) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBranchProtectionRequiredLinearHistory", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BranchProtectionRequiredSignatures to json stream.
func (o OptBranchProtectionRequiredSignatures) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BranchProtectionRequiredSignatures from json iterator.
func (o *OptBranchProtectionRequiredSignatures) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBranchProtectionRequiredSignatures", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BranchProtectionRequiredStatusChecks to json stream.
func (o OptBranchProtectionRequiredStatusChecks) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BranchProtectionRequiredStatusChecks from json iterator.
func (o *OptBranchProtectionRequiredStatusChecks) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBranchProtectionRequiredStatusChecks", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BranchRestrictionPolicy to json stream.
func (o OptBranchRestrictionPolicy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BranchRestrictionPolicy from json iterator.
func (o *OptBranchRestrictionPolicy) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBranchRestrictionPolicy", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BranchRestrictionPolicyAppsItemOwner to json stream.
func (o OptBranchRestrictionPolicyAppsItemOwner) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BranchRestrictionPolicyAppsItemOwner from json iterator.
func (o *OptBranchRestrictionPolicyAppsItemOwner) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBranchRestrictionPolicyAppsItemOwner", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of BranchRestrictionPolicyAppsItemPermissions to json stream.
func (o OptBranchRestrictionPolicyAppsItemPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of BranchRestrictionPolicyAppsItemPermissions from json iterator.
func (o *OptBranchRestrictionPolicyAppsItemPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBranchRestrictionPolicyAppsItemPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CodeOfConduct to json stream.
func (o OptCodeOfConduct) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of CodeOfConduct from json iterator.
func (o *OptCodeOfConduct) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCodeOfConduct", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CodeOfConductSimple to json stream.
func (o OptCodeOfConductSimple) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of CodeOfConductSimple from json iterator.
func (o *OptCodeOfConductSimple) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCodeOfConductSimple", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CodeScanningAlertDismissedReason to json stream.
func (o OptCodeScanningAlertDismissedReason) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of CodeScanningAlertDismissedReason from json iterator.
func (o *OptCodeScanningAlertDismissedReason) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = CodeScanningAlertDismissedReason(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCodeScanningAlertDismissedReason", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CodeScanningAlertInstanceMessage to json stream.
func (o OptCodeScanningAlertInstanceMessage) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of CodeScanningAlertInstanceMessage from json iterator.
func (o *OptCodeScanningAlertInstanceMessage) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCodeScanningAlertInstanceMessage", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CodeScanningAlertLocation to json stream.
func (o OptCodeScanningAlertLocation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of CodeScanningAlertLocation from json iterator.
func (o *OptCodeScanningAlertLocation) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCodeScanningAlertLocation", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CodeScanningAlertState to json stream.
func (o OptCodeScanningAlertState) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of CodeScanningAlertState from json iterator.
func (o *OptCodeScanningAlertState) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = CodeScanningAlertState(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCodeScanningAlertState", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CodeScanningSarifsStatusProcessingStatus to json stream.
func (o OptCodeScanningSarifsStatusProcessingStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of CodeScanningSarifsStatusProcessingStatus from json iterator.
func (o *OptCodeScanningSarifsStatusProcessingStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = CodeScanningSarifsStatusProcessingStatus(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCodeScanningSarifsStatusProcessingStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of CommitStats to json stream.
func (o OptCommitStats) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of CommitStats from json iterator.
func (o *OptCommitStats) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptCommitStats", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of DeploymentSimple to json stream.
func (o OptDeploymentSimple) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of DeploymentSimple from json iterator.
func (o *OptDeploymentSimple) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptDeploymentSimple", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility to json stream.
func (o OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility from json iterator.
func (o *OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility to json stream.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility from json iterator.
func (o *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FileCommitCommitAuthor to json stream.
func (o OptFileCommitCommitAuthor) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of FileCommitCommitAuthor from json iterator.
func (o *OptFileCommitCommitAuthor) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFileCommitCommitAuthor", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FileCommitCommitCommitter to json stream.
func (o OptFileCommitCommitCommitter) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of FileCommitCommitCommitter from json iterator.
func (o *OptFileCommitCommitCommitter) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFileCommitCommitCommitter", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FileCommitCommitTree to json stream.
func (o OptFileCommitCommitTree) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of FileCommitCommitTree from json iterator.
func (o *OptFileCommitCommitTree) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFileCommitCommitTree", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FileCommitCommitVerification to json stream.
func (o OptFileCommitCommitVerification) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of FileCommitCommitVerification from json iterator.
func (o *OptFileCommitCommitVerification) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFileCommitCommitVerification", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FileCommitContentLinks to json stream.
func (o OptFileCommitContentLinks) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of FileCommitContentLinks from json iterator.
func (o *OptFileCommitContentLinks) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFileCommitContentLinks", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of float64 to json stream.
func (o OptFloat64) WriteJSON(j *json.Stream) {
	j.WriteFloat64(float64(o.Value))
}

// ReadJSON reads json value of float64 from json iterator.
func (o *OptFloat64) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = float64(i.ReadFloat64())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFloat64", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ForbiddenGistBlock to json stream.
func (o OptForbiddenGistBlock) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ForbiddenGistBlock from json iterator.
func (o *OptForbiddenGistBlock) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptForbiddenGistBlock", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FullRepositoryPermissions to json stream.
func (o OptFullRepositoryPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of FullRepositoryPermissions from json iterator.
func (o *OptFullRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFullRepositoryPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FullRepositorySecurityAndAnalysisAdvancedSecurity to json stream.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of FullRepositorySecurityAndAnalysisAdvancedSecurity from json iterator.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurity) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFullRepositorySecurityAndAnalysisAdvancedSecurity", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FullRepositorySecurityAndAnalysisAdvancedSecurityStatus to json stream.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of FullRepositorySecurityAndAnalysisAdvancedSecurityStatus from json iterator.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = FullRepositorySecurityAndAnalysisAdvancedSecurityStatus(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FullRepositorySecurityAndAnalysisSecretScanning to json stream.
func (o OptFullRepositorySecurityAndAnalysisSecretScanning) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of FullRepositorySecurityAndAnalysisSecretScanning from json iterator.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanning) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFullRepositorySecurityAndAnalysisSecretScanning", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FullRepositorySecurityAndAnalysisSecretScanningStatus to json stream.
func (o OptFullRepositorySecurityAndAnalysisSecretScanningStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of FullRepositorySecurityAndAnalysisSecretScanningStatus from json iterator.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanningStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = FullRepositorySecurityAndAnalysisSecretScanningStatus(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFullRepositorySecurityAndAnalysisSecretScanningStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of GitCreateCommitApplicationJSONRequestAuthor to json stream.
func (o OptGitCreateCommitApplicationJSONRequestAuthor) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of GitCreateCommitApplicationJSONRequestAuthor from json iterator.
func (o *OptGitCreateCommitApplicationJSONRequestAuthor) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptGitCreateCommitApplicationJSONRequestAuthor", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of GitCreateCommitApplicationJSONRequestCommitter to json stream.
func (o OptGitCreateCommitApplicationJSONRequestCommitter) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of GitCreateCommitApplicationJSONRequestCommitter from json iterator.
func (o *OptGitCreateCommitApplicationJSONRequestCommitter) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptGitCreateCommitApplicationJSONRequestCommitter", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of GitCreateTagApplicationJSONRequestTagger to json stream.
func (o OptGitCreateTagApplicationJSONRequestTagger) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of GitCreateTagApplicationJSONRequestTagger from json iterator.
func (o *OptGitCreateTagApplicationJSONRequestTagger) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptGitCreateTagApplicationJSONRequestTagger", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of GitCreateTreeApplicationJSONRequestTreeItemMode to json stream.
func (o OptGitCreateTreeApplicationJSONRequestTreeItemMode) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of GitCreateTreeApplicationJSONRequestTreeItemMode from json iterator.
func (o *OptGitCreateTreeApplicationJSONRequestTreeItemMode) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = GitCreateTreeApplicationJSONRequestTreeItemMode(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptGitCreateTreeApplicationJSONRequestTreeItemMode", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of GitCreateTreeApplicationJSONRequestTreeItemType to json stream.
func (o OptGitCreateTreeApplicationJSONRequestTreeItemType) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of GitCreateTreeApplicationJSONRequestTreeItemType from json iterator.
func (o *OptGitCreateTreeApplicationJSONRequestTreeItemType) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = GitCreateTreeApplicationJSONRequestTreeItemType(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptGitCreateTreeApplicationJSONRequestTreeItemType", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of InstallationTokenRepositorySelection to json stream.
func (o OptInstallationTokenRepositorySelection) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of InstallationTokenRepositorySelection from json iterator.
func (o *OptInstallationTokenRepositorySelection) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = InstallationTokenRepositorySelection(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInstallationTokenRepositorySelection", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of int to json stream.
func (o OptInt) WriteJSON(j *json.Stream) {
	j.WriteInt(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptInt) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = int(i.ReadInt())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInt", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of InteractionExpiry to json stream.
func (o OptInteractionExpiry) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of InteractionExpiry from json iterator.
func (o *OptInteractionExpiry) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = InteractionExpiry(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInteractionExpiry", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IssuesCreateMilestoneApplicationJSONRequestState to json stream.
func (o OptIssuesCreateMilestoneApplicationJSONRequestState) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of IssuesCreateMilestoneApplicationJSONRequestState from json iterator.
func (o *OptIssuesCreateMilestoneApplicationJSONRequestState) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = IssuesCreateMilestoneApplicationJSONRequestState(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIssuesCreateMilestoneApplicationJSONRequestState", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IssuesLockApplicationJSONRequestLockReason to json stream.
func (o OptIssuesLockApplicationJSONRequestLockReason) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of IssuesLockApplicationJSONRequestLockReason from json iterator.
func (o *OptIssuesLockApplicationJSONRequestLockReason) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = IssuesLockApplicationJSONRequestLockReason(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIssuesLockApplicationJSONRequestLockReason", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IssuesUpdateMilestoneApplicationJSONRequestState to json stream.
func (o OptIssuesUpdateMilestoneApplicationJSONRequestState) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of IssuesUpdateMilestoneApplicationJSONRequestState from json iterator.
func (o *OptIssuesUpdateMilestoneApplicationJSONRequestState) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = IssuesUpdateMilestoneApplicationJSONRequestState(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIssuesUpdateMilestoneApplicationJSONRequestState", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of LinkWithType to json stream.
func (o OptLinkWithType) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of LinkWithType from json iterator.
func (o *OptLinkWithType) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptLinkWithType", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MarkdownRenderApplicationJSONRequestMode to json stream.
func (o OptMarkdownRenderApplicationJSONRequestMode) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of MarkdownRenderApplicationJSONRequestMode from json iterator.
func (o *OptMarkdownRenderApplicationJSONRequestMode) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = MarkdownRenderApplicationJSONRequestMode(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMarkdownRenderApplicationJSONRequestMode", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MarketplaceListingPlan to json stream.
func (o OptMarketplaceListingPlan) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of MarketplaceListingPlan from json iterator.
func (o *OptMarketplaceListingPlan) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMarketplaceListingPlan", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MergedUpstreamMergeType to json stream.
func (o OptMergedUpstreamMergeType) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of MergedUpstreamMergeType from json iterator.
func (o *OptMergedUpstreamMergeType) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = MergedUpstreamMergeType(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMergedUpstreamMergeType", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MigrationsStartImportApplicationJSONRequestVcs to json stream.
func (o OptMigrationsStartImportApplicationJSONRequestVcs) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of MigrationsStartImportApplicationJSONRequestVcs from json iterator.
func (o *OptMigrationsStartImportApplicationJSONRequestVcs) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = MigrationsStartImportApplicationJSONRequestVcs(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMigrationsStartImportApplicationJSONRequestVcs", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MinimalRepositoryPermissions to json stream.
func (o OptMinimalRepositoryPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of MinimalRepositoryPermissions from json iterator.
func (o *OptMinimalRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMinimalRepositoryPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of bool to json stream.
func (o OptNilBool) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptNilBool) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.BoolValue:
		o.Set = true
		o.Null = false
		o.Value = bool(i.ReadBool())
		return i.Error
	case json.NilValue:
		var v bool
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilBool", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of FullRepositorySecurityAndAnalysis to json stream.
func (o OptNilFullRepositorySecurityAndAnalysis) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of FullRepositorySecurityAndAnalysis from json iterator.
func (o *OptNilFullRepositorySecurityAndAnalysis) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v FullRepositorySecurityAndAnalysis
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilFullRepositorySecurityAndAnalysis", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of int to json stream.
func (o OptNilInt) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteInt(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptNilInt) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Null = false
		o.Value = int(i.ReadInt())
		return i.Error
	case json.NilValue:
		var v int
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilInt", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MarketplacePurchaseMarketplacePendingChange to json stream.
func (o OptNilMarketplacePurchaseMarketplacePendingChange) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of MarketplacePurchaseMarketplacePendingChange from json iterator.
func (o *OptNilMarketplacePurchaseMarketplacePendingChange) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v MarketplacePurchaseMarketplacePendingChange
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilMarketplacePurchaseMarketplacePendingChange", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MinimalRepositoryLicense to json stream.
func (o OptNilMinimalRepositoryLicense) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of MinimalRepositoryLicense from json iterator.
func (o *OptNilMinimalRepositoryLicense) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v MinimalRepositoryLicense
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilMinimalRepositoryLicense", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableRepositoryTemplateRepository to json stream.
func (o OptNilNullableRepositoryTemplateRepository) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableRepositoryTemplateRepository from json iterator.
func (o *OptNilNullableRepositoryTemplateRepository) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v NullableRepositoryTemplateRepository
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilNullableRepositoryTemplateRepository", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PageProtectedDomainState to json stream.
func (o OptNilPageProtectedDomainState) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of PageProtectedDomainState from json iterator.
func (o *OptNilPageProtectedDomainState) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Null = false
		o.Value = PageProtectedDomainState(i.ReadString())
		return i.Error
	case json.NilValue:
		var v PageProtectedDomainState
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilPageProtectedDomainState", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PagesHealthCheckAltDomain to json stream.
func (o OptNilPagesHealthCheckAltDomain) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PagesHealthCheckAltDomain from json iterator.
func (o *OptNilPagesHealthCheckAltDomain) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v PagesHealthCheckAltDomain
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilPagesHealthCheckAltDomain", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PullRequestReviewCommentStartSide to json stream.
func (o OptNilPullRequestReviewCommentStartSide) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of PullRequestReviewCommentStartSide from json iterator.
func (o *OptNilPullRequestReviewCommentStartSide) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Null = false
		o.Value = PullRequestReviewCommentStartSide(i.ReadString())
		return i.Error
	case json.NilValue:
		var v PullRequestReviewCommentStartSide
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilPullRequestReviewCommentStartSide", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposUpdateApplicationJSONRequestSecurityAndAnalysis to json stream.
func (o OptNilReposUpdateApplicationJSONRequestSecurityAndAnalysis) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposUpdateApplicationJSONRequestSecurityAndAnalysis from json iterator.
func (o *OptNilReposUpdateApplicationJSONRequestSecurityAndAnalysis) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v ReposUpdateApplicationJSONRequestSecurityAndAnalysis
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilReposUpdateApplicationJSONRequestSecurityAndAnalysis", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of RepositoryTemplateRepository to json stream.
func (o OptNilRepositoryTemplateRepository) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of RepositoryTemplateRepository from json iterator.
func (o *OptNilRepositoryTemplateRepository) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		o.Null = false
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	case json.NilValue:
		var v RepositoryTemplateRepository
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilRepositoryTemplateRepository", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReviewCommentStartSide to json stream.
func (o OptNilReviewCommentStartSide) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ReviewCommentStartSide from json iterator.
func (o *OptNilReviewCommentStartSide) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Null = false
		o.Value = ReviewCommentStartSide(i.ReadString())
		return i.Error
	case json.NilValue:
		var v ReviewCommentStartSide
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilReviewCommentStartSide", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of string to json stream.
func (o OptNilString) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptNilString) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Null = false
		o.Value = string(i.ReadString())
		return i.Error
	case json.NilValue:
		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilString", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of time.Time to json stream.
func (o OptNilTime) WriteJSON(j *json.Stream, format func(*json.Stream, time.Time)) {
	if o.Null {
		j.WriteNil()
		return
	}
	format(j, o.Value)
}

// ReadJSON reads json value of time.Time from json iterator.
func (o *OptNilTime) ReadJSON(i *json.Iterator, format func(*json.Iterator) (time.Time, error)) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Null = false
		v, err := format(i)
		if err != nil {
			return err
		}
		o.Value = v
		return i.Error
	case json.NilValue:
		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilTime", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of url.URL to json stream.
func (o OptNilURL) WriteJSON(j *json.Stream) {
	if o.Null {
		j.WriteNil()
		return
	}
	json.WriteURI(j, o.Value)
}

// ReadJSON reads json value of url.URL from json iterator.
func (o *OptNilURL) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Null = false
		v, err := json.ReadURI(i)
		if err != nil {
			return err
		}
		o.Value = v
		return i.Error
	case json.NilValue:
		var v url.URL
		o.Value = v
		o.Set = true
		o.Null = true
		i.Skip()
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNilURL", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableIntegration to json stream.
func (o OptNullableIntegration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableIntegration from json iterator.
func (o *OptNullableIntegration) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNullableIntegration", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableRepository to json stream.
func (o OptNullableRepository) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableRepository from json iterator.
func (o *OptNullableRepository) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNullableRepository", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableRepositoryPermissions to json stream.
func (o OptNullableRepositoryPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableRepositoryPermissions from json iterator.
func (o *OptNullableRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNullableRepositoryPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableRepositoryTemplateRepositoryOwner to json stream.
func (o OptNullableRepositoryTemplateRepositoryOwner) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableRepositoryTemplateRepositoryOwner from json iterator.
func (o *OptNullableRepositoryTemplateRepositoryOwner) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNullableRepositoryTemplateRepositoryOwner", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableRepositoryTemplateRepositoryPermissions to json stream.
func (o OptNullableRepositoryTemplateRepositoryPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableRepositoryTemplateRepositoryPermissions from json iterator.
func (o *OptNullableRepositoryTemplateRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNullableRepositoryTemplateRepositoryPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableScopedInstallation to json stream.
func (o OptNullableScopedInstallation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableScopedInstallation from json iterator.
func (o *OptNullableScopedInstallation) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNullableScopedInstallation", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableSimpleUser to json stream.
func (o OptNullableSimpleUser) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableSimpleUser from json iterator.
func (o *OptNullableSimpleUser) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNullableSimpleUser", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of NullableTeamSimple to json stream.
func (o OptNullableTeamSimple) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of NullableTeamSimple from json iterator.
func (o *OptNullableTeamSimple) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptNullableTeamSimple", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of OrgMembershipPermissions to json stream.
func (o OptOrgMembershipPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of OrgMembershipPermissions from json iterator.
func (o *OptOrgMembershipPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptOrgMembershipPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of OrganizationFullPlan to json stream.
func (o OptOrganizationFullPlan) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of OrganizationFullPlan from json iterator.
func (o *OptOrganizationFullPlan) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptOrganizationFullPlan", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of OrgsCreateInvitationApplicationJSONRequestRole to json stream.
func (o OptOrgsCreateInvitationApplicationJSONRequestRole) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of OrgsCreateInvitationApplicationJSONRequestRole from json iterator.
func (o *OptOrgsCreateInvitationApplicationJSONRequestRole) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = OrgsCreateInvitationApplicationJSONRequestRole(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptOrgsCreateInvitationApplicationJSONRequestRole", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of OrgsSetMembershipForUserApplicationJSONRequestRole to json stream.
func (o OptOrgsSetMembershipForUserApplicationJSONRequestRole) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of OrgsSetMembershipForUserApplicationJSONRequestRole from json iterator.
func (o *OptOrgsSetMembershipForUserApplicationJSONRequestRole) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = OrgsSetMembershipForUserApplicationJSONRequestRole(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptOrgsSetMembershipForUserApplicationJSONRequestRole", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission to json stream.
func (o OptOrgsUpdateApplicationJSONRequestDefaultRepositoryPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission from json iterator.
func (o *OptOrgsUpdateApplicationJSONRequestDefaultRepositoryPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptOrgsUpdateApplicationJSONRequestDefaultRepositoryPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType to json stream.
func (o OptOrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType from json iterator.
func (o *OptOrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptOrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PagesHTTPSCertificate to json stream.
func (o OptPagesHTTPSCertificate) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PagesHTTPSCertificate from json iterator.
func (o *OptPagesHTTPSCertificate) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPagesHTTPSCertificate", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PagesHealthCheckDomain to json stream.
func (o OptPagesHealthCheckDomain) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PagesHealthCheckDomain from json iterator.
func (o *OptPagesHealthCheckDomain) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPagesHealthCheckDomain", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PagesSourceHash to json stream.
func (o OptPagesSourceHash) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PagesSourceHash from json iterator.
func (o *OptPagesSourceHash) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPagesSourceHash", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PrivateUserPlan to json stream.
func (o OptPrivateUserPlan) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PrivateUserPlan from json iterator.
func (o *OptPrivateUserPlan) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPrivateUserPlan", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProjectOrganizationPermission to json stream.
func (o OptProjectOrganizationPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ProjectOrganizationPermission from json iterator.
func (o *OptProjectOrganizationPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ProjectOrganizationPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProjectOrganizationPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProjectsAddCollaboratorApplicationJSONRequestPermission to json stream.
func (o OptProjectsAddCollaboratorApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ProjectsAddCollaboratorApplicationJSONRequestPermission from json iterator.
func (o *OptProjectsAddCollaboratorApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ProjectsAddCollaboratorApplicationJSONRequestPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProjectsAddCollaboratorApplicationJSONRequestPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProjectsUpdateApplicationJSONRequestOrganizationPermission to json stream.
func (o OptProjectsUpdateApplicationJSONRequestOrganizationPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ProjectsUpdateApplicationJSONRequestOrganizationPermission from json iterator.
func (o *OptProjectsUpdateApplicationJSONRequestOrganizationPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ProjectsUpdateApplicationJSONRequestOrganizationPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProjectsUpdateApplicationJSONRequestOrganizationPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchAdminEnforced to json stream.
func (o OptProtectedBranchAdminEnforced) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchAdminEnforced from json iterator.
func (o *OptProtectedBranchAdminEnforced) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchAdminEnforced", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchAllowDeletions to json stream.
func (o OptProtectedBranchAllowDeletions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchAllowDeletions from json iterator.
func (o *OptProtectedBranchAllowDeletions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchAllowDeletions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchAllowForcePushes to json stream.
func (o OptProtectedBranchAllowForcePushes) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchAllowForcePushes from json iterator.
func (o *OptProtectedBranchAllowForcePushes) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchAllowForcePushes", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchEnforceAdmins to json stream.
func (o OptProtectedBranchEnforceAdmins) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchEnforceAdmins from json iterator.
func (o *OptProtectedBranchEnforceAdmins) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchEnforceAdmins", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchPullRequestReview to json stream.
func (o OptProtectedBranchPullRequestReview) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchPullRequestReview from json iterator.
func (o *OptProtectedBranchPullRequestReview) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchPullRequestReview", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchPullRequestReviewDismissalRestrictions to json stream.
func (o OptProtectedBranchPullRequestReviewDismissalRestrictions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchPullRequestReviewDismissalRestrictions from json iterator.
func (o *OptProtectedBranchPullRequestReviewDismissalRestrictions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchPullRequestReviewDismissalRestrictions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchRequiredConversationResolution to json stream.
func (o OptProtectedBranchRequiredConversationResolution) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchRequiredConversationResolution from json iterator.
func (o *OptProtectedBranchRequiredConversationResolution) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchRequiredConversationResolution", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchRequiredLinearHistory to json stream.
func (o OptProtectedBranchRequiredLinearHistory) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchRequiredLinearHistory from json iterator.
func (o *OptProtectedBranchRequiredLinearHistory) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchRequiredLinearHistory", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchRequiredPullRequestReviews to json stream.
func (o OptProtectedBranchRequiredPullRequestReviews) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchRequiredPullRequestReviews from json iterator.
func (o *OptProtectedBranchRequiredPullRequestReviews) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchRequiredPullRequestReviews", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions to json stream.
func (o OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions from json iterator.
func (o *OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProtectedBranchRequiredSignatures to json stream.
func (o OptProtectedBranchRequiredSignatures) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProtectedBranchRequiredSignatures from json iterator.
func (o *OptProtectedBranchRequiredSignatures) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProtectedBranchRequiredSignatures", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PullRequestReviewCommentSide to json stream.
func (o OptPullRequestReviewCommentSide) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of PullRequestReviewCommentSide from json iterator.
func (o *OptPullRequestReviewCommentSide) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = PullRequestReviewCommentSide(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPullRequestReviewCommentSide", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PullsCreateReviewApplicationJSONRequestEvent to json stream.
func (o OptPullsCreateReviewApplicationJSONRequestEvent) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of PullsCreateReviewApplicationJSONRequestEvent from json iterator.
func (o *OptPullsCreateReviewApplicationJSONRequestEvent) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = PullsCreateReviewApplicationJSONRequestEvent(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPullsCreateReviewApplicationJSONRequestEvent", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PullsCreateReviewCommentApplicationJSONRequestSide to json stream.
func (o OptPullsCreateReviewCommentApplicationJSONRequestSide) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of PullsCreateReviewCommentApplicationJSONRequestSide from json iterator.
func (o *OptPullsCreateReviewCommentApplicationJSONRequestSide) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = PullsCreateReviewCommentApplicationJSONRequestSide(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPullsCreateReviewCommentApplicationJSONRequestSide", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PullsCreateReviewCommentApplicationJSONRequestStartSide to json stream.
func (o OptPullsCreateReviewCommentApplicationJSONRequestStartSide) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of PullsCreateReviewCommentApplicationJSONRequestStartSide from json iterator.
func (o *OptPullsCreateReviewCommentApplicationJSONRequestStartSide) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = PullsCreateReviewCommentApplicationJSONRequestStartSide(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPullsCreateReviewCommentApplicationJSONRequestStartSide", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PullsMergeApplicationJSONRequestMergeMethod to json stream.
func (o OptPullsMergeApplicationJSONRequestMergeMethod) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of PullsMergeApplicationJSONRequestMergeMethod from json iterator.
func (o *OptPullsMergeApplicationJSONRequestMergeMethod) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = PullsMergeApplicationJSONRequestMergeMethod(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPullsMergeApplicationJSONRequestMergeMethod", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PullsUpdateApplicationJSONRequestState to json stream.
func (o OptPullsUpdateApplicationJSONRequestState) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of PullsUpdateApplicationJSONRequestState from json iterator.
func (o *OptPullsUpdateApplicationJSONRequestState) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = PullsUpdateApplicationJSONRequestState(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPullsUpdateApplicationJSONRequestState", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of RateLimit to json stream.
func (o OptRateLimit) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of RateLimit from json iterator.
func (o *OptRateLimit) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptRateLimit", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReactionRollup to json stream.
func (o OptReactionRollup) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReactionRollup from json iterator.
func (o *OptReactionRollup) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReactionRollup", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposAddCollaboratorApplicationJSONRequestPermission to json stream.
func (o OptReposAddCollaboratorApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ReposAddCollaboratorApplicationJSONRequestPermission from json iterator.
func (o *OptReposAddCollaboratorApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ReposAddCollaboratorApplicationJSONRequestPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposAddCollaboratorApplicationJSONRequestPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposCreateDeploymentStatusApplicationJSONRequestEnvironment to json stream.
func (o OptReposCreateDeploymentStatusApplicationJSONRequestEnvironment) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ReposCreateDeploymentStatusApplicationJSONRequestEnvironment from json iterator.
func (o *OptReposCreateDeploymentStatusApplicationJSONRequestEnvironment) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ReposCreateDeploymentStatusApplicationJSONRequestEnvironment(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposCreateDeploymentStatusApplicationJSONRequestEnvironment", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposCreateInOrgApplicationJSONRequestVisibility to json stream.
func (o OptReposCreateInOrgApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ReposCreateInOrgApplicationJSONRequestVisibility from json iterator.
func (o *OptReposCreateInOrgApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ReposCreateInOrgApplicationJSONRequestVisibility(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposCreateInOrgApplicationJSONRequestVisibility", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor to json stream.
func (o OptReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor from json iterator.
func (o *OptReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter to json stream.
func (o OptReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter from json iterator.
func (o *OptReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposCreatePagesSiteApplicationJSONRequestSourcePath to json stream.
func (o OptReposCreatePagesSiteApplicationJSONRequestSourcePath) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ReposCreatePagesSiteApplicationJSONRequestSourcePath from json iterator.
func (o *OptReposCreatePagesSiteApplicationJSONRequestSourcePath) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ReposCreatePagesSiteApplicationJSONRequestSourcePath(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposCreatePagesSiteApplicationJSONRequestSourcePath", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposDeleteFileApplicationJSONRequestAuthor to json stream.
func (o OptReposDeleteFileApplicationJSONRequestAuthor) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposDeleteFileApplicationJSONRequestAuthor from json iterator.
func (o *OptReposDeleteFileApplicationJSONRequestAuthor) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposDeleteFileApplicationJSONRequestAuthor", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposDeleteFileApplicationJSONRequestCommitter to json stream.
func (o OptReposDeleteFileApplicationJSONRequestCommitter) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposDeleteFileApplicationJSONRequestCommitter from json iterator.
func (o *OptReposDeleteFileApplicationJSONRequestCommitter) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposDeleteFileApplicationJSONRequestCommitter", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity to json stream.
func (o OptReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity from json iterator.
func (o *OptReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning to json stream.
func (o OptReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning from json iterator.
func (o *OptReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposUpdateApplicationJSONRequestVisibility to json stream.
func (o OptReposUpdateApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ReposUpdateApplicationJSONRequestVisibility from json iterator.
func (o *OptReposUpdateApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ReposUpdateApplicationJSONRequestVisibility(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposUpdateApplicationJSONRequestVisibility", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions to json stream.
func (o OptReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions from json iterator.
func (o *OptReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposUpdateInvitationApplicationJSONRequestPermissions to json stream.
func (o OptReposUpdateInvitationApplicationJSONRequestPermissions) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ReposUpdateInvitationApplicationJSONRequestPermissions from json iterator.
func (o *OptReposUpdateInvitationApplicationJSONRequestPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ReposUpdateInvitationApplicationJSONRequestPermissions(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposUpdateInvitationApplicationJSONRequestPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions to json stream.
func (o OptReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions from json iterator.
func (o *OptReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Repository to json stream.
func (o OptRepository) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Repository from json iterator.
func (o *OptRepository) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptRepository", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of RepositoryPermissions to json stream.
func (o OptRepositoryPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of RepositoryPermissions from json iterator.
func (o *OptRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptRepositoryPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of RepositoryTemplateRepositoryOwner to json stream.
func (o OptRepositoryTemplateRepositoryOwner) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of RepositoryTemplateRepositoryOwner from json iterator.
func (o *OptRepositoryTemplateRepositoryOwner) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptRepositoryTemplateRepositoryOwner", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of RepositoryTemplateRepositoryPermissions to json stream.
func (o OptRepositoryTemplateRepositoryPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of RepositoryTemplateRepositoryPermissions from json iterator.
func (o *OptRepositoryTemplateRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptRepositoryTemplateRepositoryPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ReviewCommentSide to json stream.
func (o OptReviewCommentSide) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of ReviewCommentSide from json iterator.
func (o *OptReviewCommentSide) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = ReviewCommentSide(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptReviewCommentSide", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of RunnerLabelsItemType to json stream.
func (o OptRunnerLabelsItemType) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of RunnerLabelsItemType from json iterator.
func (o *OptRunnerLabelsItemType) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = RunnerLabelsItemType(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptRunnerLabelsItemType", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ScimEnterpriseGroupMeta to json stream.
func (o OptScimEnterpriseGroupMeta) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ScimEnterpriseGroupMeta from json iterator.
func (o *OptScimEnterpriseGroupMeta) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptScimEnterpriseGroupMeta", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ScimEnterpriseUserMeta to json stream.
func (o OptScimEnterpriseUserMeta) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ScimEnterpriseUserMeta from json iterator.
func (o *OptScimEnterpriseUserMeta) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptScimEnterpriseUserMeta", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ScimEnterpriseUserName to json stream.
func (o OptScimEnterpriseUserName) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ScimEnterpriseUserName from json iterator.
func (o *OptScimEnterpriseUserName) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptScimEnterpriseUserName", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ScimGroupListEnterpriseResourcesItemMeta to json stream.
func (o OptScimGroupListEnterpriseResourcesItemMeta) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ScimGroupListEnterpriseResourcesItemMeta from json iterator.
func (o *OptScimGroupListEnterpriseResourcesItemMeta) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptScimGroupListEnterpriseResourcesItemMeta", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ScimUserListEnterpriseResourcesItemMeta to json stream.
func (o OptScimUserListEnterpriseResourcesItemMeta) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ScimUserListEnterpriseResourcesItemMeta from json iterator.
func (o *OptScimUserListEnterpriseResourcesItemMeta) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptScimUserListEnterpriseResourcesItemMeta", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ScimUserListEnterpriseResourcesItemName to json stream.
func (o OptScimUserListEnterpriseResourcesItemName) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ScimUserListEnterpriseResourcesItemName from json iterator.
func (o *OptScimUserListEnterpriseResourcesItemName) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptScimUserListEnterpriseResourcesItemName", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of SecretScanningAlertResolution to json stream.
func (o OptSecretScanningAlertResolution) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of SecretScanningAlertResolution from json iterator.
func (o *OptSecretScanningAlertResolution) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = SecretScanningAlertResolution(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptSecretScanningAlertResolution", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of SecretScanningAlertState to json stream.
func (o OptSecretScanningAlertState) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of SecretScanningAlertState from json iterator.
func (o *OptSecretScanningAlertState) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = SecretScanningAlertState(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptSecretScanningAlertState", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of SimpleUser to json stream.
func (o OptSimpleUser) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of SimpleUser from json iterator.
func (o *OptSimpleUser) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptSimpleUser", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of StatusCheckPolicy to json stream.
func (o OptStatusCheckPolicy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of StatusCheckPolicy from json iterator.
func (o *OptStatusCheckPolicy) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptStatusCheckPolicy", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = string(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptString", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamFullPrivacy to json stream.
func (o OptTeamFullPrivacy) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamFullPrivacy from json iterator.
func (o *OptTeamFullPrivacy) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamFullPrivacy(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamFullPrivacy", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamPermissions to json stream.
func (o OptTeamPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of TeamPermissions from json iterator.
func (o *OptTeamPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamRepositoryPermissions to json stream.
func (o OptTeamRepositoryPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of TeamRepositoryPermissions from json iterator.
func (o *OptTeamRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamRepositoryPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole to json stream.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole from json iterator.
func (o *OptTeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole to json stream.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole from json iterator.
func (o *OptTeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission to json stream.
func (o OptTeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission from json iterator.
func (o *OptTeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission to json stream.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission from json iterator.
func (o *OptTeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission to json stream.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission from json iterator.
func (o *OptTeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission to json stream.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission from json iterator.
func (o *OptTeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsCreateApplicationJSONRequestPermission to json stream.
func (o OptTeamsCreateApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsCreateApplicationJSONRequestPermission from json iterator.
func (o *OptTeamsCreateApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsCreateApplicationJSONRequestPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsCreateApplicationJSONRequestPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsCreateApplicationJSONRequestPrivacy to json stream.
func (o OptTeamsCreateApplicationJSONRequestPrivacy) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsCreateApplicationJSONRequestPrivacy from json iterator.
func (o *OptTeamsCreateApplicationJSONRequestPrivacy) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsCreateApplicationJSONRequestPrivacy(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsCreateApplicationJSONRequestPrivacy", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsUpdateInOrgApplicationJSONRequestPermission to json stream.
func (o OptTeamsUpdateInOrgApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsUpdateInOrgApplicationJSONRequestPermission from json iterator.
func (o *OptTeamsUpdateInOrgApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsUpdateInOrgApplicationJSONRequestPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsUpdateInOrgApplicationJSONRequestPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsUpdateInOrgApplicationJSONRequestPrivacy to json stream.
func (o OptTeamsUpdateInOrgApplicationJSONRequestPrivacy) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsUpdateInOrgApplicationJSONRequestPrivacy from json iterator.
func (o *OptTeamsUpdateInOrgApplicationJSONRequestPrivacy) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsUpdateInOrgApplicationJSONRequestPrivacy(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsUpdateInOrgApplicationJSONRequestPrivacy", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsUpdateLegacyApplicationJSONRequestPermission to json stream.
func (o OptTeamsUpdateLegacyApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsUpdateLegacyApplicationJSONRequestPermission from json iterator.
func (o *OptTeamsUpdateLegacyApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsUpdateLegacyApplicationJSONRequestPermission(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsUpdateLegacyApplicationJSONRequestPermission", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of TeamsUpdateLegacyApplicationJSONRequestPrivacy to json stream.
func (o OptTeamsUpdateLegacyApplicationJSONRequestPrivacy) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of TeamsUpdateLegacyApplicationJSONRequestPrivacy from json iterator.
func (o *OptTeamsUpdateLegacyApplicationJSONRequestPrivacy) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = TeamsUpdateLegacyApplicationJSONRequestPrivacy(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTeamsUpdateLegacyApplicationJSONRequestPrivacy", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of time.Time to json stream.
func (o OptTime) WriteJSON(j *json.Stream, format func(*json.Stream, time.Time)) {
	format(j, o.Value)
}

// ReadJSON reads json value of time.Time from json iterator.
func (o *OptTime) ReadJSON(i *json.Iterator, format func(*json.Iterator) (time.Time, error)) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		v, err := format(i)
		if err != nil {
			return err
		}
		o.Value = v
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptTime", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of url.URL to json stream.
func (o OptURL) WriteJSON(j *json.Stream) {
	json.WriteURI(j, o.Value)
}

// ReadJSON reads json value of url.URL from json iterator.
func (o *OptURL) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		v, err := json.ReadURI(i)
		if err != nil {
			return err
		}
		o.Value = v
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptURL", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Verification to json stream.
func (o OptVerification) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Verification from json iterator.
func (o *OptVerification) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVerification", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of WorkflowRunUsageBillableMACOS to json stream.
func (o OptWorkflowRunUsageBillableMACOS) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of WorkflowRunUsageBillableMACOS from json iterator.
func (o *OptWorkflowRunUsageBillableMACOS) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptWorkflowRunUsageBillableMACOS", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of WorkflowRunUsageBillableUBUNTU to json stream.
func (o OptWorkflowRunUsageBillableUBUNTU) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of WorkflowRunUsageBillableUBUNTU from json iterator.
func (o *OptWorkflowRunUsageBillableUBUNTU) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptWorkflowRunUsageBillableUBUNTU", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of WorkflowRunUsageBillableWINDOWS to json stream.
func (o OptWorkflowRunUsageBillableWINDOWS) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of WorkflowRunUsageBillableWINDOWS from json iterator.
func (o *OptWorkflowRunUsageBillableWINDOWS) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptWorkflowRunUsageBillableWINDOWS", i.WhatIsNext())
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrgHook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("active")
	j.WriteBool(s.Active)

	more.More()
	j.WriteObjectField("config")
	s.Config.WriteJSON(j)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	if s.DeliveriesURL.Set {
		more.More()
		j.WriteObjectField("deliveries_url")
		s.DeliveriesURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("events")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Events {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("ping_url")
	json.WriteURI(j, s.PingURL)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrgHook json value to io.Writer.
func (s OrgHook) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrgHook json value from io.Reader.
func (s *OrgHook) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrgHook from json stream.
func (s *OrgHook) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			s.Active = i.ReadBool()
			return i.Error == nil
		case "config":
			if err := s.Config.ReadJSON(i); err != nil {
				i.ReportError("Field Config", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "deliveries_url":
			s.DeliveriesURL.Reset()
			if err := s.DeliveriesURL.ReadJSON(i); err != nil {
				i.ReportError("Field DeliveriesURL", err.Error())
				return false
			}
			return true
		case "events":
			// Unsupported kind "array" for field "Events".
			i.Skip()
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "ping_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field PingURL", err.Error())
				return false
			}
			s.PingURL = v
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgHookConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContentType.Set {
		more.More()
		j.WriteObjectField("content_type")
		s.ContentType.WriteJSON(j)
	}

	if s.InsecureSsl.Set {
		more.More()
		j.WriteObjectField("insecure_ssl")
		s.InsecureSsl.WriteJSON(j)
	}

	if s.Secret.Set {
		more.More()
		j.WriteObjectField("secret")
		s.Secret.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrgHookConfig json value to io.Writer.
func (s OrgHookConfig) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrgHookConfig json value from io.Reader.
func (s *OrgHookConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrgHookConfig from json stream.
func (s *OrgHookConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content_type":
			s.ContentType.Reset()
			if err := s.ContentType.ReadJSON(i); err != nil {
				i.ReportError("Field ContentType", err.Error())
				return false
			}
			return true
		case "insecure_ssl":
			s.InsecureSsl.Reset()
			if err := s.InsecureSsl.ReadJSON(i); err != nil {
				i.ReportError("Field InsecureSsl", err.Error())
				return false
			}
			return true
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(i); err != nil {
				i.ReportError("Field Secret", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgMembership) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("organization")
	s.Organization.WriteJSON(j)

	more.More()
	j.WriteObjectField("organization_url")
	json.WriteURI(j, s.OrganizationURL)

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("role")
	s.Role.WriteJSON(j)

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrgMembership json value to io.Writer.
func (s OrgMembership) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrgMembership json value from io.Reader.
func (s *OrgMembership) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrgMembership from json stream.
func (s *OrgMembership) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "organization":
			if err := s.Organization.ReadJSON(i); err != nil {
				i.ReportError("Field Organization", err.Error())
				return false
			}
			return true
		case "organization_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field OrganizationURL", err.Error())
				return false
			}
			s.OrganizationURL = v
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "role":
			if err := s.Role.ReadJSON(i); err != nil {
				i.ReportError("Field Role", err.Error())
				return false
			}
			return true
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgMembershipPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("can_create_repository")
	j.WriteBool(s.CanCreateRepository)

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrgMembershipPermissions json value to io.Writer.
func (s OrgMembershipPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrgMembershipPermissions json value from io.Reader.
func (s *OrgMembershipPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrgMembershipPermissions from json stream.
func (s *OrgMembershipPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_create_repository":
			s.CanCreateRepository = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgMembershipRole) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads OrgMembershipRole from json stream.
func (s *OrgMembershipRole) ReadJSON(i *json.Iterator) error {
	*s = OrgMembershipRole(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgMembershipState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads OrgMembershipState from json stream.
func (s *OrgMembershipState) ReadJSON(i *json.Iterator) error {
	*s = OrgMembershipState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrganizationActionsSecret) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.SelectedRepositoriesURL.Set {
		more.More()
		j.WriteObjectField("selected_repositories_url")
		s.SelectedRepositoriesURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	more.More()
	j.WriteObjectField("visibility")
	s.Visibility.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrganizationActionsSecret json value to io.Writer.
func (s OrganizationActionsSecret) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrganizationActionsSecret json value from io.Reader.
func (s *OrganizationActionsSecret) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrganizationActionsSecret from json stream.
func (s *OrganizationActionsSecret) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "selected_repositories_url":
			s.SelectedRepositoriesURL.Reset()
			if err := s.SelectedRepositoriesURL.ReadJSON(i); err != nil {
				i.ReportError("Field SelectedRepositoriesURL", err.Error())
				return false
			}
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "visibility":
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrganizationActionsSecretVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads OrganizationActionsSecretVisibility from json stream.
func (s *OrganizationActionsSecretVisibility) ReadJSON(i *json.Iterator) error {
	*s = OrganizationActionsSecretVisibility(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrganizationFull) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("avatar_url")
	j.WriteString(s.AvatarURL)

	if s.BillingEmail.Set {
		more.More()
		j.WriteObjectField("billing_email")
		s.BillingEmail.WriteJSON(j)
	}

	if s.Blog.Set {
		more.More()
		j.WriteObjectField("blog")
		s.Blog.WriteJSON(j)
	}

	if s.Collaborators.Set {
		more.More()
		j.WriteObjectField("collaborators")
		s.Collaborators.WriteJSON(j)
	}

	if s.Company.Set {
		more.More()
		j.WriteObjectField("company")
		s.Company.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	if s.DefaultRepositoryPermission.Set {
		more.More()
		j.WriteObjectField("default_repository_permission")
		s.DefaultRepositoryPermission.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	if s.DiskUsage.Set {
		more.More()
		j.WriteObjectField("disk_usage")
		s.DiskUsage.WriteJSON(j)
	}

	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("events_url")
	json.WriteURI(j, s.EventsURL)

	more.More()
	j.WriteObjectField("followers")
	j.WriteInt(s.Followers)

	more.More()
	j.WriteObjectField("following")
	j.WriteInt(s.Following)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("has_organization_projects")
	j.WriteBool(s.HasOrganizationProjects)

	more.More()
	j.WriteObjectField("has_repository_projects")
	j.WriteBool(s.HasRepositoryProjects)

	more.More()
	j.WriteObjectField("hooks_url")
	j.WriteString(s.HooksURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.IsVerified.Set {
		more.More()
		j.WriteObjectField("is_verified")
		s.IsVerified.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("issues_url")
	j.WriteString(s.IssuesURL)

	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("login")
	j.WriteString(s.Login)

	if s.MembersAllowedRepositoryCreationType.Set {
		more.More()
		j.WriteObjectField("members_allowed_repository_creation_type")
		s.MembersAllowedRepositoryCreationType.WriteJSON(j)
	}

	if s.MembersCanCreateInternalRepositories.Set {
		more.More()
		j.WriteObjectField("members_can_create_internal_repositories")
		s.MembersCanCreateInternalRepositories.WriteJSON(j)
	}

	if s.MembersCanCreatePages.Set {
		more.More()
		j.WriteObjectField("members_can_create_pages")
		s.MembersCanCreatePages.WriteJSON(j)
	}

	if s.MembersCanCreatePrivatePages.Set {
		more.More()
		j.WriteObjectField("members_can_create_private_pages")
		s.MembersCanCreatePrivatePages.WriteJSON(j)
	}

	if s.MembersCanCreatePrivateRepositories.Set {
		more.More()
		j.WriteObjectField("members_can_create_private_repositories")
		s.MembersCanCreatePrivateRepositories.WriteJSON(j)
	}

	if s.MembersCanCreatePublicPages.Set {
		more.More()
		j.WriteObjectField("members_can_create_public_pages")
		s.MembersCanCreatePublicPages.WriteJSON(j)
	}

	if s.MembersCanCreatePublicRepositories.Set {
		more.More()
		j.WriteObjectField("members_can_create_public_repositories")
		s.MembersCanCreatePublicRepositories.WriteJSON(j)
	}

	if s.MembersCanCreateRepositories.Set {
		more.More()
		j.WriteObjectField("members_can_create_repositories")
		s.MembersCanCreateRepositories.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("members_url")
	j.WriteString(s.MembersURL)

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	if s.OwnedPrivateRepos.Set {
		more.More()
		j.WriteObjectField("owned_private_repos")
		s.OwnedPrivateRepos.WriteJSON(j)
	}

	if s.Plan.Set {
		more.More()
		j.WriteObjectField("plan")
		s.Plan.WriteJSON(j)
	}

	if s.PrivateGists.Set {
		more.More()
		j.WriteObjectField("private_gists")
		s.PrivateGists.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("public_gists")
	j.WriteInt(s.PublicGists)

	more.More()
	j.WriteObjectField("public_members_url")
	j.WriteString(s.PublicMembersURL)

	more.More()
	j.WriteObjectField("public_repos")
	j.WriteInt(s.PublicRepos)

	more.More()
	j.WriteObjectField("repos_url")
	json.WriteURI(j, s.ReposURL)

	if s.TotalPrivateRepos.Set {
		more.More()
		j.WriteObjectField("total_private_repos")
		s.TotalPrivateRepos.WriteJSON(j)
	}

	if s.TwitterUsername.Set {
		more.More()
		j.WriteObjectField("twitter_username")
		s.TwitterUsername.WriteJSON(j)
	}

	if s.TwoFactorRequirementEnabled.Set {
		more.More()
		j.WriteObjectField("two_factor_requirement_enabled")
		s.TwoFactorRequirementEnabled.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrganizationFull json value to io.Writer.
func (s OrganizationFull) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrganizationFull json value from io.Reader.
func (s *OrganizationFull) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrganizationFull from json stream.
func (s *OrganizationFull) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			s.AvatarURL = i.ReadString()
			return i.Error == nil
		case "billing_email":
			s.BillingEmail.Reset()
			if err := s.BillingEmail.ReadJSON(i); err != nil {
				i.ReportError("Field BillingEmail", err.Error())
				return false
			}
			return true
		case "blog":
			s.Blog.Reset()
			if err := s.Blog.ReadJSON(i); err != nil {
				i.ReportError("Field Blog", err.Error())
				return false
			}
			return true
		case "collaborators":
			s.Collaborators.Reset()
			if err := s.Collaborators.ReadJSON(i); err != nil {
				i.ReportError("Field Collaborators", err.Error())
				return false
			}
			return true
		case "company":
			s.Company.Reset()
			if err := s.Company.ReadJSON(i); err != nil {
				i.ReportError("Field Company", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "default_repository_permission":
			s.DefaultRepositoryPermission.Reset()
			if err := s.DefaultRepositoryPermission.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultRepositoryPermission", err.Error())
				return false
			}
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "disk_usage":
			s.DiskUsage.Reset()
			if err := s.DiskUsage.ReadJSON(i); err != nil {
				i.ReportError("Field DiskUsage", err.Error())
				return false
			}
			return true
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "events_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			s.EventsURL = v
			return true
		case "followers":
			s.Followers = i.ReadInt()
			return i.Error == nil
		case "following":
			s.Following = i.ReadInt()
			return i.Error == nil
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "has_organization_projects":
			s.HasOrganizationProjects = i.ReadBool()
			return i.Error == nil
		case "has_repository_projects":
			s.HasRepositoryProjects = i.ReadBool()
			return i.Error == nil
		case "hooks_url":
			s.HooksURL = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "is_verified":
			s.IsVerified.Reset()
			if err := s.IsVerified.ReadJSON(i); err != nil {
				i.ReportError("Field IsVerified", err.Error())
				return false
			}
			return true
		case "issues_url":
			s.IssuesURL = i.ReadString()
			return i.Error == nil
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(i); err != nil {
				i.ReportError("Field Location", err.Error())
				return false
			}
			return true
		case "login":
			s.Login = i.ReadString()
			return i.Error == nil
		case "members_allowed_repository_creation_type":
			s.MembersAllowedRepositoryCreationType.Reset()
			if err := s.MembersAllowedRepositoryCreationType.ReadJSON(i); err != nil {
				i.ReportError("Field MembersAllowedRepositoryCreationType", err.Error())
				return false
			}
			return true
		case "members_can_create_internal_repositories":
			s.MembersCanCreateInternalRepositories.Reset()
			if err := s.MembersCanCreateInternalRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreateInternalRepositories", err.Error())
				return false
			}
			return true
		case "members_can_create_pages":
			s.MembersCanCreatePages.Reset()
			if err := s.MembersCanCreatePages.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreatePages", err.Error())
				return false
			}
			return true
		case "members_can_create_private_pages":
			s.MembersCanCreatePrivatePages.Reset()
			if err := s.MembersCanCreatePrivatePages.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreatePrivatePages", err.Error())
				return false
			}
			return true
		case "members_can_create_private_repositories":
			s.MembersCanCreatePrivateRepositories.Reset()
			if err := s.MembersCanCreatePrivateRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreatePrivateRepositories", err.Error())
				return false
			}
			return true
		case "members_can_create_public_pages":
			s.MembersCanCreatePublicPages.Reset()
			if err := s.MembersCanCreatePublicPages.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreatePublicPages", err.Error())
				return false
			}
			return true
		case "members_can_create_public_repositories":
			s.MembersCanCreatePublicRepositories.Reset()
			if err := s.MembersCanCreatePublicRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreatePublicRepositories", err.Error())
				return false
			}
			return true
		case "members_can_create_repositories":
			s.MembersCanCreateRepositories.Reset()
			if err := s.MembersCanCreateRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreateRepositories", err.Error())
				return false
			}
			return true
		case "members_url":
			s.MembersURL = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "owned_private_repos":
			s.OwnedPrivateRepos.Reset()
			if err := s.OwnedPrivateRepos.ReadJSON(i); err != nil {
				i.ReportError("Field OwnedPrivateRepos", err.Error())
				return false
			}
			return true
		case "plan":
			s.Plan.Reset()
			if err := s.Plan.ReadJSON(i); err != nil {
				i.ReportError("Field Plan", err.Error())
				return false
			}
			return true
		case "private_gists":
			s.PrivateGists.Reset()
			if err := s.PrivateGists.ReadJSON(i); err != nil {
				i.ReportError("Field PrivateGists", err.Error())
				return false
			}
			return true
		case "public_gists":
			s.PublicGists = i.ReadInt()
			return i.Error == nil
		case "public_members_url":
			s.PublicMembersURL = i.ReadString()
			return i.Error == nil
		case "public_repos":
			s.PublicRepos = i.ReadInt()
			return i.Error == nil
		case "repos_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ReposURL", err.Error())
				return false
			}
			s.ReposURL = v
			return true
		case "total_private_repos":
			s.TotalPrivateRepos.Reset()
			if err := s.TotalPrivateRepos.ReadJSON(i); err != nil {
				i.ReportError("Field TotalPrivateRepos", err.Error())
				return false
			}
			return true
		case "twitter_username":
			s.TwitterUsername.Reset()
			if err := s.TwitterUsername.ReadJSON(i); err != nil {
				i.ReportError("Field TwitterUsername", err.Error())
				return false
			}
			return true
		case "two_factor_requirement_enabled":
			s.TwoFactorRequirementEnabled.Reset()
			if err := s.TwoFactorRequirementEnabled.ReadJSON(i); err != nil {
				i.ReportError("Field TwoFactorRequirementEnabled", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrganizationFullPlan) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FilledSeats.Set {
		more.More()
		j.WriteObjectField("filled_seats")
		s.FilledSeats.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("private_repos")
	j.WriteInt(s.PrivateRepos)

	if s.Seats.Set {
		more.More()
		j.WriteObjectField("seats")
		s.Seats.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("space")
	j.WriteInt(s.Space)

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrganizationFullPlan json value to io.Writer.
func (s OrganizationFullPlan) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrganizationFullPlan json value from io.Reader.
func (s *OrganizationFullPlan) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrganizationFullPlan from json stream.
func (s *OrganizationFullPlan) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "filled_seats":
			s.FilledSeats.Reset()
			if err := s.FilledSeats.ReadJSON(i); err != nil {
				i.ReportError("Field FilledSeats", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "private_repos":
			s.PrivateRepos = i.ReadInt()
			return i.Error == nil
		case "seats":
			s.Seats.Reset()
			if err := s.Seats.ReadJSON(i); err != nil {
				i.ReportError("Field Seats", err.Error())
				return false
			}
			return true
		case "space":
			s.Space = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrganizationInvitation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	j.WriteString(s.CreatedAt)

	more.More()
	j.WriteObjectField("email")
	s.Email.WriteJSON(j)

	if s.FailedAt.Set {
		more.More()
		j.WriteObjectField("failed_at")
		s.FailedAt.WriteJSON(j)
	}

	if s.FailedReason.Set {
		more.More()
		j.WriteObjectField("failed_reason")
		s.FailedReason.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("invitation_teams_url")
	j.WriteString(s.InvitationTeamsURL)

	more.More()
	j.WriteObjectField("inviter")
	s.Inviter.WriteJSON(j)

	more.More()
	j.WriteObjectField("login")
	s.Login.WriteJSON(j)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("role")
	j.WriteString(s.Role)

	more.More()
	j.WriteObjectField("team_count")
	j.WriteInt(s.TeamCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrganizationInvitation json value to io.Writer.
func (s OrganizationInvitation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrganizationInvitation json value from io.Reader.
func (s *OrganizationInvitation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrganizationInvitation from json stream.
func (s *OrganizationInvitation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			s.CreatedAt = i.ReadString()
			return i.Error == nil
		case "email":
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "failed_at":
			s.FailedAt.Reset()
			if err := s.FailedAt.ReadJSON(i); err != nil {
				i.ReportError("Field FailedAt", err.Error())
				return false
			}
			return true
		case "failed_reason":
			s.FailedReason.Reset()
			if err := s.FailedReason.ReadJSON(i); err != nil {
				i.ReportError("Field FailedReason", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "invitation_teams_url":
			s.InvitationTeamsURL = i.ReadString()
			return i.Error == nil
		case "inviter":
			if err := s.Inviter.ReadJSON(i); err != nil {
				i.ReportError("Field Inviter", err.Error())
				return false
			}
			return true
		case "login":
			if err := s.Login.ReadJSON(i); err != nil {
				i.ReportError("Field Login", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "role":
			s.Role = i.ReadString()
			return i.Error == nil
		case "team_count":
			s.TeamCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrganizationSimple) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("avatar_url")
	j.WriteString(s.AvatarURL)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("events_url")
	json.WriteURI(j, s.EventsURL)

	more.More()
	j.WriteObjectField("hooks_url")
	j.WriteString(s.HooksURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("issues_url")
	j.WriteString(s.IssuesURL)

	more.More()
	j.WriteObjectField("login")
	j.WriteString(s.Login)

	more.More()
	j.WriteObjectField("members_url")
	j.WriteString(s.MembersURL)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("public_members_url")
	j.WriteString(s.PublicMembersURL)

	more.More()
	j.WriteObjectField("repos_url")
	json.WriteURI(j, s.ReposURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrganizationSimple json value to io.Writer.
func (s OrganizationSimple) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrganizationSimple json value from io.Reader.
func (s *OrganizationSimple) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrganizationSimple from json stream.
func (s *OrganizationSimple) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			s.AvatarURL = i.ReadString()
			return i.Error == nil
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "events_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			s.EventsURL = v
			return true
		case "hooks_url":
			s.HooksURL = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "issues_url":
			s.IssuesURL = i.ReadString()
			return i.Error == nil
		case "login":
			s.Login = i.ReadString()
			return i.Error == nil
		case "members_url":
			s.MembersURL = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "public_members_url":
			s.PublicMembersURL = i.ReadString()
			return i.Error == nil
		case "repos_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ReposURL", err.Error())
				return false
			}
			s.ReposURL = v
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgsCreateInvitationApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.InviteeID.Set {
		more.More()
		j.WriteObjectField("invitee_id")
		s.InviteeID.WriteJSON(j)
	}

	if s.Role.Set {
		more.More()
		j.WriteObjectField("role")
		s.Role.WriteJSON(j)
	}

	if s.TeamIds != nil {
		more.More()
		j.WriteObjectField("team_ids")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TeamIds {
			more.More()
			j.WriteInt(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrgsCreateInvitationApplicationJSONRequest json value to io.Writer.
func (s OrgsCreateInvitationApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrgsCreateInvitationApplicationJSONRequest json value from io.Reader.
func (s *OrgsCreateInvitationApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrgsCreateInvitationApplicationJSONRequest from json stream.
func (s *OrgsCreateInvitationApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "invitee_id":
			s.InviteeID.Reset()
			if err := s.InviteeID.ReadJSON(i); err != nil {
				i.ReportError("Field InviteeID", err.Error())
				return false
			}
			return true
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(i); err != nil {
				i.ReportError("Field Role", err.Error())
				return false
			}
			return true
		case "team_ids":
			// Unsupported kind "array" for field "TeamIds".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgsCreateInvitationApplicationJSONRequestRole) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads OrgsCreateInvitationApplicationJSONRequestRole from json stream.
func (s *OrgsCreateInvitationApplicationJSONRequestRole) ReadJSON(i *json.Iterator) error {
	*s = OrgsCreateInvitationApplicationJSONRequestRole(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgsRemoveOutsideCollaboratorUnprocessableEntity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrgsRemoveOutsideCollaboratorUnprocessableEntity json value to io.Writer.
func (s OrgsRemoveOutsideCollaboratorUnprocessableEntity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrgsRemoveOutsideCollaboratorUnprocessableEntity json value from io.Reader.
func (s *OrgsRemoveOutsideCollaboratorUnprocessableEntity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrgsRemoveOutsideCollaboratorUnprocessableEntity from json stream.
func (s *OrgsRemoveOutsideCollaboratorUnprocessableEntity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgsSetMembershipForUserApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Role.Set {
		more.More()
		j.WriteObjectField("role")
		s.Role.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrgsSetMembershipForUserApplicationJSONRequest json value to io.Writer.
func (s OrgsSetMembershipForUserApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrgsSetMembershipForUserApplicationJSONRequest json value from io.Reader.
func (s *OrgsSetMembershipForUserApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrgsSetMembershipForUserApplicationJSONRequest from json stream.
func (s *OrgsSetMembershipForUserApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(i); err != nil {
				i.ReportError("Field Role", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgsSetMembershipForUserApplicationJSONRequestRole) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads OrgsSetMembershipForUserApplicationJSONRequestRole from json stream.
func (s *OrgsSetMembershipForUserApplicationJSONRequestRole) ReadJSON(i *json.Iterator) error {
	*s = OrgsSetMembershipForUserApplicationJSONRequestRole(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.BillingEmail.Set {
		more.More()
		j.WriteObjectField("billing_email")
		s.BillingEmail.WriteJSON(j)
	}

	if s.Blog.Set {
		more.More()
		j.WriteObjectField("blog")
		s.Blog.WriteJSON(j)
	}

	if s.Company.Set {
		more.More()
		j.WriteObjectField("company")
		s.Company.WriteJSON(j)
	}

	if s.DefaultRepositoryPermission.Set {
		more.More()
		j.WriteObjectField("default_repository_permission")
		s.DefaultRepositoryPermission.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.HasOrganizationProjects.Set {
		more.More()
		j.WriteObjectField("has_organization_projects")
		s.HasOrganizationProjects.WriteJSON(j)
	}

	if s.HasRepositoryProjects.Set {
		more.More()
		j.WriteObjectField("has_repository_projects")
		s.HasRepositoryProjects.WriteJSON(j)
	}

	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}

	if s.MembersAllowedRepositoryCreationType.Set {
		more.More()
		j.WriteObjectField("members_allowed_repository_creation_type")
		s.MembersAllowedRepositoryCreationType.WriteJSON(j)
	}

	if s.MembersCanCreateInternalRepositories.Set {
		more.More()
		j.WriteObjectField("members_can_create_internal_repositories")
		s.MembersCanCreateInternalRepositories.WriteJSON(j)
	}

	if s.MembersCanCreatePages.Set {
		more.More()
		j.WriteObjectField("members_can_create_pages")
		s.MembersCanCreatePages.WriteJSON(j)
	}

	if s.MembersCanCreatePrivatePages.Set {
		more.More()
		j.WriteObjectField("members_can_create_private_pages")
		s.MembersCanCreatePrivatePages.WriteJSON(j)
	}

	if s.MembersCanCreatePrivateRepositories.Set {
		more.More()
		j.WriteObjectField("members_can_create_private_repositories")
		s.MembersCanCreatePrivateRepositories.WriteJSON(j)
	}

	if s.MembersCanCreatePublicPages.Set {
		more.More()
		j.WriteObjectField("members_can_create_public_pages")
		s.MembersCanCreatePublicPages.WriteJSON(j)
	}

	if s.MembersCanCreatePublicRepositories.Set {
		more.More()
		j.WriteObjectField("members_can_create_public_repositories")
		s.MembersCanCreatePublicRepositories.WriteJSON(j)
	}

	if s.MembersCanCreateRepositories.Set {
		more.More()
		j.WriteObjectField("members_can_create_repositories")
		s.MembersCanCreateRepositories.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.TwitterUsername.Set {
		more.More()
		j.WriteObjectField("twitter_username")
		s.TwitterUsername.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrgsUpdateApplicationJSONRequest json value to io.Writer.
func (s OrgsUpdateApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrgsUpdateApplicationJSONRequest json value from io.Reader.
func (s *OrgsUpdateApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrgsUpdateApplicationJSONRequest from json stream.
func (s *OrgsUpdateApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "billing_email":
			s.BillingEmail.Reset()
			if err := s.BillingEmail.ReadJSON(i); err != nil {
				i.ReportError("Field BillingEmail", err.Error())
				return false
			}
			return true
		case "blog":
			s.Blog.Reset()
			if err := s.Blog.ReadJSON(i); err != nil {
				i.ReportError("Field Blog", err.Error())
				return false
			}
			return true
		case "company":
			s.Company.Reset()
			if err := s.Company.ReadJSON(i); err != nil {
				i.ReportError("Field Company", err.Error())
				return false
			}
			return true
		case "default_repository_permission":
			s.DefaultRepositoryPermission.Reset()
			if err := s.DefaultRepositoryPermission.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultRepositoryPermission", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "has_organization_projects":
			s.HasOrganizationProjects.Reset()
			if err := s.HasOrganizationProjects.ReadJSON(i); err != nil {
				i.ReportError("Field HasOrganizationProjects", err.Error())
				return false
			}
			return true
		case "has_repository_projects":
			s.HasRepositoryProjects.Reset()
			if err := s.HasRepositoryProjects.ReadJSON(i); err != nil {
				i.ReportError("Field HasRepositoryProjects", err.Error())
				return false
			}
			return true
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(i); err != nil {
				i.ReportError("Field Location", err.Error())
				return false
			}
			return true
		case "members_allowed_repository_creation_type":
			s.MembersAllowedRepositoryCreationType.Reset()
			if err := s.MembersAllowedRepositoryCreationType.ReadJSON(i); err != nil {
				i.ReportError("Field MembersAllowedRepositoryCreationType", err.Error())
				return false
			}
			return true
		case "members_can_create_internal_repositories":
			s.MembersCanCreateInternalRepositories.Reset()
			if err := s.MembersCanCreateInternalRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreateInternalRepositories", err.Error())
				return false
			}
			return true
		case "members_can_create_pages":
			s.MembersCanCreatePages.Reset()
			if err := s.MembersCanCreatePages.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreatePages", err.Error())
				return false
			}
			return true
		case "members_can_create_private_pages":
			s.MembersCanCreatePrivatePages.Reset()
			if err := s.MembersCanCreatePrivatePages.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreatePrivatePages", err.Error())
				return false
			}
			return true
		case "members_can_create_private_repositories":
			s.MembersCanCreatePrivateRepositories.Reset()
			if err := s.MembersCanCreatePrivateRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreatePrivateRepositories", err.Error())
				return false
			}
			return true
		case "members_can_create_public_pages":
			s.MembersCanCreatePublicPages.Reset()
			if err := s.MembersCanCreatePublicPages.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreatePublicPages", err.Error())
				return false
			}
			return true
		case "members_can_create_public_repositories":
			s.MembersCanCreatePublicRepositories.Reset()
			if err := s.MembersCanCreatePublicRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreatePublicRepositories", err.Error())
				return false
			}
			return true
		case "members_can_create_repositories":
			s.MembersCanCreateRepositories.Reset()
			if err := s.MembersCanCreateRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field MembersCanCreateRepositories", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "twitter_username":
			s.TwitterUsername.Reset()
			if err := s.TwitterUsername.ReadJSON(i); err != nil {
				i.ReportError("Field TwitterUsername", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission from json stream.
func (s *OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission) ReadJSON(i *json.Iterator) error {
	*s = OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType from json stream.
func (s *OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType) ReadJSON(i *json.Iterator) error {
	*s = OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest json value to io.Writer.
func (s OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest json value from io.Reader.
func (s *OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest from json stream.
func (s *OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequestState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequestState from json stream.
func (s *OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequestState) ReadJSON(i *json.Iterator) error {
	*s = OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequestState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PackagesBillingUsage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("included_gigabytes_bandwidth")
	j.WriteInt(s.IncludedGigabytesBandwidth)

	more.More()
	j.WriteObjectField("total_gigabytes_bandwidth_used")
	j.WriteInt(s.TotalGigabytesBandwidthUsed)

	more.More()
	j.WriteObjectField("total_paid_gigabytes_bandwidth_used")
	j.WriteInt(s.TotalPaidGigabytesBandwidthUsed)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PackagesBillingUsage json value to io.Writer.
func (s PackagesBillingUsage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PackagesBillingUsage json value from io.Reader.
func (s *PackagesBillingUsage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PackagesBillingUsage from json stream.
func (s *PackagesBillingUsage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "included_gigabytes_bandwidth":
			s.IncludedGigabytesBandwidth = i.ReadInt()
			return i.Error == nil
		case "total_gigabytes_bandwidth_used":
			s.TotalGigabytesBandwidthUsed = i.ReadInt()
			return i.Error == nil
		case "total_paid_gigabytes_bandwidth_used":
			s.TotalPaidGigabytesBandwidthUsed = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Page) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("cname")
	s.Cname.WriteJSON(j)

	more.More()
	j.WriteObjectField("custom_404")
	j.WriteBool(s.Custom404)

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.HTTPSCertificate.Set {
		more.More()
		j.WriteObjectField("https_certificate")
		s.HTTPSCertificate.WriteJSON(j)
	}

	if s.HTTPSEnforced.Set {
		more.More()
		j.WriteObjectField("https_enforced")
		s.HTTPSEnforced.WriteJSON(j)
	}

	if s.PendingDomainUnverifiedAt.Set {
		more.More()
		j.WriteObjectField("pending_domain_unverified_at")
		s.PendingDomainUnverifiedAt.WriteJSON(j, json.WriteDateTime)
	}

	if s.ProtectedDomainState.Set {
		more.More()
		j.WriteObjectField("protected_domain_state")
		s.ProtectedDomainState.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("public")
	j.WriteBool(s.Public)

	if s.Source.Set {
		more.More()
		j.WriteObjectField("source")
		s.Source.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Page json value to io.Writer.
func (s Page) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Page json value from io.Reader.
func (s *Page) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Page from json stream.
func (s *Page) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cname":
			if err := s.Cname.ReadJSON(i); err != nil {
				i.ReportError("Field Cname", err.Error())
				return false
			}
			return true
		case "custom_404":
			s.Custom404 = i.ReadBool()
			return i.Error == nil
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "https_certificate":
			s.HTTPSCertificate.Reset()
			if err := s.HTTPSCertificate.ReadJSON(i); err != nil {
				i.ReportError("Field HTTPSCertificate", err.Error())
				return false
			}
			return true
		case "https_enforced":
			s.HTTPSEnforced.Reset()
			if err := s.HTTPSEnforced.ReadJSON(i); err != nil {
				i.ReportError("Field HTTPSEnforced", err.Error())
				return false
			}
			return true
		case "pending_domain_unverified_at":
			s.PendingDomainUnverifiedAt.Reset()
			if err := s.PendingDomainUnverifiedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field PendingDomainUnverifiedAt", err.Error())
				return false
			}
			return true
		case "protected_domain_state":
			s.ProtectedDomainState.Reset()
			if err := s.ProtectedDomainState.ReadJSON(i); err != nil {
				i.ReportError("Field ProtectedDomainState", err.Error())
				return false
			}
			return true
		case "public":
			s.Public = i.ReadBool()
			return i.Error == nil
		case "source":
			s.Source.Reset()
			if err := s.Source.ReadJSON(i); err != nil {
				i.ReportError("Field Source", err.Error())
				return false
			}
			return true
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PageBuild) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("commit")
	j.WriteString(s.Commit)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)

	more.More()
	j.WriteObjectField("error")
	s.Error.WriteJSON(j)

	more.More()
	j.WriteObjectField("pusher")
	s.Pusher.WriteJSON(j)

	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PageBuild json value to io.Writer.
func (s PageBuild) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PageBuild json value from io.Reader.
func (s *PageBuild) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PageBuild from json stream.
func (s *PageBuild) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commit":
			s.Commit = i.ReadString()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "duration":
			s.Duration = i.ReadInt()
			return i.Error == nil
		case "error":
			if err := s.Error.ReadJSON(i); err != nil {
				i.ReportError("Field Error", err.Error())
				return false
			}
			return true
		case "pusher":
			if err := s.Pusher.ReadJSON(i); err != nil {
				i.ReportError("Field Pusher", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PageBuildError) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("message")
	s.Message.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PageBuildError json value to io.Writer.
func (s PageBuildError) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PageBuildError json value from io.Reader.
func (s *PageBuildError) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PageBuildError from json stream.
func (s *PageBuildError) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PageBuildStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PageBuildStatus json value to io.Writer.
func (s PageBuildStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PageBuildStatus json value from io.Reader.
func (s *PageBuildStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PageBuildStatus from json stream.
func (s *PageBuildStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PageProtectedDomainState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PageProtectedDomainState from json stream.
func (s *PageProtectedDomainState) ReadJSON(i *json.Iterator) error {
	*s = PageProtectedDomainState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PageStatus) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PageStatus from json stream.
func (s *PageStatus) ReadJSON(i *json.Iterator) error {
	*s = PageStatus(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PagesHTTPSCertificate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)

	more.More()
	j.WriteObjectField("domains")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Domains {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.ExpiresAt.Set {
		more.More()
		j.WriteObjectField("expires_at")
		s.ExpiresAt.WriteJSON(j, json.WriteDate)
	}

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PagesHTTPSCertificate json value to io.Writer.
func (s PagesHTTPSCertificate) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PagesHTTPSCertificate json value from io.Reader.
func (s *PagesHTTPSCertificate) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PagesHTTPSCertificate from json stream.
func (s *PagesHTTPSCertificate) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description = i.ReadString()
			return i.Error == nil
		case "domains":
			// Unsupported kind "array" for field "Domains".
			i.Skip()
			return true
		case "expires_at":
			s.ExpiresAt.Reset()
			if err := s.ExpiresAt.ReadJSON(i, json.ReadDate); err != nil {
				i.ReportError("Field ExpiresAt", err.Error())
				return false
			}
			return true
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PagesHTTPSCertificateState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PagesHTTPSCertificateState from json stream.
func (s *PagesHTTPSCertificateState) ReadJSON(i *json.Iterator) error {
	*s = PagesHTTPSCertificateState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PagesHealthCheck) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AltDomain.Set {
		more.More()
		j.WriteObjectField("alt_domain")
		s.AltDomain.WriteJSON(j)
	}

	if s.Domain.Set {
		more.More()
		j.WriteObjectField("domain")
		s.Domain.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PagesHealthCheck json value to io.Writer.
func (s PagesHealthCheck) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PagesHealthCheck json value from io.Reader.
func (s *PagesHealthCheck) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PagesHealthCheck from json stream.
func (s *PagesHealthCheck) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "alt_domain":
			s.AltDomain.Reset()
			if err := s.AltDomain.ReadJSON(i); err != nil {
				i.ReportError("Field AltDomain", err.Error())
				return false
			}
			return true
		case "domain":
			s.Domain.Reset()
			if err := s.Domain.ReadJSON(i); err != nil {
				i.ReportError("Field Domain", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PagesHealthCheckAltDomain) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CaaError.Set {
		more.More()
		j.WriteObjectField("caa_error")
		s.CaaError.WriteJSON(j)
	}

	if s.DNSResolves.Set {
		more.More()
		j.WriteObjectField("dns_resolves")
		s.DNSResolves.WriteJSON(j)
	}

	if s.EnforcesHTTPS.Set {
		more.More()
		j.WriteObjectField("enforces_https")
		s.EnforcesHTTPS.WriteJSON(j)
	}

	if s.HTTPSError.Set {
		more.More()
		j.WriteObjectField("https_error")
		s.HTTPSError.WriteJSON(j)
	}

	if s.HasCnameRecord.Set {
		more.More()
		j.WriteObjectField("has_cname_record")
		s.HasCnameRecord.WriteJSON(j)
	}

	if s.HasMxRecordsPresent.Set {
		more.More()
		j.WriteObjectField("has_mx_records_present")
		s.HasMxRecordsPresent.WriteJSON(j)
	}

	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}

	if s.IsARecord.Set {
		more.More()
		j.WriteObjectField("is_a_record")
		s.IsARecord.WriteJSON(j)
	}

	if s.IsApexDomain.Set {
		more.More()
		j.WriteObjectField("is_apex_domain")
		s.IsApexDomain.WriteJSON(j)
	}

	if s.IsCloudflareIP.Set {
		more.More()
		j.WriteObjectField("is_cloudflare_ip")
		s.IsCloudflareIP.WriteJSON(j)
	}

	if s.IsCnameToFastly.Set {
		more.More()
		j.WriteObjectField("is_cname_to_fastly")
		s.IsCnameToFastly.WriteJSON(j)
	}

	if s.IsCnameToGithubUserDomain.Set {
		more.More()
		j.WriteObjectField("is_cname_to_github_user_domain")
		s.IsCnameToGithubUserDomain.WriteJSON(j)
	}

	if s.IsCnameToPagesDotGithubDotCom.Set {
		more.More()
		j.WriteObjectField("is_cname_to_pages_dot_github_dot_com")
		s.IsCnameToPagesDotGithubDotCom.WriteJSON(j)
	}

	if s.IsFastlyIP.Set {
		more.More()
		j.WriteObjectField("is_fastly_ip")
		s.IsFastlyIP.WriteJSON(j)
	}

	if s.IsHTTPSEligible.Set {
		more.More()
		j.WriteObjectField("is_https_eligible")
		s.IsHTTPSEligible.WriteJSON(j)
	}

	if s.IsNonGithubPagesIPPresent.Set {
		more.More()
		j.WriteObjectField("is_non_github_pages_ip_present")
		s.IsNonGithubPagesIPPresent.WriteJSON(j)
	}

	if s.IsOldIPAddress.Set {
		more.More()
		j.WriteObjectField("is_old_ip_address")
		s.IsOldIPAddress.WriteJSON(j)
	}

	if s.IsPagesDomain.Set {
		more.More()
		j.WriteObjectField("is_pages_domain")
		s.IsPagesDomain.WriteJSON(j)
	}

	if s.IsPointedToGithubPagesIP.Set {
		more.More()
		j.WriteObjectField("is_pointed_to_github_pages_ip")
		s.IsPointedToGithubPagesIP.WriteJSON(j)
	}

	if s.IsProxied.Set {
		more.More()
		j.WriteObjectField("is_proxied")
		s.IsProxied.WriteJSON(j)
	}

	if s.IsServedByPages.Set {
		more.More()
		j.WriteObjectField("is_served_by_pages")
		s.IsServedByPages.WriteJSON(j)
	}

	if s.IsValid.Set {
		more.More()
		j.WriteObjectField("is_valid")
		s.IsValid.WriteJSON(j)
	}

	if s.IsValidDomain.Set {
		more.More()
		j.WriteObjectField("is_valid_domain")
		s.IsValidDomain.WriteJSON(j)
	}

	if s.Nameservers.Set {
		more.More()
		j.WriteObjectField("nameservers")
		s.Nameservers.WriteJSON(j)
	}

	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}

	if s.RespondsToHTTPS.Set {
		more.More()
		j.WriteObjectField("responds_to_https")
		s.RespondsToHTTPS.WriteJSON(j)
	}

	if s.ShouldBeARecord.Set {
		more.More()
		j.WriteObjectField("should_be_a_record")
		s.ShouldBeARecord.WriteJSON(j)
	}

	if s.URI.Set {
		more.More()
		j.WriteObjectField("uri")
		s.URI.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PagesHealthCheckAltDomain json value to io.Writer.
func (s PagesHealthCheckAltDomain) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PagesHealthCheckAltDomain json value from io.Reader.
func (s *PagesHealthCheckAltDomain) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PagesHealthCheckAltDomain from json stream.
func (s *PagesHealthCheckAltDomain) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "caa_error":
			s.CaaError.Reset()
			if err := s.CaaError.ReadJSON(i); err != nil {
				i.ReportError("Field CaaError", err.Error())
				return false
			}
			return true
		case "dns_resolves":
			s.DNSResolves.Reset()
			if err := s.DNSResolves.ReadJSON(i); err != nil {
				i.ReportError("Field DNSResolves", err.Error())
				return false
			}
			return true
		case "enforces_https":
			s.EnforcesHTTPS.Reset()
			if err := s.EnforcesHTTPS.ReadJSON(i); err != nil {
				i.ReportError("Field EnforcesHTTPS", err.Error())
				return false
			}
			return true
		case "https_error":
			s.HTTPSError.Reset()
			if err := s.HTTPSError.ReadJSON(i); err != nil {
				i.ReportError("Field HTTPSError", err.Error())
				return false
			}
			return true
		case "has_cname_record":
			s.HasCnameRecord.Reset()
			if err := s.HasCnameRecord.ReadJSON(i); err != nil {
				i.ReportError("Field HasCnameRecord", err.Error())
				return false
			}
			return true
		case "has_mx_records_present":
			s.HasMxRecordsPresent.Reset()
			if err := s.HasMxRecordsPresent.ReadJSON(i); err != nil {
				i.ReportError("Field HasMxRecordsPresent", err.Error())
				return false
			}
			return true
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				i.ReportError("Field Host", err.Error())
				return false
			}
			return true
		case "is_a_record":
			s.IsARecord.Reset()
			if err := s.IsARecord.ReadJSON(i); err != nil {
				i.ReportError("Field IsARecord", err.Error())
				return false
			}
			return true
		case "is_apex_domain":
			s.IsApexDomain.Reset()
			if err := s.IsApexDomain.ReadJSON(i); err != nil {
				i.ReportError("Field IsApexDomain", err.Error())
				return false
			}
			return true
		case "is_cloudflare_ip":
			s.IsCloudflareIP.Reset()
			if err := s.IsCloudflareIP.ReadJSON(i); err != nil {
				i.ReportError("Field IsCloudflareIP", err.Error())
				return false
			}
			return true
		case "is_cname_to_fastly":
			s.IsCnameToFastly.Reset()
			if err := s.IsCnameToFastly.ReadJSON(i); err != nil {
				i.ReportError("Field IsCnameToFastly", err.Error())
				return false
			}
			return true
		case "is_cname_to_github_user_domain":
			s.IsCnameToGithubUserDomain.Reset()
			if err := s.IsCnameToGithubUserDomain.ReadJSON(i); err != nil {
				i.ReportError("Field IsCnameToGithubUserDomain", err.Error())
				return false
			}
			return true
		case "is_cname_to_pages_dot_github_dot_com":
			s.IsCnameToPagesDotGithubDotCom.Reset()
			if err := s.IsCnameToPagesDotGithubDotCom.ReadJSON(i); err != nil {
				i.ReportError("Field IsCnameToPagesDotGithubDotCom", err.Error())
				return false
			}
			return true
		case "is_fastly_ip":
			s.IsFastlyIP.Reset()
			if err := s.IsFastlyIP.ReadJSON(i); err != nil {
				i.ReportError("Field IsFastlyIP", err.Error())
				return false
			}
			return true
		case "is_https_eligible":
			s.IsHTTPSEligible.Reset()
			if err := s.IsHTTPSEligible.ReadJSON(i); err != nil {
				i.ReportError("Field IsHTTPSEligible", err.Error())
				return false
			}
			return true
		case "is_non_github_pages_ip_present":
			s.IsNonGithubPagesIPPresent.Reset()
			if err := s.IsNonGithubPagesIPPresent.ReadJSON(i); err != nil {
				i.ReportError("Field IsNonGithubPagesIPPresent", err.Error())
				return false
			}
			return true
		case "is_old_ip_address":
			s.IsOldIPAddress.Reset()
			if err := s.IsOldIPAddress.ReadJSON(i); err != nil {
				i.ReportError("Field IsOldIPAddress", err.Error())
				return false
			}
			return true
		case "is_pages_domain":
			s.IsPagesDomain.Reset()
			if err := s.IsPagesDomain.ReadJSON(i); err != nil {
				i.ReportError("Field IsPagesDomain", err.Error())
				return false
			}
			return true
		case "is_pointed_to_github_pages_ip":
			s.IsPointedToGithubPagesIP.Reset()
			if err := s.IsPointedToGithubPagesIP.ReadJSON(i); err != nil {
				i.ReportError("Field IsPointedToGithubPagesIP", err.Error())
				return false
			}
			return true
		case "is_proxied":
			s.IsProxied.Reset()
			if err := s.IsProxied.ReadJSON(i); err != nil {
				i.ReportError("Field IsProxied", err.Error())
				return false
			}
			return true
		case "is_served_by_pages":
			s.IsServedByPages.Reset()
			if err := s.IsServedByPages.ReadJSON(i); err != nil {
				i.ReportError("Field IsServedByPages", err.Error())
				return false
			}
			return true
		case "is_valid":
			s.IsValid.Reset()
			if err := s.IsValid.ReadJSON(i); err != nil {
				i.ReportError("Field IsValid", err.Error())
				return false
			}
			return true
		case "is_valid_domain":
			s.IsValidDomain.Reset()
			if err := s.IsValidDomain.ReadJSON(i); err != nil {
				i.ReportError("Field IsValidDomain", err.Error())
				return false
			}
			return true
		case "nameservers":
			s.Nameservers.Reset()
			if err := s.Nameservers.ReadJSON(i); err != nil {
				i.ReportError("Field Nameservers", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "responds_to_https":
			s.RespondsToHTTPS.Reset()
			if err := s.RespondsToHTTPS.ReadJSON(i); err != nil {
				i.ReportError("Field RespondsToHTTPS", err.Error())
				return false
			}
			return true
		case "should_be_a_record":
			s.ShouldBeARecord.Reset()
			if err := s.ShouldBeARecord.ReadJSON(i); err != nil {
				i.ReportError("Field ShouldBeARecord", err.Error())
				return false
			}
			return true
		case "uri":
			s.URI.Reset()
			if err := s.URI.ReadJSON(i); err != nil {
				i.ReportError("Field URI", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PagesHealthCheckDomain) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CaaError.Set {
		more.More()
		j.WriteObjectField("caa_error")
		s.CaaError.WriteJSON(j)
	}

	if s.DNSResolves.Set {
		more.More()
		j.WriteObjectField("dns_resolves")
		s.DNSResolves.WriteJSON(j)
	}

	if s.EnforcesHTTPS.Set {
		more.More()
		j.WriteObjectField("enforces_https")
		s.EnforcesHTTPS.WriteJSON(j)
	}

	if s.HTTPSError.Set {
		more.More()
		j.WriteObjectField("https_error")
		s.HTTPSError.WriteJSON(j)
	}

	if s.HasCnameRecord.Set {
		more.More()
		j.WriteObjectField("has_cname_record")
		s.HasCnameRecord.WriteJSON(j)
	}

	if s.HasMxRecordsPresent.Set {
		more.More()
		j.WriteObjectField("has_mx_records_present")
		s.HasMxRecordsPresent.WriteJSON(j)
	}

	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}

	if s.IsARecord.Set {
		more.More()
		j.WriteObjectField("is_a_record")
		s.IsARecord.WriteJSON(j)
	}

	if s.IsApexDomain.Set {
		more.More()
		j.WriteObjectField("is_apex_domain")
		s.IsApexDomain.WriteJSON(j)
	}

	if s.IsCloudflareIP.Set {
		more.More()
		j.WriteObjectField("is_cloudflare_ip")
		s.IsCloudflareIP.WriteJSON(j)
	}

	if s.IsCnameToFastly.Set {
		more.More()
		j.WriteObjectField("is_cname_to_fastly")
		s.IsCnameToFastly.WriteJSON(j)
	}

	if s.IsCnameToGithubUserDomain.Set {
		more.More()
		j.WriteObjectField("is_cname_to_github_user_domain")
		s.IsCnameToGithubUserDomain.WriteJSON(j)
	}

	if s.IsCnameToPagesDotGithubDotCom.Set {
		more.More()
		j.WriteObjectField("is_cname_to_pages_dot_github_dot_com")
		s.IsCnameToPagesDotGithubDotCom.WriteJSON(j)
	}

	if s.IsFastlyIP.Set {
		more.More()
		j.WriteObjectField("is_fastly_ip")
		s.IsFastlyIP.WriteJSON(j)
	}

	if s.IsHTTPSEligible.Set {
		more.More()
		j.WriteObjectField("is_https_eligible")
		s.IsHTTPSEligible.WriteJSON(j)
	}

	if s.IsNonGithubPagesIPPresent.Set {
		more.More()
		j.WriteObjectField("is_non_github_pages_ip_present")
		s.IsNonGithubPagesIPPresent.WriteJSON(j)
	}

	if s.IsOldIPAddress.Set {
		more.More()
		j.WriteObjectField("is_old_ip_address")
		s.IsOldIPAddress.WriteJSON(j)
	}

	if s.IsPagesDomain.Set {
		more.More()
		j.WriteObjectField("is_pages_domain")
		s.IsPagesDomain.WriteJSON(j)
	}

	if s.IsPointedToGithubPagesIP.Set {
		more.More()
		j.WriteObjectField("is_pointed_to_github_pages_ip")
		s.IsPointedToGithubPagesIP.WriteJSON(j)
	}

	if s.IsProxied.Set {
		more.More()
		j.WriteObjectField("is_proxied")
		s.IsProxied.WriteJSON(j)
	}

	if s.IsServedByPages.Set {
		more.More()
		j.WriteObjectField("is_served_by_pages")
		s.IsServedByPages.WriteJSON(j)
	}

	if s.IsValid.Set {
		more.More()
		j.WriteObjectField("is_valid")
		s.IsValid.WriteJSON(j)
	}

	if s.IsValidDomain.Set {
		more.More()
		j.WriteObjectField("is_valid_domain")
		s.IsValidDomain.WriteJSON(j)
	}

	if s.Nameservers.Set {
		more.More()
		j.WriteObjectField("nameservers")
		s.Nameservers.WriteJSON(j)
	}

	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}

	if s.RespondsToHTTPS.Set {
		more.More()
		j.WriteObjectField("responds_to_https")
		s.RespondsToHTTPS.WriteJSON(j)
	}

	if s.ShouldBeARecord.Set {
		more.More()
		j.WriteObjectField("should_be_a_record")
		s.ShouldBeARecord.WriteJSON(j)
	}

	if s.URI.Set {
		more.More()
		j.WriteObjectField("uri")
		s.URI.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PagesHealthCheckDomain json value to io.Writer.
func (s PagesHealthCheckDomain) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PagesHealthCheckDomain json value from io.Reader.
func (s *PagesHealthCheckDomain) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PagesHealthCheckDomain from json stream.
func (s *PagesHealthCheckDomain) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "caa_error":
			s.CaaError.Reset()
			if err := s.CaaError.ReadJSON(i); err != nil {
				i.ReportError("Field CaaError", err.Error())
				return false
			}
			return true
		case "dns_resolves":
			s.DNSResolves.Reset()
			if err := s.DNSResolves.ReadJSON(i); err != nil {
				i.ReportError("Field DNSResolves", err.Error())
				return false
			}
			return true
		case "enforces_https":
			s.EnforcesHTTPS.Reset()
			if err := s.EnforcesHTTPS.ReadJSON(i); err != nil {
				i.ReportError("Field EnforcesHTTPS", err.Error())
				return false
			}
			return true
		case "https_error":
			s.HTTPSError.Reset()
			if err := s.HTTPSError.ReadJSON(i); err != nil {
				i.ReportError("Field HTTPSError", err.Error())
				return false
			}
			return true
		case "has_cname_record":
			s.HasCnameRecord.Reset()
			if err := s.HasCnameRecord.ReadJSON(i); err != nil {
				i.ReportError("Field HasCnameRecord", err.Error())
				return false
			}
			return true
		case "has_mx_records_present":
			s.HasMxRecordsPresent.Reset()
			if err := s.HasMxRecordsPresent.ReadJSON(i); err != nil {
				i.ReportError("Field HasMxRecordsPresent", err.Error())
				return false
			}
			return true
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				i.ReportError("Field Host", err.Error())
				return false
			}
			return true
		case "is_a_record":
			s.IsARecord.Reset()
			if err := s.IsARecord.ReadJSON(i); err != nil {
				i.ReportError("Field IsARecord", err.Error())
				return false
			}
			return true
		case "is_apex_domain":
			s.IsApexDomain.Reset()
			if err := s.IsApexDomain.ReadJSON(i); err != nil {
				i.ReportError("Field IsApexDomain", err.Error())
				return false
			}
			return true
		case "is_cloudflare_ip":
			s.IsCloudflareIP.Reset()
			if err := s.IsCloudflareIP.ReadJSON(i); err != nil {
				i.ReportError("Field IsCloudflareIP", err.Error())
				return false
			}
			return true
		case "is_cname_to_fastly":
			s.IsCnameToFastly.Reset()
			if err := s.IsCnameToFastly.ReadJSON(i); err != nil {
				i.ReportError("Field IsCnameToFastly", err.Error())
				return false
			}
			return true
		case "is_cname_to_github_user_domain":
			s.IsCnameToGithubUserDomain.Reset()
			if err := s.IsCnameToGithubUserDomain.ReadJSON(i); err != nil {
				i.ReportError("Field IsCnameToGithubUserDomain", err.Error())
				return false
			}
			return true
		case "is_cname_to_pages_dot_github_dot_com":
			s.IsCnameToPagesDotGithubDotCom.Reset()
			if err := s.IsCnameToPagesDotGithubDotCom.ReadJSON(i); err != nil {
				i.ReportError("Field IsCnameToPagesDotGithubDotCom", err.Error())
				return false
			}
			return true
		case "is_fastly_ip":
			s.IsFastlyIP.Reset()
			if err := s.IsFastlyIP.ReadJSON(i); err != nil {
				i.ReportError("Field IsFastlyIP", err.Error())
				return false
			}
			return true
		case "is_https_eligible":
			s.IsHTTPSEligible.Reset()
			if err := s.IsHTTPSEligible.ReadJSON(i); err != nil {
				i.ReportError("Field IsHTTPSEligible", err.Error())
				return false
			}
			return true
		case "is_non_github_pages_ip_present":
			s.IsNonGithubPagesIPPresent.Reset()
			if err := s.IsNonGithubPagesIPPresent.ReadJSON(i); err != nil {
				i.ReportError("Field IsNonGithubPagesIPPresent", err.Error())
				return false
			}
			return true
		case "is_old_ip_address":
			s.IsOldIPAddress.Reset()
			if err := s.IsOldIPAddress.ReadJSON(i); err != nil {
				i.ReportError("Field IsOldIPAddress", err.Error())
				return false
			}
			return true
		case "is_pages_domain":
			s.IsPagesDomain.Reset()
			if err := s.IsPagesDomain.ReadJSON(i); err != nil {
				i.ReportError("Field IsPagesDomain", err.Error())
				return false
			}
			return true
		case "is_pointed_to_github_pages_ip":
			s.IsPointedToGithubPagesIP.Reset()
			if err := s.IsPointedToGithubPagesIP.ReadJSON(i); err != nil {
				i.ReportError("Field IsPointedToGithubPagesIP", err.Error())
				return false
			}
			return true
		case "is_proxied":
			s.IsProxied.Reset()
			if err := s.IsProxied.ReadJSON(i); err != nil {
				i.ReportError("Field IsProxied", err.Error())
				return false
			}
			return true
		case "is_served_by_pages":
			s.IsServedByPages.Reset()
			if err := s.IsServedByPages.ReadJSON(i); err != nil {
				i.ReportError("Field IsServedByPages", err.Error())
				return false
			}
			return true
		case "is_valid":
			s.IsValid.Reset()
			if err := s.IsValid.ReadJSON(i); err != nil {
				i.ReportError("Field IsValid", err.Error())
				return false
			}
			return true
		case "is_valid_domain":
			s.IsValidDomain.Reset()
			if err := s.IsValidDomain.ReadJSON(i); err != nil {
				i.ReportError("Field IsValidDomain", err.Error())
				return false
			}
			return true
		case "nameservers":
			s.Nameservers.Reset()
			if err := s.Nameservers.ReadJSON(i); err != nil {
				i.ReportError("Field Nameservers", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "responds_to_https":
			s.RespondsToHTTPS.Reset()
			if err := s.RespondsToHTTPS.ReadJSON(i); err != nil {
				i.ReportError("Field RespondsToHTTPS", err.Error())
				return false
			}
			return true
		case "should_be_a_record":
			s.ShouldBeARecord.Reset()
			if err := s.ShouldBeARecord.ReadJSON(i); err != nil {
				i.ReportError("Field ShouldBeARecord", err.Error())
				return false
			}
			return true
		case "uri":
			s.URI.Reset()
			if err := s.URI.ReadJSON(i); err != nil {
				i.ReportError("Field URI", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PagesSourceHash) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("branch")
	j.WriteString(s.Branch)

	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PagesSourceHash json value to io.Writer.
func (s PagesSourceHash) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PagesSourceHash json value from io.Reader.
func (s *PagesSourceHash) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PagesSourceHash from json stream.
func (s *PagesSourceHash) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "branch":
			s.Branch = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ParticipationStats) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("all")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.All {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("owner")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Owner {
		more.More()
		j.WriteInt(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ParticipationStats json value to io.Writer.
func (s ParticipationStats) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ParticipationStats json value from io.Reader.
func (s *ParticipationStats) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ParticipationStats from json stream.
func (s *ParticipationStats) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "all":
			// Unsupported kind "array" for field "All".
			i.Skip()
			return true
		case "owner":
			// Unsupported kind "array" for field "Owner".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PorterAuthor) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("import_url")
	json.WriteURI(j, s.ImportURL)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("remote_id")
	j.WriteString(s.RemoteID)

	more.More()
	j.WriteObjectField("remote_name")
	j.WriteString(s.RemoteName)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PorterAuthor json value to io.Writer.
func (s PorterAuthor) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PorterAuthor json value from io.Reader.
func (s *PorterAuthor) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PorterAuthor from json stream.
func (s *PorterAuthor) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "import_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ImportURL", err.Error())
				return false
			}
			s.ImportURL = v
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "remote_id":
			s.RemoteID = i.ReadString()
			return i.Error == nil
		case "remote_name":
			s.RemoteName = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PorterLargeFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("oid")
	j.WriteString(s.Oid)

	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)

	more.More()
	j.WriteObjectField("ref_name")
	j.WriteString(s.RefName)

	more.More()
	j.WriteObjectField("size")
	j.WriteInt(s.Size)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PorterLargeFile json value to io.Writer.
func (s PorterLargeFile) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PorterLargeFile json value from io.Reader.
func (s *PorterLargeFile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PorterLargeFile from json stream.
func (s *PorterLargeFile) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "oid":
			s.Oid = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "ref_name":
			s.RefName = i.ReadString()
			return i.Error == nil
		case "size":
			s.Size = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PreviewHeaderMissing) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("documentation_url")
	j.WriteString(s.DocumentationURL)

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PreviewHeaderMissing json value to io.Writer.
func (s PreviewHeaderMissing) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PreviewHeaderMissing json value from io.Reader.
func (s *PreviewHeaderMissing) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PreviewHeaderMissing from json stream.
func (s *PreviewHeaderMissing) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL = i.ReadString()
			return i.Error == nil
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PrivateUser) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("avatar_url")
	json.WriteURI(j, s.AvatarURL)

	more.More()
	j.WriteObjectField("bio")
	s.Bio.WriteJSON(j)

	more.More()
	j.WriteObjectField("blog")
	s.Blog.WriteJSON(j)

	if s.BusinessPlus.Set {
		more.More()
		j.WriteObjectField("business_plus")
		s.BusinessPlus.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("collaborators")
	j.WriteInt(s.Collaborators)

	more.More()
	j.WriteObjectField("company")
	s.Company.WriteJSON(j)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("disk_usage")
	j.WriteInt(s.DiskUsage)

	more.More()
	j.WriteObjectField("email")
	s.Email.WriteJSON(j)

	more.More()
	j.WriteObjectField("events_url")
	j.WriteString(s.EventsURL)

	more.More()
	j.WriteObjectField("followers")
	j.WriteInt(s.Followers)

	more.More()
	j.WriteObjectField("followers_url")
	json.WriteURI(j, s.FollowersURL)

	more.More()
	j.WriteObjectField("following")
	j.WriteInt(s.Following)

	more.More()
	j.WriteObjectField("following_url")
	j.WriteString(s.FollowingURL)

	more.More()
	j.WriteObjectField("gists_url")
	j.WriteString(s.GistsURL)

	more.More()
	j.WriteObjectField("gravatar_id")
	s.GravatarID.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("hireable")
	s.Hireable.WriteJSON(j)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.LdapDn.Set {
		more.More()
		j.WriteObjectField("ldap_dn")
		s.LdapDn.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("location")
	s.Location.WriteJSON(j)

	more.More()
	j.WriteObjectField("login")
	j.WriteString(s.Login)

	more.More()
	j.WriteObjectField("name")
	s.Name.WriteJSON(j)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("organizations_url")
	json.WriteURI(j, s.OrganizationsURL)

	more.More()
	j.WriteObjectField("owned_private_repos")
	j.WriteInt(s.OwnedPrivateRepos)

	if s.Plan.Set {
		more.More()
		j.WriteObjectField("plan")
		s.Plan.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("private_gists")
	j.WriteInt(s.PrivateGists)

	more.More()
	j.WriteObjectField("public_gists")
	j.WriteInt(s.PublicGists)

	more.More()
	j.WriteObjectField("public_repos")
	j.WriteInt(s.PublicRepos)

	more.More()
	j.WriteObjectField("received_events_url")
	json.WriteURI(j, s.ReceivedEventsURL)

	more.More()
	j.WriteObjectField("repos_url")
	json.WriteURI(j, s.ReposURL)

	more.More()
	j.WriteObjectField("site_admin")
	j.WriteBool(s.SiteAdmin)

	more.More()
	j.WriteObjectField("starred_url")
	j.WriteString(s.StarredURL)

	more.More()
	j.WriteObjectField("subscriptions_url")
	json.WriteURI(j, s.SubscriptionsURL)

	if s.SuspendedAt.Set {
		more.More()
		j.WriteObjectField("suspended_at")
		s.SuspendedAt.WriteJSON(j, json.WriteDateTime)
	}

	more.More()
	j.WriteObjectField("total_private_repos")
	j.WriteInt(s.TotalPrivateRepos)

	if s.TwitterUsername.Set {
		more.More()
		j.WriteObjectField("twitter_username")
		s.TwitterUsername.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("two_factor_authentication")
	j.WriteBool(s.TwoFactorAuthentication)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PrivateUser json value to io.Writer.
func (s PrivateUser) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PrivateUser json value from io.Reader.
func (s *PrivateUser) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PrivateUser from json stream.
func (s *PrivateUser) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field AvatarURL", err.Error())
				return false
			}
			s.AvatarURL = v
			return true
		case "bio":
			if err := s.Bio.ReadJSON(i); err != nil {
				i.ReportError("Field Bio", err.Error())
				return false
			}
			return true
		case "blog":
			if err := s.Blog.ReadJSON(i); err != nil {
				i.ReportError("Field Blog", err.Error())
				return false
			}
			return true
		case "business_plus":
			s.BusinessPlus.Reset()
			if err := s.BusinessPlus.ReadJSON(i); err != nil {
				i.ReportError("Field BusinessPlus", err.Error())
				return false
			}
			return true
		case "collaborators":
			s.Collaborators = i.ReadInt()
			return i.Error == nil
		case "company":
			if err := s.Company.ReadJSON(i); err != nil {
				i.ReportError("Field Company", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "disk_usage":
			s.DiskUsage = i.ReadInt()
			return i.Error == nil
		case "email":
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "events_url":
			s.EventsURL = i.ReadString()
			return i.Error == nil
		case "followers":
			s.Followers = i.ReadInt()
			return i.Error == nil
		case "followers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field FollowersURL", err.Error())
				return false
			}
			s.FollowersURL = v
			return true
		case "following":
			s.Following = i.ReadInt()
			return i.Error == nil
		case "following_url":
			s.FollowingURL = i.ReadString()
			return i.Error == nil
		case "gists_url":
			s.GistsURL = i.ReadString()
			return i.Error == nil
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(i); err != nil {
				i.ReportError("Field GravatarID", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "hireable":
			if err := s.Hireable.ReadJSON(i); err != nil {
				i.ReportError("Field Hireable", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "ldap_dn":
			s.LdapDn.Reset()
			if err := s.LdapDn.ReadJSON(i); err != nil {
				i.ReportError("Field LdapDn", err.Error())
				return false
			}
			return true
		case "location":
			if err := s.Location.ReadJSON(i); err != nil {
				i.ReportError("Field Location", err.Error())
				return false
			}
			return true
		case "login":
			s.Login = i.ReadString()
			return i.Error == nil
		case "name":
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "organizations_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field OrganizationsURL", err.Error())
				return false
			}
			s.OrganizationsURL = v
			return true
		case "owned_private_repos":
			s.OwnedPrivateRepos = i.ReadInt()
			return i.Error == nil
		case "plan":
			s.Plan.Reset()
			if err := s.Plan.ReadJSON(i); err != nil {
				i.ReportError("Field Plan", err.Error())
				return false
			}
			return true
		case "private_gists":
			s.PrivateGists = i.ReadInt()
			return i.Error == nil
		case "public_gists":
			s.PublicGists = i.ReadInt()
			return i.Error == nil
		case "public_repos":
			s.PublicRepos = i.ReadInt()
			return i.Error == nil
		case "received_events_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ReceivedEventsURL", err.Error())
				return false
			}
			s.ReceivedEventsURL = v
			return true
		case "repos_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ReposURL", err.Error())
				return false
			}
			s.ReposURL = v
			return true
		case "site_admin":
			s.SiteAdmin = i.ReadBool()
			return i.Error == nil
		case "starred_url":
			s.StarredURL = i.ReadString()
			return i.Error == nil
		case "subscriptions_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscriptionsURL", err.Error())
				return false
			}
			s.SubscriptionsURL = v
			return true
		case "suspended_at":
			s.SuspendedAt.Reset()
			if err := s.SuspendedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field SuspendedAt", err.Error())
				return false
			}
			return true
		case "total_private_repos":
			s.TotalPrivateRepos = i.ReadInt()
			return i.Error == nil
		case "twitter_username":
			s.TwitterUsername.Reset()
			if err := s.TwitterUsername.ReadJSON(i); err != nil {
				i.ReportError("Field TwitterUsername", err.Error())
				return false
			}
			return true
		case "two_factor_authentication":
			s.TwoFactorAuthentication = i.ReadBool()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PrivateUserPlan) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("collaborators")
	j.WriteInt(s.Collaborators)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("private_repos")
	j.WriteInt(s.PrivateRepos)

	more.More()
	j.WriteObjectField("space")
	j.WriteInt(s.Space)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PrivateUserPlan json value to io.Writer.
func (s PrivateUserPlan) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PrivateUserPlan json value from io.Reader.
func (s *PrivateUserPlan) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PrivateUserPlan from json stream.
func (s *PrivateUserPlan) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "collaborators":
			s.Collaborators = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "private_repos":
			s.PrivateRepos = i.ReadInt()
			return i.Error == nil
		case "space":
			s.Space = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Project) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	s.Body.WriteJSON(j)

	more.More()
	j.WriteObjectField("columns_url")
	json.WriteURI(j, s.ColumnsURL)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("creator")
	s.Creator.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("number")
	j.WriteInt(s.Number)

	if s.OrganizationPermission.Set {
		more.More()
		j.WriteObjectField("organization_permission")
		s.OrganizationPermission.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("owner_url")
	json.WriteURI(j, s.OwnerURL)

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("state")
	j.WriteString(s.State)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Project json value to io.Writer.
func (s Project) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Project json value from io.Reader.
func (s *Project) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Project from json stream.
func (s *Project) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "columns_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ColumnsURL", err.Error())
				return false
			}
			s.ColumnsURL = v
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "creator":
			if err := s.Creator.ReadJSON(i); err != nil {
				i.ReportError("Field Creator", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "number":
			s.Number = i.ReadInt()
			return i.Error == nil
		case "organization_permission":
			s.OrganizationPermission.Reset()
			if err := s.OrganizationPermission.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationPermission", err.Error())
				return false
			}
			return true
		case "owner_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field OwnerURL", err.Error())
				return false
			}
			s.OwnerURL = v
			return true
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		case "state":
			s.State = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectCard) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Archived.Set {
		more.More()
		j.WriteObjectField("archived")
		s.Archived.WriteJSON(j)
	}

	if s.ColumnName.Set {
		more.More()
		j.WriteObjectField("column_name")
		s.ColumnName.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("column_url")
	json.WriteURI(j, s.ColumnURL)

	if s.ContentURL.Set {
		more.More()
		j.WriteObjectField("content_url")
		s.ContentURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("creator")
	s.Creator.WriteJSON(j)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("note")
	s.Note.WriteJSON(j)

	if s.ProjectID.Set {
		more.More()
		j.WriteObjectField("project_id")
		s.ProjectID.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("project_url")
	json.WriteURI(j, s.ProjectURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectCard json value to io.Writer.
func (s ProjectCard) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectCard json value from io.Reader.
func (s *ProjectCard) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectCard from json stream.
func (s *ProjectCard) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(i); err != nil {
				i.ReportError("Field Archived", err.Error())
				return false
			}
			return true
		case "column_name":
			s.ColumnName.Reset()
			if err := s.ColumnName.ReadJSON(i); err != nil {
				i.ReportError("Field ColumnName", err.Error())
				return false
			}
			return true
		case "column_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ColumnURL", err.Error())
				return false
			}
			s.ColumnURL = v
			return true
		case "content_url":
			s.ContentURL.Reset()
			if err := s.ContentURL.ReadJSON(i); err != nil {
				i.ReportError("Field ContentURL", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "creator":
			if err := s.Creator.ReadJSON(i); err != nil {
				i.ReportError("Field Creator", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "note":
			if err := s.Note.ReadJSON(i); err != nil {
				i.ReportError("Field Note", err.Error())
				return false
			}
			return true
		case "project_id":
			s.ProjectID.Reset()
			if err := s.ProjectID.ReadJSON(i); err != nil {
				i.ReportError("Field ProjectID", err.Error())
				return false
			}
			return true
		case "project_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ProjectURL", err.Error())
				return false
			}
			s.ProjectURL = v
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectColumn) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("cards_url")
	json.WriteURI(j, s.CardsURL)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("project_url")
	json.WriteURI(j, s.ProjectURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectColumn json value to io.Writer.
func (s ProjectColumn) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectColumn json value from io.Reader.
func (s *ProjectColumn) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectColumn from json stream.
func (s *ProjectColumn) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cards_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field CardsURL", err.Error())
				return false
			}
			s.CardsURL = v
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "project_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ProjectURL", err.Error())
				return false
			}
			s.ProjectURL = v
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectOrganizationPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ProjectOrganizationPermission from json stream.
func (s *ProjectOrganizationPermission) ReadJSON(i *json.Iterator) error {
	*s = ProjectOrganizationPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsAddCollaboratorApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		j.WriteObjectField("permission")
		s.Permission.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsAddCollaboratorApplicationJSONRequest json value to io.Writer.
func (s ProjectsAddCollaboratorApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsAddCollaboratorApplicationJSONRequest json value from io.Reader.
func (s *ProjectsAddCollaboratorApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsAddCollaboratorApplicationJSONRequest from json stream.
func (s *ProjectsAddCollaboratorApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(i); err != nil {
				i.ReportError("Field Permission", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsAddCollaboratorApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ProjectsAddCollaboratorApplicationJSONRequestPermission from json stream.
func (s *ProjectsAddCollaboratorApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	*s = ProjectsAddCollaboratorApplicationJSONRequestPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsCreateColumnApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsCreateColumnApplicationJSONRequest json value to io.Writer.
func (s ProjectsCreateColumnApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsCreateColumnApplicationJSONRequest json value from io.Reader.
func (s *ProjectsCreateColumnApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsCreateColumnApplicationJSONRequest from json stream.
func (s *ProjectsCreateColumnApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsCreateForAuthenticatedUserApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsCreateForAuthenticatedUserApplicationJSONRequest json value to io.Writer.
func (s ProjectsCreateForAuthenticatedUserApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsCreateForAuthenticatedUserApplicationJSONRequest json value from io.Reader.
func (s *ProjectsCreateForAuthenticatedUserApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsCreateForAuthenticatedUserApplicationJSONRequest from json stream.
func (s *ProjectsCreateForAuthenticatedUserApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsCreateForOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsCreateForOrgApplicationJSONRequest json value to io.Writer.
func (s ProjectsCreateForOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsCreateForOrgApplicationJSONRequest json value from io.Reader.
func (s *ProjectsCreateForOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsCreateForOrgApplicationJSONRequest from json stream.
func (s *ProjectsCreateForOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsCreateForRepoApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsCreateForRepoApplicationJSONRequest json value to io.Writer.
func (s ProjectsCreateForRepoApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsCreateForRepoApplicationJSONRequest json value from io.Reader.
func (s *ProjectsCreateForRepoApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsCreateForRepoApplicationJSONRequest from json stream.
func (s *ProjectsCreateForRepoApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsDeleteCardForbidden) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Errors != nil {
		more.More()
		j.WriteObjectField("errors")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Errors {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsDeleteCardForbidden json value to io.Writer.
func (s ProjectsDeleteCardForbidden) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsDeleteCardForbidden json value from io.Reader.
func (s *ProjectsDeleteCardForbidden) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsDeleteCardForbidden from json stream.
func (s *ProjectsDeleteCardForbidden) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "errors":
			// Unsupported kind "array" for field "Errors".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsDeleteForbidden) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Errors != nil {
		more.More()
		j.WriteObjectField("errors")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Errors {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsDeleteForbidden json value to io.Writer.
func (s ProjectsDeleteForbidden) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsDeleteForbidden json value from io.Reader.
func (s *ProjectsDeleteForbidden) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsDeleteForbidden from json stream.
func (s *ProjectsDeleteForbidden) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "errors":
			// Unsupported kind "array" for field "Errors".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsMoveCardApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ColumnID.Set {
		more.More()
		j.WriteObjectField("column_id")
		s.ColumnID.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("position")
	j.WriteString(s.Position)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsMoveCardApplicationJSONRequest json value to io.Writer.
func (s ProjectsMoveCardApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsMoveCardApplicationJSONRequest json value from io.Reader.
func (s *ProjectsMoveCardApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsMoveCardApplicationJSONRequest from json stream.
func (s *ProjectsMoveCardApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "column_id":
			s.ColumnID.Reset()
			if err := s.ColumnID.ReadJSON(i); err != nil {
				i.ReportError("Field ColumnID", err.Error())
				return false
			}
			return true
		case "position":
			s.Position = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsMoveCardForbidden) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Errors != nil {
		more.More()
		j.WriteObjectField("errors")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Errors {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsMoveCardForbidden json value to io.Writer.
func (s ProjectsMoveCardForbidden) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsMoveCardForbidden json value from io.Reader.
func (s *ProjectsMoveCardForbidden) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsMoveCardForbidden from json stream.
func (s *ProjectsMoveCardForbidden) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "errors":
			// Unsupported kind "array" for field "Errors".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsMoveCardForbiddenErrorsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Code.Set {
		more.More()
		j.WriteObjectField("code")
		s.Code.WriteJSON(j)
	}

	if s.Field.Set {
		more.More()
		j.WriteObjectField("field")
		s.Field.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsMoveCardForbiddenErrorsItem json value to io.Writer.
func (s ProjectsMoveCardForbiddenErrorsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsMoveCardForbiddenErrorsItem json value from io.Reader.
func (s *ProjectsMoveCardForbiddenErrorsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsMoveCardForbiddenErrorsItem from json stream.
func (s *ProjectsMoveCardForbiddenErrorsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "code":
			s.Code.Reset()
			if err := s.Code.ReadJSON(i); err != nil {
				i.ReportError("Field Code", err.Error())
				return false
			}
			return true
		case "field":
			s.Field.Reset()
			if err := s.Field.ReadJSON(i); err != nil {
				i.ReportError("Field Field", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				i.ReportError("Field Resource", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsMoveColumnApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("position")
	j.WriteString(s.Position)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsMoveColumnApplicationJSONRequest json value to io.Writer.
func (s ProjectsMoveColumnApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsMoveColumnApplicationJSONRequest json value from io.Reader.
func (s *ProjectsMoveColumnApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsMoveColumnApplicationJSONRequest from json stream.
func (s *ProjectsMoveColumnApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "position":
			s.Position = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.OrganizationPermission.Set {
		more.More()
		j.WriteObjectField("organization_permission")
		s.OrganizationPermission.WriteJSON(j)
	}

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	if s.State.Set {
		more.More()
		j.WriteObjectField("state")
		s.State.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsUpdateApplicationJSONRequest json value to io.Writer.
func (s ProjectsUpdateApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsUpdateApplicationJSONRequest json value from io.Reader.
func (s *ProjectsUpdateApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsUpdateApplicationJSONRequest from json stream.
func (s *ProjectsUpdateApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "organization_permission":
			s.OrganizationPermission.Reset()
			if err := s.OrganizationPermission.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationPermission", err.Error())
				return false
			}
			return true
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateApplicationJSONRequestOrganizationPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ProjectsUpdateApplicationJSONRequestOrganizationPermission from json stream.
func (s *ProjectsUpdateApplicationJSONRequestOrganizationPermission) ReadJSON(i *json.Iterator) error {
	*s = ProjectsUpdateApplicationJSONRequestOrganizationPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateCardApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Archived.Set {
		more.More()
		j.WriteObjectField("archived")
		s.Archived.WriteJSON(j)
	}

	if s.Note.Set {
		more.More()
		j.WriteObjectField("note")
		s.Note.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsUpdateCardApplicationJSONRequest json value to io.Writer.
func (s ProjectsUpdateCardApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsUpdateCardApplicationJSONRequest json value from io.Reader.
func (s *ProjectsUpdateCardApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsUpdateCardApplicationJSONRequest from json stream.
func (s *ProjectsUpdateCardApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(i); err != nil {
				i.ReportError("Field Archived", err.Error())
				return false
			}
			return true
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(i); err != nil {
				i.ReportError("Field Note", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateColumnApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsUpdateColumnApplicationJSONRequest json value to io.Writer.
func (s ProjectsUpdateColumnApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsUpdateColumnApplicationJSONRequest json value from io.Reader.
func (s *ProjectsUpdateColumnApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsUpdateColumnApplicationJSONRequest from json stream.
func (s *ProjectsUpdateColumnApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProjectsUpdateForbidden) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Errors != nil {
		more.More()
		j.WriteObjectField("errors")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Errors {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProjectsUpdateForbidden json value to io.Writer.
func (s ProjectsUpdateForbidden) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProjectsUpdateForbidden json value from io.Reader.
func (s *ProjectsUpdateForbidden) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProjectsUpdateForbidden from json stream.
func (s *ProjectsUpdateForbidden) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "errors":
			// Unsupported kind "array" for field "Errors".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranch) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowDeletions.Set {
		more.More()
		j.WriteObjectField("allow_deletions")
		s.AllowDeletions.WriteJSON(j)
	}

	if s.AllowForcePushes.Set {
		more.More()
		j.WriteObjectField("allow_force_pushes")
		s.AllowForcePushes.WriteJSON(j)
	}

	if s.EnforceAdmins.Set {
		more.More()
		j.WriteObjectField("enforce_admins")
		s.EnforceAdmins.WriteJSON(j)
	}

	if s.RequiredConversationResolution.Set {
		more.More()
		j.WriteObjectField("required_conversation_resolution")
		s.RequiredConversationResolution.WriteJSON(j)
	}

	if s.RequiredLinearHistory.Set {
		more.More()
		j.WriteObjectField("required_linear_history")
		s.RequiredLinearHistory.WriteJSON(j)
	}

	if s.RequiredPullRequestReviews.Set {
		more.More()
		j.WriteObjectField("required_pull_request_reviews")
		s.RequiredPullRequestReviews.WriteJSON(j)
	}

	if s.RequiredSignatures.Set {
		more.More()
		j.WriteObjectField("required_signatures")
		s.RequiredSignatures.WriteJSON(j)
	}

	if s.RequiredStatusChecks.Set {
		more.More()
		j.WriteObjectField("required_status_checks")
		s.RequiredStatusChecks.WriteJSON(j)
	}

	if s.Restrictions.Set {
		more.More()
		j.WriteObjectField("restrictions")
		s.Restrictions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranch json value to io.Writer.
func (s ProtectedBranch) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranch json value from io.Reader.
func (s *ProtectedBranch) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranch from json stream.
func (s *ProtectedBranch) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_deletions":
			s.AllowDeletions.Reset()
			if err := s.AllowDeletions.ReadJSON(i); err != nil {
				i.ReportError("Field AllowDeletions", err.Error())
				return false
			}
			return true
		case "allow_force_pushes":
			s.AllowForcePushes.Reset()
			if err := s.AllowForcePushes.ReadJSON(i); err != nil {
				i.ReportError("Field AllowForcePushes", err.Error())
				return false
			}
			return true
		case "enforce_admins":
			s.EnforceAdmins.Reset()
			if err := s.EnforceAdmins.ReadJSON(i); err != nil {
				i.ReportError("Field EnforceAdmins", err.Error())
				return false
			}
			return true
		case "required_conversation_resolution":
			s.RequiredConversationResolution.Reset()
			if err := s.RequiredConversationResolution.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredConversationResolution", err.Error())
				return false
			}
			return true
		case "required_linear_history":
			s.RequiredLinearHistory.Reset()
			if err := s.RequiredLinearHistory.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredLinearHistory", err.Error())
				return false
			}
			return true
		case "required_pull_request_reviews":
			s.RequiredPullRequestReviews.Reset()
			if err := s.RequiredPullRequestReviews.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredPullRequestReviews", err.Error())
				return false
			}
			return true
		case "required_signatures":
			s.RequiredSignatures.Reset()
			if err := s.RequiredSignatures.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredSignatures", err.Error())
				return false
			}
			return true
		case "required_status_checks":
			s.RequiredStatusChecks.Reset()
			if err := s.RequiredStatusChecks.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredStatusChecks", err.Error())
				return false
			}
			return true
		case "restrictions":
			s.Restrictions.Reset()
			if err := s.Restrictions.ReadJSON(i); err != nil {
				i.ReportError("Field Restrictions", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchAdminEnforced) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("enabled")
	j.WriteBool(s.Enabled)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchAdminEnforced json value to io.Writer.
func (s ProtectedBranchAdminEnforced) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchAdminEnforced json value from io.Reader.
func (s *ProtectedBranchAdminEnforced) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchAdminEnforced from json stream.
func (s *ProtectedBranchAdminEnforced) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled = i.ReadBool()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchAllowDeletions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("enabled")
	j.WriteBool(s.Enabled)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchAllowDeletions json value to io.Writer.
func (s ProtectedBranchAllowDeletions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchAllowDeletions json value from io.Reader.
func (s *ProtectedBranchAllowDeletions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchAllowDeletions from json stream.
func (s *ProtectedBranchAllowDeletions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchAllowForcePushes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("enabled")
	j.WriteBool(s.Enabled)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchAllowForcePushes json value to io.Writer.
func (s ProtectedBranchAllowForcePushes) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchAllowForcePushes json value from io.Reader.
func (s *ProtectedBranchAllowForcePushes) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchAllowForcePushes from json stream.
func (s *ProtectedBranchAllowForcePushes) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchEnforceAdmins) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("enabled")
	j.WriteBool(s.Enabled)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchEnforceAdmins json value to io.Writer.
func (s ProtectedBranchEnforceAdmins) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchEnforceAdmins json value from io.Reader.
func (s *ProtectedBranchEnforceAdmins) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchEnforceAdmins from json stream.
func (s *ProtectedBranchEnforceAdmins) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled = i.ReadBool()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchPullRequestReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("dismiss_stale_reviews")
	j.WriteBool(s.DismissStaleReviews)

	if s.DismissalRestrictions.Set {
		more.More()
		j.WriteObjectField("dismissal_restrictions")
		s.DismissalRestrictions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("require_code_owner_reviews")
	j.WriteBool(s.RequireCodeOwnerReviews)

	if s.RequiredApprovingReviewCount.Set {
		more.More()
		j.WriteObjectField("required_approving_review_count")
		s.RequiredApprovingReviewCount.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchPullRequestReview json value to io.Writer.
func (s ProtectedBranchPullRequestReview) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchPullRequestReview json value from io.Reader.
func (s *ProtectedBranchPullRequestReview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchPullRequestReview from json stream.
func (s *ProtectedBranchPullRequestReview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "dismiss_stale_reviews":
			s.DismissStaleReviews = i.ReadBool()
			return i.Error == nil
		case "dismissal_restrictions":
			s.DismissalRestrictions.Reset()
			if err := s.DismissalRestrictions.ReadJSON(i); err != nil {
				i.ReportError("Field DismissalRestrictions", err.Error())
				return false
			}
			return true
		case "require_code_owner_reviews":
			s.RequireCodeOwnerReviews = i.ReadBool()
			return i.Error == nil
		case "required_approving_review_count":
			s.RequiredApprovingReviewCount.Reset()
			if err := s.RequiredApprovingReviewCount.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredApprovingReviewCount", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchPullRequestReviewDismissalRestrictions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Teams != nil {
		more.More()
		j.WriteObjectField("teams")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Teams {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.TeamsURL.Set {
		more.More()
		j.WriteObjectField("teams_url")
		s.TeamsURL.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	if s.Users != nil {
		more.More()
		j.WriteObjectField("users")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Users {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.UsersURL.Set {
		more.More()
		j.WriteObjectField("users_url")
		s.UsersURL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchPullRequestReviewDismissalRestrictions json value to io.Writer.
func (s ProtectedBranchPullRequestReviewDismissalRestrictions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchPullRequestReviewDismissalRestrictions json value from io.Reader.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchPullRequestReviewDismissalRestrictions from json stream.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "teams":
			// Unsupported kind "array" for field "Teams".
			i.Skip()
			return true
		case "teams_url":
			s.TeamsURL.Reset()
			if err := s.TeamsURL.ReadJSON(i); err != nil {
				i.ReportError("Field TeamsURL", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		case "users":
			// Unsupported kind "array" for field "Users".
			i.Skip()
			return true
		case "users_url":
			s.UsersURL.Reset()
			if err := s.UsersURL.ReadJSON(i); err != nil {
				i.ReportError("Field UsersURL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchRequiredConversationResolution) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Enabled.Set {
		more.More()
		j.WriteObjectField("enabled")
		s.Enabled.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchRequiredConversationResolution json value to io.Writer.
func (s ProtectedBranchRequiredConversationResolution) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchRequiredConversationResolution json value from io.Reader.
func (s *ProtectedBranchRequiredConversationResolution) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchRequiredConversationResolution from json stream.
func (s *ProtectedBranchRequiredConversationResolution) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled.Reset()
			if err := s.Enabled.ReadJSON(i); err != nil {
				i.ReportError("Field Enabled", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchRequiredLinearHistory) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("enabled")
	j.WriteBool(s.Enabled)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchRequiredLinearHistory json value to io.Writer.
func (s ProtectedBranchRequiredLinearHistory) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchRequiredLinearHistory json value from io.Reader.
func (s *ProtectedBranchRequiredLinearHistory) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchRequiredLinearHistory from json stream.
func (s *ProtectedBranchRequiredLinearHistory) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchRequiredPullRequestReviews) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DismissStaleReviews.Set {
		more.More()
		j.WriteObjectField("dismiss_stale_reviews")
		s.DismissStaleReviews.WriteJSON(j)
	}

	if s.DismissalRestrictions.Set {
		more.More()
		j.WriteObjectField("dismissal_restrictions")
		s.DismissalRestrictions.WriteJSON(j)
	}

	if s.RequireCodeOwnerReviews.Set {
		more.More()
		j.WriteObjectField("require_code_owner_reviews")
		s.RequireCodeOwnerReviews.WriteJSON(j)
	}

	if s.RequiredApprovingReviewCount.Set {
		more.More()
		j.WriteObjectField("required_approving_review_count")
		s.RequiredApprovingReviewCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchRequiredPullRequestReviews json value to io.Writer.
func (s ProtectedBranchRequiredPullRequestReviews) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchRequiredPullRequestReviews json value from io.Reader.
func (s *ProtectedBranchRequiredPullRequestReviews) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchRequiredPullRequestReviews from json stream.
func (s *ProtectedBranchRequiredPullRequestReviews) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "dismiss_stale_reviews":
			s.DismissStaleReviews.Reset()
			if err := s.DismissStaleReviews.ReadJSON(i); err != nil {
				i.ReportError("Field DismissStaleReviews", err.Error())
				return false
			}
			return true
		case "dismissal_restrictions":
			s.DismissalRestrictions.Reset()
			if err := s.DismissalRestrictions.ReadJSON(i); err != nil {
				i.ReportError("Field DismissalRestrictions", err.Error())
				return false
			}
			return true
		case "require_code_owner_reviews":
			s.RequireCodeOwnerReviews.Reset()
			if err := s.RequireCodeOwnerReviews.ReadJSON(i); err != nil {
				i.ReportError("Field RequireCodeOwnerReviews", err.Error())
				return false
			}
			return true
		case "required_approving_review_count":
			s.RequiredApprovingReviewCount.Reset()
			if err := s.RequiredApprovingReviewCount.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredApprovingReviewCount", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("teams")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Teams {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("teams_url")
	json.WriteURI(j, s.TeamsURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("users")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Users {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("users_url")
	json.WriteURI(j, s.UsersURL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions json value to io.Writer.
func (s ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions json value from io.Reader.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions from json stream.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "teams":
			// Unsupported kind "array" for field "Teams".
			i.Skip()
			return true
		case "teams_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TeamsURL", err.Error())
				return false
			}
			s.TeamsURL = v
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "users":
			// Unsupported kind "array" for field "Users".
			i.Skip()
			return true
		case "users_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field UsersURL", err.Error())
				return false
			}
			s.UsersURL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProtectedBranchRequiredSignatures) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("enabled")
	j.WriteBool(s.Enabled)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ProtectedBranchRequiredSignatures json value to io.Writer.
func (s ProtectedBranchRequiredSignatures) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProtectedBranchRequiredSignatures json value from io.Reader.
func (s *ProtectedBranchRequiredSignatures) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProtectedBranchRequiredSignatures from json stream.
func (s *ProtectedBranchRequiredSignatures) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "enabled":
			s.Enabled = i.ReadBool()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMergeResult) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("merged")
	j.WriteBool(s.Merged)

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestMergeResult json value to io.Writer.
func (s PullRequestMergeResult) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestMergeResult json value from io.Reader.
func (s *PullRequestMergeResult) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestMergeResult from json stream.
func (s *PullRequestMergeResult) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "merged":
			s.Merged = i.ReadBool()
			return i.Error == nil
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMinimal) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("base")
	s.Base.WriteJSON(j)

	more.More()
	j.WriteObjectField("head")
	s.Head.WriteJSON(j)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("number")
	j.WriteInt(s.Number)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestMinimal json value to io.Writer.
func (s PullRequestMinimal) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestMinimal json value from io.Reader.
func (s *PullRequestMinimal) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestMinimal from json stream.
func (s *PullRequestMinimal) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "base":
			if err := s.Base.ReadJSON(i); err != nil {
				i.ReportError("Field Base", err.Error())
				return false
			}
			return true
		case "head":
			if err := s.Head.ReadJSON(i); err != nil {
				i.ReportError("Field Head", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "number":
			s.Number = i.ReadInt()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMinimalBase) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ref")
	j.WriteString(s.Ref)

	more.More()
	j.WriteObjectField("repo")
	s.Repo.WriteJSON(j)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestMinimalBase json value to io.Writer.
func (s PullRequestMinimalBase) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestMinimalBase json value from io.Reader.
func (s *PullRequestMinimalBase) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestMinimalBase from json stream.
func (s *PullRequestMinimalBase) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ref":
			s.Ref = i.ReadString()
			return i.Error == nil
		case "repo":
			if err := s.Repo.ReadJSON(i); err != nil {
				i.ReportError("Field Repo", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMinimalBaseRepo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestMinimalBaseRepo json value to io.Writer.
func (s PullRequestMinimalBaseRepo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestMinimalBaseRepo json value from io.Reader.
func (s *PullRequestMinimalBaseRepo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestMinimalBaseRepo from json stream.
func (s *PullRequestMinimalBaseRepo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMinimalHead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ref")
	j.WriteString(s.Ref)

	more.More()
	j.WriteObjectField("repo")
	s.Repo.WriteJSON(j)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestMinimalHead json value to io.Writer.
func (s PullRequestMinimalHead) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestMinimalHead json value from io.Reader.
func (s *PullRequestMinimalHead) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestMinimalHead from json stream.
func (s *PullRequestMinimalHead) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ref":
			s.Ref = i.ReadString()
			return i.Error == nil
		case "repo":
			if err := s.Repo.ReadJSON(i); err != nil {
				i.ReportError("Field Repo", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestMinimalHeadRepo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestMinimalHeadRepo json value to io.Writer.
func (s PullRequestMinimalHeadRepo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestMinimalHeadRepo json value from io.Reader.
func (s *PullRequestMinimalHeadRepo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestMinimalHeadRepo from json stream.
func (s *PullRequestMinimalHeadRepo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author_association")
	s.AuthorAssociation.WriteJSON(j)

	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	if s.BodyHTML.Set {
		more.More()
		j.WriteObjectField("body_html")
		s.BodyHTML.WriteJSON(j)
	}

	if s.BodyText.Set {
		more.More()
		j.WriteObjectField("body_text")
		s.BodyText.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("commit_id")
	j.WriteString(s.CommitID)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("_links")
	s.Links.WriteJSON(j)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("pull_request_url")
	json.WriteURI(j, s.PullRequestURL)

	more.More()
	j.WriteObjectField("state")
	j.WriteString(s.State)

	if s.SubmittedAt.Set {
		more.More()
		j.WriteObjectField("submitted_at")
		s.SubmittedAt.WriteJSON(j, json.WriteDateTime)
	}

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestReview json value to io.Writer.
func (s PullRequestReview) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestReview json value from io.Reader.
func (s *PullRequestReview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestReview from json stream.
func (s *PullRequestReview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(i); err != nil {
				i.ReportError("Field AuthorAssociation", err.Error())
				return false
			}
			return true
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(i); err != nil {
				i.ReportError("Field BodyHTML", err.Error())
				return false
			}
			return true
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(i); err != nil {
				i.ReportError("Field BodyText", err.Error())
				return false
			}
			return true
		case "commit_id":
			s.CommitID = i.ReadString()
			return i.Error == nil
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "_links":
			if err := s.Links.ReadJSON(i); err != nil {
				i.ReportError("Field Links", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "pull_request_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field PullRequestURL", err.Error())
				return false
			}
			s.PullRequestURL = v
			return true
		case "state":
			s.State = i.ReadString()
			return i.Error == nil
		case "submitted_at":
			s.SubmittedAt.Reset()
			if err := s.SubmittedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field SubmittedAt", err.Error())
				return false
			}
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewComment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author_association")
	s.AuthorAssociation.WriteJSON(j)

	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	if s.BodyHTML.Set {
		more.More()
		j.WriteObjectField("body_html")
		s.BodyHTML.WriteJSON(j)
	}

	if s.BodyText.Set {
		more.More()
		j.WriteObjectField("body_text")
		s.BodyText.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("commit_id")
	j.WriteString(s.CommitID)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("diff_hunk")
	j.WriteString(s.DiffHunk)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.InReplyToID.Set {
		more.More()
		j.WriteObjectField("in_reply_to_id")
		s.InReplyToID.WriteJSON(j)
	}

	if s.Line.Set {
		more.More()
		j.WriteObjectField("line")
		s.Line.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("_links")
	s.Links.WriteJSON(j)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("original_commit_id")
	j.WriteString(s.OriginalCommitID)

	if s.OriginalLine.Set {
		more.More()
		j.WriteObjectField("original_line")
		s.OriginalLine.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("original_position")
	j.WriteInt(s.OriginalPosition)

	if s.OriginalStartLine.Set {
		more.More()
		j.WriteObjectField("original_start_line")
		s.OriginalStartLine.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)

	more.More()
	j.WriteObjectField("position")
	j.WriteInt(s.Position)

	more.More()
	j.WriteObjectField("pull_request_review_id")
	s.PullRequestReviewID.WriteJSON(j)

	more.More()
	j.WriteObjectField("pull_request_url")
	json.WriteURI(j, s.PullRequestURL)

	if s.Reactions.Set {
		more.More()
		j.WriteObjectField("reactions")
		s.Reactions.WriteJSON(j)
	}

	if s.Side.Set {
		more.More()
		j.WriteObjectField("side")
		s.Side.WriteJSON(j)
	}

	if s.StartLine.Set {
		more.More()
		j.WriteObjectField("start_line")
		s.StartLine.WriteJSON(j)
	}

	if s.StartSide.Set {
		more.More()
		j.WriteObjectField("start_side")
		s.StartSide.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestReviewComment json value to io.Writer.
func (s PullRequestReviewComment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestReviewComment json value from io.Reader.
func (s *PullRequestReviewComment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestReviewComment from json stream.
func (s *PullRequestReviewComment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(i); err != nil {
				i.ReportError("Field AuthorAssociation", err.Error())
				return false
			}
			return true
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(i); err != nil {
				i.ReportError("Field BodyHTML", err.Error())
				return false
			}
			return true
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(i); err != nil {
				i.ReportError("Field BodyText", err.Error())
				return false
			}
			return true
		case "commit_id":
			s.CommitID = i.ReadString()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "diff_hunk":
			s.DiffHunk = i.ReadString()
			return i.Error == nil
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "in_reply_to_id":
			s.InReplyToID.Reset()
			if err := s.InReplyToID.ReadJSON(i); err != nil {
				i.ReportError("Field InReplyToID", err.Error())
				return false
			}
			return true
		case "line":
			s.Line.Reset()
			if err := s.Line.ReadJSON(i); err != nil {
				i.ReportError("Field Line", err.Error())
				return false
			}
			return true
		case "_links":
			if err := s.Links.ReadJSON(i); err != nil {
				i.ReportError("Field Links", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "original_commit_id":
			s.OriginalCommitID = i.ReadString()
			return i.Error == nil
		case "original_line":
			s.OriginalLine.Reset()
			if err := s.OriginalLine.ReadJSON(i); err != nil {
				i.ReportError("Field OriginalLine", err.Error())
				return false
			}
			return true
		case "original_position":
			s.OriginalPosition = i.ReadInt()
			return i.Error == nil
		case "original_start_line":
			s.OriginalStartLine.Reset()
			if err := s.OriginalStartLine.ReadJSON(i); err != nil {
				i.ReportError("Field OriginalStartLine", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "position":
			s.Position = i.ReadInt()
			return i.Error == nil
		case "pull_request_review_id":
			if err := s.PullRequestReviewID.ReadJSON(i); err != nil {
				i.ReportError("Field PullRequestReviewID", err.Error())
				return false
			}
			return true
		case "pull_request_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field PullRequestURL", err.Error())
				return false
			}
			s.PullRequestURL = v
			return true
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(i); err != nil {
				i.ReportError("Field Reactions", err.Error())
				return false
			}
			return true
		case "side":
			s.Side.Reset()
			if err := s.Side.ReadJSON(i); err != nil {
				i.ReportError("Field Side", err.Error())
				return false
			}
			return true
		case "start_line":
			s.StartLine.Reset()
			if err := s.StartLine.ReadJSON(i); err != nil {
				i.ReportError("Field StartLine", err.Error())
				return false
			}
			return true
		case "start_side":
			s.StartSide.Reset()
			if err := s.StartSide.ReadJSON(i); err != nil {
				i.ReportError("Field StartSide", err.Error())
				return false
			}
			return true
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentLinks) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("html")
	s.HTML.WriteJSON(j)

	more.More()
	j.WriteObjectField("pull_request")
	s.PullRequest.WriteJSON(j)

	more.More()
	j.WriteObjectField("self")
	s.Self.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestReviewCommentLinks json value to io.Writer.
func (s PullRequestReviewCommentLinks) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestReviewCommentLinks json value from io.Reader.
func (s *PullRequestReviewCommentLinks) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestReviewCommentLinks from json stream.
func (s *PullRequestReviewCommentLinks) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html":
			if err := s.HTML.ReadJSON(i); err != nil {
				i.ReportError("Field HTML", err.Error())
				return false
			}
			return true
		case "pull_request":
			if err := s.PullRequest.ReadJSON(i); err != nil {
				i.ReportError("Field PullRequest", err.Error())
				return false
			}
			return true
		case "self":
			if err := s.Self.ReadJSON(i); err != nil {
				i.ReportError("Field Self", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentLinksHTML) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("href")
	json.WriteURI(j, s.Href)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestReviewCommentLinksHTML json value to io.Writer.
func (s PullRequestReviewCommentLinksHTML) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestReviewCommentLinksHTML json value from io.Reader.
func (s *PullRequestReviewCommentLinksHTML) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestReviewCommentLinksHTML from json stream.
func (s *PullRequestReviewCommentLinksHTML) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "href":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field Href", err.Error())
				return false
			}
			s.Href = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentLinksPullRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("href")
	json.WriteURI(j, s.Href)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestReviewCommentLinksPullRequest json value to io.Writer.
func (s PullRequestReviewCommentLinksPullRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestReviewCommentLinksPullRequest json value from io.Reader.
func (s *PullRequestReviewCommentLinksPullRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestReviewCommentLinksPullRequest from json stream.
func (s *PullRequestReviewCommentLinksPullRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "href":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field Href", err.Error())
				return false
			}
			s.Href = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentLinksSelf) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("href")
	json.WriteURI(j, s.Href)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestReviewCommentLinksSelf json value to io.Writer.
func (s PullRequestReviewCommentLinksSelf) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestReviewCommentLinksSelf json value from io.Reader.
func (s *PullRequestReviewCommentLinksSelf) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestReviewCommentLinksSelf from json stream.
func (s *PullRequestReviewCommentLinksSelf) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "href":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field Href", err.Error())
				return false
			}
			s.Href = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentSide) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PullRequestReviewCommentSide from json stream.
func (s *PullRequestReviewCommentSide) ReadJSON(i *json.Iterator) error {
	*s = PullRequestReviewCommentSide(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewCommentStartSide) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PullRequestReviewCommentStartSide from json stream.
func (s *PullRequestReviewCommentStartSide) ReadJSON(i *json.Iterator) error {
	*s = PullRequestReviewCommentStartSide(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewLinks) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("html")
	s.HTML.WriteJSON(j)

	more.More()
	j.WriteObjectField("pull_request")
	s.PullRequest.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestReviewLinks json value to io.Writer.
func (s PullRequestReviewLinks) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestReviewLinks json value from io.Reader.
func (s *PullRequestReviewLinks) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestReviewLinks from json stream.
func (s *PullRequestReviewLinks) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html":
			if err := s.HTML.ReadJSON(i); err != nil {
				i.ReportError("Field HTML", err.Error())
				return false
			}
			return true
		case "pull_request":
			if err := s.PullRequest.ReadJSON(i); err != nil {
				i.ReportError("Field PullRequest", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewLinksHTML) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("href")
	j.WriteString(s.Href)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestReviewLinksHTML json value to io.Writer.
func (s PullRequestReviewLinksHTML) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestReviewLinksHTML json value from io.Reader.
func (s *PullRequestReviewLinksHTML) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestReviewLinksHTML from json stream.
func (s *PullRequestReviewLinksHTML) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "href":
			s.Href = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewLinksPullRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("href")
	j.WriteString(s.Href)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestReviewLinksPullRequest json value to io.Writer.
func (s PullRequestReviewLinksPullRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestReviewLinksPullRequest json value from io.Reader.
func (s *PullRequestReviewLinksPullRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestReviewLinksPullRequest from json stream.
func (s *PullRequestReviewLinksPullRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "href":
			s.Href = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullRequestReviewRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("teams")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Teams {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("users")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Users {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullRequestReviewRequest json value to io.Writer.
func (s PullRequestReviewRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullRequestReviewRequest json value from io.Reader.
func (s *PullRequestReviewRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullRequestReviewRequest from json stream.
func (s *PullRequestReviewRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "teams":
			// Unsupported kind "array" for field "Teams".
			i.Skip()
			return true
		case "users":
			// Unsupported kind "array" for field "Users".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("base")
	j.WriteString(s.Base)

	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	if s.Draft.Set {
		more.More()
		j.WriteObjectField("draft")
		s.Draft.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("head")
	j.WriteString(s.Head)

	if s.Issue.Set {
		more.More()
		j.WriteObjectField("issue")
		s.Issue.WriteJSON(j)
	}

	if s.MaintainerCanModify.Set {
		more.More()
		j.WriteObjectField("maintainer_can_modify")
		s.MaintainerCanModify.WriteJSON(j)
	}

	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsCreateApplicationJSONRequest json value to io.Writer.
func (s PullsCreateApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsCreateApplicationJSONRequest json value from io.Reader.
func (s *PullsCreateApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsCreateApplicationJSONRequest from json stream.
func (s *PullsCreateApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "base":
			s.Base = i.ReadString()
			return i.Error == nil
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "draft":
			s.Draft.Reset()
			if err := s.Draft.ReadJSON(i); err != nil {
				i.ReportError("Field Draft", err.Error())
				return false
			}
			return true
		case "head":
			s.Head = i.ReadString()
			return i.Error == nil
		case "issue":
			s.Issue.Reset()
			if err := s.Issue.ReadJSON(i); err != nil {
				i.ReportError("Field Issue", err.Error())
				return false
			}
			return true
		case "maintainer_can_modify":
			s.MaintainerCanModify.Reset()
			if err := s.MaintainerCanModify.ReadJSON(i); err != nil {
				i.ReportError("Field MaintainerCanModify", err.Error())
				return false
			}
			return true
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReplyForReviewCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsCreateReplyForReviewCommentApplicationJSONRequest json value to io.Writer.
func (s PullsCreateReplyForReviewCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsCreateReplyForReviewCommentApplicationJSONRequest json value from io.Reader.
func (s *PullsCreateReplyForReviewCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsCreateReplyForReviewCommentApplicationJSONRequest from json stream.
func (s *PullsCreateReplyForReviewCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	if s.Comments != nil {
		more.More()
		j.WriteObjectField("comments")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Comments {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.CommitID.Set {
		more.More()
		j.WriteObjectField("commit_id")
		s.CommitID.WriteJSON(j)
	}

	if s.Event.Set {
		more.More()
		j.WriteObjectField("event")
		s.Event.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsCreateReviewApplicationJSONRequest json value to io.Writer.
func (s PullsCreateReviewApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsCreateReviewApplicationJSONRequest json value from io.Reader.
func (s *PullsCreateReviewApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsCreateReviewApplicationJSONRequest from json stream.
func (s *PullsCreateReviewApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "comments":
			// Unsupported kind "array" for field "Comments".
			i.Skip()
			return true
		case "commit_id":
			s.CommitID.Reset()
			if err := s.CommitID.ReadJSON(i); err != nil {
				i.ReportError("Field CommitID", err.Error())
				return false
			}
			return true
		case "event":
			s.Event.Reset()
			if err := s.Event.ReadJSON(i); err != nil {
				i.ReportError("Field Event", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewApplicationJSONRequestCommentsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	if s.Line.Set {
		more.More()
		j.WriteObjectField("line")
		s.Line.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)

	if s.Position.Set {
		more.More()
		j.WriteObjectField("position")
		s.Position.WriteJSON(j)
	}

	if s.Side.Set {
		more.More()
		j.WriteObjectField("side")
		s.Side.WriteJSON(j)
	}

	if s.StartLine.Set {
		more.More()
		j.WriteObjectField("start_line")
		s.StartLine.WriteJSON(j)
	}

	if s.StartSide.Set {
		more.More()
		j.WriteObjectField("start_side")
		s.StartSide.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsCreateReviewApplicationJSONRequestCommentsItem json value to io.Writer.
func (s PullsCreateReviewApplicationJSONRequestCommentsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsCreateReviewApplicationJSONRequestCommentsItem json value from io.Reader.
func (s *PullsCreateReviewApplicationJSONRequestCommentsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsCreateReviewApplicationJSONRequestCommentsItem from json stream.
func (s *PullsCreateReviewApplicationJSONRequestCommentsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "line":
			s.Line.Reset()
			if err := s.Line.ReadJSON(i); err != nil {
				i.ReportError("Field Line", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "position":
			s.Position.Reset()
			if err := s.Position.ReadJSON(i); err != nil {
				i.ReportError("Field Position", err.Error())
				return false
			}
			return true
		case "side":
			s.Side.Reset()
			if err := s.Side.ReadJSON(i); err != nil {
				i.ReportError("Field Side", err.Error())
				return false
			}
			return true
		case "start_line":
			s.StartLine.Reset()
			if err := s.StartLine.ReadJSON(i); err != nil {
				i.ReportError("Field StartLine", err.Error())
				return false
			}
			return true
		case "start_side":
			s.StartSide.Reset()
			if err := s.StartSide.ReadJSON(i); err != nil {
				i.ReportError("Field StartSide", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewApplicationJSONRequestEvent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PullsCreateReviewApplicationJSONRequestEvent from json stream.
func (s *PullsCreateReviewApplicationJSONRequestEvent) ReadJSON(i *json.Iterator) error {
	*s = PullsCreateReviewApplicationJSONRequestEvent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	if s.CommitID.Set {
		more.More()
		j.WriteObjectField("commit_id")
		s.CommitID.WriteJSON(j)
	}

	if s.InReplyTo.Set {
		more.More()
		j.WriteObjectField("in_reply_to")
		s.InReplyTo.WriteJSON(j)
	}

	if s.Line.Set {
		more.More()
		j.WriteObjectField("line")
		s.Line.WriteJSON(j)
	}

	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}

	if s.Position.Set {
		more.More()
		j.WriteObjectField("position")
		s.Position.WriteJSON(j)
	}

	if s.Side.Set {
		more.More()
		j.WriteObjectField("side")
		s.Side.WriteJSON(j)
	}

	if s.StartLine.Set {
		more.More()
		j.WriteObjectField("start_line")
		s.StartLine.WriteJSON(j)
	}

	if s.StartSide.Set {
		more.More()
		j.WriteObjectField("start_side")
		s.StartSide.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsCreateReviewCommentApplicationJSONRequest json value to io.Writer.
func (s PullsCreateReviewCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsCreateReviewCommentApplicationJSONRequest json value from io.Reader.
func (s *PullsCreateReviewCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsCreateReviewCommentApplicationJSONRequest from json stream.
func (s *PullsCreateReviewCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "commit_id":
			s.CommitID.Reset()
			if err := s.CommitID.ReadJSON(i); err != nil {
				i.ReportError("Field CommitID", err.Error())
				return false
			}
			return true
		case "in_reply_to":
			s.InReplyTo.Reset()
			if err := s.InReplyTo.ReadJSON(i); err != nil {
				i.ReportError("Field InReplyTo", err.Error())
				return false
			}
			return true
		case "line":
			s.Line.Reset()
			if err := s.Line.ReadJSON(i); err != nil {
				i.ReportError("Field Line", err.Error())
				return false
			}
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "position":
			s.Position.Reset()
			if err := s.Position.ReadJSON(i); err != nil {
				i.ReportError("Field Position", err.Error())
				return false
			}
			return true
		case "side":
			s.Side.Reset()
			if err := s.Side.ReadJSON(i); err != nil {
				i.ReportError("Field Side", err.Error())
				return false
			}
			return true
		case "start_line":
			s.StartLine.Reset()
			if err := s.StartLine.ReadJSON(i); err != nil {
				i.ReportError("Field StartLine", err.Error())
				return false
			}
			return true
		case "start_side":
			s.StartSide.Reset()
			if err := s.StartSide.ReadJSON(i); err != nil {
				i.ReportError("Field StartSide", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewCommentApplicationJSONRequestSide) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PullsCreateReviewCommentApplicationJSONRequestSide from json stream.
func (s *PullsCreateReviewCommentApplicationJSONRequestSide) ReadJSON(i *json.Iterator) error {
	*s = PullsCreateReviewCommentApplicationJSONRequestSide(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsCreateReviewCommentApplicationJSONRequestStartSide) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PullsCreateReviewCommentApplicationJSONRequestStartSide from json stream.
func (s *PullsCreateReviewCommentApplicationJSONRequestStartSide) ReadJSON(i *json.Iterator) error {
	*s = PullsCreateReviewCommentApplicationJSONRequestStartSide(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsDismissReviewApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Event.Set {
		more.More()
		j.WriteObjectField("event")
		s.Event.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsDismissReviewApplicationJSONRequest json value to io.Writer.
func (s PullsDismissReviewApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsDismissReviewApplicationJSONRequest json value from io.Reader.
func (s *PullsDismissReviewApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsDismissReviewApplicationJSONRequest from json stream.
func (s *PullsDismissReviewApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "event":
			s.Event.Reset()
			if err := s.Event.ReadJSON(i); err != nil {
				i.ReportError("Field Event", err.Error())
				return false
			}
			return true
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsMergeApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CommitMessage.Set {
		more.More()
		j.WriteObjectField("commit_message")
		s.CommitMessage.WriteJSON(j)
	}

	if s.CommitTitle.Set {
		more.More()
		j.WriteObjectField("commit_title")
		s.CommitTitle.WriteJSON(j)
	}

	if s.MergeMethod.Set {
		more.More()
		j.WriteObjectField("merge_method")
		s.MergeMethod.WriteJSON(j)
	}

	if s.Sha.Set {
		more.More()
		j.WriteObjectField("sha")
		s.Sha.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsMergeApplicationJSONRequest json value to io.Writer.
func (s PullsMergeApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsMergeApplicationJSONRequest json value from io.Reader.
func (s *PullsMergeApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsMergeApplicationJSONRequest from json stream.
func (s *PullsMergeApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commit_message":
			s.CommitMessage.Reset()
			if err := s.CommitMessage.ReadJSON(i); err != nil {
				i.ReportError("Field CommitMessage", err.Error())
				return false
			}
			return true
		case "commit_title":
			s.CommitTitle.Reset()
			if err := s.CommitTitle.ReadJSON(i); err != nil {
				i.ReportError("Field CommitTitle", err.Error())
				return false
			}
			return true
		case "merge_method":
			s.MergeMethod.Reset()
			if err := s.MergeMethod.ReadJSON(i); err != nil {
				i.ReportError("Field MergeMethod", err.Error())
				return false
			}
			return true
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(i); err != nil {
				i.ReportError("Field Sha", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsMergeApplicationJSONRequestMergeMethod) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PullsMergeApplicationJSONRequestMergeMethod from json stream.
func (s *PullsMergeApplicationJSONRequestMergeMethod) ReadJSON(i *json.Iterator) error {
	*s = PullsMergeApplicationJSONRequestMergeMethod(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsMergeConflict) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsMergeConflict json value to io.Writer.
func (s PullsMergeConflict) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsMergeConflict json value from io.Reader.
func (s *PullsMergeConflict) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsMergeConflict from json stream.
func (s *PullsMergeConflict) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsMergeMethodNotAllowed) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsMergeMethodNotAllowed json value to io.Writer.
func (s PullsMergeMethodNotAllowed) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsMergeMethodNotAllowed json value from io.Reader.
func (s *PullsMergeMethodNotAllowed) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsMergeMethodNotAllowed from json stream.
func (s *PullsMergeMethodNotAllowed) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsRemoveRequestedReviewersApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("reviewers")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Reviewers {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.TeamReviewers != nil {
		more.More()
		j.WriteObjectField("team_reviewers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TeamReviewers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsRemoveRequestedReviewersApplicationJSONRequest json value to io.Writer.
func (s PullsRemoveRequestedReviewersApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsRemoveRequestedReviewersApplicationJSONRequest json value from io.Reader.
func (s *PullsRemoveRequestedReviewersApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsRemoveRequestedReviewersApplicationJSONRequest from json stream.
func (s *PullsRemoveRequestedReviewersApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "reviewers":
			// Unsupported kind "array" for field "Reviewers".
			i.Skip()
			return true
		case "team_reviewers":
			// Unsupported kind "array" for field "TeamReviewers".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsSubmitReviewApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("event")
	s.Event.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsSubmitReviewApplicationJSONRequest json value to io.Writer.
func (s PullsSubmitReviewApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsSubmitReviewApplicationJSONRequest json value from io.Reader.
func (s *PullsSubmitReviewApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsSubmitReviewApplicationJSONRequest from json stream.
func (s *PullsSubmitReviewApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "event":
			if err := s.Event.ReadJSON(i); err != nil {
				i.ReportError("Field Event", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsSubmitReviewApplicationJSONRequestEvent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PullsSubmitReviewApplicationJSONRequestEvent from json stream.
func (s *PullsSubmitReviewApplicationJSONRequestEvent) ReadJSON(i *json.Iterator) error {
	*s = PullsSubmitReviewApplicationJSONRequestEvent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Base.Set {
		more.More()
		j.WriteObjectField("base")
		s.Base.WriteJSON(j)
	}

	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	if s.MaintainerCanModify.Set {
		more.More()
		j.WriteObjectField("maintainer_can_modify")
		s.MaintainerCanModify.WriteJSON(j)
	}

	if s.State.Set {
		more.More()
		j.WriteObjectField("state")
		s.State.WriteJSON(j)
	}

	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsUpdateApplicationJSONRequest json value to io.Writer.
func (s PullsUpdateApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsUpdateApplicationJSONRequest json value from io.Reader.
func (s *PullsUpdateApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsUpdateApplicationJSONRequest from json stream.
func (s *PullsUpdateApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "base":
			s.Base.Reset()
			if err := s.Base.ReadJSON(i); err != nil {
				i.ReportError("Field Base", err.Error())
				return false
			}
			return true
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "maintainer_can_modify":
			s.MaintainerCanModify.Reset()
			if err := s.MaintainerCanModify.ReadJSON(i); err != nil {
				i.ReportError("Field MaintainerCanModify", err.Error())
				return false
			}
			return true
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateApplicationJSONRequestState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads PullsUpdateApplicationJSONRequestState from json stream.
func (s *PullsUpdateApplicationJSONRequestState) ReadJSON(i *json.Iterator) error {
	*s = PullsUpdateApplicationJSONRequestState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateBranchAccepted) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsUpdateBranchAccepted json value to io.Writer.
func (s PullsUpdateBranchAccepted) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsUpdateBranchAccepted json value from io.Reader.
func (s *PullsUpdateBranchAccepted) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsUpdateBranchAccepted from json stream.
func (s *PullsUpdateBranchAccepted) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateBranchApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ExpectedHeadSha.Set {
		more.More()
		j.WriteObjectField("expected_head_sha")
		s.ExpectedHeadSha.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsUpdateBranchApplicationJSONRequest json value to io.Writer.
func (s PullsUpdateBranchApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsUpdateBranchApplicationJSONRequest json value from io.Reader.
func (s *PullsUpdateBranchApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsUpdateBranchApplicationJSONRequest from json stream.
func (s *PullsUpdateBranchApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expected_head_sha":
			s.ExpectedHeadSha.Reset()
			if err := s.ExpectedHeadSha.ReadJSON(i); err != nil {
				i.ReportError("Field ExpectedHeadSha", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateReviewApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsUpdateReviewApplicationJSONRequest json value to io.Writer.
func (s PullsUpdateReviewApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsUpdateReviewApplicationJSONRequest json value from io.Reader.
func (s *PullsUpdateReviewApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsUpdateReviewApplicationJSONRequest from json stream.
func (s *PullsUpdateReviewApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PullsUpdateReviewCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes PullsUpdateReviewCommentApplicationJSONRequest json value to io.Writer.
func (s PullsUpdateReviewCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PullsUpdateReviewCommentApplicationJSONRequest json value from io.Reader.
func (s *PullsUpdateReviewCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PullsUpdateReviewCommentApplicationJSONRequest from json stream.
func (s *PullsUpdateReviewCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RateLimit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("limit")
	j.WriteInt(s.Limit)

	more.More()
	j.WriteObjectField("remaining")
	j.WriteInt(s.Remaining)

	more.More()
	j.WriteObjectField("reset")
	j.WriteInt(s.Reset)

	more.More()
	j.WriteObjectField("used")
	j.WriteInt(s.Used)

	j.WriteObjectEnd()
}

// WriteJSONTo writes RateLimit json value to io.Writer.
func (s RateLimit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RateLimit json value from io.Reader.
func (s *RateLimit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RateLimit from json stream.
func (s *RateLimit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limit":
			s.Limit = i.ReadInt()
			return i.Error == nil
		case "remaining":
			s.Remaining = i.ReadInt()
			return i.Error == nil
		case "reset":
			s.Reset = i.ReadInt()
			return i.Error == nil
		case "used":
			s.Used = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RateLimitOverview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("rate")
	s.Rate.WriteJSON(j)

	more.More()
	j.WriteObjectField("resources")
	s.Resources.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes RateLimitOverview json value to io.Writer.
func (s RateLimitOverview) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RateLimitOverview json value from io.Reader.
func (s *RateLimitOverview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RateLimitOverview from json stream.
func (s *RateLimitOverview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "rate":
			if err := s.Rate.ReadJSON(i); err != nil {
				i.ReportError("Field Rate", err.Error())
				return false
			}
			return true
		case "resources":
			if err := s.Resources.ReadJSON(i); err != nil {
				i.ReportError("Field Resources", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RateLimitOverviewResources) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ActionsRunnerRegistration.Set {
		more.More()
		j.WriteObjectField("actions_runner_registration")
		s.ActionsRunnerRegistration.WriteJSON(j)
	}

	if s.CodeScanningUpload.Set {
		more.More()
		j.WriteObjectField("code_scanning_upload")
		s.CodeScanningUpload.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("core")
	s.Core.WriteJSON(j)

	if s.Graphql.Set {
		more.More()
		j.WriteObjectField("graphql")
		s.Graphql.WriteJSON(j)
	}

	if s.IntegrationManifest.Set {
		more.More()
		j.WriteObjectField("integration_manifest")
		s.IntegrationManifest.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("search")
	s.Search.WriteJSON(j)

	if s.SourceImport.Set {
		more.More()
		j.WriteObjectField("source_import")
		s.SourceImport.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes RateLimitOverviewResources json value to io.Writer.
func (s RateLimitOverviewResources) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RateLimitOverviewResources json value from io.Reader.
func (s *RateLimitOverviewResources) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RateLimitOverviewResources from json stream.
func (s *RateLimitOverviewResources) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "actions_runner_registration":
			s.ActionsRunnerRegistration.Reset()
			if err := s.ActionsRunnerRegistration.ReadJSON(i); err != nil {
				i.ReportError("Field ActionsRunnerRegistration", err.Error())
				return false
			}
			return true
		case "code_scanning_upload":
			s.CodeScanningUpload.Reset()
			if err := s.CodeScanningUpload.ReadJSON(i); err != nil {
				i.ReportError("Field CodeScanningUpload", err.Error())
				return false
			}
			return true
		case "core":
			if err := s.Core.ReadJSON(i); err != nil {
				i.ReportError("Field Core", err.Error())
				return false
			}
			return true
		case "graphql":
			s.Graphql.Reset()
			if err := s.Graphql.ReadJSON(i); err != nil {
				i.ReportError("Field Graphql", err.Error())
				return false
			}
			return true
		case "integration_manifest":
			s.IntegrationManifest.Reset()
			if err := s.IntegrationManifest.ReadJSON(i); err != nil {
				i.ReportError("Field IntegrationManifest", err.Error())
				return false
			}
			return true
		case "search":
			if err := s.Search.ReadJSON(i); err != nil {
				i.ReportError("Field Search", err.Error())
				return false
			}
			return true
		case "source_import":
			s.SourceImport.Reset()
			if err := s.SourceImport.ReadJSON(i); err != nil {
				i.ReportError("Field SourceImport", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Reaction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Reaction json value to io.Writer.
func (s Reaction) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Reaction json value from io.Reader.
func (s *Reaction) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Reaction from json stream.
func (s *Reaction) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionContent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReactionContent from json stream.
func (s *ReactionContent) ReadJSON(i *json.Iterator) error {
	*s = ReactionContent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionRollup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("confused")
	j.WriteInt(s.Confused)

	more.More()
	j.WriteObjectField("eyes")
	j.WriteInt(s.Eyes)

	more.More()
	j.WriteObjectField("heart")
	j.WriteInt(s.Heart)

	more.More()
	j.WriteObjectField("hooray")
	j.WriteInt(s.Hooray)

	more.More()
	j.WriteObjectField("laugh")
	j.WriteInt(s.Laugh)

	more.More()
	j.WriteObjectField("-1")
	j.WriteInt(s.Minus1)

	more.More()
	j.WriteObjectField("+1")
	j.WriteInt(s.Plus1)

	more.More()
	j.WriteObjectField("rocket")
	j.WriteInt(s.Rocket)

	more.More()
	j.WriteObjectField("total_count")
	j.WriteInt(s.TotalCount)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReactionRollup json value to io.Writer.
func (s ReactionRollup) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReactionRollup json value from io.Reader.
func (s *ReactionRollup) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReactionRollup from json stream.
func (s *ReactionRollup) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "confused":
			s.Confused = i.ReadInt()
			return i.Error == nil
		case "eyes":
			s.Eyes = i.ReadInt()
			return i.Error == nil
		case "heart":
			s.Heart = i.ReadInt()
			return i.Error == nil
		case "hooray":
			s.Hooray = i.ReadInt()
			return i.Error == nil
		case "laugh":
			s.Laugh = i.ReadInt()
			return i.Error == nil
		case "-1":
			s.Minus1 = i.ReadInt()
			return i.Error == nil
		case "+1":
			s.Plus1 = i.ReadInt()
			return i.Error == nil
		case "rocket":
			s.Rocket = i.ReadInt()
			return i.Error == nil
		case "total_count":
			s.TotalCount = i.ReadInt()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForCommitCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReactionsCreateForCommitCommentApplicationJSONRequest json value to io.Writer.
func (s ReactionsCreateForCommitCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReactionsCreateForCommitCommentApplicationJSONRequest json value from io.Reader.
func (s *ReactionsCreateForCommitCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReactionsCreateForCommitCommentApplicationJSONRequest from json stream.
func (s *ReactionsCreateForCommitCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForCommitCommentApplicationJSONRequestContent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReactionsCreateForCommitCommentApplicationJSONRequestContent from json stream.
func (s *ReactionsCreateForCommitCommentApplicationJSONRequestContent) ReadJSON(i *json.Iterator) error {
	*s = ReactionsCreateForCommitCommentApplicationJSONRequestContent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForIssueApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReactionsCreateForIssueApplicationJSONRequest json value to io.Writer.
func (s ReactionsCreateForIssueApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReactionsCreateForIssueApplicationJSONRequest json value from io.Reader.
func (s *ReactionsCreateForIssueApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReactionsCreateForIssueApplicationJSONRequest from json stream.
func (s *ReactionsCreateForIssueApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForIssueApplicationJSONRequestContent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReactionsCreateForIssueApplicationJSONRequestContent from json stream.
func (s *ReactionsCreateForIssueApplicationJSONRequestContent) ReadJSON(i *json.Iterator) error {
	*s = ReactionsCreateForIssueApplicationJSONRequestContent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForIssueCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReactionsCreateForIssueCommentApplicationJSONRequest json value to io.Writer.
func (s ReactionsCreateForIssueCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReactionsCreateForIssueCommentApplicationJSONRequest json value from io.Reader.
func (s *ReactionsCreateForIssueCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReactionsCreateForIssueCommentApplicationJSONRequest from json stream.
func (s *ReactionsCreateForIssueCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForIssueCommentApplicationJSONRequestContent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReactionsCreateForIssueCommentApplicationJSONRequestContent from json stream.
func (s *ReactionsCreateForIssueCommentApplicationJSONRequestContent) ReadJSON(i *json.Iterator) error {
	*s = ReactionsCreateForIssueCommentApplicationJSONRequestContent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest json value to io.Writer.
func (s ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest json value from io.Reader.
func (s *ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest from json stream.
func (s *ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent from json stream.
func (s *ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent) ReadJSON(i *json.Iterator) error {
	*s = ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForReleaseApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReactionsCreateForReleaseApplicationJSONRequest json value to io.Writer.
func (s ReactionsCreateForReleaseApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReactionsCreateForReleaseApplicationJSONRequest json value from io.Reader.
func (s *ReactionsCreateForReleaseApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReactionsCreateForReleaseApplicationJSONRequest from json stream.
func (s *ReactionsCreateForReleaseApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForReleaseApplicationJSONRequestContent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReactionsCreateForReleaseApplicationJSONRequestContent from json stream.
func (s *ReactionsCreateForReleaseApplicationJSONRequestContent) ReadJSON(i *json.Iterator) error {
	*s = ReactionsCreateForReleaseApplicationJSONRequestContent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest json value to io.Writer.
func (s ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest json value from io.Reader.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest from json stream.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent from json stream.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent) ReadJSON(i *json.Iterator) error {
	*s = ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest json value to io.Writer.
func (s ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest json value from io.Reader.
func (s *ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest from json stream.
func (s *ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent from json stream.
func (s *ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent) ReadJSON(i *json.Iterator) error {
	*s = ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest json value to io.Writer.
func (s ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest json value from io.Reader.
func (s *ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest from json stream.
func (s *ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent from json stream.
func (s *ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent) ReadJSON(i *json.Iterator) error {
	*s = ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("content")
	s.Content.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest json value to io.Writer.
func (s ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest json value from io.Reader.
func (s *ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest from json stream.
func (s *ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "content":
			if err := s.Content.ReadJSON(i); err != nil {
				i.ReportError("Field Content", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent from json stream.
func (s *ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent) ReadJSON(i *json.Iterator) error {
	*s = ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReferrerTraffic) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("count")
	j.WriteInt(s.Count)

	more.More()
	j.WriteObjectField("referrer")
	j.WriteString(s.Referrer)

	more.More()
	j.WriteObjectField("uniques")
	j.WriteInt(s.Uniques)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReferrerTraffic json value to io.Writer.
func (s ReferrerTraffic) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReferrerTraffic json value from io.Reader.
func (s *ReferrerTraffic) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReferrerTraffic from json stream.
func (s *ReferrerTraffic) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "count":
			s.Count = i.ReadInt()
			return i.Error == nil
		case "referrer":
			s.Referrer = i.ReadString()
			return i.Error == nil
		case "uniques":
			s.Uniques = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Release) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("assets")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Assets {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("assets_url")
	json.WriteURI(j, s.AssetsURL)

	more.More()
	j.WriteObjectField("author")
	s.Author.WriteJSON(j)

	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	if s.BodyHTML.Set {
		more.More()
		j.WriteObjectField("body_html")
		s.BodyHTML.WriteJSON(j)
	}

	if s.BodyText.Set {
		more.More()
		j.WriteObjectField("body_text")
		s.BodyText.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	if s.DiscussionURL.Set {
		more.More()
		j.WriteObjectField("discussion_url")
		s.DiscussionURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("draft")
	j.WriteBool(s.Draft)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.MentionsCount.Set {
		more.More()
		j.WriteObjectField("mentions_count")
		s.MentionsCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	s.Name.WriteJSON(j)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("prerelease")
	j.WriteBool(s.Prerelease)

	more.More()
	j.WriteObjectField("published_at")
	s.PublishedAt.WriteJSON(j, json.WriteDateTime)

	if s.Reactions.Set {
		more.More()
		j.WriteObjectField("reactions")
		s.Reactions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("tag_name")
	j.WriteString(s.TagName)

	more.More()
	j.WriteObjectField("tarball_url")
	s.TarballURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("target_commitish")
	j.WriteString(s.TargetCommitish)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("upload_url")
	j.WriteString(s.UploadURL)

	more.More()
	j.WriteObjectField("zipball_url")
	s.ZipballURL.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Release json value to io.Writer.
func (s Release) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Release json value from io.Reader.
func (s *Release) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Release from json stream.
func (s *Release) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "assets":
			// Unsupported kind "array" for field "Assets".
			i.Skip()
			return true
		case "assets_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field AssetsURL", err.Error())
				return false
			}
			s.AssetsURL = v
			return true
		case "author":
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(i); err != nil {
				i.ReportError("Field BodyHTML", err.Error())
				return false
			}
			return true
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(i); err != nil {
				i.ReportError("Field BodyText", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "discussion_url":
			s.DiscussionURL.Reset()
			if err := s.DiscussionURL.ReadJSON(i); err != nil {
				i.ReportError("Field DiscussionURL", err.Error())
				return false
			}
			return true
		case "draft":
			s.Draft = i.ReadBool()
			return i.Error == nil
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "mentions_count":
			s.MentionsCount.Reset()
			if err := s.MentionsCount.ReadJSON(i); err != nil {
				i.ReportError("Field MentionsCount", err.Error())
				return false
			}
			return true
		case "name":
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "prerelease":
			s.Prerelease = i.ReadBool()
			return i.Error == nil
		case "published_at":
			if err := s.PublishedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field PublishedAt", err.Error())
				return false
			}
			return true
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(i); err != nil {
				i.ReportError("Field Reactions", err.Error())
				return false
			}
			return true
		case "tag_name":
			s.TagName = i.ReadString()
			return i.Error == nil
		case "tarball_url":
			if err := s.TarballURL.ReadJSON(i); err != nil {
				i.ReportError("Field TarballURL", err.Error())
				return false
			}
			return true
		case "target_commitish":
			s.TargetCommitish = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "upload_url":
			s.UploadURL = i.ReadString()
			return i.Error == nil
		case "zipball_url":
			if err := s.ZipballURL.ReadJSON(i); err != nil {
				i.ReportError("Field ZipballURL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReleaseAsset) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("browser_download_url")
	json.WriteURI(j, s.BrowserDownloadURL)

	more.More()
	j.WriteObjectField("content_type")
	j.WriteString(s.ContentType)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("download_count")
	j.WriteInt(s.DownloadCount)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("label")
	s.Label.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("size")
	j.WriteInt(s.Size)

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	more.More()
	j.WriteObjectField("uploader")
	s.Uploader.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReleaseAsset json value to io.Writer.
func (s ReleaseAsset) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReleaseAsset json value from io.Reader.
func (s *ReleaseAsset) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReleaseAsset from json stream.
func (s *ReleaseAsset) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "browser_download_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field BrowserDownloadURL", err.Error())
				return false
			}
			s.BrowserDownloadURL = v
			return true
		case "content_type":
			s.ContentType = i.ReadString()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "download_count":
			s.DownloadCount = i.ReadInt()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "label":
			if err := s.Label.ReadJSON(i); err != nil {
				i.ReportError("Field Label", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "size":
			s.Size = i.ReadInt()
			return i.Error == nil
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "uploader":
			if err := s.Uploader.ReadJSON(i); err != nil {
				i.ReportError("Field Uploader", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReleaseAssetState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReleaseAssetState from json stream.
func (s *ReleaseAssetState) ReadJSON(i *json.Iterator) error {
	*s = ReleaseAssetState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposAddCollaboratorApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		j.WriteObjectField("permission")
		s.Permission.WriteJSON(j)
	}

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposAddCollaboratorApplicationJSONRequest json value to io.Writer.
func (s ReposAddCollaboratorApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposAddCollaboratorApplicationJSONRequest json value from io.Reader.
func (s *ReposAddCollaboratorApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposAddCollaboratorApplicationJSONRequest from json stream.
func (s *ReposAddCollaboratorApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(i); err != nil {
				i.ReportError("Field Permission", err.Error())
				return false
			}
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposAddCollaboratorApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReposAddCollaboratorApplicationJSONRequestPermission from json stream.
func (s *ReposAddCollaboratorApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	*s = ReposAddCollaboratorApplicationJSONRequestPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateAutolinkApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key_prefix")
	j.WriteString(s.KeyPrefix)

	more.More()
	j.WriteObjectField("url_template")
	j.WriteString(s.URLTemplate)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateAutolinkApplicationJSONRequest json value to io.Writer.
func (s ReposCreateAutolinkApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateAutolinkApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateAutolinkApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateAutolinkApplicationJSONRequest from json stream.
func (s *ReposCreateAutolinkApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key_prefix":
			s.KeyPrefix = i.ReadString()
			return i.Error == nil
		case "url_template":
			s.URLTemplate = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateCommitCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	if s.Line.Set {
		more.More()
		j.WriteObjectField("line")
		s.Line.WriteJSON(j)
	}

	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}

	if s.Position.Set {
		more.More()
		j.WriteObjectField("position")
		s.Position.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateCommitCommentApplicationJSONRequest json value to io.Writer.
func (s ReposCreateCommitCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateCommitCommentApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateCommitCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateCommitCommentApplicationJSONRequest from json stream.
func (s *ReposCreateCommitCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "line":
			s.Line.Reset()
			if err := s.Line.ReadJSON(i); err != nil {
				i.ReportError("Field Line", err.Error())
				return false
			}
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "position":
			s.Position.Reset()
			if err := s.Position.ReadJSON(i); err != nil {
				i.ReportError("Field Position", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateCommitStatusApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Context.Set {
		more.More()
		j.WriteObjectField("context")
		s.Context.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	if s.TargetURL.Set {
		more.More()
		j.WriteObjectField("target_url")
		s.TargetURL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateCommitStatusApplicationJSONRequest json value to io.Writer.
func (s ReposCreateCommitStatusApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateCommitStatusApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateCommitStatusApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateCommitStatusApplicationJSONRequest from json stream.
func (s *ReposCreateCommitStatusApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "context":
			s.Context.Reset()
			if err := s.Context.ReadJSON(i); err != nil {
				i.ReportError("Field Context", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "target_url":
			s.TargetURL.Reset()
			if err := s.TargetURL.ReadJSON(i); err != nil {
				i.ReportError("Field TargetURL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateCommitStatusApplicationJSONRequestState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReposCreateCommitStatusApplicationJSONRequestState from json stream.
func (s *ReposCreateCommitStatusApplicationJSONRequestState) ReadJSON(i *json.Iterator) error {
	*s = ReposCreateCommitStatusApplicationJSONRequestState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDeployKeyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("read_only")
		s.ReadOnly.WriteJSON(j)
	}

	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateDeployKeyApplicationJSONRequest json value to io.Writer.
func (s ReposCreateDeployKeyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateDeployKeyApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateDeployKeyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateDeployKeyApplicationJSONRequest from json stream.
func (s *ReposCreateDeployKeyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "read_only":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDeploymentStatusApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AutoInactive.Set {
		more.More()
		j.WriteObjectField("auto_inactive")
		s.AutoInactive.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.Environment.Set {
		more.More()
		j.WriteObjectField("environment")
		s.Environment.WriteJSON(j)
	}

	if s.EnvironmentURL.Set {
		more.More()
		j.WriteObjectField("environment_url")
		s.EnvironmentURL.WriteJSON(j)
	}

	if s.LogURL.Set {
		more.More()
		j.WriteObjectField("log_url")
		s.LogURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	if s.TargetURL.Set {
		more.More()
		j.WriteObjectField("target_url")
		s.TargetURL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateDeploymentStatusApplicationJSONRequest json value to io.Writer.
func (s ReposCreateDeploymentStatusApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateDeploymentStatusApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateDeploymentStatusApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateDeploymentStatusApplicationJSONRequest from json stream.
func (s *ReposCreateDeploymentStatusApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "auto_inactive":
			s.AutoInactive.Reset()
			if err := s.AutoInactive.ReadJSON(i); err != nil {
				i.ReportError("Field AutoInactive", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "environment":
			s.Environment.Reset()
			if err := s.Environment.ReadJSON(i); err != nil {
				i.ReportError("Field Environment", err.Error())
				return false
			}
			return true
		case "environment_url":
			s.EnvironmentURL.Reset()
			if err := s.EnvironmentURL.ReadJSON(i); err != nil {
				i.ReportError("Field EnvironmentURL", err.Error())
				return false
			}
			return true
		case "log_url":
			s.LogURL.Reset()
			if err := s.LogURL.ReadJSON(i); err != nil {
				i.ReportError("Field LogURL", err.Error())
				return false
			}
			return true
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "target_url":
			s.TargetURL.Reset()
			if err := s.TargetURL.ReadJSON(i); err != nil {
				i.ReportError("Field TargetURL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDeploymentStatusApplicationJSONRequestEnvironment) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReposCreateDeploymentStatusApplicationJSONRequestEnvironment from json stream.
func (s *ReposCreateDeploymentStatusApplicationJSONRequestEnvironment) ReadJSON(i *json.Iterator) error {
	*s = ReposCreateDeploymentStatusApplicationJSONRequestEnvironment(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDeploymentStatusApplicationJSONRequestState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReposCreateDeploymentStatusApplicationJSONRequestState from json stream.
func (s *ReposCreateDeploymentStatusApplicationJSONRequestState) ReadJSON(i *json.Iterator) error {
	*s = ReposCreateDeploymentStatusApplicationJSONRequestState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateDispatchEventApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "client_payload".

	more.More()
	j.WriteObjectField("event_type")
	j.WriteString(s.EventType)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateDispatchEventApplicationJSONRequest json value to io.Writer.
func (s ReposCreateDispatchEventApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateDispatchEventApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateDispatchEventApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateDispatchEventApplicationJSONRequest from json stream.
func (s *ReposCreateDispatchEventApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "client_payload":
			// Unsupported kind "pointer" for field "ClientPayload".
			i.Skip()
			return true
		case "event_type":
			s.EventType = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateForAuthenticatedUserApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowAutoMerge.Set {
		more.More()
		j.WriteObjectField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(j)
	}

	if s.AllowMergeCommit.Set {
		more.More()
		j.WriteObjectField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(j)
	}

	if s.AllowRebaseMerge.Set {
		more.More()
		j.WriteObjectField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(j)
	}

	if s.AllowSquashMerge.Set {
		more.More()
		j.WriteObjectField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(j)
	}

	if s.AutoInit.Set {
		more.More()
		j.WriteObjectField("auto_init")
		s.AutoInit.WriteJSON(j)
	}

	if s.DeleteBranchOnMerge.Set {
		more.More()
		j.WriteObjectField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.GitignoreTemplate.Set {
		more.More()
		j.WriteObjectField("gitignore_template")
		s.GitignoreTemplate.WriteJSON(j)
	}

	if s.HasDownloads.Set {
		more.More()
		j.WriteObjectField("has_downloads")
		s.HasDownloads.WriteJSON(j)
	}

	if s.HasIssues.Set {
		more.More()
		j.WriteObjectField("has_issues")
		s.HasIssues.WriteJSON(j)
	}

	if s.HasProjects.Set {
		more.More()
		j.WriteObjectField("has_projects")
		s.HasProjects.WriteJSON(j)
	}

	if s.HasWiki.Set {
		more.More()
		j.WriteObjectField("has_wiki")
		s.HasWiki.WriteJSON(j)
	}

	if s.Homepage.Set {
		more.More()
		j.WriteObjectField("homepage")
		s.Homepage.WriteJSON(j)
	}

	if s.IsTemplate.Set {
		more.More()
		j.WriteObjectField("is_template")
		s.IsTemplate.WriteJSON(j)
	}

	if s.LicenseTemplate.Set {
		more.More()
		j.WriteObjectField("license_template")
		s.LicenseTemplate.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	if s.TeamID.Set {
		more.More()
		j.WriteObjectField("team_id")
		s.TeamID.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateForAuthenticatedUserApplicationJSONRequest json value to io.Writer.
func (s ReposCreateForAuthenticatedUserApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateForAuthenticatedUserApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateForAuthenticatedUserApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateForAuthenticatedUserApplicationJSONRequest from json stream.
func (s *ReposCreateForAuthenticatedUserApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowAutoMerge", err.Error())
				return false
			}
			return true
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(i); err != nil {
				i.ReportError("Field AllowMergeCommit", err.Error())
				return false
			}
			return true
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowRebaseMerge", err.Error())
				return false
			}
			return true
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSquashMerge", err.Error())
				return false
			}
			return true
		case "auto_init":
			s.AutoInit.Reset()
			if err := s.AutoInit.ReadJSON(i); err != nil {
				i.ReportError("Field AutoInit", err.Error())
				return false
			}
			return true
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(i); err != nil {
				i.ReportError("Field DeleteBranchOnMerge", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "gitignore_template":
			s.GitignoreTemplate.Reset()
			if err := s.GitignoreTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field GitignoreTemplate", err.Error())
				return false
			}
			return true
		case "has_downloads":
			s.HasDownloads.Reset()
			if err := s.HasDownloads.ReadJSON(i); err != nil {
				i.ReportError("Field HasDownloads", err.Error())
				return false
			}
			return true
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(i); err != nil {
				i.ReportError("Field HasIssues", err.Error())
				return false
			}
			return true
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(i); err != nil {
				i.ReportError("Field HasProjects", err.Error())
				return false
			}
			return true
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(i); err != nil {
				i.ReportError("Field HasWiki", err.Error())
				return false
			}
			return true
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(i); err != nil {
				i.ReportError("Field Homepage", err.Error())
				return false
			}
			return true
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IsTemplate", err.Error())
				return false
			}
			return true
		case "license_template":
			s.LicenseTemplate.Reset()
			if err := s.LicenseTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field LicenseTemplate", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		case "team_id":
			s.TeamID.Reset()
			if err := s.TeamID.ReadJSON(i); err != nil {
				i.ReportError("Field TeamID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateForkApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Organization.Set {
		more.More()
		j.WriteObjectField("organization")
		s.Organization.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateForkApplicationJSONRequest json value to io.Writer.
func (s ReposCreateForkApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateForkApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateForkApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateForkApplicationJSONRequest from json stream.
func (s *ReposCreateForkApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "organization":
			s.Organization.Reset()
			if err := s.Organization.ReadJSON(i); err != nil {
				i.ReportError("Field Organization", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowAutoMerge.Set {
		more.More()
		j.WriteObjectField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(j)
	}

	if s.AllowMergeCommit.Set {
		more.More()
		j.WriteObjectField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(j)
	}

	if s.AllowRebaseMerge.Set {
		more.More()
		j.WriteObjectField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(j)
	}

	if s.AllowSquashMerge.Set {
		more.More()
		j.WriteObjectField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(j)
	}

	if s.AutoInit.Set {
		more.More()
		j.WriteObjectField("auto_init")
		s.AutoInit.WriteJSON(j)
	}

	if s.DeleteBranchOnMerge.Set {
		more.More()
		j.WriteObjectField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.GitignoreTemplate.Set {
		more.More()
		j.WriteObjectField("gitignore_template")
		s.GitignoreTemplate.WriteJSON(j)
	}

	if s.HasIssues.Set {
		more.More()
		j.WriteObjectField("has_issues")
		s.HasIssues.WriteJSON(j)
	}

	if s.HasProjects.Set {
		more.More()
		j.WriteObjectField("has_projects")
		s.HasProjects.WriteJSON(j)
	}

	if s.HasWiki.Set {
		more.More()
		j.WriteObjectField("has_wiki")
		s.HasWiki.WriteJSON(j)
	}

	if s.Homepage.Set {
		more.More()
		j.WriteObjectField("homepage")
		s.Homepage.WriteJSON(j)
	}

	if s.IsTemplate.Set {
		more.More()
		j.WriteObjectField("is_template")
		s.IsTemplate.WriteJSON(j)
	}

	if s.LicenseTemplate.Set {
		more.More()
		j.WriteObjectField("license_template")
		s.LicenseTemplate.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	if s.TeamID.Set {
		more.More()
		j.WriteObjectField("team_id")
		s.TeamID.WriteJSON(j)
	}

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateInOrgApplicationJSONRequest json value to io.Writer.
func (s ReposCreateInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateInOrgApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateInOrgApplicationJSONRequest from json stream.
func (s *ReposCreateInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowAutoMerge", err.Error())
				return false
			}
			return true
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(i); err != nil {
				i.ReportError("Field AllowMergeCommit", err.Error())
				return false
			}
			return true
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowRebaseMerge", err.Error())
				return false
			}
			return true
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSquashMerge", err.Error())
				return false
			}
			return true
		case "auto_init":
			s.AutoInit.Reset()
			if err := s.AutoInit.ReadJSON(i); err != nil {
				i.ReportError("Field AutoInit", err.Error())
				return false
			}
			return true
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(i); err != nil {
				i.ReportError("Field DeleteBranchOnMerge", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "gitignore_template":
			s.GitignoreTemplate.Reset()
			if err := s.GitignoreTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field GitignoreTemplate", err.Error())
				return false
			}
			return true
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(i); err != nil {
				i.ReportError("Field HasIssues", err.Error())
				return false
			}
			return true
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(i); err != nil {
				i.ReportError("Field HasProjects", err.Error())
				return false
			}
			return true
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(i); err != nil {
				i.ReportError("Field HasWiki", err.Error())
				return false
			}
			return true
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(i); err != nil {
				i.ReportError("Field Homepage", err.Error())
				return false
			}
			return true
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IsTemplate", err.Error())
				return false
			}
			return true
		case "license_template":
			s.LicenseTemplate.Reset()
			if err := s.LicenseTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field LicenseTemplate", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		case "team_id":
			s.TeamID.Reset()
			if err := s.TeamID.ReadJSON(i); err != nil {
				i.ReportError("Field TeamID", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateInOrgApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReposCreateInOrgApplicationJSONRequestVisibility from json stream.
func (s *ReposCreateInOrgApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	*s = ReposCreateInOrgApplicationJSONRequestVisibility(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateOrUpdateFileContentsApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Author.Set {
		more.More()
		j.WriteObjectField("author")
		s.Author.WriteJSON(j)
	}

	if s.Branch.Set {
		more.More()
		j.WriteObjectField("branch")
		s.Branch.WriteJSON(j)
	}

	if s.Committer.Set {
		more.More()
		j.WriteObjectField("committer")
		s.Committer.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("content")
	j.WriteString(s.Content)

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	if s.Sha.Set {
		more.More()
		j.WriteObjectField("sha")
		s.Sha.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateOrUpdateFileContentsApplicationJSONRequest json value to io.Writer.
func (s ReposCreateOrUpdateFileContentsApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateOrUpdateFileContentsApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateOrUpdateFileContentsApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateOrUpdateFileContentsApplicationJSONRequest from json stream.
func (s *ReposCreateOrUpdateFileContentsApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			s.Author.Reset()
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "branch":
			s.Branch.Reset()
			if err := s.Branch.ReadJSON(i); err != nil {
				i.ReportError("Field Branch", err.Error())
				return false
			}
			return true
		case "committer":
			s.Committer.Reset()
			if err := s.Committer.ReadJSON(i); err != nil {
				i.ReportError("Field Committer", err.Error())
				return false
			}
			return true
		case "content":
			s.Content = i.ReadString()
			return i.Error == nil
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "sha":
			s.Sha.Reset()
			if err := s.Sha.ReadJSON(i); err != nil {
				i.ReportError("Field Sha", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Date.Set {
		more.More()
		j.WriteObjectField("date")
		s.Date.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor json value to io.Writer.
func (s ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor json value from io.Reader.
func (s *ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor from json stream.
func (s *ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(i); err != nil {
				i.ReportError("Field Date", err.Error())
				return false
			}
			return true
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Date.Set {
		more.More()
		j.WriteObjectField("date")
		s.Date.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter json value to io.Writer.
func (s ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter json value from io.Reader.
func (s *ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter from json stream.
func (s *ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "date":
			s.Date.Reset()
			if err := s.Date.ReadJSON(i); err != nil {
				i.ReportError("Field Date", err.Error())
				return false
			}
			return true
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreatePagesSiteApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("source")
	s.Source.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreatePagesSiteApplicationJSONRequest json value to io.Writer.
func (s ReposCreatePagesSiteApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreatePagesSiteApplicationJSONRequest json value from io.Reader.
func (s *ReposCreatePagesSiteApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreatePagesSiteApplicationJSONRequest from json stream.
func (s *ReposCreatePagesSiteApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "source":
			if err := s.Source.ReadJSON(i); err != nil {
				i.ReportError("Field Source", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreatePagesSiteApplicationJSONRequestSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("branch")
	j.WriteString(s.Branch)

	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreatePagesSiteApplicationJSONRequestSource json value to io.Writer.
func (s ReposCreatePagesSiteApplicationJSONRequestSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreatePagesSiteApplicationJSONRequestSource json value from io.Reader.
func (s *ReposCreatePagesSiteApplicationJSONRequestSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreatePagesSiteApplicationJSONRequestSource from json stream.
func (s *ReposCreatePagesSiteApplicationJSONRequestSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "branch":
			s.Branch = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreatePagesSiteApplicationJSONRequestSourcePath) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReposCreatePagesSiteApplicationJSONRequestSourcePath from json stream.
func (s *ReposCreatePagesSiteApplicationJSONRequestSourcePath) ReadJSON(i *json.Iterator) error {
	*s = ReposCreatePagesSiteApplicationJSONRequestSourcePath(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateReleaseApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	if s.DiscussionCategoryName.Set {
		more.More()
		j.WriteObjectField("discussion_category_name")
		s.DiscussionCategoryName.WriteJSON(j)
	}

	if s.Draft.Set {
		more.More()
		j.WriteObjectField("draft")
		s.Draft.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.Prerelease.Set {
		more.More()
		j.WriteObjectField("prerelease")
		s.Prerelease.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("tag_name")
	j.WriteString(s.TagName)

	if s.TargetCommitish.Set {
		more.More()
		j.WriteObjectField("target_commitish")
		s.TargetCommitish.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateReleaseApplicationJSONRequest json value to io.Writer.
func (s ReposCreateReleaseApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateReleaseApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateReleaseApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateReleaseApplicationJSONRequest from json stream.
func (s *ReposCreateReleaseApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "discussion_category_name":
			s.DiscussionCategoryName.Reset()
			if err := s.DiscussionCategoryName.ReadJSON(i); err != nil {
				i.ReportError("Field DiscussionCategoryName", err.Error())
				return false
			}
			return true
		case "draft":
			s.Draft.Reset()
			if err := s.Draft.ReadJSON(i); err != nil {
				i.ReportError("Field Draft", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "prerelease":
			s.Prerelease.Reset()
			if err := s.Prerelease.ReadJSON(i); err != nil {
				i.ReportError("Field Prerelease", err.Error())
				return false
			}
			return true
		case "tag_name":
			s.TagName = i.ReadString()
			return i.Error == nil
		case "target_commitish":
			s.TargetCommitish.Reset()
			if err := s.TargetCommitish.ReadJSON(i); err != nil {
				i.ReportError("Field TargetCommitish", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposCreateUsingTemplateApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.IncludeAllBranches.Set {
		more.More()
		j.WriteObjectField("include_all_branches")
		s.IncludeAllBranches.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.Owner.Set {
		more.More()
		j.WriteObjectField("owner")
		s.Owner.WriteJSON(j)
	}

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposCreateUsingTemplateApplicationJSONRequest json value to io.Writer.
func (s ReposCreateUsingTemplateApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposCreateUsingTemplateApplicationJSONRequest json value from io.Reader.
func (s *ReposCreateUsingTemplateApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposCreateUsingTemplateApplicationJSONRequest from json stream.
func (s *ReposCreateUsingTemplateApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "include_all_branches":
			s.IncludeAllBranches.Reset()
			if err := s.IncludeAllBranches.ReadJSON(i); err != nil {
				i.ReportError("Field IncludeAllBranches", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteFileApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Author.Set {
		more.More()
		j.WriteObjectField("author")
		s.Author.WriteJSON(j)
	}

	if s.Branch.Set {
		more.More()
		j.WriteObjectField("branch")
		s.Branch.WriteJSON(j)
	}

	if s.Committer.Set {
		more.More()
		j.WriteObjectField("committer")
		s.Committer.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposDeleteFileApplicationJSONRequest json value to io.Writer.
func (s ReposDeleteFileApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposDeleteFileApplicationJSONRequest json value from io.Reader.
func (s *ReposDeleteFileApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposDeleteFileApplicationJSONRequest from json stream.
func (s *ReposDeleteFileApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			s.Author.Reset()
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "branch":
			s.Branch.Reset()
			if err := s.Branch.ReadJSON(i); err != nil {
				i.ReportError("Field Branch", err.Error())
				return false
			}
			return true
		case "committer":
			s.Committer.Reset()
			if err := s.Committer.ReadJSON(i); err != nil {
				i.ReportError("Field Committer", err.Error())
				return false
			}
			return true
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteFileApplicationJSONRequestAuthor) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposDeleteFileApplicationJSONRequestAuthor json value to io.Writer.
func (s ReposDeleteFileApplicationJSONRequestAuthor) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposDeleteFileApplicationJSONRequestAuthor json value from io.Reader.
func (s *ReposDeleteFileApplicationJSONRequestAuthor) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposDeleteFileApplicationJSONRequestAuthor from json stream.
func (s *ReposDeleteFileApplicationJSONRequestAuthor) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteFileApplicationJSONRequestCommitter) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposDeleteFileApplicationJSONRequestCommitter json value to io.Writer.
func (s ReposDeleteFileApplicationJSONRequestCommitter) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposDeleteFileApplicationJSONRequestCommitter json value from io.Reader.
func (s *ReposDeleteFileApplicationJSONRequestCommitter) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposDeleteFileApplicationJSONRequestCommitter from json stream.
func (s *ReposDeleteFileApplicationJSONRequestCommitter) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposDeleteForbidden) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposDeleteForbidden json value to io.Writer.
func (s ReposDeleteForbidden) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposDeleteForbidden json value from io.Reader.
func (s *ReposDeleteForbidden) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposDeleteForbidden from json stream.
func (s *ReposDeleteForbidden) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposMergeApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("base")
	j.WriteString(s.Base)

	if s.CommitMessage.Set {
		more.More()
		j.WriteObjectField("commit_message")
		s.CommitMessage.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("head")
	j.WriteString(s.Head)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposMergeApplicationJSONRequest json value to io.Writer.
func (s ReposMergeApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposMergeApplicationJSONRequest json value from io.Reader.
func (s *ReposMergeApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposMergeApplicationJSONRequest from json stream.
func (s *ReposMergeApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "base":
			s.Base = i.ReadString()
			return i.Error == nil
		case "commit_message":
			s.CommitMessage.Reset()
			if err := s.CommitMessage.ReadJSON(i); err != nil {
				i.ReportError("Field CommitMessage", err.Error())
				return false
			}
			return true
		case "head":
			s.Head = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposMergeUpstreamApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("branch")
	j.WriteString(s.Branch)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposMergeUpstreamApplicationJSONRequest json value to io.Writer.
func (s ReposMergeUpstreamApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposMergeUpstreamApplicationJSONRequest json value from io.Reader.
func (s *ReposMergeUpstreamApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposMergeUpstreamApplicationJSONRequest from json stream.
func (s *ReposMergeUpstreamApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "branch":
			s.Branch = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposRenameBranchApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("new_name")
	j.WriteString(s.NewName)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposRenameBranchApplicationJSONRequest json value to io.Writer.
func (s ReposRenameBranchApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposRenameBranchApplicationJSONRequest json value from io.Reader.
func (s *ReposRenameBranchApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposRenameBranchApplicationJSONRequest from json stream.
func (s *ReposRenameBranchApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "new_name":
			s.NewName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposReplaceAllTopicsApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("names")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Names {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposReplaceAllTopicsApplicationJSONRequest json value to io.Writer.
func (s ReposReplaceAllTopicsApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposReplaceAllTopicsApplicationJSONRequest json value from io.Reader.
func (s *ReposReplaceAllTopicsApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposReplaceAllTopicsApplicationJSONRequest from json stream.
func (s *ReposReplaceAllTopicsApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "names":
			// Unsupported kind "array" for field "Names".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposTransferApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("new_owner")
	j.WriteString(s.NewOwner)

	if s.TeamIds != nil {
		more.More()
		j.WriteObjectField("team_ids")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TeamIds {
			more.More()
			j.WriteInt(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposTransferApplicationJSONRequest json value to io.Writer.
func (s ReposTransferApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposTransferApplicationJSONRequest json value from io.Reader.
func (s *ReposTransferApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposTransferApplicationJSONRequest from json stream.
func (s *ReposTransferApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "new_owner":
			s.NewOwner = i.ReadString()
			return i.Error == nil
		case "team_ids":
			// Unsupported kind "array" for field "TeamIds".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowAutoMerge.Set {
		more.More()
		j.WriteObjectField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(j)
	}

	if s.AllowForking.Set {
		more.More()
		j.WriteObjectField("allow_forking")
		s.AllowForking.WriteJSON(j)
	}

	if s.AllowMergeCommit.Set {
		more.More()
		j.WriteObjectField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(j)
	}

	if s.AllowRebaseMerge.Set {
		more.More()
		j.WriteObjectField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(j)
	}

	if s.AllowSquashMerge.Set {
		more.More()
		j.WriteObjectField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(j)
	}

	if s.Archived.Set {
		more.More()
		j.WriteObjectField("archived")
		s.Archived.WriteJSON(j)
	}

	if s.DefaultBranch.Set {
		more.More()
		j.WriteObjectField("default_branch")
		s.DefaultBranch.WriteJSON(j)
	}

	if s.DeleteBranchOnMerge.Set {
		more.More()
		j.WriteObjectField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.HasIssues.Set {
		more.More()
		j.WriteObjectField("has_issues")
		s.HasIssues.WriteJSON(j)
	}

	if s.HasProjects.Set {
		more.More()
		j.WriteObjectField("has_projects")
		s.HasProjects.WriteJSON(j)
	}

	if s.HasWiki.Set {
		more.More()
		j.WriteObjectField("has_wiki")
		s.HasWiki.WriteJSON(j)
	}

	if s.Homepage.Set {
		more.More()
		j.WriteObjectField("homepage")
		s.Homepage.WriteJSON(j)
	}

	if s.IsTemplate.Set {
		more.More()
		j.WriteObjectField("is_template")
		s.IsTemplate.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	if s.SecurityAndAnalysis.Set {
		more.More()
		j.WriteObjectField("security_and_analysis")
		s.SecurityAndAnalysis.WriteJSON(j)
	}

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateApplicationJSONRequest json value to io.Writer.
func (s ReposUpdateApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateApplicationJSONRequest json value from io.Reader.
func (s *ReposUpdateApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateApplicationJSONRequest from json stream.
func (s *ReposUpdateApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowAutoMerge", err.Error())
				return false
			}
			return true
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(i); err != nil {
				i.ReportError("Field AllowForking", err.Error())
				return false
			}
			return true
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(i); err != nil {
				i.ReportError("Field AllowMergeCommit", err.Error())
				return false
			}
			return true
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowRebaseMerge", err.Error())
				return false
			}
			return true
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSquashMerge", err.Error())
				return false
			}
			return true
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(i); err != nil {
				i.ReportError("Field Archived", err.Error())
				return false
			}
			return true
		case "default_branch":
			s.DefaultBranch.Reset()
			if err := s.DefaultBranch.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultBranch", err.Error())
				return false
			}
			return true
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(i); err != nil {
				i.ReportError("Field DeleteBranchOnMerge", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(i); err != nil {
				i.ReportError("Field HasIssues", err.Error())
				return false
			}
			return true
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(i); err != nil {
				i.ReportError("Field HasProjects", err.Error())
				return false
			}
			return true
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(i); err != nil {
				i.ReportError("Field HasWiki", err.Error())
				return false
			}
			return true
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(i); err != nil {
				i.ReportError("Field Homepage", err.Error())
				return false
			}
			return true
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IsTemplate", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		case "security_and_analysis":
			s.SecurityAndAnalysis.Reset()
			if err := s.SecurityAndAnalysis.ReadJSON(i); err != nil {
				i.ReportError("Field SecurityAndAnalysis", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateApplicationJSONRequestSecurityAndAnalysis) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AdvancedSecurity.Set {
		more.More()
		j.WriteObjectField("advanced_security")
		s.AdvancedSecurity.WriteJSON(j)
	}

	if s.SecretScanning.Set {
		more.More()
		j.WriteObjectField("secret_scanning")
		s.SecretScanning.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateApplicationJSONRequestSecurityAndAnalysis json value to io.Writer.
func (s ReposUpdateApplicationJSONRequestSecurityAndAnalysis) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateApplicationJSONRequestSecurityAndAnalysis json value from io.Reader.
func (s *ReposUpdateApplicationJSONRequestSecurityAndAnalysis) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateApplicationJSONRequestSecurityAndAnalysis from json stream.
func (s *ReposUpdateApplicationJSONRequestSecurityAndAnalysis) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "advanced_security":
			s.AdvancedSecurity.Reset()
			if err := s.AdvancedSecurity.ReadJSON(i); err != nil {
				i.ReportError("Field AdvancedSecurity", err.Error())
				return false
			}
			return true
		case "secret_scanning":
			s.SecretScanning.Reset()
			if err := s.SecretScanning.ReadJSON(i); err != nil {
				i.ReportError("Field SecretScanning", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity json value to io.Writer.
func (s ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity json value from io.Reader.
func (s *ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity from json stream.
func (s *ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning json value to io.Writer.
func (s ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning json value from io.Reader.
func (s *ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning from json stream.
func (s *ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReposUpdateApplicationJSONRequestVisibility from json stream.
func (s *ReposUpdateApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	*s = ReposUpdateApplicationJSONRequestVisibility(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateBranchProtectionApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowDeletions.Set {
		more.More()
		j.WriteObjectField("allow_deletions")
		s.AllowDeletions.WriteJSON(j)
	}

	if s.AllowForcePushes.Set {
		more.More()
		j.WriteObjectField("allow_force_pushes")
		s.AllowForcePushes.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("enforce_admins")
	s.EnforceAdmins.WriteJSON(j)

	if s.RequiredConversationResolution.Set {
		more.More()
		j.WriteObjectField("required_conversation_resolution")
		s.RequiredConversationResolution.WriteJSON(j)
	}

	if s.RequiredLinearHistory.Set {
		more.More()
		j.WriteObjectField("required_linear_history")
		s.RequiredLinearHistory.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("required_pull_request_reviews")
	s.RequiredPullRequestReviews.WriteJSON(j)

	more.More()
	j.WriteObjectField("required_status_checks")
	s.RequiredStatusChecks.WriteJSON(j)

	more.More()
	j.WriteObjectField("restrictions")
	s.Restrictions.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateBranchProtectionApplicationJSONRequest json value to io.Writer.
func (s ReposUpdateBranchProtectionApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateBranchProtectionApplicationJSONRequest json value from io.Reader.
func (s *ReposUpdateBranchProtectionApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateBranchProtectionApplicationJSONRequest from json stream.
func (s *ReposUpdateBranchProtectionApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_deletions":
			s.AllowDeletions.Reset()
			if err := s.AllowDeletions.ReadJSON(i); err != nil {
				i.ReportError("Field AllowDeletions", err.Error())
				return false
			}
			return true
		case "allow_force_pushes":
			s.AllowForcePushes.Reset()
			if err := s.AllowForcePushes.ReadJSON(i); err != nil {
				i.ReportError("Field AllowForcePushes", err.Error())
				return false
			}
			return true
		case "enforce_admins":
			if err := s.EnforceAdmins.ReadJSON(i); err != nil {
				i.ReportError("Field EnforceAdmins", err.Error())
				return false
			}
			return true
		case "required_conversation_resolution":
			s.RequiredConversationResolution.Reset()
			if err := s.RequiredConversationResolution.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredConversationResolution", err.Error())
				return false
			}
			return true
		case "required_linear_history":
			s.RequiredLinearHistory.Reset()
			if err := s.RequiredLinearHistory.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredLinearHistory", err.Error())
				return false
			}
			return true
		case "required_pull_request_reviews":
			if err := s.RequiredPullRequestReviews.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredPullRequestReviews", err.Error())
				return false
			}
			return true
		case "required_status_checks":
			if err := s.RequiredStatusChecks.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredStatusChecks", err.Error())
				return false
			}
			return true
		case "restrictions":
			if err := s.Restrictions.ReadJSON(i); err != nil {
				i.ReportError("Field Restrictions", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DismissStaleReviews.Set {
		more.More()
		j.WriteObjectField("dismiss_stale_reviews")
		s.DismissStaleReviews.WriteJSON(j)
	}

	if s.DismissalRestrictions.Set {
		more.More()
		j.WriteObjectField("dismissal_restrictions")
		s.DismissalRestrictions.WriteJSON(j)
	}

	if s.RequireCodeOwnerReviews.Set {
		more.More()
		j.WriteObjectField("require_code_owner_reviews")
		s.RequireCodeOwnerReviews.WriteJSON(j)
	}

	if s.RequiredApprovingReviewCount.Set {
		more.More()
		j.WriteObjectField("required_approving_review_count")
		s.RequiredApprovingReviewCount.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews json value to io.Writer.
func (s ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews json value from io.Reader.
func (s *ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews from json stream.
func (s *ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "dismiss_stale_reviews":
			s.DismissStaleReviews.Reset()
			if err := s.DismissStaleReviews.ReadJSON(i); err != nil {
				i.ReportError("Field DismissStaleReviews", err.Error())
				return false
			}
			return true
		case "dismissal_restrictions":
			s.DismissalRestrictions.Reset()
			if err := s.DismissalRestrictions.ReadJSON(i); err != nil {
				i.ReportError("Field DismissalRestrictions", err.Error())
				return false
			}
			return true
		case "require_code_owner_reviews":
			s.RequireCodeOwnerReviews.Reset()
			if err := s.RequireCodeOwnerReviews.ReadJSON(i); err != nil {
				i.ReportError("Field RequireCodeOwnerReviews", err.Error())
				return false
			}
			return true
		case "required_approving_review_count":
			s.RequiredApprovingReviewCount.Reset()
			if err := s.RequiredApprovingReviewCount.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredApprovingReviewCount", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Teams != nil {
		more.More()
		j.WriteObjectField("teams")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Teams {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Users != nil {
		more.More()
		j.WriteObjectField("users")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Users {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions json value to io.Writer.
func (s ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions json value from io.Reader.
func (s *ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions from json stream.
func (s *ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "teams":
			// Unsupported kind "array" for field "Teams".
			i.Skip()
			return true
		case "users":
			// Unsupported kind "array" for field "Users".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("contexts")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Contexts {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("strict")
	j.WriteBool(s.Strict)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks json value to io.Writer.
func (s ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks json value from io.Reader.
func (s *ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks from json stream.
func (s *ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "contexts":
			// Unsupported kind "array" for field "Contexts".
			i.Skip()
			return true
		case "strict":
			s.Strict = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateBranchProtectionApplicationJSONRequestRestrictions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Apps != nil {
		more.More()
		j.WriteObjectField("apps")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Apps {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("teams")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Teams {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("users")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Users {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateBranchProtectionApplicationJSONRequestRestrictions json value to io.Writer.
func (s ReposUpdateBranchProtectionApplicationJSONRequestRestrictions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateBranchProtectionApplicationJSONRequestRestrictions json value from io.Reader.
func (s *ReposUpdateBranchProtectionApplicationJSONRequestRestrictions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateBranchProtectionApplicationJSONRequestRestrictions from json stream.
func (s *ReposUpdateBranchProtectionApplicationJSONRequestRestrictions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apps":
			// Unsupported kind "array" for field "Apps".
			i.Skip()
			return true
		case "teams":
			// Unsupported kind "array" for field "Teams".
			i.Skip()
			return true
		case "users":
			// Unsupported kind "array" for field "Users".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateCommitCommentApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateCommitCommentApplicationJSONRequest json value to io.Writer.
func (s ReposUpdateCommitCommentApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateCommitCommentApplicationJSONRequest json value from io.Reader.
func (s *ReposUpdateCommitCommentApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateCommitCommentApplicationJSONRequest from json stream.
func (s *ReposUpdateCommitCommentApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateInvitationApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateInvitationApplicationJSONRequest json value to io.Writer.
func (s ReposUpdateInvitationApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateInvitationApplicationJSONRequest json value from io.Reader.
func (s *ReposUpdateInvitationApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateInvitationApplicationJSONRequest from json stream.
func (s *ReposUpdateInvitationApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateInvitationApplicationJSONRequestPermissions) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReposUpdateInvitationApplicationJSONRequestPermissions from json stream.
func (s *ReposUpdateInvitationApplicationJSONRequestPermissions) ReadJSON(i *json.Iterator) error {
	*s = ReposUpdateInvitationApplicationJSONRequestPermissions(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdatePullRequestReviewProtectionApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DismissStaleReviews.Set {
		more.More()
		j.WriteObjectField("dismiss_stale_reviews")
		s.DismissStaleReviews.WriteJSON(j)
	}

	if s.DismissalRestrictions.Set {
		more.More()
		j.WriteObjectField("dismissal_restrictions")
		s.DismissalRestrictions.WriteJSON(j)
	}

	if s.RequireCodeOwnerReviews.Set {
		more.More()
		j.WriteObjectField("require_code_owner_reviews")
		s.RequireCodeOwnerReviews.WriteJSON(j)
	}

	if s.RequiredApprovingReviewCount.Set {
		more.More()
		j.WriteObjectField("required_approving_review_count")
		s.RequiredApprovingReviewCount.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdatePullRequestReviewProtectionApplicationJSONRequest json value to io.Writer.
func (s ReposUpdatePullRequestReviewProtectionApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdatePullRequestReviewProtectionApplicationJSONRequest json value from io.Reader.
func (s *ReposUpdatePullRequestReviewProtectionApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdatePullRequestReviewProtectionApplicationJSONRequest from json stream.
func (s *ReposUpdatePullRequestReviewProtectionApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "dismiss_stale_reviews":
			s.DismissStaleReviews.Reset()
			if err := s.DismissStaleReviews.ReadJSON(i); err != nil {
				i.ReportError("Field DismissStaleReviews", err.Error())
				return false
			}
			return true
		case "dismissal_restrictions":
			s.DismissalRestrictions.Reset()
			if err := s.DismissalRestrictions.ReadJSON(i); err != nil {
				i.ReportError("Field DismissalRestrictions", err.Error())
				return false
			}
			return true
		case "require_code_owner_reviews":
			s.RequireCodeOwnerReviews.Reset()
			if err := s.RequireCodeOwnerReviews.ReadJSON(i); err != nil {
				i.ReportError("Field RequireCodeOwnerReviews", err.Error())
				return false
			}
			return true
		case "required_approving_review_count":
			s.RequiredApprovingReviewCount.Reset()
			if err := s.RequiredApprovingReviewCount.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredApprovingReviewCount", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Teams != nil {
		more.More()
		j.WriteObjectField("teams")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Teams {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Users != nil {
		more.More()
		j.WriteObjectField("users")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Users {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions json value to io.Writer.
func (s ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions json value from io.Reader.
func (s *ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions from json stream.
func (s *ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "teams":
			// Unsupported kind "array" for field "Teams".
			i.Skip()
			return true
		case "users":
			// Unsupported kind "array" for field "Users".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateReleaseApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	if s.DiscussionCategoryName.Set {
		more.More()
		j.WriteObjectField("discussion_category_name")
		s.DiscussionCategoryName.WriteJSON(j)
	}

	if s.Draft.Set {
		more.More()
		j.WriteObjectField("draft")
		s.Draft.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.Prerelease.Set {
		more.More()
		j.WriteObjectField("prerelease")
		s.Prerelease.WriteJSON(j)
	}

	if s.TagName.Set {
		more.More()
		j.WriteObjectField("tag_name")
		s.TagName.WriteJSON(j)
	}

	if s.TargetCommitish.Set {
		more.More()
		j.WriteObjectField("target_commitish")
		s.TargetCommitish.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateReleaseApplicationJSONRequest json value to io.Writer.
func (s ReposUpdateReleaseApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateReleaseApplicationJSONRequest json value from io.Reader.
func (s *ReposUpdateReleaseApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateReleaseApplicationJSONRequest from json stream.
func (s *ReposUpdateReleaseApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "discussion_category_name":
			s.DiscussionCategoryName.Reset()
			if err := s.DiscussionCategoryName.ReadJSON(i); err != nil {
				i.ReportError("Field DiscussionCategoryName", err.Error())
				return false
			}
			return true
		case "draft":
			s.Draft.Reset()
			if err := s.Draft.ReadJSON(i); err != nil {
				i.ReportError("Field Draft", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "prerelease":
			s.Prerelease.Reset()
			if err := s.Prerelease.ReadJSON(i); err != nil {
				i.ReportError("Field Prerelease", err.Error())
				return false
			}
			return true
		case "tag_name":
			s.TagName.Reset()
			if err := s.TagName.ReadJSON(i); err != nil {
				i.ReportError("Field TagName", err.Error())
				return false
			}
			return true
		case "target_commitish":
			s.TargetCommitish.Reset()
			if err := s.TargetCommitish.ReadJSON(i); err != nil {
				i.ReportError("Field TargetCommitish", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateReleaseAssetApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Label.Set {
		more.More()
		j.WriteObjectField("label")
		s.Label.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.State.Set {
		more.More()
		j.WriteObjectField("state")
		s.State.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateReleaseAssetApplicationJSONRequest json value to io.Writer.
func (s ReposUpdateReleaseAssetApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateReleaseAssetApplicationJSONRequest json value from io.Reader.
func (s *ReposUpdateReleaseAssetApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateReleaseAssetApplicationJSONRequest from json stream.
func (s *ReposUpdateReleaseAssetApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "label":
			s.Label.Reset()
			if err := s.Label.ReadJSON(i); err != nil {
				i.ReportError("Field Label", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReposUpdateStatusCheckProtectionApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Contexts != nil {
		more.More()
		j.WriteObjectField("contexts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Contexts {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Strict.Set {
		more.More()
		j.WriteObjectField("strict")
		s.Strict.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReposUpdateStatusCheckProtectionApplicationJSONRequest json value to io.Writer.
func (s ReposUpdateStatusCheckProtectionApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReposUpdateStatusCheckProtectionApplicationJSONRequest json value from io.Reader.
func (s *ReposUpdateStatusCheckProtectionApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReposUpdateStatusCheckProtectionApplicationJSONRequest from json stream.
func (s *ReposUpdateStatusCheckProtectionApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "contexts":
			// Unsupported kind "array" for field "Contexts".
			i.Skip()
			return true
		case "strict":
			s.Strict.Reset()
			if err := s.Strict.ReadJSON(i); err != nil {
				i.ReportError("Field Strict", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Repository) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowAutoMerge.Set {
		more.More()
		j.WriteObjectField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(j)
	}

	if s.AllowForking.Set {
		more.More()
		j.WriteObjectField("allow_forking")
		s.AllowForking.WriteJSON(j)
	}

	if s.AllowMergeCommit.Set {
		more.More()
		j.WriteObjectField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(j)
	}

	if s.AllowRebaseMerge.Set {
		more.More()
		j.WriteObjectField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(j)
	}

	if s.AllowSquashMerge.Set {
		more.More()
		j.WriteObjectField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("archive_url")
	j.WriteString(s.ArchiveURL)

	more.More()
	j.WriteObjectField("archived")
	j.WriteBool(s.Archived)

	more.More()
	j.WriteObjectField("assignees_url")
	j.WriteString(s.AssigneesURL)

	more.More()
	j.WriteObjectField("blobs_url")
	j.WriteString(s.BlobsURL)

	more.More()
	j.WriteObjectField("branches_url")
	j.WriteString(s.BranchesURL)

	more.More()
	j.WriteObjectField("clone_url")
	j.WriteString(s.CloneURL)

	more.More()
	j.WriteObjectField("collaborators_url")
	j.WriteString(s.CollaboratorsURL)

	more.More()
	j.WriteObjectField("comments_url")
	j.WriteString(s.CommentsURL)

	more.More()
	j.WriteObjectField("commits_url")
	j.WriteString(s.CommitsURL)

	more.More()
	j.WriteObjectField("compare_url")
	j.WriteString(s.CompareURL)

	more.More()
	j.WriteObjectField("contents_url")
	j.WriteString(s.ContentsURL)

	more.More()
	j.WriteObjectField("contributors_url")
	json.WriteURI(j, s.ContributorsURL)

	more.More()
	j.WriteObjectField("created_at")
	s.CreatedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("default_branch")
	j.WriteString(s.DefaultBranch)

	if s.DeleteBranchOnMerge.Set {
		more.More()
		j.WriteObjectField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("deployments_url")
	json.WriteURI(j, s.DeploymentsURL)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("disabled")
	j.WriteBool(s.Disabled)

	more.More()
	j.WriteObjectField("downloads_url")
	json.WriteURI(j, s.DownloadsURL)

	more.More()
	j.WriteObjectField("events_url")
	json.WriteURI(j, s.EventsURL)

	more.More()
	j.WriteObjectField("fork")
	j.WriteBool(s.Fork)

	more.More()
	j.WriteObjectField("forks")
	j.WriteInt(s.Forks)

	more.More()
	j.WriteObjectField("forks_count")
	j.WriteInt(s.ForksCount)

	more.More()
	j.WriteObjectField("forks_url")
	json.WriteURI(j, s.ForksURL)

	more.More()
	j.WriteObjectField("full_name")
	j.WriteString(s.FullName)

	more.More()
	j.WriteObjectField("git_commits_url")
	j.WriteString(s.GitCommitsURL)

	more.More()
	j.WriteObjectField("git_refs_url")
	j.WriteString(s.GitRefsURL)

	more.More()
	j.WriteObjectField("git_tags_url")
	j.WriteString(s.GitTagsURL)

	more.More()
	j.WriteObjectField("git_url")
	j.WriteString(s.GitURL)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("has_downloads")
	j.WriteBool(s.HasDownloads)

	more.More()
	j.WriteObjectField("has_issues")
	j.WriteBool(s.HasIssues)

	more.More()
	j.WriteObjectField("has_pages")
	j.WriteBool(s.HasPages)

	more.More()
	j.WriteObjectField("has_projects")
	j.WriteBool(s.HasProjects)

	more.More()
	j.WriteObjectField("has_wiki")
	j.WriteBool(s.HasWiki)

	more.More()
	j.WriteObjectField("homepage")
	s.Homepage.WriteJSON(j)

	more.More()
	j.WriteObjectField("hooks_url")
	json.WriteURI(j, s.HooksURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.IsTemplate.Set {
		more.More()
		j.WriteObjectField("is_template")
		s.IsTemplate.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("issue_comment_url")
	j.WriteString(s.IssueCommentURL)

	more.More()
	j.WriteObjectField("issue_events_url")
	j.WriteString(s.IssueEventsURL)

	more.More()
	j.WriteObjectField("issues_url")
	j.WriteString(s.IssuesURL)

	more.More()
	j.WriteObjectField("keys_url")
	j.WriteString(s.KeysURL)

	more.More()
	j.WriteObjectField("labels_url")
	j.WriteString(s.LabelsURL)

	more.More()
	j.WriteObjectField("language")
	s.Language.WriteJSON(j)

	more.More()
	j.WriteObjectField("languages_url")
	json.WriteURI(j, s.LanguagesURL)

	more.More()
	j.WriteObjectField("license")
	s.License.WriteJSON(j)

	if s.MasterBranch.Set {
		more.More()
		j.WriteObjectField("master_branch")
		s.MasterBranch.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("merges_url")
	json.WriteURI(j, s.MergesURL)

	more.More()
	j.WriteObjectField("milestones_url")
	j.WriteString(s.MilestonesURL)

	more.More()
	j.WriteObjectField("mirror_url")
	s.MirrorURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.NetworkCount.Set {
		more.More()
		j.WriteObjectField("network_count")
		s.NetworkCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("notifications_url")
	j.WriteString(s.NotificationsURL)

	more.More()
	j.WriteObjectField("open_issues")
	j.WriteInt(s.OpenIssues)

	more.More()
	j.WriteObjectField("open_issues_count")
	j.WriteInt(s.OpenIssuesCount)

	if s.Organization.Set {
		more.More()
		j.WriteObjectField("organization")
		s.Organization.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("owner")
	s.Owner.WriteJSON(j)

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("private")
	j.WriteBool(s.Private)

	more.More()
	j.WriteObjectField("pulls_url")
	j.WriteString(s.PullsURL)

	more.More()
	j.WriteObjectField("pushed_at")
	s.PushedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("releases_url")
	j.WriteString(s.ReleasesURL)

	more.More()
	j.WriteObjectField("ssh_url")
	j.WriteString(s.SSHURL)

	more.More()
	j.WriteObjectField("size")
	j.WriteInt(s.Size)

	more.More()
	j.WriteObjectField("stargazers_count")
	j.WriteInt(s.StargazersCount)

	more.More()
	j.WriteObjectField("stargazers_url")
	json.WriteURI(j, s.StargazersURL)

	if s.StarredAt.Set {
		more.More()
		j.WriteObjectField("starred_at")
		s.StarredAt.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("statuses_url")
	j.WriteString(s.StatusesURL)

	if s.SubscribersCount.Set {
		more.More()
		j.WriteObjectField("subscribers_count")
		s.SubscribersCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("subscribers_url")
	json.WriteURI(j, s.SubscribersURL)

	more.More()
	j.WriteObjectField("subscription_url")
	json.WriteURI(j, s.SubscriptionURL)

	more.More()
	j.WriteObjectField("svn_url")
	json.WriteURI(j, s.SvnURL)

	more.More()
	j.WriteObjectField("tags_url")
	json.WriteURI(j, s.TagsURL)

	more.More()
	j.WriteObjectField("teams_url")
	json.WriteURI(j, s.TeamsURL)

	if s.TempCloneToken.Set {
		more.More()
		j.WriteObjectField("temp_clone_token")
		s.TempCloneToken.WriteJSON(j)
	}

	if s.TemplateRepository.Set {
		more.More()
		j.WriteObjectField("template_repository")
		s.TemplateRepository.WriteJSON(j)
	}

	if s.Topics != nil {
		more.More()
		j.WriteObjectField("topics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Topics {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("trees_url")
	j.WriteString(s.TreesURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	s.UpdatedAt.WriteJSON(j, json.WriteDateTime)

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("watchers")
	j.WriteInt(s.Watchers)

	more.More()
	j.WriteObjectField("watchers_count")
	j.WriteInt(s.WatchersCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Repository json value to io.Writer.
func (s Repository) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Repository json value from io.Reader.
func (s *Repository) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Repository from json stream.
func (s *Repository) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowAutoMerge", err.Error())
				return false
			}
			return true
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(i); err != nil {
				i.ReportError("Field AllowForking", err.Error())
				return false
			}
			return true
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(i); err != nil {
				i.ReportError("Field AllowMergeCommit", err.Error())
				return false
			}
			return true
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowRebaseMerge", err.Error())
				return false
			}
			return true
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSquashMerge", err.Error())
				return false
			}
			return true
		case "archive_url":
			s.ArchiveURL = i.ReadString()
			return i.Error == nil
		case "archived":
			s.Archived = i.ReadBool()
			return i.Error == nil
		case "assignees_url":
			s.AssigneesURL = i.ReadString()
			return i.Error == nil
		case "blobs_url":
			s.BlobsURL = i.ReadString()
			return i.Error == nil
		case "branches_url":
			s.BranchesURL = i.ReadString()
			return i.Error == nil
		case "clone_url":
			s.CloneURL = i.ReadString()
			return i.Error == nil
		case "collaborators_url":
			s.CollaboratorsURL = i.ReadString()
			return i.Error == nil
		case "comments_url":
			s.CommentsURL = i.ReadString()
			return i.Error == nil
		case "commits_url":
			s.CommitsURL = i.ReadString()
			return i.Error == nil
		case "compare_url":
			s.CompareURL = i.ReadString()
			return i.Error == nil
		case "contents_url":
			s.ContentsURL = i.ReadString()
			return i.Error == nil
		case "contributors_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ContributorsURL", err.Error())
				return false
			}
			s.ContributorsURL = v
			return true
		case "created_at":
			if err := s.CreatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "default_branch":
			s.DefaultBranch = i.ReadString()
			return i.Error == nil
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(i); err != nil {
				i.ReportError("Field DeleteBranchOnMerge", err.Error())
				return false
			}
			return true
		case "deployments_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DeploymentsURL", err.Error())
				return false
			}
			s.DeploymentsURL = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "disabled":
			s.Disabled = i.ReadBool()
			return i.Error == nil
		case "downloads_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DownloadsURL", err.Error())
				return false
			}
			s.DownloadsURL = v
			return true
		case "events_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			s.EventsURL = v
			return true
		case "fork":
			s.Fork = i.ReadBool()
			return i.Error == nil
		case "forks":
			s.Forks = i.ReadInt()
			return i.Error == nil
		case "forks_count":
			s.ForksCount = i.ReadInt()
			return i.Error == nil
		case "forks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ForksURL", err.Error())
				return false
			}
			s.ForksURL = v
			return true
		case "full_name":
			s.FullName = i.ReadString()
			return i.Error == nil
		case "git_commits_url":
			s.GitCommitsURL = i.ReadString()
			return i.Error == nil
		case "git_refs_url":
			s.GitRefsURL = i.ReadString()
			return i.Error == nil
		case "git_tags_url":
			s.GitTagsURL = i.ReadString()
			return i.Error == nil
		case "git_url":
			s.GitURL = i.ReadString()
			return i.Error == nil
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "has_downloads":
			s.HasDownloads = i.ReadBool()
			return i.Error == nil
		case "has_issues":
			s.HasIssues = i.ReadBool()
			return i.Error == nil
		case "has_pages":
			s.HasPages = i.ReadBool()
			return i.Error == nil
		case "has_projects":
			s.HasProjects = i.ReadBool()
			return i.Error == nil
		case "has_wiki":
			s.HasWiki = i.ReadBool()
			return i.Error == nil
		case "homepage":
			if err := s.Homepage.ReadJSON(i); err != nil {
				i.ReportError("Field Homepage", err.Error())
				return false
			}
			return true
		case "hooks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HooksURL", err.Error())
				return false
			}
			s.HooksURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IsTemplate", err.Error())
				return false
			}
			return true
		case "issue_comment_url":
			s.IssueCommentURL = i.ReadString()
			return i.Error == nil
		case "issue_events_url":
			s.IssueEventsURL = i.ReadString()
			return i.Error == nil
		case "issues_url":
			s.IssuesURL = i.ReadString()
			return i.Error == nil
		case "keys_url":
			s.KeysURL = i.ReadString()
			return i.Error == nil
		case "labels_url":
			s.LabelsURL = i.ReadString()
			return i.Error == nil
		case "language":
			if err := s.Language.ReadJSON(i); err != nil {
				i.ReportError("Field Language", err.Error())
				return false
			}
			return true
		case "languages_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field LanguagesURL", err.Error())
				return false
			}
			s.LanguagesURL = v
			return true
		case "license":
			if err := s.License.ReadJSON(i); err != nil {
				i.ReportError("Field License", err.Error())
				return false
			}
			return true
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(i); err != nil {
				i.ReportError("Field MasterBranch", err.Error())
				return false
			}
			return true
		case "merges_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field MergesURL", err.Error())
				return false
			}
			s.MergesURL = v
			return true
		case "milestones_url":
			s.MilestonesURL = i.ReadString()
			return i.Error == nil
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(i); err != nil {
				i.ReportError("Field MirrorURL", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(i); err != nil {
				i.ReportError("Field NetworkCount", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "notifications_url":
			s.NotificationsURL = i.ReadString()
			return i.Error == nil
		case "open_issues":
			s.OpenIssues = i.ReadInt()
			return i.Error == nil
		case "open_issues_count":
			s.OpenIssuesCount = i.ReadInt()
			return i.Error == nil
		case "organization":
			s.Organization.Reset()
			if err := s.Organization.ReadJSON(i); err != nil {
				i.ReportError("Field Organization", err.Error())
				return false
			}
			return true
		case "owner":
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "private":
			s.Private = i.ReadBool()
			return i.Error == nil
		case "pulls_url":
			s.PullsURL = i.ReadString()
			return i.Error == nil
		case "pushed_at":
			if err := s.PushedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field PushedAt", err.Error())
				return false
			}
			return true
		case "releases_url":
			s.ReleasesURL = i.ReadString()
			return i.Error == nil
		case "ssh_url":
			s.SSHURL = i.ReadString()
			return i.Error == nil
		case "size":
			s.Size = i.ReadInt()
			return i.Error == nil
		case "stargazers_count":
			s.StargazersCount = i.ReadInt()
			return i.Error == nil
		case "stargazers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field StargazersURL", err.Error())
				return false
			}
			s.StargazersURL = v
			return true
		case "starred_at":
			s.StarredAt.Reset()
			if err := s.StarredAt.ReadJSON(i); err != nil {
				i.ReportError("Field StarredAt", err.Error())
				return false
			}
			return true
		case "statuses_url":
			s.StatusesURL = i.ReadString()
			return i.Error == nil
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(i); err != nil {
				i.ReportError("Field SubscribersCount", err.Error())
				return false
			}
			return true
		case "subscribers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscribersURL", err.Error())
				return false
			}
			s.SubscribersURL = v
			return true
		case "subscription_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscriptionURL", err.Error())
				return false
			}
			s.SubscriptionURL = v
			return true
		case "svn_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SvnURL", err.Error())
				return false
			}
			s.SvnURL = v
			return true
		case "tags_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TagsURL", err.Error())
				return false
			}
			s.TagsURL = v
			return true
		case "teams_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TeamsURL", err.Error())
				return false
			}
			s.TeamsURL = v
			return true
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(i); err != nil {
				i.ReportError("Field TempCloneToken", err.Error())
				return false
			}
			return true
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(i); err != nil {
				i.ReportError("Field TemplateRepository", err.Error())
				return false
			}
			return true
		case "topics":
			// Unsupported kind "array" for field "Topics".
			i.Skip()
			return true
		case "trees_url":
			s.TreesURL = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		case "watchers":
			s.Watchers = i.ReadInt()
			return i.Error == nil
		case "watchers_count":
			s.WatchersCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RepositoryCollaboratorPermission) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("permission")
	j.WriteString(s.Permission)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes RepositoryCollaboratorPermission json value to io.Writer.
func (s RepositoryCollaboratorPermission) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RepositoryCollaboratorPermission json value from io.Reader.
func (s *RepositoryCollaboratorPermission) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RepositoryCollaboratorPermission from json stream.
func (s *RepositoryCollaboratorPermission) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permission":
			s.Permission = i.ReadString()
			return i.Error == nil
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RepositoryInvitation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	if s.Expired.Set {
		more.More()
		j.WriteObjectField("expired")
		s.Expired.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("html_url")
	j.WriteString(s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("invitee")
	s.Invitee.WriteJSON(j)

	more.More()
	j.WriteObjectField("inviter")
	s.Inviter.WriteJSON(j)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("permissions")
	s.Permissions.WriteJSON(j)

	more.More()
	j.WriteObjectField("repository")
	s.Repository.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes RepositoryInvitation json value to io.Writer.
func (s RepositoryInvitation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RepositoryInvitation json value from io.Reader.
func (s *RepositoryInvitation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RepositoryInvitation from json stream.
func (s *RepositoryInvitation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "expired":
			s.Expired.Reset()
			if err := s.Expired.ReadJSON(i); err != nil {
				i.ReportError("Field Expired", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "invitee":
			if err := s.Invitee.ReadJSON(i); err != nil {
				i.ReportError("Field Invitee", err.Error())
				return false
			}
			return true
		case "inviter":
			if err := s.Inviter.ReadJSON(i); err != nil {
				i.ReportError("Field Inviter", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "permissions":
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "repository":
			if err := s.Repository.ReadJSON(i); err != nil {
				i.ReportError("Field Repository", err.Error())
				return false
			}
			return true
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RepositoryInvitationPermissions) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads RepositoryInvitationPermissions from json stream.
func (s *RepositoryInvitationPermissions) ReadJSON(i *json.Iterator) error {
	*s = RepositoryInvitationPermissions(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RepositoryPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admin")
	j.WriteBool(s.Admin)

	if s.Maintain.Set {
		more.More()
		j.WriteObjectField("maintain")
		s.Maintain.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("pull")
	j.WriteBool(s.Pull)

	more.More()
	j.WriteObjectField("push")
	j.WriteBool(s.Push)

	if s.Triage.Set {
		more.More()
		j.WriteObjectField("triage")
		s.Triage.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes RepositoryPermissions json value to io.Writer.
func (s RepositoryPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RepositoryPermissions json value from io.Reader.
func (s *RepositoryPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RepositoryPermissions from json stream.
func (s *RepositoryPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admin":
			s.Admin = i.ReadBool()
			return i.Error == nil
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(i); err != nil {
				i.ReportError("Field Maintain", err.Error())
				return false
			}
			return true
		case "pull":
			s.Pull = i.ReadBool()
			return i.Error == nil
		case "push":
			s.Push = i.ReadBool()
			return i.Error == nil
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(i); err != nil {
				i.ReportError("Field Triage", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RepositorySubscription) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("ignored")
	j.WriteBool(s.Ignored)

	more.More()
	j.WriteObjectField("reason")
	s.Reason.WriteJSON(j)

	more.More()
	j.WriteObjectField("repository_url")
	json.WriteURI(j, s.RepositoryURL)

	more.More()
	j.WriteObjectField("subscribed")
	j.WriteBool(s.Subscribed)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes RepositorySubscription json value to io.Writer.
func (s RepositorySubscription) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RepositorySubscription json value from io.Reader.
func (s *RepositorySubscription) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RepositorySubscription from json stream.
func (s *RepositorySubscription) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "ignored":
			s.Ignored = i.ReadBool()
			return i.Error == nil
		case "reason":
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "repository_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field RepositoryURL", err.Error())
				return false
			}
			s.RepositoryURL = v
			return true
		case "subscribed":
			s.Subscribed = i.ReadBool()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RepositoryTemplateRepository) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowAutoMerge.Set {
		more.More()
		j.WriteObjectField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(j)
	}

	if s.AllowMergeCommit.Set {
		more.More()
		j.WriteObjectField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(j)
	}

	if s.AllowRebaseMerge.Set {
		more.More()
		j.WriteObjectField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(j)
	}

	if s.AllowSquashMerge.Set {
		more.More()
		j.WriteObjectField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(j)
	}

	if s.ArchiveURL.Set {
		more.More()
		j.WriteObjectField("archive_url")
		s.ArchiveURL.WriteJSON(j)
	}

	if s.Archived.Set {
		more.More()
		j.WriteObjectField("archived")
		s.Archived.WriteJSON(j)
	}

	if s.AssigneesURL.Set {
		more.More()
		j.WriteObjectField("assignees_url")
		s.AssigneesURL.WriteJSON(j)
	}

	if s.BlobsURL.Set {
		more.More()
		j.WriteObjectField("blobs_url")
		s.BlobsURL.WriteJSON(j)
	}

	if s.BranchesURL.Set {
		more.More()
		j.WriteObjectField("branches_url")
		s.BranchesURL.WriteJSON(j)
	}

	if s.CloneURL.Set {
		more.More()
		j.WriteObjectField("clone_url")
		s.CloneURL.WriteJSON(j)
	}

	if s.CollaboratorsURL.Set {
		more.More()
		j.WriteObjectField("collaborators_url")
		s.CollaboratorsURL.WriteJSON(j)
	}

	if s.CommentsURL.Set {
		more.More()
		j.WriteObjectField("comments_url")
		s.CommentsURL.WriteJSON(j)
	}

	if s.CommitsURL.Set {
		more.More()
		j.WriteObjectField("commits_url")
		s.CommitsURL.WriteJSON(j)
	}

	if s.CompareURL.Set {
		more.More()
		j.WriteObjectField("compare_url")
		s.CompareURL.WriteJSON(j)
	}

	if s.ContentsURL.Set {
		more.More()
		j.WriteObjectField("contents_url")
		s.ContentsURL.WriteJSON(j)
	}

	if s.ContributorsURL.Set {
		more.More()
		j.WriteObjectField("contributors_url")
		s.ContributorsURL.WriteJSON(j)
	}

	if s.CreatedAt.Set {
		more.More()
		j.WriteObjectField("created_at")
		s.CreatedAt.WriteJSON(j)
	}

	if s.DefaultBranch.Set {
		more.More()
		j.WriteObjectField("default_branch")
		s.DefaultBranch.WriteJSON(j)
	}

	if s.DeleteBranchOnMerge.Set {
		more.More()
		j.WriteObjectField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(j)
	}

	if s.DeploymentsURL.Set {
		more.More()
		j.WriteObjectField("deployments_url")
		s.DeploymentsURL.WriteJSON(j)
	}

	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.Disabled.Set {
		more.More()
		j.WriteObjectField("disabled")
		s.Disabled.WriteJSON(j)
	}

	if s.DownloadsURL.Set {
		more.More()
		j.WriteObjectField("downloads_url")
		s.DownloadsURL.WriteJSON(j)
	}

	if s.EventsURL.Set {
		more.More()
		j.WriteObjectField("events_url")
		s.EventsURL.WriteJSON(j)
	}

	if s.Fork.Set {
		more.More()
		j.WriteObjectField("fork")
		s.Fork.WriteJSON(j)
	}

	if s.ForksCount.Set {
		more.More()
		j.WriteObjectField("forks_count")
		s.ForksCount.WriteJSON(j)
	}

	if s.ForksURL.Set {
		more.More()
		j.WriteObjectField("forks_url")
		s.ForksURL.WriteJSON(j)
	}

	if s.FullName.Set {
		more.More()
		j.WriteObjectField("full_name")
		s.FullName.WriteJSON(j)
	}

	if s.GitCommitsURL.Set {
		more.More()
		j.WriteObjectField("git_commits_url")
		s.GitCommitsURL.WriteJSON(j)
	}

	if s.GitRefsURL.Set {
		more.More()
		j.WriteObjectField("git_refs_url")
		s.GitRefsURL.WriteJSON(j)
	}

	if s.GitTagsURL.Set {
		more.More()
		j.WriteObjectField("git_tags_url")
		s.GitTagsURL.WriteJSON(j)
	}

	if s.GitURL.Set {
		more.More()
		j.WriteObjectField("git_url")
		s.GitURL.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.HasDownloads.Set {
		more.More()
		j.WriteObjectField("has_downloads")
		s.HasDownloads.WriteJSON(j)
	}

	if s.HasIssues.Set {
		more.More()
		j.WriteObjectField("has_issues")
		s.HasIssues.WriteJSON(j)
	}

	if s.HasPages.Set {
		more.More()
		j.WriteObjectField("has_pages")
		s.HasPages.WriteJSON(j)
	}

	if s.HasProjects.Set {
		more.More()
		j.WriteObjectField("has_projects")
		s.HasProjects.WriteJSON(j)
	}

	if s.HasWiki.Set {
		more.More()
		j.WriteObjectField("has_wiki")
		s.HasWiki.WriteJSON(j)
	}

	if s.Homepage.Set {
		more.More()
		j.WriteObjectField("homepage")
		s.Homepage.WriteJSON(j)
	}

	if s.HooksURL.Set {
		more.More()
		j.WriteObjectField("hooks_url")
		s.HooksURL.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.IsTemplate.Set {
		more.More()
		j.WriteObjectField("is_template")
		s.IsTemplate.WriteJSON(j)
	}

	if s.IssueCommentURL.Set {
		more.More()
		j.WriteObjectField("issue_comment_url")
		s.IssueCommentURL.WriteJSON(j)
	}

	if s.IssueEventsURL.Set {
		more.More()
		j.WriteObjectField("issue_events_url")
		s.IssueEventsURL.WriteJSON(j)
	}

	if s.IssuesURL.Set {
		more.More()
		j.WriteObjectField("issues_url")
		s.IssuesURL.WriteJSON(j)
	}

	if s.KeysURL.Set {
		more.More()
		j.WriteObjectField("keys_url")
		s.KeysURL.WriteJSON(j)
	}

	if s.LabelsURL.Set {
		more.More()
		j.WriteObjectField("labels_url")
		s.LabelsURL.WriteJSON(j)
	}

	if s.Language.Set {
		more.More()
		j.WriteObjectField("language")
		s.Language.WriteJSON(j)
	}

	if s.LanguagesURL.Set {
		more.More()
		j.WriteObjectField("languages_url")
		s.LanguagesURL.WriteJSON(j)
	}

	if s.MergesURL.Set {
		more.More()
		j.WriteObjectField("merges_url")
		s.MergesURL.WriteJSON(j)
	}

	if s.MilestonesURL.Set {
		more.More()
		j.WriteObjectField("milestones_url")
		s.MilestonesURL.WriteJSON(j)
	}

	if s.MirrorURL.Set {
		more.More()
		j.WriteObjectField("mirror_url")
		s.MirrorURL.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.NetworkCount.Set {
		more.More()
		j.WriteObjectField("network_count")
		s.NetworkCount.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.NotificationsURL.Set {
		more.More()
		j.WriteObjectField("notifications_url")
		s.NotificationsURL.WriteJSON(j)
	}

	if s.OpenIssuesCount.Set {
		more.More()
		j.WriteObjectField("open_issues_count")
		s.OpenIssuesCount.WriteJSON(j)
	}

	if s.Owner.Set {
		more.More()
		j.WriteObjectField("owner")
		s.Owner.WriteJSON(j)
	}

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	if s.PullsURL.Set {
		more.More()
		j.WriteObjectField("pulls_url")
		s.PullsURL.WriteJSON(j)
	}

	if s.PushedAt.Set {
		more.More()
		j.WriteObjectField("pushed_at")
		s.PushedAt.WriteJSON(j)
	}

	if s.ReleasesURL.Set {
		more.More()
		j.WriteObjectField("releases_url")
		s.ReleasesURL.WriteJSON(j)
	}

	if s.SSHURL.Set {
		more.More()
		j.WriteObjectField("ssh_url")
		s.SSHURL.WriteJSON(j)
	}

	if s.Size.Set {
		more.More()
		j.WriteObjectField("size")
		s.Size.WriteJSON(j)
	}

	if s.StargazersCount.Set {
		more.More()
		j.WriteObjectField("stargazers_count")
		s.StargazersCount.WriteJSON(j)
	}

	if s.StargazersURL.Set {
		more.More()
		j.WriteObjectField("stargazers_url")
		s.StargazersURL.WriteJSON(j)
	}

	if s.StatusesURL.Set {
		more.More()
		j.WriteObjectField("statuses_url")
		s.StatusesURL.WriteJSON(j)
	}

	if s.SubscribersCount.Set {
		more.More()
		j.WriteObjectField("subscribers_count")
		s.SubscribersCount.WriteJSON(j)
	}

	if s.SubscribersURL.Set {
		more.More()
		j.WriteObjectField("subscribers_url")
		s.SubscribersURL.WriteJSON(j)
	}

	if s.SubscriptionURL.Set {
		more.More()
		j.WriteObjectField("subscription_url")
		s.SubscriptionURL.WriteJSON(j)
	}

	if s.SvnURL.Set {
		more.More()
		j.WriteObjectField("svn_url")
		s.SvnURL.WriteJSON(j)
	}

	if s.TagsURL.Set {
		more.More()
		j.WriteObjectField("tags_url")
		s.TagsURL.WriteJSON(j)
	}

	if s.TeamsURL.Set {
		more.More()
		j.WriteObjectField("teams_url")
		s.TeamsURL.WriteJSON(j)
	}

	if s.TempCloneToken.Set {
		more.More()
		j.WriteObjectField("temp_clone_token")
		s.TempCloneToken.WriteJSON(j)
	}

	if s.Topics != nil {
		more.More()
		j.WriteObjectField("topics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Topics {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.TreesURL.Set {
		more.More()
		j.WriteObjectField("trees_url")
		s.TreesURL.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	if s.UpdatedAt.Set {
		more.More()
		j.WriteObjectField("updated_at")
		s.UpdatedAt.WriteJSON(j)
	}

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	if s.WatchersCount.Set {
		more.More()
		j.WriteObjectField("watchers_count")
		s.WatchersCount.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes RepositoryTemplateRepository json value to io.Writer.
func (s RepositoryTemplateRepository) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RepositoryTemplateRepository json value from io.Reader.
func (s *RepositoryTemplateRepository) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RepositoryTemplateRepository from json stream.
func (s *RepositoryTemplateRepository) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowAutoMerge", err.Error())
				return false
			}
			return true
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(i); err != nil {
				i.ReportError("Field AllowMergeCommit", err.Error())
				return false
			}
			return true
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowRebaseMerge", err.Error())
				return false
			}
			return true
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSquashMerge", err.Error())
				return false
			}
			return true
		case "archive_url":
			s.ArchiveURL.Reset()
			if err := s.ArchiveURL.ReadJSON(i); err != nil {
				i.ReportError("Field ArchiveURL", err.Error())
				return false
			}
			return true
		case "archived":
			s.Archived.Reset()
			if err := s.Archived.ReadJSON(i); err != nil {
				i.ReportError("Field Archived", err.Error())
				return false
			}
			return true
		case "assignees_url":
			s.AssigneesURL.Reset()
			if err := s.AssigneesURL.ReadJSON(i); err != nil {
				i.ReportError("Field AssigneesURL", err.Error())
				return false
			}
			return true
		case "blobs_url":
			s.BlobsURL.Reset()
			if err := s.BlobsURL.ReadJSON(i); err != nil {
				i.ReportError("Field BlobsURL", err.Error())
				return false
			}
			return true
		case "branches_url":
			s.BranchesURL.Reset()
			if err := s.BranchesURL.ReadJSON(i); err != nil {
				i.ReportError("Field BranchesURL", err.Error())
				return false
			}
			return true
		case "clone_url":
			s.CloneURL.Reset()
			if err := s.CloneURL.ReadJSON(i); err != nil {
				i.ReportError("Field CloneURL", err.Error())
				return false
			}
			return true
		case "collaborators_url":
			s.CollaboratorsURL.Reset()
			if err := s.CollaboratorsURL.ReadJSON(i); err != nil {
				i.ReportError("Field CollaboratorsURL", err.Error())
				return false
			}
			return true
		case "comments_url":
			s.CommentsURL.Reset()
			if err := s.CommentsURL.ReadJSON(i); err != nil {
				i.ReportError("Field CommentsURL", err.Error())
				return false
			}
			return true
		case "commits_url":
			s.CommitsURL.Reset()
			if err := s.CommitsURL.ReadJSON(i); err != nil {
				i.ReportError("Field CommitsURL", err.Error())
				return false
			}
			return true
		case "compare_url":
			s.CompareURL.Reset()
			if err := s.CompareURL.ReadJSON(i); err != nil {
				i.ReportError("Field CompareURL", err.Error())
				return false
			}
			return true
		case "contents_url":
			s.ContentsURL.Reset()
			if err := s.ContentsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ContentsURL", err.Error())
				return false
			}
			return true
		case "contributors_url":
			s.ContributorsURL.Reset()
			if err := s.ContributorsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ContributorsURL", err.Error())
				return false
			}
			return true
		case "created_at":
			s.CreatedAt.Reset()
			if err := s.CreatedAt.ReadJSON(i); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "default_branch":
			s.DefaultBranch.Reset()
			if err := s.DefaultBranch.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultBranch", err.Error())
				return false
			}
			return true
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(i); err != nil {
				i.ReportError("Field DeleteBranchOnMerge", err.Error())
				return false
			}
			return true
		case "deployments_url":
			s.DeploymentsURL.Reset()
			if err := s.DeploymentsURL.ReadJSON(i); err != nil {
				i.ReportError("Field DeploymentsURL", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "disabled":
			s.Disabled.Reset()
			if err := s.Disabled.ReadJSON(i); err != nil {
				i.ReportError("Field Disabled", err.Error())
				return false
			}
			return true
		case "downloads_url":
			s.DownloadsURL.Reset()
			if err := s.DownloadsURL.ReadJSON(i); err != nil {
				i.ReportError("Field DownloadsURL", err.Error())
				return false
			}
			return true
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			return true
		case "fork":
			s.Fork.Reset()
			if err := s.Fork.ReadJSON(i); err != nil {
				i.ReportError("Field Fork", err.Error())
				return false
			}
			return true
		case "forks_count":
			s.ForksCount.Reset()
			if err := s.ForksCount.ReadJSON(i); err != nil {
				i.ReportError("Field ForksCount", err.Error())
				return false
			}
			return true
		case "forks_url":
			s.ForksURL.Reset()
			if err := s.ForksURL.ReadJSON(i); err != nil {
				i.ReportError("Field ForksURL", err.Error())
				return false
			}
			return true
		case "full_name":
			s.FullName.Reset()
			if err := s.FullName.ReadJSON(i); err != nil {
				i.ReportError("Field FullName", err.Error())
				return false
			}
			return true
		case "git_commits_url":
			s.GitCommitsURL.Reset()
			if err := s.GitCommitsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitCommitsURL", err.Error())
				return false
			}
			return true
		case "git_refs_url":
			s.GitRefsURL.Reset()
			if err := s.GitRefsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitRefsURL", err.Error())
				return false
			}
			return true
		case "git_tags_url":
			s.GitTagsURL.Reset()
			if err := s.GitTagsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitTagsURL", err.Error())
				return false
			}
			return true
		case "git_url":
			s.GitURL.Reset()
			if err := s.GitURL.ReadJSON(i); err != nil {
				i.ReportError("Field GitURL", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "has_downloads":
			s.HasDownloads.Reset()
			if err := s.HasDownloads.ReadJSON(i); err != nil {
				i.ReportError("Field HasDownloads", err.Error())
				return false
			}
			return true
		case "has_issues":
			s.HasIssues.Reset()
			if err := s.HasIssues.ReadJSON(i); err != nil {
				i.ReportError("Field HasIssues", err.Error())
				return false
			}
			return true
		case "has_pages":
			s.HasPages.Reset()
			if err := s.HasPages.ReadJSON(i); err != nil {
				i.ReportError("Field HasPages", err.Error())
				return false
			}
			return true
		case "has_projects":
			s.HasProjects.Reset()
			if err := s.HasProjects.ReadJSON(i); err != nil {
				i.ReportError("Field HasProjects", err.Error())
				return false
			}
			return true
		case "has_wiki":
			s.HasWiki.Reset()
			if err := s.HasWiki.ReadJSON(i); err != nil {
				i.ReportError("Field HasWiki", err.Error())
				return false
			}
			return true
		case "homepage":
			s.Homepage.Reset()
			if err := s.Homepage.ReadJSON(i); err != nil {
				i.ReportError("Field Homepage", err.Error())
				return false
			}
			return true
		case "hooks_url":
			s.HooksURL.Reset()
			if err := s.HooksURL.ReadJSON(i); err != nil {
				i.ReportError("Field HooksURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IsTemplate", err.Error())
				return false
			}
			return true
		case "issue_comment_url":
			s.IssueCommentURL.Reset()
			if err := s.IssueCommentURL.ReadJSON(i); err != nil {
				i.ReportError("Field IssueCommentURL", err.Error())
				return false
			}
			return true
		case "issue_events_url":
			s.IssueEventsURL.Reset()
			if err := s.IssueEventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field IssueEventsURL", err.Error())
				return false
			}
			return true
		case "issues_url":
			s.IssuesURL.Reset()
			if err := s.IssuesURL.ReadJSON(i); err != nil {
				i.ReportError("Field IssuesURL", err.Error())
				return false
			}
			return true
		case "keys_url":
			s.KeysURL.Reset()
			if err := s.KeysURL.ReadJSON(i); err != nil {
				i.ReportError("Field KeysURL", err.Error())
				return false
			}
			return true
		case "labels_url":
			s.LabelsURL.Reset()
			if err := s.LabelsURL.ReadJSON(i); err != nil {
				i.ReportError("Field LabelsURL", err.Error())
				return false
			}
			return true
		case "language":
			s.Language.Reset()
			if err := s.Language.ReadJSON(i); err != nil {
				i.ReportError("Field Language", err.Error())
				return false
			}
			return true
		case "languages_url":
			s.LanguagesURL.Reset()
			if err := s.LanguagesURL.ReadJSON(i); err != nil {
				i.ReportError("Field LanguagesURL", err.Error())
				return false
			}
			return true
		case "merges_url":
			s.MergesURL.Reset()
			if err := s.MergesURL.ReadJSON(i); err != nil {
				i.ReportError("Field MergesURL", err.Error())
				return false
			}
			return true
		case "milestones_url":
			s.MilestonesURL.Reset()
			if err := s.MilestonesURL.ReadJSON(i); err != nil {
				i.ReportError("Field MilestonesURL", err.Error())
				return false
			}
			return true
		case "mirror_url":
			s.MirrorURL.Reset()
			if err := s.MirrorURL.ReadJSON(i); err != nil {
				i.ReportError("Field MirrorURL", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(i); err != nil {
				i.ReportError("Field NetworkCount", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "notifications_url":
			s.NotificationsURL.Reset()
			if err := s.NotificationsURL.ReadJSON(i); err != nil {
				i.ReportError("Field NotificationsURL", err.Error())
				return false
			}
			return true
		case "open_issues_count":
			s.OpenIssuesCount.Reset()
			if err := s.OpenIssuesCount.ReadJSON(i); err != nil {
				i.ReportError("Field OpenIssuesCount", err.Error())
				return false
			}
			return true
		case "owner":
			s.Owner.Reset()
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		case "pulls_url":
			s.PullsURL.Reset()
			if err := s.PullsURL.ReadJSON(i); err != nil {
				i.ReportError("Field PullsURL", err.Error())
				return false
			}
			return true
		case "pushed_at":
			s.PushedAt.Reset()
			if err := s.PushedAt.ReadJSON(i); err != nil {
				i.ReportError("Field PushedAt", err.Error())
				return false
			}
			return true
		case "releases_url":
			s.ReleasesURL.Reset()
			if err := s.ReleasesURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReleasesURL", err.Error())
				return false
			}
			return true
		case "ssh_url":
			s.SSHURL.Reset()
			if err := s.SSHURL.ReadJSON(i); err != nil {
				i.ReportError("Field SSHURL", err.Error())
				return false
			}
			return true
		case "size":
			s.Size.Reset()
			if err := s.Size.ReadJSON(i); err != nil {
				i.ReportError("Field Size", err.Error())
				return false
			}
			return true
		case "stargazers_count":
			s.StargazersCount.Reset()
			if err := s.StargazersCount.ReadJSON(i); err != nil {
				i.ReportError("Field StargazersCount", err.Error())
				return false
			}
			return true
		case "stargazers_url":
			s.StargazersURL.Reset()
			if err := s.StargazersURL.ReadJSON(i); err != nil {
				i.ReportError("Field StargazersURL", err.Error())
				return false
			}
			return true
		case "statuses_url":
			s.StatusesURL.Reset()
			if err := s.StatusesURL.ReadJSON(i); err != nil {
				i.ReportError("Field StatusesURL", err.Error())
				return false
			}
			return true
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(i); err != nil {
				i.ReportError("Field SubscribersCount", err.Error())
				return false
			}
			return true
		case "subscribers_url":
			s.SubscribersURL.Reset()
			if err := s.SubscribersURL.ReadJSON(i); err != nil {
				i.ReportError("Field SubscribersURL", err.Error())
				return false
			}
			return true
		case "subscription_url":
			s.SubscriptionURL.Reset()
			if err := s.SubscriptionURL.ReadJSON(i); err != nil {
				i.ReportError("Field SubscriptionURL", err.Error())
				return false
			}
			return true
		case "svn_url":
			s.SvnURL.Reset()
			if err := s.SvnURL.ReadJSON(i); err != nil {
				i.ReportError("Field SvnURL", err.Error())
				return false
			}
			return true
		case "tags_url":
			s.TagsURL.Reset()
			if err := s.TagsURL.ReadJSON(i); err != nil {
				i.ReportError("Field TagsURL", err.Error())
				return false
			}
			return true
		case "teams_url":
			s.TeamsURL.Reset()
			if err := s.TeamsURL.ReadJSON(i); err != nil {
				i.ReportError("Field TeamsURL", err.Error())
				return false
			}
			return true
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(i); err != nil {
				i.ReportError("Field TempCloneToken", err.Error())
				return false
			}
			return true
		case "topics":
			// Unsupported kind "array" for field "Topics".
			i.Skip()
			return true
		case "trees_url":
			s.TreesURL.Reset()
			if err := s.TreesURL.ReadJSON(i); err != nil {
				i.ReportError("Field TreesURL", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		case "updated_at":
			s.UpdatedAt.Reset()
			if err := s.UpdatedAt.ReadJSON(i); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		case "watchers_count":
			s.WatchersCount.Reset()
			if err := s.WatchersCount.ReadJSON(i); err != nil {
				i.ReportError("Field WatchersCount", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RepositoryTemplateRepositoryOwner) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvatarURL.Set {
		more.More()
		j.WriteObjectField("avatar_url")
		s.AvatarURL.WriteJSON(j)
	}

	if s.EventsURL.Set {
		more.More()
		j.WriteObjectField("events_url")
		s.EventsURL.WriteJSON(j)
	}

	if s.FollowersURL.Set {
		more.More()
		j.WriteObjectField("followers_url")
		s.FollowersURL.WriteJSON(j)
	}

	if s.FollowingURL.Set {
		more.More()
		j.WriteObjectField("following_url")
		s.FollowingURL.WriteJSON(j)
	}

	if s.GistsURL.Set {
		more.More()
		j.WriteObjectField("gists_url")
		s.GistsURL.WriteJSON(j)
	}

	if s.GravatarID.Set {
		more.More()
		j.WriteObjectField("gravatar_id")
		s.GravatarID.WriteJSON(j)
	}

	if s.HTMLURL.Set {
		more.More()
		j.WriteObjectField("html_url")
		s.HTMLURL.WriteJSON(j)
	}

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.Login.Set {
		more.More()
		j.WriteObjectField("login")
		s.Login.WriteJSON(j)
	}

	if s.NodeID.Set {
		more.More()
		j.WriteObjectField("node_id")
		s.NodeID.WriteJSON(j)
	}

	if s.OrganizationsURL.Set {
		more.More()
		j.WriteObjectField("organizations_url")
		s.OrganizationsURL.WriteJSON(j)
	}

	if s.ReceivedEventsURL.Set {
		more.More()
		j.WriteObjectField("received_events_url")
		s.ReceivedEventsURL.WriteJSON(j)
	}

	if s.ReposURL.Set {
		more.More()
		j.WriteObjectField("repos_url")
		s.ReposURL.WriteJSON(j)
	}

	if s.SiteAdmin.Set {
		more.More()
		j.WriteObjectField("site_admin")
		s.SiteAdmin.WriteJSON(j)
	}

	if s.StarredURL.Set {
		more.More()
		j.WriteObjectField("starred_url")
		s.StarredURL.WriteJSON(j)
	}

	if s.SubscriptionsURL.Set {
		more.More()
		j.WriteObjectField("subscriptions_url")
		s.SubscriptionsURL.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes RepositoryTemplateRepositoryOwner json value to io.Writer.
func (s RepositoryTemplateRepositoryOwner) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RepositoryTemplateRepositoryOwner json value from io.Reader.
func (s *RepositoryTemplateRepositoryOwner) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RepositoryTemplateRepositoryOwner from json stream.
func (s *RepositoryTemplateRepositoryOwner) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			s.AvatarURL.Reset()
			if err := s.AvatarURL.ReadJSON(i); err != nil {
				i.ReportError("Field AvatarURL", err.Error())
				return false
			}
			return true
		case "events_url":
			s.EventsURL.Reset()
			if err := s.EventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			return true
		case "followers_url":
			s.FollowersURL.Reset()
			if err := s.FollowersURL.ReadJSON(i); err != nil {
				i.ReportError("Field FollowersURL", err.Error())
				return false
			}
			return true
		case "following_url":
			s.FollowingURL.Reset()
			if err := s.FollowingURL.ReadJSON(i); err != nil {
				i.ReportError("Field FollowingURL", err.Error())
				return false
			}
			return true
		case "gists_url":
			s.GistsURL.Reset()
			if err := s.GistsURL.ReadJSON(i); err != nil {
				i.ReportError("Field GistsURL", err.Error())
				return false
			}
			return true
		case "gravatar_id":
			s.GravatarID.Reset()
			if err := s.GravatarID.ReadJSON(i); err != nil {
				i.ReportError("Field GravatarID", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL.Reset()
			if err := s.HTMLURL.ReadJSON(i); err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "login":
			s.Login.Reset()
			if err := s.Login.ReadJSON(i); err != nil {
				i.ReportError("Field Login", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID.Reset()
			if err := s.NodeID.ReadJSON(i); err != nil {
				i.ReportError("Field NodeID", err.Error())
				return false
			}
			return true
		case "organizations_url":
			s.OrganizationsURL.Reset()
			if err := s.OrganizationsURL.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationsURL", err.Error())
				return false
			}
			return true
		case "received_events_url":
			s.ReceivedEventsURL.Reset()
			if err := s.ReceivedEventsURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReceivedEventsURL", err.Error())
				return false
			}
			return true
		case "repos_url":
			s.ReposURL.Reset()
			if err := s.ReposURL.ReadJSON(i); err != nil {
				i.ReportError("Field ReposURL", err.Error())
				return false
			}
			return true
		case "site_admin":
			s.SiteAdmin.Reset()
			if err := s.SiteAdmin.ReadJSON(i); err != nil {
				i.ReportError("Field SiteAdmin", err.Error())
				return false
			}
			return true
		case "starred_url":
			s.StarredURL.Reset()
			if err := s.StarredURL.ReadJSON(i); err != nil {
				i.ReportError("Field StarredURL", err.Error())
				return false
			}
			return true
		case "subscriptions_url":
			s.SubscriptionsURL.Reset()
			if err := s.SubscriptionsURL.ReadJSON(i); err != nil {
				i.ReportError("Field SubscriptionsURL", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RepositoryTemplateRepositoryPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Admin.Set {
		more.More()
		j.WriteObjectField("admin")
		s.Admin.WriteJSON(j)
	}

	if s.Maintain.Set {
		more.More()
		j.WriteObjectField("maintain")
		s.Maintain.WriteJSON(j)
	}

	if s.Pull.Set {
		more.More()
		j.WriteObjectField("pull")
		s.Pull.WriteJSON(j)
	}

	if s.Push.Set {
		more.More()
		j.WriteObjectField("push")
		s.Push.WriteJSON(j)
	}

	if s.Triage.Set {
		more.More()
		j.WriteObjectField("triage")
		s.Triage.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes RepositoryTemplateRepositoryPermissions json value to io.Writer.
func (s RepositoryTemplateRepositoryPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RepositoryTemplateRepositoryPermissions json value from io.Reader.
func (s *RepositoryTemplateRepositoryPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RepositoryTemplateRepositoryPermissions from json stream.
func (s *RepositoryTemplateRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admin":
			s.Admin.Reset()
			if err := s.Admin.ReadJSON(i); err != nil {
				i.ReportError("Field Admin", err.Error())
				return false
			}
			return true
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(i); err != nil {
				i.ReportError("Field Maintain", err.Error())
				return false
			}
			return true
		case "pull":
			s.Pull.Reset()
			if err := s.Pull.ReadJSON(i); err != nil {
				i.ReportError("Field Pull", err.Error())
				return false
			}
			return true
		case "push":
			s.Push.Reset()
			if err := s.Push.ReadJSON(i); err != nil {
				i.ReportError("Field Push", err.Error())
				return false
			}
			return true
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(i); err != nil {
				i.ReportError("Field Triage", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReviewComment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author_association")
	s.AuthorAssociation.WriteJSON(j)

	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	if s.BodyHTML.Set {
		more.More()
		j.WriteObjectField("body_html")
		s.BodyHTML.WriteJSON(j)
	}

	if s.BodyText.Set {
		more.More()
		j.WriteObjectField("body_text")
		s.BodyText.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("commit_id")
	j.WriteString(s.CommitID)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("diff_hunk")
	j.WriteString(s.DiffHunk)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.InReplyToID.Set {
		more.More()
		j.WriteObjectField("in_reply_to_id")
		s.InReplyToID.WriteJSON(j)
	}

	if s.Line.Set {
		more.More()
		j.WriteObjectField("line")
		s.Line.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("_links")
	s.Links.WriteJSON(j)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("original_commit_id")
	j.WriteString(s.OriginalCommitID)

	if s.OriginalLine.Set {
		more.More()
		j.WriteObjectField("original_line")
		s.OriginalLine.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("original_position")
	j.WriteInt(s.OriginalPosition)

	if s.OriginalStartLine.Set {
		more.More()
		j.WriteObjectField("original_start_line")
		s.OriginalStartLine.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)

	more.More()
	j.WriteObjectField("position")
	s.Position.WriteJSON(j)

	more.More()
	j.WriteObjectField("pull_request_review_id")
	s.PullRequestReviewID.WriteJSON(j)

	more.More()
	j.WriteObjectField("pull_request_url")
	json.WriteURI(j, s.PullRequestURL)

	if s.Reactions.Set {
		more.More()
		j.WriteObjectField("reactions")
		s.Reactions.WriteJSON(j)
	}

	if s.Side.Set {
		more.More()
		j.WriteObjectField("side")
		s.Side.WriteJSON(j)
	}

	if s.StartLine.Set {
		more.More()
		j.WriteObjectField("start_line")
		s.StartLine.WriteJSON(j)
	}

	if s.StartSide.Set {
		more.More()
		j.WriteObjectField("start_side")
		s.StartSide.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	more.More()
	j.WriteObjectField("user")
	s.User.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReviewComment json value to io.Writer.
func (s ReviewComment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReviewComment json value from io.Reader.
func (s *ReviewComment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReviewComment from json stream.
func (s *ReviewComment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author_association":
			if err := s.AuthorAssociation.ReadJSON(i); err != nil {
				i.ReportError("Field AuthorAssociation", err.Error())
				return false
			}
			return true
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "body_html":
			s.BodyHTML.Reset()
			if err := s.BodyHTML.ReadJSON(i); err != nil {
				i.ReportError("Field BodyHTML", err.Error())
				return false
			}
			return true
		case "body_text":
			s.BodyText.Reset()
			if err := s.BodyText.ReadJSON(i); err != nil {
				i.ReportError("Field BodyText", err.Error())
				return false
			}
			return true
		case "commit_id":
			s.CommitID = i.ReadString()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "diff_hunk":
			s.DiffHunk = i.ReadString()
			return i.Error == nil
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "in_reply_to_id":
			s.InReplyToID.Reset()
			if err := s.InReplyToID.ReadJSON(i); err != nil {
				i.ReportError("Field InReplyToID", err.Error())
				return false
			}
			return true
		case "line":
			s.Line.Reset()
			if err := s.Line.ReadJSON(i); err != nil {
				i.ReportError("Field Line", err.Error())
				return false
			}
			return true
		case "_links":
			if err := s.Links.ReadJSON(i); err != nil {
				i.ReportError("Field Links", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "original_commit_id":
			s.OriginalCommitID = i.ReadString()
			return i.Error == nil
		case "original_line":
			s.OriginalLine.Reset()
			if err := s.OriginalLine.ReadJSON(i); err != nil {
				i.ReportError("Field OriginalLine", err.Error())
				return false
			}
			return true
		case "original_position":
			s.OriginalPosition = i.ReadInt()
			return i.Error == nil
		case "original_start_line":
			s.OriginalStartLine.Reset()
			if err := s.OriginalStartLine.ReadJSON(i); err != nil {
				i.ReportError("Field OriginalStartLine", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "position":
			if err := s.Position.ReadJSON(i); err != nil {
				i.ReportError("Field Position", err.Error())
				return false
			}
			return true
		case "pull_request_review_id":
			if err := s.PullRequestReviewID.ReadJSON(i); err != nil {
				i.ReportError("Field PullRequestReviewID", err.Error())
				return false
			}
			return true
		case "pull_request_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field PullRequestURL", err.Error())
				return false
			}
			s.PullRequestURL = v
			return true
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(i); err != nil {
				i.ReportError("Field Reactions", err.Error())
				return false
			}
			return true
		case "side":
			s.Side.Reset()
			if err := s.Side.ReadJSON(i); err != nil {
				i.ReportError("Field Side", err.Error())
				return false
			}
			return true
		case "start_line":
			s.StartLine.Reset()
			if err := s.StartLine.ReadJSON(i); err != nil {
				i.ReportError("Field StartLine", err.Error())
				return false
			}
			return true
		case "start_side":
			s.StartSide.Reset()
			if err := s.StartSide.ReadJSON(i); err != nil {
				i.ReportError("Field StartSide", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "user":
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReviewCommentLinks) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("html")
	s.HTML.WriteJSON(j)

	more.More()
	j.WriteObjectField("pull_request")
	s.PullRequest.WriteJSON(j)

	more.More()
	j.WriteObjectField("self")
	s.Self.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ReviewCommentLinks json value to io.Writer.
func (s ReviewCommentLinks) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ReviewCommentLinks json value from io.Reader.
func (s *ReviewCommentLinks) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ReviewCommentLinks from json stream.
func (s *ReviewCommentLinks) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "html":
			if err := s.HTML.ReadJSON(i); err != nil {
				i.ReportError("Field HTML", err.Error())
				return false
			}
			return true
		case "pull_request":
			if err := s.PullRequest.ReadJSON(i); err != nil {
				i.ReportError("Field PullRequest", err.Error())
				return false
			}
			return true
		case "self":
			if err := s.Self.ReadJSON(i); err != nil {
				i.ReportError("Field Self", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReviewCommentSide) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReviewCommentSide from json stream.
func (s *ReviewCommentSide) ReadJSON(i *json.Iterator) error {
	*s = ReviewCommentSide(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ReviewCommentStartSide) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads ReviewCommentStartSide from json stream.
func (s *ReviewCommentStartSide) ReadJSON(i *json.Iterator) error {
	*s = ReviewCommentStartSide(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Runner) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("busy")
	j.WriteBool(s.Busy)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("labels")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Labels {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("os")
	j.WriteString(s.Os)

	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Runner json value to io.Writer.
func (s Runner) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Runner json value from io.Reader.
func (s *Runner) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Runner from json stream.
func (s *Runner) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "busy":
			s.Busy = i.ReadBool()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "labels":
			// Unsupported kind "array" for field "Labels".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "os":
			s.Os = i.ReadString()
			return i.Error == nil
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RunnerApplication) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("architecture")
	j.WriteString(s.Architecture)

	more.More()
	j.WriteObjectField("download_url")
	j.WriteString(s.DownloadURL)

	more.More()
	j.WriteObjectField("filename")
	j.WriteString(s.Filename)

	more.More()
	j.WriteObjectField("os")
	j.WriteString(s.Os)

	if s.SHA256Checksum.Set {
		more.More()
		j.WriteObjectField("sha256_checksum")
		s.SHA256Checksum.WriteJSON(j)
	}

	if s.TempDownloadToken.Set {
		more.More()
		j.WriteObjectField("temp_download_token")
		s.TempDownloadToken.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes RunnerApplication json value to io.Writer.
func (s RunnerApplication) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RunnerApplication json value from io.Reader.
func (s *RunnerApplication) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RunnerApplication from json stream.
func (s *RunnerApplication) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "architecture":
			s.Architecture = i.ReadString()
			return i.Error == nil
		case "download_url":
			s.DownloadURL = i.ReadString()
			return i.Error == nil
		case "filename":
			s.Filename = i.ReadString()
			return i.Error == nil
		case "os":
			s.Os = i.ReadString()
			return i.Error == nil
		case "sha256_checksum":
			s.SHA256Checksum.Reset()
			if err := s.SHA256Checksum.ReadJSON(i); err != nil {
				i.ReportError("Field SHA256Checksum", err.Error())
				return false
			}
			return true
		case "temp_download_token":
			s.TempDownloadToken.Reset()
			if err := s.TempDownloadToken.ReadJSON(i); err != nil {
				i.ReportError("Field TempDownloadToken", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RunnerGroupsEnterprise) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("allows_public_repositories")
	j.WriteBool(s.AllowsPublicRepositories)

	more.More()
	j.WriteObjectField("default")
	j.WriteBool(s.Default)

	more.More()
	j.WriteObjectField("id")
	j.WriteFloat64(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("runners_url")
	j.WriteString(s.RunnersURL)

	if s.SelectedOrganizationsURL.Set {
		more.More()
		j.WriteObjectField("selected_organizations_url")
		s.SelectedOrganizationsURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("visibility")
	j.WriteString(s.Visibility)

	j.WriteObjectEnd()
}

// WriteJSONTo writes RunnerGroupsEnterprise json value to io.Writer.
func (s RunnerGroupsEnterprise) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RunnerGroupsEnterprise json value from io.Reader.
func (s *RunnerGroupsEnterprise) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RunnerGroupsEnterprise from json stream.
func (s *RunnerGroupsEnterprise) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allows_public_repositories":
			s.AllowsPublicRepositories = i.ReadBool()
			return i.Error == nil
		case "default":
			s.Default = i.ReadBool()
			return i.Error == nil
		case "id":
			s.ID = i.ReadFloat64()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "runners_url":
			s.RunnersURL = i.ReadString()
			return i.Error == nil
		case "selected_organizations_url":
			s.SelectedOrganizationsURL.Reset()
			if err := s.SelectedOrganizationsURL.ReadJSON(i); err != nil {
				i.ReportError("Field SelectedOrganizationsURL", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RunnerGroupsOrg) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("allows_public_repositories")
	j.WriteBool(s.AllowsPublicRepositories)

	more.More()
	j.WriteObjectField("default")
	j.WriteBool(s.Default)

	more.More()
	j.WriteObjectField("id")
	j.WriteFloat64(s.ID)

	more.More()
	j.WriteObjectField("inherited")
	j.WriteBool(s.Inherited)

	if s.InheritedAllowsPublicRepositories.Set {
		more.More()
		j.WriteObjectField("inherited_allows_public_repositories")
		s.InheritedAllowsPublicRepositories.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("runners_url")
	j.WriteString(s.RunnersURL)

	if s.SelectedRepositoriesURL.Set {
		more.More()
		j.WriteObjectField("selected_repositories_url")
		s.SelectedRepositoriesURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("visibility")
	j.WriteString(s.Visibility)

	j.WriteObjectEnd()
}

// WriteJSONTo writes RunnerGroupsOrg json value to io.Writer.
func (s RunnerGroupsOrg) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RunnerGroupsOrg json value from io.Reader.
func (s *RunnerGroupsOrg) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RunnerGroupsOrg from json stream.
func (s *RunnerGroupsOrg) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allows_public_repositories":
			s.AllowsPublicRepositories = i.ReadBool()
			return i.Error == nil
		case "default":
			s.Default = i.ReadBool()
			return i.Error == nil
		case "id":
			s.ID = i.ReadFloat64()
			return i.Error == nil
		case "inherited":
			s.Inherited = i.ReadBool()
			return i.Error == nil
		case "inherited_allows_public_repositories":
			s.InheritedAllowsPublicRepositories.Reset()
			if err := s.InheritedAllowsPublicRepositories.ReadJSON(i); err != nil {
				i.ReportError("Field InheritedAllowsPublicRepositories", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "runners_url":
			s.RunnersURL = i.ReadString()
			return i.Error == nil
		case "selected_repositories_url":
			s.SelectedRepositoriesURL.Reset()
			if err := s.SelectedRepositoriesURL.ReadJSON(i); err != nil {
				i.ReportError("Field SelectedRepositoriesURL", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RunnerLabelsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes RunnerLabelsItem json value to io.Writer.
func (s RunnerLabelsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RunnerLabelsItem json value from io.Reader.
func (s *RunnerLabelsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RunnerLabelsItem from json stream.
func (s *RunnerLabelsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RunnerLabelsItemType) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads RunnerLabelsItemType from json stream.
func (s *RunnerLabelsItemType) ReadJSON(i *json.Iterator) error {
	*s = RunnerLabelsItemType(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseGroup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DisplayName.Set {
		more.More()
		j.WriteObjectField("displayName")
		s.DisplayName.WriteJSON(j)
	}

	if s.ExternalId.Set {
		more.More()
		j.WriteObjectField("externalId")
		s.ExternalId.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)

	if s.Members != nil {
		more.More()
		j.WriteObjectField("members")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Members {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Meta.Set {
		more.More()
		j.WriteObjectField("meta")
		s.Meta.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimEnterpriseGroup json value to io.Writer.
func (s ScimEnterpriseGroup) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimEnterpriseGroup json value from io.Reader.
func (s *ScimEnterpriseGroup) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimEnterpriseGroup from json stream.
func (s *ScimEnterpriseGroup) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "displayName":
			s.DisplayName.Reset()
			if err := s.DisplayName.ReadJSON(i); err != nil {
				i.ReportError("Field DisplayName", err.Error())
				return false
			}
			return true
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalId", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadString()
			return i.Error == nil
		case "members":
			// Unsupported kind "array" for field "Members".
			i.Skip()
			return true
		case "meta":
			s.Meta.Reset()
			if err := s.Meta.ReadJSON(i); err != nil {
				i.ReportError("Field Meta", err.Error())
				return false
			}
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseGroupMembersItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Display.Set {
		more.More()
		j.WriteObjectField("display")
		s.Display.WriteJSON(j)
	}

	if s.Ref.Set {
		more.More()
		j.WriteObjectField("$ref")
		s.Ref.WriteJSON(j)
	}

	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimEnterpriseGroupMembersItem json value to io.Writer.
func (s ScimEnterpriseGroupMembersItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimEnterpriseGroupMembersItem json value from io.Reader.
func (s *ScimEnterpriseGroupMembersItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimEnterpriseGroupMembersItem from json stream.
func (s *ScimEnterpriseGroupMembersItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "display":
			s.Display.Reset()
			if err := s.Display.ReadJSON(i); err != nil {
				i.ReportError("Field Display", err.Error())
				return false
			}
			return true
		case "$ref":
			s.Ref.Reset()
			if err := s.Ref.ReadJSON(i); err != nil {
				i.ReportError("Field Ref", err.Error())
				return false
			}
			return true
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseGroupMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Created.Set {
		more.More()
		j.WriteObjectField("created")
		s.Created.WriteJSON(j)
	}

	if s.LastModified.Set {
		more.More()
		j.WriteObjectField("lastModified")
		s.LastModified.WriteJSON(j)
	}

	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}

	if s.ResourceType.Set {
		more.More()
		j.WriteObjectField("resourceType")
		s.ResourceType.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimEnterpriseGroupMeta json value to io.Writer.
func (s ScimEnterpriseGroupMeta) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimEnterpriseGroupMeta json value from io.Reader.
func (s *ScimEnterpriseGroupMeta) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimEnterpriseGroupMeta from json stream.
func (s *ScimEnterpriseGroupMeta) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created":
			s.Created.Reset()
			if err := s.Created.ReadJSON(i); err != nil {
				i.ReportError("Field Created", err.Error())
				return false
			}
			return true
		case "lastModified":
			s.LastModified.Reset()
			if err := s.LastModified.ReadJSON(i); err != nil {
				i.ReportError("Field LastModified", err.Error())
				return false
			}
			return true
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(i); err != nil {
				i.ReportError("Field Location", err.Error())
				return false
			}
			return true
		case "resourceType":
			s.ResourceType.Reset()
			if err := s.ResourceType.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceType", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseUser) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active.Set {
		more.More()
		j.WriteObjectField("active")
		s.Active.WriteJSON(j)
	}

	if s.Emails != nil {
		more.More()
		j.WriteObjectField("emails")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Emails {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.ExternalId.Set {
		more.More()
		j.WriteObjectField("externalId")
		s.ExternalId.WriteJSON(j)
	}

	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)

	if s.Meta.Set {
		more.More()
		j.WriteObjectField("meta")
		s.Meta.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.UserName.Set {
		more.More()
		j.WriteObjectField("userName")
		s.UserName.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimEnterpriseUser json value to io.Writer.
func (s ScimEnterpriseUser) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimEnterpriseUser json value from io.Reader.
func (s *ScimEnterpriseUser) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimEnterpriseUser from json stream.
func (s *ScimEnterpriseUser) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(i); err != nil {
				i.ReportError("Field Active", err.Error())
				return false
			}
			return true
		case "emails":
			// Unsupported kind "array" for field "Emails".
			i.Skip()
			return true
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalId", err.Error())
				return false
			}
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "id":
			s.ID = i.ReadString()
			return i.Error == nil
		case "meta":
			s.Meta.Reset()
			if err := s.Meta.ReadJSON(i); err != nil {
				i.ReportError("Field Meta", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		case "userName":
			s.UserName.Reset()
			if err := s.UserName.ReadJSON(i); err != nil {
				i.ReportError("Field UserName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseUserEmailsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Primary.Set {
		more.More()
		j.WriteObjectField("primary")
		s.Primary.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimEnterpriseUserEmailsItem json value to io.Writer.
func (s ScimEnterpriseUserEmailsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimEnterpriseUserEmailsItem json value from io.Reader.
func (s *ScimEnterpriseUserEmailsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimEnterpriseUserEmailsItem from json stream.
func (s *ScimEnterpriseUserEmailsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "primary":
			s.Primary.Reset()
			if err := s.Primary.ReadJSON(i); err != nil {
				i.ReportError("Field Primary", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseUserGroupsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimEnterpriseUserGroupsItem json value to io.Writer.
func (s ScimEnterpriseUserGroupsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimEnterpriseUserGroupsItem json value from io.Reader.
func (s *ScimEnterpriseUserGroupsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimEnterpriseUserGroupsItem from json stream.
func (s *ScimEnterpriseUserGroupsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseUserMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Created.Set {
		more.More()
		j.WriteObjectField("created")
		s.Created.WriteJSON(j)
	}

	if s.LastModified.Set {
		more.More()
		j.WriteObjectField("lastModified")
		s.LastModified.WriteJSON(j)
	}

	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}

	if s.ResourceType.Set {
		more.More()
		j.WriteObjectField("resourceType")
		s.ResourceType.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimEnterpriseUserMeta json value to io.Writer.
func (s ScimEnterpriseUserMeta) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimEnterpriseUserMeta json value from io.Reader.
func (s *ScimEnterpriseUserMeta) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimEnterpriseUserMeta from json stream.
func (s *ScimEnterpriseUserMeta) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created":
			s.Created.Reset()
			if err := s.Created.ReadJSON(i); err != nil {
				i.ReportError("Field Created", err.Error())
				return false
			}
			return true
		case "lastModified":
			s.LastModified.Reset()
			if err := s.LastModified.ReadJSON(i); err != nil {
				i.ReportError("Field LastModified", err.Error())
				return false
			}
			return true
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(i); err != nil {
				i.ReportError("Field Location", err.Error())
				return false
			}
			return true
		case "resourceType":
			s.ResourceType.Reset()
			if err := s.ResourceType.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceType", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimEnterpriseUserName) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FamilyName.Set {
		more.More()
		j.WriteObjectField("familyName")
		s.FamilyName.WriteJSON(j)
	}

	if s.GivenName.Set {
		more.More()
		j.WriteObjectField("givenName")
		s.GivenName.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimEnterpriseUserName json value to io.Writer.
func (s ScimEnterpriseUserName) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimEnterpriseUserName json value from io.Reader.
func (s *ScimEnterpriseUserName) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimEnterpriseUserName from json stream.
func (s *ScimEnterpriseUserName) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "familyName":
			s.FamilyName.Reset()
			if err := s.FamilyName.ReadJSON(i); err != nil {
				i.ReportError("Field FamilyName", err.Error())
				return false
			}
			return true
		case "givenName":
			s.GivenName.Reset()
			if err := s.GivenName.ReadJSON(i); err != nil {
				i.ReportError("Field GivenName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimError) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Detail.Set {
		more.More()
		j.WriteObjectField("detail")
		s.Detail.WriteJSON(j)
	}

	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	if s.Schemas != nil {
		more.More()
		j.WriteObjectField("schemas")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Schemas {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.ScimType.Set {
		more.More()
		j.WriteObjectField("scimType")
		s.ScimType.WriteJSON(j)
	}

	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimError json value to io.Writer.
func (s ScimError) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimError json value from io.Reader.
func (s *ScimError) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimError from json stream.
func (s *ScimError) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "detail":
			s.Detail.Reset()
			if err := s.Detail.ReadJSON(i); err != nil {
				i.ReportError("Field Detail", err.Error())
				return false
			}
			return true
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		case "scimType":
			s.ScimType.Reset()
			if err := s.ScimType.ReadJSON(i); err != nil {
				i.ReportError("Field ScimType", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimGroupListEnterprise) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("itemsPerPage")
	j.WriteFloat64(s.ItemsPerPage)

	more.More()
	j.WriteObjectField("Resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("startIndex")
	j.WriteFloat64(s.StartIndex)

	more.More()
	j.WriteObjectField("totalResults")
	j.WriteFloat64(s.TotalResults)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimGroupListEnterprise json value to io.Writer.
func (s ScimGroupListEnterprise) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimGroupListEnterprise json value from io.Reader.
func (s *ScimGroupListEnterprise) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimGroupListEnterprise from json stream.
func (s *ScimGroupListEnterprise) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "itemsPerPage":
			s.ItemsPerPage = i.ReadFloat64()
			return i.Error == nil
		case "Resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		case "startIndex":
			s.StartIndex = i.ReadFloat64()
			return i.Error == nil
		case "totalResults":
			s.TotalResults = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimGroupListEnterpriseResourcesItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DisplayName.Set {
		more.More()
		j.WriteObjectField("displayName")
		s.DisplayName.WriteJSON(j)
	}

	if s.ExternalId.Set {
		more.More()
		j.WriteObjectField("externalId")
		s.ExternalId.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)

	if s.Members != nil {
		more.More()
		j.WriteObjectField("members")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Members {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.Meta.Set {
		more.More()
		j.WriteObjectField("meta")
		s.Meta.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimGroupListEnterpriseResourcesItem json value to io.Writer.
func (s ScimGroupListEnterpriseResourcesItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimGroupListEnterpriseResourcesItem json value from io.Reader.
func (s *ScimGroupListEnterpriseResourcesItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimGroupListEnterpriseResourcesItem from json stream.
func (s *ScimGroupListEnterpriseResourcesItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "displayName":
			s.DisplayName.Reset()
			if err := s.DisplayName.ReadJSON(i); err != nil {
				i.ReportError("Field DisplayName", err.Error())
				return false
			}
			return true
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalId", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadString()
			return i.Error == nil
		case "members":
			// Unsupported kind "array" for field "Members".
			i.Skip()
			return true
		case "meta":
			s.Meta.Reset()
			if err := s.Meta.ReadJSON(i); err != nil {
				i.ReportError("Field Meta", err.Error())
				return false
			}
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimGroupListEnterpriseResourcesItemMembersItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Display.Set {
		more.More()
		j.WriteObjectField("display")
		s.Display.WriteJSON(j)
	}

	if s.Ref.Set {
		more.More()
		j.WriteObjectField("$ref")
		s.Ref.WriteJSON(j)
	}

	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimGroupListEnterpriseResourcesItemMembersItem json value to io.Writer.
func (s ScimGroupListEnterpriseResourcesItemMembersItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimGroupListEnterpriseResourcesItemMembersItem json value from io.Reader.
func (s *ScimGroupListEnterpriseResourcesItemMembersItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimGroupListEnterpriseResourcesItemMembersItem from json stream.
func (s *ScimGroupListEnterpriseResourcesItemMembersItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "display":
			s.Display.Reset()
			if err := s.Display.ReadJSON(i); err != nil {
				i.ReportError("Field Display", err.Error())
				return false
			}
			return true
		case "$ref":
			s.Ref.Reset()
			if err := s.Ref.ReadJSON(i); err != nil {
				i.ReportError("Field Ref", err.Error())
				return false
			}
			return true
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimGroupListEnterpriseResourcesItemMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Created.Set {
		more.More()
		j.WriteObjectField("created")
		s.Created.WriteJSON(j)
	}

	if s.LastModified.Set {
		more.More()
		j.WriteObjectField("lastModified")
		s.LastModified.WriteJSON(j)
	}

	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}

	if s.ResourceType.Set {
		more.More()
		j.WriteObjectField("resourceType")
		s.ResourceType.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimGroupListEnterpriseResourcesItemMeta json value to io.Writer.
func (s ScimGroupListEnterpriseResourcesItemMeta) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimGroupListEnterpriseResourcesItemMeta json value from io.Reader.
func (s *ScimGroupListEnterpriseResourcesItemMeta) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimGroupListEnterpriseResourcesItemMeta from json stream.
func (s *ScimGroupListEnterpriseResourcesItemMeta) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created":
			s.Created.Reset()
			if err := s.Created.ReadJSON(i); err != nil {
				i.ReportError("Field Created", err.Error())
				return false
			}
			return true
		case "lastModified":
			s.LastModified.Reset()
			if err := s.LastModified.ReadJSON(i); err != nil {
				i.ReportError("Field LastModified", err.Error())
				return false
			}
			return true
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(i); err != nil {
				i.ReportError("Field Location", err.Error())
				return false
			}
			return true
		case "resourceType":
			s.ResourceType.Reset()
			if err := s.ResourceType.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceType", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimProvisionAndInviteUserApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active.Set {
		more.More()
		j.WriteObjectField("active")
		s.Active.WriteJSON(j)
	}

	if s.DisplayName.Set {
		more.More()
		j.WriteObjectField("displayName")
		s.DisplayName.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("emails")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Emails {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.ExternalId.Set {
		more.More()
		j.WriteObjectField("externalId")
		s.ExternalId.WriteJSON(j)
	}

	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("name")
	s.Name.WriteJSON(j)

	if s.Schemas != nil {
		more.More()
		j.WriteObjectField("schemas")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Schemas {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("userName")
	j.WriteString(s.UserName)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimProvisionAndInviteUserApplicationJSONRequest json value to io.Writer.
func (s ScimProvisionAndInviteUserApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimProvisionAndInviteUserApplicationJSONRequest json value from io.Reader.
func (s *ScimProvisionAndInviteUserApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimProvisionAndInviteUserApplicationJSONRequest from json stream.
func (s *ScimProvisionAndInviteUserApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(i); err != nil {
				i.ReportError("Field Active", err.Error())
				return false
			}
			return true
		case "displayName":
			s.DisplayName.Reset()
			if err := s.DisplayName.ReadJSON(i); err != nil {
				i.ReportError("Field DisplayName", err.Error())
				return false
			}
			return true
		case "emails":
			// Unsupported kind "array" for field "Emails".
			i.Skip()
			return true
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalId", err.Error())
				return false
			}
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "name":
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		case "userName":
			s.UserName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Primary.Set {
		more.More()
		j.WriteObjectField("primary")
		s.Primary.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem json value to io.Writer.
func (s ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem json value from io.Reader.
func (s *ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem from json stream.
func (s *ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "primary":
			s.Primary.Reset()
			if err := s.Primary.ReadJSON(i); err != nil {
				i.ReportError("Field Primary", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "value":
			s.Value = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimProvisionAndInviteUserApplicationJSONRequestName) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("familyName")
	j.WriteString(s.FamilyName)

	if s.Formatted.Set {
		more.More()
		j.WriteObjectField("formatted")
		s.Formatted.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("givenName")
	j.WriteString(s.GivenName)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimProvisionAndInviteUserApplicationJSONRequestName json value to io.Writer.
func (s ScimProvisionAndInviteUserApplicationJSONRequestName) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimProvisionAndInviteUserApplicationJSONRequestName json value from io.Reader.
func (s *ScimProvisionAndInviteUserApplicationJSONRequestName) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimProvisionAndInviteUserApplicationJSONRequestName from json stream.
func (s *ScimProvisionAndInviteUserApplicationJSONRequestName) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "familyName":
			s.FamilyName = i.ReadString()
			return i.Error == nil
		case "formatted":
			s.Formatted.Reset()
			if err := s.Formatted.ReadJSON(i); err != nil {
				i.ReportError("Field Formatted", err.Error())
				return false
			}
			return true
		case "givenName":
			s.GivenName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimSetInformationForProvisionedUserApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active.Set {
		more.More()
		j.WriteObjectField("active")
		s.Active.WriteJSON(j)
	}

	if s.DisplayName.Set {
		more.More()
		j.WriteObjectField("displayName")
		s.DisplayName.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("emails")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Emails {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.ExternalId.Set {
		more.More()
		j.WriteObjectField("externalId")
		s.ExternalId.WriteJSON(j)
	}

	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("name")
	s.Name.WriteJSON(j)

	if s.Schemas != nil {
		more.More()
		j.WriteObjectField("schemas")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Schemas {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("userName")
	j.WriteString(s.UserName)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimSetInformationForProvisionedUserApplicationJSONRequest json value to io.Writer.
func (s ScimSetInformationForProvisionedUserApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimSetInformationForProvisionedUserApplicationJSONRequest json value from io.Reader.
func (s *ScimSetInformationForProvisionedUserApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimSetInformationForProvisionedUserApplicationJSONRequest from json stream.
func (s *ScimSetInformationForProvisionedUserApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(i); err != nil {
				i.ReportError("Field Active", err.Error())
				return false
			}
			return true
		case "displayName":
			s.DisplayName.Reset()
			if err := s.DisplayName.ReadJSON(i); err != nil {
				i.ReportError("Field DisplayName", err.Error())
				return false
			}
			return true
		case "emails":
			// Unsupported kind "array" for field "Emails".
			i.Skip()
			return true
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalId", err.Error())
				return false
			}
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "name":
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		case "userName":
			s.UserName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Primary.Set {
		more.More()
		j.WriteObjectField("primary")
		s.Primary.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem json value to io.Writer.
func (s ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem json value from io.Reader.
func (s *ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem from json stream.
func (s *ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "primary":
			s.Primary.Reset()
			if err := s.Primary.ReadJSON(i); err != nil {
				i.ReportError("Field Primary", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "value":
			s.Value = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimSetInformationForProvisionedUserApplicationJSONRequestName) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("familyName")
	j.WriteString(s.FamilyName)

	if s.Formatted.Set {
		more.More()
		j.WriteObjectField("formatted")
		s.Formatted.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("givenName")
	j.WriteString(s.GivenName)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimSetInformationForProvisionedUserApplicationJSONRequestName json value to io.Writer.
func (s ScimSetInformationForProvisionedUserApplicationJSONRequestName) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimSetInformationForProvisionedUserApplicationJSONRequestName json value from io.Reader.
func (s *ScimSetInformationForProvisionedUserApplicationJSONRequestName) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimSetInformationForProvisionedUserApplicationJSONRequestName from json stream.
func (s *ScimSetInformationForProvisionedUserApplicationJSONRequestName) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "familyName":
			s.FamilyName = i.ReadString()
			return i.Error == nil
		case "formatted":
			s.Formatted.Reset()
			if err := s.Formatted.ReadJSON(i); err != nil {
				i.ReportError("Field Formatted", err.Error())
				return false
			}
			return true
		case "givenName":
			s.GivenName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterprise) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("itemsPerPage")
	j.WriteFloat64(s.ItemsPerPage)

	more.More()
	j.WriteObjectField("Resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("startIndex")
	j.WriteFloat64(s.StartIndex)

	more.More()
	j.WriteObjectField("totalResults")
	j.WriteFloat64(s.TotalResults)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimUserListEnterprise json value to io.Writer.
func (s ScimUserListEnterprise) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimUserListEnterprise json value from io.Reader.
func (s *ScimUserListEnterprise) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimUserListEnterprise from json stream.
func (s *ScimUserListEnterprise) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "itemsPerPage":
			s.ItemsPerPage = i.ReadFloat64()
			return i.Error == nil
		case "Resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		case "startIndex":
			s.StartIndex = i.ReadFloat64()
			return i.Error == nil
		case "totalResults":
			s.TotalResults = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterpriseResourcesItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active.Set {
		more.More()
		j.WriteObjectField("active")
		s.Active.WriteJSON(j)
	}

	if s.Emails != nil {
		more.More()
		j.WriteObjectField("emails")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Emails {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.ExternalId.Set {
		more.More()
		j.WriteObjectField("externalId")
		s.ExternalId.WriteJSON(j)
	}

	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)

	if s.Meta.Set {
		more.More()
		j.WriteObjectField("meta")
		s.Meta.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("schemas")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Schemas {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.UserName.Set {
		more.More()
		j.WriteObjectField("userName")
		s.UserName.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimUserListEnterpriseResourcesItem json value to io.Writer.
func (s ScimUserListEnterpriseResourcesItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimUserListEnterpriseResourcesItem json value from io.Reader.
func (s *ScimUserListEnterpriseResourcesItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimUserListEnterpriseResourcesItem from json stream.
func (s *ScimUserListEnterpriseResourcesItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(i); err != nil {
				i.ReportError("Field Active", err.Error())
				return false
			}
			return true
		case "emails":
			// Unsupported kind "array" for field "Emails".
			i.Skip()
			return true
		case "externalId":
			s.ExternalId.Reset()
			if err := s.ExternalId.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalId", err.Error())
				return false
			}
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "id":
			s.ID = i.ReadString()
			return i.Error == nil
		case "meta":
			s.Meta.Reset()
			if err := s.Meta.ReadJSON(i); err != nil {
				i.ReportError("Field Meta", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "schemas":
			// Unsupported kind "array" for field "Schemas".
			i.Skip()
			return true
		case "userName":
			s.UserName.Reset()
			if err := s.UserName.ReadJSON(i); err != nil {
				i.ReportError("Field UserName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterpriseResourcesItemEmailsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Primary.Set {
		more.More()
		j.WriteObjectField("primary")
		s.Primary.WriteJSON(j)
	}

	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}

	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimUserListEnterpriseResourcesItemEmailsItem json value to io.Writer.
func (s ScimUserListEnterpriseResourcesItemEmailsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimUserListEnterpriseResourcesItemEmailsItem json value from io.Reader.
func (s *ScimUserListEnterpriseResourcesItemEmailsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimUserListEnterpriseResourcesItemEmailsItem from json stream.
func (s *ScimUserListEnterpriseResourcesItemEmailsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "primary":
			s.Primary.Reset()
			if err := s.Primary.ReadJSON(i); err != nil {
				i.ReportError("Field Primary", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterpriseResourcesItemGroupsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimUserListEnterpriseResourcesItemGroupsItem json value to io.Writer.
func (s ScimUserListEnterpriseResourcesItemGroupsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimUserListEnterpriseResourcesItemGroupsItem json value from io.Reader.
func (s *ScimUserListEnterpriseResourcesItemGroupsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimUserListEnterpriseResourcesItemGroupsItem from json stream.
func (s *ScimUserListEnterpriseResourcesItemGroupsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterpriseResourcesItemMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Created.Set {
		more.More()
		j.WriteObjectField("created")
		s.Created.WriteJSON(j)
	}

	if s.LastModified.Set {
		more.More()
		j.WriteObjectField("lastModified")
		s.LastModified.WriteJSON(j)
	}

	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}

	if s.ResourceType.Set {
		more.More()
		j.WriteObjectField("resourceType")
		s.ResourceType.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimUserListEnterpriseResourcesItemMeta json value to io.Writer.
func (s ScimUserListEnterpriseResourcesItemMeta) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimUserListEnterpriseResourcesItemMeta json value from io.Reader.
func (s *ScimUserListEnterpriseResourcesItemMeta) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimUserListEnterpriseResourcesItemMeta from json stream.
func (s *ScimUserListEnterpriseResourcesItemMeta) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created":
			s.Created.Reset()
			if err := s.Created.ReadJSON(i); err != nil {
				i.ReportError("Field Created", err.Error())
				return false
			}
			return true
		case "lastModified":
			s.LastModified.Reset()
			if err := s.LastModified.ReadJSON(i); err != nil {
				i.ReportError("Field LastModified", err.Error())
				return false
			}
			return true
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(i); err != nil {
				i.ReportError("Field Location", err.Error())
				return false
			}
			return true
		case "resourceType":
			s.ResourceType.Reset()
			if err := s.ResourceType.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceType", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ScimUserListEnterpriseResourcesItemName) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FamilyName.Set {
		more.More()
		j.WriteObjectField("familyName")
		s.FamilyName.WriteJSON(j)
	}

	if s.GivenName.Set {
		more.More()
		j.WriteObjectField("givenName")
		s.GivenName.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ScimUserListEnterpriseResourcesItemName json value to io.Writer.
func (s ScimUserListEnterpriseResourcesItemName) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ScimUserListEnterpriseResourcesItemName json value from io.Reader.
func (s *ScimUserListEnterpriseResourcesItemName) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ScimUserListEnterpriseResourcesItemName from json stream.
func (s *ScimUserListEnterpriseResourcesItemName) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "familyName":
			s.FamilyName.Reset()
			if err := s.FamilyName.ReadJSON(i); err != nil {
				i.ReportError("Field FamilyName", err.Error())
				return false
			}
			return true
		case "givenName":
			s.GivenName.Reset()
			if err := s.GivenName.ReadJSON(i); err != nil {
				i.ReportError("Field GivenName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningAlert) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "created_at".

	// Unsupported kind "pointer" for field "html_url".

	if s.LocationsURL.Set {
		more.More()
		j.WriteObjectField("locations_url")
		s.LocationsURL.WriteJSON(j)
	}

	// Unsupported kind "pointer" for field "number".

	if s.Resolution.Set {
		more.More()
		j.WriteObjectField("resolution")
		s.Resolution.WriteJSON(j)
	}

	if s.ResolvedAt.Set {
		more.More()
		j.WriteObjectField("resolved_at")
		s.ResolvedAt.WriteJSON(j, json.WriteDateTime)
	}

	if s.ResolvedBy.Set {
		more.More()
		j.WriteObjectField("resolved_by")
		s.ResolvedBy.WriteJSON(j)
	}

	if s.Secret.Set {
		more.More()
		j.WriteObjectField("secret")
		s.Secret.WriteJSON(j)
	}

	if s.SecretType.Set {
		more.More()
		j.WriteObjectField("secret_type")
		s.SecretType.WriteJSON(j)
	}

	if s.State.Set {
		more.More()
		j.WriteObjectField("state")
		s.State.WriteJSON(j)
	}

	// Unsupported kind "pointer" for field "url".

	j.WriteObjectEnd()
}

// WriteJSONTo writes SecretScanningAlert json value to io.Writer.
func (s SecretScanningAlert) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SecretScanningAlert json value from io.Reader.
func (s *SecretScanningAlert) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SecretScanningAlert from json stream.
func (s *SecretScanningAlert) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			// Unsupported kind "pointer" for field "CreatedAt".
			i.Skip()
			return true
		case "html_url":
			// Unsupported kind "pointer" for field "HTMLURL".
			i.Skip()
			return true
		case "locations_url":
			s.LocationsURL.Reset()
			if err := s.LocationsURL.ReadJSON(i); err != nil {
				i.ReportError("Field LocationsURL", err.Error())
				return false
			}
			return true
		case "number":
			// Unsupported kind "pointer" for field "Number".
			i.Skip()
			return true
		case "resolution":
			s.Resolution.Reset()
			if err := s.Resolution.ReadJSON(i); err != nil {
				i.ReportError("Field Resolution", err.Error())
				return false
			}
			return true
		case "resolved_at":
			s.ResolvedAt.Reset()
			if err := s.ResolvedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field ResolvedAt", err.Error())
				return false
			}
			return true
		case "resolved_by":
			s.ResolvedBy.Reset()
			if err := s.ResolvedBy.ReadJSON(i); err != nil {
				i.ReportError("Field ResolvedBy", err.Error())
				return false
			}
			return true
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(i); err != nil {
				i.ReportError("Field Secret", err.Error())
				return false
			}
			return true
		case "secret_type":
			s.SecretType.Reset()
			if err := s.SecretType.ReadJSON(i); err != nil {
				i.ReportError("Field SecretType", err.Error())
				return false
			}
			return true
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "url":
			// Unsupported kind "pointer" for field "URL".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningAlertResolution) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads SecretScanningAlertResolution from json stream.
func (s *SecretScanningAlertResolution) ReadJSON(i *json.Iterator) error {
	*s = SecretScanningAlertResolution(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningAlertState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads SecretScanningAlertState from json stream.
func (s *SecretScanningAlertState) ReadJSON(i *json.Iterator) error {
	*s = SecretScanningAlertState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SecretScanningUpdateAlertApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Resolution.Set {
		more.More()
		j.WriteObjectField("resolution")
		s.Resolution.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes SecretScanningUpdateAlertApplicationJSONRequest json value to io.Writer.
func (s SecretScanningUpdateAlertApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SecretScanningUpdateAlertApplicationJSONRequest json value from io.Reader.
func (s *SecretScanningUpdateAlertApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SecretScanningUpdateAlertApplicationJSONRequest from json stream.
func (s *SecretScanningUpdateAlertApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "resolution":
			s.Resolution.Reset()
			if err := s.Resolution.ReadJSON(i); err != nil {
				i.ReportError("Field Resolution", err.Error())
				return false
			}
			return true
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SelectedActions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.GithubOwnedAllowed.Set {
		more.More()
		j.WriteObjectField("github_owned_allowed")
		s.GithubOwnedAllowed.WriteJSON(j)
	}

	if s.PatternsAllowed != nil {
		more.More()
		j.WriteObjectField("patterns_allowed")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PatternsAllowed {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	if s.VerifiedAllowed.Set {
		more.More()
		j.WriteObjectField("verified_allowed")
		s.VerifiedAllowed.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes SelectedActions json value to io.Writer.
func (s SelectedActions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SelectedActions json value from io.Reader.
func (s *SelectedActions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SelectedActions from json stream.
func (s *SelectedActions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "github_owned_allowed":
			s.GithubOwnedAllowed.Reset()
			if err := s.GithubOwnedAllowed.ReadJSON(i); err != nil {
				i.ReportError("Field GithubOwnedAllowed", err.Error())
				return false
			}
			return true
		case "patterns_allowed":
			// Unsupported kind "array" for field "PatternsAllowed".
			i.Skip()
			return true
		case "verified_allowed":
			s.VerifiedAllowed.Reset()
			if err := s.VerifiedAllowed.ReadJSON(i); err != nil {
				i.ReportError("Field VerifiedAllowed", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ServiceUnavailable) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Code.Set {
		more.More()
		j.WriteObjectField("code")
		s.Code.WriteJSON(j)
	}

	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ServiceUnavailable json value to io.Writer.
func (s ServiceUnavailable) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ServiceUnavailable json value from io.Reader.
func (s *ServiceUnavailable) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ServiceUnavailable from json stream.
func (s *ServiceUnavailable) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "code":
			s.Code.Reset()
			if err := s.Code.ReadJSON(i); err != nil {
				i.ReportError("Field Code", err.Error())
				return false
			}
			return true
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ShortBlob) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ShortBlob json value to io.Writer.
func (s ShortBlob) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ShortBlob json value from io.Reader.
func (s *ShortBlob) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ShortBlob from json stream.
func (s *ShortBlob) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ShortBranch) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("commit")
	s.Commit.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("protected")
	j.WriteBool(s.Protected)

	if s.Protection.Set {
		more.More()
		j.WriteObjectField("protection")
		s.Protection.WriteJSON(j)
	}

	if s.ProtectionURL.Set {
		more.More()
		j.WriteObjectField("protection_url")
		s.ProtectionURL.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes ShortBranch json value to io.Writer.
func (s ShortBranch) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ShortBranch json value from io.Reader.
func (s *ShortBranch) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ShortBranch from json stream.
func (s *ShortBranch) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commit":
			if err := s.Commit.ReadJSON(i); err != nil {
				i.ReportError("Field Commit", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "protected":
			s.Protected = i.ReadBool()
			return i.Error == nil
		case "protection":
			s.Protection.Reset()
			if err := s.Protection.ReadJSON(i); err != nil {
				i.ReportError("Field Protection", err.Error())
				return false
			}
			return true
		case "protection_url":
			s.ProtectionURL.Reset()
			if err := s.ProtectionURL.ReadJSON(i); err != nil {
				i.ReportError("Field ProtectionURL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ShortBranchCommit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ShortBranchCommit json value to io.Writer.
func (s ShortBranchCommit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ShortBranchCommit json value from io.Reader.
func (s *ShortBranchCommit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ShortBranchCommit from json stream.
func (s *ShortBranchCommit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SimpleCommit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author")
	s.Author.WriteJSON(j)

	more.More()
	j.WriteObjectField("committer")
	s.Committer.WriteJSON(j)

	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	more.More()
	j.WriteObjectField("timestamp")
	json.WriteDateTime(j, s.Timestamp)

	more.More()
	j.WriteObjectField("tree_id")
	j.WriteString(s.TreeID)

	j.WriteObjectEnd()
}

// WriteJSONTo writes SimpleCommit json value to io.Writer.
func (s SimpleCommit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SimpleCommit json value from io.Reader.
func (s *SimpleCommit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SimpleCommit from json stream.
func (s *SimpleCommit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "committer":
			if err := s.Committer.ReadJSON(i); err != nil {
				i.ReportError("Field Committer", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadString()
			return i.Error == nil
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "timestamp":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field Timestamp", err.Error())
				return false
			}
			s.Timestamp = v
			return true
		case "tree_id":
			s.TreeID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SimpleCommitAuthor) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes SimpleCommitAuthor json value to io.Writer.
func (s SimpleCommitAuthor) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SimpleCommitAuthor json value from io.Reader.
func (s *SimpleCommitAuthor) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SimpleCommitAuthor from json stream.
func (s *SimpleCommitAuthor) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SimpleCommitCommitter) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("email")
	j.WriteString(s.Email)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	j.WriteObjectEnd()
}

// WriteJSONTo writes SimpleCommitCommitter json value to io.Writer.
func (s SimpleCommitCommitter) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SimpleCommitCommitter json value from io.Reader.
func (s *SimpleCommitCommitter) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SimpleCommitCommitter from json stream.
func (s *SimpleCommitCommitter) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			s.Email = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SimpleCommitStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("avatar_url")
	s.AvatarURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("context")
	j.WriteString(s.Context)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	if s.Required.Set {
		more.More()
		j.WriteObjectField("required")
		s.Required.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("state")
	j.WriteString(s.State)

	more.More()
	j.WriteObjectField("target_url")
	json.WriteURI(j, s.TargetURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes SimpleCommitStatus json value to io.Writer.
func (s SimpleCommitStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SimpleCommitStatus json value from io.Reader.
func (s *SimpleCommitStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SimpleCommitStatus from json stream.
func (s *SimpleCommitStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			if err := s.AvatarURL.ReadJSON(i); err != nil {
				i.ReportError("Field AvatarURL", err.Error())
				return false
			}
			return true
		case "context":
			s.Context = i.ReadString()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "required":
			s.Required.Reset()
			if err := s.Required.ReadJSON(i); err != nil {
				i.ReportError("Field Required", err.Error())
				return false
			}
			return true
		case "state":
			s.State = i.ReadString()
			return i.Error == nil
		case "target_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TargetURL", err.Error())
				return false
			}
			s.TargetURL = v
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SimpleUser) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("avatar_url")
	json.WriteURI(j, s.AvatarURL)

	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("events_url")
	j.WriteString(s.EventsURL)

	more.More()
	j.WriteObjectField("followers_url")
	json.WriteURI(j, s.FollowersURL)

	more.More()
	j.WriteObjectField("following_url")
	j.WriteString(s.FollowingURL)

	more.More()
	j.WriteObjectField("gists_url")
	j.WriteString(s.GistsURL)

	more.More()
	j.WriteObjectField("gravatar_id")
	s.GravatarID.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("login")
	j.WriteString(s.Login)

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("organizations_url")
	json.WriteURI(j, s.OrganizationsURL)

	more.More()
	j.WriteObjectField("received_events_url")
	json.WriteURI(j, s.ReceivedEventsURL)

	more.More()
	j.WriteObjectField("repos_url")
	json.WriteURI(j, s.ReposURL)

	more.More()
	j.WriteObjectField("site_admin")
	j.WriteBool(s.SiteAdmin)

	if s.StarredAt.Set {
		more.More()
		j.WriteObjectField("starred_at")
		s.StarredAt.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("starred_url")
	j.WriteString(s.StarredURL)

	more.More()
	j.WriteObjectField("subscriptions_url")
	json.WriteURI(j, s.SubscriptionsURL)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes SimpleUser json value to io.Writer.
func (s SimpleUser) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SimpleUser json value from io.Reader.
func (s *SimpleUser) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SimpleUser from json stream.
func (s *SimpleUser) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field AvatarURL", err.Error())
				return false
			}
			s.AvatarURL = v
			return true
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "events_url":
			s.EventsURL = i.ReadString()
			return i.Error == nil
		case "followers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field FollowersURL", err.Error())
				return false
			}
			s.FollowersURL = v
			return true
		case "following_url":
			s.FollowingURL = i.ReadString()
			return i.Error == nil
		case "gists_url":
			s.GistsURL = i.ReadString()
			return i.Error == nil
		case "gravatar_id":
			if err := s.GravatarID.ReadJSON(i); err != nil {
				i.ReportError("Field GravatarID", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "login":
			s.Login = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "organizations_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field OrganizationsURL", err.Error())
				return false
			}
			s.OrganizationsURL = v
			return true
		case "received_events_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ReceivedEventsURL", err.Error())
				return false
			}
			s.ReceivedEventsURL = v
			return true
		case "repos_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ReposURL", err.Error())
				return false
			}
			s.ReposURL = v
			return true
		case "site_admin":
			s.SiteAdmin = i.ReadBool()
			return i.Error == nil
		case "starred_at":
			s.StarredAt.Reset()
			if err := s.StarredAt.ReadJSON(i); err != nil {
				i.ReportError("Field StarredAt", err.Error())
				return false
			}
			return true
		case "starred_url":
			s.StarredURL = i.ReadString()
			return i.Error == nil
		case "subscriptions_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscriptionsURL", err.Error())
				return false
			}
			s.SubscriptionsURL = v
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Status) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("avatar_url")
	s.AvatarURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("context")
	j.WriteString(s.Context)

	more.More()
	j.WriteObjectField("created_at")
	j.WriteString(s.CreatedAt)

	more.More()
	j.WriteObjectField("creator")
	s.Creator.WriteJSON(j)

	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("state")
	j.WriteString(s.State)

	more.More()
	j.WriteObjectField("target_url")
	j.WriteString(s.TargetURL)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	j.WriteString(s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Status json value to io.Writer.
func (s Status) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Status json value from io.Reader.
func (s *Status) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Status from json stream.
func (s *Status) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "avatar_url":
			if err := s.AvatarURL.ReadJSON(i); err != nil {
				i.ReportError("Field AvatarURL", err.Error())
				return false
			}
			return true
		case "context":
			s.Context = i.ReadString()
			return i.Error == nil
		case "created_at":
			s.CreatedAt = i.ReadString()
			return i.Error == nil
		case "creator":
			if err := s.Creator.ReadJSON(i); err != nil {
				i.ReportError("Field Creator", err.Error())
				return false
			}
			return true
		case "description":
			s.Description = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "state":
			s.State = i.ReadString()
			return i.Error == nil
		case "target_url":
			s.TargetURL = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		case "updated_at":
			s.UpdatedAt = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s StatusCheckPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("contexts")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Contexts {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	more.More()
	j.WriteObjectField("contexts_url")
	json.WriteURI(j, s.ContextsURL)

	more.More()
	j.WriteObjectField("strict")
	j.WriteBool(s.Strict)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes StatusCheckPolicy json value to io.Writer.
func (s StatusCheckPolicy) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads StatusCheckPolicy json value from io.Reader.
func (s *StatusCheckPolicy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads StatusCheckPolicy from json stream.
func (s *StatusCheckPolicy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "contexts":
			// Unsupported kind "array" for field "Contexts".
			i.Skip()
			return true
		case "contexts_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ContextsURL", err.Error())
				return false
			}
			s.ContextsURL = v
			return true
		case "strict":
			s.Strict = i.ReadBool()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Tag) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("commit")
	s.Commit.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("tarball_url")
	json.WriteURI(j, s.TarballURL)

	more.More()
	j.WriteObjectField("zipball_url")
	json.WriteURI(j, s.ZipballURL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Tag json value to io.Writer.
func (s Tag) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Tag json value from io.Reader.
func (s *Tag) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Tag from json stream.
func (s *Tag) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commit":
			if err := s.Commit.ReadJSON(i); err != nil {
				i.ReportError("Field Commit", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "tarball_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TarballURL", err.Error())
				return false
			}
			s.TarballURL = v
			return true
		case "zipball_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ZipballURL", err.Error())
				return false
			}
			s.ZipballURL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TagCommit) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sha")
	j.WriteString(s.Sha)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TagCommit json value to io.Writer.
func (s TagCommit) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TagCommit json value from io.Reader.
func (s *TagCommit) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TagCommit from json stream.
func (s *TagCommit) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sha":
			s.Sha = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Team) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("members_url")
	j.WriteString(s.MembersURL)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("parent")
	s.Parent.WriteJSON(j)

	more.More()
	j.WriteObjectField("permission")
	j.WriteString(s.Permission)

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	if s.Privacy.Set {
		more.More()
		j.WriteObjectField("privacy")
		s.Privacy.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("repositories_url")
	json.WriteURI(j, s.RepositoriesURL)

	more.More()
	j.WriteObjectField("slug")
	j.WriteString(s.Slug)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Team json value to io.Writer.
func (s Team) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Team json value from io.Reader.
func (s *Team) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Team from json stream.
func (s *Team) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "members_url":
			s.MembersURL = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "parent":
			if err := s.Parent.ReadJSON(i); err != nil {
				i.ReportError("Field Parent", err.Error())
				return false
			}
			return true
		case "permission":
			s.Permission = i.ReadString()
			return i.Error == nil
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(i); err != nil {
				i.ReportError("Field Privacy", err.Error())
				return false
			}
			return true
		case "repositories_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field RepositoriesURL", err.Error())
				return false
			}
			s.RepositoriesURL = v
			return true
		case "slug":
			s.Slug = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamDiscussion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author")
	s.Author.WriteJSON(j)

	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	more.More()
	j.WriteObjectField("body_html")
	j.WriteString(s.BodyHTML)

	more.More()
	j.WriteObjectField("body_version")
	j.WriteString(s.BodyVersion)

	more.More()
	j.WriteObjectField("comments_count")
	j.WriteInt(s.CommentsCount)

	more.More()
	j.WriteObjectField("comments_url")
	json.WriteURI(j, s.CommentsURL)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("last_edited_at")
	s.LastEditedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("number")
	j.WriteInt(s.Number)

	more.More()
	j.WriteObjectField("pinned")
	j.WriteBool(s.Pinned)

	more.More()
	j.WriteObjectField("private")
	j.WriteBool(s.Private)

	if s.Reactions.Set {
		more.More()
		j.WriteObjectField("reactions")
		s.Reactions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("team_url")
	json.WriteURI(j, s.TeamURL)

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamDiscussion json value to io.Writer.
func (s TeamDiscussion) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamDiscussion json value from io.Reader.
func (s *TeamDiscussion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamDiscussion from json stream.
func (s *TeamDiscussion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "body_html":
			s.BodyHTML = i.ReadString()
			return i.Error == nil
		case "body_version":
			s.BodyVersion = i.ReadString()
			return i.Error == nil
		case "comments_count":
			s.CommentsCount = i.ReadInt()
			return i.Error == nil
		case "comments_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field CommentsURL", err.Error())
				return false
			}
			s.CommentsURL = v
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "last_edited_at":
			if err := s.LastEditedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field LastEditedAt", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "number":
			s.Number = i.ReadInt()
			return i.Error == nil
		case "pinned":
			s.Pinned = i.ReadBool()
			return i.Error == nil
		case "private":
			s.Private = i.ReadBool()
			return i.Error == nil
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(i); err != nil {
				i.ReportError("Field Reactions", err.Error())
				return false
			}
			return true
		case "team_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TeamURL", err.Error())
				return false
			}
			s.TeamURL = v
			return true
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamDiscussionComment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("author")
	s.Author.WriteJSON(j)

	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	more.More()
	j.WriteObjectField("body_html")
	j.WriteString(s.BodyHTML)

	more.More()
	j.WriteObjectField("body_version")
	j.WriteString(s.BodyVersion)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("discussion_url")
	json.WriteURI(j, s.DiscussionURL)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("last_edited_at")
	s.LastEditedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("number")
	j.WriteInt(s.Number)

	if s.Reactions.Set {
		more.More()
		j.WriteObjectField("reactions")
		s.Reactions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamDiscussionComment json value to io.Writer.
func (s TeamDiscussionComment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamDiscussionComment json value from io.Reader.
func (s *TeamDiscussionComment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamDiscussionComment from json stream.
func (s *TeamDiscussionComment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "author":
			if err := s.Author.ReadJSON(i); err != nil {
				i.ReportError("Field Author", err.Error())
				return false
			}
			return true
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "body_html":
			s.BodyHTML = i.ReadString()
			return i.Error == nil
		case "body_version":
			s.BodyVersion = i.ReadString()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "discussion_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DiscussionURL", err.Error())
				return false
			}
			s.DiscussionURL = v
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "last_edited_at":
			if err := s.LastEditedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field LastEditedAt", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "number":
			s.Number = i.ReadInt()
			return i.Error == nil
		case "reactions":
			s.Reactions.Reset()
			if err := s.Reactions.ReadJSON(i); err != nil {
				i.ReportError("Field Reactions", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamFull) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.LdapDn.Set {
		more.More()
		j.WriteObjectField("ldap_dn")
		s.LdapDn.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("members_count")
	j.WriteInt(s.MembersCount)

	more.More()
	j.WriteObjectField("members_url")
	j.WriteString(s.MembersURL)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("organization")
	s.Organization.WriteJSON(j)

	if s.Parent.Set {
		more.More()
		j.WriteObjectField("parent")
		s.Parent.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("permission")
	j.WriteString(s.Permission)

	if s.Privacy.Set {
		more.More()
		j.WriteObjectField("privacy")
		s.Privacy.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("repos_count")
	j.WriteInt(s.ReposCount)

	more.More()
	j.WriteObjectField("repositories_url")
	json.WriteURI(j, s.RepositoriesURL)

	more.More()
	j.WriteObjectField("slug")
	j.WriteString(s.Slug)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamFull json value to io.Writer.
func (s TeamFull) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamFull json value from io.Reader.
func (s *TeamFull) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamFull from json stream.
func (s *TeamFull) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "ldap_dn":
			s.LdapDn.Reset()
			if err := s.LdapDn.ReadJSON(i); err != nil {
				i.ReportError("Field LdapDn", err.Error())
				return false
			}
			return true
		case "members_count":
			s.MembersCount = i.ReadInt()
			return i.Error == nil
		case "members_url":
			s.MembersURL = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "organization":
			if err := s.Organization.ReadJSON(i); err != nil {
				i.ReportError("Field Organization", err.Error())
				return false
			}
			return true
		case "parent":
			s.Parent.Reset()
			if err := s.Parent.ReadJSON(i); err != nil {
				i.ReportError("Field Parent", err.Error())
				return false
			}
			return true
		case "permission":
			s.Permission = i.ReadString()
			return i.Error == nil
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(i); err != nil {
				i.ReportError("Field Privacy", err.Error())
				return false
			}
			return true
		case "repos_count":
			s.ReposCount = i.ReadInt()
			return i.Error == nil
		case "repositories_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field RepositoriesURL", err.Error())
				return false
			}
			s.RepositoriesURL = v
			return true
		case "slug":
			s.Slug = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamFullPrivacy) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamFullPrivacy from json stream.
func (s *TeamFullPrivacy) ReadJSON(i *json.Iterator) error {
	*s = TeamFullPrivacy(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamMembership) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("role")
	s.Role.WriteJSON(j)

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamMembership json value to io.Writer.
func (s TeamMembership) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamMembership json value from io.Reader.
func (s *TeamMembership) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamMembership from json stream.
func (s *TeamMembership) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "role":
			if err := s.Role.ReadJSON(i); err != nil {
				i.ReportError("Field Role", err.Error())
				return false
			}
			return true
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamMembershipRole) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamMembershipRole from json stream.
func (s *TeamMembershipRole) ReadJSON(i *json.Iterator) error {
	*s = TeamMembershipRole(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamMembershipState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamMembershipState from json stream.
func (s *TeamMembershipState) ReadJSON(i *json.Iterator) error {
	*s = TeamMembershipState(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admin")
	j.WriteBool(s.Admin)

	more.More()
	j.WriteObjectField("maintain")
	j.WriteBool(s.Maintain)

	more.More()
	j.WriteObjectField("pull")
	j.WriteBool(s.Pull)

	more.More()
	j.WriteObjectField("push")
	j.WriteBool(s.Push)

	more.More()
	j.WriteObjectField("triage")
	j.WriteBool(s.Triage)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamPermissions json value to io.Writer.
func (s TeamPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamPermissions json value from io.Reader.
func (s *TeamPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamPermissions from json stream.
func (s *TeamPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admin":
			s.Admin = i.ReadBool()
			return i.Error == nil
		case "maintain":
			s.Maintain = i.ReadBool()
			return i.Error == nil
		case "pull":
			s.Pull = i.ReadBool()
			return i.Error == nil
		case "push":
			s.Push = i.ReadBool()
			return i.Error == nil
		case "triage":
			s.Triage = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamProject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	s.Body.WriteJSON(j)

	more.More()
	j.WriteObjectField("columns_url")
	j.WriteString(s.ColumnsURL)

	more.More()
	j.WriteObjectField("created_at")
	j.WriteString(s.CreatedAt)

	more.More()
	j.WriteObjectField("creator")
	s.Creator.WriteJSON(j)

	more.More()
	j.WriteObjectField("html_url")
	j.WriteString(s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("number")
	j.WriteInt(s.Number)

	if s.OrganizationPermission.Set {
		more.More()
		j.WriteObjectField("organization_permission")
		s.OrganizationPermission.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("owner_url")
	j.WriteString(s.OwnerURL)

	more.More()
	j.WriteObjectField("permissions")
	s.Permissions.WriteJSON(j)

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("state")
	j.WriteString(s.State)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	j.WriteString(s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamProject json value to io.Writer.
func (s TeamProject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamProject json value from io.Reader.
func (s *TeamProject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamProject from json stream.
func (s *TeamProject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "columns_url":
			s.ColumnsURL = i.ReadString()
			return i.Error == nil
		case "created_at":
			s.CreatedAt = i.ReadString()
			return i.Error == nil
		case "creator":
			if err := s.Creator.ReadJSON(i); err != nil {
				i.ReportError("Field Creator", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "number":
			s.Number = i.ReadInt()
			return i.Error == nil
		case "organization_permission":
			s.OrganizationPermission.Reset()
			if err := s.OrganizationPermission.ReadJSON(i); err != nil {
				i.ReportError("Field OrganizationPermission", err.Error())
				return false
			}
			return true
		case "owner_url":
			s.OwnerURL = i.ReadString()
			return i.Error == nil
		case "permissions":
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		case "state":
			s.State = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		case "updated_at":
			s.UpdatedAt = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamProjectPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admin")
	j.WriteBool(s.Admin)

	more.More()
	j.WriteObjectField("read")
	j.WriteBool(s.Read)

	more.More()
	j.WriteObjectField("write")
	j.WriteBool(s.Write)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamProjectPermissions json value to io.Writer.
func (s TeamProjectPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamProjectPermissions json value from io.Reader.
func (s *TeamProjectPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamProjectPermissions from json stream.
func (s *TeamProjectPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admin":
			s.Admin = i.ReadBool()
			return i.Error == nil
		case "read":
			s.Read = i.ReadBool()
			return i.Error == nil
		case "write":
			s.Write = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamRepository) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowAutoMerge.Set {
		more.More()
		j.WriteObjectField("allow_auto_merge")
		s.AllowAutoMerge.WriteJSON(j)
	}

	if s.AllowForking.Set {
		more.More()
		j.WriteObjectField("allow_forking")
		s.AllowForking.WriteJSON(j)
	}

	if s.AllowMergeCommit.Set {
		more.More()
		j.WriteObjectField("allow_merge_commit")
		s.AllowMergeCommit.WriteJSON(j)
	}

	if s.AllowRebaseMerge.Set {
		more.More()
		j.WriteObjectField("allow_rebase_merge")
		s.AllowRebaseMerge.WriteJSON(j)
	}

	if s.AllowSquashMerge.Set {
		more.More()
		j.WriteObjectField("allow_squash_merge")
		s.AllowSquashMerge.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("archive_url")
	j.WriteString(s.ArchiveURL)

	more.More()
	j.WriteObjectField("archived")
	j.WriteBool(s.Archived)

	more.More()
	j.WriteObjectField("assignees_url")
	j.WriteString(s.AssigneesURL)

	more.More()
	j.WriteObjectField("blobs_url")
	j.WriteString(s.BlobsURL)

	more.More()
	j.WriteObjectField("branches_url")
	j.WriteString(s.BranchesURL)

	more.More()
	j.WriteObjectField("clone_url")
	j.WriteString(s.CloneURL)

	more.More()
	j.WriteObjectField("collaborators_url")
	j.WriteString(s.CollaboratorsURL)

	more.More()
	j.WriteObjectField("comments_url")
	j.WriteString(s.CommentsURL)

	more.More()
	j.WriteObjectField("commits_url")
	j.WriteString(s.CommitsURL)

	more.More()
	j.WriteObjectField("compare_url")
	j.WriteString(s.CompareURL)

	more.More()
	j.WriteObjectField("contents_url")
	j.WriteString(s.ContentsURL)

	more.More()
	j.WriteObjectField("contributors_url")
	json.WriteURI(j, s.ContributorsURL)

	more.More()
	j.WriteObjectField("created_at")
	s.CreatedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("default_branch")
	j.WriteString(s.DefaultBranch)

	if s.DeleteBranchOnMerge.Set {
		more.More()
		j.WriteObjectField("delete_branch_on_merge")
		s.DeleteBranchOnMerge.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("deployments_url")
	json.WriteURI(j, s.DeploymentsURL)

	more.More()
	j.WriteObjectField("description")
	s.Description.WriteJSON(j)

	more.More()
	j.WriteObjectField("disabled")
	j.WriteBool(s.Disabled)

	more.More()
	j.WriteObjectField("downloads_url")
	json.WriteURI(j, s.DownloadsURL)

	more.More()
	j.WriteObjectField("events_url")
	json.WriteURI(j, s.EventsURL)

	more.More()
	j.WriteObjectField("fork")
	j.WriteBool(s.Fork)

	more.More()
	j.WriteObjectField("forks")
	j.WriteInt(s.Forks)

	more.More()
	j.WriteObjectField("forks_count")
	j.WriteInt(s.ForksCount)

	more.More()
	j.WriteObjectField("forks_url")
	json.WriteURI(j, s.ForksURL)

	more.More()
	j.WriteObjectField("full_name")
	j.WriteString(s.FullName)

	more.More()
	j.WriteObjectField("git_commits_url")
	j.WriteString(s.GitCommitsURL)

	more.More()
	j.WriteObjectField("git_refs_url")
	j.WriteString(s.GitRefsURL)

	more.More()
	j.WriteObjectField("git_tags_url")
	j.WriteString(s.GitTagsURL)

	more.More()
	j.WriteObjectField("git_url")
	j.WriteString(s.GitURL)

	more.More()
	j.WriteObjectField("html_url")
	json.WriteURI(j, s.HTMLURL)

	more.More()
	j.WriteObjectField("has_downloads")
	j.WriteBool(s.HasDownloads)

	more.More()
	j.WriteObjectField("has_issues")
	j.WriteBool(s.HasIssues)

	more.More()
	j.WriteObjectField("has_pages")
	j.WriteBool(s.HasPages)

	more.More()
	j.WriteObjectField("has_projects")
	j.WriteBool(s.HasProjects)

	more.More()
	j.WriteObjectField("has_wiki")
	j.WriteBool(s.HasWiki)

	more.More()
	j.WriteObjectField("homepage")
	s.Homepage.WriteJSON(j)

	more.More()
	j.WriteObjectField("hooks_url")
	json.WriteURI(j, s.HooksURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	if s.IsTemplate.Set {
		more.More()
		j.WriteObjectField("is_template")
		s.IsTemplate.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("issue_comment_url")
	j.WriteString(s.IssueCommentURL)

	more.More()
	j.WriteObjectField("issue_events_url")
	j.WriteString(s.IssueEventsURL)

	more.More()
	j.WriteObjectField("issues_url")
	j.WriteString(s.IssuesURL)

	more.More()
	j.WriteObjectField("keys_url")
	j.WriteString(s.KeysURL)

	more.More()
	j.WriteObjectField("labels_url")
	j.WriteString(s.LabelsURL)

	more.More()
	j.WriteObjectField("language")
	s.Language.WriteJSON(j)

	more.More()
	j.WriteObjectField("languages_url")
	json.WriteURI(j, s.LanguagesURL)

	more.More()
	j.WriteObjectField("license")
	s.License.WriteJSON(j)

	if s.MasterBranch.Set {
		more.More()
		j.WriteObjectField("master_branch")
		s.MasterBranch.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("merges_url")
	json.WriteURI(j, s.MergesURL)

	more.More()
	j.WriteObjectField("milestones_url")
	j.WriteString(s.MilestonesURL)

	more.More()
	j.WriteObjectField("mirror_url")
	s.MirrorURL.WriteJSON(j)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.NetworkCount.Set {
		more.More()
		j.WriteObjectField("network_count")
		s.NetworkCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("notifications_url")
	j.WriteString(s.NotificationsURL)

	more.More()
	j.WriteObjectField("open_issues")
	j.WriteInt(s.OpenIssues)

	more.More()
	j.WriteObjectField("open_issues_count")
	j.WriteInt(s.OpenIssuesCount)

	more.More()
	j.WriteObjectField("owner")
	s.Owner.WriteJSON(j)

	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("private")
	j.WriteBool(s.Private)

	more.More()
	j.WriteObjectField("pulls_url")
	j.WriteString(s.PullsURL)

	more.More()
	j.WriteObjectField("pushed_at")
	s.PushedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("releases_url")
	j.WriteString(s.ReleasesURL)

	more.More()
	j.WriteObjectField("ssh_url")
	j.WriteString(s.SSHURL)

	more.More()
	j.WriteObjectField("size")
	j.WriteInt(s.Size)

	more.More()
	j.WriteObjectField("stargazers_count")
	j.WriteInt(s.StargazersCount)

	more.More()
	j.WriteObjectField("stargazers_url")
	json.WriteURI(j, s.StargazersURL)

	more.More()
	j.WriteObjectField("statuses_url")
	j.WriteString(s.StatusesURL)

	if s.SubscribersCount.Set {
		more.More()
		j.WriteObjectField("subscribers_count")
		s.SubscribersCount.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("subscribers_url")
	json.WriteURI(j, s.SubscribersURL)

	more.More()
	j.WriteObjectField("subscription_url")
	json.WriteURI(j, s.SubscriptionURL)

	more.More()
	j.WriteObjectField("svn_url")
	json.WriteURI(j, s.SvnURL)

	more.More()
	j.WriteObjectField("tags_url")
	json.WriteURI(j, s.TagsURL)

	more.More()
	j.WriteObjectField("teams_url")
	json.WriteURI(j, s.TeamsURL)

	if s.TempCloneToken.Set {
		more.More()
		j.WriteObjectField("temp_clone_token")
		s.TempCloneToken.WriteJSON(j)
	}

	if s.TemplateRepository.Set {
		more.More()
		j.WriteObjectField("template_repository")
		s.TemplateRepository.WriteJSON(j)
	}

	if s.Topics != nil {
		more.More()
		j.WriteObjectField("topics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Topics {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("trees_url")
	j.WriteString(s.TreesURL)

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	s.UpdatedAt.WriteJSON(j, json.WriteDateTime)

	if s.Visibility.Set {
		more.More()
		j.WriteObjectField("visibility")
		s.Visibility.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("watchers")
	j.WriteInt(s.Watchers)

	more.More()
	j.WriteObjectField("watchers_count")
	j.WriteInt(s.WatchersCount)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamRepository json value to io.Writer.
func (s TeamRepository) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamRepository json value from io.Reader.
func (s *TeamRepository) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamRepository from json stream.
func (s *TeamRepository) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_auto_merge":
			s.AllowAutoMerge.Reset()
			if err := s.AllowAutoMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowAutoMerge", err.Error())
				return false
			}
			return true
		case "allow_forking":
			s.AllowForking.Reset()
			if err := s.AllowForking.ReadJSON(i); err != nil {
				i.ReportError("Field AllowForking", err.Error())
				return false
			}
			return true
		case "allow_merge_commit":
			s.AllowMergeCommit.Reset()
			if err := s.AllowMergeCommit.ReadJSON(i); err != nil {
				i.ReportError("Field AllowMergeCommit", err.Error())
				return false
			}
			return true
		case "allow_rebase_merge":
			s.AllowRebaseMerge.Reset()
			if err := s.AllowRebaseMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowRebaseMerge", err.Error())
				return false
			}
			return true
		case "allow_squash_merge":
			s.AllowSquashMerge.Reset()
			if err := s.AllowSquashMerge.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSquashMerge", err.Error())
				return false
			}
			return true
		case "archive_url":
			s.ArchiveURL = i.ReadString()
			return i.Error == nil
		case "archived":
			s.Archived = i.ReadBool()
			return i.Error == nil
		case "assignees_url":
			s.AssigneesURL = i.ReadString()
			return i.Error == nil
		case "blobs_url":
			s.BlobsURL = i.ReadString()
			return i.Error == nil
		case "branches_url":
			s.BranchesURL = i.ReadString()
			return i.Error == nil
		case "clone_url":
			s.CloneURL = i.ReadString()
			return i.Error == nil
		case "collaborators_url":
			s.CollaboratorsURL = i.ReadString()
			return i.Error == nil
		case "comments_url":
			s.CommentsURL = i.ReadString()
			return i.Error == nil
		case "commits_url":
			s.CommitsURL = i.ReadString()
			return i.Error == nil
		case "compare_url":
			s.CompareURL = i.ReadString()
			return i.Error == nil
		case "contents_url":
			s.ContentsURL = i.ReadString()
			return i.Error == nil
		case "contributors_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ContributorsURL", err.Error())
				return false
			}
			s.ContributorsURL = v
			return true
		case "created_at":
			if err := s.CreatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "default_branch":
			s.DefaultBranch = i.ReadString()
			return i.Error == nil
		case "delete_branch_on_merge":
			s.DeleteBranchOnMerge.Reset()
			if err := s.DeleteBranchOnMerge.ReadJSON(i); err != nil {
				i.ReportError("Field DeleteBranchOnMerge", err.Error())
				return false
			}
			return true
		case "deployments_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DeploymentsURL", err.Error())
				return false
			}
			s.DeploymentsURL = v
			return true
		case "description":
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "disabled":
			s.Disabled = i.ReadBool()
			return i.Error == nil
		case "downloads_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field DownloadsURL", err.Error())
				return false
			}
			s.DownloadsURL = v
			return true
		case "events_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field EventsURL", err.Error())
				return false
			}
			s.EventsURL = v
			return true
		case "fork":
			s.Fork = i.ReadBool()
			return i.Error == nil
		case "forks":
			s.Forks = i.ReadInt()
			return i.Error == nil
		case "forks_count":
			s.ForksCount = i.ReadInt()
			return i.Error == nil
		case "forks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field ForksURL", err.Error())
				return false
			}
			s.ForksURL = v
			return true
		case "full_name":
			s.FullName = i.ReadString()
			return i.Error == nil
		case "git_commits_url":
			s.GitCommitsURL = i.ReadString()
			return i.Error == nil
		case "git_refs_url":
			s.GitRefsURL = i.ReadString()
			return i.Error == nil
		case "git_tags_url":
			s.GitTagsURL = i.ReadString()
			return i.Error == nil
		case "git_url":
			s.GitURL = i.ReadString()
			return i.Error == nil
		case "html_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HTMLURL", err.Error())
				return false
			}
			s.HTMLURL = v
			return true
		case "has_downloads":
			s.HasDownloads = i.ReadBool()
			return i.Error == nil
		case "has_issues":
			s.HasIssues = i.ReadBool()
			return i.Error == nil
		case "has_pages":
			s.HasPages = i.ReadBool()
			return i.Error == nil
		case "has_projects":
			s.HasProjects = i.ReadBool()
			return i.Error == nil
		case "has_wiki":
			s.HasWiki = i.ReadBool()
			return i.Error == nil
		case "homepage":
			if err := s.Homepage.ReadJSON(i); err != nil {
				i.ReportError("Field Homepage", err.Error())
				return false
			}
			return true
		case "hooks_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field HooksURL", err.Error())
				return false
			}
			s.HooksURL = v
			return true
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "is_template":
			s.IsTemplate.Reset()
			if err := s.IsTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field IsTemplate", err.Error())
				return false
			}
			return true
		case "issue_comment_url":
			s.IssueCommentURL = i.ReadString()
			return i.Error == nil
		case "issue_events_url":
			s.IssueEventsURL = i.ReadString()
			return i.Error == nil
		case "issues_url":
			s.IssuesURL = i.ReadString()
			return i.Error == nil
		case "keys_url":
			s.KeysURL = i.ReadString()
			return i.Error == nil
		case "labels_url":
			s.LabelsURL = i.ReadString()
			return i.Error == nil
		case "language":
			if err := s.Language.ReadJSON(i); err != nil {
				i.ReportError("Field Language", err.Error())
				return false
			}
			return true
		case "languages_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field LanguagesURL", err.Error())
				return false
			}
			s.LanguagesURL = v
			return true
		case "license":
			if err := s.License.ReadJSON(i); err != nil {
				i.ReportError("Field License", err.Error())
				return false
			}
			return true
		case "master_branch":
			s.MasterBranch.Reset()
			if err := s.MasterBranch.ReadJSON(i); err != nil {
				i.ReportError("Field MasterBranch", err.Error())
				return false
			}
			return true
		case "merges_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field MergesURL", err.Error())
				return false
			}
			s.MergesURL = v
			return true
		case "milestones_url":
			s.MilestonesURL = i.ReadString()
			return i.Error == nil
		case "mirror_url":
			if err := s.MirrorURL.ReadJSON(i); err != nil {
				i.ReportError("Field MirrorURL", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "network_count":
			s.NetworkCount.Reset()
			if err := s.NetworkCount.ReadJSON(i); err != nil {
				i.ReportError("Field NetworkCount", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "notifications_url":
			s.NotificationsURL = i.ReadString()
			return i.Error == nil
		case "open_issues":
			s.OpenIssues = i.ReadInt()
			return i.Error == nil
		case "open_issues_count":
			s.OpenIssuesCount = i.ReadInt()
			return i.Error == nil
		case "owner":
			if err := s.Owner.ReadJSON(i); err != nil {
				i.ReportError("Field Owner", err.Error())
				return false
			}
			return true
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "private":
			s.Private = i.ReadBool()
			return i.Error == nil
		case "pulls_url":
			s.PullsURL = i.ReadString()
			return i.Error == nil
		case "pushed_at":
			if err := s.PushedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field PushedAt", err.Error())
				return false
			}
			return true
		case "releases_url":
			s.ReleasesURL = i.ReadString()
			return i.Error == nil
		case "ssh_url":
			s.SSHURL = i.ReadString()
			return i.Error == nil
		case "size":
			s.Size = i.ReadInt()
			return i.Error == nil
		case "stargazers_count":
			s.StargazersCount = i.ReadInt()
			return i.Error == nil
		case "stargazers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field StargazersURL", err.Error())
				return false
			}
			s.StargazersURL = v
			return true
		case "statuses_url":
			s.StatusesURL = i.ReadString()
			return i.Error == nil
		case "subscribers_count":
			s.SubscribersCount.Reset()
			if err := s.SubscribersCount.ReadJSON(i); err != nil {
				i.ReportError("Field SubscribersCount", err.Error())
				return false
			}
			return true
		case "subscribers_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscribersURL", err.Error())
				return false
			}
			s.SubscribersURL = v
			return true
		case "subscription_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SubscriptionURL", err.Error())
				return false
			}
			s.SubscriptionURL = v
			return true
		case "svn_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field SvnURL", err.Error())
				return false
			}
			s.SvnURL = v
			return true
		case "tags_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TagsURL", err.Error())
				return false
			}
			s.TagsURL = v
			return true
		case "teams_url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field TeamsURL", err.Error())
				return false
			}
			s.TeamsURL = v
			return true
		case "temp_clone_token":
			s.TempCloneToken.Reset()
			if err := s.TempCloneToken.ReadJSON(i); err != nil {
				i.ReportError("Field TempCloneToken", err.Error())
				return false
			}
			return true
		case "template_repository":
			s.TemplateRepository.Reset()
			if err := s.TemplateRepository.ReadJSON(i); err != nil {
				i.ReportError("Field TemplateRepository", err.Error())
				return false
			}
			return true
		case "topics":
			// Unsupported kind "array" for field "Topics".
			i.Skip()
			return true
		case "trees_url":
			s.TreesURL = i.ReadString()
			return i.Error == nil
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		case "visibility":
			s.Visibility.Reset()
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		case "watchers":
			s.Watchers = i.ReadInt()
			return i.Error == nil
		case "watchers_count":
			s.WatchersCount = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamRepositoryPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admin")
	j.WriteBool(s.Admin)

	if s.Maintain.Set {
		more.More()
		j.WriteObjectField("maintain")
		s.Maintain.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("pull")
	j.WriteBool(s.Pull)

	more.More()
	j.WriteObjectField("push")
	j.WriteBool(s.Push)

	if s.Triage.Set {
		more.More()
		j.WriteObjectField("triage")
		s.Triage.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamRepositoryPermissions json value to io.Writer.
func (s TeamRepositoryPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamRepositoryPermissions json value from io.Reader.
func (s *TeamRepositoryPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamRepositoryPermissions from json stream.
func (s *TeamRepositoryPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admin":
			s.Admin = i.ReadBool()
			return i.Error == nil
		case "maintain":
			s.Maintain.Reset()
			if err := s.Maintain.ReadJSON(i); err != nil {
				i.ReportError("Field Maintain", err.Error())
				return false
			}
			return true
		case "pull":
			s.Pull = i.ReadBool()
			return i.Error == nil
		case "push":
			s.Push = i.ReadBool()
			return i.Error == nil
		case "triage":
			s.Triage.Reset()
			if err := s.Triage.ReadJSON(i); err != nil {
				i.ReportError("Field Triage", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Role.Set {
		more.More()
		j.WriteObjectField("role")
		s.Role.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest json value to io.Writer.
func (s TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest json value from io.Reader.
func (s *TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest from json stream.
func (s *TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(i); err != nil {
				i.ReportError("Field Role", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole from json stream.
func (s *TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole) ReadJSON(i *json.Iterator) error {
	*s = TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Role.Set {
		more.More()
		j.WriteObjectField("role")
		s.Role.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest json value to io.Writer.
func (s TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest json value from io.Reader.
func (s *TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest from json stream.
func (s *TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(i); err != nil {
				i.ReportError("Field Role", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole from json stream.
func (s *TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole) ReadJSON(i *json.Iterator) error {
	*s = TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		j.WriteObjectField("permission")
		s.Permission.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest json value to io.Writer.
func (s TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest json value from io.Reader.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(i); err != nil {
				i.ReportError("Field Permission", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	*s = TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsInOrgForbidden) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsAddOrUpdateProjectPermissionsInOrgForbidden json value to io.Writer.
func (s TeamsAddOrUpdateProjectPermissionsInOrgForbidden) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsAddOrUpdateProjectPermissionsInOrgForbidden json value from io.Reader.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgForbidden) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsInOrgForbidden from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgForbidden) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		j.WriteObjectField("permission")
		s.Permission.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest json value to io.Writer.
func (s TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest json value from io.Reader.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(i); err != nil {
				i.ReportError("Field Permission", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	*s = TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateProjectPermissionsLegacyForbidden) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DocumentationURL.Set {
		more.More()
		j.WriteObjectField("documentation_url")
		s.DocumentationURL.WriteJSON(j)
	}

	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsAddOrUpdateProjectPermissionsLegacyForbidden json value to io.Writer.
func (s TeamsAddOrUpdateProjectPermissionsLegacyForbidden) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsAddOrUpdateProjectPermissionsLegacyForbidden json value from io.Reader.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyForbidden) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsAddOrUpdateProjectPermissionsLegacyForbidden from json stream.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyForbidden) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL.Reset()
			if err := s.DocumentationURL.ReadJSON(i); err != nil {
				i.ReportError("Field DocumentationURL", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		j.WriteObjectField("permission")
		s.Permission.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest json value to io.Writer.
func (s TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest json value from io.Reader.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest from json stream.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(i); err != nil {
				i.ReportError("Field Permission", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission from json stream.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	*s = TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Permission.Set {
		more.More()
		j.WriteObjectField("permission")
		s.Permission.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest json value to io.Writer.
func (s TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest json value from io.Reader.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest from json stream.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(i); err != nil {
				i.ReportError("Field Permission", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission from json stream.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	*s = TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.Maintainers != nil {
		more.More()
		j.WriteObjectField("maintainers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Maintainers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.ParentTeamID.Set {
		more.More()
		j.WriteObjectField("parent_team_id")
		s.ParentTeamID.WriteJSON(j)
	}

	if s.Permission.Set {
		more.More()
		j.WriteObjectField("permission")
		s.Permission.WriteJSON(j)
	}

	if s.Privacy.Set {
		more.More()
		j.WriteObjectField("privacy")
		s.Privacy.WriteJSON(j)
	}

	if s.RepoNames != nil {
		more.More()
		j.WriteObjectField("repo_names")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RepoNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsCreateApplicationJSONRequest json value to io.Writer.
func (s TeamsCreateApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsCreateApplicationJSONRequest json value from io.Reader.
func (s *TeamsCreateApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsCreateApplicationJSONRequest from json stream.
func (s *TeamsCreateApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "maintainers":
			// Unsupported kind "array" for field "Maintainers".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "parent_team_id":
			s.ParentTeamID.Reset()
			if err := s.ParentTeamID.ReadJSON(i); err != nil {
				i.ReportError("Field ParentTeamID", err.Error())
				return false
			}
			return true
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(i); err != nil {
				i.ReportError("Field Permission", err.Error())
				return false
			}
			return true
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(i); err != nil {
				i.ReportError("Field Privacy", err.Error())
				return false
			}
			return true
		case "repo_names":
			// Unsupported kind "array" for field "RepoNames".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsCreateApplicationJSONRequestPermission from json stream.
func (s *TeamsCreateApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	*s = TeamsCreateApplicationJSONRequestPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateApplicationJSONRequestPrivacy) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsCreateApplicationJSONRequestPrivacy from json stream.
func (s *TeamsCreateApplicationJSONRequestPrivacy) ReadJSON(i *json.Iterator) error {
	*s = TeamsCreateApplicationJSONRequestPrivacy(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateDiscussionCommentInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsCreateDiscussionCommentInOrgApplicationJSONRequest json value to io.Writer.
func (s TeamsCreateDiscussionCommentInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsCreateDiscussionCommentInOrgApplicationJSONRequest json value from io.Reader.
func (s *TeamsCreateDiscussionCommentInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsCreateDiscussionCommentInOrgApplicationJSONRequest from json stream.
func (s *TeamsCreateDiscussionCommentInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateDiscussionCommentLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsCreateDiscussionCommentLegacyApplicationJSONRequest json value to io.Writer.
func (s TeamsCreateDiscussionCommentLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsCreateDiscussionCommentLegacyApplicationJSONRequest json value from io.Reader.
func (s *TeamsCreateDiscussionCommentLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsCreateDiscussionCommentLegacyApplicationJSONRequest from json stream.
func (s *TeamsCreateDiscussionCommentLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateDiscussionInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsCreateDiscussionInOrgApplicationJSONRequest json value to io.Writer.
func (s TeamsCreateDiscussionInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsCreateDiscussionInOrgApplicationJSONRequest json value from io.Reader.
func (s *TeamsCreateDiscussionInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsCreateDiscussionInOrgApplicationJSONRequest from json stream.
func (s *TeamsCreateDiscussionInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateDiscussionLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	if s.Private.Set {
		more.More()
		j.WriteObjectField("private")
		s.Private.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsCreateDiscussionLegacyApplicationJSONRequest json value to io.Writer.
func (s TeamsCreateDiscussionLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsCreateDiscussionLegacyApplicationJSONRequest json value from io.Reader.
func (s *TeamsCreateDiscussionLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsCreateDiscussionLegacyApplicationJSONRequest from json stream.
func (s *TeamsCreateDiscussionLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		case "private":
			s.Private.Reset()
			if err := s.Private.ReadJSON(i); err != nil {
				i.ReportError("Field Private", err.Error())
				return false
			}
			return true
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest json value to io.Writer.
func (s TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest json value from io.Reader.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest from json stream.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("group_description")
	j.WriteString(s.GroupDescription)

	more.More()
	j.WriteObjectField("group_id")
	j.WriteString(s.GroupID)

	more.More()
	j.WriteObjectField("group_name")
	j.WriteString(s.GroupName)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem json value to io.Writer.
func (s TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem json value from io.Reader.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem from json stream.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "group_description":
			s.GroupDescription = i.ReadString()
			return i.Error == nil
		case "group_id":
			s.GroupID = i.ReadString()
			return i.Error == nil
		case "group_name":
			s.GroupName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("groups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Groups {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()

	if s.SyncedAt.Set {
		more.More()
		j.WriteObjectField("synced_at")
		s.SyncedAt.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest json value to io.Writer.
func (s TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest json value from io.Reader.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest from json stream.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "synced_at":
			s.SyncedAt.Reset()
			if err := s.SyncedAt.ReadJSON(i); err != nil {
				i.ReportError("Field SyncedAt", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("group_description")
	j.WriteString(s.GroupDescription)

	more.More()
	j.WriteObjectField("group_id")
	j.WriteString(s.GroupID)

	more.More()
	j.WriteObjectField("group_name")
	j.WriteString(s.GroupName)

	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem json value to io.Writer.
func (s TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem json value from io.Reader.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem from json stream.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "group_description":
			s.GroupDescription = i.ReadString()
			return i.Error == nil
		case "group_id":
			s.GroupID = i.ReadString()
			return i.Error == nil
		case "group_name":
			s.GroupName = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest json value to io.Writer.
func (s TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest json value from io.Reader.
func (s *TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest from json stream.
func (s *TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("body")
	j.WriteString(s.Body)

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest json value to io.Writer.
func (s TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest json value from io.Reader.
func (s *TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest from json stream.
func (s *TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateDiscussionInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsUpdateDiscussionInOrgApplicationJSONRequest json value to io.Writer.
func (s TeamsUpdateDiscussionInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsUpdateDiscussionInOrgApplicationJSONRequest json value from io.Reader.
func (s *TeamsUpdateDiscussionInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsUpdateDiscussionInOrgApplicationJSONRequest from json stream.
func (s *TeamsUpdateDiscussionInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateDiscussionLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Body.Set {
		more.More()
		j.WriteObjectField("body")
		s.Body.WriteJSON(j)
	}

	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsUpdateDiscussionLegacyApplicationJSONRequest json value to io.Writer.
func (s TeamsUpdateDiscussionLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsUpdateDiscussionLegacyApplicationJSONRequest json value from io.Reader.
func (s *TeamsUpdateDiscussionLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsUpdateDiscussionLegacyApplicationJSONRequest from json stream.
func (s *TeamsUpdateDiscussionLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "body":
			s.Body.Reset()
			if err := s.Body.ReadJSON(i); err != nil {
				i.ReportError("Field Body", err.Error())
				return false
			}
			return true
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateInOrgApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.ParentTeamID.Set {
		more.More()
		j.WriteObjectField("parent_team_id")
		s.ParentTeamID.WriteJSON(j)
	}

	if s.Permission.Set {
		more.More()
		j.WriteObjectField("permission")
		s.Permission.WriteJSON(j)
	}

	if s.Privacy.Set {
		more.More()
		j.WriteObjectField("privacy")
		s.Privacy.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsUpdateInOrgApplicationJSONRequest json value to io.Writer.
func (s TeamsUpdateInOrgApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsUpdateInOrgApplicationJSONRequest json value from io.Reader.
func (s *TeamsUpdateInOrgApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsUpdateInOrgApplicationJSONRequest from json stream.
func (s *TeamsUpdateInOrgApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "parent_team_id":
			s.ParentTeamID.Reset()
			if err := s.ParentTeamID.ReadJSON(i); err != nil {
				i.ReportError("Field ParentTeamID", err.Error())
				return false
			}
			return true
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(i); err != nil {
				i.ReportError("Field Permission", err.Error())
				return false
			}
			return true
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(i); err != nil {
				i.ReportError("Field Privacy", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateInOrgApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsUpdateInOrgApplicationJSONRequestPermission from json stream.
func (s *TeamsUpdateInOrgApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	*s = TeamsUpdateInOrgApplicationJSONRequestPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateInOrgApplicationJSONRequestPrivacy) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsUpdateInOrgApplicationJSONRequestPrivacy from json stream.
func (s *TeamsUpdateInOrgApplicationJSONRequestPrivacy) ReadJSON(i *json.Iterator) error {
	*s = TeamsUpdateInOrgApplicationJSONRequestPrivacy(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateLegacyApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	if s.ParentTeamID.Set {
		more.More()
		j.WriteObjectField("parent_team_id")
		s.ParentTeamID.WriteJSON(j)
	}

	if s.Permission.Set {
		more.More()
		j.WriteObjectField("permission")
		s.Permission.WriteJSON(j)
	}

	if s.Privacy.Set {
		more.More()
		j.WriteObjectField("privacy")
		s.Privacy.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes TeamsUpdateLegacyApplicationJSONRequest json value to io.Writer.
func (s TeamsUpdateLegacyApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads TeamsUpdateLegacyApplicationJSONRequest json value from io.Reader.
func (s *TeamsUpdateLegacyApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads TeamsUpdateLegacyApplicationJSONRequest from json stream.
func (s *TeamsUpdateLegacyApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "parent_team_id":
			s.ParentTeamID.Reset()
			if err := s.ParentTeamID.ReadJSON(i); err != nil {
				i.ReportError("Field ParentTeamID", err.Error())
				return false
			}
			return true
		case "permission":
			s.Permission.Reset()
			if err := s.Permission.ReadJSON(i); err != nil {
				i.ReportError("Field Permission", err.Error())
				return false
			}
			return true
		case "privacy":
			s.Privacy.Reset()
			if err := s.Privacy.ReadJSON(i); err != nil {
				i.ReportError("Field Privacy", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateLegacyApplicationJSONRequestPermission) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsUpdateLegacyApplicationJSONRequestPermission from json stream.
func (s *TeamsUpdateLegacyApplicationJSONRequestPermission) ReadJSON(i *json.Iterator) error {
	*s = TeamsUpdateLegacyApplicationJSONRequestPermission(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s TeamsUpdateLegacyApplicationJSONRequestPrivacy) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads TeamsUpdateLegacyApplicationJSONRequestPrivacy from json stream.
func (s *TeamsUpdateLegacyApplicationJSONRequestPrivacy) ReadJSON(i *json.Iterator) error {
	*s = TeamsUpdateLegacyApplicationJSONRequestPrivacy(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Thread) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)

	more.More()
	j.WriteObjectField("last_read_at")
	s.LastReadAt.WriteJSON(j)

	more.More()
	j.WriteObjectField("reason")
	j.WriteString(s.Reason)

	more.More()
	j.WriteObjectField("repository")
	s.Repository.WriteJSON(j)

	more.More()
	j.WriteObjectField("subject")
	s.Subject.WriteJSON(j)

	more.More()
	j.WriteObjectField("subscription_url")
	j.WriteString(s.SubscriptionURL)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	more.More()
	j.WriteObjectField("unread")
	j.WriteBool(s.Unread)

	more.More()
	j.WriteObjectField("updated_at")
	j.WriteString(s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Thread json value to io.Writer.
func (s Thread) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Thread json value from io.Reader.
func (s *Thread) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Thread from json stream.
func (s *Thread) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "id":
			s.ID = i.ReadString()
			return i.Error == nil
		case "last_read_at":
			if err := s.LastReadAt.ReadJSON(i); err != nil {
				i.ReportError("Field LastReadAt", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason = i.ReadString()
			return i.Error == nil
		case "repository":
			if err := s.Repository.ReadJSON(i); err != nil {
				i.ReportError("Field Repository", err.Error())
				return false
			}
			return true
		case "subject":
			if err := s.Subject.ReadJSON(i); err != nil {
				i.ReportError("Field Subject", err.Error())
				return false
			}
			return true
		case "subscription_url":
			s.SubscriptionURL = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		case "unread":
			s.Unread = i.ReadBool()
			return i.Error == nil
		case "updated_at":
			s.UpdatedAt = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ThreadSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("latest_comment_url")
	j.WriteString(s.LatestCommentURL)

	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)

	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ThreadSubject json value to io.Writer.
func (s ThreadSubject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ThreadSubject json value from io.Reader.
func (s *ThreadSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ThreadSubject from json stream.
func (s *ThreadSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "latest_comment_url":
			s.LatestCommentURL = i.ReadString()
			return i.Error == nil
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ThreadSubscription) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("created_at")
	s.CreatedAt.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("ignored")
	j.WriteBool(s.Ignored)

	more.More()
	j.WriteObjectField("reason")
	s.Reason.WriteJSON(j)

	if s.RepositoryURL.Set {
		more.More()
		j.WriteObjectField("repository_url")
		s.RepositoryURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("subscribed")
	j.WriteBool(s.Subscribed)

	if s.ThreadURL.Set {
		more.More()
		j.WriteObjectField("thread_url")
		s.ThreadURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ThreadSubscription json value to io.Writer.
func (s ThreadSubscription) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ThreadSubscription json value from io.Reader.
func (s *ThreadSubscription) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ThreadSubscription from json stream.
func (s *ThreadSubscription) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "created_at":
			if err := s.CreatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			return true
		case "ignored":
			s.Ignored = i.ReadBool()
			return i.Error == nil
		case "reason":
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "repository_url":
			s.RepositoryURL.Reset()
			if err := s.RepositoryURL.ReadJSON(i); err != nil {
				i.ReportError("Field RepositoryURL", err.Error())
				return false
			}
			return true
		case "subscribed":
			s.Subscribed = i.ReadBool()
			return i.Error == nil
		case "thread_url":
			s.ThreadURL.Reset()
			if err := s.ThreadURL.ReadJSON(i); err != nil {
				i.ReportError("Field ThreadURL", err.Error())
				return false
			}
			return true
		case "url":
			v, err := json.ReadURI(i)
			if err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			s.URL = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Topic) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("names")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Names {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()

	j.WriteObjectEnd()
}

// WriteJSONTo writes Topic json value to io.Writer.
func (s Topic) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Topic json value from io.Reader.
func (s *Topic) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Topic from json stream.
func (s *Topic) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "names":
			// Unsupported kind "array" for field "Names".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UserMarketplacePurchase) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("account")
	s.Account.WriteJSON(j)

	more.More()
	j.WriteObjectField("billing_cycle")
	j.WriteString(s.BillingCycle)

	more.More()
	j.WriteObjectField("free_trial_ends_on")
	s.FreeTrialEndsOn.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("next_billing_date")
	s.NextBillingDate.WriteJSON(j, json.WriteDateTime)

	more.More()
	j.WriteObjectField("on_free_trial")
	j.WriteBool(s.OnFreeTrial)

	more.More()
	j.WriteObjectField("plan")
	s.Plan.WriteJSON(j)

	more.More()
	j.WriteObjectField("unit_count")
	s.UnitCount.WriteJSON(j)

	more.More()
	j.WriteObjectField("updated_at")
	s.UpdatedAt.WriteJSON(j, json.WriteDateTime)

	j.WriteObjectEnd()
}

// WriteJSONTo writes UserMarketplacePurchase json value to io.Writer.
func (s UserMarketplacePurchase) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UserMarketplacePurchase json value from io.Reader.
func (s *UserMarketplacePurchase) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UserMarketplacePurchase from json stream.
func (s *UserMarketplacePurchase) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "account":
			if err := s.Account.ReadJSON(i); err != nil {
				i.ReportError("Field Account", err.Error())
				return false
			}
			return true
		case "billing_cycle":
			s.BillingCycle = i.ReadString()
			return i.Error == nil
		case "free_trial_ends_on":
			if err := s.FreeTrialEndsOn.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field FreeTrialEndsOn", err.Error())
				return false
			}
			return true
		case "next_billing_date":
			if err := s.NextBillingDate.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field NextBillingDate", err.Error())
				return false
			}
			return true
		case "on_free_trial":
			s.OnFreeTrial = i.ReadBool()
			return i.Error == nil
		case "plan":
			if err := s.Plan.ReadJSON(i); err != nil {
				i.ReportError("Field Plan", err.Error())
				return false
			}
			return true
		case "unit_count":
			if err := s.UnitCount.ReadJSON(i); err != nil {
				i.ReportError("Field UnitCount", err.Error())
				return false
			}
			return true
		case "updated_at":
			if err := s.UpdatedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("armored_public_key")
	j.WriteString(s.ArmoredPublicKey)

	j.WriteObjectEnd()
}

// WriteJSONTo writes UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest json value to io.Writer.
func (s UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest json value from io.Reader.
func (s *UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest from json stream.
func (s *UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "armored_public_key":
			s.ArmoredPublicKey = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)

	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest json value to io.Writer.
func (s UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest json value from io.Reader.
func (s *UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest from json stream.
func (s *UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("visibility")
	s.Visibility.WriteJSON(j)

	j.WriteObjectEnd()
}

// WriteJSONTo writes UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest json value to io.Writer.
func (s UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest json value from io.Reader.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest from json stream.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "visibility":
			if err := s.Visibility.ReadJSON(i); err != nil {
				i.ReportError("Field Visibility", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequestVisibility) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequestVisibility from json stream.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequestVisibility) ReadJSON(i *json.Iterator) error {
	*s = UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequestVisibility(i.ReadString())
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UsersUpdateAuthenticatedApplicationJSONRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Bio.Set {
		more.More()
		j.WriteObjectField("bio")
		s.Bio.WriteJSON(j)
	}

	if s.Blog.Set {
		more.More()
		j.WriteObjectField("blog")
		s.Blog.WriteJSON(j)
	}

	if s.Company.Set {
		more.More()
		j.WriteObjectField("company")
		s.Company.WriteJSON(j)
	}

	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}

	if s.Hireable.Set {
		more.More()
		j.WriteObjectField("hireable")
		s.Hireable.WriteJSON(j)
	}

	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	if s.TwitterUsername.Set {
		more.More()
		j.WriteObjectField("twitter_username")
		s.TwitterUsername.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes UsersUpdateAuthenticatedApplicationJSONRequest json value to io.Writer.
func (s UsersUpdateAuthenticatedApplicationJSONRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UsersUpdateAuthenticatedApplicationJSONRequest json value from io.Reader.
func (s *UsersUpdateAuthenticatedApplicationJSONRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UsersUpdateAuthenticatedApplicationJSONRequest from json stream.
func (s *UsersUpdateAuthenticatedApplicationJSONRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "bio":
			s.Bio.Reset()
			if err := s.Bio.ReadJSON(i); err != nil {
				i.ReportError("Field Bio", err.Error())
				return false
			}
			return true
		case "blog":
			s.Blog.Reset()
			if err := s.Blog.ReadJSON(i); err != nil {
				i.ReportError("Field Blog", err.Error())
				return false
			}
			return true
		case "company":
			s.Company.Reset()
			if err := s.Company.ReadJSON(i); err != nil {
				i.ReportError("Field Company", err.Error())
				return false
			}
			return true
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(i); err != nil {
				i.ReportError("Field Email", err.Error())
				return false
			}
			return true
		case "hireable":
			s.Hireable.Reset()
			if err := s.Hireable.ReadJSON(i); err != nil {
				i.ReportError("Field Hireable", err.Error())
				return false
			}
			return true
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(i); err != nil {
				i.ReportError("Field Location", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "twitter_username":
			s.TwitterUsername.Reset()
			if err := s.TwitterUsername.ReadJSON(i); err != nil {
				i.ReportError("Field TwitterUsername", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ValidationErrorSimple) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("documentation_url")
	j.WriteString(s.DocumentationURL)

	if s.Errors != nil {
		more.More()
		j.WriteObjectField("errors")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Errors {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)

	j.WriteObjectEnd()
}

// WriteJSONTo writes ValidationErrorSimple json value to io.Writer.
func (s ValidationErrorSimple) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ValidationErrorSimple json value from io.Reader.
func (s *ValidationErrorSimple) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ValidationErrorSimple from json stream.
func (s *ValidationErrorSimple) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "documentation_url":
			s.DocumentationURL = i.ReadString()
			return i.Error == nil
		case "errors":
			// Unsupported kind "array" for field "Errors".
			i.Skip()
			return true
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Verification) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("payload")
	s.Payload.WriteJSON(j)

	more.More()
	j.WriteObjectField("reason")
	j.WriteString(s.Reason)

	more.More()
	j.WriteObjectField("signature")
	s.Signature.WriteJSON(j)

	more.More()
	j.WriteObjectField("verified")
	j.WriteBool(s.Verified)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Verification json value to io.Writer.
func (s Verification) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Verification json value from io.Reader.
func (s *Verification) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Verification from json stream.
func (s *Verification) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "payload":
			if err := s.Payload.ReadJSON(i); err != nil {
				i.ReportError("Field Payload", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason = i.ReadString()
			return i.Error == nil
		case "signature":
			if err := s.Signature.ReadJSON(i); err != nil {
				i.ReportError("Field Signature", err.Error())
				return false
			}
			return true
		case "verified":
			s.Verified = i.ReadBool()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Workflow) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("badge_url")
	j.WriteString(s.BadgeURL)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	if s.DeletedAt.Set {
		more.More()
		j.WriteObjectField("deleted_at")
		s.DeletedAt.WriteJSON(j, json.WriteDateTime)
	}

	more.More()
	j.WriteObjectField("html_url")
	j.WriteString(s.HTMLURL)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)

	more.More()
	j.WriteObjectField("state")
	s.State.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	j.WriteObjectEnd()
}

// WriteJSONTo writes Workflow json value to io.Writer.
func (s Workflow) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Workflow json value from io.Reader.
func (s *Workflow) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Workflow from json stream.
func (s *Workflow) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "badge_url":
			s.BadgeURL = i.ReadString()
			return i.Error == nil
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "deleted_at":
			s.DeletedAt.Reset()
			if err := s.DeletedAt.ReadJSON(i, json.ReadDateTime); err != nil {
				i.ReportError("Field DeletedAt", err.Error())
				return false
			}
			return true
		case "html_url":
			s.HTMLURL = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "state":
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRun) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("artifacts_url")
	j.WriteString(s.ArtifactsURL)

	more.More()
	j.WriteObjectField("cancel_url")
	j.WriteString(s.CancelURL)

	if s.CheckSuiteID.Set {
		more.More()
		j.WriteObjectField("check_suite_id")
		s.CheckSuiteID.WriteJSON(j)
	}

	if s.CheckSuiteNodeID.Set {
		more.More()
		j.WriteObjectField("check_suite_node_id")
		s.CheckSuiteNodeID.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("check_suite_url")
	j.WriteString(s.CheckSuiteURL)

	more.More()
	j.WriteObjectField("conclusion")
	s.Conclusion.WriteJSON(j)

	more.More()
	j.WriteObjectField("created_at")
	json.WriteDateTime(j, s.CreatedAt)

	more.More()
	j.WriteObjectField("event")
	j.WriteString(s.Event)

	more.More()
	j.WriteObjectField("html_url")
	j.WriteString(s.HTMLURL)

	more.More()
	j.WriteObjectField("head_branch")
	s.HeadBranch.WriteJSON(j)

	more.More()
	j.WriteObjectField("head_commit")
	s.HeadCommit.WriteJSON(j)

	more.More()
	j.WriteObjectField("head_repository")
	s.HeadRepository.WriteJSON(j)

	if s.HeadRepositoryID.Set {
		more.More()
		j.WriteObjectField("head_repository_id")
		s.HeadRepositoryID.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("head_sha")
	j.WriteString(s.HeadSha)

	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)

	more.More()
	j.WriteObjectField("jobs_url")
	j.WriteString(s.JobsURL)

	more.More()
	j.WriteObjectField("logs_url")
	j.WriteString(s.LogsURL)

	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("node_id")
	j.WriteString(s.NodeID)

	if s.PreviousAttemptURL.Set {
		more.More()
		j.WriteObjectField("previous_attempt_url")
		s.PreviousAttemptURL.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("pull_requests")
	if s.PullRequests == nil {
		j.WriteNil()
	} else {
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PullRequests {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}

	more.More()
	j.WriteObjectField("repository")
	s.Repository.WriteJSON(j)

	more.More()
	j.WriteObjectField("rerun_url")
	j.WriteString(s.RerunURL)

	if s.RunAttempt.Set {
		more.More()
		j.WriteObjectField("run_attempt")
		s.RunAttempt.WriteJSON(j)
	}

	more.More()
	j.WriteObjectField("run_number")
	j.WriteInt(s.RunNumber)

	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)

	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)

	more.More()
	j.WriteObjectField("updated_at")
	json.WriteDateTime(j, s.UpdatedAt)

	more.More()
	j.WriteObjectField("workflow_id")
	j.WriteInt(s.WorkflowID)

	more.More()
	j.WriteObjectField("workflow_url")
	j.WriteString(s.WorkflowURL)

	j.WriteObjectEnd()
}

// WriteJSONTo writes WorkflowRun json value to io.Writer.
func (s WorkflowRun) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads WorkflowRun json value from io.Reader.
func (s *WorkflowRun) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads WorkflowRun from json stream.
func (s *WorkflowRun) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "artifacts_url":
			s.ArtifactsURL = i.ReadString()
			return i.Error == nil
		case "cancel_url":
			s.CancelURL = i.ReadString()
			return i.Error == nil
		case "check_suite_id":
			s.CheckSuiteID.Reset()
			if err := s.CheckSuiteID.ReadJSON(i); err != nil {
				i.ReportError("Field CheckSuiteID", err.Error())
				return false
			}
			return true
		case "check_suite_node_id":
			s.CheckSuiteNodeID.Reset()
			if err := s.CheckSuiteNodeID.ReadJSON(i); err != nil {
				i.ReportError("Field CheckSuiteNodeID", err.Error())
				return false
			}
			return true
		case "check_suite_url":
			s.CheckSuiteURL = i.ReadString()
			return i.Error == nil
		case "conclusion":
			if err := s.Conclusion.ReadJSON(i); err != nil {
				i.ReportError("Field Conclusion", err.Error())
				return false
			}
			return true
		case "created_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field CreatedAt", err.Error())
				return false
			}
			s.CreatedAt = v
			return true
		case "event":
			s.Event = i.ReadString()
			return i.Error == nil
		case "html_url":
			s.HTMLURL = i.ReadString()
			return i.Error == nil
		case "head_branch":
			if err := s.HeadBranch.ReadJSON(i); err != nil {
				i.ReportError("Field HeadBranch", err.Error())
				return false
			}
			return true
		case "head_commit":
			if err := s.HeadCommit.ReadJSON(i); err != nil {
				i.ReportError("Field HeadCommit", err.Error())
				return false
			}
			return true
		case "head_repository":
			if err := s.HeadRepository.ReadJSON(i); err != nil {
				i.ReportError("Field HeadRepository", err.Error())
				return false
			}
			return true
		case "head_repository_id":
			s.HeadRepositoryID.Reset()
			if err := s.HeadRepositoryID.ReadJSON(i); err != nil {
				i.ReportError("Field HeadRepositoryID", err.Error())
				return false
			}
			return true
		case "head_sha":
			s.HeadSha = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "jobs_url":
			s.JobsURL = i.ReadString()
			return i.Error == nil
		case "logs_url":
			s.LogsURL = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "node_id":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "previous_attempt_url":
			s.PreviousAttemptURL.Reset()
			if err := s.PreviousAttemptURL.ReadJSON(i); err != nil {
				i.ReportError("Field PreviousAttemptURL", err.Error())
				return false
			}
			return true
		case "pull_requests":
			// Unsupported kind "array" for field "PullRequests".
			i.Skip()
			return true
		case "repository":
			if err := s.Repository.ReadJSON(i); err != nil {
				i.ReportError("Field Repository", err.Error())
				return false
			}
			return true
		case "rerun_url":
			s.RerunURL = i.ReadString()
			return i.Error == nil
		case "run_attempt":
			s.RunAttempt.Reset()
			if err := s.RunAttempt.ReadJSON(i); err != nil {
				i.ReportError("Field RunAttempt", err.Error())
				return false
			}
			return true
		case "run_number":
			s.RunNumber = i.ReadInt()
			return i.Error == nil
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		case "updated_at":
			v, err := json.ReadDateTime(i)
			if err != nil {
				i.ReportError("Field UpdatedAt", err.Error())
				return false
			}
			s.UpdatedAt = v
			return true
		case "workflow_id":
			s.WorkflowID = i.ReadInt()
			return i.Error == nil
		case "workflow_url":
			s.WorkflowURL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRunUsage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("billable")
	s.Billable.WriteJSON(j)

	if s.RunDurationMs.Set {
		more.More()
		j.WriteObjectField("run_duration_ms")
		s.RunDurationMs.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes WorkflowRunUsage json value to io.Writer.
func (s WorkflowRunUsage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads WorkflowRunUsage json value from io.Reader.
func (s *WorkflowRunUsage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads WorkflowRunUsage from json stream.
func (s *WorkflowRunUsage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "billable":
			if err := s.Billable.ReadJSON(i); err != nil {
				i.ReportError("Field Billable", err.Error())
				return false
			}
			return true
		case "run_duration_ms":
			s.RunDurationMs.Reset()
			if err := s.RunDurationMs.ReadJSON(i); err != nil {
				i.ReportError("Field RunDurationMs", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRunUsageBillable) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MACOS.Set {
		more.More()
		j.WriteObjectField("MACOS")
		s.MACOS.WriteJSON(j)
	}

	if s.UBUNTU.Set {
		more.More()
		j.WriteObjectField("UBUNTU")
		s.UBUNTU.WriteJSON(j)
	}

	if s.WINDOWS.Set {
		more.More()
		j.WriteObjectField("WINDOWS")
		s.WINDOWS.WriteJSON(j)
	}

	j.WriteObjectEnd()
}

// WriteJSONTo writes WorkflowRunUsageBillable json value to io.Writer.
func (s WorkflowRunUsageBillable) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads WorkflowRunUsageBillable json value from io.Reader.
func (s *WorkflowRunUsageBillable) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads WorkflowRunUsageBillable from json stream.
func (s *WorkflowRunUsageBillable) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "MACOS":
			s.MACOS.Reset()
			if err := s.MACOS.ReadJSON(i); err != nil {
				i.ReportError("Field MACOS", err.Error())
				return false
			}
			return true
		case "UBUNTU":
			s.UBUNTU.Reset()
			if err := s.UBUNTU.ReadJSON(i); err != nil {
				i.ReportError("Field UBUNTU", err.Error())
				return false
			}
			return true
		case "WINDOWS":
			s.WINDOWS.Reset()
			if err := s.WINDOWS.ReadJSON(i); err != nil {
				i.ReportError("Field WINDOWS", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRunUsageBillableMACOS) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("jobs")
	j.WriteInt(s.Jobs)

	more.More()
	j.WriteObjectField("total_ms")
	j.WriteInt(s.TotalMs)

	j.WriteObjectEnd()
}

// WriteJSONTo writes WorkflowRunUsageBillableMACOS json value to io.Writer.
func (s WorkflowRunUsageBillableMACOS) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads WorkflowRunUsageBillableMACOS json value from io.Reader.
func (s *WorkflowRunUsageBillableMACOS) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads WorkflowRunUsageBillableMACOS from json stream.
func (s *WorkflowRunUsageBillableMACOS) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "jobs":
			s.Jobs = i.ReadInt()
			return i.Error == nil
		case "total_ms":
			s.TotalMs = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRunUsageBillableUBUNTU) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("jobs")
	j.WriteInt(s.Jobs)

	more.More()
	j.WriteObjectField("total_ms")
	j.WriteInt(s.TotalMs)

	j.WriteObjectEnd()
}

// WriteJSONTo writes WorkflowRunUsageBillableUBUNTU json value to io.Writer.
func (s WorkflowRunUsageBillableUBUNTU) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads WorkflowRunUsageBillableUBUNTU json value from io.Reader.
func (s *WorkflowRunUsageBillableUBUNTU) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads WorkflowRunUsageBillableUBUNTU from json stream.
func (s *WorkflowRunUsageBillableUBUNTU) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "jobs":
			s.Jobs = i.ReadInt()
			return i.Error == nil
		case "total_ms":
			s.TotalMs = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s WorkflowRunUsageBillableWINDOWS) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("jobs")
	j.WriteInt(s.Jobs)

	more.More()
	j.WriteObjectField("total_ms")
	j.WriteInt(s.TotalMs)

	j.WriteObjectEnd()
}

// WriteJSONTo writes WorkflowRunUsageBillableWINDOWS json value to io.Writer.
func (s WorkflowRunUsageBillableWINDOWS) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads WorkflowRunUsageBillableWINDOWS json value from io.Reader.
func (s *WorkflowRunUsageBillableWINDOWS) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads WorkflowRunUsageBillableWINDOWS from json stream.
func (s *WorkflowRunUsageBillableWINDOWS) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "jobs":
			s.Jobs = i.ReadInt()
			return i.Error == nil
		case "total_ms":
			s.TotalMs = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s WorkflowState) WriteJSON(j *json.Stream) {
	j.WriteString(string(s))
}

// ReadJSON reads WorkflowState from json stream.
func (s *WorkflowState) ReadJSON(i *json.Iterator) error {
	*s = WorkflowState(i.ReadString())
	return i.Error
}
