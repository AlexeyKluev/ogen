// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func encodeActionsCreateOrUpdateEnvironmentSecretRequest(req ActionsCreateOrUpdateEnvironmentSecretReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsCreateOrUpdateOrgSecretRequest(req ActionsCreateOrUpdateOrgSecretReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsCreateOrUpdateRepoSecretRequest(req ActionsCreateOrUpdateRepoSecretReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsCreateSelfHostedRunnerGroupForOrgRequest(req ActionsCreateSelfHostedRunnerGroupForOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsSetAllowedActionsOrganizationRequest(req SelectedActions, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsSetAllowedActionsRepositoryRequest(req SelectedActions, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsSetGithubActionsPermissionsOrganizationRequest(req ActionsSetGithubActionsPermissionsOrganizationReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsSetGithubActionsPermissionsRepositoryRequest(req ActionsSetGithubActionsPermissionsRepositoryReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest(req ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsSetSelectedReposForOrgSecretRequest(req ActionsSetSelectedReposForOrgSecretReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest(req ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsSetSelfHostedRunnersInGroupForOrgRequest(req ActionsSetSelfHostedRunnersInGroupForOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActionsUpdateSelfHostedRunnerGroupForOrgRequest(req ActionsUpdateSelfHostedRunnerGroupForOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActivityMarkNotificationsAsReadRequest(req ActivityMarkNotificationsAsReadReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActivityMarkRepoNotificationsAsReadRequest(req ActivityMarkRepoNotificationsAsReadReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActivitySetRepoSubscriptionRequest(req ActivitySetRepoSubscriptionReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeActivitySetThreadSubscriptionRequest(req ActivitySetThreadSubscriptionReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeAppsUpdateWebhookConfigForAppRequest(req AppsUpdateWebhookConfigForAppReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeChecksCreateRequest(req ChecksCreateReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeChecksCreateSuiteRequest(req ChecksCreateSuiteReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeChecksSetSuitesPreferencesRequest(req ChecksSetSuitesPreferencesReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeCodeScanningUpdateAlertRequest(req CodeScanningUpdateAlertReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeCodeScanningUploadSarifRequest(req CodeScanningUploadSarifReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(req EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(req EnterpriseAdminProvisionAndInviteEnterpriseGroupReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminProvisionAndInviteEnterpriseUserRequest(req EnterpriseAdminProvisionAndInviteEnterpriseUserReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminSetAllowedActionsEnterpriseRequest(req SelectedActions, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(req EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest(req EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest(req EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(req EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(req EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest(req EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminUpdateAttributeForEnterpriseUserRequest(req EnterpriseAdminUpdateAttributeForEnterpriseUserReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest(req EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeGistsCreateCommentRequest(req GistsCreateCommentReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeGistsUpdateCommentRequest(req GistsUpdateCommentReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeInteractionsSetRestrictionsForRepoRequest(req InteractionLimit, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeIssuesAddAssigneesRequest(req IssuesAddAssigneesReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeIssuesRemoveAssigneesRequest(req IssuesRemoveAssigneesReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeIssuesUpdateLabelRequest(req IssuesUpdateLabelReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeIssuesUpdateMilestoneRequest(req IssuesUpdateMilestoneReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeMarkdownRenderRequest(req MarkdownRenderReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeMarkdownRenderRawRequest(req MarkdownRenderRawReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	switch req := req.(type) {
	case *MarkdownRenderRawReqTextPlain:
		return nil, "", fmt.Errorf("text/plain encoder not implemented")
	case *MarkdownRenderRawReqTextXMarkdown:
		return nil, "", fmt.Errorf("text/x-markdown encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeMigrationsUpdateImportRequest(req MigrationsUpdateImportReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeOrgsUpdateWebhookConfigForOrgRequest(req OrgsUpdateWebhookConfigForOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeProjectsCreateColumnRequest(req ProjectsCreateColumnReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeProjectsCreateForAuthenticatedUserRequest(req ProjectsCreateForAuthenticatedUserReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeProjectsCreateForOrgRequest(req ProjectsCreateForOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeProjectsCreateForRepoRequest(req ProjectsCreateForRepoReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeProjectsMoveColumnRequest(req ProjectsMoveColumnReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeProjectsUpdateRequest(req ProjectsUpdateReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeProjectsUpdateCardRequest(req ProjectsUpdateCardReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeProjectsUpdateColumnRequest(req ProjectsUpdateColumnReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodePullsCreateReplyForReviewCommentRequest(req PullsCreateReplyForReviewCommentReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodePullsCreateReviewRequest(req PullsCreateReviewReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodePullsDismissReviewRequest(req PullsDismissReviewReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodePullsSubmitReviewRequest(req PullsSubmitReviewReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodePullsUpdateReviewRequest(req PullsUpdateReviewReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodePullsUpdateReviewCommentRequest(req PullsUpdateReviewCommentReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReactionsCreateForTeamDiscussionCommentInOrgRequest(req ReactionsCreateForTeamDiscussionCommentInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReactionsCreateForTeamDiscussionCommentLegacyRequest(req ReactionsCreateForTeamDiscussionCommentLegacyReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReactionsCreateForTeamDiscussionInOrgRequest(req ReactionsCreateForTeamDiscussionInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReactionsCreateForTeamDiscussionLegacyRequest(req ReactionsCreateForTeamDiscussionLegacyReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposCreateCommitStatusRequest(req ReposCreateCommitStatusReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposCreateUsingTemplateRequest(req ReposCreateUsingTemplateReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposMergeUpstreamRequest(req ReposMergeUpstreamReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposReplaceAllTopicsRequest(req ReposReplaceAllTopicsReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposTransferRequest(req ReposTransferReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposUpdateBranchProtectionRequest(req ReposUpdateBranchProtectionReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposUpdateCommitCommentRequest(req ReposUpdateCommitCommentReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposUpdateInvitationRequest(req ReposUpdateInvitationReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposUpdateReleaseRequest(req ReposUpdateReleaseReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposUpdateReleaseAssetRequest(req ReposUpdateReleaseAssetReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposUpdateWebhookConfigForRepoRequest(req ReposUpdateWebhookConfigForRepoReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeReposUploadReleaseAssetRequest(req string, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	return nil, "", fmt.Errorf("*/* encoder not implemented")
}

func encodeSecretScanningUpdateAlertRequest(req SecretScanningUpdateAlertReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsAddOrUpdateMembershipForUserInOrgRequest(req TeamsAddOrUpdateMembershipForUserInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsAddOrUpdateMembershipForUserLegacyRequest(req TeamsAddOrUpdateMembershipForUserLegacyReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsAddOrUpdateProjectPermissionsInOrgRequest(req TeamsAddOrUpdateProjectPermissionsInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsAddOrUpdateRepoPermissionsInOrgRequest(req TeamsAddOrUpdateRepoPermissionsInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsCreateDiscussionCommentInOrgRequest(req TeamsCreateDiscussionCommentInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsCreateDiscussionCommentLegacyRequest(req TeamsCreateDiscussionCommentLegacyReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsCreateDiscussionInOrgRequest(req TeamsCreateDiscussionInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsCreateDiscussionLegacyRequest(req TeamsCreateDiscussionLegacyReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgRequest(req TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsUpdateDiscussionCommentInOrgRequest(req TeamsUpdateDiscussionCommentInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsUpdateDiscussionCommentLegacyRequest(req TeamsUpdateDiscussionCommentLegacyReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsUpdateDiscussionInOrgRequest(req TeamsUpdateDiscussionInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsUpdateDiscussionLegacyRequest(req TeamsUpdateDiscussionLegacyReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}

func encodeTeamsUpdateInOrgRequest(req TeamsUpdateInOrgReq, span trace.Span) (data *bytes.Buffer, contentType string, err error) {
	buf := json.GetBuffer()
	j := json.GetStream(buf)
	defer json.PutStream(j)
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	req.WriteJSON(j)
	if err := j.Flush(); err != nil {
		json.PutBuffer(buf)
		return nil, "", err
	}

	return buf, "application/json", nil
}
