// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func encodeActionsCreateOrUpdateEnvironmentSecretRequestJSON(req ActionsCreateOrUpdateEnvironmentSecretReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsCreateOrUpdateOrgSecretRequestJSON(req ActionsCreateOrUpdateOrgSecretReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsCreateOrUpdateRepoSecretRequestJSON(req ActionsCreateOrUpdateRepoSecretReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsCreateSelfHostedRunnerGroupForOrgRequestJSON(req ActionsCreateSelfHostedRunnerGroupForOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsReviewPendingDeploymentsForRunRequestJSON(req ActionsReviewPendingDeploymentsForRunReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsSetAllowedActionsOrganizationRequestJSON(req OptSelectedActions, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsSetAllowedActionsRepositoryRequestJSON(req OptSelectedActions, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsSetGithubActionsPermissionsOrganizationRequestJSON(req ActionsSetGithubActionsPermissionsOrganizationReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsSetGithubActionsPermissionsRepositoryRequestJSON(req ActionsSetGithubActionsPermissionsRepositoryReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequestJSON(req ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsSetSelectedReposForOrgSecretRequestJSON(req ActionsSetSelectedReposForOrgSecretReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestJSON(req ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsSetSelfHostedRunnersInGroupForOrgRequestJSON(req ActionsSetSelfHostedRunnersInGroupForOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActionsUpdateSelfHostedRunnerGroupForOrgRequestJSON(req ActionsUpdateSelfHostedRunnerGroupForOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActivityMarkNotificationsAsReadRequestJSON(req OptActivityMarkNotificationsAsReadReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActivityMarkRepoNotificationsAsReadRequestJSON(req OptActivityMarkRepoNotificationsAsReadReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActivitySetRepoSubscriptionRequestJSON(req OptActivitySetRepoSubscriptionReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeActivitySetThreadSubscriptionRequestJSON(req OptActivitySetThreadSubscriptionReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeAppsCheckTokenRequestJSON(req AppsCheckTokenReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeAppsCreateContentAttachmentRequestJSON(req AppsCreateContentAttachmentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeAppsCreateInstallationAccessTokenRequestJSON(req OptAppsCreateInstallationAccessTokenReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeAppsDeleteAuthorizationRequestJSON(req AppsDeleteAuthorizationReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeAppsDeleteTokenRequestJSON(req AppsDeleteTokenReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeAppsResetTokenRequestJSON(req AppsResetTokenReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeAppsScopeTokenRequestJSON(req AppsScopeTokenReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeAppsUpdateWebhookConfigForAppRequestJSON(req OptAppsUpdateWebhookConfigForAppReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeChecksCreateSuiteRequestJSON(req ChecksCreateSuiteReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeChecksSetSuitesPreferencesRequestJSON(req ChecksSetSuitesPreferencesReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeCodeScanningUpdateAlertRequestJSON(req CodeScanningUpdateAlertReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeCodeScanningUploadSarifRequestJSON(req CodeScanningUploadSarifReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequestJSON(req EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminProvisionAndInviteEnterpriseGroupRequestJSON(req EnterpriseAdminProvisionAndInviteEnterpriseGroupReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminProvisionAndInviteEnterpriseUserRequestJSON(req EnterpriseAdminProvisionAndInviteEnterpriseUserReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminSetAllowedActionsEnterpriseRequestJSON(req SelectedActions, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequestJSON(req EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequestJSON(req EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestJSON(req EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestJSON(req EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequestJSON(req EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequestJSON(req EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminUpdateAttributeForEnterpriseGroupRequestJSON(req EnterpriseAdminUpdateAttributeForEnterpriseGroupReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminUpdateAttributeForEnterpriseUserRequestJSON(req EnterpriseAdminUpdateAttributeForEnterpriseUserReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequestJSON(req OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeGistsCreateRequestJSON(req GistsCreateReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeGistsCreateCommentRequestJSON(req GistsCreateCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeGistsUpdateCommentRequestJSON(req GistsUpdateCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeGitCreateBlobRequestJSON(req GitCreateBlobReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeGitCreateCommitRequestJSON(req GitCreateCommitReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeGitCreateRefRequestJSON(req GitCreateRefReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeGitCreateTagRequestJSON(req GitCreateTagReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeGitCreateTreeRequestJSON(req GitCreateTreeReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeGitUpdateRefRequestJSON(req GitUpdateRefReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeInteractionsSetRestrictionsForAuthenticatedUserRequestJSON(req InteractionLimit, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeInteractionsSetRestrictionsForOrgRequestJSON(req InteractionLimit, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeInteractionsSetRestrictionsForRepoRequestJSON(req InteractionLimit, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesAddAssigneesRequestJSON(req OptIssuesAddAssigneesReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesCreateRequestJSON(req IssuesCreateReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesCreateCommentRequestJSON(req IssuesCreateCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesCreateLabelRequestJSON(req IssuesCreateLabelReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesCreateMilestoneRequestJSON(req IssuesCreateMilestoneReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesLockRequestJSON(req OptIssuesLockReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesRemoveAssigneesRequestJSON(req OptIssuesRemoveAssigneesReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesUpdateRequestJSON(req OptIssuesUpdateReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesUpdateCommentRequestJSON(req IssuesUpdateCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesUpdateLabelRequestJSON(req OptIssuesUpdateLabelReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeIssuesUpdateMilestoneRequestJSON(req OptIssuesUpdateMilestoneReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeMigrationsMapCommitAuthorRequestJSON(req OptMigrationsMapCommitAuthorReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeMigrationsSetLfsPreferenceRequestJSON(req MigrationsSetLfsPreferenceReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeMigrationsStartForAuthenticatedUserRequestJSON(req MigrationsStartForAuthenticatedUserReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeMigrationsStartForOrgRequestJSON(req MigrationsStartForOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeMigrationsStartImportRequestJSON(req MigrationsStartImportReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeMigrationsUpdateImportRequestJSON(req OptMigrationsUpdateImportReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeOAuthAuthorizationsCreateAuthorizationRequestJSON(req OptOAuthAuthorizationsCreateAuthorizationReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeOAuthAuthorizationsGetOrCreateAuthorizationForAppRequestJSON(req OAuthAuthorizationsGetOrCreateAuthorizationForAppReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeOAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestJSON(req OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeOAuthAuthorizationsUpdateAuthorizationRequestJSON(req OptOAuthAuthorizationsUpdateAuthorizationReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeOrgsCreateInvitationRequestJSON(req OptOrgsCreateInvitationReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeOrgsCreateWebhookRequestJSON(req OrgsCreateWebhookReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeOrgsSetMembershipForUserRequestJSON(req OptOrgsSetMembershipForUserReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeOrgsUpdateMembershipForAuthenticatedUserRequestJSON(req OrgsUpdateMembershipForAuthenticatedUserReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeOrgsUpdateWebhookRequestJSON(req OptOrgsUpdateWebhookReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeOrgsUpdateWebhookConfigForOrgRequestJSON(req OptOrgsUpdateWebhookConfigForOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeProjectsAddCollaboratorRequestJSON(req OptProjectsAddCollaboratorReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeProjectsCreateColumnRequestJSON(req ProjectsCreateColumnReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeProjectsCreateForAuthenticatedUserRequestJSON(req ProjectsCreateForAuthenticatedUserReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeProjectsCreateForOrgRequestJSON(req ProjectsCreateForOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeProjectsCreateForRepoRequestJSON(req ProjectsCreateForRepoReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeProjectsMoveCardRequestJSON(req ProjectsMoveCardReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeProjectsMoveColumnRequestJSON(req ProjectsMoveColumnReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeProjectsUpdateRequestJSON(req OptProjectsUpdateReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeProjectsUpdateCardRequestJSON(req OptProjectsUpdateCardReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeProjectsUpdateColumnRequestJSON(req ProjectsUpdateColumnReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsCreateRequestJSON(req PullsCreateReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsCreateReplyForReviewCommentRequestJSON(req PullsCreateReplyForReviewCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsCreateReviewRequestJSON(req OptPullsCreateReviewReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsCreateReviewCommentRequestJSON(req PullsCreateReviewCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsDismissReviewRequestJSON(req PullsDismissReviewReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsMergeRequestJSON(req OptPullsMergeReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsRemoveRequestedReviewersRequestJSON(req PullsRemoveRequestedReviewersReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsSubmitReviewRequestJSON(req PullsSubmitReviewReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsUpdateRequestJSON(req OptPullsUpdateReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsUpdateBranchRequestJSON(req OptPullsUpdateBranchReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsUpdateReviewRequestJSON(req PullsUpdateReviewReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodePullsUpdateReviewCommentRequestJSON(req PullsUpdateReviewCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReactionsCreateForCommitCommentRequestJSON(req ReactionsCreateForCommitCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReactionsCreateForIssueRequestJSON(req ReactionsCreateForIssueReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReactionsCreateForIssueCommentRequestJSON(req ReactionsCreateForIssueCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReactionsCreateForPullRequestReviewCommentRequestJSON(req ReactionsCreateForPullRequestReviewCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReactionsCreateForReleaseRequestJSON(req ReactionsCreateForReleaseReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReactionsCreateForTeamDiscussionCommentInOrgRequestJSON(req ReactionsCreateForTeamDiscussionCommentInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReactionsCreateForTeamDiscussionCommentLegacyRequestJSON(req ReactionsCreateForTeamDiscussionCommentLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReactionsCreateForTeamDiscussionInOrgRequestJSON(req ReactionsCreateForTeamDiscussionInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReactionsCreateForTeamDiscussionLegacyRequestJSON(req ReactionsCreateForTeamDiscussionLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposAddAppAccessRestrictionsRequestJSON(req OptReposAddAppAccessRestrictionsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposAddCollaboratorRequestJSON(req OptReposAddCollaboratorReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposAddStatusCheckContextsRequestJSON(req OptReposAddStatusCheckContextsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposAddTeamAccessRestrictionsRequestJSON(req OptReposAddTeamAccessRestrictionsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposAddUserAccessRestrictionsRequestJSON(req OptReposAddUserAccessRestrictionsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateAutolinkRequestJSON(req ReposCreateAutolinkReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateCommitCommentRequestJSON(req ReposCreateCommitCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateCommitStatusRequestJSON(req ReposCreateCommitStatusReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateDeployKeyRequestJSON(req ReposCreateDeployKeyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateDeploymentRequestJSON(req ReposCreateDeploymentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateDeploymentStatusRequestJSON(req ReposCreateDeploymentStatusReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateDispatchEventRequestJSON(req ReposCreateDispatchEventReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateForAuthenticatedUserRequestJSON(req ReposCreateForAuthenticatedUserReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateForkRequestJSON(req OptReposCreateForkReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateInOrgRequestJSON(req ReposCreateInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateOrUpdateFileContentsRequestJSON(req ReposCreateOrUpdateFileContentsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreatePagesSiteRequestJSON(req ReposCreatePagesSiteReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateReleaseRequestJSON(req ReposCreateReleaseReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateUsingTemplateRequestJSON(req ReposCreateUsingTemplateReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposCreateWebhookRequestJSON(req OptReposCreateWebhookReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposDeleteFileRequestJSON(req ReposDeleteFileReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposMergeRequestJSON(req ReposMergeReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposMergeUpstreamRequestJSON(req ReposMergeUpstreamReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposRemoveAppAccessRestrictionsRequestJSON(req OptReposRemoveAppAccessRestrictionsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposRemoveStatusCheckContextsRequestJSON(req OptReposRemoveStatusCheckContextsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposRemoveTeamAccessRestrictionsRequestJSON(req OptReposRemoveTeamAccessRestrictionsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposRemoveUserAccessRestrictionsRequestJSON(req OptReposRemoveUserAccessRestrictionsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposRenameBranchRequestJSON(req OptReposRenameBranchReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposReplaceAllTopicsRequestJSON(req ReposReplaceAllTopicsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposSetAppAccessRestrictionsRequestJSON(req OptReposSetAppAccessRestrictionsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposSetStatusCheckContextsRequestJSON(req OptReposSetStatusCheckContextsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposSetTeamAccessRestrictionsRequestJSON(req OptReposSetTeamAccessRestrictionsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposSetUserAccessRestrictionsRequestJSON(req OptReposSetUserAccessRestrictionsReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposTransferRequestJSON(req ReposTransferReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposUpdateRequestJSON(req OptReposUpdateReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposUpdateBranchProtectionRequestJSON(req ReposUpdateBranchProtectionReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposUpdateCommitCommentRequestJSON(req ReposUpdateCommitCommentReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposUpdateInvitationRequestJSON(req OptReposUpdateInvitationReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposUpdatePullRequestReviewProtectionRequestJSON(req OptReposUpdatePullRequestReviewProtectionReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposUpdateReleaseRequestJSON(req OptReposUpdateReleaseReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposUpdateReleaseAssetRequestJSON(req OptReposUpdateReleaseAssetReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposUpdateStatusCheckProtectionRequestJSON(req OptReposUpdateStatusCheckProtectionReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposUpdateWebhookRequestJSON(req OptReposUpdateWebhookReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeReposUpdateWebhookConfigForRepoRequestJSON(req OptReposUpdateWebhookConfigForRepoReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeSecretScanningUpdateAlertRequestJSON(req SecretScanningUpdateAlertReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsAddOrUpdateMembershipForUserInOrgRequestJSON(req OptTeamsAddOrUpdateMembershipForUserInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsAddOrUpdateMembershipForUserLegacyRequestJSON(req OptTeamsAddOrUpdateMembershipForUserLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsAddOrUpdateProjectPermissionsInOrgRequestJSON(req OptTeamsAddOrUpdateProjectPermissionsInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsAddOrUpdateProjectPermissionsLegacyRequestJSON(req OptTeamsAddOrUpdateProjectPermissionsLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsAddOrUpdateRepoPermissionsInOrgRequestJSON(req OptTeamsAddOrUpdateRepoPermissionsInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsAddOrUpdateRepoPermissionsLegacyRequestJSON(req OptTeamsAddOrUpdateRepoPermissionsLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsCreateRequestJSON(req TeamsCreateReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsCreateDiscussionCommentInOrgRequestJSON(req TeamsCreateDiscussionCommentInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsCreateDiscussionCommentLegacyRequestJSON(req TeamsCreateDiscussionCommentLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsCreateDiscussionInOrgRequestJSON(req TeamsCreateDiscussionInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsCreateDiscussionLegacyRequestJSON(req TeamsCreateDiscussionLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgRequestJSON(req TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestJSON(req TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsUpdateDiscussionCommentInOrgRequestJSON(req TeamsUpdateDiscussionCommentInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsUpdateDiscussionCommentLegacyRequestJSON(req TeamsUpdateDiscussionCommentLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsUpdateDiscussionInOrgRequestJSON(req OptTeamsUpdateDiscussionInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsUpdateDiscussionLegacyRequestJSON(req OptTeamsUpdateDiscussionLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsUpdateInOrgRequestJSON(req OptTeamsUpdateInOrgReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeTeamsUpdateLegacyRequestJSON(req TeamsUpdateLegacyReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeUsersAddEmailForAuthenticatedRequestJSON(req OptUsersAddEmailForAuthenticatedReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeUsersCreateGpgKeyForAuthenticatedRequestJSON(req UsersCreateGpgKeyForAuthenticatedReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeUsersCreatePublicSSHKeyForAuthenticatedRequestJSON(req UsersCreatePublicSSHKeyForAuthenticatedReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeUsersDeleteEmailForAuthenticatedRequestJSON(req OptUsersDeleteEmailForAuthenticatedReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeUsersSetPrimaryEmailVisibilityForAuthenticatedRequestJSON(req UsersSetPrimaryEmailVisibilityForAuthenticatedReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}

	req.Encode(e)
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}

func encodeUsersUpdateAuthenticatedRequestJSON(req OptUsersUpdateAuthenticatedReq, span trace.Span) (data *bytes.Buffer, err error) {
	buf := getBuf()
	e := &jx.Writer{}
	if req.Set {
		req.Encode(e)
	}
	if _, err := e.WriteTo(buf); err != nil {
		putBuf(buf)
		return nil, err
	}

	return buf, nil
}
