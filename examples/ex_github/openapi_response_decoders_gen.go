// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/encoding/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func decodeMetaRootResponse(resp *http.Response) (_ MetaRoot, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MetaRoot
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsGetAuthenticatedResponse(resp *http.Response) (_ Integration, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Integration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsCreateFromManifestResponse(resp *http.Response) (_ AppsCreateFromManifestResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsGetWebhookConfigForAppResponse(resp *http.Response) (_ AppsGetWebhookConfigForAppResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsUpdateWebhookConfigForAppResponse(resp *http.Response) (_ WebhookConfig, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response WebhookConfig
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListWebhookDeliveriesResponse(resp *http.Response) (_ AppsListWebhookDeliveriesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListWebhookDeliveriesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsGetWebhookDeliveryResponse(resp *http.Response) (_ AppsGetWebhookDeliveryResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response HookDelivery
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsRedeliverWebhookDeliveryResponse(resp *http.Response) (_ AppsRedeliverWebhookDeliveryResponse, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response accepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListInstallationsResponse(resp *http.Response) (_ AppsListInstallationsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsGetInstallationResponse(resp *http.Response) (_ AppsGetInstallationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Installation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsDeleteInstallationResponse(resp *http.Response) (_ AppsDeleteInstallationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &AppsDeleteInstallationNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsCreateInstallationAccessTokenResponse(resp *http.Response) (_ AppsCreateInstallationAccessTokenResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response InstallationToken
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsSuspendInstallationResponse(resp *http.Response) (_ AppsSuspendInstallationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &AppsSuspendInstallationNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsUnsuspendInstallationResponse(resp *http.Response) (_ AppsUnsuspendInstallationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &AppsUnsuspendInstallationNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOAuthAuthorizationsListGrantsResponse(resp *http.Response) (_ OAuthAuthorizationsListGrantsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsListGrantsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOAuthAuthorizationsGetGrantResponse(resp *http.Response) (_ OAuthAuthorizationsGetGrantResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ApplicationGrant
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOAuthAuthorizationsDeleteGrantResponse(resp *http.Response) (_ OAuthAuthorizationsDeleteGrantResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OAuthAuthorizationsDeleteGrantNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsDeleteAuthorizationResponse(resp *http.Response) (_ AppsDeleteAuthorizationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &AppsDeleteAuthorizationNoContent{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsCheckTokenResponse(resp *http.Response) (_ AppsCheckTokenResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsDeleteTokenResponse(resp *http.Response) (_ AppsDeleteTokenResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &AppsDeleteTokenNoContent{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsResetTokenResponse(resp *http.Response) (_ AppsResetTokenResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsScopeTokenResponse(resp *http.Response) (_ AppsScopeTokenResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsGetBySlugResponse(resp *http.Response) (_ AppsGetBySlugResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Integration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOAuthAuthorizationsListAuthorizationsResponse(resp *http.Response) (_ OAuthAuthorizationsListAuthorizationsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsListAuthorizationsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOAuthAuthorizationsCreateAuthorizationResponse(resp *http.Response) (_ OAuthAuthorizationsCreateAuthorizationResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOAuthAuthorizationsGetOrCreateAuthorizationForAppResponse(resp *http.Response) (_ OAuthAuthorizationsGetOrCreateAuthorizationForAppResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponse(resp *http.Response) (_ OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOAuthAuthorizationsGetAuthorizationResponse(resp *http.Response) (_ OAuthAuthorizationsGetAuthorizationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOAuthAuthorizationsDeleteAuthorizationResponse(resp *http.Response) (_ OAuthAuthorizationsDeleteAuthorizationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OAuthAuthorizationsDeleteAuthorizationNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOAuthAuthorizationsUpdateAuthorizationResponse(resp *http.Response) (_ OAuthAuthorizationsUpdateAuthorizationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodesOfConductGetAllCodesOfConductResponse(resp *http.Response) (_ CodesOfConductGetAllCodesOfConductResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodesOfConductGetAllCodesOfConductOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodesOfConductGetConductCodeResponse(resp *http.Response) (_ CodesOfConductGetConductCodeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeOfConduct
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEmojisGetResponse(resp *http.Response) (_ EmojisGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EmojisGetOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse(resp *http.Response) (_ ActionsEnterprisePermissions, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsEnterprisePermissions
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminSetGithubActionsPermissionsEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminSetGithubActionsPermissionsEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminGetAllowedActionsEnterpriseResponse(resp *http.Response) (_ SelectedActions, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SelectedActions
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminSetAllowedActionsEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminSetAllowedActionsEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminSetAllowedActionsEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse(resp *http.Response) (_ RunnerGroupsEnterprise, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsEnterprise
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse(resp *http.Response) (_ RunnerGroupsEnterprise, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsEnterprise
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse(resp *http.Response) (_ RunnerGroupsEnterprise, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsEnterprise
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminListSelfHostedRunnersForEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminListSelfHostedRunnersForEnterprise, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EnterpriseAdminListSelfHostedRunnersForEnterprise
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminListRunnerApplicationsForEnterpriseResponse(resp *http.Response) (_ []RunnerApplication, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []RunnerApplication
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminCreateRegistrationTokenForEnterpriseResponse(resp *http.Response) (_ AuthenticationToken, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminCreateRemoveTokenForEnterpriseResponse(resp *http.Response) (_ AuthenticationToken, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse(resp *http.Response) (_ Runner, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Runner
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminGetAuditLogResponse(resp *http.Response) (_ []AuditLogEvent, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []AuditLogEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeBillingGetGithubActionsBillingGheResponse(resp *http.Response) (_ ActionsBillingUsage, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsBillingUsage
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeBillingGetGithubPackagesBillingGheResponse(resp *http.Response) (_ PackagesBillingUsage, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesBillingUsage
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeBillingGetSharedStorageBillingGheResponse(resp *http.Response) (_ CombinedBillingUsage, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CombinedBillingUsage
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListPublicEventsResponse(resp *http.Response) (_ ActivityListPublicEventsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListPublicEventsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityGetFeedsResponse(resp *http.Response) (_ Feed, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Feed
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsListResponse(resp *http.Response) (_ GistsListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsCreateResponse(resp *http.Response) (_ GistsCreateResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsListPublicResponse(resp *http.Response) (_ GistsListPublicResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListPublicOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsListStarredResponse(resp *http.Response) (_ GistsListStarredResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListStarredOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsGetResponse(resp *http.Response) (_ GistsGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response forbidden_gist
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsDeleteResponse(resp *http.Response) (_ GistsDeleteResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &GistsDeleteNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsUpdateResponse(resp *http.Response) (_ GistsUpdateResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsListCommentsResponse(resp *http.Response) (_ GistsListCommentsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListCommentsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsCreateCommentResponse(resp *http.Response) (_ GistsCreateCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsGetCommentResponse(resp *http.Response) (_ GistsGetCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response forbidden_gist
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsDeleteCommentResponse(resp *http.Response) (_ GistsDeleteCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &GistsDeleteCommentNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsUpdateCommentResponse(resp *http.Response) (_ GistsUpdateCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsListCommitsResponse(resp *http.Response) (_ GistsListCommitsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListCommitsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsListForksResponse(resp *http.Response) (_ GistsListForksResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsForkResponse(resp *http.Response) (_ GistsForkResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsCheckIsStarredResponse(resp *http.Response) (_ GistsCheckIsStarredResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &GistsCheckIsStarredNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsCheckIsStarredNotFound
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsStarResponse(resp *http.Response) (_ GistsStarResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &GistsStarNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsUnstarResponse(resp *http.Response) (_ GistsUnstarResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &GistsUnstarNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsGetRevisionResponse(resp *http.Response) (_ GistsGetRevisionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitignoreGetAllTemplatesResponse(resp *http.Response) (_ GitignoreGetAllTemplatesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitignoreGetAllTemplatesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitignoreGetTemplateResponse(resp *http.Response) (_ GitignoreGetTemplateResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitignoreTemplate
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListReposAccessibleToInstallationResponse(resp *http.Response) (_ AppsListReposAccessibleToInstallationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListReposAccessibleToInstallationOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsRevokeInstallationAccessTokenResponse(resp *http.Response) (_ AppsRevokeInstallationAccessToken, rerr error) {
	switch resp.StatusCode {
	case 204:
		return AppsRevokeInstallationAccessToken{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListResponse(resp *http.Response) (_ IssuesListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeLicensesGetAllCommonlyUsedResponse(resp *http.Response) (_ LicensesGetAllCommonlyUsedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response LicensesGetAllCommonlyUsedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeLicensesGetResponse(resp *http.Response) (_ LicensesGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response License
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMarkdownRenderResponse(resp *http.Response) (_ MarkdownRenderResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "text/html":
			rerr = fmt.Errorf("text/html decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMarkdownRenderRawResponse(resp *http.Response) (_ MarkdownRenderRawResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "text/html":
			rerr = fmt.Errorf("text/html decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsGetSubscriptionPlanForAccountResponse(resp *http.Response) (_ AppsGetSubscriptionPlanForAccountResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MarketplacePurchase
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListPlansResponse(resp *http.Response) (_ AppsListPlansResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListPlansOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListAccountsForPlanResponse(resp *http.Response) (_ AppsListAccountsForPlanResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListAccountsForPlanOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsGetSubscriptionPlanForAccountStubbedResponse(resp *http.Response) (_ AppsGetSubscriptionPlanForAccountStubbedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MarketplacePurchase
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &AppsGetSubscriptionPlanForAccountStubbedNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListPlansStubbedResponse(resp *http.Response) (_ AppsListPlansStubbedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListPlansStubbedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListAccountsForPlanStubbedResponse(resp *http.Response) (_ AppsListAccountsForPlanStubbedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListAccountsForPlanStubbedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMetaGetResponse(resp *http.Response) (_ MetaGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response APIOverview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListPublicEventsForRepoNetworkResponse(resp *http.Response) (_ ActivityListPublicEventsForRepoNetworkResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListPublicEventsForRepoNetworkOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListNotificationsForAuthenticatedUserResponse(resp *http.Response) (_ ActivityListNotificationsForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListNotificationsForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityMarkNotificationsAsReadResponse(resp *http.Response) (_ ActivityMarkNotificationsAsReadResponse, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityMarkNotificationsAsReadAccepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 205:
		return &ActivityMarkNotificationsAsReadResetContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityGetThreadResponse(resp *http.Response) (_ ActivityGetThreadResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Thread
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityMarkThreadAsReadResponse(resp *http.Response) (_ ActivityMarkThreadAsReadResponse, rerr error) {
	switch resp.StatusCode {
	case 205:
		return &ActivityMarkThreadAsReadResetContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityGetThreadSubscriptionForAuthenticatedUserResponse(resp *http.Response) (_ ActivityGetThreadSubscriptionForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ThreadSubscription
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivitySetThreadSubscriptionResponse(resp *http.Response) (_ ActivitySetThreadSubscriptionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ThreadSubscription
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityDeleteThreadSubscriptionResponse(resp *http.Response) (_ ActivityDeleteThreadSubscriptionResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ActivityDeleteThreadSubscriptionNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMetaGetOctocatResponse(resp *http.Response) (_ string, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/octocat-stream":
			rerr = fmt.Errorf("application/octocat-stream decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListResponse(resp *http.Response) (_ OrgsListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsGetResponse(resp *http.Response) (_ OrgsGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrganizationFull
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsUpdateResponse(resp *http.Response) (_ OrgsUpdateResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrganizationFull
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetGithubActionsPermissionsOrganizationResponse(resp *http.Response) (_ ActionsOrganizationPermissions, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsOrganizationPermissions
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsSetGithubActionsPermissionsOrganizationResponse(resp *http.Response) (_ ActionsSetGithubActionsPermissionsOrganization, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetGithubActionsPermissionsOrganization{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse(resp *http.Response) (_ ActionsListSelectedRepositoriesEnabledGithubActionsOrganization, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelectedRepositoriesEnabledGithubActionsOrganization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse(resp *http.Response) (_ ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsEnableSelectedRepositoryGithubActionsOrganizationResponse(resp *http.Response) (_ ActionsEnableSelectedRepositoryGithubActionsOrganization, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsEnableSelectedRepositoryGithubActionsOrganization{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDisableSelectedRepositoryGithubActionsOrganizationResponse(resp *http.Response) (_ ActionsDisableSelectedRepositoryGithubActionsOrganization, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDisableSelectedRepositoryGithubActionsOrganization{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetAllowedActionsOrganizationResponse(resp *http.Response) (_ SelectedActions, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SelectedActions
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsSetAllowedActionsOrganizationResponse(resp *http.Response) (_ ActionsSetAllowedActionsOrganization, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetAllowedActionsOrganization{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListSelfHostedRunnerGroupsForOrgResponse(resp *http.Response) (_ ActionsListSelfHostedRunnerGroupsForOrg, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelfHostedRunnerGroupsForOrg
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsCreateSelfHostedRunnerGroupForOrgResponse(resp *http.Response) (_ RunnerGroupsOrg, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsOrg
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetSelfHostedRunnerGroupForOrgResponse(resp *http.Response) (_ RunnerGroupsOrg, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsOrg
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDeleteSelfHostedRunnerGroupFromOrgResponse(resp *http.Response) (_ ActionsDeleteSelfHostedRunnerGroupFromOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteSelfHostedRunnerGroupFromOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsUpdateSelfHostedRunnerGroupForOrgResponse(resp *http.Response) (_ RunnerGroupsOrg, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsOrg
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse(resp *http.Response) (_ ActionsListRepoAccessToSelfHostedRunnerGroupInOrg, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListRepoAccessToSelfHostedRunnerGroupInOrg
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponse(resp *http.Response) (_ ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse(resp *http.Response) (_ ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponse(resp *http.Response) (_ ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListSelfHostedRunnersInGroupForOrgResponse(resp *http.Response) (_ ActionsListSelfHostedRunnersInGroupForOrg, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelfHostedRunnersInGroupForOrg
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsSetSelfHostedRunnersInGroupForOrgResponse(resp *http.Response) (_ ActionsSetSelfHostedRunnersInGroupForOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetSelfHostedRunnersInGroupForOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsAddSelfHostedRunnerToGroupForOrgResponse(resp *http.Response) (_ ActionsAddSelfHostedRunnerToGroupForOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsAddSelfHostedRunnerToGroupForOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsRemoveSelfHostedRunnerFromGroupForOrgResponse(resp *http.Response) (_ ActionsRemoveSelfHostedRunnerFromGroupForOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsRemoveSelfHostedRunnerFromGroupForOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListSelfHostedRunnersForOrgResponse(resp *http.Response) (_ ActionsListSelfHostedRunnersForOrg, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelfHostedRunnersForOrg
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListRunnerApplicationsForOrgResponse(resp *http.Response) (_ []RunnerApplication, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []RunnerApplication
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsCreateRegistrationTokenForOrgResponse(resp *http.Response) (_ AuthenticationToken, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsCreateRemoveTokenForOrgResponse(resp *http.Response) (_ AuthenticationToken, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetSelfHostedRunnerForOrgResponse(resp *http.Response) (_ Runner, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Runner
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDeleteSelfHostedRunnerFromOrgResponse(resp *http.Response) (_ ActionsDeleteSelfHostedRunnerFromOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteSelfHostedRunnerFromOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListOrgSecretsResponse(resp *http.Response) (_ ActionsListOrgSecrets, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListOrgSecrets
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetOrgPublicKeyResponse(resp *http.Response) (_ ActionsPublicKey, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsPublicKey
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetOrgSecretResponse(resp *http.Response) (_ OrganizationActionsSecret, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrganizationActionsSecret
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsCreateOrUpdateOrgSecretResponse(resp *http.Response) (_ ActionsCreateOrUpdateOrgSecretResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsCreateOrUpdateOrgSecretCreated
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &ActionsCreateOrUpdateOrgSecretNoContent{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDeleteOrgSecretResponse(resp *http.Response) (_ ActionsDeleteOrgSecret, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteOrgSecret{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListSelectedReposForOrgSecretResponse(resp *http.Response) (_ ActionsListSelectedReposForOrgSecret, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelectedReposForOrgSecret
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsSetSelectedReposForOrgSecretResponse(resp *http.Response) (_ ActionsSetSelectedReposForOrgSecret, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetSelectedReposForOrgSecret{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsAddSelectedRepoToOrgSecretResponse(resp *http.Response) (_ ActionsAddSelectedRepoToOrgSecretResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ActionsAddSelectedRepoToOrgSecretNoContent{}, nil
	case 409:
		return &ActionsAddSelectedRepoToOrgSecretConflict{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsRemoveSelectedRepoFromOrgSecretResponse(resp *http.Response) (_ ActionsRemoveSelectedRepoFromOrgSecretResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ActionsRemoveSelectedRepoFromOrgSecretNoContent{}, nil
	case 409:
		return &ActionsRemoveSelectedRepoFromOrgSecretConflict{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsGetAuditLogResponse(resp *http.Response) (_ OrgsGetAuditLogResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListBlockedUsersResponse(resp *http.Response) (_ OrgsListBlockedUsersResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListBlockedUsersOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsCheckBlockedUserResponse(resp *http.Response) (_ OrgsCheckBlockedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsCheckBlockedUserNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsBlockUserResponse(resp *http.Response) (_ OrgsBlockUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsBlockUserNoContent{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsUnblockUserResponse(resp *http.Response) (_ OrgsUnblockUser, rerr error) {
	switch resp.StatusCode {
	case 204:
		return OrgsUnblockUser{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListSamlSSOAuthorizationsResponse(resp *http.Response) (_ []CredentialAuthorization, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []CredentialAuthorization
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsRemoveSamlSSOAuthorizationResponse(resp *http.Response) (_ OrgsRemoveSamlSSOAuthorizationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsRemoveSamlSSOAuthorizationNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListPublicOrgEventsResponse(resp *http.Response) (_ []Event, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListFailedInvitationsResponse(resp *http.Response) (_ OrgsListFailedInvitationsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListFailedInvitationsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListWebhooksResponse(resp *http.Response) (_ OrgsListWebhooksResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListWebhooksOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsCreateWebhookResponse(resp *http.Response) (_ OrgsCreateWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgHook
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsGetWebhookResponse(resp *http.Response) (_ OrgsGetWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgHook
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsDeleteWebhookResponse(resp *http.Response) (_ OrgsDeleteWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsDeleteWebhookNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsUpdateWebhookResponse(resp *http.Response) (_ OrgsUpdateWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgHook
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsGetWebhookConfigForOrgResponse(resp *http.Response) (_ WebhookConfig, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response WebhookConfig
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsUpdateWebhookConfigForOrgResponse(resp *http.Response) (_ WebhookConfig, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response WebhookConfig
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListWebhookDeliveriesResponse(resp *http.Response) (_ OrgsListWebhookDeliveriesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListWebhookDeliveriesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsGetWebhookDeliveryResponse(resp *http.Response) (_ OrgsGetWebhookDeliveryResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response HookDelivery
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsRedeliverWebhookDeliveryResponse(resp *http.Response) (_ OrgsRedeliverWebhookDeliveryResponse, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response accepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsPingWebhookResponse(resp *http.Response) (_ OrgsPingWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsPingWebhookNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsGetOrgInstallationResponse(resp *http.Response) (_ Installation, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Installation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListAppInstallationsResponse(resp *http.Response) (_ OrgsListAppInstallations, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListAppInstallations
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeInteractionsGetRestrictionsForOrgResponse(resp *http.Response) (_ InteractionsGetRestrictionsForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeInteractionsSetRestrictionsForOrgResponse(resp *http.Response) (_ InteractionsSetRestrictionsForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response InteractionLimitResponse
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeInteractionsRemoveRestrictionsForOrgResponse(resp *http.Response) (_ InteractionsRemoveRestrictionsForOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return InteractionsRemoveRestrictionsForOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListPendingInvitationsResponse(resp *http.Response) (_ OrgsListPendingInvitationsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListPendingInvitationsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsCreateInvitationResponse(resp *http.Response) (_ OrgsCreateInvitationResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrganizationInvitation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsCancelInvitationResponse(resp *http.Response) (_ OrgsCancelInvitationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsCancelInvitationNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListInvitationTeamsResponse(resp *http.Response) (_ OrgsListInvitationTeamsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListInvitationTeamsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListForOrgResponse(resp *http.Response) (_ IssuesListForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListForOrgOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListMembersResponse(resp *http.Response) (_ OrgsListMembersResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListMembersOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 302:
		return &OrgsListMembersFound{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsCheckMembershipForUserResponse(resp *http.Response) (_ OrgsCheckMembershipForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsCheckMembershipForUserNoContent{}, nil
	case 302:
		return &OrgsCheckMembershipForUserFound{}, nil
	case 404:
		return &OrgsCheckMembershipForUserNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsRemoveMemberResponse(resp *http.Response) (_ OrgsRemoveMemberResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsRemoveMemberNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsGetMembershipForUserResponse(resp *http.Response) (_ OrgsGetMembershipForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgMembership
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsSetMembershipForUserResponse(resp *http.Response) (_ OrgsSetMembershipForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgMembership
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsRemoveMembershipForUserResponse(resp *http.Response) (_ OrgsRemoveMembershipForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsRemoveMembershipForUserNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsListForOrgResponse(resp *http.Response) (_ []Migration, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Migration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsStartForOrgResponse(resp *http.Response) (_ MigrationsStartForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Migration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsGetStatusForOrgResponse(resp *http.Response) (_ MigrationsGetStatusForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsDownloadArchiveForOrgResponse(resp *http.Response) (_ MigrationsDownloadArchiveForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 302:
		return &MigrationsDownloadArchiveForOrgFound{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsDeleteArchiveForOrgResponse(resp *http.Response) (_ MigrationsDeleteArchiveForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &MigrationsDeleteArchiveForOrgNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsUnlockRepoForOrgResponse(resp *http.Response) (_ MigrationsUnlockRepoForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &MigrationsUnlockRepoForOrgNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsListReposForOrgResponse(resp *http.Response) (_ MigrationsListReposForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsListReposForOrgOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListOutsideCollaboratorsResponse(resp *http.Response) (_ []SimpleUser, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []SimpleUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsConvertMemberToOutsideCollaboratorResponse(resp *http.Response) (_ OrgsConvertMemberToOutsideCollaboratorResponse, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsConvertMemberToOutsideCollaboratorAccepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &OrgsConvertMemberToOutsideCollaboratorNoContent{}, nil
	case 403:
		return &OrgsConvertMemberToOutsideCollaboratorForbidden{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsRemoveOutsideCollaboratorResponse(resp *http.Response) (_ OrgsRemoveOutsideCollaboratorResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsRemoveOutsideCollaboratorNoContent{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsRemoveOutsideCollaboratorUnprocessableEntity
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesListPackagesForOrganizationResponse(resp *http.Response) (_ PackagesListPackagesForOrganizationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesListPackagesForOrganizationOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesGetPackageForOrganizationResponse(resp *http.Response) (_ Package, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Package
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesDeletePackageForOrgResponse(resp *http.Response) (_ PackagesDeletePackageForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesDeletePackageForOrgNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesRestorePackageForOrgResponse(resp *http.Response) (_ PackagesRestorePackageForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesRestorePackageForOrgNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesGetAllPackageVersionsForPackageOwnedByOrgResponse(resp *http.Response) (_ PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesGetAllPackageVersionsForPackageOwnedByOrgOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesGetPackageVersionForOrganizationResponse(resp *http.Response) (_ PackageVersion, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackageVersion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesDeletePackageVersionForOrgResponse(resp *http.Response) (_ PackagesDeletePackageVersionForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesDeletePackageVersionForOrgNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesRestorePackageVersionForOrgResponse(resp *http.Response) (_ PackagesRestorePackageVersionForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesRestorePackageVersionForOrgNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsListForOrgResponse(resp *http.Response) (_ ProjectsListForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsListForOrgOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsCreateForOrgResponse(resp *http.Response) (_ ProjectsCreateForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Project
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListPublicMembersResponse(resp *http.Response) (_ []SimpleUser, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []SimpleUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsCheckPublicMembershipForUserResponse(resp *http.Response) (_ OrgsCheckPublicMembershipForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsCheckPublicMembershipForUserNoContent{}, nil
	case 404:
		return &OrgsCheckPublicMembershipForUserNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsSetPublicMembershipForAuthenticatedUserResponse(resp *http.Response) (_ OrgsSetPublicMembershipForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsSetPublicMembershipForAuthenticatedUserNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsRemovePublicMembershipForAuthenticatedUserResponse(resp *http.Response) (_ OrgsRemovePublicMembershipForAuthenticatedUser, rerr error) {
	switch resp.StatusCode {
	case 204:
		return OrgsRemovePublicMembershipForAuthenticatedUser{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListForOrgResponse(resp *http.Response) (_ []MinimalRepository, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []MinimalRepository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateInOrgResponse(resp *http.Response) (_ ReposCreateInOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Repository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSecretScanningListAlertsForOrgResponse(resp *http.Response) (_ SecretScanningListAlertsForOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SecretScanningListAlertsForOrgOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeBillingGetGithubActionsBillingOrgResponse(resp *http.Response) (_ ActionsBillingUsage, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsBillingUsage
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeBillingGetGithubPackagesBillingOrgResponse(resp *http.Response) (_ PackagesBillingUsage, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesBillingUsage
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeBillingGetSharedStorageBillingOrgResponse(resp *http.Response) (_ CombinedBillingUsage, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CombinedBillingUsage
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListIdpGroupsForOrgResponse(resp *http.Response) (_ GroupMapping, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GroupMapping
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListResponse(resp *http.Response) (_ TeamsListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCreateResponse(resp *http.Response) (_ TeamsCreateResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamFull
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsGetByNameResponse(resp *http.Response) (_ TeamsGetByNameResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamFull
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsDeleteInOrgResponse(resp *http.Response) (_ TeamsDeleteInOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return TeamsDeleteInOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsUpdateInOrgResponse(resp *http.Response) (_ TeamFull, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamFull
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListDiscussionsInOrgResponse(resp *http.Response) (_ []TeamDiscussion, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []TeamDiscussion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCreateDiscussionInOrgResponse(resp *http.Response) (_ TeamDiscussion, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsGetDiscussionInOrgResponse(resp *http.Response) (_ TeamDiscussion, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsDeleteDiscussionInOrgResponse(resp *http.Response) (_ TeamsDeleteDiscussionInOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return TeamsDeleteDiscussionInOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsUpdateDiscussionInOrgResponse(resp *http.Response) (_ TeamDiscussion, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListDiscussionCommentsInOrgResponse(resp *http.Response) (_ []TeamDiscussionComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []TeamDiscussionComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCreateDiscussionCommentInOrgResponse(resp *http.Response) (_ TeamDiscussionComment, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsGetDiscussionCommentInOrgResponse(resp *http.Response) (_ TeamDiscussionComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsDeleteDiscussionCommentInOrgResponse(resp *http.Response) (_ TeamsDeleteDiscussionCommentInOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return TeamsDeleteDiscussionCommentInOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsUpdateDiscussionCommentInOrgResponse(resp *http.Response) (_ TeamDiscussionComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsListForTeamDiscussionCommentInOrgResponse(resp *http.Response) (_ []Reaction, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsCreateForTeamDiscussionCommentInOrgResponse(resp *http.Response) (_ ReactionsCreateForTeamDiscussionCommentInOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsDeleteForTeamDiscussionCommentResponse(resp *http.Response) (_ ReactionsDeleteForTeamDiscussionComment, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForTeamDiscussionComment{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsListForTeamDiscussionInOrgResponse(resp *http.Response) (_ []Reaction, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsCreateForTeamDiscussionInOrgResponse(resp *http.Response) (_ ReactionsCreateForTeamDiscussionInOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsDeleteForTeamDiscussionResponse(resp *http.Response) (_ ReactionsDeleteForTeamDiscussion, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForTeamDiscussion{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListPendingInvitationsInOrgResponse(resp *http.Response) (_ []OrganizationInvitation, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []OrganizationInvitation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListMembersInOrgResponse(resp *http.Response) (_ []SimpleUser, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []SimpleUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsGetMembershipForUserInOrgResponse(resp *http.Response) (_ TeamsGetMembershipForUserInOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamMembership
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &TeamsGetMembershipForUserInOrgNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsAddOrUpdateMembershipForUserInOrgResponse(resp *http.Response) (_ TeamsAddOrUpdateMembershipForUserInOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamMembership
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		return &TeamsAddOrUpdateMembershipForUserInOrgForbidden{}, nil
	case 422:
		return &TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsRemoveMembershipForUserInOrgResponse(resp *http.Response) (_ TeamsRemoveMembershipForUserInOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsRemoveMembershipForUserInOrgNoContent{}, nil
	case 403:
		return &TeamsRemoveMembershipForUserInOrgForbidden{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListProjectsInOrgResponse(resp *http.Response) (_ []TeamProject, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []TeamProject
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCheckPermissionsForProjectInOrgResponse(resp *http.Response) (_ TeamsCheckPermissionsForProjectInOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamProject
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &TeamsCheckPermissionsForProjectInOrgNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsAddOrUpdateProjectPermissionsInOrgResponse(resp *http.Response) (_ TeamsAddOrUpdateProjectPermissionsInOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsAddOrUpdateProjectPermissionsInOrgNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsAddOrUpdateProjectPermissionsInOrgForbidden
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsRemoveProjectInOrgResponse(resp *http.Response) (_ TeamsRemoveProjectInOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return TeamsRemoveProjectInOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListReposInOrgResponse(resp *http.Response) (_ []MinimalRepository, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []MinimalRepository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCheckPermissionsForRepoInOrgResponse(resp *http.Response) (_ TeamsCheckPermissionsForRepoInOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamRepository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &TeamsCheckPermissionsForRepoInOrgNoContent{}, nil
	case 404:
		return &TeamsCheckPermissionsForRepoInOrgNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsAddOrUpdateRepoPermissionsInOrgResponse(resp *http.Response) (_ TeamsAddOrUpdateRepoPermissionsInOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return TeamsAddOrUpdateRepoPermissionsInOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsRemoveRepoInOrgResponse(resp *http.Response) (_ TeamsRemoveRepoInOrg, rerr error) {
	switch resp.StatusCode {
	case 204:
		return TeamsRemoveRepoInOrg{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListIdpGroupsInOrgResponse(resp *http.Response) (_ GroupMapping, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GroupMapping
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse(resp *http.Response) (_ GroupMapping, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GroupMapping
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListChildInOrgResponse(resp *http.Response) (_ []Team, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Team
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsGetCardResponse(resp *http.Response) (_ ProjectsGetCardResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectCard
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsDeleteCardResponse(resp *http.Response) (_ ProjectsDeleteCardResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ProjectsDeleteCardNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteCardForbidden
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsUpdateCardResponse(resp *http.Response) (_ ProjectsUpdateCardResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectCard
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsMoveCardResponse(resp *http.Response) (_ ProjectsMoveCardResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsMoveCardCreated
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsMoveCardForbidden
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsMoveCardServiceUnavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsGetColumnResponse(resp *http.Response) (_ ProjectsGetColumnResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectColumn
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsDeleteColumnResponse(resp *http.Response) (_ ProjectsDeleteColumnResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ProjectsDeleteColumnNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsUpdateColumnResponse(resp *http.Response) (_ ProjectsUpdateColumnResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectColumn
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsListCardsResponse(resp *http.Response) (_ ProjectsListCardsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsListCardsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsCreateCardResponse(resp *http.Response) (_ ProjectsCreateCardResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectCard
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateCardServiceUnavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsMoveColumnResponse(resp *http.Response) (_ ProjectsMoveColumnResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsMoveColumnCreated
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsGetResponse(resp *http.Response) (_ ProjectsGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Project
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsDeleteResponse(resp *http.Response) (_ ProjectsDeleteResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ProjectsDeleteNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteForbidden
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsUpdateResponse(resp *http.Response) (_ ProjectsUpdateResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Project
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsUpdateForbidden
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &ProjectsUpdateNotFound{}, nil
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsListCollaboratorsResponse(resp *http.Response) (_ ProjectsListCollaboratorsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsListCollaboratorsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsAddCollaboratorResponse(resp *http.Response) (_ ProjectsAddCollaboratorResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ProjectsAddCollaboratorNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsRemoveCollaboratorResponse(resp *http.Response) (_ ProjectsRemoveCollaboratorResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ProjectsRemoveCollaboratorNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsGetPermissionForUserResponse(resp *http.Response) (_ ProjectsGetPermissionForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RepositoryCollaboratorPermission
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsListColumnsResponse(resp *http.Response) (_ ProjectsListColumnsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsListColumnsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsCreateColumnResponse(resp *http.Response) (_ ProjectsCreateColumnResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectColumn
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeRateLimitGetResponse(resp *http.Response) (_ RateLimitGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RateLimitOverview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsDeleteLegacyResponse(resp *http.Response) (_ ReactionsDeleteLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReactionsDeleteLegacyNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetResponse(resp *http.Response) (_ ReposGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response FullRepository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteResponse(resp *http.Response) (_ ReposDeleteResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteNoContent{}, nil
	case 307:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposDeleteForbidden
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdateResponse(resp *http.Response) (_ ReposUpdateResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response FullRepository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 307:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListArtifactsForRepoResponse(resp *http.Response) (_ ActionsListArtifactsForRepo, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListArtifactsForRepo
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetArtifactResponse(resp *http.Response) (_ Artifact, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Artifact
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDeleteArtifactResponse(resp *http.Response) (_ ActionsDeleteArtifact, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteArtifact{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDownloadArtifactResponse(resp *http.Response) (_ ActionsDownloadArtifact, rerr error) {
	switch resp.StatusCode {
	case 302:
		return ActionsDownloadArtifact{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetJobForWorkflowRunResponse(resp *http.Response) (_ Job, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Job
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDownloadJobLogsForWorkflowRunResponse(resp *http.Response) (_ ActionsDownloadJobLogsForWorkflowRun, rerr error) {
	switch resp.StatusCode {
	case 302:
		return ActionsDownloadJobLogsForWorkflowRun{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetGithubActionsPermissionsRepositoryResponse(resp *http.Response) (_ ActionsRepositoryPermissions, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsRepositoryPermissions
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsSetGithubActionsPermissionsRepositoryResponse(resp *http.Response) (_ ActionsSetGithubActionsPermissionsRepository, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetGithubActionsPermissionsRepository{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetAllowedActionsRepositoryResponse(resp *http.Response) (_ SelectedActions, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SelectedActions
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsSetAllowedActionsRepositoryResponse(resp *http.Response) (_ ActionsSetAllowedActionsRepository, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetAllowedActionsRepository{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListSelfHostedRunnersForRepoResponse(resp *http.Response) (_ ActionsListSelfHostedRunnersForRepo, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelfHostedRunnersForRepo
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListRunnerApplicationsForRepoResponse(resp *http.Response) (_ []RunnerApplication, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []RunnerApplication
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsCreateRegistrationTokenForRepoResponse(resp *http.Response) (_ AuthenticationToken, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsCreateRemoveTokenForRepoResponse(resp *http.Response) (_ AuthenticationToken, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetSelfHostedRunnerForRepoResponse(resp *http.Response) (_ Runner, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Runner
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDeleteSelfHostedRunnerFromRepoResponse(resp *http.Response) (_ ActionsDeleteSelfHostedRunnerFromRepo, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteSelfHostedRunnerFromRepo{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListWorkflowRunsForRepoResponse(resp *http.Response) (_ ActionsListWorkflowRunsForRepo, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListWorkflowRunsForRepo
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetWorkflowRunResponse(resp *http.Response) (_ WorkflowRun, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response WorkflowRun
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDeleteWorkflowRunResponse(resp *http.Response) (_ ActionsDeleteWorkflowRun, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteWorkflowRun{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetReviewsForRunResponse(resp *http.Response) (_ []EnvironmentApprovals, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []EnvironmentApprovals
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsApproveWorkflowRunResponse(resp *http.Response) (_ ActionsApproveWorkflowRunResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsApproveWorkflowRunCreated
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListWorkflowRunArtifactsResponse(resp *http.Response) (_ ActionsListWorkflowRunArtifacts, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListWorkflowRunArtifacts
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsCancelWorkflowRunResponse(resp *http.Response) (_ ActionsCancelWorkflowRun, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsCancelWorkflowRun
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListJobsForWorkflowRunResponse(resp *http.Response) (_ ActionsListJobsForWorkflowRun, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListJobsForWorkflowRun
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDownloadWorkflowRunLogsResponse(resp *http.Response) (_ ActionsDownloadWorkflowRunLogs, rerr error) {
	switch resp.StatusCode {
	case 302:
		return ActionsDownloadWorkflowRunLogs{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDeleteWorkflowRunLogsResponse(resp *http.Response) (_ ActionsDeleteWorkflowRunLogs, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteWorkflowRunLogs{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetPendingDeploymentsForRunResponse(resp *http.Response) (_ ActionsGetPendingDeploymentsForRunResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsReviewPendingDeploymentsForRunResponse(resp *http.Response) (_ []Deployment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Deployment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsReRunWorkflowResponse(resp *http.Response) (_ ActionsReRunWorkflow, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsReRunWorkflow
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsRetryWorkflowResponse(resp *http.Response) (_ ActionsRetryWorkflow, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsRetryWorkflow
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetWorkflowRunUsageResponse(resp *http.Response) (_ WorkflowRunUsage, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response WorkflowRunUsage
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListRepoSecretsResponse(resp *http.Response) (_ ActionsListRepoSecrets, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListRepoSecrets
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetRepoPublicKeyResponse(resp *http.Response) (_ ActionsPublicKey, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsPublicKey
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetRepoSecretResponse(resp *http.Response) (_ ActionsSecret, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsSecret
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsCreateOrUpdateRepoSecretResponse(resp *http.Response) (_ ActionsCreateOrUpdateRepoSecretResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsCreateOrUpdateRepoSecretCreated
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &ActionsCreateOrUpdateRepoSecretNoContent{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDeleteRepoSecretResponse(resp *http.Response) (_ ActionsDeleteRepoSecret, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteRepoSecret{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListRepoWorkflowsResponse(resp *http.Response) (_ ActionsListRepoWorkflows, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListRepoWorkflows
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListAssigneesResponse(resp *http.Response) (_ IssuesListAssigneesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListAssigneesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesCheckUserCanBeAssignedResponse(resp *http.Response) (_ IssuesCheckUserCanBeAssignedResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &IssuesCheckUserCanBeAssignedNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListAutolinksResponse(resp *http.Response) (_ []Autolink, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Autolink
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateAutolinkResponse(resp *http.Response) (_ ReposCreateAutolinkResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Autolink
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetAutolinkResponse(resp *http.Response) (_ ReposGetAutolinkResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Autolink
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteAutolinkResponse(resp *http.Response) (_ ReposDeleteAutolinkResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteAutolinkNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposEnableAutomatedSecurityFixesResponse(resp *http.Response) (_ ReposEnableAutomatedSecurityFixes, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposEnableAutomatedSecurityFixes{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDisableAutomatedSecurityFixesResponse(resp *http.Response) (_ ReposDisableAutomatedSecurityFixes, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposDisableAutomatedSecurityFixes{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListBranchesResponse(resp *http.Response) (_ ReposListBranchesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListBranchesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetBranchResponse(resp *http.Response) (_ ReposGetBranchResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BranchWithProtection
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetBranchProtectionResponse(resp *http.Response) (_ ReposGetBranchProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BranchProtection
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdateBranchProtectionResponse(resp *http.Response) (_ ReposUpdateBranchProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranch
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteBranchProtectionResponse(resp *http.Response) (_ ReposDeleteBranchProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteBranchProtectionNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetAdminBranchProtectionResponse(resp *http.Response) (_ ProtectedBranchAdminEnforced, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchAdminEnforced
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposSetAdminBranchProtectionResponse(resp *http.Response) (_ ProtectedBranchAdminEnforced, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchAdminEnforced
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteAdminBranchProtectionResponse(resp *http.Response) (_ ReposDeleteAdminBranchProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteAdminBranchProtectionNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetPullRequestReviewProtectionResponse(resp *http.Response) (_ ProtectedBranchPullRequestReview, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchPullRequestReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeletePullRequestReviewProtectionResponse(resp *http.Response) (_ ReposDeletePullRequestReviewProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeletePullRequestReviewProtectionNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdatePullRequestReviewProtectionResponse(resp *http.Response) (_ ReposUpdatePullRequestReviewProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchPullRequestReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetCommitSignatureProtectionResponse(resp *http.Response) (_ ReposGetCommitSignatureProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchAdminEnforced
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateCommitSignatureProtectionResponse(resp *http.Response) (_ ReposCreateCommitSignatureProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchAdminEnforced
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteCommitSignatureProtectionResponse(resp *http.Response) (_ ReposDeleteCommitSignatureProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteCommitSignatureProtectionNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetStatusChecksProtectionResponse(resp *http.Response) (_ ReposGetStatusChecksProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response StatusCheckPolicy
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposRemoveStatusCheckProtectionResponse(resp *http.Response) (_ ReposRemoveStatusCheckProtection, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposRemoveStatusCheckProtection{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdateStatusCheckProtectionResponse(resp *http.Response) (_ ReposUpdateStatusCheckProtectionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response StatusCheckPolicy
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetAllStatusCheckContextsResponse(resp *http.Response) (_ ReposGetAllStatusCheckContextsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetAllStatusCheckContextsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposSetStatusCheckContextsResponse(resp *http.Response) (_ ReposSetStatusCheckContextsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposSetStatusCheckContextsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposAddStatusCheckContextsResponse(resp *http.Response) (_ ReposAddStatusCheckContextsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposAddStatusCheckContextsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposRemoveStatusCheckContextsResponse(resp *http.Response) (_ ReposRemoveStatusCheckContextsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposRemoveStatusCheckContextsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetAccessRestrictionsResponse(resp *http.Response) (_ ReposGetAccessRestrictionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BranchRestrictionPolicy
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteAccessRestrictionsResponse(resp *http.Response) (_ ReposDeleteAccessRestrictions, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteAccessRestrictions{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetAppsWithAccessToProtectedBranchResponse(resp *http.Response) (_ ReposGetAppsWithAccessToProtectedBranchResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetAppsWithAccessToProtectedBranchOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposSetAppAccessRestrictionsResponse(resp *http.Response) (_ ReposSetAppAccessRestrictionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposSetAppAccessRestrictionsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposAddAppAccessRestrictionsResponse(resp *http.Response) (_ ReposAddAppAccessRestrictionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposAddAppAccessRestrictionsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposRemoveAppAccessRestrictionsResponse(resp *http.Response) (_ ReposRemoveAppAccessRestrictionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposRemoveAppAccessRestrictionsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetTeamsWithAccessToProtectedBranchResponse(resp *http.Response) (_ ReposGetTeamsWithAccessToProtectedBranchResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetTeamsWithAccessToProtectedBranchOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposSetTeamAccessRestrictionsResponse(resp *http.Response) (_ ReposSetTeamAccessRestrictionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposSetTeamAccessRestrictionsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposAddTeamAccessRestrictionsResponse(resp *http.Response) (_ ReposAddTeamAccessRestrictionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposAddTeamAccessRestrictionsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposRemoveTeamAccessRestrictionsResponse(resp *http.Response) (_ ReposRemoveTeamAccessRestrictionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposRemoveTeamAccessRestrictionsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetUsersWithAccessToProtectedBranchResponse(resp *http.Response) (_ ReposGetUsersWithAccessToProtectedBranchResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetUsersWithAccessToProtectedBranchOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposSetUserAccessRestrictionsResponse(resp *http.Response) (_ ReposSetUserAccessRestrictionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposSetUserAccessRestrictionsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposAddUserAccessRestrictionsResponse(resp *http.Response) (_ ReposAddUserAccessRestrictionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposAddUserAccessRestrictionsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposRemoveUserAccessRestrictionsResponse(resp *http.Response) (_ ReposRemoveUserAccessRestrictionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposRemoveUserAccessRestrictionsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposRenameBranchResponse(resp *http.Response) (_ ReposRenameBranchResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BranchWithProtection
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksCreateResponse(resp *http.Response) (_ CheckRun, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CheckRun
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksGetResponse(resp *http.Response) (_ CheckRun, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CheckRun
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksUpdateResponse(resp *http.Response) (_ CheckRun, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CheckRun
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksListAnnotationsResponse(resp *http.Response) (_ []CheckAnnotation, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []CheckAnnotation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksCreateSuiteResponse(resp *http.Response) (_ ChecksCreateSuiteResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CheckSuite
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CheckSuite
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksSetSuitesPreferencesResponse(resp *http.Response) (_ CheckSuitePreference, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CheckSuitePreference
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksGetSuiteResponse(resp *http.Response) (_ CheckSuite, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CheckSuite
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksListForSuiteResponse(resp *http.Response) (_ ChecksListForSuite, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ChecksListForSuite
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksRerequestSuiteResponse(resp *http.Response) (_ ChecksRerequestSuite, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ChecksRerequestSuite
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodeScanningListAlertsForRepoResponse(resp *http.Response) (_ CodeScanningListAlertsForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningListAlertsForRepoOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodeScanningGetAlertResponse(resp *http.Response) (_ CodeScanningGetAlertResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodeScanningUpdateAlertResponse(resp *http.Response) (_ CodeScanningUpdateAlertResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningAlert
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodeScanningListAlertInstancesResponse(resp *http.Response) (_ CodeScanningListAlertInstancesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningListAlertInstancesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodeScanningListRecentAnalysesResponse(resp *http.Response) (_ CodeScanningListRecentAnalysesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningListRecentAnalysesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodeScanningGetAnalysisResponse(resp *http.Response) (_ CodeScanningGetAnalysisResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningAnalysis
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json+sarif":
			rerr = fmt.Errorf("application/json+sarif decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodeScanningDeleteAnalysisResponse(resp *http.Response) (_ CodeScanningDeleteAnalysisResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningAnalysisDeletion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodeScanningUploadSarifResponse(resp *http.Response) (_ CodeScanningUploadSarifResponse, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningSarifsReceipt
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		return &CodeScanningUploadSarifBadRequest{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 413:
		return &CodeScanningUploadSarifRequestEntityTooLarge{}, nil
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCodeScanningGetSarifResponse(resp *http.Response) (_ CodeScanningGetSarifResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningSarifsStatus
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &CodeScanningGetSarifNotFound{}, nil
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListCollaboratorsResponse(resp *http.Response) (_ ReposListCollaboratorsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListCollaboratorsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCheckCollaboratorResponse(resp *http.Response) (_ ReposCheckCollaboratorResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposCheckCollaboratorNoContent{}, nil
	case 404:
		return &ReposCheckCollaboratorNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposAddCollaboratorResponse(resp *http.Response) (_ ReposAddCollaboratorResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RepositoryInvitation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &ReposAddCollaboratorNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposRemoveCollaboratorResponse(resp *http.Response) (_ ReposRemoveCollaborator, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposRemoveCollaborator{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetCollaboratorPermissionLevelResponse(resp *http.Response) (_ ReposGetCollaboratorPermissionLevelResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RepositoryCollaboratorPermission
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListCommitCommentsForRepoResponse(resp *http.Response) (_ []CommitComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []CommitComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetCommitCommentResponse(resp *http.Response) (_ ReposGetCommitCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CommitComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteCommitCommentResponse(resp *http.Response) (_ ReposDeleteCommitCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteCommitCommentNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdateCommitCommentResponse(resp *http.Response) (_ ReposUpdateCommitCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CommitComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsListForCommitCommentResponse(resp *http.Response) (_ ReactionsListForCommitCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsListForCommitCommentOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsCreateForCommitCommentResponse(resp *http.Response) (_ ReactionsCreateForCommitCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsDeleteForCommitCommentResponse(resp *http.Response) (_ ReactionsDeleteForCommitComment, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForCommitComment{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListCommitsResponse(resp *http.Response) (_ ReposListCommitsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListCommitsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 500:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListBranchesForHeadCommitResponse(resp *http.Response) (_ ReposListBranchesForHeadCommitResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListBranchesForHeadCommitOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListCommentsForCommitResponse(resp *http.Response) (_ []CommitComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []CommitComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateCommitCommentResponse(resp *http.Response) (_ ReposCreateCommitCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CommitComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListPullRequestsAssociatedWithCommitResponse(resp *http.Response) (_ []PullRequestSimple, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []PullRequestSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetCommitResponse(resp *http.Response) (_ ReposGetCommitResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Commit
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 500:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksListForRefResponse(resp *http.Response) (_ ChecksListForRefResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeChecksListSuitesForRefResponse(resp *http.Response) (_ ChecksListSuitesForRef, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ChecksListSuitesForRef
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetCombinedStatusForRefResponse(resp *http.Response) (_ ReposGetCombinedStatusForRefResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CombinedCommitStatus
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListCommitStatusesForRefResponse(resp *http.Response) (_ ReposListCommitStatusesForRefResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListCommitStatusesForRefOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetCommunityProfileMetricsResponse(resp *http.Response) (_ CommunityProfile, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CommunityProfile
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCompareCommitsResponse(resp *http.Response) (_ ReposCompareCommitsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CommitComparison
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 500:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsCreateContentAttachmentResponse(resp *http.Response) (_ AppsCreateContentAttachmentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ContentReferenceAttachment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetContentResponse(resp *http.Response) (_ ReposGetContentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/vnd.github.v3.object":
			rerr = fmt.Errorf("application/vnd.github.v3.object decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 302:
		return &found{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateOrUpdateFileContentsResponse(resp *http.Response) (_ ReposCreateOrUpdateFileContentsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response FileCommit
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response FileCommit
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteFileResponse(resp *http.Response) (_ ReposDeleteFileResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response FileCommit
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListContributorsResponse(resp *http.Response) (_ ReposListContributorsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListContributorsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &ReposListContributorsNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListDeploymentsResponse(resp *http.Response) (_ []Deployment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Deployment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateDeploymentResponse(resp *http.Response) (_ ReposCreateDeploymentResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Deployment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposCreateDeploymentAccepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		return &ReposCreateDeploymentConflict{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetDeploymentResponse(resp *http.Response) (_ ReposGetDeploymentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteDeploymentResponse(resp *http.Response) (_ ReposDeleteDeploymentResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteDeploymentNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListDeploymentStatusesResponse(resp *http.Response) (_ ReposListDeploymentStatusesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListDeploymentStatusesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateDeploymentStatusResponse(resp *http.Response) (_ ReposCreateDeploymentStatusResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response DeploymentStatus
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetDeploymentStatusResponse(resp *http.Response) (_ ReposGetDeploymentStatusResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response DeploymentStatus
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateDispatchEventResponse(resp *http.Response) (_ ReposCreateDispatchEventResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposCreateDispatchEventNoContent{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetAllEnvironmentsResponse(resp *http.Response) (_ ReposGetAllEnvironmentsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetEnvironmentResponse(resp *http.Response) (_ Environment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Environment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateOrUpdateEnvironmentResponse(resp *http.Response) (_ ReposCreateOrUpdateEnvironmentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Environment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteAnEnvironmentResponse(resp *http.Response) (_ ReposDeleteAnEnvironment, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteAnEnvironment{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListRepoEventsResponse(resp *http.Response) (_ []Event, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListForksResponse(resp *http.Response) (_ ReposListForksResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListForksOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateForkResponse(resp *http.Response) (_ ReposCreateForkResponse, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response FullRepository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitCreateBlobResponse(resp *http.Response) (_ GitCreateBlobResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ShortBlob
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitGetBlobResponse(resp *http.Response) (_ GitGetBlobResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Blob
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitCreateCommitResponse(resp *http.Response) (_ GitCreateCommitResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitCommit
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitGetCommitResponse(resp *http.Response) (_ GitGetCommitResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitCommit
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitListMatchingRefsResponse(resp *http.Response) (_ []GitRef, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []GitRef
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitGetRefResponse(resp *http.Response) (_ GitGetRefResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitRef
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitCreateRefResponse(resp *http.Response) (_ GitCreateRefResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitRef
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitDeleteRefResponse(resp *http.Response) (_ GitDeleteRefResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &GitDeleteRefNoContent{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitUpdateRefResponse(resp *http.Response) (_ GitUpdateRefResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitRef
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitCreateTagResponse(resp *http.Response) (_ GitCreateTagResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitTag
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitGetTagResponse(resp *http.Response) (_ GitGetTagResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitTag
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitCreateTreeResponse(resp *http.Response) (_ GitCreateTreeResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitTree
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGitGetTreeResponse(resp *http.Response) (_ GitGetTreeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitTree
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListWebhooksResponse(resp *http.Response) (_ ReposListWebhooksResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateWebhookResponse(resp *http.Response) (_ ReposCreateWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Hook
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetWebhookResponse(resp *http.Response) (_ ReposGetWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Hook
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteWebhookResponse(resp *http.Response) (_ ReposDeleteWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteWebhookNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdateWebhookResponse(resp *http.Response) (_ ReposUpdateWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Hook
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetWebhookConfigForRepoResponse(resp *http.Response) (_ WebhookConfig, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response WebhookConfig
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdateWebhookConfigForRepoResponse(resp *http.Response) (_ WebhookConfig, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response WebhookConfig
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListWebhookDeliveriesResponse(resp *http.Response) (_ ReposListWebhookDeliveriesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListWebhookDeliveriesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetWebhookDeliveryResponse(resp *http.Response) (_ ReposGetWebhookDeliveryResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response HookDelivery
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposRedeliverWebhookDeliveryResponse(resp *http.Response) (_ ReposRedeliverWebhookDeliveryResponse, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response accepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposPingWebhookResponse(resp *http.Response) (_ ReposPingWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposPingWebhookNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposTestPushWebhookResponse(resp *http.Response) (_ ReposTestPushWebhookResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposTestPushWebhookNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsGetImportStatusResponse(resp *http.Response) (_ MigrationsGetImportStatusResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Import
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsStartImportResponse(resp *http.Response) (_ MigrationsStartImportResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Import
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsCancelImportResponse(resp *http.Response) (_ MigrationsCancelImport, rerr error) {
	switch resp.StatusCode {
	case 204:
		return MigrationsCancelImport{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsUpdateImportResponse(resp *http.Response) (_ Import, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Import
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsGetCommitAuthorsResponse(resp *http.Response) (_ MigrationsGetCommitAuthorsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsGetCommitAuthorsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsMapCommitAuthorResponse(resp *http.Response) (_ MigrationsMapCommitAuthorResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PorterAuthor
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsGetLargeFilesResponse(resp *http.Response) (_ []PorterLargeFile, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []PorterLargeFile
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsSetLfsPreferenceResponse(resp *http.Response) (_ MigrationsSetLfsPreferenceResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Import
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsGetRepoInstallationResponse(resp *http.Response) (_ AppsGetRepoInstallationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Installation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeInteractionsGetRestrictionsForRepoResponse(resp *http.Response) (_ InteractionsGetRestrictionsForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeInteractionsSetRestrictionsForRepoResponse(resp *http.Response) (_ InteractionsSetRestrictionsForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response InteractionLimitResponse
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		return &InteractionsSetRestrictionsForRepoConflict{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeInteractionsRemoveRestrictionsForRepoResponse(resp *http.Response) (_ InteractionsRemoveRestrictionsForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &InteractionsRemoveRestrictionsForRepoNoContent{}, nil
	case 409:
		return &InteractionsRemoveRestrictionsForRepoConflict{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListInvitationsResponse(resp *http.Response) (_ []RepositoryInvitation, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []RepositoryInvitation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteInvitationResponse(resp *http.Response) (_ ReposDeleteInvitation, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteInvitation{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdateInvitationResponse(resp *http.Response) (_ RepositoryInvitation, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RepositoryInvitation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListForRepoResponse(resp *http.Response) (_ IssuesListForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListForRepoOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesCreateResponse(resp *http.Response) (_ IssuesCreateResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Issue
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListCommentsForRepoResponse(resp *http.Response) (_ IssuesListCommentsForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListCommentsForRepoOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesGetCommentResponse(resp *http.Response) (_ IssuesGetCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssueComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesDeleteCommentResponse(resp *http.Response) (_ IssuesDeleteComment, rerr error) {
	switch resp.StatusCode {
	case 204:
		return IssuesDeleteComment{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesUpdateCommentResponse(resp *http.Response) (_ IssuesUpdateCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssueComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsListForIssueCommentResponse(resp *http.Response) (_ ReactionsListForIssueCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsListForIssueCommentOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsCreateForIssueCommentResponse(resp *http.Response) (_ ReactionsCreateForIssueCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsDeleteForIssueCommentResponse(resp *http.Response) (_ ReactionsDeleteForIssueComment, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForIssueComment{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListEventsForRepoResponse(resp *http.Response) (_ IssuesListEventsForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListEventsForRepoOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesGetEventResponse(resp *http.Response) (_ IssuesGetEventResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssueEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesGetResponse(resp *http.Response) (_ IssuesGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Issue
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesUpdateResponse(resp *http.Response) (_ IssuesUpdateResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Issue
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesAddAssigneesResponse(resp *http.Response) (_ IssueSimple, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssueSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesRemoveAssigneesResponse(resp *http.Response) (_ IssueSimple, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssueSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListCommentsResponse(resp *http.Response) (_ IssuesListCommentsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListCommentsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesCreateCommentResponse(resp *http.Response) (_ IssuesCreateCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssueComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListEventsResponse(resp *http.Response) (_ IssuesListEventsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListLabelsOnIssueResponse(resp *http.Response) (_ IssuesListLabelsOnIssueResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListLabelsOnIssueOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesSetLabelsResponse(resp *http.Response) (_ IssuesSetLabelsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesSetLabelsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesAddLabelsResponse(resp *http.Response) (_ IssuesAddLabelsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesAddLabelsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesRemoveAllLabelsResponse(resp *http.Response) (_ IssuesRemoveAllLabelsResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &IssuesRemoveAllLabelsNoContent{}, nil
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesRemoveLabelResponse(resp *http.Response) (_ IssuesRemoveLabelResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesRemoveLabelOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesLockResponse(resp *http.Response) (_ IssuesLockResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &IssuesLockNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesUnlockResponse(resp *http.Response) (_ IssuesUnlockResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &IssuesUnlockNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsListForIssueResponse(resp *http.Response) (_ ReactionsListForIssueResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsListForIssueOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsCreateForIssueResponse(resp *http.Response) (_ ReactionsCreateForIssueResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsDeleteForIssueResponse(resp *http.Response) (_ ReactionsDeleteForIssue, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForIssue{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListEventsForTimelineResponse(resp *http.Response) (_ IssuesListEventsForTimelineResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListEventsForTimelineOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListDeployKeysResponse(resp *http.Response) (_ []DeployKey, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []DeployKey
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateDeployKeyResponse(resp *http.Response) (_ ReposCreateDeployKeyResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response DeployKey
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetDeployKeyResponse(resp *http.Response) (_ ReposGetDeployKeyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response DeployKey
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteDeployKeyResponse(resp *http.Response) (_ ReposDeleteDeployKey, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteDeployKey{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListLabelsForRepoResponse(resp *http.Response) (_ IssuesListLabelsForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListLabelsForRepoOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesCreateLabelResponse(resp *http.Response) (_ IssuesCreateLabelResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Label
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesGetLabelResponse(resp *http.Response) (_ IssuesGetLabelResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Label
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesDeleteLabelResponse(resp *http.Response) (_ IssuesDeleteLabel, rerr error) {
	switch resp.StatusCode {
	case 204:
		return IssuesDeleteLabel{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesUpdateLabelResponse(resp *http.Response) (_ Label, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Label
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListLanguagesResponse(resp *http.Response) (_ ReposListLanguages, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListLanguages
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposEnableLfsForRepoResponse(resp *http.Response) (_ ReposEnableLfsForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response accepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		return &ReposEnableLfsForRepoForbidden{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDisableLfsForRepoResponse(resp *http.Response) (_ ReposDisableLfsForRepo, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposDisableLfsForRepo{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeLicensesGetForRepoResponse(resp *http.Response) (_ LicenseContent, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response LicenseContent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposMergeUpstreamResponse(resp *http.Response) (_ ReposMergeUpstreamResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MergedUpstream
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		return &ReposMergeUpstreamConflict{}, nil
	case 422:
		return &ReposMergeUpstreamUnprocessableEntity{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposMergeResponse(resp *http.Response) (_ ReposMergeResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Commit
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &ReposMergeNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &ReposMergeNotFound{}, nil
	case 409:
		return &ReposMergeConflict{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListMilestonesResponse(resp *http.Response) (_ IssuesListMilestonesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListMilestonesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesCreateMilestoneResponse(resp *http.Response) (_ IssuesCreateMilestoneResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Milestone
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesGetMilestoneResponse(resp *http.Response) (_ IssuesGetMilestoneResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Milestone
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesDeleteMilestoneResponse(resp *http.Response) (_ IssuesDeleteMilestoneResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &IssuesDeleteMilestoneNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesUpdateMilestoneResponse(resp *http.Response) (_ Milestone, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Milestone
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListLabelsForMilestoneResponse(resp *http.Response) (_ []Label, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Label
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListRepoNotificationsForAuthenticatedUserResponse(resp *http.Response) (_ []Thread, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Thread
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityMarkRepoNotificationsAsReadResponse(resp *http.Response) (_ ActivityMarkRepoNotificationsAsReadResponse, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityMarkRepoNotificationsAsReadAccepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 205:
		return &ActivityMarkRepoNotificationsAsReadResetContent{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetPagesResponse(resp *http.Response) (_ ReposGetPagesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdateInformationAboutPagesSiteResponse(resp *http.Response) (_ ReposUpdateInformationAboutPagesSiteResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposUpdateInformationAboutPagesSiteNoContent{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreatePagesSiteResponse(resp *http.Response) (_ ReposCreatePagesSiteResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Page
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeletePagesSiteResponse(resp *http.Response) (_ ReposDeletePagesSiteResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeletePagesSiteNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListPagesBuildsResponse(resp *http.Response) (_ []PageBuild, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []PageBuild
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposRequestPagesBuildResponse(resp *http.Response) (_ PageBuildStatus, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PageBuildStatus
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetLatestPagesBuildResponse(resp *http.Response) (_ PageBuild, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PageBuild
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetPagesBuildResponse(resp *http.Response) (_ PageBuild, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PageBuild
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetPagesHealthCheckResponse(resp *http.Response) (_ ReposGetPagesHealthCheckResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PagesHealthCheck
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetPagesHealthCheckAccepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 400:
		return &ReposGetPagesHealthCheckBadRequest{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		return &ReposGetPagesHealthCheckUnprocessableEntity{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsListForRepoResponse(resp *http.Response) (_ ProjectsListForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsListForRepoOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsCreateForRepoResponse(resp *http.Response) (_ ProjectsCreateForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Project
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsListResponse(resp *http.Response) (_ PullsListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsListOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsCreateResponse(resp *http.Response) (_ PullsCreateResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequest
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsListReviewCommentsForRepoResponse(resp *http.Response) (_ []PullRequestReviewComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []PullRequestReviewComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsGetReviewCommentResponse(resp *http.Response) (_ PullsGetReviewCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReviewComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsDeleteReviewCommentResponse(resp *http.Response) (_ PullsDeleteReviewCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PullsDeleteReviewCommentNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsUpdateReviewCommentResponse(resp *http.Response) (_ PullRequestReviewComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReviewComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsListForPullRequestReviewCommentResponse(resp *http.Response) (_ ReactionsListForPullRequestReviewCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsListForPullRequestReviewCommentOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsCreateForPullRequestReviewCommentResponse(resp *http.Response) (_ ReactionsCreateForPullRequestReviewCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsDeleteForPullRequestCommentResponse(resp *http.Response) (_ ReactionsDeleteForPullRequestComment, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForPullRequestComment{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsGetResponse(resp *http.Response) (_ PullsGetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequest
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 500:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsUpdateResponse(resp *http.Response) (_ PullsUpdateResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequest
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsListReviewCommentsResponse(resp *http.Response) (_ []PullRequestReviewComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []PullRequestReviewComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsCreateReviewCommentResponse(resp *http.Response) (_ PullsCreateReviewCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReviewComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsCreateReplyForReviewCommentResponse(resp *http.Response) (_ PullsCreateReplyForReviewCommentResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReviewComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsListCommitsResponse(resp *http.Response) (_ []Commit, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Commit
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsListFilesResponse(resp *http.Response) (_ PullsListFilesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsListFilesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 500:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsCheckIfMergedResponse(resp *http.Response) (_ PullsCheckIfMergedResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PullsCheckIfMergedNoContent{}, nil
	case 404:
		return &PullsCheckIfMergedNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsMergeResponse(resp *http.Response) (_ PullsMergeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestMergeResult
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 405:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsMergeMethodNotAllowed
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsMergeConflict
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsListRequestedReviewersResponse(resp *http.Response) (_ PullRequestReviewRequest, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReviewRequest
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsRequestReviewersResponse(resp *http.Response) (_ PullsRequestReviewersResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		return &PullsRequestReviewersUnprocessableEntity{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsRemoveRequestedReviewersResponse(resp *http.Response) (_ PullsRemoveRequestedReviewersResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsListReviewsResponse(resp *http.Response) (_ []PullRequestReview, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []PullRequestReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsCreateReviewResponse(resp *http.Response) (_ PullsCreateReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsGetReviewResponse(resp *http.Response) (_ PullsGetReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsUpdateReviewResponse(resp *http.Response) (_ PullsUpdateReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsDeletePendingReviewResponse(resp *http.Response) (_ PullsDeletePendingReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsListCommentsForReviewResponse(resp *http.Response) (_ PullsListCommentsForReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsListCommentsForReviewOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsDismissReviewResponse(resp *http.Response) (_ PullsDismissReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsSubmitReviewResponse(resp *http.Response) (_ PullsSubmitReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePullsUpdateBranchResponse(resp *http.Response) (_ PullsUpdateBranchResponse, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsUpdateBranchAccepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetReadmeResponse(resp *http.Response) (_ ReposGetReadmeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ContentFile
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetReadmeInDirectoryResponse(resp *http.Response) (_ ReposGetReadmeInDirectoryResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ContentFile
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListReleasesResponse(resp *http.Response) (_ ReposListReleasesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListReleasesOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateReleaseResponse(resp *http.Response) (_ ReposCreateReleaseResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Release
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetReleaseAssetResponse(resp *http.Response) (_ ReposGetReleaseAssetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReleaseAsset
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 302:
		return &found{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteReleaseAssetResponse(resp *http.Response) (_ ReposDeleteReleaseAsset, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteReleaseAsset{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdateReleaseAssetResponse(resp *http.Response) (_ ReleaseAsset, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReleaseAsset
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetLatestReleaseResponse(resp *http.Response) (_ Release, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Release
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetReleaseByTagResponse(resp *http.Response) (_ ReposGetReleaseByTagResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Release
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetReleaseResponse(resp *http.Response) (_ ReposGetReleaseResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Release
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeleteReleaseResponse(resp *http.Response) (_ ReposDeleteRelease, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteRelease{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUpdateReleaseResponse(resp *http.Response) (_ ReposUpdateReleaseResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Release
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListReleaseAssetsResponse(resp *http.Response) (_ []ReleaseAsset, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []ReleaseAsset
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposUploadReleaseAssetResponse(resp *http.Response) (_ ReleaseAsset, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReleaseAsset
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsCreateForReleaseResponse(resp *http.Response) (_ ReactionsCreateForReleaseResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSecretScanningListAlertsForRepoResponse(resp *http.Response) (_ SecretScanningListAlertsForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SecretScanningListAlertsForRepoOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &SecretScanningListAlertsForRepoNotFound{}, nil
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSecretScanningGetAlertResponse(resp *http.Response) (_ SecretScanningGetAlertResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SecretScanningAlert
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &SecretScanningGetAlertNotFound{}, nil
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSecretScanningUpdateAlertResponse(resp *http.Response) (_ SecretScanningUpdateAlertResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SecretScanningAlert
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &SecretScanningUpdateAlertNotFound{}, nil
	case 422:
		return &SecretScanningUpdateAlertUnprocessableEntity{}, nil
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListStargazersForRepoResponse(resp *http.Response) (_ ActivityListStargazersForRepoResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetCodeFrequencyStatsResponse(resp *http.Response) (_ ReposGetCodeFrequencyStatsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetCodeFrequencyStatsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response accepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &no_content{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetCommitActivityStatsResponse(resp *http.Response) (_ ReposGetCommitActivityStatsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetCommitActivityStatsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response accepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &no_content{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetContributorsStatsResponse(resp *http.Response) (_ ReposGetContributorsStatsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetContributorsStatsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response accepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &no_content{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetParticipationStatsResponse(resp *http.Response) (_ ReposGetParticipationStatsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ParticipationStats
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetPunchCardStatsResponse(resp *http.Response) (_ ReposGetPunchCardStatsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetPunchCardStatsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &no_content{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateCommitStatusResponse(resp *http.Response) (_ Status, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListWatchersForRepoResponse(resp *http.Response) (_ []SimpleUser, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []SimpleUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityGetRepoSubscriptionResponse(resp *http.Response) (_ ActivityGetRepoSubscriptionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RepositorySubscription
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &ActivityGetRepoSubscriptionNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivitySetRepoSubscriptionResponse(resp *http.Response) (_ RepositorySubscription, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RepositorySubscription
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityDeleteRepoSubscriptionResponse(resp *http.Response) (_ ActivityDeleteRepoSubscription, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActivityDeleteRepoSubscription{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListTagsResponse(resp *http.Response) (_ []Tag, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Tag
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDownloadTarballArchiveResponse(resp *http.Response) (_ ReposDownloadTarballArchive, rerr error) {
	switch resp.StatusCode {
	case 302:
		return ReposDownloadTarballArchive{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListTeamsResponse(resp *http.Response) (_ []Team, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Team
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetAllTopicsResponse(resp *http.Response) (_ ReposGetAllTopicsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Topic
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposReplaceAllTopicsResponse(resp *http.Response) (_ ReposReplaceAllTopicsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Topic
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetClonesResponse(resp *http.Response) (_ ReposGetClonesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CloneTraffic
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetTopPathsResponse(resp *http.Response) (_ ReposGetTopPathsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetTopPathsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetTopReferrersResponse(resp *http.Response) (_ ReposGetTopReferrersResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetTopReferrersOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposGetViewsResponse(resp *http.Response) (_ ReposGetViewsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ViewTraffic
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposTransferResponse(resp *http.Response) (_ MinimalRepository, rerr error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MinimalRepository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCheckVulnerabilityAlertsResponse(resp *http.Response) (_ ReposCheckVulnerabilityAlertsResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposCheckVulnerabilityAlertsNoContent{}, nil
	case 404:
		return &ReposCheckVulnerabilityAlertsNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposEnableVulnerabilityAlertsResponse(resp *http.Response) (_ ReposEnableVulnerabilityAlerts, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposEnableVulnerabilityAlerts{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDisableVulnerabilityAlertsResponse(resp *http.Response) (_ ReposDisableVulnerabilityAlerts, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ReposDisableVulnerabilityAlerts{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDownloadZipballArchiveResponse(resp *http.Response) (_ ReposDownloadZipballArchive, rerr error) {
	switch resp.StatusCode {
	case 302:
		return ReposDownloadZipballArchive{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateUsingTemplateResponse(resp *http.Response) (_ Repository, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Repository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListPublicResponse(resp *http.Response) (_ ReposListPublicResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListPublicOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsListEnvironmentSecretsResponse(resp *http.Response) (_ ActionsListEnvironmentSecrets, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListEnvironmentSecrets
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetEnvironmentPublicKeyResponse(resp *http.Response) (_ ActionsPublicKey, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsPublicKey
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsGetEnvironmentSecretResponse(resp *http.Response) (_ ActionsSecret, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsSecret
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsCreateOrUpdateEnvironmentSecretResponse(resp *http.Response) (_ ActionsCreateOrUpdateEnvironmentSecretResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsCreateOrUpdateEnvironmentSecretCreated
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &ActionsCreateOrUpdateEnvironmentSecretNoContent{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActionsDeleteEnvironmentSecretResponse(resp *http.Response) (_ ActionsDeleteEnvironmentSecret, rerr error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteEnvironmentSecret{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminListProvisionedGroupsEnterpriseResponse(resp *http.Response) (_ ScimGroupListEnterprise, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimGroupListEnterprise
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseGroupResponse(resp *http.Response) (_ ScimEnterpriseGroup, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse(resp *http.Response) (_ ScimEnterpriseGroup, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponse(resp *http.Response) (_ ScimEnterpriseGroup, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminDeleteScimGroupFromEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminDeleteScimGroupFromEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminDeleteScimGroupFromEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseGroupResponse(resp *http.Response) (_ ScimEnterpriseGroup, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminListProvisionedIdentitiesEnterpriseResponse(resp *http.Response) (_ ScimUserListEnterprise, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimUserListEnterprise
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseUserResponse(resp *http.Response) (_ ScimEnterpriseUser, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse(resp *http.Response) (_ ScimEnterpriseUser, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserResponse(resp *http.Response) (_ ScimEnterpriseUser, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminDeleteUserFromEnterpriseResponse(resp *http.Response) (_ EnterpriseAdminDeleteUserFromEnterprise, rerr error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminDeleteUserFromEnterprise{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseUserResponse(resp *http.Response) (_ ScimEnterpriseUser, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeScimListProvisionedIdentitiesResponse(resp *http.Response) (_ ScimListProvisionedIdentitiesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeScimProvisionAndInviteUserResponse(resp *http.Response) (_ ScimProvisionAndInviteUserResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 500:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeScimGetProvisioningInformationForUserResponse(resp *http.Response) (_ ScimGetProvisioningInformationForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeScimSetInformationForProvisionedUserResponse(resp *http.Response) (_ ScimSetInformationForProvisionedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeScimDeleteUserFromOrgResponse(resp *http.Response) (_ ScimDeleteUserFromOrgResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ScimDeleteUserFromOrgNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeScimUpdateAttributeForUserResponse(resp *http.Response) (_ ScimUpdateAttributeForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 429:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSearchCodeResponse(resp *http.Response) (_ SearchCodeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SearchCodeOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSearchCommitsResponse(resp *http.Response) (_ SearchCommitsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SearchCommitsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSearchIssuesAndPullRequestsResponse(resp *http.Response) (_ SearchIssuesAndPullRequestsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SearchIssuesAndPullRequestsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSearchLabelsResponse(resp *http.Response) (_ SearchLabelsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SearchLabelsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSearchReposResponse(resp *http.Response) (_ SearchReposResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SearchReposOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSearchTopicsResponse(resp *http.Response) (_ SearchTopicsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SearchTopicsOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeSearchUsersResponse(resp *http.Response) (_ SearchUsersResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SearchUsersOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response service_unavailable
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsGetLegacyResponse(resp *http.Response) (_ TeamsGetLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamFull
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsDeleteLegacyResponse(resp *http.Response) (_ TeamsDeleteLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsDeleteLegacyNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsUpdateLegacyResponse(resp *http.Response) (_ TeamsUpdateLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamFull
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamFull
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListDiscussionsLegacyResponse(resp *http.Response) (_ []TeamDiscussion, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []TeamDiscussion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCreateDiscussionLegacyResponse(resp *http.Response) (_ TeamDiscussion, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsGetDiscussionLegacyResponse(resp *http.Response) (_ TeamDiscussion, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsDeleteDiscussionLegacyResponse(resp *http.Response) (_ TeamsDeleteDiscussionLegacy, rerr error) {
	switch resp.StatusCode {
	case 204:
		return TeamsDeleteDiscussionLegacy{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsUpdateDiscussionLegacyResponse(resp *http.Response) (_ TeamDiscussion, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListDiscussionCommentsLegacyResponse(resp *http.Response) (_ []TeamDiscussionComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []TeamDiscussionComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCreateDiscussionCommentLegacyResponse(resp *http.Response) (_ TeamDiscussionComment, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsGetDiscussionCommentLegacyResponse(resp *http.Response) (_ TeamDiscussionComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsDeleteDiscussionCommentLegacyResponse(resp *http.Response) (_ TeamsDeleteDiscussionCommentLegacy, rerr error) {
	switch resp.StatusCode {
	case 204:
		return TeamsDeleteDiscussionCommentLegacy{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsUpdateDiscussionCommentLegacyResponse(resp *http.Response) (_ TeamDiscussionComment, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsListForTeamDiscussionCommentLegacyResponse(resp *http.Response) (_ []Reaction, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsCreateForTeamDiscussionCommentLegacyResponse(resp *http.Response) (_ Reaction, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsListForTeamDiscussionLegacyResponse(resp *http.Response) (_ []Reaction, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReactionsCreateForTeamDiscussionLegacyResponse(resp *http.Response) (_ Reaction, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListPendingInvitationsLegacyResponse(resp *http.Response) (_ []OrganizationInvitation, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []OrganizationInvitation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListMembersLegacyResponse(resp *http.Response) (_ TeamsListMembersLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListMembersLegacyOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsGetMemberLegacyResponse(resp *http.Response) (_ TeamsGetMemberLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsGetMemberLegacyNoContent{}, nil
	case 404:
		return &TeamsGetMemberLegacyNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsAddMemberLegacyResponse(resp *http.Response) (_ TeamsAddMemberLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsAddMemberLegacyNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &TeamsAddMemberLegacyNotFound{}, nil
	case 422:
		return &TeamsAddMemberLegacyUnprocessableEntity{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsRemoveMemberLegacyResponse(resp *http.Response) (_ TeamsRemoveMemberLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsRemoveMemberLegacyNoContent{}, nil
	case 404:
		return &TeamsRemoveMemberLegacyNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsGetMembershipForUserLegacyResponse(resp *http.Response) (_ TeamsGetMembershipForUserLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamMembership
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsAddOrUpdateMembershipForUserLegacyResponse(resp *http.Response) (_ TeamsAddOrUpdateMembershipForUserLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamMembership
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		return &TeamsAddOrUpdateMembershipForUserLegacyForbidden{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		return &TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsRemoveMembershipForUserLegacyResponse(resp *http.Response) (_ TeamsRemoveMembershipForUserLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsRemoveMembershipForUserLegacyNoContent{}, nil
	case 403:
		return &TeamsRemoveMembershipForUserLegacyForbidden{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListProjectsLegacyResponse(resp *http.Response) (_ TeamsListProjectsLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListProjectsLegacyOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCheckPermissionsForProjectLegacyResponse(resp *http.Response) (_ TeamsCheckPermissionsForProjectLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamProject
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		return &TeamsCheckPermissionsForProjectLegacyNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsAddOrUpdateProjectPermissionsLegacyResponse(resp *http.Response) (_ TeamsAddOrUpdateProjectPermissionsLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsAddOrUpdateProjectPermissionsLegacyNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsAddOrUpdateProjectPermissionsLegacyForbidden
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsRemoveProjectLegacyResponse(resp *http.Response) (_ TeamsRemoveProjectLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsRemoveProjectLegacyNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListReposLegacyResponse(resp *http.Response) (_ TeamsListReposLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListReposLegacyOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCheckPermissionsForRepoLegacyResponse(resp *http.Response) (_ TeamsCheckPermissionsForRepoLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamRepository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &TeamsCheckPermissionsForRepoLegacyNoContent{}, nil
	case 404:
		return &TeamsCheckPermissionsForRepoLegacyNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsAddOrUpdateRepoPermissionsLegacyResponse(resp *http.Response) (_ TeamsAddOrUpdateRepoPermissionsLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsAddOrUpdateRepoPermissionsLegacyNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsRemoveRepoLegacyResponse(resp *http.Response) (_ TeamsRemoveRepoLegacy, rerr error) {
	switch resp.StatusCode {
	case 204:
		return TeamsRemoveRepoLegacy{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListIdpGroupsForLegacyResponse(resp *http.Response) (_ TeamsListIdpGroupsForLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GroupMapping
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsLegacyResponse(resp *http.Response) (_ TeamsCreateOrUpdateIdpGroupConnectionsLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GroupMapping
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListChildLegacyResponse(resp *http.Response) (_ TeamsListChildLegacyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListChildLegacyOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersGetAuthenticatedResponse(resp *http.Response) (_ UsersGetAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersUpdateAuthenticatedResponse(resp *http.Response) (_ UsersUpdateAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PrivateUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListBlockedByAuthenticatedResponse(resp *http.Response) (_ UsersListBlockedByAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListBlockedByAuthenticatedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersCheckBlockedResponse(resp *http.Response) (_ UsersCheckBlockedResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &UsersCheckBlockedNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersBlockResponse(resp *http.Response) (_ UsersBlockResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &UsersBlockNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersUnblockResponse(resp *http.Response) (_ UsersUnblockResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &UsersUnblockNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersSetPrimaryEmailVisibilityForAuthenticatedResponse(resp *http.Response) (_ UsersSetPrimaryEmailVisibilityForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersSetPrimaryEmailVisibilityForAuthenticatedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListEmailsForAuthenticatedResponse(resp *http.Response) (_ UsersListEmailsForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListEmailsForAuthenticatedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersAddEmailForAuthenticatedResponse(resp *http.Response) (_ UsersAddEmailForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersAddEmailForAuthenticatedCreated
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersDeleteEmailForAuthenticatedResponse(resp *http.Response) (_ UsersDeleteEmailForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &UsersDeleteEmailForAuthenticatedNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListFollowersForAuthenticatedUserResponse(resp *http.Response) (_ UsersListFollowersForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListFollowersForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListFollowedByAuthenticatedResponse(resp *http.Response) (_ UsersListFollowedByAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListFollowedByAuthenticatedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersCheckPersonIsFollowedByAuthenticatedResponse(resp *http.Response) (_ UsersCheckPersonIsFollowedByAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &UsersCheckPersonIsFollowedByAuthenticatedNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersFollowResponse(resp *http.Response) (_ UsersFollowResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &UsersFollowNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersUnfollowResponse(resp *http.Response) (_ UsersUnfollowResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &UsersUnfollowNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListGpgKeysForAuthenticatedResponse(resp *http.Response) (_ UsersListGpgKeysForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListGpgKeysForAuthenticatedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersCreateGpgKeyForAuthenticatedResponse(resp *http.Response) (_ UsersCreateGpgKeyForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GpgKey
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersGetGpgKeyForAuthenticatedResponse(resp *http.Response) (_ UsersGetGpgKeyForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GpgKey
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersDeleteGpgKeyForAuthenticatedResponse(resp *http.Response) (_ UsersDeleteGpgKeyForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &UsersDeleteGpgKeyForAuthenticatedNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListInstallationsForAuthenticatedUserResponse(resp *http.Response) (_ AppsListInstallationsForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListInstallationsForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListInstallationReposForAuthenticatedUserResponse(resp *http.Response) (_ AppsListInstallationReposForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListInstallationReposForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsAddRepoToInstallationResponse(resp *http.Response) (_ AppsAddRepoToInstallationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &AppsAddRepoToInstallationNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsRemoveRepoFromInstallationResponse(resp *http.Response) (_ AppsRemoveRepoFromInstallationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &AppsRemoveRepoFromInstallationNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeInteractionsGetRestrictionsForAuthenticatedUserResponse(resp *http.Response) (_ InteractionsGetRestrictionsForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 204:
		return &InteractionsGetRestrictionsForAuthenticatedUserNoContent{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeInteractionsSetRestrictionsForAuthenticatedUserResponse(resp *http.Response) (_ InteractionsSetRestrictionsForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response InteractionLimitResponse
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeInteractionsRemoveRestrictionsForAuthenticatedUserResponse(resp *http.Response) (_ InteractionsRemoveRestrictionsForAuthenticatedUser, rerr error) {
	switch resp.StatusCode {
	case 204:
		return InteractionsRemoveRestrictionsForAuthenticatedUser{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeIssuesListForAuthenticatedUserResponse(resp *http.Response) (_ IssuesListForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListPublicSSHKeysForAuthenticatedResponse(resp *http.Response) (_ UsersListPublicSSHKeysForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListPublicSSHKeysForAuthenticatedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersCreatePublicSSHKeyForAuthenticatedResponse(resp *http.Response) (_ UsersCreatePublicSSHKeyForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Key
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersGetPublicSSHKeyForAuthenticatedResponse(resp *http.Response) (_ UsersGetPublicSSHKeyForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Key
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersDeletePublicSSHKeyForAuthenticatedResponse(resp *http.Response) (_ UsersDeletePublicSSHKeyForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &UsersDeletePublicSSHKeyForAuthenticatedNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListSubscriptionsForAuthenticatedUserResponse(resp *http.Response) (_ AppsListSubscriptionsForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListSubscriptionsForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsListSubscriptionsForAuthenticatedUserStubbedResponse(resp *http.Response) (_ AppsListSubscriptionsForAuthenticatedUserStubbedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListSubscriptionsForAuthenticatedUserStubbedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListMembershipsForAuthenticatedUserResponse(resp *http.Response) (_ OrgsListMembershipsForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListMembershipsForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsGetMembershipForAuthenticatedUserResponse(resp *http.Response) (_ OrgsGetMembershipForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgMembership
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsUpdateMembershipForAuthenticatedUserResponse(resp *http.Response) (_ OrgsUpdateMembershipForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgMembership
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsListForAuthenticatedUserResponse(resp *http.Response) (_ MigrationsListForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsListForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsStartForAuthenticatedUserResponse(resp *http.Response) (_ MigrationsStartForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Migration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsGetStatusForAuthenticatedUserResponse(resp *http.Response) (_ MigrationsGetStatusForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Migration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsGetArchiveForAuthenticatedUserResponse(resp *http.Response) (_ MigrationsGetArchiveForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 302:
		return &MigrationsGetArchiveForAuthenticatedUserFound{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsDeleteArchiveForAuthenticatedUserResponse(resp *http.Response) (_ MigrationsDeleteArchiveForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &MigrationsDeleteArchiveForAuthenticatedUserNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsUnlockRepoForAuthenticatedUserResponse(resp *http.Response) (_ MigrationsUnlockRepoForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &MigrationsUnlockRepoForAuthenticatedUserNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMigrationsListReposForUserResponse(resp *http.Response) (_ MigrationsListReposForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsListReposForUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListForAuthenticatedUserResponse(resp *http.Response) (_ OrgsListForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesListPackagesForAuthenticatedUserResponse(resp *http.Response) (_ []Package, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Package
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesGetPackageForAuthenticatedUserResponse(resp *http.Response) (_ Package, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Package
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesDeletePackageForAuthenticatedUserResponse(resp *http.Response) (_ PackagesDeletePackageForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesDeletePackageForAuthenticatedUserNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesRestorePackageForAuthenticatedUserResponse(resp *http.Response) (_ PackagesRestorePackageForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesRestorePackageForAuthenticatedUserNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse(resp *http.Response) (_ PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesGetPackageVersionForAuthenticatedUserResponse(resp *http.Response) (_ PackageVersion, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackageVersion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesDeletePackageVersionForAuthenticatedUserResponse(resp *http.Response) (_ PackagesDeletePackageVersionForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesDeletePackageVersionForAuthenticatedUserNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesRestorePackageVersionForAuthenticatedUserResponse(resp *http.Response) (_ PackagesRestorePackageVersionForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesRestorePackageVersionForAuthenticatedUserNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsCreateForAuthenticatedUserResponse(resp *http.Response) (_ ProjectsCreateForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Project
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response preview_header_missing
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListPublicEmailsForAuthenticatedResponse(resp *http.Response) (_ UsersListPublicEmailsForAuthenticatedResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListPublicEmailsForAuthenticatedOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListForAuthenticatedUserResponse(resp *http.Response) (_ ReposListForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposCreateForAuthenticatedUserResponse(resp *http.Response) (_ ReposCreateForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Repository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/scim+json":
			rerr = fmt.Errorf("application/scim+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListInvitationsForAuthenticatedUserResponse(resp *http.Response) (_ ReposListInvitationsForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListInvitationsForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposDeclineInvitationResponse(resp *http.Response) (_ ReposDeclineInvitationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeclineInvitationNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposAcceptInvitationResponse(resp *http.Response) (_ ReposAcceptInvitationResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ReposAcceptInvitationNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListReposStarredByAuthenticatedUserResponse(resp *http.Response) (_ ActivityListReposStarredByAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListReposStarredByAuthenticatedUserOKApplicationJSON
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.github.v3.star+json":
			rerr = fmt.Errorf("application/vnd.github.v3.star+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityCheckRepoIsStarredByAuthenticatedUserResponse(resp *http.Response) (_ ActivityCheckRepoIsStarredByAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ActivityCheckRepoIsStarredByAuthenticatedUserNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityStarRepoForAuthenticatedUserResponse(resp *http.Response) (_ ActivityStarRepoForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ActivityStarRepoForAuthenticatedUserNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityUnstarRepoForAuthenticatedUserResponse(resp *http.Response) (_ ActivityUnstarRepoForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &ActivityUnstarRepoForAuthenticatedUserNoContent{}, nil
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListWatchedReposForAuthenticatedUserResponse(resp *http.Response) (_ ActivityListWatchedReposForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListWatchedReposForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeTeamsListForAuthenticatedUserResponse(resp *http.Response) (_ TeamsListForAuthenticatedUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListForAuthenticatedUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListResponse(resp *http.Response) (_ UsersListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 304:
		return &not_modified{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersGetByUsernameResponse(resp *http.Response) (_ UsersGetByUsernameResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response accepted
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListEventsForAuthenticatedUserResponse(resp *http.Response) (_ []Event, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListOrgEventsForAuthenticatedUserResponse(resp *http.Response) (_ []Event, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListPublicEventsForUserResponse(resp *http.Response) (_ []Event, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListFollowersForUserResponse(resp *http.Response) (_ []SimpleUser, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []SimpleUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListFollowingForUserResponse(resp *http.Response) (_ []SimpleUser, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []SimpleUser
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersCheckFollowingForUserResponse(resp *http.Response) (_ UsersCheckFollowingForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &UsersCheckFollowingForUserNoContent{}, nil
	case 404:
		return &UsersCheckFollowingForUserNotFound{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGistsListForUserResponse(resp *http.Response) (_ GistsListForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListForUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListGpgKeysForUserResponse(resp *http.Response) (_ UsersListGpgKeysForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersGetContextForUserResponse(resp *http.Response) (_ UsersGetContextForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Hovercard
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeAppsGetUserInstallationResponse(resp *http.Response) (_ Installation, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Installation
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeUsersListPublicKeysForUserResponse(resp *http.Response) (_ []KeySimple, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []KeySimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeOrgsListForUserResponse(resp *http.Response) (_ []OrganizationSimple, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []OrganizationSimple
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesListPackagesForUserResponse(resp *http.Response) (_ PackagesListPackagesForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesListPackagesForUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesGetPackageForUserResponse(resp *http.Response) (_ Package, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Package
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesDeletePackageForUserResponse(resp *http.Response) (_ PackagesDeletePackageForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesDeletePackageForUserNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesRestorePackageForUserResponse(resp *http.Response) (_ PackagesRestorePackageForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesRestorePackageForUserNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesGetAllPackageVersionsForPackageOwnedByUserResponse(resp *http.Response) (_ PackagesGetAllPackageVersionsForPackageOwnedByUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesGetAllPackageVersionsForPackageOwnedByUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesGetPackageVersionForUserResponse(resp *http.Response) (_ PackagesGetPackageVersionForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesDeletePackageVersionForUserResponse(resp *http.Response) (_ PackagesDeletePackageVersionForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesDeletePackageVersionForUserNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodePackagesRestorePackageVersionForUserResponse(resp *http.Response) (_ PackagesRestorePackageVersionForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 204:
		return &PackagesRestorePackageVersionForUserNoContent{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeProjectsListForUserResponse(resp *http.Response) (_ ProjectsListForUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsListForUserOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListReceivedEventsForUserResponse(resp *http.Response) (_ []Event, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListReceivedPublicEventsForUserResponse(resp *http.Response) (_ []Event, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeReposListForUserResponse(resp *http.Response) (_ []MinimalRepository, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []MinimalRepository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeBillingGetGithubActionsBillingUserResponse(resp *http.Response) (_ ActionsBillingUsage, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsBillingUsage
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeBillingGetGithubPackagesBillingUserResponse(resp *http.Response) (_ PackagesBillingUsage, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesBillingUsage
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeBillingGetSharedStorageBillingUserResponse(resp *http.Response) (_ CombinedBillingUsage, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CombinedBillingUsage
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListReposStarredByUserResponse(resp *http.Response) (_ ActivityListReposStarredByUserResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeActivityListReposWatchedByUserResponse(resp *http.Response) (_ []MinimalRepository, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []MinimalRepository
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeMetaGetZenResponse(resp *http.Response) (_ string, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "text/plain":
			rerr = fmt.Errorf("text/plain decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}
