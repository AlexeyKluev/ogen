// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = math.Mod
	_ = validate.Int{}
)

func decodeMetaRootResponse(resp *http.Response) (res MetaRoot, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MetaRoot
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsGetAuthenticatedResponse(resp *http.Response) (res Integration, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Integration
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsDeleteInstallationResponse(resp *http.Response) (res AppsDeleteInstallationResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &AppsDeleteInstallationNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsSuspendInstallationResponse(resp *http.Response) (res AppsSuspendInstallationResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &AppsSuspendInstallationNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsUnsuspendInstallationResponse(resp *http.Response) (res AppsUnsuspendInstallationResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &AppsUnsuspendInstallationNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOAuthAuthorizationsListGrantsResponse(resp *http.Response) (res OAuthAuthorizationsListGrantsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsListGrantsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsListGrantsApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsListGrantsApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsListGrantsApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOAuthAuthorizationsGetGrantResponse(resp *http.Response) (res OAuthAuthorizationsGetGrantResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ApplicationGrant
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsGetGrantApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsGetGrantApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOAuthAuthorizationsDeleteGrantResponse(resp *http.Response) (res OAuthAuthorizationsDeleteGrantResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OAuthAuthorizationsDeleteGrantNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsDeleteGrantApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsGetBySlugResponse(resp *http.Response) (res AppsGetBySlugResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Integration
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsGetBySlugApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsGetBySlugApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOAuthAuthorizationsListAuthorizationsResponse(resp *http.Response) (res OAuthAuthorizationsListAuthorizationsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsListAuthorizationsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOAuthAuthorizationsGetAuthorizationResponse(resp *http.Response) (res OAuthAuthorizationsGetAuthorizationResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Authorization
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOAuthAuthorizationsDeleteAuthorizationResponse(resp *http.Response) (res OAuthAuthorizationsDeleteAuthorizationResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OAuthAuthorizationsDeleteAuthorizationNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCodesOfConductGetAllCodesOfConductResponse(resp *http.Response) (res CodesOfConductGetAllCodesOfConductResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodesOfConductGetAllCodesOfConductOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCodesOfConductGetConductCodeResponse(resp *http.Response) (res CodesOfConductGetConductCodeResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeOfConduct
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEmojisGetResponse(resp *http.Response) (res EmojisGetResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EmojisGetOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse(resp *http.Response) (res ActionsEnterprisePermissions, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsEnterprisePermissions
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse(resp *http.Response) (res EnterpriseAdminSetGithubActionsPermissionsEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminSetGithubActionsPermissionsEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(resp *http.Response) (res EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(resp *http.Response) (res EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse(resp *http.Response) (res EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse(resp *http.Response) (res EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminGetAllowedActionsEnterpriseResponse(resp *http.Response) (res SelectedActions, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SelectedActions
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminSetAllowedActionsEnterpriseResponse(resp *http.Response) (res EnterpriseAdminSetAllowedActionsEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminSetAllowedActionsEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse(resp *http.Response) (res EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse(resp *http.Response) (res RunnerGroupsEnterprise, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsEnterprise
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse(resp *http.Response) (res RunnerGroupsEnterprise, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsEnterprise
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse(resp *http.Response) (res EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse(resp *http.Response) (res RunnerGroupsEnterprise, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsEnterprise
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(resp *http.Response) (res EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(resp *http.Response) (res EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(resp *http.Response) (res EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(resp *http.Response) (res EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse(resp *http.Response) (res EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse(resp *http.Response) (res EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse(resp *http.Response) (res EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse(resp *http.Response) (res EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminListSelfHostedRunnersForEnterpriseResponse(resp *http.Response) (res EnterpriseAdminListSelfHostedRunnersForEnterprise, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EnterpriseAdminListSelfHostedRunnersForEnterprise
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminListRunnerApplicationsForEnterpriseResponse(resp *http.Response) (res []RunnerApplication, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []RunnerApplication
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem RunnerApplication
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminCreateRegistrationTokenForEnterpriseResponse(resp *http.Response) (res AuthenticationToken, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminCreateRemoveTokenForEnterpriseResponse(resp *http.Response) (res AuthenticationToken, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse(resp *http.Response) (res Runner, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Runner
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse(resp *http.Response) (res EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeBillingGetGithubActionsBillingGheResponse(resp *http.Response) (res ActionsBillingUsage, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsBillingUsage
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeBillingGetGithubPackagesBillingGheResponse(resp *http.Response) (res PackagesBillingUsage, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesBillingUsage
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeBillingGetSharedStorageBillingGheResponse(resp *http.Response) (res CombinedBillingUsage, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CombinedBillingUsage
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListPublicEventsResponse(resp *http.Response) (res ActivityListPublicEventsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListPublicEventsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityGetFeedsResponse(resp *http.Response) (res Feed, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Feed
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsListResponse(resp *http.Response) (res GistsListResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsListStarredResponse(resp *http.Response) (res GistsListStarredResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListStarredOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListStarredApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListStarredApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsGetResponse(resp *http.Response) (res GistsGetResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ForbiddenGist
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsDeleteResponse(resp *http.Response) (res GistsDeleteResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &GistsDeleteNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsDeleteApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsDeleteApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsListCommentsResponse(resp *http.Response) (res GistsListCommentsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListCommentsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListCommentsApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListCommentsApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsCreateCommentResponse(resp *http.Response) (res GistsCreateCommentResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsCreateCommentApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsCreateCommentApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsGetCommentResponse(resp *http.Response) (res GistsGetCommentResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ForbiddenGist
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsDeleteCommentResponse(resp *http.Response) (res GistsDeleteCommentResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &GistsDeleteCommentNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsDeleteCommentApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsDeleteCommentApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsUpdateCommentResponse(resp *http.Response) (res GistsUpdateCommentResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsListCommitsResponse(resp *http.Response) (res GistsListCommitsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListCommitsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListCommitsApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListCommitsApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsListForksResponse(resp *http.Response) (res GistsListForksResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListForksOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListForksApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsListForksApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsCheckIsStarredResponse(resp *http.Response) (res GistsCheckIsStarredResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &GistsCheckIsStarredNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsCheckIsStarredNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsStarResponse(resp *http.Response) (res GistsStarResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &GistsStarNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsStarApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsStarApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGistsUnstarResponse(resp *http.Response) (res GistsUnstarResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &GistsUnstarNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsUnstarApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GistsUnstarApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGitignoreGetAllTemplatesResponse(resp *http.Response) (res GitignoreGetAllTemplatesResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitignoreGetAllTemplatesOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGitignoreGetTemplateResponse(resp *http.Response) (res GitignoreGetTemplateResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitignoreTemplate
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsListReposAccessibleToInstallationResponse(resp *http.Response) (res AppsListReposAccessibleToInstallationResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListReposAccessibleToInstallationOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListReposAccessibleToInstallationApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListReposAccessibleToInstallationApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsRevokeInstallationAccessTokenResponse(resp *http.Response) (res AppsRevokeInstallationAccessToken, err error) {
	switch resp.StatusCode {
	case 204:
		return AppsRevokeInstallationAccessToken{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeLicensesGetAllCommonlyUsedResponse(resp *http.Response) (res LicensesGetAllCommonlyUsedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response LicensesGetAllCommonlyUsedOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeLicensesGetResponse(resp *http.Response) (res LicensesGetResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response License
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response LicensesGetApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response LicensesGetApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMarkdownRenderResponse(resp *http.Response) (res MarkdownRenderResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "text/html":
			return res, fmt.Errorf("text/html decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMarkdownRenderRawResponse(resp *http.Response) (res MarkdownRenderRawResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "text/html":
			return res, fmt.Errorf("text/html decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsGetSubscriptionPlanForAccountResponse(resp *http.Response) (res AppsGetSubscriptionPlanForAccountResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MarketplacePurchase
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsGetSubscriptionPlanForAccountApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsListPlansResponse(resp *http.Response) (res AppsListPlansResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListPlansOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListPlansApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListPlansApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsGetSubscriptionPlanForAccountStubbedResponse(resp *http.Response) (res AppsGetSubscriptionPlanForAccountStubbedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MarketplacePurchase
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &AppsGetSubscriptionPlanForAccountStubbedNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsListPlansStubbedResponse(resp *http.Response) (res AppsListPlansStubbedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListPlansStubbedOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMetaGetResponse(resp *http.Response) (res MetaGetResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response APIOverview
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListPublicEventsForRepoNetworkResponse(resp *http.Response) (res ActivityListPublicEventsForRepoNetworkResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListPublicEventsForRepoNetworkOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityMarkNotificationsAsReadResponse(resp *http.Response) (res ActivityMarkNotificationsAsReadResponse, err error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityMarkNotificationsAsReadAccepted
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 205:
		return &ActivityMarkNotificationsAsReadResetContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityMarkNotificationsAsReadApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityMarkNotificationsAsReadApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityGetThreadResponse(resp *http.Response) (res ActivityGetThreadResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Thread
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityGetThreadApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityGetThreadApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityMarkThreadAsReadResponse(resp *http.Response) (res ActivityMarkThreadAsReadResponse, err error) {
	switch resp.StatusCode {
	case 205:
		return &ActivityMarkThreadAsReadResetContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityGetThreadSubscriptionForAuthenticatedUserResponse(resp *http.Response) (res ActivityGetThreadSubscriptionForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ThreadSubscription
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivitySetThreadSubscriptionResponse(resp *http.Response) (res ActivitySetThreadSubscriptionResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ThreadSubscription
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivitySetThreadSubscriptionApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivitySetThreadSubscriptionApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityDeleteThreadSubscriptionResponse(resp *http.Response) (res ActivityDeleteThreadSubscriptionResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ActivityDeleteThreadSubscriptionNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityDeleteThreadSubscriptionApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMetaGetOctocatResponse(resp *http.Response) (res string, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/octocat-stream":
			return res, fmt.Errorf("application/octocat-stream decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsListResponse(resp *http.Response) (res OrgsListResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsGetResponse(resp *http.Response) (res OrgsGetResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrganizationFull
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetGithubActionsPermissionsOrganizationResponse(resp *http.Response) (res ActionsOrganizationPermissions, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsOrganizationPermissions
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsSetGithubActionsPermissionsOrganizationResponse(resp *http.Response) (res ActionsSetGithubActionsPermissionsOrganization, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetGithubActionsPermissionsOrganization{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse(resp *http.Response) (res ActionsListSelectedRepositoriesEnabledGithubActionsOrganization, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelectedRepositoriesEnabledGithubActionsOrganization
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse(resp *http.Response) (res ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsEnableSelectedRepositoryGithubActionsOrganizationResponse(resp *http.Response) (res ActionsEnableSelectedRepositoryGithubActionsOrganization, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsEnableSelectedRepositoryGithubActionsOrganization{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDisableSelectedRepositoryGithubActionsOrganizationResponse(resp *http.Response) (res ActionsDisableSelectedRepositoryGithubActionsOrganization, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDisableSelectedRepositoryGithubActionsOrganization{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetAllowedActionsOrganizationResponse(resp *http.Response) (res SelectedActions, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SelectedActions
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsSetAllowedActionsOrganizationResponse(resp *http.Response) (res ActionsSetAllowedActionsOrganization, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetAllowedActionsOrganization{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListSelfHostedRunnerGroupsForOrgResponse(resp *http.Response) (res ActionsListSelfHostedRunnerGroupsForOrg, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelfHostedRunnerGroupsForOrg
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsCreateSelfHostedRunnerGroupForOrgResponse(resp *http.Response) (res RunnerGroupsOrg, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsOrg
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetSelfHostedRunnerGroupForOrgResponse(resp *http.Response) (res RunnerGroupsOrg, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsOrg
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDeleteSelfHostedRunnerGroupFromOrgResponse(resp *http.Response) (res ActionsDeleteSelfHostedRunnerGroupFromOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteSelfHostedRunnerGroupFromOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsUpdateSelfHostedRunnerGroupForOrgResponse(resp *http.Response) (res RunnerGroupsOrg, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RunnerGroupsOrg
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse(resp *http.Response) (res ActionsListRepoAccessToSelfHostedRunnerGroupInOrg, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListRepoAccessToSelfHostedRunnerGroupInOrg
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponse(resp *http.Response) (res ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse(resp *http.Response) (res ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponse(resp *http.Response) (res ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListSelfHostedRunnersInGroupForOrgResponse(resp *http.Response) (res ActionsListSelfHostedRunnersInGroupForOrg, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelfHostedRunnersInGroupForOrg
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsSetSelfHostedRunnersInGroupForOrgResponse(resp *http.Response) (res ActionsSetSelfHostedRunnersInGroupForOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetSelfHostedRunnersInGroupForOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsAddSelfHostedRunnerToGroupForOrgResponse(resp *http.Response) (res ActionsAddSelfHostedRunnerToGroupForOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsAddSelfHostedRunnerToGroupForOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsRemoveSelfHostedRunnerFromGroupForOrgResponse(resp *http.Response) (res ActionsRemoveSelfHostedRunnerFromGroupForOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsRemoveSelfHostedRunnerFromGroupForOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListSelfHostedRunnersForOrgResponse(resp *http.Response) (res ActionsListSelfHostedRunnersForOrg, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelfHostedRunnersForOrg
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListRunnerApplicationsForOrgResponse(resp *http.Response) (res []RunnerApplication, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []RunnerApplication
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem RunnerApplication
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsCreateRegistrationTokenForOrgResponse(resp *http.Response) (res AuthenticationToken, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsCreateRemoveTokenForOrgResponse(resp *http.Response) (res AuthenticationToken, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetSelfHostedRunnerForOrgResponse(resp *http.Response) (res Runner, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Runner
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDeleteSelfHostedRunnerFromOrgResponse(resp *http.Response) (res ActionsDeleteSelfHostedRunnerFromOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteSelfHostedRunnerFromOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListOrgSecretsResponse(resp *http.Response) (res ActionsListOrgSecrets, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListOrgSecrets
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetOrgPublicKeyResponse(resp *http.Response) (res ActionsPublicKey, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsPublicKey
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetOrgSecretResponse(resp *http.Response) (res OrganizationActionsSecret, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrganizationActionsSecret
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsCreateOrUpdateOrgSecretResponse(resp *http.Response) (res ActionsCreateOrUpdateOrgSecretResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EmptyObject
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &ActionsCreateOrUpdateOrgSecretNoContent{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDeleteOrgSecretResponse(resp *http.Response) (res ActionsDeleteOrgSecret, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteOrgSecret{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListSelectedReposForOrgSecretResponse(resp *http.Response) (res ActionsListSelectedReposForOrgSecret, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelectedReposForOrgSecret
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsSetSelectedReposForOrgSecretResponse(resp *http.Response) (res ActionsSetSelectedReposForOrgSecret, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetSelectedReposForOrgSecret{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsAddSelectedRepoToOrgSecretResponse(resp *http.Response) (res ActionsAddSelectedRepoToOrgSecretResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ActionsAddSelectedRepoToOrgSecretNoContent{}, nil
	case 409:
		return &ActionsAddSelectedRepoToOrgSecretConflict{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsRemoveSelectedRepoFromOrgSecretResponse(resp *http.Response) (res ActionsRemoveSelectedRepoFromOrgSecretResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ActionsRemoveSelectedRepoFromOrgSecretNoContent{}, nil
	case 409:
		return &ActionsRemoveSelectedRepoFromOrgSecretConflict{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsListBlockedUsersResponse(resp *http.Response) (res OrgsListBlockedUsersResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListBlockedUsersOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsCheckBlockedUserResponse(resp *http.Response) (res OrgsCheckBlockedUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsCheckBlockedUserNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsUnblockUserResponse(resp *http.Response) (res OrgsUnblockUser, err error) {
	switch resp.StatusCode {
	case 204:
		return OrgsUnblockUser{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsListSamlSSOAuthorizationsResponse(resp *http.Response) (res []CredentialAuthorization, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []CredentialAuthorization
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem CredentialAuthorization
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsRemoveSamlSSOAuthorizationResponse(resp *http.Response) (res OrgsRemoveSamlSSOAuthorizationResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsRemoveSamlSSOAuthorizationNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListPublicOrgEventsResponse(resp *http.Response) (res []Event, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Event
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsListFailedInvitationsResponse(resp *http.Response) (res OrgsListFailedInvitationsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListFailedInvitationsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsListWebhooksResponse(resp *http.Response) (res OrgsListWebhooksResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListWebhooksOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsGetWebhookResponse(resp *http.Response) (res OrgsGetWebhookResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgHook
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsDeleteWebhookResponse(resp *http.Response) (res OrgsDeleteWebhookResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsDeleteWebhookNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsPingWebhookResponse(resp *http.Response) (res OrgsPingWebhookResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsPingWebhookNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeInteractionsRemoveRestrictionsForOrgResponse(resp *http.Response) (res InteractionsRemoveRestrictionsForOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return InteractionsRemoveRestrictionsForOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsListPendingInvitationsResponse(resp *http.Response) (res OrgsListPendingInvitationsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListPendingInvitationsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsListInvitationTeamsResponse(resp *http.Response) (res OrgsListInvitationTeamsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListInvitationTeamsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsCheckMembershipForUserResponse(resp *http.Response) (res OrgsCheckMembershipForUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsCheckMembershipForUserNoContent{}, nil
	case 302:
		return &OrgsCheckMembershipForUserFound{}, nil
	case 404:
		return &OrgsCheckMembershipForUserNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsRemoveMemberResponse(resp *http.Response) (res OrgsRemoveMemberResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsRemoveMemberNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsGetMembershipForUserResponse(resp *http.Response) (res OrgsGetMembershipForUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgMembership
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsGetMembershipForUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsGetMembershipForUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsRemoveMembershipForUserResponse(resp *http.Response) (res OrgsRemoveMembershipForUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsRemoveMembershipForUserNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsRemoveMembershipForUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsRemoveMembershipForUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsDownloadArchiveForOrgResponse(resp *http.Response) (res MigrationsDownloadArchiveForOrgResponse, err error) {
	switch resp.StatusCode {
	case 302:
		return &MigrationsDownloadArchiveForOrgFound{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsDeleteArchiveForOrgResponse(resp *http.Response) (res MigrationsDeleteArchiveForOrgResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &MigrationsDeleteArchiveForOrgNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsUnlockRepoForOrgResponse(resp *http.Response) (res MigrationsUnlockRepoForOrgResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &MigrationsUnlockRepoForOrgNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsListReposForOrgResponse(resp *http.Response) (res MigrationsListReposForOrgResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsListReposForOrgOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsConvertMemberToOutsideCollaboratorResponse(resp *http.Response) (res OrgsConvertMemberToOutsideCollaboratorResponse, err error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsConvertMemberToOutsideCollaboratorAccepted
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &OrgsConvertMemberToOutsideCollaboratorNoContent{}, nil
	case 403:
		return &OrgsConvertMemberToOutsideCollaboratorForbidden{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsRemoveOutsideCollaboratorResponse(resp *http.Response) (res OrgsRemoveOutsideCollaboratorResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsRemoveOutsideCollaboratorNoContent{}, nil
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsRemoveOutsideCollaboratorUnprocessableEntity
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsCreateForOrgResponse(resp *http.Response) (res ProjectsCreateForOrgResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Project
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateForOrgApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateForOrgApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateForOrgApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateForOrgApplicationJSONGone
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsListPublicMembersResponse(resp *http.Response) (res []SimpleUser, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []SimpleUser
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem SimpleUser
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsCheckPublicMembershipForUserResponse(resp *http.Response) (res OrgsCheckPublicMembershipForUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsCheckPublicMembershipForUserNoContent{}, nil
	case 404:
		return &OrgsCheckPublicMembershipForUserNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsSetPublicMembershipForAuthenticatedUserResponse(resp *http.Response) (res OrgsSetPublicMembershipForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &OrgsSetPublicMembershipForAuthenticatedUserNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsRemovePublicMembershipForAuthenticatedUserResponse(resp *http.Response) (res OrgsRemovePublicMembershipForAuthenticatedUser, err error) {
	switch resp.StatusCode {
	case 204:
		return OrgsRemovePublicMembershipForAuthenticatedUser{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeBillingGetGithubActionsBillingOrgResponse(resp *http.Response) (res ActionsBillingUsage, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsBillingUsage
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeBillingGetGithubPackagesBillingOrgResponse(resp *http.Response) (res PackagesBillingUsage, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesBillingUsage
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeBillingGetSharedStorageBillingOrgResponse(resp *http.Response) (res CombinedBillingUsage, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CombinedBillingUsage
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListIdpGroupsForOrgResponse(resp *http.Response) (res GroupMapping, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GroupMapping
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListResponse(resp *http.Response) (res TeamsListResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsGetByNameResponse(resp *http.Response) (res TeamsGetByNameResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamFull
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsDeleteInOrgResponse(resp *http.Response) (res TeamsDeleteInOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return TeamsDeleteInOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsUpdateInOrgResponse(resp *http.Response) (res TeamFull, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamFull
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsCreateDiscussionInOrgResponse(resp *http.Response) (res TeamDiscussion, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsGetDiscussionInOrgResponse(resp *http.Response) (res TeamDiscussion, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsDeleteDiscussionInOrgResponse(resp *http.Response) (res TeamsDeleteDiscussionInOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return TeamsDeleteDiscussionInOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsUpdateDiscussionInOrgResponse(resp *http.Response) (res TeamDiscussion, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsCreateDiscussionCommentInOrgResponse(resp *http.Response) (res TeamDiscussionComment, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsGetDiscussionCommentInOrgResponse(resp *http.Response) (res TeamDiscussionComment, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsDeleteDiscussionCommentInOrgResponse(resp *http.Response) (res TeamsDeleteDiscussionCommentInOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return TeamsDeleteDiscussionCommentInOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsUpdateDiscussionCommentInOrgResponse(resp *http.Response) (res TeamDiscussionComment, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsCreateForTeamDiscussionCommentInOrgResponse(resp *http.Response) (res ReactionsCreateForTeamDiscussionCommentInOrgResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsDeleteForTeamDiscussionCommentResponse(resp *http.Response) (res ReactionsDeleteForTeamDiscussionComment, err error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForTeamDiscussionComment{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsCreateForTeamDiscussionInOrgResponse(resp *http.Response) (res ReactionsCreateForTeamDiscussionInOrgResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsDeleteForTeamDiscussionResponse(resp *http.Response) (res ReactionsDeleteForTeamDiscussion, err error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForTeamDiscussion{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListPendingInvitationsInOrgResponse(resp *http.Response) (res []OrganizationInvitation, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []OrganizationInvitation
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem OrganizationInvitation
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsGetMembershipForUserInOrgResponse(resp *http.Response) (res TeamsGetMembershipForUserInOrgResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamMembership
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &TeamsGetMembershipForUserInOrgNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsAddOrUpdateMembershipForUserInOrgResponse(resp *http.Response) (res TeamsAddOrUpdateMembershipForUserInOrgResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamMembership
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		return &TeamsAddOrUpdateMembershipForUserInOrgForbidden{}, nil
	case 422:
		return &TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsRemoveMembershipForUserInOrgResponse(resp *http.Response) (res TeamsRemoveMembershipForUserInOrgResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsRemoveMembershipForUserInOrgNoContent{}, nil
	case 403:
		return &TeamsRemoveMembershipForUserInOrgForbidden{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListProjectsInOrgResponse(resp *http.Response) (res []TeamProject, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []TeamProject
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem TeamProject
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsCheckPermissionsForProjectInOrgResponse(resp *http.Response) (res TeamsCheckPermissionsForProjectInOrgResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamProject
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &TeamsCheckPermissionsForProjectInOrgNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsAddOrUpdateProjectPermissionsInOrgResponse(resp *http.Response) (res TeamsAddOrUpdateProjectPermissionsInOrgResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsAddOrUpdateProjectPermissionsInOrgNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsAddOrUpdateProjectPermissionsInOrgForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsRemoveProjectInOrgResponse(resp *http.Response) (res TeamsRemoveProjectInOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return TeamsRemoveProjectInOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListReposInOrgResponse(resp *http.Response) (res []MinimalRepository, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []MinimalRepository
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem MinimalRepository
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsCheckPermissionsForRepoInOrgResponse(resp *http.Response) (res TeamsCheckPermissionsForRepoInOrgResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamRepository
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &TeamsCheckPermissionsForRepoInOrgNoContent{}, nil
	case 404:
		return &TeamsCheckPermissionsForRepoInOrgNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsAddOrUpdateRepoPermissionsInOrgResponse(resp *http.Response) (res TeamsAddOrUpdateRepoPermissionsInOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return TeamsAddOrUpdateRepoPermissionsInOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsRemoveRepoInOrgResponse(resp *http.Response) (res TeamsRemoveRepoInOrg, err error) {
	switch resp.StatusCode {
	case 204:
		return TeamsRemoveRepoInOrg{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListIdpGroupsInOrgResponse(resp *http.Response) (res GroupMapping, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GroupMapping
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse(resp *http.Response) (res GroupMapping, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GroupMapping
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListChildInOrgResponse(resp *http.Response) (res []Team, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Team
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Team
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsGetCardResponse(resp *http.Response) (res ProjectsGetCardResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectCard
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsGetCardApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsGetCardApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsGetCardApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsDeleteCardResponse(resp *http.Response) (res ProjectsDeleteCardResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ProjectsDeleteCardNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteCardApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteCardForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteCardApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsUpdateCardResponse(resp *http.Response) (res ProjectsUpdateCardResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectCard
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsUpdateCardApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsUpdateCardApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsUpdateCardApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsGetColumnResponse(resp *http.Response) (res ProjectsGetColumnResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectColumn
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsGetColumnApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsGetColumnApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsGetColumnApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsDeleteColumnResponse(resp *http.Response) (res ProjectsDeleteColumnResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ProjectsDeleteColumnNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteColumnApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteColumnApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsUpdateColumnResponse(resp *http.Response) (res ProjectsUpdateColumnResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectColumn
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsUpdateColumnApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsUpdateColumnApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsMoveColumnResponse(resp *http.Response) (res ProjectsMoveColumnResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsMoveColumnCreated
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsMoveColumnApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsMoveColumnApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsGetResponse(resp *http.Response) (res ProjectsGetResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Project
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsGetApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsGetApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsDeleteResponse(resp *http.Response) (res ProjectsDeleteResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ProjectsDeleteNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsDeleteApplicationJSONGone
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsUpdateResponse(resp *http.Response) (res ProjectsUpdateResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Project
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsUpdateApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsUpdateForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &ProjectsUpdateNotFound{}, nil
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsUpdateApplicationJSONGone
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsListColumnsResponse(resp *http.Response) (res ProjectsListColumnsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsListColumnsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsListColumnsApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsListColumnsApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsCreateColumnResponse(resp *http.Response) (res ProjectsCreateColumnResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectColumn
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateColumnApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateColumnApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeRateLimitGetResponse(resp *http.Response) (res RateLimitGetResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RateLimitOverview
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsDeleteLegacyResponse(resp *http.Response) (res ReactionsDeleteLegacyResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReactionsDeleteLegacyNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsDeleteLegacyApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsDeleteLegacyApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReactionsDeleteLegacyApplicationJSONGone
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetResponse(resp *http.Response) (res ReposGetResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response FullRepository
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetApplicationJSONMovedPermanently
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteResponse(resp *http.Response) (res ReposDeleteResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteNoContent{}, nil
	case 307:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposDeleteApplicationJSONTemporaryRedirect
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposDeleteForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposDeleteApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListArtifactsForRepoResponse(resp *http.Response) (res ActionsListArtifactsForRepo, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListArtifactsForRepo
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetArtifactResponse(resp *http.Response) (res Artifact, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Artifact
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDeleteArtifactResponse(resp *http.Response) (res ActionsDeleteArtifact, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteArtifact{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDownloadArtifactResponse(resp *http.Response) (res ActionsDownloadArtifact, err error) {
	switch resp.StatusCode {
	case 302:
		return ActionsDownloadArtifact{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetJobForWorkflowRunResponse(resp *http.Response) (res Job, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Job
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDownloadJobLogsForWorkflowRunResponse(resp *http.Response) (res ActionsDownloadJobLogsForWorkflowRun, err error) {
	switch resp.StatusCode {
	case 302:
		return ActionsDownloadJobLogsForWorkflowRun{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetGithubActionsPermissionsRepositoryResponse(resp *http.Response) (res ActionsRepositoryPermissions, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsRepositoryPermissions
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsSetGithubActionsPermissionsRepositoryResponse(resp *http.Response) (res ActionsSetGithubActionsPermissionsRepository, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetGithubActionsPermissionsRepository{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetAllowedActionsRepositoryResponse(resp *http.Response) (res SelectedActions, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SelectedActions
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsSetAllowedActionsRepositoryResponse(resp *http.Response) (res ActionsSetAllowedActionsRepository, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsSetAllowedActionsRepository{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListSelfHostedRunnersForRepoResponse(resp *http.Response) (res ActionsListSelfHostedRunnersForRepo, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListSelfHostedRunnersForRepo
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListRunnerApplicationsForRepoResponse(resp *http.Response) (res []RunnerApplication, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []RunnerApplication
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem RunnerApplication
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsCreateRegistrationTokenForRepoResponse(resp *http.Response) (res AuthenticationToken, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsCreateRemoveTokenForRepoResponse(resp *http.Response) (res AuthenticationToken, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AuthenticationToken
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetSelfHostedRunnerForRepoResponse(resp *http.Response) (res Runner, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Runner
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDeleteSelfHostedRunnerFromRepoResponse(resp *http.Response) (res ActionsDeleteSelfHostedRunnerFromRepo, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteSelfHostedRunnerFromRepo{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetWorkflowRunResponse(resp *http.Response) (res WorkflowRun, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response WorkflowRun
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDeleteWorkflowRunResponse(resp *http.Response) (res ActionsDeleteWorkflowRun, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteWorkflowRun{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetReviewsForRunResponse(resp *http.Response) (res []EnvironmentApprovals, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []EnvironmentApprovals
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem EnvironmentApprovals
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsApproveWorkflowRunResponse(resp *http.Response) (res ActionsApproveWorkflowRunResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EmptyObject
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsApproveWorkflowRunApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsApproveWorkflowRunApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListWorkflowRunArtifactsResponse(resp *http.Response) (res ActionsListWorkflowRunArtifacts, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListWorkflowRunArtifacts
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsCancelWorkflowRunResponse(resp *http.Response) (res ActionsCancelWorkflowRun, err error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsCancelWorkflowRun
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDownloadWorkflowRunLogsResponse(resp *http.Response) (res ActionsDownloadWorkflowRunLogs, err error) {
	switch resp.StatusCode {
	case 302:
		return ActionsDownloadWorkflowRunLogs{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDeleteWorkflowRunLogsResponse(resp *http.Response) (res ActionsDeleteWorkflowRunLogs, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteWorkflowRunLogs{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsReRunWorkflowResponse(resp *http.Response) (res ActionsReRunWorkflow, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsReRunWorkflow
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsRetryWorkflowResponse(resp *http.Response) (res ActionsRetryWorkflow, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsRetryWorkflow
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetWorkflowRunUsageResponse(resp *http.Response) (res WorkflowRunUsage, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response WorkflowRunUsage
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListRepoSecretsResponse(resp *http.Response) (res ActionsListRepoSecrets, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListRepoSecrets
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetRepoPublicKeyResponse(resp *http.Response) (res ActionsPublicKey, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsPublicKey
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetRepoSecretResponse(resp *http.Response) (res ActionsSecret, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsSecret
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsCreateOrUpdateRepoSecretResponse(resp *http.Response) (res ActionsCreateOrUpdateRepoSecretResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsCreateOrUpdateRepoSecretCreated
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &ActionsCreateOrUpdateRepoSecretNoContent{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDeleteRepoSecretResponse(resp *http.Response) (res ActionsDeleteRepoSecret, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteRepoSecret{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListRepoWorkflowsResponse(resp *http.Response) (res ActionsListRepoWorkflows, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListRepoWorkflows
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesListAssigneesResponse(resp *http.Response) (res IssuesListAssigneesResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListAssigneesOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesCheckUserCanBeAssignedResponse(resp *http.Response) (res IssuesCheckUserCanBeAssignedResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &IssuesCheckUserCanBeAssignedNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListAutolinksResponse(resp *http.Response) (res []Autolink, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Autolink
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Autolink
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetAutolinkResponse(resp *http.Response) (res ReposGetAutolinkResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Autolink
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteAutolinkResponse(resp *http.Response) (res ReposDeleteAutolinkResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteAutolinkNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposEnableAutomatedSecurityFixesResponse(resp *http.Response) (res ReposEnableAutomatedSecurityFixes, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposEnableAutomatedSecurityFixes{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDisableAutomatedSecurityFixesResponse(resp *http.Response) (res ReposDisableAutomatedSecurityFixes, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposDisableAutomatedSecurityFixes{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListBranchesResponse(resp *http.Response) (res ReposListBranchesResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListBranchesOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetBranchResponse(resp *http.Response) (res ReposGetBranchResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BranchWithProtection
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetBranchApplicationJSONMovedPermanently
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetBranchApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetBranchProtectionResponse(resp *http.Response) (res ReposGetBranchProtectionResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BranchProtection
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposUpdateBranchProtectionResponse(resp *http.Response) (res ReposUpdateBranchProtectionResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranch
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposUpdateBranchProtectionApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposUpdateBranchProtectionApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteBranchProtectionResponse(resp *http.Response) (res ReposDeleteBranchProtectionResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteBranchProtectionNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetAdminBranchProtectionResponse(resp *http.Response) (res ProtectedBranchAdminEnforced, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchAdminEnforced
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposSetAdminBranchProtectionResponse(resp *http.Response) (res ProtectedBranchAdminEnforced, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchAdminEnforced
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteAdminBranchProtectionResponse(resp *http.Response) (res ReposDeleteAdminBranchProtectionResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteAdminBranchProtectionNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetPullRequestReviewProtectionResponse(resp *http.Response) (res ProtectedBranchPullRequestReview, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchPullRequestReview
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeletePullRequestReviewProtectionResponse(resp *http.Response) (res ReposDeletePullRequestReviewProtectionResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeletePullRequestReviewProtectionNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetCommitSignatureProtectionResponse(resp *http.Response) (res ReposGetCommitSignatureProtectionResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchAdminEnforced
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposCreateCommitSignatureProtectionResponse(resp *http.Response) (res ReposCreateCommitSignatureProtectionResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProtectedBranchAdminEnforced
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteCommitSignatureProtectionResponse(resp *http.Response) (res ReposDeleteCommitSignatureProtectionResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteCommitSignatureProtectionNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetStatusChecksProtectionResponse(resp *http.Response) (res ReposGetStatusChecksProtectionResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response StatusCheckPolicy
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposRemoveStatusCheckProtectionResponse(resp *http.Response) (res ReposRemoveStatusCheckProtection, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposRemoveStatusCheckProtection{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetAllStatusCheckContextsResponse(resp *http.Response) (res ReposGetAllStatusCheckContextsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetAllStatusCheckContextsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetAccessRestrictionsResponse(resp *http.Response) (res ReposGetAccessRestrictionsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BranchRestrictionPolicy
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteAccessRestrictionsResponse(resp *http.Response) (res ReposDeleteAccessRestrictions, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteAccessRestrictions{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetAppsWithAccessToProtectedBranchResponse(resp *http.Response) (res ReposGetAppsWithAccessToProtectedBranchResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetAppsWithAccessToProtectedBranchOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetTeamsWithAccessToProtectedBranchResponse(resp *http.Response) (res ReposGetTeamsWithAccessToProtectedBranchResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetTeamsWithAccessToProtectedBranchOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetUsersWithAccessToProtectedBranchResponse(resp *http.Response) (res ReposGetUsersWithAccessToProtectedBranchResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetUsersWithAccessToProtectedBranchOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeChecksGetResponse(resp *http.Response) (res CheckRun, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CheckRun
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeChecksListAnnotationsResponse(resp *http.Response) (res []CheckAnnotation, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []CheckAnnotation
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem CheckAnnotation
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeChecksCreateSuiteResponse(resp *http.Response) (res ChecksCreateSuiteResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ChecksCreateSuiteApplicationJSONOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ChecksCreateSuiteApplicationJSONCreated
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeChecksSetSuitesPreferencesResponse(resp *http.Response) (res CheckSuitePreference, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CheckSuitePreference
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeChecksGetSuiteResponse(resp *http.Response) (res CheckSuite, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CheckSuite
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeChecksRerequestSuiteResponse(resp *http.Response) (res ChecksRerequestSuite, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ChecksRerequestSuite
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCodeScanningGetAlertResponse(resp *http.Response) (res CodeScanningGetAlertResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningAlert
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningGetAlertApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningGetAlertApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCodeScanningUpdateAlertResponse(resp *http.Response) (res CodeScanningUpdateAlertResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningAlert
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningUpdateAlertApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningUpdateAlertApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCodeScanningListAlertInstancesResponse(resp *http.Response) (res CodeScanningListAlertInstancesResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningListAlertInstancesOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningListAlertInstancesApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningListAlertInstancesApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCodeScanningListRecentAnalysesResponse(resp *http.Response) (res CodeScanningListRecentAnalysesResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningListRecentAnalysesOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningListRecentAnalysesApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningListRecentAnalysesApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCodeScanningGetAnalysisResponse(resp *http.Response) (res CodeScanningGetAnalysisResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningAnalysis
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		case "application/json+sarif":
			return res, fmt.Errorf("application/json+sarif decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningGetAnalysisApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningGetAnalysisApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCodeScanningDeleteAnalysisResponse(resp *http.Response) (res CodeScanningDeleteAnalysisResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningAnalysisDeletion
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningDeleteAnalysisApplicationJSONBadRequest
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		case "application/scim+json":
			return res, fmt.Errorf("application/scim+json decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningDeleteAnalysisApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningDeleteAnalysisApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCodeScanningUploadSarifResponse(resp *http.Response) (res CodeScanningUploadSarifResponse, err error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningSarifsReceipt
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 400:
		return &CodeScanningUploadSarifBadRequest{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningUploadSarifApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningUploadSarifApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 413:
		return &CodeScanningUploadSarifRequestEntityTooLarge{}, nil
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeCodeScanningGetSarifResponse(resp *http.Response) (res CodeScanningGetSarifResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CodeScanningSarifsStatus
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &CodeScanningGetSarifNotFound{}, nil
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposCheckCollaboratorResponse(resp *http.Response) (res ReposCheckCollaboratorResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposCheckCollaboratorNoContent{}, nil
	case 404:
		return &ReposCheckCollaboratorNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposRemoveCollaboratorResponse(resp *http.Response) (res ReposRemoveCollaborator, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposRemoveCollaborator{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetCollaboratorPermissionLevelResponse(resp *http.Response) (res ReposGetCollaboratorPermissionLevelResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RepositoryCollaboratorPermission
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListCommitCommentsForRepoResponse(resp *http.Response) (res []CommitComment, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []CommitComment
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem CommitComment
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetCommitCommentResponse(resp *http.Response) (res ReposGetCommitCommentResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CommitComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteCommitCommentResponse(resp *http.Response) (res ReposDeleteCommitCommentResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteCommitCommentNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposUpdateCommitCommentResponse(resp *http.Response) (res ReposUpdateCommitCommentResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CommitComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsDeleteForCommitCommentResponse(resp *http.Response) (res ReactionsDeleteForCommitComment, err error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForCommitComment{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListCommitsResponse(resp *http.Response) (res ReposListCommitsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListCommitsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 400:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListCommitsApplicationJSONBadRequest
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		case "application/scim+json":
			return res, fmt.Errorf("application/scim+json decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListCommitsApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListCommitsApplicationJSONConflict
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 500:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListCommitsApplicationJSONInternalServerError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListCommentsForCommitResponse(resp *http.Response) (res []CommitComment, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []CommitComment
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem CommitComment
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListPullRequestsAssociatedWithCommitResponse(resp *http.Response) (res []PullRequestSimple, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []PullRequestSimple
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem PullRequestSimple
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeChecksListSuitesForRefResponse(resp *http.Response) (res ChecksListSuitesForRef, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ChecksListSuitesForRef
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetCombinedStatusForRefResponse(resp *http.Response) (res ReposGetCombinedStatusForRefResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CombinedCommitStatus
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListCommitStatusesForRefResponse(resp *http.Response) (res ReposListCommitStatusesForRefResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListCommitStatusesForRefOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 301:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetCommunityProfileMetricsResponse(resp *http.Response) (res CommunityProfile, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CommunityProfile
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposCompareCommitsResponse(resp *http.Response) (res ReposCompareCommitsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CommitComparison
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposCompareCommitsApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 500:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposCompareCommitsApplicationJSONInternalServerError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListContributorsResponse(resp *http.Response) (res ReposListContributorsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListContributorsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &ReposListContributorsNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListContributorsApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListContributorsApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteDeploymentResponse(resp *http.Response) (res ReposDeleteDeploymentResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteDeploymentNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListDeploymentStatusesResponse(resp *http.Response) (res ReposListDeploymentStatusesResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListDeploymentStatusesOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetDeploymentStatusResponse(resp *http.Response) (res ReposGetDeploymentStatusResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response DeploymentStatus
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteAnEnvironmentResponse(resp *http.Response) (res ReposDeleteAnEnvironment, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteAnEnvironment{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListRepoEventsResponse(resp *http.Response) (res []Event, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Event
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGitGetCommitResponse(resp *http.Response) (res GitGetCommitResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitCommit
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGitListMatchingRefsResponse(resp *http.Response) (res []GitRef, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []GitRef
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem GitRef
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGitGetRefResponse(resp *http.Response) (res GitGetRefResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitRef
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeGitGetTagResponse(resp *http.Response) (res GitGetTagResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GitTag
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteWebhookResponse(resp *http.Response) (res ReposDeleteWebhookResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeleteWebhookNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposPingWebhookResponse(resp *http.Response) (res ReposPingWebhookResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposPingWebhookNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposTestPushWebhookResponse(resp *http.Response) (res ReposTestPushWebhookResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposTestPushWebhookNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsGetImportStatusResponse(resp *http.Response) (res MigrationsGetImportStatusResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Import
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsCancelImportResponse(resp *http.Response) (res MigrationsCancelImport, err error) {
	switch resp.StatusCode {
	case 204:
		return MigrationsCancelImport{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsUpdateImportResponse(resp *http.Response) (res Import, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Import
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsGetCommitAuthorsResponse(resp *http.Response) (res MigrationsGetCommitAuthorsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsGetCommitAuthorsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsGetLargeFilesResponse(resp *http.Response) (res []PorterLargeFile, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []PorterLargeFile
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem PorterLargeFile
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeInteractionsSetRestrictionsForRepoResponse(resp *http.Response) (res InteractionsSetRestrictionsForRepoResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response InteractionLimitResponse
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 409:
		return &InteractionsSetRestrictionsForRepoConflict{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeInteractionsRemoveRestrictionsForRepoResponse(resp *http.Response) (res InteractionsRemoveRestrictionsForRepoResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &InteractionsRemoveRestrictionsForRepoNoContent{}, nil
	case 409:
		return &InteractionsRemoveRestrictionsForRepoConflict{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListInvitationsResponse(resp *http.Response) (res []RepositoryInvitation, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []RepositoryInvitation
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem RepositoryInvitation
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteInvitationResponse(resp *http.Response) (res ReposDeleteInvitation, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteInvitation{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposUpdateInvitationResponse(resp *http.Response) (res RepositoryInvitation, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RepositoryInvitation
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesGetCommentResponse(resp *http.Response) (res IssuesGetCommentResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssueComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesDeleteCommentResponse(resp *http.Response) (res IssuesDeleteComment, err error) {
	switch resp.StatusCode {
	case 204:
		return IssuesDeleteComment{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsDeleteForIssueCommentResponse(resp *http.Response) (res ReactionsDeleteForIssueComment, err error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForIssueComment{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesGetEventResponse(resp *http.Response) (res IssuesGetEventResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssueEvent
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesGetEventApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesGetEventApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesGetEventApplicationJSONGone
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesAddAssigneesResponse(resp *http.Response) (res IssueSimple, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssueSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesRemoveAssigneesResponse(resp *http.Response) (res IssueSimple, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssueSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesListCommentsResponse(resp *http.Response) (res IssuesListCommentsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListCommentsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListCommentsApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListCommentsApplicationJSONGone
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesListLabelsOnIssueResponse(resp *http.Response) (res IssuesListLabelsOnIssueResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListLabelsOnIssueOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesRemoveAllLabelsResponse(resp *http.Response) (res IssuesRemoveAllLabelsResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &IssuesRemoveAllLabelsNoContent{}, nil
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesRemoveLabelResponse(resp *http.Response) (res IssuesRemoveLabelResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesRemoveLabelOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesRemoveLabelApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesRemoveLabelApplicationJSONGone
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesUnlockResponse(resp *http.Response) (res IssuesUnlockResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &IssuesUnlockNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesUnlockApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesUnlockApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsDeleteForIssueResponse(resp *http.Response) (res ReactionsDeleteForIssue, err error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForIssue{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListDeployKeysResponse(resp *http.Response) (res []DeployKey, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []DeployKey
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem DeployKey
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetDeployKeyResponse(resp *http.Response) (res ReposGetDeployKeyResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response DeployKey
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteDeployKeyResponse(resp *http.Response) (res ReposDeleteDeployKey, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteDeployKey{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesListLabelsForRepoResponse(resp *http.Response) (res IssuesListLabelsForRepoResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IssuesListLabelsForRepoOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesGetLabelResponse(resp *http.Response) (res IssuesGetLabelResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Label
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesDeleteLabelResponse(resp *http.Response) (res IssuesDeleteLabel, err error) {
	switch resp.StatusCode {
	case 204:
		return IssuesDeleteLabel{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesUpdateLabelResponse(resp *http.Response) (res Label, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Label
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListLanguagesResponse(resp *http.Response) (res Language, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Language
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposEnableLfsForRepoResponse(resp *http.Response) (res ReposEnableLfsForRepoResponse, err error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Accepted
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		return &ReposEnableLfsForRepoForbidden{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDisableLfsForRepoResponse(resp *http.Response) (res ReposDisableLfsForRepo, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposDisableLfsForRepo{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeLicensesGetForRepoResponse(resp *http.Response) (res LicenseContent, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response LicenseContent
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposMergeUpstreamResponse(resp *http.Response) (res ReposMergeUpstreamResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MergedUpstream
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 409:
		return &ReposMergeUpstreamConflict{}, nil
	case 422:
		return &ReposMergeUpstreamUnprocessableEntity{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesGetMilestoneResponse(resp *http.Response) (res IssuesGetMilestoneResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Milestone
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesDeleteMilestoneResponse(resp *http.Response) (res IssuesDeleteMilestoneResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &IssuesDeleteMilestoneNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesUpdateMilestoneResponse(resp *http.Response) (res Milestone, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Milestone
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeIssuesListLabelsForMilestoneResponse(resp *http.Response) (res []Label, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Label
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Label
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListRepoNotificationsForAuthenticatedUserResponse(resp *http.Response) (res []Thread, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Thread
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Thread
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityMarkRepoNotificationsAsReadResponse(resp *http.Response) (res ActivityMarkRepoNotificationsAsReadResponse, err error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityMarkRepoNotificationsAsReadAccepted
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 205:
		return &ActivityMarkRepoNotificationsAsReadResetContent{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetPagesResponse(resp *http.Response) (res ReposGetPagesResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Page
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListPagesBuildsResponse(resp *http.Response) (res []PageBuild, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []PageBuild
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem PageBuild
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposRequestPagesBuildResponse(resp *http.Response) (res PageBuildStatus, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PageBuildStatus
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetLatestPagesBuildResponse(resp *http.Response) (res PageBuild, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PageBuild
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetPagesBuildResponse(resp *http.Response) (res PageBuild, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PageBuild
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetPagesHealthCheckResponse(resp *http.Response) (res ReposGetPagesHealthCheckResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PagesHealthCheck
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EmptyObject
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 400:
		return &ReposGetPagesHealthCheckBadRequest{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		return &ReposGetPagesHealthCheckUnprocessableEntity{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsCreateForRepoResponse(resp *http.Response) (res ProjectsCreateForRepoResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Project
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateForRepoApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateForRepoApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateForRepoApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 410:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateForRepoApplicationJSONGone
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsGetReviewCommentResponse(resp *http.Response) (res PullsGetReviewCommentResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReviewComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsDeleteReviewCommentResponse(resp *http.Response) (res PullsDeleteReviewCommentResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &PullsDeleteReviewCommentNoContent{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsUpdateReviewCommentResponse(resp *http.Response) (res PullRequestReviewComment, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReviewComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsDeleteForPullRequestCommentResponse(resp *http.Response) (res ReactionsDeleteForPullRequestComment, err error) {
	switch resp.StatusCode {
	case 204:
		return ReactionsDeleteForPullRequestComment{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsGetResponse(resp *http.Response) (res PullsGetResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequest
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsGetApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 500:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsGetApplicationJSONInternalServerError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsCreateReplyForReviewCommentResponse(resp *http.Response) (res PullsCreateReplyForReviewCommentResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReviewComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsListCommitsResponse(resp *http.Response) (res []Commit, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Commit
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Commit
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsCheckIfMergedResponse(resp *http.Response) (res PullsCheckIfMergedResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &PullsCheckIfMergedNoContent{}, nil
	case 404:
		return &PullsCheckIfMergedNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsListRequestedReviewersResponse(resp *http.Response) (res PullRequestReviewRequest, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReviewRequest
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsListReviewsResponse(resp *http.Response) (res []PullRequestReview, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []PullRequestReview
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem PullRequestReview
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsCreateReviewResponse(resp *http.Response) (res PullsCreateReviewResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsGetReviewResponse(resp *http.Response) (res PullsGetReviewResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsUpdateReviewResponse(resp *http.Response) (res PullsUpdateReviewResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsDeletePendingReviewResponse(resp *http.Response) (res PullsDeletePendingReviewResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsListCommentsForReviewResponse(resp *http.Response) (res PullsListCommentsForReviewResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsListCommentsForReviewOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsDismissReviewResponse(resp *http.Response) (res PullsDismissReviewResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodePullsSubmitReviewResponse(resp *http.Response) (res PullsSubmitReviewResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullRequestReview
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsSubmitReviewApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PullsSubmitReviewApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListReleasesResponse(resp *http.Response) (res ReposListReleasesResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListReleasesOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetReleaseAssetResponse(resp *http.Response) (res ReposGetReleaseAssetResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReleaseAsset
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 302:
		return &Found{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteReleaseAssetResponse(resp *http.Response) (res ReposDeleteReleaseAsset, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteReleaseAsset{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposUpdateReleaseAssetResponse(resp *http.Response) (res ReleaseAsset, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReleaseAsset
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetLatestReleaseResponse(resp *http.Response) (res Release, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Release
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetReleaseByTagResponse(resp *http.Response) (res ReposGetReleaseByTagResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Release
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetReleaseResponse(resp *http.Response) (res ReposGetReleaseResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Release
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeleteReleaseResponse(resp *http.Response) (res ReposDeleteRelease, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposDeleteRelease{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposUpdateReleaseResponse(resp *http.Response) (res ReposUpdateReleaseResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Release
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListReleaseAssetsResponse(resp *http.Response) (res []ReleaseAsset, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []ReleaseAsset
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem ReleaseAsset
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposUploadReleaseAssetResponse(resp *http.Response) (res ReleaseAsset, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReleaseAsset
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeSecretScanningGetAlertResponse(resp *http.Response) (res SecretScanningGetAlertResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SecretScanningAlert
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &SecretScanningGetAlertNotFound{}, nil
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeSecretScanningUpdateAlertResponse(resp *http.Response) (res SecretScanningUpdateAlertResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SecretScanningAlert
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &SecretScanningUpdateAlertNotFound{}, nil
	case 422:
		return &SecretScanningUpdateAlertUnprocessableEntity{}, nil
	case 503:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ServiceUnavailable
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetCodeFrequencyStatsResponse(resp *http.Response) (res ReposGetCodeFrequencyStatsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetCodeFrequencyStatsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Accepted
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &NoContent{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetCommitActivityStatsResponse(resp *http.Response) (res ReposGetCommitActivityStatsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetCommitActivityStatsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Accepted
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &NoContent{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetContributorsStatsResponse(resp *http.Response) (res ReposGetContributorsStatsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetContributorsStatsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Accepted
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &NoContent{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetParticipationStatsResponse(resp *http.Response) (res ReposGetParticipationStatsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ParticipationStats
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetPunchCardStatsResponse(resp *http.Response) (res ReposGetPunchCardStatsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetPunchCardStatsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &NoContent{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposCreateCommitStatusResponse(resp *http.Response) (res Status, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Status
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListWatchersForRepoResponse(resp *http.Response) (res []SimpleUser, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []SimpleUser
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem SimpleUser
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityGetRepoSubscriptionResponse(resp *http.Response) (res ActivityGetRepoSubscriptionResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RepositorySubscription
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &ActivityGetRepoSubscriptionNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivitySetRepoSubscriptionResponse(resp *http.Response) (res RepositorySubscription, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response RepositorySubscription
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityDeleteRepoSubscriptionResponse(resp *http.Response) (res ActivityDeleteRepoSubscription, err error) {
	switch resp.StatusCode {
	case 204:
		return ActivityDeleteRepoSubscription{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListTagsResponse(resp *http.Response) (res []Tag, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Tag
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Tag
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDownloadTarballArchiveResponse(resp *http.Response) (res ReposDownloadTarballArchive, err error) {
	switch resp.StatusCode {
	case 302:
		return ReposDownloadTarballArchive{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListTeamsResponse(resp *http.Response) (res []Team, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Team
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Team
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetAllTopicsResponse(resp *http.Response) (res ReposGetAllTopicsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Topic
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposReplaceAllTopicsResponse(resp *http.Response) (res ReposReplaceAllTopicsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Topic
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetTopPathsResponse(resp *http.Response) (res ReposGetTopPathsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetTopPathsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposGetTopReferrersResponse(resp *http.Response) (res ReposGetTopReferrersResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposGetTopReferrersOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposTransferResponse(resp *http.Response) (res MinimalRepository, err error) {
	switch resp.StatusCode {
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MinimalRepository
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposCheckVulnerabilityAlertsResponse(resp *http.Response) (res ReposCheckVulnerabilityAlertsResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposCheckVulnerabilityAlertsNoContent{}, nil
	case 404:
		return &ReposCheckVulnerabilityAlertsNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposEnableVulnerabilityAlertsResponse(resp *http.Response) (res ReposEnableVulnerabilityAlerts, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposEnableVulnerabilityAlerts{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDisableVulnerabilityAlertsResponse(resp *http.Response) (res ReposDisableVulnerabilityAlerts, err error) {
	switch resp.StatusCode {
	case 204:
		return ReposDisableVulnerabilityAlerts{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDownloadZipballArchiveResponse(resp *http.Response) (res ReposDownloadZipballArchive, err error) {
	switch resp.StatusCode {
	case 302:
		return ReposDownloadZipballArchive{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposCreateUsingTemplateResponse(resp *http.Response) (res Repository, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Repository
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsListEnvironmentSecretsResponse(resp *http.Response) (res ActionsListEnvironmentSecrets, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsListEnvironmentSecrets
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetEnvironmentPublicKeyResponse(resp *http.Response) (res ActionsPublicKey, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsPublicKey
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsGetEnvironmentSecretResponse(resp *http.Response) (res ActionsSecret, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsSecret
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsCreateOrUpdateEnvironmentSecretResponse(resp *http.Response) (res ActionsCreateOrUpdateEnvironmentSecretResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response EmptyObject
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &ActionsCreateOrUpdateEnvironmentSecretNoContent{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActionsDeleteEnvironmentSecretResponse(resp *http.Response) (res ActionsDeleteEnvironmentSecret, err error) {
	switch resp.StatusCode {
	case 204:
		return ActionsDeleteEnvironmentSecret{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminListProvisionedGroupsEnterpriseResponse(resp *http.Response) (res ScimGroupListEnterprise, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimGroupListEnterprise
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseGroupResponse(resp *http.Response) (res ScimEnterpriseGroup, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseGroup
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse(resp *http.Response) (res ScimEnterpriseGroup, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseGroup
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponse(resp *http.Response) (res ScimEnterpriseGroup, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseGroup
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminDeleteScimGroupFromEnterpriseResponse(resp *http.Response) (res EnterpriseAdminDeleteScimGroupFromEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminDeleteScimGroupFromEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminListProvisionedIdentitiesEnterpriseResponse(resp *http.Response) (res ScimUserListEnterprise, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimUserListEnterprise
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseUserResponse(resp *http.Response) (res ScimEnterpriseUser, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseUser
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse(resp *http.Response) (res ScimEnterpriseUser, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseUser
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserResponse(resp *http.Response) (res ScimEnterpriseUser, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseUser
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminDeleteUserFromEnterpriseResponse(resp *http.Response) (res EnterpriseAdminDeleteUserFromEnterprise, err error) {
	switch resp.StatusCode {
	case 204:
		return EnterpriseAdminDeleteUserFromEnterprise{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseUserResponse(resp *http.Response) (res ScimEnterpriseUser, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimEnterpriseUser
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeScimDeleteUserFromOrgResponse(resp *http.Response) (res ScimDeleteUserFromOrgResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ScimDeleteUserFromOrgNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimDeleteUserFromOrgApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		case "application/scim+json":
			return res, fmt.Errorf("application/scim+json decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ScimDeleteUserFromOrgApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		case "application/scim+json":
			return res, fmt.Errorf("application/scim+json decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeSearchTopicsResponse(resp *http.Response) (res SearchTopicsResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response SearchTopicsOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsGetLegacyResponse(resp *http.Response) (res TeamsGetLegacyResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamFull
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsCreateDiscussionLegacyResponse(resp *http.Response) (res TeamDiscussion, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsGetDiscussionLegacyResponse(resp *http.Response) (res TeamDiscussion, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsDeleteDiscussionLegacyResponse(resp *http.Response) (res TeamsDeleteDiscussionLegacy, err error) {
	switch resp.StatusCode {
	case 204:
		return TeamsDeleteDiscussionLegacy{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsUpdateDiscussionLegacyResponse(resp *http.Response) (res TeamDiscussion, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussion
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsCreateDiscussionCommentLegacyResponse(resp *http.Response) (res TeamDiscussionComment, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsGetDiscussionCommentLegacyResponse(resp *http.Response) (res TeamDiscussionComment, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsDeleteDiscussionCommentLegacyResponse(resp *http.Response) (res TeamsDeleteDiscussionCommentLegacy, err error) {
	switch resp.StatusCode {
	case 204:
		return TeamsDeleteDiscussionCommentLegacy{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsUpdateDiscussionCommentLegacyResponse(resp *http.Response) (res TeamDiscussionComment, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamDiscussionComment
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsCreateForTeamDiscussionCommentLegacyResponse(resp *http.Response) (res Reaction, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReactionsCreateForTeamDiscussionLegacyResponse(resp *http.Response) (res Reaction, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Reaction
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListPendingInvitationsLegacyResponse(resp *http.Response) (res []OrganizationInvitation, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []OrganizationInvitation
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem OrganizationInvitation
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsGetMemberLegacyResponse(resp *http.Response) (res TeamsGetMemberLegacyResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsGetMemberLegacyNoContent{}, nil
	case 404:
		return &TeamsGetMemberLegacyNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsAddMemberLegacyResponse(resp *http.Response) (res TeamsAddMemberLegacyResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsAddMemberLegacyNoContent{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &TeamsAddMemberLegacyNotFound{}, nil
	case 422:
		return &TeamsAddMemberLegacyUnprocessableEntity{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsRemoveMemberLegacyResponse(resp *http.Response) (res TeamsRemoveMemberLegacyResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsRemoveMemberLegacyNoContent{}, nil
	case 404:
		return &TeamsRemoveMemberLegacyNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsGetMembershipForUserLegacyResponse(resp *http.Response) (res TeamsGetMembershipForUserLegacyResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamMembership
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsAddOrUpdateMembershipForUserLegacyResponse(resp *http.Response) (res TeamsAddOrUpdateMembershipForUserLegacyResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamMembership
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		return &TeamsAddOrUpdateMembershipForUserLegacyForbidden{}, nil
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		return &TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsRemoveMembershipForUserLegacyResponse(resp *http.Response) (res TeamsRemoveMembershipForUserLegacyResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &TeamsRemoveMembershipForUserLegacyNoContent{}, nil
	case 403:
		return &TeamsRemoveMembershipForUserLegacyForbidden{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListProjectsLegacyResponse(resp *http.Response) (res TeamsListProjectsLegacyResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListProjectsLegacyOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsCheckPermissionsForProjectLegacyResponse(resp *http.Response) (res TeamsCheckPermissionsForProjectLegacyResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamProject
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		return &TeamsCheckPermissionsForProjectLegacyNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListReposLegacyResponse(resp *http.Response) (res TeamsListReposLegacyResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListReposLegacyOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsCheckPermissionsForRepoLegacyResponse(resp *http.Response) (res TeamsCheckPermissionsForRepoLegacyResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamRepository
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 204:
		return &TeamsCheckPermissionsForRepoLegacyNoContent{}, nil
	case 404:
		return &TeamsCheckPermissionsForRepoLegacyNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsRemoveRepoLegacyResponse(resp *http.Response) (res TeamsRemoveRepoLegacy, err error) {
	switch resp.StatusCode {
	case 204:
		return TeamsRemoveRepoLegacy{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListIdpGroupsForLegacyResponse(resp *http.Response) (res TeamsListIdpGroupsForLegacyResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GroupMapping
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListIdpGroupsForLegacyApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListIdpGroupsForLegacyApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListBlockedByAuthenticatedResponse(resp *http.Response) (res UsersListBlockedByAuthenticatedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListBlockedByAuthenticatedOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListBlockedByAuthenticatedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListBlockedByAuthenticatedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListBlockedByAuthenticatedApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersCheckBlockedResponse(resp *http.Response) (res UsersCheckBlockedResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &UsersCheckBlockedNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersCheckBlockedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersCheckBlockedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersCheckBlockedApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersUnblockResponse(resp *http.Response) (res UsersUnblockResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &UsersUnblockNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersUnblockApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersUnblockApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersUnblockApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListEmailsForAuthenticatedResponse(resp *http.Response) (res UsersListEmailsForAuthenticatedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListEmailsForAuthenticatedOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListEmailsForAuthenticatedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListEmailsForAuthenticatedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListEmailsForAuthenticatedApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListFollowersForAuthenticatedUserResponse(resp *http.Response) (res UsersListFollowersForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListFollowersForAuthenticatedUserOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListFollowersForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListFollowedByAuthenticatedResponse(resp *http.Response) (res UsersListFollowedByAuthenticatedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListFollowedByAuthenticatedOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListFollowedByAuthenticatedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListFollowedByAuthenticatedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersCheckPersonIsFollowedByAuthenticatedResponse(resp *http.Response) (res UsersCheckPersonIsFollowedByAuthenticatedResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &UsersCheckPersonIsFollowedByAuthenticatedNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersFollowResponse(resp *http.Response) (res UsersFollowResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &UsersFollowNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersFollowApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersFollowApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersFollowApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersUnfollowResponse(resp *http.Response) (res UsersUnfollowResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &UsersUnfollowNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersUnfollowApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersUnfollowApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersUnfollowApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListGpgKeysForAuthenticatedResponse(resp *http.Response) (res UsersListGpgKeysForAuthenticatedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListGpgKeysForAuthenticatedOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListGpgKeysForAuthenticatedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListGpgKeysForAuthenticatedApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersGetGpgKeyForAuthenticatedResponse(resp *http.Response) (res UsersGetGpgKeyForAuthenticatedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GpgKey
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsListInstallationReposForAuthenticatedUserResponse(resp *http.Response) (res AppsListInstallationReposForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListInstallationReposForAuthenticatedUserOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsAddRepoToInstallationResponse(resp *http.Response) (res AppsAddRepoToInstallationResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &AppsAddRepoToInstallationNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsAddRepoToInstallationApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsAddRepoToInstallationApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsRemoveRepoFromInstallationResponse(resp *http.Response) (res AppsRemoveRepoFromInstallationResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &AppsRemoveRepoFromInstallationNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsRemoveRepoFromInstallationApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsRemoveRepoFromInstallationApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeInteractionsRemoveRestrictionsForAuthenticatedUserResponse(resp *http.Response) (res InteractionsRemoveRestrictionsForAuthenticatedUser, err error) {
	switch resp.StatusCode {
	case 204:
		return InteractionsRemoveRestrictionsForAuthenticatedUser{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListPublicSSHKeysForAuthenticatedResponse(resp *http.Response) (res UsersListPublicSSHKeysForAuthenticatedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListPublicSSHKeysForAuthenticatedOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersGetPublicSSHKeyForAuthenticatedResponse(resp *http.Response) (res UsersGetPublicSSHKeyForAuthenticatedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Key
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersDeletePublicSSHKeyForAuthenticatedResponse(resp *http.Response) (res UsersDeletePublicSSHKeyForAuthenticatedResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &UsersDeletePublicSSHKeyForAuthenticatedNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsListSubscriptionsForAuthenticatedUserResponse(resp *http.Response) (res AppsListSubscriptionsForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListSubscriptionsForAuthenticatedUserOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeAppsListSubscriptionsForAuthenticatedUserStubbedResponse(resp *http.Response) (res AppsListSubscriptionsForAuthenticatedUserStubbedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response AppsListSubscriptionsForAuthenticatedUserStubbedOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsGetMembershipForAuthenticatedUserResponse(resp *http.Response) (res OrgsGetMembershipForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgMembership
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsListForAuthenticatedUserResponse(resp *http.Response) (res MigrationsListForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsListForAuthenticatedUserOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsListForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsListForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsGetStatusForAuthenticatedUserResponse(resp *http.Response) (res MigrationsGetStatusForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Migration
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsGetArchiveForAuthenticatedUserResponse(resp *http.Response) (res MigrationsGetArchiveForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 302:
		return &MigrationsGetArchiveForAuthenticatedUserFound{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsDeleteArchiveForAuthenticatedUserResponse(resp *http.Response) (res MigrationsDeleteArchiveForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &MigrationsDeleteArchiveForAuthenticatedUserNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsUnlockRepoForAuthenticatedUserResponse(resp *http.Response) (res MigrationsUnlockRepoForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &MigrationsUnlockRepoForAuthenticatedUserNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMigrationsListReposForUserResponse(resp *http.Response) (res MigrationsListReposForUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response MigrationsListReposForUserOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response BasicError
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsListForAuthenticatedUserResponse(resp *http.Response) (res OrgsListForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListForAuthenticatedUserOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response OrgsListForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeProjectsCreateForAuthenticatedUserResponse(resp *http.Response) (res ProjectsCreateForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response Project
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ProjectsCreateForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 415:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PreviewHeaderMissing
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 422:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ValidationErrorSimple
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListPublicEmailsForAuthenticatedResponse(resp *http.Response) (res UsersListPublicEmailsForAuthenticatedResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListPublicEmailsForAuthenticatedOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposListInvitationsForAuthenticatedUserResponse(resp *http.Response) (res ReposListInvitationsForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListInvitationsForAuthenticatedUserOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposDeclineInvitationResponse(resp *http.Response) (res ReposDeclineInvitationResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposDeclineInvitationNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposDeclineInvitationApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposDeclineInvitationApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposDeclineInvitationApplicationJSONConflict
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeReposAcceptInvitationResponse(resp *http.Response) (res ReposAcceptInvitationResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ReposAcceptInvitationNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposAcceptInvitationApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposAcceptInvitationApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 409:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ReposAcceptInvitationApplicationJSONConflict
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityCheckRepoIsStarredByAuthenticatedUserResponse(resp *http.Response) (res ActivityCheckRepoIsStarredByAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ActivityCheckRepoIsStarredByAuthenticatedUserNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityStarRepoForAuthenticatedUserResponse(resp *http.Response) (res ActivityStarRepoForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ActivityStarRepoForAuthenticatedUserNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityUnstarRepoForAuthenticatedUserResponse(resp *http.Response) (res ActivityUnstarRepoForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &ActivityUnstarRepoForAuthenticatedUserNoContent{}, nil
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListWatchedReposForAuthenticatedUserResponse(resp *http.Response) (res ActivityListWatchedReposForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListWatchedReposForAuthenticatedUserOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 401:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeTeamsListForAuthenticatedUserResponse(resp *http.Response) (res TeamsListForAuthenticatedUserResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListForAuthenticatedUserOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	case 403:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListForAuthenticatedUserApplicationJSONForbidden
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 404:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response TeamsListForAuthenticatedUserApplicationJSONNotFound
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListResponse(resp *http.Response) (res UsersListResponse, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response UsersListOK
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return &response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	case 304:
		return &NotModified{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListEventsForAuthenticatedUserResponse(resp *http.Response) (res []Event, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Event
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListOrgEventsForAuthenticatedUserResponse(resp *http.Response) (res []Event, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Event
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListPublicEventsForUserResponse(resp *http.Response) (res []Event, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Event
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListFollowersForUserResponse(resp *http.Response) (res []SimpleUser, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []SimpleUser
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem SimpleUser
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListFollowingForUserResponse(resp *http.Response) (res []SimpleUser, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []SimpleUser
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem SimpleUser
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersCheckFollowingForUserResponse(resp *http.Response) (res UsersCheckFollowingForUserResponse, err error) {
	switch resp.StatusCode {
	case 204:
		return &UsersCheckFollowingForUserNoContent{}, nil
	case 404:
		return &UsersCheckFollowingForUserNotFound{}, nil
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListGpgKeysForUserResponse(resp *http.Response) (res []GpgKey, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []GpgKey
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem GpgKey
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeUsersListPublicKeysForUserResponse(resp *http.Response) (res []KeySimple, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []KeySimple
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem KeySimple
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeOrgsListForUserResponse(resp *http.Response) (res []OrganizationSimple, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []OrganizationSimple
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem OrganizationSimple
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListReceivedEventsForUserResponse(resp *http.Response) (res []Event, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Event
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListReceivedPublicEventsForUserResponse(resp *http.Response) (res []Event, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []Event
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem Event
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeBillingGetGithubActionsBillingUserResponse(resp *http.Response) (res ActionsBillingUsage, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response ActionsBillingUsage
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeBillingGetGithubPackagesBillingUserResponse(resp *http.Response) (res PackagesBillingUsage, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response PackagesBillingUsage
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeBillingGetSharedStorageBillingUserResponse(resp *http.Response) (res CombinedBillingUsage, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response CombinedBillingUsage
			if err := response.ReadJSONFrom(resp.Body); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeActivityListReposWatchedByUserResponse(resp *http.Response) (res []MinimalRepository, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response []MinimalRepository
			i := json.NewIterator()
			i.Reset(resp.Body)
			i.ReadArrayCB(func(i *json.Iterator) bool {
				var elem MinimalRepository
				if err := elem.ReadJSON(i); err != nil {
					i.ReportError("ReadArray", err.Error())
					return false
				}
				response = append(response, elem)
				return true
			})
			if err := i.Error; err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}

func decodeMetaGetZenResponse(resp *http.Response) (res string, err error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "text/plain":
			return res, fmt.Errorf("text/plain decoder not implemented")
		default:
			return res, fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
		}
	default:
		return res, fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
	}
}
