// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func NewMetaRootHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.MetaRoot(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMetaRootResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsGetAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.AppsGetAuthenticated(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsGetAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsDeleteInstallationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsDeleteInstallationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsDeleteInstallation(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsDeleteInstallationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsSuspendInstallationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsSuspendInstallationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsSuspendInstallation(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsSuspendInstallationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsUnsuspendInstallationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsUnsuspendInstallationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsUnsuspendInstallation(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsUnsuspendInstallationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOAuthAuthorizationsListGrantsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOAuthAuthorizationsListGrantsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OAuthAuthorizationsListGrants(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOAuthAuthorizationsListGrantsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOAuthAuthorizationsGetGrantHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOAuthAuthorizationsGetGrantParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OAuthAuthorizationsGetGrant(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOAuthAuthorizationsGetGrantResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOAuthAuthorizationsDeleteGrantHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOAuthAuthorizationsDeleteGrantParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OAuthAuthorizationsDeleteGrant(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOAuthAuthorizationsDeleteGrantResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsGetBySlugHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsGetBySlugParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsGetBySlug(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsGetBySlugResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOAuthAuthorizationsListAuthorizationsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOAuthAuthorizationsListAuthorizationsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OAuthAuthorizationsListAuthorizations(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOAuthAuthorizationsListAuthorizationsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOAuthAuthorizationsGetAuthorizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOAuthAuthorizationsGetAuthorizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OAuthAuthorizationsGetAuthorization(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOAuthAuthorizationsGetAuthorizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOAuthAuthorizationsDeleteAuthorizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOAuthAuthorizationsDeleteAuthorizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OAuthAuthorizationsDeleteAuthorization(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOAuthAuthorizationsDeleteAuthorizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCodesOfConductGetAllCodesOfConductHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.CodesOfConductGetAllCodesOfConduct(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCodesOfConductGetAllCodesOfConductResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCodesOfConductGetConductCodeHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCodesOfConductGetConductCodeParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CodesOfConductGetConductCode(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCodesOfConductGetConductCodeResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEmojisGetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.EmojisGet(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEmojisGetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminGetGithubActionsPermissionsEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminGetGithubActionsPermissionsEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminGetGithubActionsPermissionsEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminSetGithubActionsPermissionsEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminSetGithubActionsPermissionsEnterprise(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminGetAllowedActionsEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminGetAllowedActionsEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminGetAllowedActionsEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminGetAllowedActionsEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminSetAllowedActionsEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminSetAllowedActionsEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminSetAllowedActionsEnterpriseRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminSetAllowedActionsEnterprise(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminSetAllowedActionsEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminListSelfHostedRunnersForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminListSelfHostedRunnersForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminListSelfHostedRunnersForEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminListSelfHostedRunnersForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminListRunnerApplicationsForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminListRunnerApplicationsForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminListRunnerApplicationsForEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminListRunnerApplicationsForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminCreateRegistrationTokenForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminCreateRegistrationTokenForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminCreateRegistrationTokenForEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminCreateRegistrationTokenForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminCreateRemoveTokenForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminCreateRemoveTokenForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminCreateRemoveTokenForEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminCreateRemoveTokenForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminGetSelfHostedRunnerForEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminGetSelfHostedRunnerForEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminGetSelfHostedRunnerForEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewBillingGetGithubActionsBillingGheHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeBillingGetGithubActionsBillingGheParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.BillingGetGithubActionsBillingGhe(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeBillingGetGithubActionsBillingGheResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewBillingGetGithubPackagesBillingGheHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeBillingGetGithubPackagesBillingGheParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.BillingGetGithubPackagesBillingGhe(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeBillingGetGithubPackagesBillingGheResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewBillingGetSharedStorageBillingGheHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeBillingGetSharedStorageBillingGheParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.BillingGetSharedStorageBillingGhe(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeBillingGetSharedStorageBillingGheResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityGetFeedsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.ActivityGetFeeds(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityGetFeedsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsListParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsList(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsListStarredHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsListStarredParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsListStarred(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsListStarredResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsDeleteHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsDeleteParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsDelete(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsDeleteResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsListCommentsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsListCommentsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsListComments(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsListCommentsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsCreateCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsCreateCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeGistsCreateCommentRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsCreateComment(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsCreateCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsGetCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsGetCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsGetComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsGetCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsDeleteCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsDeleteCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsDeleteComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsDeleteCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsUpdateCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsUpdateCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeGistsUpdateCommentRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsUpdateComment(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsUpdateCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsListCommitsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsListCommitsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsListCommits(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsListCommitsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsCheckIsStarredHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsCheckIsStarredParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsCheckIsStarred(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsCheckIsStarredResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsStarHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsStarParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsStar(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsStarResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGistsUnstarHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGistsUnstarParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GistsUnstar(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGistsUnstarResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGitignoreGetAllTemplatesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.GitignoreGetAllTemplates(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGitignoreGetAllTemplatesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGitignoreGetTemplateHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGitignoreGetTemplateParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GitignoreGetTemplate(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGitignoreGetTemplateResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsListReposAccessibleToInstallationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsListReposAccessibleToInstallationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsListReposAccessibleToInstallation(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsListReposAccessibleToInstallationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsRevokeInstallationAccessTokenHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.AppsRevokeInstallationAccessToken(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsRevokeInstallationAccessTokenResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewLicensesGetAllCommonlyUsedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeLicensesGetAllCommonlyUsedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.LicensesGetAllCommonlyUsed(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeLicensesGetAllCommonlyUsedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewLicensesGetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeLicensesGetParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.LicensesGet(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeLicensesGetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMarkdownRenderHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeMarkdownRenderRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MarkdownRender(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMarkdownRenderResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsGetSubscriptionPlanForAccountHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsGetSubscriptionPlanForAccountParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsGetSubscriptionPlanForAccount(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsGetSubscriptionPlanForAccountResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsListPlansHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsListPlansParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsListPlans(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsListPlansResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsGetSubscriptionPlanForAccountStubbedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsGetSubscriptionPlanForAccountStubbedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsGetSubscriptionPlanForAccountStubbed(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsGetSubscriptionPlanForAccountStubbedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsListPlansStubbedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsListPlansStubbedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsListPlansStubbed(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsListPlansStubbedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMetaGetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.MetaGet(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMetaGetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityMarkNotificationsAsReadHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeActivityMarkNotificationsAsReadRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityMarkNotificationsAsRead(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityMarkNotificationsAsReadResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityGetThreadHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityGetThreadParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityGetThread(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityGetThreadResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityMarkThreadAsReadHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityMarkThreadAsReadParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityMarkThreadAsRead(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityMarkThreadAsReadResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityGetThreadSubscriptionForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityGetThreadSubscriptionForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityGetThreadSubscriptionForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityGetThreadSubscriptionForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivitySetThreadSubscriptionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivitySetThreadSubscriptionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActivitySetThreadSubscriptionRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivitySetThreadSubscription(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivitySetThreadSubscriptionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityDeleteThreadSubscriptionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityDeleteThreadSubscriptionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityDeleteThreadSubscription(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityDeleteThreadSubscriptionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMetaGetOctocatHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMetaGetOctocatParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MetaGetOctocat(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMetaGetOctocatResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsListParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsList(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsGetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsGetParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsGet(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsGetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetGithubActionsPermissionsOrganizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetGithubActionsPermissionsOrganizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetGithubActionsPermissionsOrganization(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetGithubActionsPermissionsOrganizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsSetGithubActionsPermissionsOrganizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsSetGithubActionsPermissionsOrganizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsSetGithubActionsPermissionsOrganizationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsSetGithubActionsPermissionsOrganization(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsSetGithubActionsPermissionsOrganizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListSelectedRepositoriesEnabledGithubActionsOrganizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsEnableSelectedRepositoryGithubActionsOrganizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsEnableSelectedRepositoryGithubActionsOrganizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsEnableSelectedRepositoryGithubActionsOrganization(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsEnableSelectedRepositoryGithubActionsOrganizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDisableSelectedRepositoryGithubActionsOrganizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDisableSelectedRepositoryGithubActionsOrganizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDisableSelectedRepositoryGithubActionsOrganization(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDisableSelectedRepositoryGithubActionsOrganizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetAllowedActionsOrganizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetAllowedActionsOrganizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetAllowedActionsOrganization(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetAllowedActionsOrganizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsSetAllowedActionsOrganizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsSetAllowedActionsOrganizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsSetAllowedActionsOrganizationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsSetAllowedActionsOrganization(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsSetAllowedActionsOrganizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListSelfHostedRunnerGroupsForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListSelfHostedRunnerGroupsForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListSelfHostedRunnerGroupsForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListSelfHostedRunnerGroupsForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsCreateSelfHostedRunnerGroupForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsCreateSelfHostedRunnerGroupForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsCreateSelfHostedRunnerGroupForOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsCreateSelfHostedRunnerGroupForOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsCreateSelfHostedRunnerGroupForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetSelfHostedRunnerGroupForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetSelfHostedRunnerGroupForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetSelfHostedRunnerGroupForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetSelfHostedRunnerGroupForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDeleteSelfHostedRunnerGroupFromOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDeleteSelfHostedRunnerGroupFromOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDeleteSelfHostedRunnerGroupFromOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDeleteSelfHostedRunnerGroupFromOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsUpdateSelfHostedRunnerGroupForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsUpdateSelfHostedRunnerGroupForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsUpdateSelfHostedRunnerGroupForOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsUpdateSelfHostedRunnerGroupForOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsUpdateSelfHostedRunnerGroupForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListRepoAccessToSelfHostedRunnerGroupInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListRepoAccessToSelfHostedRunnerGroupInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsSetRepoAccessToSelfHostedRunnerGroupInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsAddRepoAccessToSelfHostedRunnerGroupInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListSelfHostedRunnersInGroupForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListSelfHostedRunnersInGroupForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListSelfHostedRunnersInGroupForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListSelfHostedRunnersInGroupForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsSetSelfHostedRunnersInGroupForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsSetSelfHostedRunnersInGroupForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsSetSelfHostedRunnersInGroupForOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsSetSelfHostedRunnersInGroupForOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsSetSelfHostedRunnersInGroupForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsAddSelfHostedRunnerToGroupForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsAddSelfHostedRunnerToGroupForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsAddSelfHostedRunnerToGroupForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsAddSelfHostedRunnerToGroupForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsRemoveSelfHostedRunnerFromGroupForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsRemoveSelfHostedRunnerFromGroupForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsRemoveSelfHostedRunnerFromGroupForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsRemoveSelfHostedRunnerFromGroupForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListSelfHostedRunnersForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListSelfHostedRunnersForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListSelfHostedRunnersForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListSelfHostedRunnersForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListRunnerApplicationsForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListRunnerApplicationsForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListRunnerApplicationsForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListRunnerApplicationsForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsCreateRegistrationTokenForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsCreateRegistrationTokenForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsCreateRegistrationTokenForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsCreateRegistrationTokenForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsCreateRemoveTokenForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsCreateRemoveTokenForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsCreateRemoveTokenForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsCreateRemoveTokenForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetSelfHostedRunnerForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetSelfHostedRunnerForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetSelfHostedRunnerForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetSelfHostedRunnerForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDeleteSelfHostedRunnerFromOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDeleteSelfHostedRunnerFromOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDeleteSelfHostedRunnerFromOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDeleteSelfHostedRunnerFromOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListOrgSecretsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListOrgSecretsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListOrgSecrets(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListOrgSecretsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetOrgPublicKeyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetOrgPublicKeyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetOrgPublicKey(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetOrgPublicKeyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetOrgSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetOrgSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetOrgSecret(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetOrgSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsCreateOrUpdateOrgSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsCreateOrUpdateOrgSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsCreateOrUpdateOrgSecretRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsCreateOrUpdateOrgSecret(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsCreateOrUpdateOrgSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDeleteOrgSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDeleteOrgSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDeleteOrgSecret(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDeleteOrgSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListSelectedReposForOrgSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListSelectedReposForOrgSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListSelectedReposForOrgSecret(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListSelectedReposForOrgSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsSetSelectedReposForOrgSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsSetSelectedReposForOrgSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsSetSelectedReposForOrgSecretRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsSetSelectedReposForOrgSecret(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsSetSelectedReposForOrgSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsAddSelectedRepoToOrgSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsAddSelectedRepoToOrgSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsAddSelectedRepoToOrgSecret(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsAddSelectedRepoToOrgSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsRemoveSelectedRepoFromOrgSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsRemoveSelectedRepoFromOrgSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsRemoveSelectedRepoFromOrgSecret(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsRemoveSelectedRepoFromOrgSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsListBlockedUsersHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsListBlockedUsersParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsListBlockedUsers(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsListBlockedUsersResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsCheckBlockedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsCheckBlockedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsCheckBlockedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsCheckBlockedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsUnblockUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsUnblockUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsUnblockUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsUnblockUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsListSamlSSOAuthorizationsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsListSamlSSOAuthorizationsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsListSamlSSOAuthorizations(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsListSamlSSOAuthorizationsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsRemoveSamlSSOAuthorizationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsRemoveSamlSSOAuthorizationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsRemoveSamlSSOAuthorization(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsRemoveSamlSSOAuthorizationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsListFailedInvitationsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsListFailedInvitationsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsListFailedInvitations(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsListFailedInvitationsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsListWebhooksHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsListWebhooksParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsListWebhooks(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsListWebhooksResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsGetWebhookHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsGetWebhookParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsGetWebhook(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsGetWebhookResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsDeleteWebhookHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsDeleteWebhookParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsDeleteWebhook(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsDeleteWebhookResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsPingWebhookHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsPingWebhookParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsPingWebhook(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsPingWebhookResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewInteractionsRemoveRestrictionsForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeInteractionsRemoveRestrictionsForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.InteractionsRemoveRestrictionsForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeInteractionsRemoveRestrictionsForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsListPendingInvitationsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsListPendingInvitationsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsListPendingInvitations(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsListPendingInvitationsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsListInvitationTeamsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsListInvitationTeamsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsListInvitationTeams(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsListInvitationTeamsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsCheckMembershipForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsCheckMembershipForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsCheckMembershipForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsCheckMembershipForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsRemoveMemberHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsRemoveMemberParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsRemoveMember(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsRemoveMemberResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsGetMembershipForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsGetMembershipForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsGetMembershipForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsGetMembershipForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsRemoveMembershipForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsRemoveMembershipForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsRemoveMembershipForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsRemoveMembershipForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsDownloadArchiveForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsDownloadArchiveForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsDownloadArchiveForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsDownloadArchiveForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsDeleteArchiveForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsDeleteArchiveForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsDeleteArchiveForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsDeleteArchiveForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsUnlockRepoForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsUnlockRepoForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsUnlockRepoForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsUnlockRepoForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsListReposForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsListReposForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsListReposForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsListReposForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsConvertMemberToOutsideCollaboratorHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsConvertMemberToOutsideCollaboratorParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsConvertMemberToOutsideCollaborator(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsConvertMemberToOutsideCollaboratorResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsRemoveOutsideCollaboratorHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsRemoveOutsideCollaboratorParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsRemoveOutsideCollaborator(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsRemoveOutsideCollaboratorResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsCreateForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsCreateForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeProjectsCreateForOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsCreateForOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsCreateForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsListPublicMembersHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsListPublicMembersParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsListPublicMembers(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsListPublicMembersResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsCheckPublicMembershipForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsCheckPublicMembershipForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsCheckPublicMembershipForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsCheckPublicMembershipForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsSetPublicMembershipForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsSetPublicMembershipForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsSetPublicMembershipForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsSetPublicMembershipForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsRemovePublicMembershipForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsRemovePublicMembershipForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsRemovePublicMembershipForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsRemovePublicMembershipForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewBillingGetGithubActionsBillingOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeBillingGetGithubActionsBillingOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.BillingGetGithubActionsBillingOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeBillingGetGithubActionsBillingOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewBillingGetGithubPackagesBillingOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeBillingGetGithubPackagesBillingOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.BillingGetGithubPackagesBillingOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeBillingGetGithubPackagesBillingOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewBillingGetSharedStorageBillingOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeBillingGetSharedStorageBillingOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.BillingGetSharedStorageBillingOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeBillingGetSharedStorageBillingOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListIdpGroupsForOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListIdpGroupsForOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListIdpGroupsForOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListIdpGroupsForOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsList(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsGetByNameHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsGetByNameParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsGetByName(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsGetByNameResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsDeleteInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsDeleteInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsDeleteInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsDeleteInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsUpdateInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsUpdateInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsUpdateInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsUpdateInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsUpdateInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsCreateDiscussionInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsCreateDiscussionInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsCreateDiscussionInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsCreateDiscussionInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsCreateDiscussionInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsGetDiscussionInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsGetDiscussionInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsGetDiscussionInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsGetDiscussionInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsDeleteDiscussionInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsDeleteDiscussionInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsDeleteDiscussionInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsDeleteDiscussionInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsUpdateDiscussionInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsUpdateDiscussionInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsUpdateDiscussionInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsUpdateDiscussionInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsUpdateDiscussionInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsCreateDiscussionCommentInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsCreateDiscussionCommentInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsCreateDiscussionCommentInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsCreateDiscussionCommentInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsCreateDiscussionCommentInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsGetDiscussionCommentInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsGetDiscussionCommentInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsGetDiscussionCommentInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsGetDiscussionCommentInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsDeleteDiscussionCommentInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsDeleteDiscussionCommentInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsDeleteDiscussionCommentInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsDeleteDiscussionCommentInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsUpdateDiscussionCommentInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsUpdateDiscussionCommentInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsUpdateDiscussionCommentInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsUpdateDiscussionCommentInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsUpdateDiscussionCommentInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsCreateForTeamDiscussionCommentInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsCreateForTeamDiscussionCommentInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReactionsCreateForTeamDiscussionCommentInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsCreateForTeamDiscussionCommentInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsCreateForTeamDiscussionCommentInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsDeleteForTeamDiscussionCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsDeleteForTeamDiscussionCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsDeleteForTeamDiscussionComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsDeleteForTeamDiscussionCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsCreateForTeamDiscussionInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsCreateForTeamDiscussionInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReactionsCreateForTeamDiscussionInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsCreateForTeamDiscussionInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsCreateForTeamDiscussionInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsDeleteForTeamDiscussionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsDeleteForTeamDiscussionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsDeleteForTeamDiscussion(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsDeleteForTeamDiscussionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListPendingInvitationsInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListPendingInvitationsInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListPendingInvitationsInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListPendingInvitationsInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsGetMembershipForUserInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsGetMembershipForUserInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsGetMembershipForUserInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsGetMembershipForUserInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsAddOrUpdateMembershipForUserInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsAddOrUpdateMembershipForUserInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsAddOrUpdateMembershipForUserInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsAddOrUpdateMembershipForUserInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsAddOrUpdateMembershipForUserInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsRemoveMembershipForUserInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsRemoveMembershipForUserInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsRemoveMembershipForUserInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsRemoveMembershipForUserInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListProjectsInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListProjectsInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListProjectsInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListProjectsInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsCheckPermissionsForProjectInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsCheckPermissionsForProjectInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsCheckPermissionsForProjectInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsCheckPermissionsForProjectInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsAddOrUpdateProjectPermissionsInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsAddOrUpdateProjectPermissionsInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsAddOrUpdateProjectPermissionsInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsAddOrUpdateProjectPermissionsInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsAddOrUpdateProjectPermissionsInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsRemoveProjectInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsRemoveProjectInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsRemoveProjectInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsRemoveProjectInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListReposInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListReposInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListReposInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListReposInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsCheckPermissionsForRepoInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsCheckPermissionsForRepoInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsCheckPermissionsForRepoInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsCheckPermissionsForRepoInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsAddOrUpdateRepoPermissionsInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsAddOrUpdateRepoPermissionsInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsAddOrUpdateRepoPermissionsInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsAddOrUpdateRepoPermissionsInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsAddOrUpdateRepoPermissionsInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsRemoveRepoInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsRemoveRepoInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsRemoveRepoInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsRemoveRepoInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListIdpGroupsInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListIdpGroupsInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListIdpGroupsInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListIdpGroupsInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsCreateOrUpdateIdpGroupConnectionsInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsCreateOrUpdateIdpGroupConnectionsInOrg(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListChildInOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListChildInOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListChildInOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListChildInOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsGetCardHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsGetCardParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsGetCard(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsGetCardResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsDeleteCardHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsDeleteCardParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsDeleteCard(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsDeleteCardResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsUpdateCardHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsUpdateCardParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeProjectsUpdateCardRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsUpdateCard(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsUpdateCardResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsGetColumnHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsGetColumnParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsGetColumn(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsGetColumnResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsDeleteColumnHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsDeleteColumnParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsDeleteColumn(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsDeleteColumnResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsUpdateColumnHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsUpdateColumnParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeProjectsUpdateColumnRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsUpdateColumn(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsUpdateColumnResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsMoveColumnHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsMoveColumnParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeProjectsMoveColumnRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsMoveColumn(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsMoveColumnResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsGetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsGetParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsGet(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsGetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsDeleteHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsDeleteParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsDelete(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsDeleteResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsUpdateHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsUpdateParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeProjectsUpdateRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsUpdate(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsUpdateResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsListColumnsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsListColumnsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsListColumns(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsListColumnsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsCreateColumnHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsCreateColumnParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeProjectsCreateColumnRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsCreateColumn(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsCreateColumnResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewRateLimitGetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.RateLimitGet(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeRateLimitGetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsDeleteLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsDeleteLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsDeleteLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsDeleteLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGet(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDelete(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListArtifactsForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListArtifactsForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListArtifactsForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListArtifactsForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetArtifactHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetArtifactParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetArtifact(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetArtifactResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDeleteArtifactHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDeleteArtifactParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDeleteArtifact(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDeleteArtifactResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDownloadArtifactHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDownloadArtifactParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDownloadArtifact(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDownloadArtifactResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetJobForWorkflowRunHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetJobForWorkflowRunParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetJobForWorkflowRun(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetJobForWorkflowRunResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDownloadJobLogsForWorkflowRunHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDownloadJobLogsForWorkflowRunParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDownloadJobLogsForWorkflowRun(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDownloadJobLogsForWorkflowRunResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetGithubActionsPermissionsRepositoryHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetGithubActionsPermissionsRepositoryParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetGithubActionsPermissionsRepository(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetGithubActionsPermissionsRepositoryResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsSetGithubActionsPermissionsRepositoryHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsSetGithubActionsPermissionsRepositoryParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsSetGithubActionsPermissionsRepositoryRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsSetGithubActionsPermissionsRepository(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsSetGithubActionsPermissionsRepositoryResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetAllowedActionsRepositoryHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetAllowedActionsRepositoryParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetAllowedActionsRepository(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetAllowedActionsRepositoryResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsSetAllowedActionsRepositoryHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsSetAllowedActionsRepositoryParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsSetAllowedActionsRepositoryRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsSetAllowedActionsRepository(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsSetAllowedActionsRepositoryResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListSelfHostedRunnersForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListSelfHostedRunnersForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListSelfHostedRunnersForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListSelfHostedRunnersForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListRunnerApplicationsForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListRunnerApplicationsForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListRunnerApplicationsForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListRunnerApplicationsForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsCreateRegistrationTokenForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsCreateRegistrationTokenForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsCreateRegistrationTokenForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsCreateRegistrationTokenForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsCreateRemoveTokenForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsCreateRemoveTokenForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsCreateRemoveTokenForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsCreateRemoveTokenForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetSelfHostedRunnerForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetSelfHostedRunnerForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetSelfHostedRunnerForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetSelfHostedRunnerForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDeleteSelfHostedRunnerFromRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDeleteSelfHostedRunnerFromRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDeleteSelfHostedRunnerFromRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDeleteSelfHostedRunnerFromRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetWorkflowRunHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetWorkflowRunParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetWorkflowRun(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetWorkflowRunResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDeleteWorkflowRunHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDeleteWorkflowRunParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDeleteWorkflowRun(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDeleteWorkflowRunResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetReviewsForRunHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetReviewsForRunParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetReviewsForRun(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetReviewsForRunResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsApproveWorkflowRunHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsApproveWorkflowRunParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsApproveWorkflowRun(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsApproveWorkflowRunResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListWorkflowRunArtifactsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListWorkflowRunArtifactsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListWorkflowRunArtifacts(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListWorkflowRunArtifactsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsCancelWorkflowRunHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsCancelWorkflowRunParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsCancelWorkflowRun(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsCancelWorkflowRunResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDownloadWorkflowRunLogsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDownloadWorkflowRunLogsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDownloadWorkflowRunLogs(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDownloadWorkflowRunLogsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDeleteWorkflowRunLogsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDeleteWorkflowRunLogsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDeleteWorkflowRunLogs(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDeleteWorkflowRunLogsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsReRunWorkflowHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsReRunWorkflowParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsReRunWorkflow(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsReRunWorkflowResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsRetryWorkflowHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsRetryWorkflowParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsRetryWorkflow(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsRetryWorkflowResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetWorkflowRunUsageHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetWorkflowRunUsageParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetWorkflowRunUsage(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetWorkflowRunUsageResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListRepoSecretsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListRepoSecretsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListRepoSecrets(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListRepoSecretsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetRepoPublicKeyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetRepoPublicKeyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetRepoPublicKey(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetRepoPublicKeyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetRepoSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetRepoSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetRepoSecret(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetRepoSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsCreateOrUpdateRepoSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsCreateOrUpdateRepoSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsCreateOrUpdateRepoSecretRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsCreateOrUpdateRepoSecret(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsCreateOrUpdateRepoSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDeleteRepoSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDeleteRepoSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDeleteRepoSecret(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDeleteRepoSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListRepoWorkflowsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListRepoWorkflowsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListRepoWorkflows(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListRepoWorkflowsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesListAssigneesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesListAssigneesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesListAssignees(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesListAssigneesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesCheckUserCanBeAssignedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesCheckUserCanBeAssignedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesCheckUserCanBeAssigned(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesCheckUserCanBeAssignedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListAutolinksHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListAutolinksParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListAutolinks(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListAutolinksResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetAutolinkHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetAutolinkParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetAutolink(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetAutolinkResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteAutolinkHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteAutolinkParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteAutolink(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteAutolinkResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposEnableAutomatedSecurityFixesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposEnableAutomatedSecurityFixesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposEnableAutomatedSecurityFixes(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposEnableAutomatedSecurityFixesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDisableAutomatedSecurityFixesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDisableAutomatedSecurityFixesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDisableAutomatedSecurityFixes(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDisableAutomatedSecurityFixesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListBranchesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListBranchesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListBranches(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListBranchesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetBranchHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetBranchParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetBranch(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetBranchResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetBranchProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetBranchProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetBranchProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetBranchProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposUpdateBranchProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposUpdateBranchProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReposUpdateBranchProtectionRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposUpdateBranchProtection(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposUpdateBranchProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteBranchProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteBranchProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteBranchProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteBranchProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetAdminBranchProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetAdminBranchProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetAdminBranchProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetAdminBranchProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposSetAdminBranchProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposSetAdminBranchProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposSetAdminBranchProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposSetAdminBranchProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteAdminBranchProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteAdminBranchProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteAdminBranchProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteAdminBranchProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetPullRequestReviewProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetPullRequestReviewProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetPullRequestReviewProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetPullRequestReviewProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeletePullRequestReviewProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeletePullRequestReviewProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeletePullRequestReviewProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeletePullRequestReviewProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetCommitSignatureProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetCommitSignatureProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetCommitSignatureProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetCommitSignatureProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposCreateCommitSignatureProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposCreateCommitSignatureProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposCreateCommitSignatureProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposCreateCommitSignatureProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteCommitSignatureProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteCommitSignatureProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteCommitSignatureProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteCommitSignatureProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetStatusChecksProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetStatusChecksProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetStatusChecksProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetStatusChecksProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposRemoveStatusCheckProtectionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposRemoveStatusCheckProtectionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposRemoveStatusCheckProtection(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposRemoveStatusCheckProtectionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetAllStatusCheckContextsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetAllStatusCheckContextsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetAllStatusCheckContexts(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetAllStatusCheckContextsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetAccessRestrictionsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetAccessRestrictionsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetAccessRestrictions(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetAccessRestrictionsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteAccessRestrictionsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteAccessRestrictionsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteAccessRestrictions(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteAccessRestrictionsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetAppsWithAccessToProtectedBranchHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetAppsWithAccessToProtectedBranchParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetAppsWithAccessToProtectedBranch(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetAppsWithAccessToProtectedBranchResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetTeamsWithAccessToProtectedBranchHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetTeamsWithAccessToProtectedBranchParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetTeamsWithAccessToProtectedBranch(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetTeamsWithAccessToProtectedBranchResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetUsersWithAccessToProtectedBranchHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetUsersWithAccessToProtectedBranchParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetUsersWithAccessToProtectedBranch(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetUsersWithAccessToProtectedBranchResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewChecksGetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeChecksGetParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ChecksGet(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeChecksGetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewChecksListAnnotationsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeChecksListAnnotationsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ChecksListAnnotations(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeChecksListAnnotationsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewChecksCreateSuiteHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeChecksCreateSuiteParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeChecksCreateSuiteRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ChecksCreateSuite(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeChecksCreateSuiteResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewChecksSetSuitesPreferencesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeChecksSetSuitesPreferencesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeChecksSetSuitesPreferencesRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ChecksSetSuitesPreferences(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeChecksSetSuitesPreferencesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewChecksGetSuiteHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeChecksGetSuiteParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ChecksGetSuite(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeChecksGetSuiteResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewChecksRerequestSuiteHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeChecksRerequestSuiteParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ChecksRerequestSuite(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeChecksRerequestSuiteResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCodeScanningListAlertInstancesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCodeScanningListAlertInstancesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CodeScanningListAlertInstances(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCodeScanningListAlertInstancesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCodeScanningListRecentAnalysesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCodeScanningListRecentAnalysesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CodeScanningListRecentAnalyses(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCodeScanningListRecentAnalysesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCodeScanningGetAnalysisHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCodeScanningGetAnalysisParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CodeScanningGetAnalysis(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCodeScanningGetAnalysisResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCodeScanningDeleteAnalysisHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCodeScanningDeleteAnalysisParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CodeScanningDeleteAnalysis(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCodeScanningDeleteAnalysisResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCodeScanningUploadSarifHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCodeScanningUploadSarifParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeCodeScanningUploadSarifRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CodeScanningUploadSarif(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCodeScanningUploadSarifResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewCodeScanningGetSarifHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeCodeScanningGetSarifParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.CodeScanningGetSarif(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeCodeScanningGetSarifResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposCheckCollaboratorHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposCheckCollaboratorParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposCheckCollaborator(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposCheckCollaboratorResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposRemoveCollaboratorHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposRemoveCollaboratorParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposRemoveCollaborator(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposRemoveCollaboratorResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetCollaboratorPermissionLevelHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetCollaboratorPermissionLevelParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetCollaboratorPermissionLevel(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetCollaboratorPermissionLevelResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListCommitCommentsForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListCommitCommentsForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListCommitCommentsForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListCommitCommentsForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetCommitCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetCommitCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetCommitComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetCommitCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteCommitCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteCommitCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteCommitComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteCommitCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposUpdateCommitCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposUpdateCommitCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReposUpdateCommitCommentRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposUpdateCommitComment(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposUpdateCommitCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsDeleteForCommitCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsDeleteForCommitCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsDeleteForCommitComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsDeleteForCommitCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListCommitsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListCommitsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListCommits(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListCommitsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListCommentsForCommitHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListCommentsForCommitParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListCommentsForCommit(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListCommentsForCommitResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewChecksListSuitesForRefHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeChecksListSuitesForRefParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ChecksListSuitesForRef(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeChecksListSuitesForRefResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetCombinedStatusForRefHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetCombinedStatusForRefParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetCombinedStatusForRef(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetCombinedStatusForRefResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListCommitStatusesForRefHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListCommitStatusesForRefParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListCommitStatusesForRef(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListCommitStatusesForRefResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetCommunityProfileMetricsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetCommunityProfileMetricsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetCommunityProfileMetrics(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetCommunityProfileMetricsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposCompareCommitsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposCompareCommitsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposCompareCommits(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposCompareCommitsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListContributorsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListContributorsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListContributors(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListContributorsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteDeploymentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteDeploymentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteDeployment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteDeploymentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListDeploymentStatusesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListDeploymentStatusesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListDeploymentStatuses(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListDeploymentStatusesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetDeploymentStatusHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetDeploymentStatusParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetDeploymentStatus(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetDeploymentStatusResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteAnEnvironmentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteAnEnvironmentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteAnEnvironment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteAnEnvironmentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGitGetCommitHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGitGetCommitParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GitGetCommit(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGitGetCommitResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGitListMatchingRefsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGitListMatchingRefsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GitListMatchingRefs(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGitListMatchingRefsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGitGetRefHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGitGetRefParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GitGetRef(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGitGetRefResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewGitGetTagHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeGitGetTagParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.GitGetTag(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeGitGetTagResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteWebhookHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteWebhookParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteWebhook(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteWebhookResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposPingWebhookHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposPingWebhookParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposPingWebhook(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposPingWebhookResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposTestPushWebhookHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposTestPushWebhookParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposTestPushWebhook(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposTestPushWebhookResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsGetImportStatusHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsGetImportStatusParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsGetImportStatus(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsGetImportStatusResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsCancelImportHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsCancelImportParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsCancelImport(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsCancelImportResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsUpdateImportHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsUpdateImportParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeMigrationsUpdateImportRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsUpdateImport(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsUpdateImportResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsGetCommitAuthorsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsGetCommitAuthorsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsGetCommitAuthors(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsGetCommitAuthorsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsGetLargeFilesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsGetLargeFilesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsGetLargeFiles(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsGetLargeFilesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewInteractionsSetRestrictionsForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeInteractionsSetRestrictionsForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeInteractionsSetRestrictionsForRepoRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.InteractionsSetRestrictionsForRepo(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeInteractionsSetRestrictionsForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewInteractionsRemoveRestrictionsForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeInteractionsRemoveRestrictionsForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.InteractionsRemoveRestrictionsForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeInteractionsRemoveRestrictionsForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListInvitationsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListInvitationsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListInvitations(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListInvitationsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteInvitationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteInvitationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteInvitation(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteInvitationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposUpdateInvitationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposUpdateInvitationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReposUpdateInvitationRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposUpdateInvitation(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposUpdateInvitationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesGetCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesGetCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesGetComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesGetCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesDeleteCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesDeleteCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesDeleteComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesDeleteCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsDeleteForIssueCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsDeleteForIssueCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsDeleteForIssueComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsDeleteForIssueCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesListCommentsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesListCommentsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesListComments(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesListCommentsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesListLabelsOnIssueHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesListLabelsOnIssueParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesListLabelsOnIssue(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesListLabelsOnIssueResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesRemoveAllLabelsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesRemoveAllLabelsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesRemoveAllLabels(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesRemoveAllLabelsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesRemoveLabelHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesRemoveLabelParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesRemoveLabel(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesRemoveLabelResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesUnlockHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesUnlockParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesUnlock(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesUnlockResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsDeleteForIssueHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsDeleteForIssueParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsDeleteForIssue(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsDeleteForIssueResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListDeployKeysHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListDeployKeysParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListDeployKeys(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListDeployKeysResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetDeployKeyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetDeployKeyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetDeployKey(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetDeployKeyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteDeployKeyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteDeployKeyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteDeployKey(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteDeployKeyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesListLabelsForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesListLabelsForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesListLabelsForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesListLabelsForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesGetLabelHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesGetLabelParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesGetLabel(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesGetLabelResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesDeleteLabelHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesDeleteLabelParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesDeleteLabel(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesDeleteLabelResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesUpdateLabelHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesUpdateLabelParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeIssuesUpdateLabelRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesUpdateLabel(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesUpdateLabelResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListLanguagesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListLanguagesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListLanguages(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListLanguagesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposEnableLfsForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposEnableLfsForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposEnableLfsForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposEnableLfsForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDisableLfsForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDisableLfsForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDisableLfsForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDisableLfsForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewLicensesGetForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeLicensesGetForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.LicensesGetForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeLicensesGetForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposMergeUpstreamHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposMergeUpstreamParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReposMergeUpstreamRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposMergeUpstream(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposMergeUpstreamResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesGetMilestoneHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesGetMilestoneParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesGetMilestone(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesGetMilestoneResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesDeleteMilestoneHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesDeleteMilestoneParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesDeleteMilestone(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesDeleteMilestoneResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesUpdateMilestoneHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesUpdateMilestoneParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeIssuesUpdateMilestoneRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesUpdateMilestone(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesUpdateMilestoneResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewIssuesListLabelsForMilestoneHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeIssuesListLabelsForMilestoneParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.IssuesListLabelsForMilestone(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeIssuesListLabelsForMilestoneResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityListRepoNotificationsForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityListRepoNotificationsForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityListRepoNotificationsForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityListRepoNotificationsForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityMarkRepoNotificationsAsReadHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityMarkRepoNotificationsAsReadParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActivityMarkRepoNotificationsAsReadRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityMarkRepoNotificationsAsRead(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityMarkRepoNotificationsAsReadResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetPagesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetPagesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetPages(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetPagesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListPagesBuildsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListPagesBuildsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListPagesBuilds(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListPagesBuildsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposRequestPagesBuildHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposRequestPagesBuildParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposRequestPagesBuild(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposRequestPagesBuildResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetLatestPagesBuildHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetLatestPagesBuildParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetLatestPagesBuild(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetLatestPagesBuildResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetPagesBuildHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetPagesBuildParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetPagesBuild(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetPagesBuildResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetPagesHealthCheckHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetPagesHealthCheckParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetPagesHealthCheck(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetPagesHealthCheckResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsCreateForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeProjectsCreateForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeProjectsCreateForRepoRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsCreateForRepo(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsCreateForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsGetReviewCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsGetReviewCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsGetReviewComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsGetReviewCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsDeleteReviewCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsDeleteReviewCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsDeleteReviewComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsDeleteReviewCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsUpdateReviewCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsUpdateReviewCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodePullsUpdateReviewCommentRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsUpdateReviewComment(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsUpdateReviewCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsDeleteForPullRequestCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsDeleteForPullRequestCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsDeleteForPullRequestComment(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsDeleteForPullRequestCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsCreateReplyForReviewCommentHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsCreateReplyForReviewCommentParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodePullsCreateReplyForReviewCommentRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsCreateReplyForReviewComment(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsCreateReplyForReviewCommentResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsListCommitsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsListCommitsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsListCommits(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsListCommitsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsCheckIfMergedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsCheckIfMergedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsCheckIfMerged(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsCheckIfMergedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsListRequestedReviewersHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsListRequestedReviewersParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsListRequestedReviewers(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsListRequestedReviewersResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsListReviewsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsListReviewsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsListReviews(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsListReviewsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsCreateReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsCreateReviewParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodePullsCreateReviewRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsCreateReview(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsCreateReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsGetReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsGetReviewParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsGetReview(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsGetReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsUpdateReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsUpdateReviewParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodePullsUpdateReviewRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsUpdateReview(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsUpdateReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsDeletePendingReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsDeletePendingReviewParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsDeletePendingReview(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsDeletePendingReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsListCommentsForReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsListCommentsForReviewParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsListCommentsForReview(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsListCommentsForReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsDismissReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsDismissReviewParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodePullsDismissReviewRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsDismissReview(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsDismissReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewPullsSubmitReviewHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodePullsSubmitReviewParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodePullsSubmitReviewRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.PullsSubmitReview(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodePullsSubmitReviewResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListReleasesHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListReleasesParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListReleases(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListReleasesResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetReleaseAssetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetReleaseAssetParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetReleaseAsset(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetReleaseAssetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteReleaseAssetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteReleaseAssetParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteReleaseAsset(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteReleaseAssetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposUpdateReleaseAssetHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposUpdateReleaseAssetParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReposUpdateReleaseAssetRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposUpdateReleaseAsset(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposUpdateReleaseAssetResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetLatestReleaseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetLatestReleaseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetLatestRelease(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetLatestReleaseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetReleaseByTagHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetReleaseByTagParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetReleaseByTag(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetReleaseByTagResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetReleaseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetReleaseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetRelease(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetReleaseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeleteReleaseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeleteReleaseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeleteRelease(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeleteReleaseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposUpdateReleaseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposUpdateReleaseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReposUpdateReleaseRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposUpdateRelease(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposUpdateReleaseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListReleaseAssetsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListReleaseAssetsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListReleaseAssets(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListReleaseAssetsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewSecretScanningGetAlertHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeSecretScanningGetAlertParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.SecretScanningGetAlert(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeSecretScanningGetAlertResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewSecretScanningUpdateAlertHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeSecretScanningUpdateAlertParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeSecretScanningUpdateAlertRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.SecretScanningUpdateAlert(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeSecretScanningUpdateAlertResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetCodeFrequencyStatsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetCodeFrequencyStatsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetCodeFrequencyStats(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetCodeFrequencyStatsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetCommitActivityStatsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetCommitActivityStatsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetCommitActivityStats(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetCommitActivityStatsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetContributorsStatsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetContributorsStatsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetContributorsStats(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetContributorsStatsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetParticipationStatsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetParticipationStatsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetParticipationStats(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetParticipationStatsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetPunchCardStatsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetPunchCardStatsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetPunchCardStats(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetPunchCardStatsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposCreateCommitStatusHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposCreateCommitStatusParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReposCreateCommitStatusRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposCreateCommitStatus(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposCreateCommitStatusResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityListWatchersForRepoHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityListWatchersForRepoParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityListWatchersForRepo(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityListWatchersForRepoResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityGetRepoSubscriptionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityGetRepoSubscriptionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityGetRepoSubscription(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityGetRepoSubscriptionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivitySetRepoSubscriptionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivitySetRepoSubscriptionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActivitySetRepoSubscriptionRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivitySetRepoSubscription(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivitySetRepoSubscriptionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityDeleteRepoSubscriptionHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityDeleteRepoSubscriptionParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityDeleteRepoSubscription(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityDeleteRepoSubscriptionResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListTagsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListTagsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListTags(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListTagsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDownloadTarballArchiveHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDownloadTarballArchiveParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDownloadTarballArchive(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDownloadTarballArchiveResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListTeamsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListTeamsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListTeams(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListTeamsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetAllTopicsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetAllTopicsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetAllTopics(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetAllTopicsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposReplaceAllTopicsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposReplaceAllTopicsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReposReplaceAllTopicsRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposReplaceAllTopics(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposReplaceAllTopicsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetTopPathsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetTopPathsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetTopPaths(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetTopPathsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposGetTopReferrersHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposGetTopReferrersParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposGetTopReferrers(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposGetTopReferrersResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposTransferHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposTransferParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReposTransferRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposTransfer(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposTransferResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposCheckVulnerabilityAlertsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposCheckVulnerabilityAlertsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposCheckVulnerabilityAlerts(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposCheckVulnerabilityAlertsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposEnableVulnerabilityAlertsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposEnableVulnerabilityAlertsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposEnableVulnerabilityAlerts(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposEnableVulnerabilityAlertsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDisableVulnerabilityAlertsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDisableVulnerabilityAlertsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDisableVulnerabilityAlerts(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDisableVulnerabilityAlertsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDownloadZipballArchiveHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDownloadZipballArchiveParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDownloadZipballArchive(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDownloadZipballArchiveResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposCreateUsingTemplateHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposCreateUsingTemplateParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReposCreateUsingTemplateRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposCreateUsingTemplate(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposCreateUsingTemplateResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsListEnvironmentSecretsHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsListEnvironmentSecretsParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsListEnvironmentSecrets(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsListEnvironmentSecretsResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetEnvironmentPublicKeyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetEnvironmentPublicKeyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetEnvironmentPublicKey(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetEnvironmentPublicKeyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsGetEnvironmentSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsGetEnvironmentSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsGetEnvironmentSecret(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsGetEnvironmentSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsCreateOrUpdateEnvironmentSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsCreateOrUpdateEnvironmentSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeActionsCreateOrUpdateEnvironmentSecretRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsCreateOrUpdateEnvironmentSecret(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsCreateOrUpdateEnvironmentSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActionsDeleteEnvironmentSecretHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActionsDeleteEnvironmentSecretParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActionsDeleteEnvironmentSecret(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActionsDeleteEnvironmentSecretResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminListProvisionedGroupsEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminListProvisionedGroupsEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminListProvisionedGroupsEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminListProvisionedGroupsEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminProvisionAndInviteEnterpriseGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminProvisionAndInviteEnterpriseGroupParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminProvisionAndInviteEnterpriseGroup(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminProvisionAndInviteEnterpriseGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminGetProvisioningInformationForEnterpriseGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminGetProvisioningInformationForEnterpriseGroupParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminGetProvisioningInformationForEnterpriseGroup(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminSetInformationForProvisionedEnterpriseGroupHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminSetInformationForProvisionedEnterpriseGroup(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminDeleteScimGroupFromEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminDeleteScimGroupFromEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminDeleteScimGroupFromEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminDeleteScimGroupFromEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminListProvisionedIdentitiesEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminListProvisionedIdentitiesEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminListProvisionedIdentitiesEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminListProvisionedIdentitiesEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminProvisionAndInviteEnterpriseUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminProvisionAndInviteEnterpriseUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminProvisionAndInviteEnterpriseUserRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminProvisionAndInviteEnterpriseUser(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminProvisionAndInviteEnterpriseUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminGetProvisioningInformationForEnterpriseUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminGetProvisioningInformationForEnterpriseUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminGetProvisioningInformationForEnterpriseUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminSetInformationForProvisionedEnterpriseUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminSetInformationForProvisionedEnterpriseUser(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminDeleteUserFromEnterpriseHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminDeleteUserFromEnterpriseParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminDeleteUserFromEnterprise(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminDeleteUserFromEnterpriseResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewEnterpriseAdminUpdateAttributeForEnterpriseUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeEnterpriseAdminUpdateAttributeForEnterpriseUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeEnterpriseAdminUpdateAttributeForEnterpriseUserRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.EnterpriseAdminUpdateAttributeForEnterpriseUser(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeEnterpriseAdminUpdateAttributeForEnterpriseUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewScimDeleteUserFromOrgHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeScimDeleteUserFromOrgParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ScimDeleteUserFromOrg(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeScimDeleteUserFromOrgResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsGetLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsGetLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsGetLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsGetLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsCreateDiscussionLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsCreateDiscussionLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsCreateDiscussionLegacyRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsCreateDiscussionLegacy(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsCreateDiscussionLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsGetDiscussionLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsGetDiscussionLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsGetDiscussionLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsGetDiscussionLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsDeleteDiscussionLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsDeleteDiscussionLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsDeleteDiscussionLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsDeleteDiscussionLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsUpdateDiscussionLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsUpdateDiscussionLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsUpdateDiscussionLegacyRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsUpdateDiscussionLegacy(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsUpdateDiscussionLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsCreateDiscussionCommentLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsCreateDiscussionCommentLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsCreateDiscussionCommentLegacyRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsCreateDiscussionCommentLegacy(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsCreateDiscussionCommentLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsGetDiscussionCommentLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsGetDiscussionCommentLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsGetDiscussionCommentLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsGetDiscussionCommentLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsDeleteDiscussionCommentLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsDeleteDiscussionCommentLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsDeleteDiscussionCommentLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsDeleteDiscussionCommentLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsUpdateDiscussionCommentLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsUpdateDiscussionCommentLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsUpdateDiscussionCommentLegacyRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsUpdateDiscussionCommentLegacy(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsUpdateDiscussionCommentLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsCreateForTeamDiscussionCommentLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsCreateForTeamDiscussionCommentLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReactionsCreateForTeamDiscussionCommentLegacyRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsCreateForTeamDiscussionCommentLegacy(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsCreateForTeamDiscussionCommentLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReactionsCreateForTeamDiscussionLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReactionsCreateForTeamDiscussionLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeReactionsCreateForTeamDiscussionLegacyRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReactionsCreateForTeamDiscussionLegacy(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReactionsCreateForTeamDiscussionLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListPendingInvitationsLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListPendingInvitationsLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListPendingInvitationsLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListPendingInvitationsLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsGetMemberLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsGetMemberLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsGetMemberLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsGetMemberLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsAddMemberLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsAddMemberLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsAddMemberLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsAddMemberLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsRemoveMemberLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsRemoveMemberLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsRemoveMemberLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsRemoveMemberLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsGetMembershipForUserLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsGetMembershipForUserLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsGetMembershipForUserLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsGetMembershipForUserLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsAddOrUpdateMembershipForUserLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsAddOrUpdateMembershipForUserLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}
		request, err := decodeTeamsAddOrUpdateMembershipForUserLegacyRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsAddOrUpdateMembershipForUserLegacy(r.Context(), request, params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsAddOrUpdateMembershipForUserLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsRemoveMembershipForUserLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsRemoveMembershipForUserLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsRemoveMembershipForUserLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsRemoveMembershipForUserLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListProjectsLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListProjectsLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListProjectsLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListProjectsLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsCheckPermissionsForProjectLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsCheckPermissionsForProjectLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsCheckPermissionsForProjectLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsCheckPermissionsForProjectLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListReposLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListReposLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListReposLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListReposLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsCheckPermissionsForRepoLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsCheckPermissionsForRepoLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsCheckPermissionsForRepoLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsCheckPermissionsForRepoLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsRemoveRepoLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsRemoveRepoLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsRemoveRepoLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsRemoveRepoLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListIdpGroupsForLegacyHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListIdpGroupsForLegacyParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListIdpGroupsForLegacy(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListIdpGroupsForLegacyResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListBlockedByAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.UsersListBlockedByAuthenticated(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListBlockedByAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersCheckBlockedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersCheckBlockedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersCheckBlocked(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersCheckBlockedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersUnblockHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersUnblockParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersUnblock(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersUnblockResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListEmailsForAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListEmailsForAuthenticatedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersListEmailsForAuthenticated(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListEmailsForAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListFollowersForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListFollowersForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersListFollowersForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListFollowersForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListFollowedByAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListFollowedByAuthenticatedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersListFollowedByAuthenticated(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListFollowedByAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersCheckPersonIsFollowedByAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersCheckPersonIsFollowedByAuthenticatedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersCheckPersonIsFollowedByAuthenticated(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersCheckPersonIsFollowedByAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersFollowHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersFollowParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersFollow(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersFollowResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersUnfollowHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersUnfollowParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersUnfollow(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersUnfollowResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListGpgKeysForAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListGpgKeysForAuthenticatedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersListGpgKeysForAuthenticated(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListGpgKeysForAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersGetGpgKeyForAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersGetGpgKeyForAuthenticatedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersGetGpgKeyForAuthenticated(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersGetGpgKeyForAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsListInstallationReposForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsListInstallationReposForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsListInstallationReposForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsListInstallationReposForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsAddRepoToInstallationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsAddRepoToInstallationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsAddRepoToInstallation(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsAddRepoToInstallationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsRemoveRepoFromInstallationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsRemoveRepoFromInstallationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsRemoveRepoFromInstallation(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsRemoveRepoFromInstallationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewInteractionsRemoveRestrictionsForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.InteractionsRemoveRestrictionsForAuthenticatedUser(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeInteractionsRemoveRestrictionsForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListPublicSSHKeysForAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListPublicSSHKeysForAuthenticatedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersListPublicSSHKeysForAuthenticated(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListPublicSSHKeysForAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersGetPublicSSHKeyForAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersGetPublicSSHKeyForAuthenticatedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersGetPublicSSHKeyForAuthenticated(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersGetPublicSSHKeyForAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersDeletePublicSSHKeyForAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersDeletePublicSSHKeyForAuthenticatedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersDeletePublicSSHKeyForAuthenticated(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersDeletePublicSSHKeyForAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsListSubscriptionsForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsListSubscriptionsForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsListSubscriptionsForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsListSubscriptionsForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewAppsListSubscriptionsForAuthenticatedUserStubbedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeAppsListSubscriptionsForAuthenticatedUserStubbedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.AppsListSubscriptionsForAuthenticatedUserStubbed(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeAppsListSubscriptionsForAuthenticatedUserStubbedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsGetMembershipForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsGetMembershipForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsGetMembershipForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsGetMembershipForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsListForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsListForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsListForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsListForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsGetStatusForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsGetStatusForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsGetStatusForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsGetStatusForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsGetArchiveForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsGetArchiveForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsGetArchiveForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsGetArchiveForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsDeleteArchiveForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsDeleteArchiveForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsDeleteArchiveForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsDeleteArchiveForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsUnlockRepoForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsUnlockRepoForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsUnlockRepoForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsUnlockRepoForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMigrationsListReposForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeMigrationsListReposForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.MigrationsListReposForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMigrationsListReposForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsListForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsListForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsListForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsListForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewProjectsCreateForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		request, err := decodeProjectsCreateForAuthenticatedUserRequest(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ProjectsCreateForAuthenticatedUser(r.Context(), request)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeProjectsCreateForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListPublicEmailsForAuthenticatedHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListPublicEmailsForAuthenticatedParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersListPublicEmailsForAuthenticated(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListPublicEmailsForAuthenticatedResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposListInvitationsForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposListInvitationsForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposListInvitationsForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposListInvitationsForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposDeclineInvitationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposDeclineInvitationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposDeclineInvitation(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposDeclineInvitationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewReposAcceptInvitationHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeReposAcceptInvitationParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ReposAcceptInvitation(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeReposAcceptInvitationResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityCheckRepoIsStarredByAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityCheckRepoIsStarredByAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityCheckRepoIsStarredByAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityCheckRepoIsStarredByAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityStarRepoForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityStarRepoForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityStarRepoForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityStarRepoForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityUnstarRepoForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityUnstarRepoForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityUnstarRepoForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityUnstarRepoForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityListWatchedReposForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityListWatchedReposForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityListWatchedReposForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityListWatchedReposForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewTeamsListForAuthenticatedUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeTeamsListForAuthenticatedUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.TeamsListForAuthenticatedUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeTeamsListForAuthenticatedUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersList(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListFollowersForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListFollowersForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersListFollowersForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListFollowersForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListFollowingForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListFollowingForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersListFollowingForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListFollowingForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersCheckFollowingForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersCheckFollowingForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersCheckFollowingForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersCheckFollowingForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListGpgKeysForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListGpgKeysForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersListGpgKeysForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListGpgKeysForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewUsersListPublicKeysForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeUsersListPublicKeysForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.UsersListPublicKeysForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeUsersListPublicKeysForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewOrgsListForUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeOrgsListForUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.OrgsListForUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeOrgsListForUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewBillingGetGithubActionsBillingUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeBillingGetGithubActionsBillingUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.BillingGetGithubActionsBillingUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeBillingGetGithubActionsBillingUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewBillingGetGithubPackagesBillingUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeBillingGetGithubPackagesBillingUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.BillingGetGithubPackagesBillingUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeBillingGetGithubPackagesBillingUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewBillingGetSharedStorageBillingUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeBillingGetSharedStorageBillingUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.BillingGetSharedStorageBillingUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeBillingGetSharedStorageBillingUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewActivityListReposWatchedByUserHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		params, err := decodeActivityListReposWatchedByUserParams(r)
		if err != nil {
			respondError(w, http.StatusBadRequest, err)
			return
		}

		response, err := s.ActivityListReposWatchedByUser(r.Context(), params)
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeActivityListReposWatchedByUserResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func NewMetaGetZenHandler(s Server) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {

		response, err := s.MetaGetZen(r.Context())
		if err != nil {
			respondError(w, http.StatusInternalServerError, err)
			return
		}

		if err := encodeMetaGetZenResponse(response, w); err != nil {
			_ = err
			return
		}
	}
}

func respondError(w http.ResponseWriter, code int, err error) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	data, writeErr := json.Marshal(struct {
		ErrorMessage string `json:"error_message"`
	}{
		ErrorMessage: err.Error(),
	})
	if writeErr == nil {
		w.Write(data)
	}
}
