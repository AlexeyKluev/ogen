// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	RepositoryID  int
}

func decodeActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams(args [3]string, r *http.Request) (params ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Decode path: repository_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	return params, nil
}

type ActionsAddSelectedRepoToOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName   string
	RepositoryID int
}

func decodeActionsAddSelectedRepoToOrgSecretParams(args [3]string, r *http.Request) (params ActionsAddSelectedRepoToOrgSecretParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	// Decode path: repository_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	return params, nil
}

type ActionsAddSelfHostedRunnerToGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

func decodeActionsAddSelfHostedRunnerToGroupForOrgParams(args [3]string, r *http.Request) (params ActionsAddSelfHostedRunnerToGroupForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Decode path: runner_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_id: not specified")
		}
	}
	return params, nil
}

type ActionsApproveWorkflowRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsApproveWorkflowRunParams(args [3]string, r *http.Request) (params ActionsApproveWorkflowRunParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsCancelWorkflowRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsCancelWorkflowRunParams(args [3]string, r *http.Request) (params ActionsCancelWorkflowRunParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsCreateOrUpdateEnvironmentSecretParams struct {
	RepositoryID int
	// The name of the environment.
	EnvironmentName string
	// Secret_name parameter.
	SecretName string
}

func decodeActionsCreateOrUpdateEnvironmentSecretParams(args [3]string, r *http.Request) (params ActionsCreateOrUpdateEnvironmentSecretParams, _ error) {
	// Decode path: repository_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	// Decode path: environment_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: environment_name: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	return params, nil
}

type ActionsCreateOrUpdateOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName string
}

func decodeActionsCreateOrUpdateOrgSecretParams(args [2]string, r *http.Request) (params ActionsCreateOrUpdateOrgSecretParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	return params, nil
}

type ActionsCreateOrUpdateRepoSecretParams struct {
	Owner string
	Repo  string
	// Secret_name parameter.
	SecretName string
}

func decodeActionsCreateOrUpdateRepoSecretParams(args [3]string, r *http.Request) (params ActionsCreateOrUpdateRepoSecretParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	return params, nil
}

type ActionsCreateRegistrationTokenForOrgParams struct {
	Org string
}

func decodeActionsCreateRegistrationTokenForOrgParams(args [1]string, r *http.Request) (params ActionsCreateRegistrationTokenForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ActionsCreateRegistrationTokenForRepoParams struct {
	Owner string
	Repo  string
}

func decodeActionsCreateRegistrationTokenForRepoParams(args [2]string, r *http.Request) (params ActionsCreateRegistrationTokenForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActionsCreateRemoveTokenForOrgParams struct {
	Org string
}

func decodeActionsCreateRemoveTokenForOrgParams(args [1]string, r *http.Request) (params ActionsCreateRemoveTokenForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ActionsCreateRemoveTokenForRepoParams struct {
	Owner string
	Repo  string
}

func decodeActionsCreateRemoveTokenForRepoParams(args [2]string, r *http.Request) (params ActionsCreateRemoveTokenForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActionsCreateSelfHostedRunnerGroupForOrgParams struct {
	Org string
}

func decodeActionsCreateSelfHostedRunnerGroupForOrgParams(args [1]string, r *http.Request) (params ActionsCreateSelfHostedRunnerGroupForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ActionsDeleteArtifactParams struct {
	Owner string
	Repo  string
	// Artifact_id parameter.
	ArtifactID int
}

func decodeActionsDeleteArtifactParams(args [3]string, r *http.Request) (params ActionsDeleteArtifactParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: artifact_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "artifact_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ArtifactID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: artifact_id: not specified")
		}
	}
	return params, nil
}

type ActionsDeleteEnvironmentSecretParams struct {
	RepositoryID int
	// The name of the environment.
	EnvironmentName string
	// Secret_name parameter.
	SecretName string
}

func decodeActionsDeleteEnvironmentSecretParams(args [3]string, r *http.Request) (params ActionsDeleteEnvironmentSecretParams, _ error) {
	// Decode path: repository_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	// Decode path: environment_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: environment_name: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	return params, nil
}

type ActionsDeleteOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName string
}

func decodeActionsDeleteOrgSecretParams(args [2]string, r *http.Request) (params ActionsDeleteOrgSecretParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	return params, nil
}

type ActionsDeleteRepoSecretParams struct {
	Owner string
	Repo  string
	// Secret_name parameter.
	SecretName string
}

func decodeActionsDeleteRepoSecretParams(args [3]string, r *http.Request) (params ActionsDeleteRepoSecretParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	return params, nil
}

type ActionsDeleteSelfHostedRunnerFromOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

func decodeActionsDeleteSelfHostedRunnerFromOrgParams(args [2]string, r *http.Request) (params ActionsDeleteSelfHostedRunnerFromOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_id: not specified")
		}
	}
	return params, nil
}

type ActionsDeleteSelfHostedRunnerFromRepoParams struct {
	Owner string
	Repo  string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

func decodeActionsDeleteSelfHostedRunnerFromRepoParams(args [3]string, r *http.Request) (params ActionsDeleteSelfHostedRunnerFromRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: runner_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_id: not specified")
		}
	}
	return params, nil
}

type ActionsDeleteSelfHostedRunnerGroupFromOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

func decodeActionsDeleteSelfHostedRunnerGroupFromOrgParams(args [2]string, r *http.Request) (params ActionsDeleteSelfHostedRunnerGroupFromOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	return params, nil
}

type ActionsDeleteWorkflowRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsDeleteWorkflowRunParams(args [3]string, r *http.Request) (params ActionsDeleteWorkflowRunParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsDeleteWorkflowRunLogsParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsDeleteWorkflowRunLogsParams(args [3]string, r *http.Request) (params ActionsDeleteWorkflowRunLogsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsDisableSelectedRepositoryGithubActionsOrganizationParams struct {
	Org          string
	RepositoryID int
}

func decodeActionsDisableSelectedRepositoryGithubActionsOrganizationParams(args [2]string, r *http.Request) (params ActionsDisableSelectedRepositoryGithubActionsOrganizationParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: repository_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	return params, nil
}

type ActionsDownloadArtifactParams struct {
	Owner string
	Repo  string
	// Artifact_id parameter.
	ArtifactID    int
	ArchiveFormat string
}

func decodeActionsDownloadArtifactParams(args [4]string, r *http.Request) (params ActionsDownloadArtifactParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: artifact_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "artifact_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ArtifactID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: artifact_id: not specified")
		}
	}
	// Decode path: archive_format.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "archive_format",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ArchiveFormat = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: archive_format: not specified")
		}
	}
	return params, nil
}

type ActionsDownloadJobLogsForWorkflowRunParams struct {
	Owner string
	Repo  string
	// Job_id parameter.
	JobID int
}

func decodeActionsDownloadJobLogsForWorkflowRunParams(args [3]string, r *http.Request) (params ActionsDownloadJobLogsForWorkflowRunParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: job_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "job_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.JobID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: job_id: not specified")
		}
	}
	return params, nil
}

type ActionsDownloadWorkflowRunLogsParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsDownloadWorkflowRunLogsParams(args [3]string, r *http.Request) (params ActionsDownloadWorkflowRunLogsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsEnableSelectedRepositoryGithubActionsOrganizationParams struct {
	Org          string
	RepositoryID int
}

func decodeActionsEnableSelectedRepositoryGithubActionsOrganizationParams(args [2]string, r *http.Request) (params ActionsEnableSelectedRepositoryGithubActionsOrganizationParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: repository_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	return params, nil
}

type ActionsGetAllowedActionsOrganizationParams struct {
	Org string
}

func decodeActionsGetAllowedActionsOrganizationParams(args [1]string, r *http.Request) (params ActionsGetAllowedActionsOrganizationParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ActionsGetAllowedActionsRepositoryParams struct {
	Owner string
	Repo  string
}

func decodeActionsGetAllowedActionsRepositoryParams(args [2]string, r *http.Request) (params ActionsGetAllowedActionsRepositoryParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActionsGetArtifactParams struct {
	Owner string
	Repo  string
	// Artifact_id parameter.
	ArtifactID int
}

func decodeActionsGetArtifactParams(args [3]string, r *http.Request) (params ActionsGetArtifactParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: artifact_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "artifact_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ArtifactID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: artifact_id: not specified")
		}
	}
	return params, nil
}

type ActionsGetEnvironmentPublicKeyParams struct {
	RepositoryID int
	// The name of the environment.
	EnvironmentName string
}

func decodeActionsGetEnvironmentPublicKeyParams(args [2]string, r *http.Request) (params ActionsGetEnvironmentPublicKeyParams, _ error) {
	// Decode path: repository_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	// Decode path: environment_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: environment_name: not specified")
		}
	}
	return params, nil
}

type ActionsGetEnvironmentSecretParams struct {
	RepositoryID int
	// The name of the environment.
	EnvironmentName string
	// Secret_name parameter.
	SecretName string
}

func decodeActionsGetEnvironmentSecretParams(args [3]string, r *http.Request) (params ActionsGetEnvironmentSecretParams, _ error) {
	// Decode path: repository_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	// Decode path: environment_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: environment_name: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	return params, nil
}

type ActionsGetGithubActionsPermissionsOrganizationParams struct {
	Org string
}

func decodeActionsGetGithubActionsPermissionsOrganizationParams(args [1]string, r *http.Request) (params ActionsGetGithubActionsPermissionsOrganizationParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ActionsGetGithubActionsPermissionsRepositoryParams struct {
	Owner string
	Repo  string
}

func decodeActionsGetGithubActionsPermissionsRepositoryParams(args [2]string, r *http.Request) (params ActionsGetGithubActionsPermissionsRepositoryParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActionsGetJobForWorkflowRunParams struct {
	Owner string
	Repo  string
	// Job_id parameter.
	JobID int
}

func decodeActionsGetJobForWorkflowRunParams(args [3]string, r *http.Request) (params ActionsGetJobForWorkflowRunParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: job_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "job_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.JobID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: job_id: not specified")
		}
	}
	return params, nil
}

type ActionsGetOrgPublicKeyParams struct {
	Org string
}

func decodeActionsGetOrgPublicKeyParams(args [1]string, r *http.Request) (params ActionsGetOrgPublicKeyParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ActionsGetOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName string
}

func decodeActionsGetOrgSecretParams(args [2]string, r *http.Request) (params ActionsGetOrgSecretParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	return params, nil
}

type ActionsGetRepoPublicKeyParams struct {
	Owner string
	Repo  string
}

func decodeActionsGetRepoPublicKeyParams(args [2]string, r *http.Request) (params ActionsGetRepoPublicKeyParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActionsGetRepoSecretParams struct {
	Owner string
	Repo  string
	// Secret_name parameter.
	SecretName string
}

func decodeActionsGetRepoSecretParams(args [3]string, r *http.Request) (params ActionsGetRepoSecretParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	return params, nil
}

type ActionsGetReviewsForRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsGetReviewsForRunParams(args [3]string, r *http.Request) (params ActionsGetReviewsForRunParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsGetSelfHostedRunnerForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

func decodeActionsGetSelfHostedRunnerForOrgParams(args [2]string, r *http.Request) (params ActionsGetSelfHostedRunnerForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_id: not specified")
		}
	}
	return params, nil
}

type ActionsGetSelfHostedRunnerForRepoParams struct {
	Owner string
	Repo  string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

func decodeActionsGetSelfHostedRunnerForRepoParams(args [3]string, r *http.Request) (params ActionsGetSelfHostedRunnerForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: runner_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_id: not specified")
		}
	}
	return params, nil
}

type ActionsGetSelfHostedRunnerGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

func decodeActionsGetSelfHostedRunnerGroupForOrgParams(args [2]string, r *http.Request) (params ActionsGetSelfHostedRunnerGroupForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	return params, nil
}

type ActionsGetWorkflowRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsGetWorkflowRunParams(args [3]string, r *http.Request) (params ActionsGetWorkflowRunParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsGetWorkflowRunUsageParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsGetWorkflowRunUsageParams(args [3]string, r *http.Request) (params ActionsGetWorkflowRunUsageParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsListArtifactsForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListArtifactsForRepoParams(args [2]string, r *http.Request) (params ActionsListArtifactsForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListEnvironmentSecretsParams struct {
	RepositoryID int
	// The name of the environment.
	EnvironmentName string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListEnvironmentSecretsParams(args [2]string, r *http.Request) (params ActionsListEnvironmentSecretsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: repository_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	// Decode path: environment_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: environment_name: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListJobsForWorkflowRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
	// Filters jobs by their `completed_at` timestamp. Can be one of:
	// \* `latest`: Returns jobs from the most recent execution of the workflow run.
	// \* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
	Filter OptActionsListJobsForWorkflowRunFilter
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListJobsForWorkflowRunParams(args [3]string, r *http.Request) (params ActionsListJobsForWorkflowRunParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	// Set default value for query: filter.
	{
		val := ActionsListJobsForWorkflowRunFilter("latest")
		params.Filter.SetTo(val)
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterVal ActionsListJobsForWorkflowRunFilter
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterVal = ActionsListJobsForWorkflowRunFilter(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Filter.SetTo(paramsDotFilterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
			if err := func() error {
				if params.Filter.Set {
					if err := func() error {
						if err := params.Filter.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: filter: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListOrgSecretsParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListOrgSecretsParams(args [1]string, r *http.Request) (params ActionsListOrgSecretsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

func decodeActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams(args [2]string, r *http.Request) (params ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListRepoSecretsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListRepoSecretsParams(args [2]string, r *http.Request) (params ActionsListRepoSecretsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListRepoWorkflowsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListRepoWorkflowsParams(args [2]string, r *http.Request) (params ActionsListRepoWorkflowsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListRunnerApplicationsForOrgParams struct {
	Org string
}

func decodeActionsListRunnerApplicationsForOrgParams(args [1]string, r *http.Request) (params ActionsListRunnerApplicationsForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ActionsListRunnerApplicationsForRepoParams struct {
	Owner string
	Repo  string
}

func decodeActionsListRunnerApplicationsForRepoParams(args [2]string, r *http.Request) (params ActionsListRunnerApplicationsForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActionsListSelectedReposForOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

func decodeActionsListSelectedReposForOrgSecretParams(args [2]string, r *http.Request) (params ActionsListSelectedReposForOrgSecretParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams(args [1]string, r *http.Request) (params ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListSelfHostedRunnerGroupsForOrgParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListSelfHostedRunnerGroupsForOrgParams(args [1]string, r *http.Request) (params ActionsListSelfHostedRunnerGroupsForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListSelfHostedRunnersForOrgParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListSelfHostedRunnersForOrgParams(args [1]string, r *http.Request) (params ActionsListSelfHostedRunnersForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListSelfHostedRunnersForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListSelfHostedRunnersForRepoParams(args [2]string, r *http.Request) (params ActionsListSelfHostedRunnersForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListSelfHostedRunnersInGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListSelfHostedRunnersInGroupForOrgParams(args [2]string, r *http.Request) (params ActionsListSelfHostedRunnersInGroupForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListWorkflowRunArtifactsParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActionsListWorkflowRunArtifactsParams(args [3]string, r *http.Request) (params ActionsListWorkflowRunArtifactsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActionsListWorkflowRunsForRepoParams struct {
	Owner string
	Repo  string
	// Returns someone's workflow runs. Use the login for the user who created the `push` associated with
	// the check suite or workflow run.
	Actor OptString
	// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
	Branch OptString
	// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or
	// `issue`. For more information, see "[Events that trigger workflows](https://help.github.
	// com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).".
	Event OptString
	// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a
	// conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of
	// `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see
	// "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run).".
	Status OptActionsListWorkflowRunsForRepoStatus
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page    OptInt
	Created OptDateTime
}

func decodeActionsListWorkflowRunsForRepoParams(args [2]string, r *http.Request) (params ActionsListWorkflowRunsForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: actor.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "actor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotActorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotActorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Actor.SetTo(paramsDotActorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: actor: parse")
			}
		}
	}
	// Decode query: branch.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "branch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBranchVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBranchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Branch.SetTo(paramsDotBranchVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: branch: parse")
			}
		}
	}
	// Decode query: event.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "event",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEventVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEventVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Event.SetTo(paramsDotEventVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: event: parse")
			}
		}
	}
	// Decode query: status.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal ActionsListWorkflowRunsForRepoStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = ActionsListWorkflowRunsForRepoStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: status: parse")
			}
			if err := func() error {
				if params.Status.Set {
					if err := func() error {
						if err := params.Status.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: status: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Decode query: created.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "created",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCreatedVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotCreatedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Created.SetTo(paramsDotCreatedVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: created: parse")
			}
		}
	}
	return params, nil
}

type ActionsReRunWorkflowParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsReRunWorkflowParams(args [3]string, r *http.Request) (params ActionsReRunWorkflowParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	RepositoryID  int
}

func decodeActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams(args [3]string, r *http.Request) (params ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Decode path: repository_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	return params, nil
}

type ActionsRemoveSelectedRepoFromOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName   string
	RepositoryID int
}

func decodeActionsRemoveSelectedRepoFromOrgSecretParams(args [3]string, r *http.Request) (params ActionsRemoveSelectedRepoFromOrgSecretParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	// Decode path: repository_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	return params, nil
}

type ActionsRemoveSelfHostedRunnerFromGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

func decodeActionsRemoveSelfHostedRunnerFromGroupForOrgParams(args [3]string, r *http.Request) (params ActionsRemoveSelfHostedRunnerFromGroupForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Decode path: runner_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_id: not specified")
		}
	}
	return params, nil
}

type ActionsRetryWorkflowParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsRetryWorkflowParams(args [3]string, r *http.Request) (params ActionsRetryWorkflowParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsReviewPendingDeploymentsForRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

func decodeActionsReviewPendingDeploymentsForRunParams(args [3]string, r *http.Request) (params ActionsReviewPendingDeploymentsForRunParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: run_id: not specified")
		}
	}
	return params, nil
}

type ActionsSetAllowedActionsOrganizationParams struct {
	Org string
}

func decodeActionsSetAllowedActionsOrganizationParams(args [1]string, r *http.Request) (params ActionsSetAllowedActionsOrganizationParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ActionsSetAllowedActionsRepositoryParams struct {
	Owner string
	Repo  string
}

func decodeActionsSetAllowedActionsRepositoryParams(args [2]string, r *http.Request) (params ActionsSetAllowedActionsRepositoryParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActionsSetGithubActionsPermissionsOrganizationParams struct {
	Org string
}

func decodeActionsSetGithubActionsPermissionsOrganizationParams(args [1]string, r *http.Request) (params ActionsSetGithubActionsPermissionsOrganizationParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ActionsSetGithubActionsPermissionsRepositoryParams struct {
	Owner string
	Repo  string
}

func decodeActionsSetGithubActionsPermissionsRepositoryParams(args [2]string, r *http.Request) (params ActionsSetGithubActionsPermissionsRepositoryParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

func decodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams(args [2]string, r *http.Request) (params ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	return params, nil
}

type ActionsSetSelectedReposForOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName string
}

func decodeActionsSetSelectedReposForOrgSecretParams(args [2]string, r *http.Request) (params ActionsSetSelectedReposForOrgSecretParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: secret_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secret_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: secret_name: not specified")
		}
	}
	return params, nil
}

type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams struct {
	Org string
}

func decodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams(args [1]string, r *http.Request) (params ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ActionsSetSelfHostedRunnersInGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

func decodeActionsSetSelfHostedRunnersInGroupForOrgParams(args [2]string, r *http.Request) (params ActionsSetSelfHostedRunnersInGroupForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	return params, nil
}

type ActionsUpdateSelfHostedRunnerGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

func decodeActionsUpdateSelfHostedRunnerGroupForOrgParams(args [2]string, r *http.Request) (params ActionsUpdateSelfHostedRunnerGroupForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	return params, nil
}

type ActivityCheckRepoIsStarredByAuthenticatedUserParams struct {
	Owner string
	Repo  string
}

func decodeActivityCheckRepoIsStarredByAuthenticatedUserParams(args [2]string, r *http.Request) (params ActivityCheckRepoIsStarredByAuthenticatedUserParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActivityDeleteRepoSubscriptionParams struct {
	Owner string
	Repo  string
}

func decodeActivityDeleteRepoSubscriptionParams(args [2]string, r *http.Request) (params ActivityDeleteRepoSubscriptionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActivityDeleteThreadSubscriptionParams struct {
	// Thread_id parameter.
	ThreadID int
}

func decodeActivityDeleteThreadSubscriptionParams(args [1]string, r *http.Request) (params ActivityDeleteThreadSubscriptionParams, _ error) {
	// Decode path: thread_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ThreadID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: thread_id: not specified")
		}
	}
	return params, nil
}

type ActivityGetRepoSubscriptionParams struct {
	Owner string
	Repo  string
}

func decodeActivityGetRepoSubscriptionParams(args [2]string, r *http.Request) (params ActivityGetRepoSubscriptionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActivityGetThreadParams struct {
	// Thread_id parameter.
	ThreadID int
}

func decodeActivityGetThreadParams(args [1]string, r *http.Request) (params ActivityGetThreadParams, _ error) {
	// Decode path: thread_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ThreadID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: thread_id: not specified")
		}
	}
	return params, nil
}

type ActivityGetThreadSubscriptionForAuthenticatedUserParams struct {
	// Thread_id parameter.
	ThreadID int
}

func decodeActivityGetThreadSubscriptionForAuthenticatedUserParams(args [1]string, r *http.Request) (params ActivityGetThreadSubscriptionForAuthenticatedUserParams, _ error) {
	// Decode path: thread_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ThreadID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: thread_id: not specified")
		}
	}
	return params, nil
}

type ActivityListEventsForAuthenticatedUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListEventsForAuthenticatedUserParams(args [1]string, r *http.Request) (params ActivityListEventsForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListNotificationsForAuthenticatedUserParams struct {
	// If `true`, show notifications marked as read.
	All OptBool
	// If `true`, only shows notifications in which the user is directly participating or mentioned.
	Participating OptBool
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Only show notifications updated before the given time. This is a timestamp in [ISO
	// 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Before OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListNotificationsForAuthenticatedUserParams(args [0]string, r *http.Request) (params ActivityListNotificationsForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: all.
	{
		val := bool(false)
		params.All.SetTo(val)
	}
	// Decode query: all.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "all",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.All.SetTo(paramsDotAllVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: all: parse")
			}
		}
	}
	// Set default value for query: participating.
	{
		val := bool(false)
		params.Participating.SetTo(val)
	}
	// Decode query: participating.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "participating",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotParticipatingVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotParticipatingVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Participating.SetTo(paramsDotParticipatingVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: participating: parse")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Decode query: before.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "before",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBeforeVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotBeforeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Before.SetTo(paramsDotBeforeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: before: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListOrgEventsForAuthenticatedUserParams struct {
	Username string
	Org      string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListOrgEventsForAuthenticatedUserParams(args [2]string, r *http.Request) (params ActivityListOrgEventsForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Decode path: org.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListPublicEventsParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListPublicEventsParams(args [0]string, r *http.Request) (params ActivityListPublicEventsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListPublicEventsForRepoNetworkParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListPublicEventsForRepoNetworkParams(args [2]string, r *http.Request) (params ActivityListPublicEventsForRepoNetworkParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListPublicEventsForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListPublicEventsForUserParams(args [1]string, r *http.Request) (params ActivityListPublicEventsForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListPublicOrgEventsParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListPublicOrgEventsParams(args [1]string, r *http.Request) (params ActivityListPublicOrgEventsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListReceivedEventsForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListReceivedEventsForUserParams(args [1]string, r *http.Request) (params ActivityListReceivedEventsForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListReceivedPublicEventsForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListReceivedPublicEventsForUserParams(args [1]string, r *http.Request) (params ActivityListReceivedPublicEventsForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListRepoEventsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListRepoEventsParams(args [2]string, r *http.Request) (params ActivityListRepoEventsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListRepoNotificationsForAuthenticatedUserParams struct {
	Owner string
	Repo  string
	// If `true`, show notifications marked as read.
	All OptBool
	// If `true`, only shows notifications in which the user is directly participating or mentioned.
	Participating OptBool
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Only show notifications updated before the given time. This is a timestamp in [ISO
	// 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Before OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListRepoNotificationsForAuthenticatedUserParams(args [2]string, r *http.Request) (params ActivityListRepoNotificationsForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: all.
	{
		val := bool(false)
		params.All.SetTo(val)
	}
	// Decode query: all.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "all",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAllVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.All.SetTo(paramsDotAllVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: all: parse")
			}
		}
	}
	// Set default value for query: participating.
	{
		val := bool(false)
		params.Participating.SetTo(val)
	}
	// Decode query: participating.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "participating",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotParticipatingVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotParticipatingVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Participating.SetTo(paramsDotParticipatingVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: participating: parse")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Decode query: before.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "before",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBeforeVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotBeforeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Before.SetTo(paramsDotBeforeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: before: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListReposStarredByAuthenticatedUserParams struct {
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort OptActivityListReposStarredByAuthenticatedUserSort
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptActivityListReposStarredByAuthenticatedUserDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListReposStarredByAuthenticatedUserParams(args [0]string, r *http.Request) (params ActivityListReposStarredByAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: sort.
	{
		val := ActivityListReposStarredByAuthenticatedUserSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal ActivityListReposStarredByAuthenticatedUserSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = ActivityListReposStarredByAuthenticatedUserSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: direction.
	{
		val := ActivityListReposStarredByAuthenticatedUserDirection("desc")
		params.Direction.SetTo(val)
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal ActivityListReposStarredByAuthenticatedUserDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = ActivityListReposStarredByAuthenticatedUserDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListReposWatchedByUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListReposWatchedByUserParams(args [1]string, r *http.Request) (params ActivityListReposWatchedByUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListWatchedReposForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListWatchedReposForAuthenticatedUserParams(args [0]string, r *http.Request) (params ActivityListWatchedReposForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityListWatchersForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeActivityListWatchersForRepoParams(args [2]string, r *http.Request) (params ActivityListWatchersForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ActivityMarkRepoNotificationsAsReadParams struct {
	Owner string
	Repo  string
}

func decodeActivityMarkRepoNotificationsAsReadParams(args [2]string, r *http.Request) (params ActivityMarkRepoNotificationsAsReadParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActivityMarkThreadAsReadParams struct {
	// Thread_id parameter.
	ThreadID int
}

func decodeActivityMarkThreadAsReadParams(args [1]string, r *http.Request) (params ActivityMarkThreadAsReadParams, _ error) {
	// Decode path: thread_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ThreadID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: thread_id: not specified")
		}
	}
	return params, nil
}

type ActivitySetRepoSubscriptionParams struct {
	Owner string
	Repo  string
}

func decodeActivitySetRepoSubscriptionParams(args [2]string, r *http.Request) (params ActivitySetRepoSubscriptionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActivitySetThreadSubscriptionParams struct {
	// Thread_id parameter.
	ThreadID int
}

func decodeActivitySetThreadSubscriptionParams(args [1]string, r *http.Request) (params ActivitySetThreadSubscriptionParams, _ error) {
	// Decode path: thread_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ThreadID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: thread_id: not specified")
		}
	}
	return params, nil
}

type ActivityStarRepoForAuthenticatedUserParams struct {
	Owner string
	Repo  string
}

func decodeActivityStarRepoForAuthenticatedUserParams(args [2]string, r *http.Request) (params ActivityStarRepoForAuthenticatedUserParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ActivityUnstarRepoForAuthenticatedUserParams struct {
	Owner string
	Repo  string
}

func decodeActivityUnstarRepoForAuthenticatedUserParams(args [2]string, r *http.Request) (params ActivityUnstarRepoForAuthenticatedUserParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type AppsAddRepoToInstallationParams struct {
	// Installation_id parameter.
	InstallationID int
	RepositoryID   int
}

func decodeAppsAddRepoToInstallationParams(args [2]string, r *http.Request) (params AppsAddRepoToInstallationParams, _ error) {
	// Decode path: installation_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "installation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InstallationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: installation_id: not specified")
		}
	}
	// Decode path: repository_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	return params, nil
}

type AppsCheckTokenParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

func decodeAppsCheckTokenParams(args [1]string, r *http.Request) (params AppsCheckTokenParams, _ error) {
	// Decode path: client_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "client_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: client_id: not specified")
		}
	}
	return params, nil
}

type AppsCreateContentAttachmentParams struct {
	// The owner of the repository. Determined from the `repository` `full_name` of the
	// `content_reference` event.
	Owner string
	// The name of the repository. Determined from the `repository` `full_name` of the
	// `content_reference` event.
	Repo string
	// The `id` of the `content_reference` event.
	ContentReferenceID int
}

func decodeAppsCreateContentAttachmentParams(args [3]string, r *http.Request) (params AppsCreateContentAttachmentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: content_reference_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "content_reference_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ContentReferenceID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: content_reference_id: not specified")
		}
	}
	return params, nil
}

type AppsCreateFromManifestParams struct {
	Code string
}

func decodeAppsCreateFromManifestParams(args [1]string, r *http.Request) (params AppsCreateFromManifestParams, _ error) {
	// Decode path: code.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "code",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Code = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: code: not specified")
		}
	}
	return params, nil
}

type AppsCreateInstallationAccessTokenParams struct {
	// Installation_id parameter.
	InstallationID int
}

func decodeAppsCreateInstallationAccessTokenParams(args [1]string, r *http.Request) (params AppsCreateInstallationAccessTokenParams, _ error) {
	// Decode path: installation_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "installation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InstallationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: installation_id: not specified")
		}
	}
	return params, nil
}

type AppsDeleteAuthorizationParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

func decodeAppsDeleteAuthorizationParams(args [1]string, r *http.Request) (params AppsDeleteAuthorizationParams, _ error) {
	// Decode path: client_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "client_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: client_id: not specified")
		}
	}
	return params, nil
}

type AppsDeleteInstallationParams struct {
	// Installation_id parameter.
	InstallationID int
}

func decodeAppsDeleteInstallationParams(args [1]string, r *http.Request) (params AppsDeleteInstallationParams, _ error) {
	// Decode path: installation_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "installation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InstallationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: installation_id: not specified")
		}
	}
	return params, nil
}

type AppsDeleteTokenParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

func decodeAppsDeleteTokenParams(args [1]string, r *http.Request) (params AppsDeleteTokenParams, _ error) {
	// Decode path: client_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "client_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: client_id: not specified")
		}
	}
	return params, nil
}

type AppsGetBySlugParams struct {
	AppSlug string
}

func decodeAppsGetBySlugParams(args [1]string, r *http.Request) (params AppsGetBySlugParams, _ error) {
	// Decode path: app_slug.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "app_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: app_slug: not specified")
		}
	}
	return params, nil
}

type AppsGetSubscriptionPlanForAccountParams struct {
	// Account_id parameter.
	AccountID int
}

func decodeAppsGetSubscriptionPlanForAccountParams(args [1]string, r *http.Request) (params AppsGetSubscriptionPlanForAccountParams, _ error) {
	// Decode path: account_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AccountID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: account_id: not specified")
		}
	}
	return params, nil
}

type AppsGetSubscriptionPlanForAccountStubbedParams struct {
	// Account_id parameter.
	AccountID int
}

func decodeAppsGetSubscriptionPlanForAccountStubbedParams(args [1]string, r *http.Request) (params AppsGetSubscriptionPlanForAccountStubbedParams, _ error) {
	// Decode path: account_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "account_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AccountID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: account_id: not specified")
		}
	}
	return params, nil
}

type AppsGetWebhookDeliveryParams struct {
	DeliveryID int
}

func decodeAppsGetWebhookDeliveryParams(args [1]string, r *http.Request) (params AppsGetWebhookDeliveryParams, _ error) {
	// Decode path: delivery_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "delivery_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeliveryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: delivery_id: not specified")
		}
	}
	return params, nil
}

type AppsListAccountsForPlanParams struct {
	// Plan_id parameter.
	PlanID int
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort OptAppsListAccountsForPlanSort
	// To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without
	// the `sort` parameter.
	Direction OptAppsListAccountsForPlanDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeAppsListAccountsForPlanParams(args [1]string, r *http.Request) (params AppsListAccountsForPlanParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: plan_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "plan_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PlanID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: plan_id: not specified")
		}
	}
	// Set default value for query: sort.
	{
		val := AppsListAccountsForPlanSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal AppsListAccountsForPlanSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = AppsListAccountsForPlanSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal AppsListAccountsForPlanDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = AppsListAccountsForPlanDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type AppsListAccountsForPlanStubbedParams struct {
	// Plan_id parameter.
	PlanID int
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort OptAppsListAccountsForPlanStubbedSort
	// To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without
	// the `sort` parameter.
	Direction OptAppsListAccountsForPlanStubbedDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeAppsListAccountsForPlanStubbedParams(args [1]string, r *http.Request) (params AppsListAccountsForPlanStubbedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: plan_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "plan_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PlanID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: plan_id: not specified")
		}
	}
	// Set default value for query: sort.
	{
		val := AppsListAccountsForPlanStubbedSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal AppsListAccountsForPlanStubbedSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = AppsListAccountsForPlanStubbedSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal AppsListAccountsForPlanStubbedDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = AppsListAccountsForPlanStubbedDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type AppsListInstallationReposForAuthenticatedUserParams struct {
	// Installation_id parameter.
	InstallationID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeAppsListInstallationReposForAuthenticatedUserParams(args [1]string, r *http.Request) (params AppsListInstallationReposForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: installation_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "installation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InstallationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: installation_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type AppsListPlansParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeAppsListPlansParams(args [0]string, r *http.Request) (params AppsListPlansParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type AppsListPlansStubbedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeAppsListPlansStubbedParams(args [0]string, r *http.Request) (params AppsListPlansStubbedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type AppsListReposAccessibleToInstallationParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeAppsListReposAccessibleToInstallationParams(args [0]string, r *http.Request) (params AppsListReposAccessibleToInstallationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type AppsListSubscriptionsForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeAppsListSubscriptionsForAuthenticatedUserParams(args [0]string, r *http.Request) (params AppsListSubscriptionsForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type AppsListSubscriptionsForAuthenticatedUserStubbedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeAppsListSubscriptionsForAuthenticatedUserStubbedParams(args [0]string, r *http.Request) (params AppsListSubscriptionsForAuthenticatedUserStubbedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type AppsListWebhookDeliveriesParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to
	// the `link` header for the next and previous page cursors.
	Cursor OptString
}

func decodeAppsListWebhookDeliveriesParams(args [0]string, r *http.Request) (params AppsListWebhookDeliveriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Decode query: cursor.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cursor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCursorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCursorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Cursor.SetTo(paramsDotCursorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: cursor: parse")
			}
		}
	}
	return params, nil
}

type AppsRedeliverWebhookDeliveryParams struct {
	DeliveryID int
}

func decodeAppsRedeliverWebhookDeliveryParams(args [1]string, r *http.Request) (params AppsRedeliverWebhookDeliveryParams, _ error) {
	// Decode path: delivery_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "delivery_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeliveryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: delivery_id: not specified")
		}
	}
	return params, nil
}

type AppsRemoveRepoFromInstallationParams struct {
	// Installation_id parameter.
	InstallationID int
	RepositoryID   int
}

func decodeAppsRemoveRepoFromInstallationParams(args [2]string, r *http.Request) (params AppsRemoveRepoFromInstallationParams, _ error) {
	// Decode path: installation_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "installation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InstallationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: installation_id: not specified")
		}
	}
	// Decode path: repository_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repository_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repository_id: not specified")
		}
	}
	return params, nil
}

type AppsResetTokenParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

func decodeAppsResetTokenParams(args [1]string, r *http.Request) (params AppsResetTokenParams, _ error) {
	// Decode path: client_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "client_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: client_id: not specified")
		}
	}
	return params, nil
}

type AppsScopeTokenParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

func decodeAppsScopeTokenParams(args [1]string, r *http.Request) (params AppsScopeTokenParams, _ error) {
	// Decode path: client_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "client_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: client_id: not specified")
		}
	}
	return params, nil
}

type AppsSuspendInstallationParams struct {
	// Installation_id parameter.
	InstallationID int
}

func decodeAppsSuspendInstallationParams(args [1]string, r *http.Request) (params AppsSuspendInstallationParams, _ error) {
	// Decode path: installation_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "installation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InstallationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: installation_id: not specified")
		}
	}
	return params, nil
}

type AppsUnsuspendInstallationParams struct {
	// Installation_id parameter.
	InstallationID int
}

func decodeAppsUnsuspendInstallationParams(args [1]string, r *http.Request) (params AppsUnsuspendInstallationParams, _ error) {
	// Decode path: installation_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "installation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InstallationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: installation_id: not specified")
		}
	}
	return params, nil
}

type BillingGetGithubActionsBillingGheParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeBillingGetGithubActionsBillingGheParams(args [1]string, r *http.Request) (params BillingGetGithubActionsBillingGheParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type BillingGetGithubActionsBillingOrgParams struct {
	Org string
}

func decodeBillingGetGithubActionsBillingOrgParams(args [1]string, r *http.Request) (params BillingGetGithubActionsBillingOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type BillingGetGithubActionsBillingUserParams struct {
	Username string
}

func decodeBillingGetGithubActionsBillingUserParams(args [1]string, r *http.Request) (params BillingGetGithubActionsBillingUserParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type BillingGetGithubPackagesBillingGheParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeBillingGetGithubPackagesBillingGheParams(args [1]string, r *http.Request) (params BillingGetGithubPackagesBillingGheParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type BillingGetGithubPackagesBillingOrgParams struct {
	Org string
}

func decodeBillingGetGithubPackagesBillingOrgParams(args [1]string, r *http.Request) (params BillingGetGithubPackagesBillingOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type BillingGetGithubPackagesBillingUserParams struct {
	Username string
}

func decodeBillingGetGithubPackagesBillingUserParams(args [1]string, r *http.Request) (params BillingGetGithubPackagesBillingUserParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type BillingGetSharedStorageBillingGheParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeBillingGetSharedStorageBillingGheParams(args [1]string, r *http.Request) (params BillingGetSharedStorageBillingGheParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type BillingGetSharedStorageBillingOrgParams struct {
	Org string
}

func decodeBillingGetSharedStorageBillingOrgParams(args [1]string, r *http.Request) (params BillingGetSharedStorageBillingOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type BillingGetSharedStorageBillingUserParams struct {
	Username string
}

func decodeBillingGetSharedStorageBillingUserParams(args [1]string, r *http.Request) (params BillingGetSharedStorageBillingUserParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type ChecksCreateSuiteParams struct {
	Owner string
	Repo  string
}

func decodeChecksCreateSuiteParams(args [2]string, r *http.Request) (params ChecksCreateSuiteParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ChecksGetParams struct {
	Owner string
	Repo  string
	// Check_run_id parameter.
	CheckRunID int
}

func decodeChecksGetParams(args [3]string, r *http.Request) (params ChecksGetParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: check_run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "check_run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CheckRunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: check_run_id: not specified")
		}
	}
	return params, nil
}

type ChecksGetSuiteParams struct {
	Owner string
	Repo  string
	// Check_suite_id parameter.
	CheckSuiteID int
}

func decodeChecksGetSuiteParams(args [3]string, r *http.Request) (params ChecksGetSuiteParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: check_suite_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "check_suite_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CheckSuiteID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: check_suite_id: not specified")
		}
	}
	return params, nil
}

type ChecksListAnnotationsParams struct {
	Owner string
	Repo  string
	// Check_run_id parameter.
	CheckRunID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeChecksListAnnotationsParams(args [3]string, r *http.Request) (params ChecksListAnnotationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: check_run_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "check_run_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CheckRunID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: check_run_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ChecksListForRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
	// Returns check runs with the specified `name`.
	CheckName OptString
	// Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or
	// `completed`.
	Status OptChecksListForRefStatus
	// Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most
	// recent check runs) or `all`.
	Filter OptChecksListForRefFilter
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page  OptInt
	AppID OptInt
}

func decodeChecksListForRefParams(args [3]string, r *http.Request) (params ChecksListForRefParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	// Decode query: check_name.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "check_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCheckNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCheckNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CheckName.SetTo(paramsDotCheckNameVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: check_name: parse")
			}
		}
	}
	// Decode query: status.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal ChecksListForRefStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = ChecksListForRefStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: status: parse")
			}
			if err := func() error {
				if params.Status.Set {
					if err := func() error {
						if err := params.Status.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: status: invalid")
			}
		}
	}
	// Set default value for query: filter.
	{
		val := ChecksListForRefFilter("latest")
		params.Filter.SetTo(val)
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterVal ChecksListForRefFilter
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterVal = ChecksListForRefFilter(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Filter.SetTo(paramsDotFilterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
			if err := func() error {
				if params.Filter.Set {
					if err := func() error {
						if err := params.Filter.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: filter: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Decode query: app_id.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "app_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAppIDVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotAppIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AppID.SetTo(paramsDotAppIDVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: app_id: parse")
			}
		}
	}
	return params, nil
}

type ChecksListForSuiteParams struct {
	Owner string
	Repo  string
	// Check_suite_id parameter.
	CheckSuiteID int
	// Returns check runs with the specified `name`.
	CheckName OptString
	// Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or
	// `completed`.
	Status OptChecksListForSuiteStatus
	// Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most
	// recent check runs) or `all`.
	Filter OptChecksListForSuiteFilter
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeChecksListForSuiteParams(args [3]string, r *http.Request) (params ChecksListForSuiteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: check_suite_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "check_suite_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CheckSuiteID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: check_suite_id: not specified")
		}
	}
	// Decode query: check_name.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "check_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCheckNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCheckNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CheckName.SetTo(paramsDotCheckNameVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: check_name: parse")
			}
		}
	}
	// Decode query: status.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal ChecksListForSuiteStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = ChecksListForSuiteStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: status: parse")
			}
			if err := func() error {
				if params.Status.Set {
					if err := func() error {
						if err := params.Status.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: status: invalid")
			}
		}
	}
	// Set default value for query: filter.
	{
		val := ChecksListForSuiteFilter("latest")
		params.Filter.SetTo(val)
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterVal ChecksListForSuiteFilter
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterVal = ChecksListForSuiteFilter(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Filter.SetTo(paramsDotFilterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
			if err := func() error {
				if params.Filter.Set {
					if err := func() error {
						if err := params.Filter.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: filter: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ChecksListSuitesForRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
	// Filters check suites by GitHub App `id`.
	AppID OptInt
	// Returns check runs with the specified `name`.
	CheckName OptString
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeChecksListSuitesForRefParams(args [3]string, r *http.Request) (params ChecksListSuitesForRefParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	// Decode query: app_id.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "app_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAppIDVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotAppIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AppID.SetTo(paramsDotAppIDVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: app_id: parse")
			}
		}
	}
	// Decode query: check_name.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "check_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCheckNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCheckNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CheckName.SetTo(paramsDotCheckNameVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: check_name: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ChecksRerequestSuiteParams struct {
	Owner string
	Repo  string
	// Check_suite_id parameter.
	CheckSuiteID int
}

func decodeChecksRerequestSuiteParams(args [3]string, r *http.Request) (params ChecksRerequestSuiteParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: check_suite_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "check_suite_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CheckSuiteID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: check_suite_id: not specified")
		}
	}
	return params, nil
}

type ChecksSetSuitesPreferencesParams struct {
	Owner string
	Repo  string
}

func decodeChecksSetSuitesPreferencesParams(args [2]string, r *http.Request) (params ChecksSetSuitesPreferencesParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type CodeScanningDeleteAnalysisParams struct {
	Owner string
	Repo  string
	// The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses`
	// operation.
	AnalysisID int
	// Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final
	// analysis in a set without setting this parameter to `true`, you'll get a 400 response with the
	// message: `Analysis is last of its type and deletion may result in the loss of historical alert
	// data. Please specify confirm_delete.`.
	ConfirmDelete OptNilString
}

func decodeCodeScanningDeleteAnalysisParams(args [3]string, r *http.Request) (params CodeScanningDeleteAnalysisParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: analysis_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "analysis_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AnalysisID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: analysis_id: not specified")
		}
	}
	// Decode query: confirm_delete.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "confirm_delete",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotConfirmDeleteVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotConfirmDeleteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ConfirmDelete.SetTo(paramsDotConfirmDeleteVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: confirm_delete: parse")
			}
		}
	}
	return params, nil
}

type CodeScanningGetAlertParams struct {
	Owner string
	Repo  string
	// The number that identifies an alert. You can find this at the end of the URL for a code scanning
	// alert within GitHub, and in the `number` field in the response from the `GET
	// /repos/{owner}/{repo}/code-scanning/alerts` operation.
	AlertNumber AlertNumber
}

func decodeCodeScanningGetAlertParams(args [3]string, r *http.Request) (params CodeScanningGetAlertParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: alert_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "alert_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAlertNumberVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotAlertNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AlertNumber = AlertNumber(paramsDotAlertNumberVal)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: alert_number: not specified")
		}
	}
	return params, nil
}

type CodeScanningGetAnalysisParams struct {
	Owner string
	Repo  string
	// The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses`
	// operation.
	AnalysisID int
}

func decodeCodeScanningGetAnalysisParams(args [3]string, r *http.Request) (params CodeScanningGetAnalysisParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: analysis_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "analysis_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AnalysisID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: analysis_id: not specified")
		}
	}
	return params, nil
}

type CodeScanningGetSarifParams struct {
	Owner string
	Repo  string
	// The SARIF ID obtained after uploading.
	SarifID string
}

func decodeCodeScanningGetSarifParams(args [3]string, r *http.Request) (params CodeScanningGetSarifParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: sarif_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sarif_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SarifID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: sarif_id: not specified")
		}
	}
	return params, nil
}

type CodeScanningListAlertInstancesParams struct {
	Owner string
	Repo  string
	// The number that identifies an alert. You can find this at the end of the URL for a code scanning
	// alert within GitHub, and in the `number` field in the response from the `GET
	// /repos/{owner}/{repo}/code-scanning/alerts` operation.
	AlertNumber AlertNumber
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The Git reference for the results you want to list. The `ref` for a branch can be formatted either
	// as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use
	// `refs/pull/<number>/merge`.
	Ref OptCodeScanningRef
}

func decodeCodeScanningListAlertInstancesParams(args [3]string, r *http.Request) (params CodeScanningListAlertInstancesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: alert_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "alert_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAlertNumberVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotAlertNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AlertNumber = AlertNumber(paramsDotAlertNumberVal)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: alert_number: not specified")
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Decode query: ref.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ref",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRefVal CodeScanningRef
				if err := func() error {
					var paramsDotRefValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotRefValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotRefVal = CodeScanningRef(paramsDotRefValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Ref.SetTo(paramsDotRefVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: ref: parse")
			}
		}
	}
	return params, nil
}

type CodeScanningListAlertsForRepoParams struct {
	Owner string
	Repo  string
	// The name of a code scanning tool. Only results by this tool will be listed. You can specify the
	// tool by using either `tool_name` or `tool_guid`, but not both.
	ToolName OptCodeScanningAnalysisToolName
	// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code
	// scanning tools may not include a GUID in their analysis data. You can specify the tool by using
	// either `tool_guid` or `tool_name`, but not both.
	ToolGUID OptNilCodeScanningAnalysisToolGUID
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The Git reference for the results you want to list. The `ref` for a branch can be formatted either
	// as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use
	// `refs/pull/<number>/merge`.
	Ref OptCodeScanningRef
	// Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
	State OptCodeScanningAlertState
}

func decodeCodeScanningListAlertsForRepoParams(args [2]string, r *http.Request) (params CodeScanningListAlertsForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: tool_name.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tool_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotToolNameVal CodeScanningAnalysisToolName
				if err := func() error {
					var paramsDotToolNameValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotToolNameValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotToolNameVal = CodeScanningAnalysisToolName(paramsDotToolNameValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.ToolName.SetTo(paramsDotToolNameVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: tool_name: parse")
			}
		}
	}
	// Decode query: tool_guid.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tool_guid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotToolGUIDVal CodeScanningAnalysisToolGUID
				if err := func() error {
					var paramsDotToolGUIDValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotToolGUIDValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotToolGUIDVal = CodeScanningAnalysisToolGUID(paramsDotToolGUIDValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.ToolGUID.SetTo(paramsDotToolGUIDVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: tool_guid: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Decode query: ref.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ref",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRefVal CodeScanningRef
				if err := func() error {
					var paramsDotRefValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotRefValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotRefVal = CodeScanningRef(paramsDotRefValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Ref.SetTo(paramsDotRefVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: ref: parse")
			}
		}
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal CodeScanningAlertState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = CodeScanningAlertState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	return params, nil
}

type CodeScanningListRecentAnalysesParams struct {
	Owner string
	Repo  string
	// The name of a code scanning tool. Only results by this tool will be listed. You can specify the
	// tool by using either `tool_name` or `tool_guid`, but not both.
	ToolName OptCodeScanningAnalysisToolName
	// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code
	// scanning tools may not include a GUID in their analysis data. You can specify the tool by using
	// either `tool_guid` or `tool_name`, but not both.
	ToolGUID OptNilCodeScanningAnalysisToolGUID
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The Git reference for the analyses you want to list. The `ref` for a branch can be formatted
	// either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use
	// `refs/pull/<number>/merge`.
	Ref OptCodeScanningRef
	// Filter analyses belonging to the same SARIF upload.
	SarifID OptCodeScanningAnalysisSarifID
}

func decodeCodeScanningListRecentAnalysesParams(args [2]string, r *http.Request) (params CodeScanningListRecentAnalysesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: tool_name.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tool_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotToolNameVal CodeScanningAnalysisToolName
				if err := func() error {
					var paramsDotToolNameValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotToolNameValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotToolNameVal = CodeScanningAnalysisToolName(paramsDotToolNameValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.ToolName.SetTo(paramsDotToolNameVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: tool_name: parse")
			}
		}
	}
	// Decode query: tool_guid.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tool_guid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotToolGUIDVal CodeScanningAnalysisToolGUID
				if err := func() error {
					var paramsDotToolGUIDValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotToolGUIDValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotToolGUIDVal = CodeScanningAnalysisToolGUID(paramsDotToolGUIDValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.ToolGUID.SetTo(paramsDotToolGUIDVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: tool_guid: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Decode query: ref.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ref",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRefVal CodeScanningRef
				if err := func() error {
					var paramsDotRefValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotRefValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotRefVal = CodeScanningRef(paramsDotRefValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Ref.SetTo(paramsDotRefVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: ref: parse")
			}
		}
	}
	// Decode query: sarif_id.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sarif_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSarifIDVal CodeScanningAnalysisSarifID
				if err := func() error {
					var paramsDotSarifIDValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotSarifIDValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotSarifIDVal = CodeScanningAnalysisSarifID(paramsDotSarifIDValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.SarifID.SetTo(paramsDotSarifIDVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sarif_id: parse")
			}
		}
	}
	return params, nil
}

type CodeScanningUpdateAlertParams struct {
	Owner string
	Repo  string
	// The number that identifies an alert. You can find this at the end of the URL for a code scanning
	// alert within GitHub, and in the `number` field in the response from the `GET
	// /repos/{owner}/{repo}/code-scanning/alerts` operation.
	AlertNumber AlertNumber
}

func decodeCodeScanningUpdateAlertParams(args [3]string, r *http.Request) (params CodeScanningUpdateAlertParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: alert_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "alert_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAlertNumberVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotAlertNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AlertNumber = AlertNumber(paramsDotAlertNumberVal)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: alert_number: not specified")
		}
	}
	return params, nil
}

type CodeScanningUploadSarifParams struct {
	Owner string
	Repo  string
}

func decodeCodeScanningUploadSarifParams(args [2]string, r *http.Request) (params CodeScanningUploadSarifParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type CodesOfConductGetConductCodeParams struct {
	Key string
}

func decodeCodesOfConductGetConductCodeParams(args [1]string, r *http.Request) (params CodesOfConductGetConductCodeParams, _ error) {
	// Decode path: key.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "key",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Key = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: key: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of an organization.
	OrgID int
}

func decodeEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(args [3]string, r *http.Request) (params EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Decode path: org_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.OrgID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

func decodeEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseParams(args [3]string, r *http.Request) (params EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Decode path: runner_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminCreateRegistrationTokenForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminCreateRegistrationTokenForEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminCreateRegistrationTokenForEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminCreateRemoveTokenForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminCreateRemoveTokenForEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminCreateRemoveTokenForEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminDeleteScimGroupFromEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Identifier generated by the GitHub SCIM endpoint.
	ScimGroupID string
}

func decodeEnterpriseAdminDeleteScimGroupFromEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminDeleteScimGroupFromEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: scim_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "scim_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScimGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: scim_group_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

func decodeEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

func decodeEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminDeleteUserFromEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Scim_user_id parameter.
	ScimUserID string
}

func decodeEnterpriseAdminDeleteUserFromEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminDeleteUserFromEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: scim_user_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "scim_user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScimUserID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: scim_user_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of an organization.
	OrgID int
}

func decodeEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: org_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.OrgID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of an organization.
	OrgID int
}

func decodeEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: org_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.OrgID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminGetAllowedActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminGetAllowedActionsEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminGetAllowedActionsEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminGetAuditLogParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// A search phrase. For more information, see [Searching the audit log](https://docs.github.
	// com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
	Phrase OptString
	// The event types to include:
	// - `web` - returns web (non-Git) events
	// - `git` - returns Git events
	// - `all` - returns both web and Git events
	// The default is `web`.
	Include OptEnterpriseAdminGetAuditLogInclude
	// A cursor, as given in the [Link header](https://docs.github.
	// com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches
	// for events after this cursor.
	After OptString
	// A cursor, as given in the [Link header](https://docs.github.
	// com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches
	// for events before this cursor.
	Before OptString
	// The order of audit log events. To list newest events first, specify `desc`. To list oldest events
	// first, specify `asc`.
	// The default is `desc`.
	Order OptEnterpriseAdminGetAuditLogOrder
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

func decodeEnterpriseAdminGetAuditLogParams(args [1]string, r *http.Request) (params EnterpriseAdminGetAuditLogParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode query: phrase.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "phrase",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPhraseVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPhraseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Phrase.SetTo(paramsDotPhraseVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: phrase: parse")
			}
		}
	}
	// Decode query: include.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "include",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludeVal EnterpriseAdminGetAuditLogInclude
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIncludeVal = EnterpriseAdminGetAuditLogInclude(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Include.SetTo(paramsDotIncludeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: include: parse")
			}
			if err := func() error {
				if params.Include.Set {
					if err := func() error {
						if err := params.Include.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: include: invalid")
			}
		}
	}
	// Decode query: after.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "after",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAfterVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAfterVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.After.SetTo(paramsDotAfterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: after: parse")
			}
		}
	}
	// Decode query: before.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "before",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBeforeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBeforeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Before.SetTo(paramsDotBeforeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: before: parse")
			}
		}
	}
	// Decode query: order.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal EnterpriseAdminGetAuditLogOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = EnterpriseAdminGetAuditLogOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: order: parse")
			}
			if err := func() error {
				if params.Order.Set {
					if err := func() error {
						if err := params.Order.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: order: invalid")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	return params, nil
}

type EnterpriseAdminGetGithubActionsPermissionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminGetGithubActionsPermissionsEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminGetGithubActionsPermissionsEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Identifier generated by the GitHub SCIM endpoint.
	ScimGroupID string
	// Attributes to exclude.
	ExcludedAttributes OptString
}

func decodeEnterpriseAdminGetProvisioningInformationForEnterpriseGroupParams(args [2]string, r *http.Request) (params EnterpriseAdminGetProvisioningInformationForEnterpriseGroupParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: scim_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "scim_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScimGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: scim_group_id: not specified")
		}
	}
	// Decode query: excludedAttributes.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "excludedAttributes",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotExcludedAttributesVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotExcludedAttributesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ExcludedAttributes.SetTo(paramsDotExcludedAttributesVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: excludedAttributes: parse")
			}
		}
	}
	return params, nil
}

type EnterpriseAdminGetProvisioningInformationForEnterpriseUserParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Scim_user_id parameter.
	ScimUserID string
}

func decodeEnterpriseAdminGetProvisioningInformationForEnterpriseUserParams(args [2]string, r *http.Request) (params EnterpriseAdminGetProvisioningInformationForEnterpriseUserParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: scim_user_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "scim_user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScimUserID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: scim_user_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminGetSelfHostedRunnerForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

func decodeEnterpriseAdminGetSelfHostedRunnerForEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminGetSelfHostedRunnerForEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

func decodeEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type EnterpriseAdminListProvisionedGroupsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Used for pagination: the index of the first result to return.
	StartIndex OptInt
	// Used for pagination: the number of results to return.
	Count OptInt
	// Filter results.
	Filter OptString
	// Attributes to exclude.
	ExcludedAttributes OptString
}

func decodeEnterpriseAdminListProvisionedGroupsEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminListProvisionedGroupsEnterpriseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode query: startIndex.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "startIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartIndexVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotStartIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartIndex.SetTo(paramsDotStartIndexVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: startIndex: parse")
			}
		}
	}
	// Decode query: count.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: count: parse")
			}
		}
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Filter.SetTo(paramsDotFilterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
		}
	}
	// Decode query: excludedAttributes.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "excludedAttributes",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotExcludedAttributesVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotExcludedAttributesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ExcludedAttributes.SetTo(paramsDotExcludedAttributesVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: excludedAttributes: parse")
			}
		}
	}
	return params, nil
}

type EnterpriseAdminListProvisionedIdentitiesEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Used for pagination: the index of the first result to return.
	StartIndex OptInt
	// Used for pagination: the number of results to return.
	Count OptInt
	// Filter results.
	Filter OptString
}

func decodeEnterpriseAdminListProvisionedIdentitiesEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminListProvisionedIdentitiesEnterpriseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode query: startIndex.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "startIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartIndexVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotStartIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartIndex.SetTo(paramsDotStartIndexVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: startIndex: parse")
			}
		}
	}
	// Decode query: count.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: count: parse")
			}
		}
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Filter.SetTo(paramsDotFilterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
		}
	}
	return params, nil
}

type EnterpriseAdminListRunnerApplicationsForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminListRunnerApplicationsForEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminListRunnerApplicationsForEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type EnterpriseAdminListSelfHostedRunnersForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeEnterpriseAdminListSelfHostedRunnersForEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminListSelfHostedRunnersForEnterpriseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseGroupParams(args [1]string, r *http.Request) (params EnterpriseAdminProvisionAndInviteEnterpriseGroupParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseUserParams(args [1]string, r *http.Request) (params EnterpriseAdminProvisionAndInviteEnterpriseUserParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of an organization.
	OrgID int
}

func decodeEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(args [3]string, r *http.Request) (params EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Decode path: org_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.OrgID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

func decodeEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParams(args [3]string, r *http.Request) (params EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	// Decode path: runner_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminSetAllowedActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminSetAllowedActionsEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminSetAllowedActionsEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminSetGithubActionsPermissionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminSetGithubActionsPermissionsEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Identifier generated by the GitHub SCIM endpoint.
	ScimGroupID string
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupParams(args [2]string, r *http.Request) (params EnterpriseAdminSetInformationForProvisionedEnterpriseGroupParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: scim_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "scim_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScimGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: scim_group_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Scim_user_id parameter.
	ScimUserID string
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserParams(args [2]string, r *http.Request) (params EnterpriseAdminSetInformationForProvisionedEnterpriseUserParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: scim_user_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "scim_user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScimUserID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: scim_user_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

func decodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

func decodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseParams(args [1]string, r *http.Request) (params EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

func decodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Identifier generated by the GitHub SCIM endpoint.
	ScimGroupID string
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseGroupParams(args [2]string, r *http.Request) (params EnterpriseAdminUpdateAttributeForEnterpriseGroupParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: scim_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "scim_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScimGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: scim_group_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminUpdateAttributeForEnterpriseUserParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Scim_user_id parameter.
	ScimUserID string
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseUserParams(args [2]string, r *http.Request) (params EnterpriseAdminUpdateAttributeForEnterpriseUserParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: scim_user_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "scim_user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScimUserID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: scim_user_id: not specified")
		}
	}
	return params, nil
}

type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

func decodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseParams(args [2]string, r *http.Request) (params EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseParams, _ error) {
	// Decode path: enterprise.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "enterprise",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Enterprise = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: enterprise: not specified")
		}
	}
	// Decode path: runner_group_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "runner_group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RunnerGroupID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: runner_group_id: not specified")
		}
	}
	return params, nil
}

type GistsCheckIsStarredParams struct {
	// Gist_id parameter.
	GistID string
}

func decodeGistsCheckIsStarredParams(args [1]string, r *http.Request) (params GistsCheckIsStarredParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	return params, nil
}

type GistsCreateCommentParams struct {
	// Gist_id parameter.
	GistID string
}

func decodeGistsCreateCommentParams(args [1]string, r *http.Request) (params GistsCreateCommentParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	return params, nil
}

type GistsDeleteParams struct {
	// Gist_id parameter.
	GistID string
}

func decodeGistsDeleteParams(args [1]string, r *http.Request) (params GistsDeleteParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	return params, nil
}

type GistsDeleteCommentParams struct {
	// Gist_id parameter.
	GistID string
	// Comment_id parameter.
	CommentID int
}

func decodeGistsDeleteCommentParams(args [2]string, r *http.Request) (params GistsDeleteCommentParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type GistsForkParams struct {
	// Gist_id parameter.
	GistID string
}

func decodeGistsForkParams(args [1]string, r *http.Request) (params GistsForkParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	return params, nil
}

type GistsGetParams struct {
	// Gist_id parameter.
	GistID string
}

func decodeGistsGetParams(args [1]string, r *http.Request) (params GistsGetParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	return params, nil
}

type GistsGetCommentParams struct {
	// Gist_id parameter.
	GistID string
	// Comment_id parameter.
	CommentID int
}

func decodeGistsGetCommentParams(args [2]string, r *http.Request) (params GistsGetCommentParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type GistsGetRevisionParams struct {
	// Gist_id parameter.
	GistID string
	Sha    string
}

func decodeGistsGetRevisionParams(args [2]string, r *http.Request) (params GistsGetRevisionParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	// Decode path: sha.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sha",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Sha = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: sha: not specified")
		}
	}
	return params, nil
}

type GistsListParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeGistsListParams(args [0]string, r *http.Request) (params GistsListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type GistsListCommentsParams struct {
	// Gist_id parameter.
	GistID string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeGistsListCommentsParams(args [1]string, r *http.Request) (params GistsListCommentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type GistsListCommitsParams struct {
	// Gist_id parameter.
	GistID string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeGistsListCommitsParams(args [1]string, r *http.Request) (params GistsListCommitsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type GistsListForUserParams struct {
	Username string
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeGistsListForUserParams(args [1]string, r *http.Request) (params GistsListForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type GistsListForksParams struct {
	// Gist_id parameter.
	GistID string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeGistsListForksParams(args [1]string, r *http.Request) (params GistsListForksParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type GistsListPublicParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeGistsListPublicParams(args [0]string, r *http.Request) (params GistsListPublicParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type GistsListStarredParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeGistsListStarredParams(args [0]string, r *http.Request) (params GistsListStarredParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type GistsStarParams struct {
	// Gist_id parameter.
	GistID string
}

func decodeGistsStarParams(args [1]string, r *http.Request) (params GistsStarParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	return params, nil
}

type GistsUnstarParams struct {
	// Gist_id parameter.
	GistID string
}

func decodeGistsUnstarParams(args [1]string, r *http.Request) (params GistsUnstarParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	return params, nil
}

type GistsUpdateCommentParams struct {
	// Gist_id parameter.
	GistID string
	// Comment_id parameter.
	CommentID int
}

func decodeGistsUpdateCommentParams(args [2]string, r *http.Request) (params GistsUpdateCommentParams, _ error) {
	// Decode path: gist_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gist_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GistID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gist_id: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type GitCreateBlobParams struct {
	Owner string
	Repo  string
}

func decodeGitCreateBlobParams(args [2]string, r *http.Request) (params GitCreateBlobParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type GitCreateCommitParams struct {
	Owner string
	Repo  string
}

func decodeGitCreateCommitParams(args [2]string, r *http.Request) (params GitCreateCommitParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type GitCreateRefParams struct {
	Owner string
	Repo  string
}

func decodeGitCreateRefParams(args [2]string, r *http.Request) (params GitCreateRefParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type GitCreateTagParams struct {
	Owner string
	Repo  string
}

func decodeGitCreateTagParams(args [2]string, r *http.Request) (params GitCreateTagParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type GitCreateTreeParams struct {
	Owner string
	Repo  string
}

func decodeGitCreateTreeParams(args [2]string, r *http.Request) (params GitCreateTreeParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type GitDeleteRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
}

func decodeGitDeleteRefParams(args [3]string, r *http.Request) (params GitDeleteRefParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	return params, nil
}

type GitGetBlobParams struct {
	Owner   string
	Repo    string
	FileSha string
}

func decodeGitGetBlobParams(args [3]string, r *http.Request) (params GitGetBlobParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: file_sha.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "file_sha",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FileSha = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: file_sha: not specified")
		}
	}
	return params, nil
}

type GitGetCommitParams struct {
	Owner string
	Repo  string
	// Commit_sha parameter.
	CommitSha string
}

func decodeGitGetCommitParams(args [3]string, r *http.Request) (params GitGetCommitParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: commit_sha.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "commit_sha",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CommitSha = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: commit_sha: not specified")
		}
	}
	return params, nil
}

type GitGetRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
}

func decodeGitGetRefParams(args [3]string, r *http.Request) (params GitGetRefParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	return params, nil
}

type GitGetTagParams struct {
	Owner  string
	Repo   string
	TagSha string
}

func decodeGitGetTagParams(args [3]string, r *http.Request) (params GitGetTagParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: tag_sha.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tag_sha",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TagSha = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: tag_sha: not specified")
		}
	}
	return params, nil
}

type GitGetTreeParams struct {
	Owner   string
	Repo    string
	TreeSha string
	// Setting this parameter to any value returns the objects or subtrees referenced by the tree
	// specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable
	// returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent
	// recursively returning objects or subtrees.
	Recursive OptString
}

func decodeGitGetTreeParams(args [3]string, r *http.Request) (params GitGetTreeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: tree_sha.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tree_sha",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TreeSha = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: tree_sha: not specified")
		}
	}
	// Decode query: recursive.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "recursive",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRecursiveVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRecursiveVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Recursive.SetTo(paramsDotRecursiveVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: recursive: parse")
			}
		}
	}
	return params, nil
}

type GitListMatchingRefsParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeGitListMatchingRefsParams(args [3]string, r *http.Request) (params GitListMatchingRefsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type GitUpdateRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
}

func decodeGitUpdateRefParams(args [3]string, r *http.Request) (params GitUpdateRefParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	return params, nil
}

type GitignoreGetTemplateParams struct {
	Name string
}

func decodeGitignoreGetTemplateParams(args [1]string, r *http.Request) (params GitignoreGetTemplateParams, _ error) {
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	return params, nil
}

type InteractionsRemoveRestrictionsForOrgParams struct {
	Org string
}

func decodeInteractionsRemoveRestrictionsForOrgParams(args [1]string, r *http.Request) (params InteractionsRemoveRestrictionsForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type InteractionsRemoveRestrictionsForRepoParams struct {
	Owner string
	Repo  string
}

func decodeInteractionsRemoveRestrictionsForRepoParams(args [2]string, r *http.Request) (params InteractionsRemoveRestrictionsForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type InteractionsSetRestrictionsForOrgParams struct {
	Org string
}

func decodeInteractionsSetRestrictionsForOrgParams(args [1]string, r *http.Request) (params InteractionsSetRestrictionsForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type InteractionsSetRestrictionsForRepoParams struct {
	Owner string
	Repo  string
}

func decodeInteractionsSetRestrictionsForRepoParams(args [2]string, r *http.Request) (params InteractionsSetRestrictionsForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type IssuesAddAssigneesParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

func decodeIssuesAddAssigneesParams(args [3]string, r *http.Request) (params IssuesAddAssigneesParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	return params, nil
}

type IssuesCheckUserCanBeAssignedParams struct {
	Owner    string
	Repo     string
	Assignee string
}

func decodeIssuesCheckUserCanBeAssignedParams(args [3]string, r *http.Request) (params IssuesCheckUserCanBeAssignedParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: assignee.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "assignee",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Assignee = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: assignee: not specified")
		}
	}
	return params, nil
}

type IssuesCreateParams struct {
	Owner string
	Repo  string
}

func decodeIssuesCreateParams(args [2]string, r *http.Request) (params IssuesCreateParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type IssuesCreateCommentParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

func decodeIssuesCreateCommentParams(args [3]string, r *http.Request) (params IssuesCreateCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	return params, nil
}

type IssuesCreateLabelParams struct {
	Owner string
	Repo  string
}

func decodeIssuesCreateLabelParams(args [2]string, r *http.Request) (params IssuesCreateLabelParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type IssuesCreateMilestoneParams struct {
	Owner string
	Repo  string
}

func decodeIssuesCreateMilestoneParams(args [2]string, r *http.Request) (params IssuesCreateMilestoneParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type IssuesDeleteCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodeIssuesDeleteCommentParams(args [3]string, r *http.Request) (params IssuesDeleteCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type IssuesDeleteLabelParams struct {
	Owner string
	Repo  string
	Name  string
}

func decodeIssuesDeleteLabelParams(args [3]string, r *http.Request) (params IssuesDeleteLabelParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	return params, nil
}

type IssuesDeleteMilestoneParams struct {
	Owner string
	Repo  string
	// Milestone_number parameter.
	MilestoneNumber int
}

func decodeIssuesDeleteMilestoneParams(args [3]string, r *http.Request) (params IssuesDeleteMilestoneParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: milestone_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "milestone_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MilestoneNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: milestone_number: not specified")
		}
	}
	return params, nil
}

type IssuesGetParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

func decodeIssuesGetParams(args [3]string, r *http.Request) (params IssuesGetParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	return params, nil
}

type IssuesGetCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodeIssuesGetCommentParams(args [3]string, r *http.Request) (params IssuesGetCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type IssuesGetEventParams struct {
	Owner   string
	Repo    string
	EventID int
}

func decodeIssuesGetEventParams(args [3]string, r *http.Request) (params IssuesGetEventParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: event_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "event_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.EventID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: event_id: not specified")
		}
	}
	return params, nil
}

type IssuesGetLabelParams struct {
	Owner string
	Repo  string
	Name  string
}

func decodeIssuesGetLabelParams(args [3]string, r *http.Request) (params IssuesGetLabelParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	return params, nil
}

type IssuesGetMilestoneParams struct {
	Owner string
	Repo  string
	// Milestone_number parameter.
	MilestoneNumber int
}

func decodeIssuesGetMilestoneParams(args [3]string, r *http.Request) (params IssuesGetMilestoneParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: milestone_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "milestone_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MilestoneNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: milestone_number: not specified")
		}
	}
	return params, nil
}

type IssuesListParams struct {
	// Indicates which sorts of issues to return. Can be one of:
	// \* `assigned`: Issues assigned to you
	// \* `created`: Issues created by you
	// \* `mentioned`: Issues mentioning you
	// \* `subscribed`: Issues you're subscribed to updates for
	// \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or
	// creation.
	Filter OptIssuesListFilter
	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State OptIssuesListState
	// A list of comma separated label names. Example: `bug,ui,@high`.
	Labels OptString
	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort OptIssuesListSort
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptIssuesListDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since  OptDateTime
	Collab OptBool
	Orgs   OptBool
	Owned  OptBool
	Pulls  OptBool
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListParams(args [0]string, r *http.Request) (params IssuesListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: filter.
	{
		val := IssuesListFilter("assigned")
		params.Filter.SetTo(val)
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterVal IssuesListFilter
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterVal = IssuesListFilter(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Filter.SetTo(paramsDotFilterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
			if err := func() error {
				if params.Filter.Set {
					if err := func() error {
						if err := params.Filter.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: filter: invalid")
			}
		}
	}
	// Set default value for query: state.
	{
		val := IssuesListState("open")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal IssuesListState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = IssuesListState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Decode query: labels.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labels",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Labels.SetTo(paramsDotLabelsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labels: parse")
			}
		}
	}
	// Set default value for query: sort.
	{
		val := IssuesListSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal IssuesListSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = IssuesListSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: direction.
	{
		val := IssuesListDirection("desc")
		params.Direction.SetTo(val)
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal IssuesListDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = IssuesListDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Decode query: collab.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "collab",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCollabVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotCollabVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Collab.SetTo(paramsDotCollabVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: collab: parse")
			}
		}
	}
	// Decode query: orgs.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "orgs",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrgsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotOrgsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Orgs.SetTo(paramsDotOrgsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: orgs: parse")
			}
		}
	}
	// Decode query: owned.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "owned",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOwnedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotOwnedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Owned.SetTo(paramsDotOwnedVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: owned: parse")
			}
		}
	}
	// Decode query: pulls.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pulls",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPullsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotPullsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pulls.SetTo(paramsDotPullsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pulls: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListAssigneesParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListAssigneesParams(args [2]string, r *http.Request) (params IssuesListAssigneesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListCommentsParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListCommentsParams(args [3]string, r *http.Request) (params IssuesListCommentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListCommentsForRepoParams struct {
	Owner string
	Repo  string
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort OptIssuesListCommentsForRepoSort
	// Either `asc` or `desc`. Ignored without the `sort` parameter.
	Direction OptIssuesListCommentsForRepoDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListCommentsForRepoParams(args [2]string, r *http.Request) (params IssuesListCommentsForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: sort.
	{
		val := IssuesListCommentsForRepoSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal IssuesListCommentsForRepoSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = IssuesListCommentsForRepoSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal IssuesListCommentsForRepoDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = IssuesListCommentsForRepoDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListEventsForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListEventsForRepoParams(args [2]string, r *http.Request) (params IssuesListEventsForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListForAuthenticatedUserParams struct {
	// Indicates which sorts of issues to return. Can be one of:
	// \* `assigned`: Issues assigned to you
	// \* `created`: Issues created by you
	// \* `mentioned`: Issues mentioning you
	// \* `subscribed`: Issues you're subscribed to updates for
	// \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or
	// creation.
	Filter OptIssuesListForAuthenticatedUserFilter
	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State OptIssuesListForAuthenticatedUserState
	// A list of comma separated label names. Example: `bug,ui,@high`.
	Labels OptString
	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort OptIssuesListForAuthenticatedUserSort
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptIssuesListForAuthenticatedUserDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListForAuthenticatedUserParams(args [0]string, r *http.Request) (params IssuesListForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: filter.
	{
		val := IssuesListForAuthenticatedUserFilter("assigned")
		params.Filter.SetTo(val)
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterVal IssuesListForAuthenticatedUserFilter
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterVal = IssuesListForAuthenticatedUserFilter(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Filter.SetTo(paramsDotFilterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
			if err := func() error {
				if params.Filter.Set {
					if err := func() error {
						if err := params.Filter.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: filter: invalid")
			}
		}
	}
	// Set default value for query: state.
	{
		val := IssuesListForAuthenticatedUserState("open")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal IssuesListForAuthenticatedUserState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = IssuesListForAuthenticatedUserState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Decode query: labels.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labels",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Labels.SetTo(paramsDotLabelsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labels: parse")
			}
		}
	}
	// Set default value for query: sort.
	{
		val := IssuesListForAuthenticatedUserSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal IssuesListForAuthenticatedUserSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = IssuesListForAuthenticatedUserSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: direction.
	{
		val := IssuesListForAuthenticatedUserDirection("desc")
		params.Direction.SetTo(val)
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal IssuesListForAuthenticatedUserDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = IssuesListForAuthenticatedUserDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListForOrgParams struct {
	Org string
	// Indicates which sorts of issues to return. Can be one of:
	// \* `assigned`: Issues assigned to you
	// \* `created`: Issues created by you
	// \* `mentioned`: Issues mentioning you
	// \* `subscribed`: Issues you're subscribed to updates for
	// \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or
	// creation.
	Filter OptIssuesListForOrgFilter
	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State OptIssuesListForOrgState
	// A list of comma separated label names. Example: `bug,ui,@high`.
	Labels OptString
	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort OptIssuesListForOrgSort
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptIssuesListForOrgDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListForOrgParams(args [1]string, r *http.Request) (params IssuesListForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: filter.
	{
		val := IssuesListForOrgFilter("assigned")
		params.Filter.SetTo(val)
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterVal IssuesListForOrgFilter
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterVal = IssuesListForOrgFilter(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Filter.SetTo(paramsDotFilterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
			if err := func() error {
				if params.Filter.Set {
					if err := func() error {
						if err := params.Filter.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: filter: invalid")
			}
		}
	}
	// Set default value for query: state.
	{
		val := IssuesListForOrgState("open")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal IssuesListForOrgState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = IssuesListForOrgState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Decode query: labels.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labels",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Labels.SetTo(paramsDotLabelsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labels: parse")
			}
		}
	}
	// Set default value for query: sort.
	{
		val := IssuesListForOrgSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal IssuesListForOrgSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = IssuesListForOrgSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: direction.
	{
		val := IssuesListForOrgDirection("desc")
		params.Direction.SetTo(val)
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal IssuesListForOrgDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = IssuesListForOrgDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListForRepoParams struct {
	Owner string
	Repo  string
	// If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*`
	// is passed, issues with any milestone are accepted. If the string `none` is passed, issues without
	// milestones are returned.
	Milestone OptString
	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State OptIssuesListForRepoState
	// Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues
	// assigned to any user.
	Assignee OptString
	// The user that created the issue.
	Creator OptString
	// A user that's mentioned in the issue.
	Mentioned OptString
	// A list of comma separated label names. Example: `bug,ui,@high`.
	Labels OptString
	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort OptIssuesListForRepoSort
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptIssuesListForRepoDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListForRepoParams(args [2]string, r *http.Request) (params IssuesListForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: milestone.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "milestone",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMilestoneVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMilestoneVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Milestone.SetTo(paramsDotMilestoneVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: milestone: parse")
			}
		}
	}
	// Set default value for query: state.
	{
		val := IssuesListForRepoState("open")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal IssuesListForRepoState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = IssuesListForRepoState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Decode query: assignee.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "assignee",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAssigneeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAssigneeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Assignee.SetTo(paramsDotAssigneeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: assignee: parse")
			}
		}
	}
	// Decode query: creator.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "creator",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCreatorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCreatorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Creator.SetTo(paramsDotCreatorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: creator: parse")
			}
		}
	}
	// Decode query: mentioned.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "mentioned",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMentionedVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMentionedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Mentioned.SetTo(paramsDotMentionedVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: mentioned: parse")
			}
		}
	}
	// Decode query: labels.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labels",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLabelsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLabelsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Labels.SetTo(paramsDotLabelsVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: labels: parse")
			}
		}
	}
	// Set default value for query: sort.
	{
		val := IssuesListForRepoSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal IssuesListForRepoSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = IssuesListForRepoSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: direction.
	{
		val := IssuesListForRepoDirection("desc")
		params.Direction.SetTo(val)
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal IssuesListForRepoDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = IssuesListForRepoDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListLabelsForMilestoneParams struct {
	Owner string
	Repo  string
	// Milestone_number parameter.
	MilestoneNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListLabelsForMilestoneParams(args [3]string, r *http.Request) (params IssuesListLabelsForMilestoneParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: milestone_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "milestone_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MilestoneNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: milestone_number: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListLabelsForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListLabelsForRepoParams(args [2]string, r *http.Request) (params IssuesListLabelsForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListLabelsOnIssueParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListLabelsOnIssueParams(args [3]string, r *http.Request) (params IssuesListLabelsOnIssueParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesListMilestonesParams struct {
	Owner string
	Repo  string
	// The state of the milestone. Either `open`, `closed`, or `all`.
	State OptIssuesListMilestonesState
	// What to sort results by. Either `due_on` or `completeness`.
	Sort OptIssuesListMilestonesSort
	// The direction of the sort. Either `asc` or `desc`.
	Direction OptIssuesListMilestonesDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeIssuesListMilestonesParams(args [2]string, r *http.Request) (params IssuesListMilestonesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: state.
	{
		val := IssuesListMilestonesState("open")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal IssuesListMilestonesState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = IssuesListMilestonesState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Set default value for query: sort.
	{
		val := IssuesListMilestonesSort("due_on")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal IssuesListMilestonesSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = IssuesListMilestonesSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: direction.
	{
		val := IssuesListMilestonesDirection("asc")
		params.Direction.SetTo(val)
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal IssuesListMilestonesDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = IssuesListMilestonesDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type IssuesLockParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

func decodeIssuesLockParams(args [3]string, r *http.Request) (params IssuesLockParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	return params, nil
}

type IssuesRemoveAllLabelsParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

func decodeIssuesRemoveAllLabelsParams(args [3]string, r *http.Request) (params IssuesRemoveAllLabelsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	return params, nil
}

type IssuesRemoveAssigneesParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

func decodeIssuesRemoveAssigneesParams(args [3]string, r *http.Request) (params IssuesRemoveAssigneesParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	return params, nil
}

type IssuesRemoveLabelParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
	Name        string
}

func decodeIssuesRemoveLabelParams(args [4]string, r *http.Request) (params IssuesRemoveLabelParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	// Decode path: name.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	return params, nil
}

type IssuesUnlockParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

func decodeIssuesUnlockParams(args [3]string, r *http.Request) (params IssuesUnlockParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	return params, nil
}

type IssuesUpdateParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

func decodeIssuesUpdateParams(args [3]string, r *http.Request) (params IssuesUpdateParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	return params, nil
}

type IssuesUpdateCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodeIssuesUpdateCommentParams(args [3]string, r *http.Request) (params IssuesUpdateCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type IssuesUpdateLabelParams struct {
	Owner string
	Repo  string
	Name  string
}

func decodeIssuesUpdateLabelParams(args [3]string, r *http.Request) (params IssuesUpdateLabelParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	return params, nil
}

type IssuesUpdateMilestoneParams struct {
	Owner string
	Repo  string
	// Milestone_number parameter.
	MilestoneNumber int
}

func decodeIssuesUpdateMilestoneParams(args [3]string, r *http.Request) (params IssuesUpdateMilestoneParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: milestone_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "milestone_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MilestoneNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: milestone_number: not specified")
		}
	}
	return params, nil
}

type LicensesGetParams struct {
	License string
}

func decodeLicensesGetParams(args [1]string, r *http.Request) (params LicensesGetParams, _ error) {
	// Decode path: license.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "license",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.License = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: license: not specified")
		}
	}
	return params, nil
}

type LicensesGetAllCommonlyUsedParams struct {
	Featured OptBool
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeLicensesGetAllCommonlyUsedParams(args [0]string, r *http.Request) (params LicensesGetAllCommonlyUsedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: featured.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "featured",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFeaturedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotFeaturedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Featured.SetTo(paramsDotFeaturedVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: featured: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type LicensesGetForRepoParams struct {
	Owner string
	Repo  string
}

func decodeLicensesGetForRepoParams(args [2]string, r *http.Request) (params LicensesGetForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type MigrationsCancelImportParams struct {
	Owner string
	Repo  string
}

func decodeMigrationsCancelImportParams(args [2]string, r *http.Request) (params MigrationsCancelImportParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type MigrationsDeleteArchiveForAuthenticatedUserParams struct {
	// Migration_id parameter.
	MigrationID int
}

func decodeMigrationsDeleteArchiveForAuthenticatedUserParams(args [1]string, r *http.Request) (params MigrationsDeleteArchiveForAuthenticatedUserParams, _ error) {
	// Decode path: migration_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "migration_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MigrationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: migration_id: not specified")
		}
	}
	return params, nil
}

type MigrationsDeleteArchiveForOrgParams struct {
	Org string
	// Migration_id parameter.
	MigrationID int
}

func decodeMigrationsDeleteArchiveForOrgParams(args [2]string, r *http.Request) (params MigrationsDeleteArchiveForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: migration_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "migration_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MigrationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: migration_id: not specified")
		}
	}
	return params, nil
}

type MigrationsDownloadArchiveForOrgParams struct {
	Org string
	// Migration_id parameter.
	MigrationID int
}

func decodeMigrationsDownloadArchiveForOrgParams(args [2]string, r *http.Request) (params MigrationsDownloadArchiveForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: migration_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "migration_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MigrationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: migration_id: not specified")
		}
	}
	return params, nil
}

type MigrationsGetArchiveForAuthenticatedUserParams struct {
	// Migration_id parameter.
	MigrationID int
}

func decodeMigrationsGetArchiveForAuthenticatedUserParams(args [1]string, r *http.Request) (params MigrationsGetArchiveForAuthenticatedUserParams, _ error) {
	// Decode path: migration_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "migration_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MigrationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: migration_id: not specified")
		}
	}
	return params, nil
}

type MigrationsGetCommitAuthorsParams struct {
	Owner string
	Repo  string
	// A user ID. Only return users with an ID greater than this ID.
	Since OptInt
}

func decodeMigrationsGetCommitAuthorsParams(args [2]string, r *http.Request) (params MigrationsGetCommitAuthorsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	return params, nil
}

type MigrationsGetImportStatusParams struct {
	Owner string
	Repo  string
}

func decodeMigrationsGetImportStatusParams(args [2]string, r *http.Request) (params MigrationsGetImportStatusParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type MigrationsGetLargeFilesParams struct {
	Owner string
	Repo  string
}

func decodeMigrationsGetLargeFilesParams(args [2]string, r *http.Request) (params MigrationsGetLargeFilesParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type MigrationsGetStatusForAuthenticatedUserParams struct {
	// Migration_id parameter.
	MigrationID int
	Exclude     []string
}

func decodeMigrationsGetStatusForAuthenticatedUserParams(args [1]string, r *http.Request) (params MigrationsGetStatusForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: migration_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "migration_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MigrationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: migration_id: not specified")
		}
	}
	// Decode query: exclude.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "exclude",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotExcludeVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotExcludeVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Exclude = append(params.Exclude, paramsDotExcludeVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: exclude: parse")
			}
		}
	}
	return params, nil
}

type MigrationsGetStatusForOrgParams struct {
	Org string
	// Migration_id parameter.
	MigrationID int
	// Exclude attributes from the API response to improve performance.
	Exclude []MigrationsGetStatusForOrgExcludeItem
}

func decodeMigrationsGetStatusForOrgParams(args [2]string, r *http.Request) (params MigrationsGetStatusForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: migration_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "migration_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MigrationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: migration_id: not specified")
		}
	}
	// Decode query: exclude.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "exclude",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotExcludeVal MigrationsGetStatusForOrgExcludeItem
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotExcludeVal = MigrationsGetStatusForOrgExcludeItem(c)
						return nil
					}(); err != nil {
						return err
					}
					params.Exclude = append(params.Exclude, paramsDotExcludeVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: exclude: parse")
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.Exclude {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: exclude: invalid")
			}
		}
	}
	return params, nil
}

type MigrationsListForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeMigrationsListForAuthenticatedUserParams(args [0]string, r *http.Request) (params MigrationsListForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type MigrationsListForOrgParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
	// Exclude attributes from the API response to improve performance.
	Exclude []MigrationsListForOrgExcludeItem
}

func decodeMigrationsListForOrgParams(args [1]string, r *http.Request) (params MigrationsListForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Decode query: exclude.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "exclude",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotExcludeVal MigrationsListForOrgExcludeItem
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotExcludeVal = MigrationsListForOrgExcludeItem(c)
						return nil
					}(); err != nil {
						return err
					}
					params.Exclude = append(params.Exclude, paramsDotExcludeVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: exclude: parse")
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.Exclude {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: exclude: invalid")
			}
		}
	}
	return params, nil
}

type MigrationsListReposForOrgParams struct {
	Org string
	// Migration_id parameter.
	MigrationID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeMigrationsListReposForOrgParams(args [2]string, r *http.Request) (params MigrationsListReposForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: migration_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "migration_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MigrationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: migration_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type MigrationsListReposForUserParams struct {
	// Migration_id parameter.
	MigrationID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeMigrationsListReposForUserParams(args [1]string, r *http.Request) (params MigrationsListReposForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: migration_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "migration_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MigrationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: migration_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type MigrationsMapCommitAuthorParams struct {
	Owner    string
	Repo     string
	AuthorID int
}

func decodeMigrationsMapCommitAuthorParams(args [3]string, r *http.Request) (params MigrationsMapCommitAuthorParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: author_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "author_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AuthorID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: author_id: not specified")
		}
	}
	return params, nil
}

type MigrationsSetLfsPreferenceParams struct {
	Owner string
	Repo  string
}

func decodeMigrationsSetLfsPreferenceParams(args [2]string, r *http.Request) (params MigrationsSetLfsPreferenceParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type MigrationsStartForOrgParams struct {
	Org string
}

func decodeMigrationsStartForOrgParams(args [1]string, r *http.Request) (params MigrationsStartForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type MigrationsStartImportParams struct {
	Owner string
	Repo  string
}

func decodeMigrationsStartImportParams(args [2]string, r *http.Request) (params MigrationsStartImportParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type MigrationsUnlockRepoForAuthenticatedUserParams struct {
	// Migration_id parameter.
	MigrationID int
	// Repo_name parameter.
	RepoName string
}

func decodeMigrationsUnlockRepoForAuthenticatedUserParams(args [2]string, r *http.Request) (params MigrationsUnlockRepoForAuthenticatedUserParams, _ error) {
	// Decode path: migration_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "migration_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MigrationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: migration_id: not specified")
		}
	}
	// Decode path: repo_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RepoName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo_name: not specified")
		}
	}
	return params, nil
}

type MigrationsUnlockRepoForOrgParams struct {
	Org string
	// Migration_id parameter.
	MigrationID int
	// Repo_name parameter.
	RepoName string
}

func decodeMigrationsUnlockRepoForOrgParams(args [3]string, r *http.Request) (params MigrationsUnlockRepoForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: migration_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "migration_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.MigrationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: migration_id: not specified")
		}
	}
	// Decode path: repo_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RepoName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo_name: not specified")
		}
	}
	return params, nil
}

type MigrationsUpdateImportParams struct {
	Owner string
	Repo  string
}

func decodeMigrationsUpdateImportParams(args [2]string, r *http.Request) (params MigrationsUpdateImportParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type OAuthAuthorizationsDeleteAuthorizationParams struct {
	// Authorization_id parameter.
	AuthorizationID int
}

func decodeOAuthAuthorizationsDeleteAuthorizationParams(args [1]string, r *http.Request) (params OAuthAuthorizationsDeleteAuthorizationParams, _ error) {
	// Decode path: authorization_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "authorization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AuthorizationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: authorization_id: not specified")
		}
	}
	return params, nil
}

type OAuthAuthorizationsDeleteGrantParams struct {
	// Grant_id parameter.
	GrantID int
}

func decodeOAuthAuthorizationsDeleteGrantParams(args [1]string, r *http.Request) (params OAuthAuthorizationsDeleteGrantParams, _ error) {
	// Decode path: grant_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "grant_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.GrantID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: grant_id: not specified")
		}
	}
	return params, nil
}

type OAuthAuthorizationsGetAuthorizationParams struct {
	// Authorization_id parameter.
	AuthorizationID int
}

func decodeOAuthAuthorizationsGetAuthorizationParams(args [1]string, r *http.Request) (params OAuthAuthorizationsGetAuthorizationParams, _ error) {
	// Decode path: authorization_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "authorization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AuthorizationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: authorization_id: not specified")
		}
	}
	return params, nil
}

type OAuthAuthorizationsGetGrantParams struct {
	// Grant_id parameter.
	GrantID int
}

func decodeOAuthAuthorizationsGetGrantParams(args [1]string, r *http.Request) (params OAuthAuthorizationsGetGrantParams, _ error) {
	// Decode path: grant_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "grant_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.GrantID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: grant_id: not specified")
		}
	}
	return params, nil
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

func decodeOAuthAuthorizationsGetOrCreateAuthorizationForAppParams(args [1]string, r *http.Request) (params OAuthAuthorizationsGetOrCreateAuthorizationForAppParams, _ error) {
	// Decode path: client_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "client_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: client_id: not specified")
		}
	}
	return params, nil
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParams struct {
	// The client ID of your GitHub app.
	ClientID    string
	Fingerprint string
}

func decodeOAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParams(args [2]string, r *http.Request) (params OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParams, _ error) {
	// Decode path: client_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "client_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: client_id: not specified")
		}
	}
	// Decode path: fingerprint.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "fingerprint",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Fingerprint = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: fingerprint: not specified")
		}
	}
	return params, nil
}

type OAuthAuthorizationsListAuthorizationsParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
	// The client ID of your GitHub app.
	ClientID OptString
}

func decodeOAuthAuthorizationsListAuthorizationsParams(args [0]string, r *http.Request) (params OAuthAuthorizationsListAuthorizationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Decode query: client_id.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "client_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotClientIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotClientIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ClientID.SetTo(paramsDotClientIDVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: client_id: parse")
			}
		}
	}
	return params, nil
}

type OAuthAuthorizationsListGrantsParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
	// The client ID of your GitHub app.
	ClientID OptString
}

func decodeOAuthAuthorizationsListGrantsParams(args [0]string, r *http.Request) (params OAuthAuthorizationsListGrantsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Decode query: client_id.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "client_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotClientIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotClientIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ClientID.SetTo(paramsDotClientIDVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: client_id: parse")
			}
		}
	}
	return params, nil
}

type OAuthAuthorizationsUpdateAuthorizationParams struct {
	// Authorization_id parameter.
	AuthorizationID int
}

func decodeOAuthAuthorizationsUpdateAuthorizationParams(args [1]string, r *http.Request) (params OAuthAuthorizationsUpdateAuthorizationParams, _ error) {
	// Decode path: authorization_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "authorization_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AuthorizationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: authorization_id: not specified")
		}
	}
	return params, nil
}

type OrgsBlockUserParams struct {
	Org      string
	Username string
}

func decodeOrgsBlockUserParams(args [2]string, r *http.Request) (params OrgsBlockUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsCancelInvitationParams struct {
	Org string
	// Invitation_id parameter.
	InvitationID int
}

func decodeOrgsCancelInvitationParams(args [2]string, r *http.Request) (params OrgsCancelInvitationParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: invitation_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "invitation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InvitationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: invitation_id: not specified")
		}
	}
	return params, nil
}

type OrgsCheckBlockedUserParams struct {
	Org      string
	Username string
}

func decodeOrgsCheckBlockedUserParams(args [2]string, r *http.Request) (params OrgsCheckBlockedUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsCheckMembershipForUserParams struct {
	Org      string
	Username string
}

func decodeOrgsCheckMembershipForUserParams(args [2]string, r *http.Request) (params OrgsCheckMembershipForUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsCheckPublicMembershipForUserParams struct {
	Org      string
	Username string
}

func decodeOrgsCheckPublicMembershipForUserParams(args [2]string, r *http.Request) (params OrgsCheckPublicMembershipForUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsConvertMemberToOutsideCollaboratorParams struct {
	Org      string
	Username string
}

func decodeOrgsConvertMemberToOutsideCollaboratorParams(args [2]string, r *http.Request) (params OrgsConvertMemberToOutsideCollaboratorParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsCreateInvitationParams struct {
	Org string
}

func decodeOrgsCreateInvitationParams(args [1]string, r *http.Request) (params OrgsCreateInvitationParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type OrgsCreateWebhookParams struct {
	Org string
}

func decodeOrgsCreateWebhookParams(args [1]string, r *http.Request) (params OrgsCreateWebhookParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type OrgsDeleteWebhookParams struct {
	Org    string
	HookID int
}

func decodeOrgsDeleteWebhookParams(args [2]string, r *http.Request) (params OrgsDeleteWebhookParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type OrgsGetParams struct {
	Org string
}

func decodeOrgsGetParams(args [1]string, r *http.Request) (params OrgsGetParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type OrgsGetAuditLogParams struct {
	Org string
	// A search phrase. For more information, see [Searching the audit log](https://docs.github.
	// com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
	Phrase OptString
	// The event types to include:
	// - `web` - returns web (non-Git) events
	// - `git` - returns Git events
	// - `all` - returns both web and Git events
	// The default is `web`.
	Include OptOrgsGetAuditLogInclude
	// A cursor, as given in the [Link header](https://docs.github.
	// com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches
	// for events after this cursor.
	After OptString
	// A cursor, as given in the [Link header](https://docs.github.
	// com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches
	// for events before this cursor.
	Before OptString
	// The order of audit log events. To list newest events first, specify `desc`. To list oldest events
	// first, specify `asc`.
	// The default is `desc`.
	Order OptOrgsGetAuditLogOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsGetAuditLogParams(args [1]string, r *http.Request) (params OrgsGetAuditLogParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode query: phrase.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "phrase",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPhraseVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPhraseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Phrase.SetTo(paramsDotPhraseVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: phrase: parse")
			}
		}
	}
	// Decode query: include.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "include",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludeVal OrgsGetAuditLogInclude
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIncludeVal = OrgsGetAuditLogInclude(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Include.SetTo(paramsDotIncludeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: include: parse")
			}
			if err := func() error {
				if params.Include.Set {
					if err := func() error {
						if err := params.Include.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: include: invalid")
			}
		}
	}
	// Decode query: after.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "after",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAfterVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAfterVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.After.SetTo(paramsDotAfterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: after: parse")
			}
		}
	}
	// Decode query: before.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "before",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBeforeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBeforeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Before.SetTo(paramsDotBeforeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: before: parse")
			}
		}
	}
	// Decode query: order.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal OrgsGetAuditLogOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = OrgsGetAuditLogOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: order: parse")
			}
			if err := func() error {
				if params.Order.Set {
					if err := func() error {
						if err := params.Order.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: order: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsGetMembershipForAuthenticatedUserParams struct {
	Org string
}

func decodeOrgsGetMembershipForAuthenticatedUserParams(args [1]string, r *http.Request) (params OrgsGetMembershipForAuthenticatedUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type OrgsGetMembershipForUserParams struct {
	Org      string
	Username string
}

func decodeOrgsGetMembershipForUserParams(args [2]string, r *http.Request) (params OrgsGetMembershipForUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsGetWebhookParams struct {
	Org    string
	HookID int
}

func decodeOrgsGetWebhookParams(args [2]string, r *http.Request) (params OrgsGetWebhookParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type OrgsGetWebhookConfigForOrgParams struct {
	Org    string
	HookID int
}

func decodeOrgsGetWebhookConfigForOrgParams(args [2]string, r *http.Request) (params OrgsGetWebhookConfigForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type OrgsGetWebhookDeliveryParams struct {
	Org        string
	HookID     int
	DeliveryID int
}

func decodeOrgsGetWebhookDeliveryParams(args [3]string, r *http.Request) (params OrgsGetWebhookDeliveryParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	// Decode path: delivery_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "delivery_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeliveryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: delivery_id: not specified")
		}
	}
	return params, nil
}

type OrgsListParams struct {
	// An organization ID. Only return organizations with an ID greater than this ID.
	Since OptInt
	// Results per page (max 100).
	PerPage OptInt
}

func decodeOrgsListParams(args [0]string, r *http.Request) (params OrgsListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	return params, nil
}

type OrgsListBlockedUsersParams struct {
	Org string
}

func decodeOrgsListBlockedUsersParams(args [1]string, r *http.Request) (params OrgsListBlockedUsersParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type OrgsListFailedInvitationsParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsListFailedInvitationsParams(args [1]string, r *http.Request) (params OrgsListFailedInvitationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsListForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsListForAuthenticatedUserParams(args [0]string, r *http.Request) (params OrgsListForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsListForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsListForUserParams(args [1]string, r *http.Request) (params OrgsListForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsListInvitationTeamsParams struct {
	Org string
	// Invitation_id parameter.
	InvitationID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsListInvitationTeamsParams(args [2]string, r *http.Request) (params OrgsListInvitationTeamsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: invitation_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "invitation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InvitationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: invitation_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsListMembersParams struct {
	Org string
	// Filter members returned in the list. Can be one of:
	// \* `2fa_disabled` - Members without [two-factor authentication](https://github.
	// com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
	// \* `all` - All members the authenticated user can see.
	Filter OptOrgsListMembersFilter
	// Filter members returned by their role. Can be one of:
	// \* `all` - All members of the organization, regardless of role.
	// \* `admin` - Organization owners.
	// \* `member` - Non-owner organization members.
	Role OptOrgsListMembersRole
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsListMembersParams(args [1]string, r *http.Request) (params OrgsListMembersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: filter.
	{
		val := OrgsListMembersFilter("all")
		params.Filter.SetTo(val)
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterVal OrgsListMembersFilter
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterVal = OrgsListMembersFilter(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Filter.SetTo(paramsDotFilterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
			if err := func() error {
				if params.Filter.Set {
					if err := func() error {
						if err := params.Filter.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: filter: invalid")
			}
		}
	}
	// Set default value for query: role.
	{
		val := OrgsListMembersRole("all")
		params.Role.SetTo(val)
	}
	// Decode query: role.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "role",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRoleVal OrgsListMembersRole
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRoleVal = OrgsListMembersRole(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Role.SetTo(paramsDotRoleVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: role: parse")
			}
			if err := func() error {
				if params.Role.Set {
					if err := func() error {
						if err := params.Role.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: role: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsListMembershipsForAuthenticatedUserParams struct {
	// Indicates the state of the memberships to return. Can be either `active` or `pending`. If not
	// specified, the API returns both active and pending memberships.
	State OptOrgsListMembershipsForAuthenticatedUserState
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsListMembershipsForAuthenticatedUserParams(args [0]string, r *http.Request) (params OrgsListMembershipsForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal OrgsListMembershipsForAuthenticatedUserState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = OrgsListMembershipsForAuthenticatedUserState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsListOutsideCollaboratorsParams struct {
	Org string
	// Filter the list of outside collaborators. Can be one of:
	// \* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.
	// com/blog/1614-two-factor-authentication) enabled.
	// \* `all`: All outside collaborators.
	Filter OptOrgsListOutsideCollaboratorsFilter
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsListOutsideCollaboratorsParams(args [1]string, r *http.Request) (params OrgsListOutsideCollaboratorsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: filter.
	{
		val := OrgsListOutsideCollaboratorsFilter("all")
		params.Filter.SetTo(val)
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFilterVal OrgsListOutsideCollaboratorsFilter
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFilterVal = OrgsListOutsideCollaboratorsFilter(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Filter.SetTo(paramsDotFilterVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
			if err := func() error {
				if params.Filter.Set {
					if err := func() error {
						if err := params.Filter.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: filter: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsListPendingInvitationsParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsListPendingInvitationsParams(args [1]string, r *http.Request) (params OrgsListPendingInvitationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsListPublicMembersParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsListPublicMembersParams(args [1]string, r *http.Request) (params OrgsListPublicMembersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsListSamlSSOAuthorizationsParams struct {
	Org string
}

func decodeOrgsListSamlSSOAuthorizationsParams(args [1]string, r *http.Request) (params OrgsListSamlSSOAuthorizationsParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type OrgsListWebhookDeliveriesParams struct {
	Org    string
	HookID int
	// Results per page (max 100).
	PerPage OptInt
	// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to
	// the `link` header for the next and previous page cursors.
	Cursor OptString
}

func decodeOrgsListWebhookDeliveriesParams(args [2]string, r *http.Request) (params OrgsListWebhookDeliveriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Decode query: cursor.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cursor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCursorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCursorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Cursor.SetTo(paramsDotCursorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: cursor: parse")
			}
		}
	}
	return params, nil
}

type OrgsListWebhooksParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeOrgsListWebhooksParams(args [1]string, r *http.Request) (params OrgsListWebhooksParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type OrgsPingWebhookParams struct {
	Org    string
	HookID int
}

func decodeOrgsPingWebhookParams(args [2]string, r *http.Request) (params OrgsPingWebhookParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type OrgsRedeliverWebhookDeliveryParams struct {
	Org        string
	HookID     int
	DeliveryID int
}

func decodeOrgsRedeliverWebhookDeliveryParams(args [3]string, r *http.Request) (params OrgsRedeliverWebhookDeliveryParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	// Decode path: delivery_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "delivery_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeliveryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: delivery_id: not specified")
		}
	}
	return params, nil
}

type OrgsRemoveMemberParams struct {
	Org      string
	Username string
}

func decodeOrgsRemoveMemberParams(args [2]string, r *http.Request) (params OrgsRemoveMemberParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsRemoveMembershipForUserParams struct {
	Org      string
	Username string
}

func decodeOrgsRemoveMembershipForUserParams(args [2]string, r *http.Request) (params OrgsRemoveMembershipForUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsRemoveOutsideCollaboratorParams struct {
	Org      string
	Username string
}

func decodeOrgsRemoveOutsideCollaboratorParams(args [2]string, r *http.Request) (params OrgsRemoveOutsideCollaboratorParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsRemovePublicMembershipForAuthenticatedUserParams struct {
	Org      string
	Username string
}

func decodeOrgsRemovePublicMembershipForAuthenticatedUserParams(args [2]string, r *http.Request) (params OrgsRemovePublicMembershipForAuthenticatedUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsRemoveSamlSSOAuthorizationParams struct {
	Org          string
	CredentialID int
}

func decodeOrgsRemoveSamlSSOAuthorizationParams(args [2]string, r *http.Request) (params OrgsRemoveSamlSSOAuthorizationParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: credential_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "credential_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CredentialID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: credential_id: not specified")
		}
	}
	return params, nil
}

type OrgsSetMembershipForUserParams struct {
	Org      string
	Username string
}

func decodeOrgsSetMembershipForUserParams(args [2]string, r *http.Request) (params OrgsSetMembershipForUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsSetPublicMembershipForAuthenticatedUserParams struct {
	Org      string
	Username string
}

func decodeOrgsSetPublicMembershipForAuthenticatedUserParams(args [2]string, r *http.Request) (params OrgsSetPublicMembershipForAuthenticatedUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsUnblockUserParams struct {
	Org      string
	Username string
}

func decodeOrgsUnblockUserParams(args [2]string, r *http.Request) (params OrgsUnblockUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type OrgsUpdateMembershipForAuthenticatedUserParams struct {
	Org string
}

func decodeOrgsUpdateMembershipForAuthenticatedUserParams(args [1]string, r *http.Request) (params OrgsUpdateMembershipForAuthenticatedUserParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type OrgsUpdateWebhookParams struct {
	Org    string
	HookID int
}

func decodeOrgsUpdateWebhookParams(args [2]string, r *http.Request) (params OrgsUpdateWebhookParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type OrgsUpdateWebhookConfigForOrgParams struct {
	Org    string
	HookID int
}

func decodeOrgsUpdateWebhookConfigForOrgParams(args [2]string, r *http.Request) (params OrgsUpdateWebhookConfigForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type PackagesDeletePackageForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
}

func decodePackagesDeletePackageForAuthenticatedUserParams(args [2]string, r *http.Request) (params PackagesDeletePackageForAuthenticatedUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesDeletePackageForAuthenticatedUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	return params, nil
}

type PackagesDeletePackageForOrgParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageForOrgPackageType
	// The name of the package.
	PackageName string
	Org         string
}

func decodePackagesDeletePackageForOrgParams(args [3]string, r *http.Request) (params PackagesDeletePackageForOrgParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesDeletePackageForOrgPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type PackagesDeletePackageForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageForUserPackageType
	// The name of the package.
	PackageName string
	Username    string
}

func decodePackagesDeletePackageForUserParams(args [3]string, r *http.Request) (params PackagesDeletePackageForUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesDeletePackageForUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type PackagesDeletePackageVersionForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageVersionForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
	// Unique identifier of the package version.
	PackageVersionID int
}

func decodePackagesDeletePackageVersionForAuthenticatedUserParams(args [3]string, r *http.Request) (params PackagesDeletePackageVersionForAuthenticatedUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesDeletePackageVersionForAuthenticatedUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: package_version_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_version_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PackageVersionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_version_id: not specified")
		}
	}
	return params, nil
}

type PackagesDeletePackageVersionForOrgParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageVersionForOrgPackageType
	// The name of the package.
	PackageName string
	Org         string
	// Unique identifier of the package version.
	PackageVersionID int
}

func decodePackagesDeletePackageVersionForOrgParams(args [4]string, r *http.Request) (params PackagesDeletePackageVersionForOrgParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesDeletePackageVersionForOrgPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: package_version_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_version_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PackageVersionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_version_id: not specified")
		}
	}
	return params, nil
}

type PackagesDeletePackageVersionForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageVersionForUserPackageType
	// The name of the package.
	PackageName string
	Username    string
	// Unique identifier of the package version.
	PackageVersionID int
}

func decodePackagesDeletePackageVersionForUserParams(args [4]string, r *http.Request) (params PackagesDeletePackageVersionForUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesDeletePackageVersionForUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Decode path: package_version_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_version_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PackageVersionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_version_id: not specified")
		}
	}
	return params, nil
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The state of the package, either active or deleted.
	State OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState
}

func decodePackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams(args [2]string, r *http.Request) (params PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: package_type.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: state.
	{
		val := PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState("active")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	return params, nil
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType
	// The name of the package.
	PackageName string
	Org         string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The state of the package, either active or deleted.
	State OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState
}

func decodePackagesGetAllPackageVersionsForPackageOwnedByOrgParams(args [3]string, r *http.Request) (params PackagesGetAllPackageVersionsForPackageOwnedByOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: state.
	{
		val := PackagesGetAllPackageVersionsForPackageOwnedByOrgState("active")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal PackagesGetAllPackageVersionsForPackageOwnedByOrgState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = PackagesGetAllPackageVersionsForPackageOwnedByOrgState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	return params, nil
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType
	// The name of the package.
	PackageName string
	Username    string
}

func decodePackagesGetAllPackageVersionsForPackageOwnedByUserParams(args [3]string, r *http.Request) (params PackagesGetAllPackageVersionsForPackageOwnedByUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type PackagesGetPackageForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
}

func decodePackagesGetPackageForAuthenticatedUserParams(args [2]string, r *http.Request) (params PackagesGetPackageForAuthenticatedUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesGetPackageForAuthenticatedUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	return params, nil
}

type PackagesGetPackageForOrganizationParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageForOrganizationPackageType
	// The name of the package.
	PackageName string
	Org         string
}

func decodePackagesGetPackageForOrganizationParams(args [3]string, r *http.Request) (params PackagesGetPackageForOrganizationParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesGetPackageForOrganizationPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type PackagesGetPackageForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageForUserPackageType
	// The name of the package.
	PackageName string
	Username    string
}

func decodePackagesGetPackageForUserParams(args [3]string, r *http.Request) (params PackagesGetPackageForUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesGetPackageForUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type PackagesGetPackageVersionForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageVersionForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
	// Unique identifier of the package version.
	PackageVersionID int
}

func decodePackagesGetPackageVersionForAuthenticatedUserParams(args [3]string, r *http.Request) (params PackagesGetPackageVersionForAuthenticatedUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesGetPackageVersionForAuthenticatedUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: package_version_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_version_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PackageVersionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_version_id: not specified")
		}
	}
	return params, nil
}

type PackagesGetPackageVersionForOrganizationParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageVersionForOrganizationPackageType
	// The name of the package.
	PackageName string
	Org         string
	// Unique identifier of the package version.
	PackageVersionID int
}

func decodePackagesGetPackageVersionForOrganizationParams(args [4]string, r *http.Request) (params PackagesGetPackageVersionForOrganizationParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesGetPackageVersionForOrganizationPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: package_version_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_version_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PackageVersionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_version_id: not specified")
		}
	}
	return params, nil
}

type PackagesGetPackageVersionForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageVersionForUserPackageType
	// The name of the package.
	PackageName string
	// Unique identifier of the package version.
	PackageVersionID int
	Username         string
}

func decodePackagesGetPackageVersionForUserParams(args [4]string, r *http.Request) (params PackagesGetPackageVersionForUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesGetPackageVersionForUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: package_version_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_version_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PackageVersionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_version_id: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type PackagesListPackagesForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesListPackagesForAuthenticatedUserPackageType
	// The selected visibility of the packages. Can be one of `public`, `private`, or `internal`. Only
	// `container` package_types currently support `internal` visibility properly. For other ecosystems
	// `internal` is synonymous with `private`. This parameter is optional and only filters an existing
	// result set.
	Visibility OptPackagesListPackagesForAuthenticatedUserVisibility
}

func decodePackagesListPackagesForAuthenticatedUserParams(args [0]string, r *http.Request) (params PackagesListPackagesForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: package_type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "package_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesListPackagesForAuthenticatedUserPackageType(c)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: package_type: parse")
			}
			if err := func() error {
				if err := params.PackageType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: package_type: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: visibility.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "visibility",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVisibilityVal PackagesListPackagesForAuthenticatedUserVisibility
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVisibilityVal = PackagesListPackagesForAuthenticatedUserVisibility(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Visibility.SetTo(paramsDotVisibilityVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: visibility: parse")
			}
			if err := func() error {
				if params.Visibility.Set {
					if err := func() error {
						if err := params.Visibility.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: visibility: invalid")
			}
		}
	}
	return params, nil
}

type PackagesListPackagesForOrganizationParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesListPackagesForOrganizationPackageType
	Org         string
	// The selected visibility of the packages. Can be one of `public`, `private`, or `internal`. Only
	// `container` package_types currently support `internal` visibility properly. For other ecosystems
	// `internal` is synonymous with `private`. This parameter is optional and only filters an existing
	// result set.
	Visibility OptPackagesListPackagesForOrganizationVisibility
}

func decodePackagesListPackagesForOrganizationParams(args [1]string, r *http.Request) (params PackagesListPackagesForOrganizationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: package_type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "package_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesListPackagesForOrganizationPackageType(c)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: package_type: parse")
			}
			if err := func() error {
				if err := params.PackageType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: package_type: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode query: visibility.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "visibility",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVisibilityVal PackagesListPackagesForOrganizationVisibility
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVisibilityVal = PackagesListPackagesForOrganizationVisibility(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Visibility.SetTo(paramsDotVisibilityVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: visibility: parse")
			}
			if err := func() error {
				if params.Visibility.Set {
					if err := func() error {
						if err := params.Visibility.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: visibility: invalid")
			}
		}
	}
	return params, nil
}

type PackagesListPackagesForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesListPackagesForUserPackageType
	// The selected visibility of the packages. Can be one of `public`, `private`, or `internal`. Only
	// `container` package_types currently support `internal` visibility properly. For other ecosystems
	// `internal` is synonymous with `private`. This parameter is optional and only filters an existing
	// result set.
	Visibility OptPackagesListPackagesForUserVisibility
	Username   string
}

func decodePackagesListPackagesForUserParams(args [1]string, r *http.Request) (params PackagesListPackagesForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: package_type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "package_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesListPackagesForUserPackageType(c)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: package_type: parse")
			}
			if err := func() error {
				if err := params.PackageType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: package_type: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: visibility.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "visibility",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVisibilityVal PackagesListPackagesForUserVisibility
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVisibilityVal = PackagesListPackagesForUserVisibility(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Visibility.SetTo(paramsDotVisibilityVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: visibility: parse")
			}
			if err := func() error {
				if params.Visibility.Set {
					if err := func() error {
						if err := params.Visibility.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: visibility: invalid")
			}
		}
	}
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type PackagesRestorePackageForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
	// Package token.
	Token OptString
}

func decodePackagesRestorePackageForAuthenticatedUserParams(args [2]string, r *http.Request) (params PackagesRestorePackageForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: package_type.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesRestorePackageForAuthenticatedUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode query: token.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "token",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTokenVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTokenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Token.SetTo(paramsDotTokenVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: token: parse")
			}
		}
	}
	return params, nil
}

type PackagesRestorePackageForOrgParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageForOrgPackageType
	// The name of the package.
	PackageName string
	Org         string
	// Package token.
	Token OptString
}

func decodePackagesRestorePackageForOrgParams(args [3]string, r *http.Request) (params PackagesRestorePackageForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesRestorePackageForOrgPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode query: token.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "token",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTokenVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTokenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Token.SetTo(paramsDotTokenVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: token: parse")
			}
		}
	}
	return params, nil
}

type PackagesRestorePackageForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageForUserPackageType
	// The name of the package.
	PackageName string
	Username    string
	// Package token.
	Token OptString
}

func decodePackagesRestorePackageForUserParams(args [3]string, r *http.Request) (params PackagesRestorePackageForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesRestorePackageForUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Decode query: token.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "token",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTokenVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTokenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Token.SetTo(paramsDotTokenVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: token: parse")
			}
		}
	}
	return params, nil
}

type PackagesRestorePackageVersionForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageVersionForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
	// Unique identifier of the package version.
	PackageVersionID int
}

func decodePackagesRestorePackageVersionForAuthenticatedUserParams(args [3]string, r *http.Request) (params PackagesRestorePackageVersionForAuthenticatedUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesRestorePackageVersionForAuthenticatedUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: package_version_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_version_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PackageVersionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_version_id: not specified")
		}
	}
	return params, nil
}

type PackagesRestorePackageVersionForOrgParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageVersionForOrgPackageType
	// The name of the package.
	PackageName string
	Org         string
	// Unique identifier of the package version.
	PackageVersionID int
}

func decodePackagesRestorePackageVersionForOrgParams(args [4]string, r *http.Request) (params PackagesRestorePackageVersionForOrgParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesRestorePackageVersionForOrgPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: package_version_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_version_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PackageVersionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_version_id: not specified")
		}
	}
	return params, nil
}

type PackagesRestorePackageVersionForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageVersionForUserPackageType
	// The name of the package.
	PackageName string
	Username    string
	// Unique identifier of the package version.
	PackageVersionID int
}

func decodePackagesRestorePackageVersionForUserParams(args [4]string, r *http.Request) (params PackagesRestorePackageVersionForUserParams, _ error) {
	// Decode path: package_type.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageType = PackagesRestorePackageVersionForUserPackageType(c)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_type: not specified")
		}
	}
	// Decode path: package_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_name: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Decode path: package_version_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "package_version_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PackageVersionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: package_version_id: not specified")
		}
	}
	return params, nil
}

type ProjectsAddCollaboratorParams struct {
	ProjectID int
	Username  string
}

func decodeProjectsAddCollaboratorParams(args [2]string, r *http.Request) (params ProjectsAddCollaboratorParams, _ error) {
	// Decode path: project_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type ProjectsCreateColumnParams struct {
	ProjectID int
}

func decodeProjectsCreateColumnParams(args [1]string, r *http.Request) (params ProjectsCreateColumnParams, _ error) {
	// Decode path: project_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	return params, nil
}

type ProjectsCreateForOrgParams struct {
	Org string
}

func decodeProjectsCreateForOrgParams(args [1]string, r *http.Request) (params ProjectsCreateForOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ProjectsCreateForRepoParams struct {
	Owner string
	Repo  string
}

func decodeProjectsCreateForRepoParams(args [2]string, r *http.Request) (params ProjectsCreateForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ProjectsDeleteParams struct {
	ProjectID int
}

func decodeProjectsDeleteParams(args [1]string, r *http.Request) (params ProjectsDeleteParams, _ error) {
	// Decode path: project_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	return params, nil
}

type ProjectsDeleteCardParams struct {
	// Card_id parameter.
	CardID int
}

func decodeProjectsDeleteCardParams(args [1]string, r *http.Request) (params ProjectsDeleteCardParams, _ error) {
	// Decode path: card_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "card_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CardID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: card_id: not specified")
		}
	}
	return params, nil
}

type ProjectsDeleteColumnParams struct {
	// Column_id parameter.
	ColumnID int
}

func decodeProjectsDeleteColumnParams(args [1]string, r *http.Request) (params ProjectsDeleteColumnParams, _ error) {
	// Decode path: column_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "column_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ColumnID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: column_id: not specified")
		}
	}
	return params, nil
}

type ProjectsGetParams struct {
	ProjectID int
}

func decodeProjectsGetParams(args [1]string, r *http.Request) (params ProjectsGetParams, _ error) {
	// Decode path: project_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	return params, nil
}

type ProjectsGetCardParams struct {
	// Card_id parameter.
	CardID int
}

func decodeProjectsGetCardParams(args [1]string, r *http.Request) (params ProjectsGetCardParams, _ error) {
	// Decode path: card_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "card_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CardID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: card_id: not specified")
		}
	}
	return params, nil
}

type ProjectsGetColumnParams struct {
	// Column_id parameter.
	ColumnID int
}

func decodeProjectsGetColumnParams(args [1]string, r *http.Request) (params ProjectsGetColumnParams, _ error) {
	// Decode path: column_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "column_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ColumnID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: column_id: not specified")
		}
	}
	return params, nil
}

type ProjectsGetPermissionForUserParams struct {
	ProjectID int
	Username  string
}

func decodeProjectsGetPermissionForUserParams(args [2]string, r *http.Request) (params ProjectsGetPermissionForUserParams, _ error) {
	// Decode path: project_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type ProjectsListCardsParams struct {
	// Column_id parameter.
	ColumnID int
	// Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`,
	// or `not_archived`.
	ArchivedState OptProjectsListCardsArchivedState
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeProjectsListCardsParams(args [1]string, r *http.Request) (params ProjectsListCardsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: column_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "column_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ColumnID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: column_id: not specified")
		}
	}
	// Set default value for query: archived_state.
	{
		val := ProjectsListCardsArchivedState("not_archived")
		params.ArchivedState.SetTo(val)
	}
	// Decode query: archived_state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "archived_state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotArchivedStateVal ProjectsListCardsArchivedState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotArchivedStateVal = ProjectsListCardsArchivedState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.ArchivedState.SetTo(paramsDotArchivedStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: archived_state: parse")
			}
			if err := func() error {
				if params.ArchivedState.Set {
					if err := func() error {
						if err := params.ArchivedState.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: archived_state: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ProjectsListCollaboratorsParams struct {
	ProjectID int
	// Filters the collaborators by their affiliation. Can be one of:
	// \* `outside`: Outside collaborators of a project that are not a member of the project's
	// organization.
	// \* `direct`: Collaborators with permissions to a project, regardless of organization membership
	// status.
	// \* `all`: All collaborators the authenticated user can see.
	Affiliation OptProjectsListCollaboratorsAffiliation
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeProjectsListCollaboratorsParams(args [1]string, r *http.Request) (params ProjectsListCollaboratorsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	// Set default value for query: affiliation.
	{
		val := ProjectsListCollaboratorsAffiliation("all")
		params.Affiliation.SetTo(val)
	}
	// Decode query: affiliation.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "affiliation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAffiliationVal ProjectsListCollaboratorsAffiliation
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAffiliationVal = ProjectsListCollaboratorsAffiliation(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Affiliation.SetTo(paramsDotAffiliationVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: affiliation: parse")
			}
			if err := func() error {
				if params.Affiliation.Set {
					if err := func() error {
						if err := params.Affiliation.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: affiliation: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ProjectsListColumnsParams struct {
	ProjectID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeProjectsListColumnsParams(args [1]string, r *http.Request) (params ProjectsListColumnsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: project_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ProjectsListForOrgParams struct {
	Org string
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State OptProjectsListForOrgState
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeProjectsListForOrgParams(args [1]string, r *http.Request) (params ProjectsListForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: state.
	{
		val := ProjectsListForOrgState("open")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal ProjectsListForOrgState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = ProjectsListForOrgState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ProjectsListForRepoParams struct {
	Owner string
	Repo  string
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State OptProjectsListForRepoState
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeProjectsListForRepoParams(args [2]string, r *http.Request) (params ProjectsListForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: state.
	{
		val := ProjectsListForRepoState("open")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal ProjectsListForRepoState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = ProjectsListForRepoState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ProjectsListForUserParams struct {
	Username string
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State OptProjectsListForUserState
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeProjectsListForUserParams(args [1]string, r *http.Request) (params ProjectsListForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: state.
	{
		val := ProjectsListForUserState("open")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal ProjectsListForUserState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = ProjectsListForUserState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ProjectsMoveCardParams struct {
	// Card_id parameter.
	CardID int
}

func decodeProjectsMoveCardParams(args [1]string, r *http.Request) (params ProjectsMoveCardParams, _ error) {
	// Decode path: card_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "card_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CardID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: card_id: not specified")
		}
	}
	return params, nil
}

type ProjectsMoveColumnParams struct {
	// Column_id parameter.
	ColumnID int
}

func decodeProjectsMoveColumnParams(args [1]string, r *http.Request) (params ProjectsMoveColumnParams, _ error) {
	// Decode path: column_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "column_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ColumnID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: column_id: not specified")
		}
	}
	return params, nil
}

type ProjectsRemoveCollaboratorParams struct {
	ProjectID int
	Username  string
}

func decodeProjectsRemoveCollaboratorParams(args [2]string, r *http.Request) (params ProjectsRemoveCollaboratorParams, _ error) {
	// Decode path: project_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type ProjectsUpdateParams struct {
	ProjectID int
}

func decodeProjectsUpdateParams(args [1]string, r *http.Request) (params ProjectsUpdateParams, _ error) {
	// Decode path: project_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	return params, nil
}

type ProjectsUpdateCardParams struct {
	// Card_id parameter.
	CardID int
}

func decodeProjectsUpdateCardParams(args [1]string, r *http.Request) (params ProjectsUpdateCardParams, _ error) {
	// Decode path: card_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "card_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CardID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: card_id: not specified")
		}
	}
	return params, nil
}

type ProjectsUpdateColumnParams struct {
	// Column_id parameter.
	ColumnID int
}

func decodeProjectsUpdateColumnParams(args [1]string, r *http.Request) (params ProjectsUpdateColumnParams, _ error) {
	// Decode path: column_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "column_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ColumnID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: column_id: not specified")
		}
	}
	return params, nil
}

type PullsCheckIfMergedParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

func decodePullsCheckIfMergedParams(args [3]string, r *http.Request) (params PullsCheckIfMergedParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	return params, nil
}

type PullsCreateParams struct {
	Owner string
	Repo  string
}

func decodePullsCreateParams(args [2]string, r *http.Request) (params PullsCreateParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type PullsCreateReplyForReviewCommentParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Comment_id parameter.
	CommentID int
}

func decodePullsCreateReplyForReviewCommentParams(args [4]string, r *http.Request) (params PullsCreateReplyForReviewCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type PullsCreateReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

func decodePullsCreateReviewParams(args [3]string, r *http.Request) (params PullsCreateReviewParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	return params, nil
}

type PullsCreateReviewCommentParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

func decodePullsCreateReviewCommentParams(args [3]string, r *http.Request) (params PullsCreateReviewCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	return params, nil
}

type PullsDeletePendingReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
}

func decodePullsDeletePendingReviewParams(args [4]string, r *http.Request) (params PullsDeletePendingReviewParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Decode path: review_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "review_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReviewID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: review_id: not specified")
		}
	}
	return params, nil
}

type PullsDeleteReviewCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodePullsDeleteReviewCommentParams(args [3]string, r *http.Request) (params PullsDeleteReviewCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type PullsDismissReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
}

func decodePullsDismissReviewParams(args [4]string, r *http.Request) (params PullsDismissReviewParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Decode path: review_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "review_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReviewID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: review_id: not specified")
		}
	}
	return params, nil
}

type PullsGetParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

func decodePullsGetParams(args [3]string, r *http.Request) (params PullsGetParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	return params, nil
}

type PullsGetReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
}

func decodePullsGetReviewParams(args [4]string, r *http.Request) (params PullsGetReviewParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Decode path: review_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "review_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReviewID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: review_id: not specified")
		}
	}
	return params, nil
}

type PullsGetReviewCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodePullsGetReviewCommentParams(args [3]string, r *http.Request) (params PullsGetReviewCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type PullsListParams struct {
	Owner string
	Repo  string
	// Either `open`, `closed`, or `all` to filter by state.
	State OptPullsListState
	// Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or
	// `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
	Head OptString
	// Filter pulls by base branch name. Example: `gh-pages`.
	Base OptString
	// What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or
	// `long-running` (age, filtering by pulls updated in the last month).
	Sort OptPullsListSort
	// The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created`
	// or sort is not specified, otherwise `asc`.
	Direction OptPullsListDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodePullsListParams(args [2]string, r *http.Request) (params PullsListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: state.
	{
		val := PullsListState("open")
		params.State.SetTo(val)
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal PullsListState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = PullsListState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Decode query: head.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "head",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotHeadVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotHeadVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Head.SetTo(paramsDotHeadVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: head: parse")
			}
		}
	}
	// Decode query: base.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "base",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBaseVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBaseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Base.SetTo(paramsDotBaseVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: base: parse")
			}
		}
	}
	// Set default value for query: sort.
	{
		val := PullsListSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal PullsListSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = PullsListSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal PullsListDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = PullsListDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type PullsListCommentsForReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodePullsListCommentsForReviewParams(args [4]string, r *http.Request) (params PullsListCommentsForReviewParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Decode path: review_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "review_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReviewID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: review_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type PullsListCommitsParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodePullsListCommitsParams(args [3]string, r *http.Request) (params PullsListCommitsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type PullsListFilesParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodePullsListFilesParams(args [3]string, r *http.Request) (params PullsListFilesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type PullsListRequestedReviewersParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodePullsListRequestedReviewersParams(args [3]string, r *http.Request) (params PullsListRequestedReviewersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type PullsListReviewCommentsParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort OptPullsListReviewCommentsSort
	// Can be either `asc` or `desc`. Ignored without `sort` parameter.
	Direction OptPullsListReviewCommentsDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodePullsListReviewCommentsParams(args [3]string, r *http.Request) (params PullsListReviewCommentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Set default value for query: sort.
	{
		val := PullsListReviewCommentsSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal PullsListReviewCommentsSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = PullsListReviewCommentsSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal PullsListReviewCommentsDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = PullsListReviewCommentsDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type PullsListReviewCommentsForRepoParams struct {
	Owner string
	Repo  string
	Sort  OptPullsListReviewCommentsForRepoSort
	// Can be either `asc` or `desc`. Ignored without `sort` parameter.
	Direction OptPullsListReviewCommentsForRepoDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodePullsListReviewCommentsForRepoParams(args [2]string, r *http.Request) (params PullsListReviewCommentsForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal PullsListReviewCommentsForRepoSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = PullsListReviewCommentsForRepoSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal PullsListReviewCommentsForRepoDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = PullsListReviewCommentsForRepoDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type PullsListReviewsParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodePullsListReviewsParams(args [3]string, r *http.Request) (params PullsListReviewsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type PullsMergeParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

func decodePullsMergeParams(args [3]string, r *http.Request) (params PullsMergeParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	return params, nil
}

type PullsRemoveRequestedReviewersParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

func decodePullsRemoveRequestedReviewersParams(args [3]string, r *http.Request) (params PullsRemoveRequestedReviewersParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	return params, nil
}

type PullsSubmitReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
}

func decodePullsSubmitReviewParams(args [4]string, r *http.Request) (params PullsSubmitReviewParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Decode path: review_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "review_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReviewID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: review_id: not specified")
		}
	}
	return params, nil
}

type PullsUpdateParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

func decodePullsUpdateParams(args [3]string, r *http.Request) (params PullsUpdateParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	return params, nil
}

type PullsUpdateBranchParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

func decodePullsUpdateBranchParams(args [3]string, r *http.Request) (params PullsUpdateBranchParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	return params, nil
}

type PullsUpdateReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
}

func decodePullsUpdateReviewParams(args [4]string, r *http.Request) (params PullsUpdateReviewParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: pull_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pull_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PullNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: pull_number: not specified")
		}
	}
	// Decode path: review_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "review_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReviewID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: review_id: not specified")
		}
	}
	return params, nil
}

type PullsUpdateReviewCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodePullsUpdateReviewCommentParams(args [3]string, r *http.Request) (params PullsUpdateReviewCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type ReactionsCreateForCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodeReactionsCreateForCommitCommentParams(args [3]string, r *http.Request) (params ReactionsCreateForCommitCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type ReactionsCreateForIssueParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

func decodeReactionsCreateForIssueParams(args [3]string, r *http.Request) (params ReactionsCreateForIssueParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	return params, nil
}

type ReactionsCreateForIssueCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodeReactionsCreateForIssueCommentParams(args [3]string, r *http.Request) (params ReactionsCreateForIssueCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type ReactionsCreateForPullRequestReviewCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodeReactionsCreateForPullRequestReviewCommentParams(args [3]string, r *http.Request) (params ReactionsCreateForPullRequestReviewCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type ReactionsCreateForReleaseParams struct {
	Owner string
	Repo  string
	// Release_id parameter.
	ReleaseID int
}

func decodeReactionsCreateForReleaseParams(args [3]string, r *http.Request) (params ReactionsCreateForReleaseParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: release_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "release_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReleaseID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: release_id: not specified")
		}
	}
	return params, nil
}

type ReactionsCreateForTeamDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
}

func decodeReactionsCreateForTeamDiscussionCommentInOrgParams(args [4]string, r *http.Request) (params ReactionsCreateForTeamDiscussionCommentInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	return params, nil
}

type ReactionsCreateForTeamDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	CommentNumber    int
}

func decodeReactionsCreateForTeamDiscussionCommentLegacyParams(args [3]string, r *http.Request) (params ReactionsCreateForTeamDiscussionCommentLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	return params, nil
}

type ReactionsCreateForTeamDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
}

func decodeReactionsCreateForTeamDiscussionInOrgParams(args [3]string, r *http.Request) (params ReactionsCreateForTeamDiscussionInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	return params, nil
}

type ReactionsCreateForTeamDiscussionLegacyParams struct {
	TeamID           int
	DiscussionNumber int
}

func decodeReactionsCreateForTeamDiscussionLegacyParams(args [2]string, r *http.Request) (params ReactionsCreateForTeamDiscussionLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	return params, nil
}

type ReactionsDeleteForCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID  int
	ReactionID int
}

func decodeReactionsDeleteForCommitCommentParams(args [4]string, r *http.Request) (params ReactionsDeleteForCommitCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	// Decode path: reaction_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "reaction_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReactionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: reaction_id: not specified")
		}
	}
	return params, nil
}

type ReactionsDeleteForIssueParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
	ReactionID  int
}

func decodeReactionsDeleteForIssueParams(args [4]string, r *http.Request) (params ReactionsDeleteForIssueParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	// Decode path: reaction_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "reaction_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReactionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: reaction_id: not specified")
		}
	}
	return params, nil
}

type ReactionsDeleteForIssueCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID  int
	ReactionID int
}

func decodeReactionsDeleteForIssueCommentParams(args [4]string, r *http.Request) (params ReactionsDeleteForIssueCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	// Decode path: reaction_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "reaction_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReactionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: reaction_id: not specified")
		}
	}
	return params, nil
}

type ReactionsDeleteForPullRequestCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID  int
	ReactionID int
}

func decodeReactionsDeleteForPullRequestCommentParams(args [4]string, r *http.Request) (params ReactionsDeleteForPullRequestCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	// Decode path: reaction_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "reaction_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReactionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: reaction_id: not specified")
		}
	}
	return params, nil
}

type ReactionsDeleteForTeamDiscussionParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	ReactionID       int
}

func decodeReactionsDeleteForTeamDiscussionParams(args [4]string, r *http.Request) (params ReactionsDeleteForTeamDiscussionParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: reaction_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "reaction_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReactionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: reaction_id: not specified")
		}
	}
	return params, nil
}

type ReactionsDeleteForTeamDiscussionCommentParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
	ReactionID       int
}

func decodeReactionsDeleteForTeamDiscussionCommentParams(args [5]string, r *http.Request) (params ReactionsDeleteForTeamDiscussionCommentParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	// Decode path: reaction_id.
	{
		param := args[4]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "reaction_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReactionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: reaction_id: not specified")
		}
	}
	return params, nil
}

type ReactionsDeleteLegacyParams struct {
	ReactionID int
}

func decodeReactionsDeleteLegacyParams(args [1]string, r *http.Request) (params ReactionsDeleteLegacyParams, _ error) {
	// Decode path: reaction_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "reaction_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReactionID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: reaction_id: not specified")
		}
	}
	return params, nil
}

type ReactionsListForCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a commit comment.
	Content OptReactionsListForCommitCommentContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReactionsListForCommitCommentParams(args [3]string, r *http.Request) (params ReactionsListForCommitCommentParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	// Decode query: content.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentVal ReactionsListForCommitCommentContent
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContentVal = ReactionsListForCommitCommentContent(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Content.SetTo(paramsDotContentVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: content: parse")
			}
			if err := func() error {
				if params.Content.Set {
					if err := func() error {
						if err := params.Content.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: content: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReactionsListForIssueParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to an issue.
	Content OptReactionsListForIssueContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReactionsListForIssueParams(args [3]string, r *http.Request) (params ReactionsListForIssueParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: issue_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "issue_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.IssueNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: issue_number: not specified")
		}
	}
	// Decode query: content.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentVal ReactionsListForIssueContent
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContentVal = ReactionsListForIssueContent(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Content.SetTo(paramsDotContentVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: content: parse")
			}
			if err := func() error {
				if params.Content.Set {
					if err := func() error {
						if err := params.Content.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: content: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReactionsListForIssueCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to an issue comment.
	Content OptReactionsListForIssueCommentContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReactionsListForIssueCommentParams(args [3]string, r *http.Request) (params ReactionsListForIssueCommentParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	// Decode query: content.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentVal ReactionsListForIssueCommentContent
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContentVal = ReactionsListForIssueCommentContent(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Content.SetTo(paramsDotContentVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: content: parse")
			}
			if err := func() error {
				if params.Content.Set {
					if err := func() error {
						if err := params.Content.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: content: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReactionsListForPullRequestReviewCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a pull request review comment.
	Content OptReactionsListForPullRequestReviewCommentContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReactionsListForPullRequestReviewCommentParams(args [3]string, r *http.Request) (params ReactionsListForPullRequestReviewCommentParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	// Decode query: content.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentVal ReactionsListForPullRequestReviewCommentContent
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContentVal = ReactionsListForPullRequestReviewCommentContent(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Content.SetTo(paramsDotContentVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: content: parse")
			}
			if err := func() error {
				if params.Content.Set {
					if err := func() error {
						if err := params.Content.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: content: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReactionsListForTeamDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a team discussion comment.
	Content OptReactionsListForTeamDiscussionCommentInOrgContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReactionsListForTeamDiscussionCommentInOrgParams(args [4]string, r *http.Request) (params ReactionsListForTeamDiscussionCommentInOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	// Decode query: content.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentVal ReactionsListForTeamDiscussionCommentInOrgContent
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContentVal = ReactionsListForTeamDiscussionCommentInOrgContent(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Content.SetTo(paramsDotContentVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: content: parse")
			}
			if err := func() error {
				if params.Content.Set {
					if err := func() error {
						if err := params.Content.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: content: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReactionsListForTeamDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	CommentNumber    int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a team discussion comment.
	Content OptReactionsListForTeamDiscussionCommentLegacyContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReactionsListForTeamDiscussionCommentLegacyParams(args [3]string, r *http.Request) (params ReactionsListForTeamDiscussionCommentLegacyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	// Decode query: content.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentVal ReactionsListForTeamDiscussionCommentLegacyContent
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContentVal = ReactionsListForTeamDiscussionCommentLegacyContent(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Content.SetTo(paramsDotContentVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: content: parse")
			}
			if err := func() error {
				if params.Content.Set {
					if err := func() error {
						if err := params.Content.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: content: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReactionsListForTeamDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a team discussion.
	Content OptReactionsListForTeamDiscussionInOrgContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReactionsListForTeamDiscussionInOrgParams(args [3]string, r *http.Request) (params ReactionsListForTeamDiscussionInOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode query: content.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentVal ReactionsListForTeamDiscussionInOrgContent
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContentVal = ReactionsListForTeamDiscussionInOrgContent(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Content.SetTo(paramsDotContentVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: content: parse")
			}
			if err := func() error {
				if params.Content.Set {
					if err := func() error {
						if err := params.Content.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: content: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReactionsListForTeamDiscussionLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a team discussion.
	Content OptReactionsListForTeamDiscussionLegacyContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReactionsListForTeamDiscussionLegacyParams(args [2]string, r *http.Request) (params ReactionsListForTeamDiscussionLegacyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode query: content.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "content",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentVal ReactionsListForTeamDiscussionLegacyContent
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContentVal = ReactionsListForTeamDiscussionLegacyContent(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Content.SetTo(paramsDotContentVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: content: parse")
			}
			if err := func() error {
				if params.Content.Set {
					if err := func() error {
						if err := params.Content.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: content: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposAcceptInvitationParams struct {
	// Invitation_id parameter.
	InvitationID int
}

func decodeReposAcceptInvitationParams(args [1]string, r *http.Request) (params ReposAcceptInvitationParams, _ error) {
	// Decode path: invitation_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "invitation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InvitationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: invitation_id: not specified")
		}
	}
	return params, nil
}

type ReposAddAppAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposAddAppAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposAddAppAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposAddCollaboratorParams struct {
	Owner    string
	Repo     string
	Username string
}

func decodeReposAddCollaboratorParams(args [3]string, r *http.Request) (params ReposAddCollaboratorParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type ReposAddStatusCheckContextsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposAddStatusCheckContextsParams(args [3]string, r *http.Request) (params ReposAddStatusCheckContextsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposAddTeamAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposAddTeamAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposAddTeamAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposAddUserAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposAddUserAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposAddUserAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposCheckCollaboratorParams struct {
	Owner    string
	Repo     string
	Username string
}

func decodeReposCheckCollaboratorParams(args [3]string, r *http.Request) (params ReposCheckCollaboratorParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type ReposCheckVulnerabilityAlertsParams struct {
	Owner string
	Repo  string
}

func decodeReposCheckVulnerabilityAlertsParams(args [2]string, r *http.Request) (params ReposCheckVulnerabilityAlertsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposCompareCommitsParams struct {
	Owner string
	Repo  string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The base branch and head branch to compare. This parameter expects the format `{base}...{head}`.
	Basehead string
}

func decodeReposCompareCommitsParams(args [3]string, r *http.Request) (params ReposCompareCommitsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Decode path: basehead.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "basehead",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Basehead = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: basehead: not specified")
		}
	}
	return params, nil
}

type ReposCreateAutolinkParams struct {
	Owner string
	Repo  string
}

func decodeReposCreateAutolinkParams(args [2]string, r *http.Request) (params ReposCreateAutolinkParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposCreateCommitCommentParams struct {
	Owner string
	Repo  string
	// Commit_sha parameter.
	CommitSha string
}

func decodeReposCreateCommitCommentParams(args [3]string, r *http.Request) (params ReposCreateCommitCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: commit_sha.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "commit_sha",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CommitSha = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: commit_sha: not specified")
		}
	}
	return params, nil
}

type ReposCreateCommitSignatureProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposCreateCommitSignatureProtectionParams(args [3]string, r *http.Request) (params ReposCreateCommitSignatureProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposCreateCommitStatusParams struct {
	Owner string
	Repo  string
	Sha   string
}

func decodeReposCreateCommitStatusParams(args [3]string, r *http.Request) (params ReposCreateCommitStatusParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: sha.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sha",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Sha = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: sha: not specified")
		}
	}
	return params, nil
}

type ReposCreateDeployKeyParams struct {
	Owner string
	Repo  string
}

func decodeReposCreateDeployKeyParams(args [2]string, r *http.Request) (params ReposCreateDeployKeyParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposCreateDeploymentParams struct {
	Owner string
	Repo  string
}

func decodeReposCreateDeploymentParams(args [2]string, r *http.Request) (params ReposCreateDeploymentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposCreateDeploymentStatusParams struct {
	Owner string
	Repo  string
	// Deployment_id parameter.
	DeploymentID int
}

func decodeReposCreateDeploymentStatusParams(args [3]string, r *http.Request) (params ReposCreateDeploymentStatusParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: deployment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "deployment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeploymentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: deployment_id: not specified")
		}
	}
	return params, nil
}

type ReposCreateDispatchEventParams struct {
	Owner string
	Repo  string
}

func decodeReposCreateDispatchEventParams(args [2]string, r *http.Request) (params ReposCreateDispatchEventParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposCreateForkParams struct {
	Owner string
	Repo  string
}

func decodeReposCreateForkParams(args [2]string, r *http.Request) (params ReposCreateForkParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposCreateInOrgParams struct {
	Org string
}

func decodeReposCreateInOrgParams(args [1]string, r *http.Request) (params ReposCreateInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type ReposCreateOrUpdateFileContentsParams struct {
	Owner string
	Repo  string
	// Path parameter.
	Path string
}

func decodeReposCreateOrUpdateFileContentsParams(args [3]string, r *http.Request) (params ReposCreateOrUpdateFileContentsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: path.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: path: not specified")
		}
	}
	return params, nil
}

type ReposCreatePagesSiteParams struct {
	Owner string
	Repo  string
}

func decodeReposCreatePagesSiteParams(args [2]string, r *http.Request) (params ReposCreatePagesSiteParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposCreateReleaseParams struct {
	Owner string
	Repo  string
}

func decodeReposCreateReleaseParams(args [2]string, r *http.Request) (params ReposCreateReleaseParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposCreateUsingTemplateParams struct {
	TemplateOwner string
	TemplateRepo  string
}

func decodeReposCreateUsingTemplateParams(args [2]string, r *http.Request) (params ReposCreateUsingTemplateParams, _ error) {
	// Decode path: template_owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "template_owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TemplateOwner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: template_owner: not specified")
		}
	}
	// Decode path: template_repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "template_repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TemplateRepo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: template_repo: not specified")
		}
	}
	return params, nil
}

type ReposCreateWebhookParams struct {
	Owner string
	Repo  string
}

func decodeReposCreateWebhookParams(args [2]string, r *http.Request) (params ReposCreateWebhookParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposDeclineInvitationParams struct {
	// Invitation_id parameter.
	InvitationID int
}

func decodeReposDeclineInvitationParams(args [1]string, r *http.Request) (params ReposDeclineInvitationParams, _ error) {
	// Decode path: invitation_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "invitation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InvitationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: invitation_id: not specified")
		}
	}
	return params, nil
}

type ReposDeleteParams struct {
	Owner string
	Repo  string
}

func decodeReposDeleteParams(args [2]string, r *http.Request) (params ReposDeleteParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposDeleteAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposDeleteAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposDeleteAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposDeleteAdminBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposDeleteAdminBranchProtectionParams(args [3]string, r *http.Request) (params ReposDeleteAdminBranchProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposDeleteAnEnvironmentParams struct {
	Owner string
	Repo  string
	// The name of the environment.
	EnvironmentName string
}

func decodeReposDeleteAnEnvironmentParams(args [3]string, r *http.Request) (params ReposDeleteAnEnvironmentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: environment_name.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "environment_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EnvironmentName = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: environment_name: not specified")
		}
	}
	return params, nil
}

type ReposDeleteAutolinkParams struct {
	Owner string
	Repo  string
	// Autolink_id parameter.
	AutolinkID int
}

func decodeReposDeleteAutolinkParams(args [3]string, r *http.Request) (params ReposDeleteAutolinkParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: autolink_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "autolink_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AutolinkID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: autolink_id: not specified")
		}
	}
	return params, nil
}

type ReposDeleteBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposDeleteBranchProtectionParams(args [3]string, r *http.Request) (params ReposDeleteBranchProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposDeleteCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodeReposDeleteCommitCommentParams(args [3]string, r *http.Request) (params ReposDeleteCommitCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type ReposDeleteCommitSignatureProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposDeleteCommitSignatureProtectionParams(args [3]string, r *http.Request) (params ReposDeleteCommitSignatureProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposDeleteDeployKeyParams struct {
	Owner string
	Repo  string
	// Key_id parameter.
	KeyID int
}

func decodeReposDeleteDeployKeyParams(args [3]string, r *http.Request) (params ReposDeleteDeployKeyParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: key_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "key_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.KeyID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: key_id: not specified")
		}
	}
	return params, nil
}

type ReposDeleteDeploymentParams struct {
	Owner string
	Repo  string
	// Deployment_id parameter.
	DeploymentID int
}

func decodeReposDeleteDeploymentParams(args [3]string, r *http.Request) (params ReposDeleteDeploymentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: deployment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "deployment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeploymentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: deployment_id: not specified")
		}
	}
	return params, nil
}

type ReposDeleteFileParams struct {
	Owner string
	Repo  string
	// Path parameter.
	Path string
}

func decodeReposDeleteFileParams(args [3]string, r *http.Request) (params ReposDeleteFileParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: path.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "path",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: path: not specified")
		}
	}
	return params, nil
}

type ReposDeleteInvitationParams struct {
	Owner string
	Repo  string
	// Invitation_id parameter.
	InvitationID int
}

func decodeReposDeleteInvitationParams(args [3]string, r *http.Request) (params ReposDeleteInvitationParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: invitation_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "invitation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InvitationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: invitation_id: not specified")
		}
	}
	return params, nil
}

type ReposDeletePagesSiteParams struct {
	Owner string
	Repo  string
}

func decodeReposDeletePagesSiteParams(args [2]string, r *http.Request) (params ReposDeletePagesSiteParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposDeletePullRequestReviewProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposDeletePullRequestReviewProtectionParams(args [3]string, r *http.Request) (params ReposDeletePullRequestReviewProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposDeleteReleaseParams struct {
	Owner string
	Repo  string
	// Release_id parameter.
	ReleaseID int
}

func decodeReposDeleteReleaseParams(args [3]string, r *http.Request) (params ReposDeleteReleaseParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: release_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "release_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReleaseID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: release_id: not specified")
		}
	}
	return params, nil
}

type ReposDeleteReleaseAssetParams struct {
	Owner string
	Repo  string
	// Asset_id parameter.
	AssetID int
}

func decodeReposDeleteReleaseAssetParams(args [3]string, r *http.Request) (params ReposDeleteReleaseAssetParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: asset_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "asset_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AssetID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: asset_id: not specified")
		}
	}
	return params, nil
}

type ReposDeleteWebhookParams struct {
	Owner  string
	Repo   string
	HookID int
}

func decodeReposDeleteWebhookParams(args [3]string, r *http.Request) (params ReposDeleteWebhookParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type ReposDisableAutomatedSecurityFixesParams struct {
	Owner string
	Repo  string
}

func decodeReposDisableAutomatedSecurityFixesParams(args [2]string, r *http.Request) (params ReposDisableAutomatedSecurityFixesParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposDisableLfsForRepoParams struct {
	Owner string
	Repo  string
}

func decodeReposDisableLfsForRepoParams(args [2]string, r *http.Request) (params ReposDisableLfsForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposDisableVulnerabilityAlertsParams struct {
	Owner string
	Repo  string
}

func decodeReposDisableVulnerabilityAlertsParams(args [2]string, r *http.Request) (params ReposDisableVulnerabilityAlertsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposDownloadTarballArchiveParams struct {
	Owner string
	Repo  string
	Ref   string
}

func decodeReposDownloadTarballArchiveParams(args [3]string, r *http.Request) (params ReposDownloadTarballArchiveParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	return params, nil
}

type ReposDownloadZipballArchiveParams struct {
	Owner string
	Repo  string
	Ref   string
}

func decodeReposDownloadZipballArchiveParams(args [3]string, r *http.Request) (params ReposDownloadZipballArchiveParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	return params, nil
}

type ReposEnableAutomatedSecurityFixesParams struct {
	Owner string
	Repo  string
}

func decodeReposEnableAutomatedSecurityFixesParams(args [2]string, r *http.Request) (params ReposEnableAutomatedSecurityFixesParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposEnableLfsForRepoParams struct {
	Owner string
	Repo  string
}

func decodeReposEnableLfsForRepoParams(args [2]string, r *http.Request) (params ReposEnableLfsForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposEnableVulnerabilityAlertsParams struct {
	Owner string
	Repo  string
}

func decodeReposEnableVulnerabilityAlertsParams(args [2]string, r *http.Request) (params ReposEnableVulnerabilityAlertsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetParams struct {
	Owner string
	Repo  string
}

func decodeReposGetParams(args [2]string, r *http.Request) (params ReposGetParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposGetAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetAdminBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetAdminBranchProtectionParams(args [3]string, r *http.Request) (params ReposGetAdminBranchProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetAllStatusCheckContextsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetAllStatusCheckContextsParams(args [3]string, r *http.Request) (params ReposGetAllStatusCheckContextsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetAllTopicsParams struct {
	Owner string
	Repo  string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

func decodeReposGetAllTopicsParams(args [2]string, r *http.Request) (params ReposGetAllTopicsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	return params, nil
}

type ReposGetAppsWithAccessToProtectedBranchParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetAppsWithAccessToProtectedBranchParams(args [3]string, r *http.Request) (params ReposGetAppsWithAccessToProtectedBranchParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetAutolinkParams struct {
	Owner string
	Repo  string
	// Autolink_id parameter.
	AutolinkID int
}

func decodeReposGetAutolinkParams(args [3]string, r *http.Request) (params ReposGetAutolinkParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: autolink_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "autolink_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AutolinkID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: autolink_id: not specified")
		}
	}
	return params, nil
}

type ReposGetBranchParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetBranchParams(args [3]string, r *http.Request) (params ReposGetBranchParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetBranchProtectionParams(args [3]string, r *http.Request) (params ReposGetBranchProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetClonesParams struct {
	Owner string
	Repo  string
	// Must be one of: `day`, `week`.
	Per OptReposGetClonesPer
}

func decodeReposGetClonesParams(args [2]string, r *http.Request) (params ReposGetClonesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per.
	{
		val := ReposGetClonesPer("day")
		params.Per.SetTo(val)
	}
	// Decode query: per.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerVal ReposGetClonesPer
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPerVal = ReposGetClonesPer(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Per.SetTo(paramsDotPerVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per: parse")
			}
			if err := func() error {
				if params.Per.Set {
					if err := func() error {
						if err := params.Per.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: per: invalid")
			}
		}
	}
	return params, nil
}

type ReposGetCodeFrequencyStatsParams struct {
	Owner string
	Repo  string
}

func decodeReposGetCodeFrequencyStatsParams(args [2]string, r *http.Request) (params ReposGetCodeFrequencyStatsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetCollaboratorPermissionLevelParams struct {
	Owner    string
	Repo     string
	Username string
}

func decodeReposGetCollaboratorPermissionLevelParams(args [3]string, r *http.Request) (params ReposGetCollaboratorPermissionLevelParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type ReposGetCombinedStatusForRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposGetCombinedStatusForRefParams(args [3]string, r *http.Request) (params ReposGetCombinedStatusForRefParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposGetCommitParams struct {
	Owner string
	Repo  string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// Ref parameter.
	Ref string
}

func decodeReposGetCommitParams(args [3]string, r *http.Request) (params ReposGetCommitParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	return params, nil
}

type ReposGetCommitActivityStatsParams struct {
	Owner string
	Repo  string
}

func decodeReposGetCommitActivityStatsParams(args [2]string, r *http.Request) (params ReposGetCommitActivityStatsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodeReposGetCommitCommentParams(args [3]string, r *http.Request) (params ReposGetCommitCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type ReposGetCommitSignatureProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetCommitSignatureProtectionParams(args [3]string, r *http.Request) (params ReposGetCommitSignatureProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetCommunityProfileMetricsParams struct {
	Owner string
	Repo  string
}

func decodeReposGetCommunityProfileMetricsParams(args [2]string, r *http.Request) (params ReposGetCommunityProfileMetricsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetContributorsStatsParams struct {
	Owner string
	Repo  string
}

func decodeReposGetContributorsStatsParams(args [2]string, r *http.Request) (params ReposGetContributorsStatsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetDeployKeyParams struct {
	Owner string
	Repo  string
	// Key_id parameter.
	KeyID int
}

func decodeReposGetDeployKeyParams(args [3]string, r *http.Request) (params ReposGetDeployKeyParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: key_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "key_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.KeyID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: key_id: not specified")
		}
	}
	return params, nil
}

type ReposGetDeploymentParams struct {
	Owner string
	Repo  string
	// Deployment_id parameter.
	DeploymentID int
}

func decodeReposGetDeploymentParams(args [3]string, r *http.Request) (params ReposGetDeploymentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: deployment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "deployment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeploymentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: deployment_id: not specified")
		}
	}
	return params, nil
}

type ReposGetDeploymentStatusParams struct {
	Owner string
	Repo  string
	// Deployment_id parameter.
	DeploymentID int
	StatusID     int
}

func decodeReposGetDeploymentStatusParams(args [4]string, r *http.Request) (params ReposGetDeploymentStatusParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: deployment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "deployment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeploymentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: deployment_id: not specified")
		}
	}
	// Decode path: status_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "status_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.StatusID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: status_id: not specified")
		}
	}
	return params, nil
}

type ReposGetLatestPagesBuildParams struct {
	Owner string
	Repo  string
}

func decodeReposGetLatestPagesBuildParams(args [2]string, r *http.Request) (params ReposGetLatestPagesBuildParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetLatestReleaseParams struct {
	Owner string
	Repo  string
}

func decodeReposGetLatestReleaseParams(args [2]string, r *http.Request) (params ReposGetLatestReleaseParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetPagesParams struct {
	Owner string
	Repo  string
}

func decodeReposGetPagesParams(args [2]string, r *http.Request) (params ReposGetPagesParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetPagesBuildParams struct {
	Owner   string
	Repo    string
	BuildID int
}

func decodeReposGetPagesBuildParams(args [3]string, r *http.Request) (params ReposGetPagesBuildParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: build_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "build_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.BuildID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: build_id: not specified")
		}
	}
	return params, nil
}

type ReposGetPagesHealthCheckParams struct {
	Owner string
	Repo  string
}

func decodeReposGetPagesHealthCheckParams(args [2]string, r *http.Request) (params ReposGetPagesHealthCheckParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetParticipationStatsParams struct {
	Owner string
	Repo  string
}

func decodeReposGetParticipationStatsParams(args [2]string, r *http.Request) (params ReposGetParticipationStatsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetPullRequestReviewProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetPullRequestReviewProtectionParams(args [3]string, r *http.Request) (params ReposGetPullRequestReviewProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetPunchCardStatsParams struct {
	Owner string
	Repo  string
}

func decodeReposGetPunchCardStatsParams(args [2]string, r *http.Request) (params ReposGetPunchCardStatsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetReadmeParams struct {
	Owner string
	Repo  string
	// The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`).
	Ref OptString
}

func decodeReposGetReadmeParams(args [2]string, r *http.Request) (params ReposGetReadmeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: ref.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ref",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRefVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRefVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Ref.SetTo(paramsDotRefVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: ref: parse")
			}
		}
	}
	return params, nil
}

type ReposGetReadmeInDirectoryParams struct {
	Owner string
	Repo  string
	// The alternate path to look for a README file.
	Dir string
	// The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`).
	Ref OptString
}

func decodeReposGetReadmeInDirectoryParams(args [3]string, r *http.Request) (params ReposGetReadmeInDirectoryParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: dir.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "dir",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Dir = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: dir: not specified")
		}
	}
	// Decode query: ref.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ref",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRefVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRefVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Ref.SetTo(paramsDotRefVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: ref: parse")
			}
		}
	}
	return params, nil
}

type ReposGetReleaseParams struct {
	Owner string
	Repo  string
	// Release_id parameter.
	ReleaseID int
}

func decodeReposGetReleaseParams(args [3]string, r *http.Request) (params ReposGetReleaseParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: release_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "release_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReleaseID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: release_id: not specified")
		}
	}
	return params, nil
}

type ReposGetReleaseAssetParams struct {
	Owner string
	Repo  string
	// Asset_id parameter.
	AssetID int
}

func decodeReposGetReleaseAssetParams(args [3]string, r *http.Request) (params ReposGetReleaseAssetParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: asset_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "asset_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AssetID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: asset_id: not specified")
		}
	}
	return params, nil
}

type ReposGetReleaseByTagParams struct {
	Owner string
	Repo  string
	// Tag parameter.
	Tag string
}

func decodeReposGetReleaseByTagParams(args [3]string, r *http.Request) (params ReposGetReleaseByTagParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: tag.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tag",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Tag = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: tag: not specified")
		}
	}
	return params, nil
}

type ReposGetStatusChecksProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetStatusChecksProtectionParams(args [3]string, r *http.Request) (params ReposGetStatusChecksProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetTeamsWithAccessToProtectedBranchParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetTeamsWithAccessToProtectedBranchParams(args [3]string, r *http.Request) (params ReposGetTeamsWithAccessToProtectedBranchParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetTopPathsParams struct {
	Owner string
	Repo  string
}

func decodeReposGetTopPathsParams(args [2]string, r *http.Request) (params ReposGetTopPathsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetTopReferrersParams struct {
	Owner string
	Repo  string
}

func decodeReposGetTopReferrersParams(args [2]string, r *http.Request) (params ReposGetTopReferrersParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposGetUsersWithAccessToProtectedBranchParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposGetUsersWithAccessToProtectedBranchParams(args [3]string, r *http.Request) (params ReposGetUsersWithAccessToProtectedBranchParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposGetViewsParams struct {
	Owner string
	Repo  string
	// Must be one of: `day`, `week`.
	Per OptReposGetViewsPer
}

func decodeReposGetViewsParams(args [2]string, r *http.Request) (params ReposGetViewsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per.
	{
		val := ReposGetViewsPer("day")
		params.Per.SetTo(val)
	}
	// Decode query: per.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerVal ReposGetViewsPer
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPerVal = ReposGetViewsPer(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Per.SetTo(paramsDotPerVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per: parse")
			}
			if err := func() error {
				if params.Per.Set {
					if err := func() error {
						if err := params.Per.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: per: invalid")
			}
		}
	}
	return params, nil
}

type ReposGetWebhookParams struct {
	Owner  string
	Repo   string
	HookID int
}

func decodeReposGetWebhookParams(args [3]string, r *http.Request) (params ReposGetWebhookParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type ReposGetWebhookConfigForRepoParams struct {
	Owner  string
	Repo   string
	HookID int
}

func decodeReposGetWebhookConfigForRepoParams(args [3]string, r *http.Request) (params ReposGetWebhookConfigForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type ReposGetWebhookDeliveryParams struct {
	Owner      string
	Repo       string
	HookID     int
	DeliveryID int
}

func decodeReposGetWebhookDeliveryParams(args [4]string, r *http.Request) (params ReposGetWebhookDeliveryParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	// Decode path: delivery_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "delivery_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeliveryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: delivery_id: not specified")
		}
	}
	return params, nil
}

type ReposListAutolinksParams struct {
	Owner string
	Repo  string
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListAutolinksParams(args [2]string, r *http.Request) (params ReposListAutolinksParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListBranchesParams struct {
	Owner string
	Repo  string
	// Setting to `true` returns only protected branches. When set to `false`, only unprotected branches
	// are returned. Omitting this parameter returns all branches.
	Protected OptBool
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListBranchesParams(args [2]string, r *http.Request) (params ReposListBranchesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: protected.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "protected",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProtectedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotProtectedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Protected.SetTo(paramsDotProtectedVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: protected: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListBranchesForHeadCommitParams struct {
	Owner string
	Repo  string
	// Commit_sha parameter.
	CommitSha string
}

func decodeReposListBranchesForHeadCommitParams(args [3]string, r *http.Request) (params ReposListBranchesForHeadCommitParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: commit_sha.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "commit_sha",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CommitSha = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: commit_sha: not specified")
		}
	}
	return params, nil
}

type ReposListCollaboratorsParams struct {
	Owner string
	Repo  string
	// Filter collaborators returned by their affiliation. Can be one of:
	// \* `outside`: All outside collaborators of an organization-owned repository.
	// \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of
	// organization membership status.
	// \* `all`: All collaborators the authenticated user can see.
	Affiliation OptReposListCollaboratorsAffiliation
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListCollaboratorsParams(args [2]string, r *http.Request) (params ReposListCollaboratorsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: affiliation.
	{
		val := ReposListCollaboratorsAffiliation("all")
		params.Affiliation.SetTo(val)
	}
	// Decode query: affiliation.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "affiliation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAffiliationVal ReposListCollaboratorsAffiliation
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAffiliationVal = ReposListCollaboratorsAffiliation(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Affiliation.SetTo(paramsDotAffiliationVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: affiliation: parse")
			}
			if err := func() error {
				if params.Affiliation.Set {
					if err := func() error {
						if err := params.Affiliation.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: affiliation: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListCommentsForCommitParams struct {
	Owner string
	Repo  string
	// Commit_sha parameter.
	CommitSha string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListCommentsForCommitParams(args [3]string, r *http.Request) (params ReposListCommentsForCommitParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: commit_sha.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "commit_sha",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CommitSha = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: commit_sha: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListCommitCommentsForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListCommitCommentsForRepoParams(args [2]string, r *http.Request) (params ReposListCommitCommentsForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListCommitStatusesForRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListCommitStatusesForRefParams(args [3]string, r *http.Request) (params ReposListCommitStatusesForRefParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: ref.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ref",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ref = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: ref: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListCommitsParams struct {
	Owner string
	Repo  string
	// SHA or branch to start listing commits from. Default: the repository’s default branch (usually
	// `master`).
	Sha OptString
	// Only commits containing this file path will be returned.
	Path OptString
	// GitHub login or email address by which to filter by commit author.
	Author OptString
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Until OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListCommitsParams(args [2]string, r *http.Request) (params ReposListCommitsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: sha.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sha",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotShaVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotShaVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Sha.SetTo(paramsDotShaVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sha: parse")
			}
		}
	}
	// Decode query: path.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPathVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: path: parse")
			}
		}
	}
	// Decode query: author.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "author",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAuthorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAuthorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Author.SetTo(paramsDotAuthorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: author: parse")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Decode query: until.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "until",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUntilVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotUntilVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Until.SetTo(paramsDotUntilVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: until: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListContributorsParams struct {
	Owner string
	Repo  string
	// Set to `1` or `true` to include anonymous contributors in results.
	Anon OptString
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListContributorsParams(args [2]string, r *http.Request) (params ReposListContributorsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: anon.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "anon",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAnonVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAnonVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Anon.SetTo(paramsDotAnonVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: anon: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListDeployKeysParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListDeployKeysParams(args [2]string, r *http.Request) (params ReposListDeployKeysParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListDeploymentStatusesParams struct {
	Owner string
	Repo  string
	// Deployment_id parameter.
	DeploymentID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListDeploymentStatusesParams(args [3]string, r *http.Request) (params ReposListDeploymentStatusesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: deployment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "deployment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeploymentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: deployment_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListDeploymentsParams struct {
	Owner string
	Repo  string
	// The SHA recorded at creation time.
	Sha OptString
	// The name of the ref. This can be a branch, tag, or SHA.
	Ref OptString
	// The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
	Task OptString
	// The name of the environment that was deployed to (e.g., `staging` or `production`).
	Environment OptNilString
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListDeploymentsParams(args [2]string, r *http.Request) (params ReposListDeploymentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: sha.
	{
		val := string("none")
		params.Sha.SetTo(val)
	}
	// Decode query: sha.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sha",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotShaVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotShaVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Sha.SetTo(paramsDotShaVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sha: parse")
			}
		}
	}
	// Set default value for query: ref.
	{
		val := string("none")
		params.Ref.SetTo(val)
	}
	// Decode query: ref.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ref",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRefVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRefVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Ref.SetTo(paramsDotRefVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: ref: parse")
			}
		}
	}
	// Set default value for query: task.
	{
		val := string("none")
		params.Task.SetTo(val)
	}
	// Decode query: task.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "task",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTaskVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTaskVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Task.SetTo(paramsDotTaskVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: task: parse")
			}
		}
	}
	// Set default value for query: environment.
	{
		val := string("none")
		params.Environment.SetTo(val)
	}
	// Decode query: environment.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEnvironmentVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEnvironmentVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Environment.SetTo(paramsDotEnvironmentVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: environment: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListForAuthenticatedUserParams struct {
	// Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`,
	// or `private`.
	Visibility OptReposListForAuthenticatedUserVisibility
	// Comma-separated list of values. Can include:
	// \* `owner`: Repositories that are owned by the authenticated user.
	// \* `collaborator`: Repositories that the user has been added to as a collaborator.
	// \* `organization_member`: Repositories that the user has access to through being a member of an
	// organization. This includes every repository on every team that the user is on.
	Affiliation OptString
	// Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of
	// `all`, `owner`, `internal`, `private`, `member`. Default: `all`
	// Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will
	// cause a `422` error if used in the same request as **visibility** or **affiliation**.
	Type OptReposListForAuthenticatedUserType
	// Can be one of `created`, `updated`, `pushed`, `full_name`.
	Sort OptReposListForAuthenticatedUserSort
	// Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`.
	Direction OptReposListForAuthenticatedUserDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Only show notifications updated before the given time. This is a timestamp in [ISO
	// 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Before OptDateTime
}

func decodeReposListForAuthenticatedUserParams(args [0]string, r *http.Request) (params ReposListForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: visibility.
	{
		val := ReposListForAuthenticatedUserVisibility("all")
		params.Visibility.SetTo(val)
	}
	// Decode query: visibility.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "visibility",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVisibilityVal ReposListForAuthenticatedUserVisibility
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVisibilityVal = ReposListForAuthenticatedUserVisibility(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Visibility.SetTo(paramsDotVisibilityVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: visibility: parse")
			}
			if err := func() error {
				if params.Visibility.Set {
					if err := func() error {
						if err := params.Visibility.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: visibility: invalid")
			}
		}
	}
	// Set default value for query: affiliation.
	{
		val := string("owner,collaborator,organization_member")
		params.Affiliation.SetTo(val)
	}
	// Decode query: affiliation.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "affiliation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAffiliationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAffiliationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Affiliation.SetTo(paramsDotAffiliationVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: affiliation: parse")
			}
		}
	}
	// Set default value for query: type.
	{
		val := ReposListForAuthenticatedUserType("all")
		params.Type.SetTo(val)
	}
	// Decode query: type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal ReposListForAuthenticatedUserType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = ReposListForAuthenticatedUserType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: type: parse")
			}
			if err := func() error {
				if params.Type.Set {
					if err := func() error {
						if err := params.Type.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: type: invalid")
			}
		}
	}
	// Set default value for query: sort.
	{
		val := ReposListForAuthenticatedUserSort("full_name")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal ReposListForAuthenticatedUserSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = ReposListForAuthenticatedUserSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal ReposListForAuthenticatedUserDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = ReposListForAuthenticatedUserDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Decode query: before.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "before",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBeforeVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotBeforeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Before.SetTo(paramsDotBeforeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: before: parse")
			}
		}
	}
	return params, nil
}

type ReposListForOrgParams struct {
	Org string
	// Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`,
	// `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`,
	// `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with
	// an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can
	// also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls
	// this API with an installation access token.
	Type OptReposListForOrgType
	// Can be one of `created`, `updated`, `pushed`, `full_name`.
	Sort OptReposListForOrgSort
	// Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`.
	Direction OptReposListForOrgDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListForOrgParams(args [1]string, r *http.Request) (params ReposListForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode query: type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal ReposListForOrgType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = ReposListForOrgType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: type: parse")
			}
			if err := func() error {
				if params.Type.Set {
					if err := func() error {
						if err := params.Type.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: type: invalid")
			}
		}
	}
	// Set default value for query: sort.
	{
		val := ReposListForOrgSort("created")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal ReposListForOrgSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = ReposListForOrgSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal ReposListForOrgDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = ReposListForOrgDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListForUserParams struct {
	Username string
	// Can be one of `all`, `owner`, `member`.
	Type OptReposListForUserType
	// Can be one of `created`, `updated`, `pushed`, `full_name`.
	Sort OptReposListForUserSort
	// Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`.
	Direction OptReposListForUserDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListForUserParams(args [1]string, r *http.Request) (params ReposListForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: type.
	{
		val := ReposListForUserType("owner")
		params.Type.SetTo(val)
	}
	// Decode query: type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal ReposListForUserType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = ReposListForUserType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: type: parse")
			}
			if err := func() error {
				if params.Type.Set {
					if err := func() error {
						if err := params.Type.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: type: invalid")
			}
		}
	}
	// Set default value for query: sort.
	{
		val := ReposListForUserSort("full_name")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal ReposListForUserSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = ReposListForUserSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal ReposListForUserDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = ReposListForUserDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListForksParams struct {
	Owner string
	Repo  string
	// The sort order. Can be either `newest`, `oldest`, or `stargazers`.
	Sort OptReposListForksSort
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListForksParams(args [2]string, r *http.Request) (params ReposListForksParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: sort.
	{
		val := ReposListForksSort("newest")
		params.Sort.SetTo(val)
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal ReposListForksSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = ReposListForksSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListInvitationsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListInvitationsParams(args [2]string, r *http.Request) (params ReposListInvitationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListInvitationsForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListInvitationsForAuthenticatedUserParams(args [0]string, r *http.Request) (params ReposListInvitationsForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListLanguagesParams struct {
	Owner string
	Repo  string
}

func decodeReposListLanguagesParams(args [2]string, r *http.Request) (params ReposListLanguagesParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposListPagesBuildsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListPagesBuildsParams(args [2]string, r *http.Request) (params ReposListPagesBuildsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListPublicParams struct {
	// A repository ID. Only return repositories with an ID greater than this ID.
	Since OptInt
}

func decodeReposListPublicParams(args [0]string, r *http.Request) (params ReposListPublicParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	return params, nil
}

type ReposListPullRequestsAssociatedWithCommitParams struct {
	Owner string
	Repo  string
	// Commit_sha parameter.
	CommitSha string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListPullRequestsAssociatedWithCommitParams(args [3]string, r *http.Request) (params ReposListPullRequestsAssociatedWithCommitParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: commit_sha.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "commit_sha",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CommitSha = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: commit_sha: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListReleaseAssetsParams struct {
	Owner string
	Repo  string
	// Release_id parameter.
	ReleaseID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListReleaseAssetsParams(args [3]string, r *http.Request) (params ReposListReleaseAssetsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: release_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "release_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReleaseID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: release_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListReleasesParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListReleasesParams(args [2]string, r *http.Request) (params ReposListReleasesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListTagsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListTagsParams(args [2]string, r *http.Request) (params ReposListTagsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListTeamsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListTeamsParams(args [2]string, r *http.Request) (params ReposListTeamsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposListWebhookDeliveriesParams struct {
	Owner  string
	Repo   string
	HookID int
	// Results per page (max 100).
	PerPage OptInt
	// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to
	// the `link` header for the next and previous page cursors.
	Cursor OptString
}

func decodeReposListWebhookDeliveriesParams(args [3]string, r *http.Request) (params ReposListWebhookDeliveriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Decode query: cursor.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cursor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCursorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCursorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Cursor.SetTo(paramsDotCursorVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: cursor: parse")
			}
		}
	}
	return params, nil
}

type ReposListWebhooksParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeReposListWebhooksParams(args [2]string, r *http.Request) (params ReposListWebhooksParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type ReposMergeParams struct {
	Owner string
	Repo  string
}

func decodeReposMergeParams(args [2]string, r *http.Request) (params ReposMergeParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposMergeUpstreamParams struct {
	Owner string
	Repo  string
}

func decodeReposMergeUpstreamParams(args [2]string, r *http.Request) (params ReposMergeUpstreamParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposPingWebhookParams struct {
	Owner  string
	Repo   string
	HookID int
}

func decodeReposPingWebhookParams(args [3]string, r *http.Request) (params ReposPingWebhookParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type ReposRedeliverWebhookDeliveryParams struct {
	Owner      string
	Repo       string
	HookID     int
	DeliveryID int
}

func decodeReposRedeliverWebhookDeliveryParams(args [4]string, r *http.Request) (params ReposRedeliverWebhookDeliveryParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	// Decode path: delivery_id.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "delivery_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DeliveryID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: delivery_id: not specified")
		}
	}
	return params, nil
}

type ReposRemoveAppAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposRemoveAppAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposRemoveAppAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposRemoveCollaboratorParams struct {
	Owner    string
	Repo     string
	Username string
}

func decodeReposRemoveCollaboratorParams(args [3]string, r *http.Request) (params ReposRemoveCollaboratorParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type ReposRemoveStatusCheckContextsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposRemoveStatusCheckContextsParams(args [3]string, r *http.Request) (params ReposRemoveStatusCheckContextsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposRemoveStatusCheckProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposRemoveStatusCheckProtectionParams(args [3]string, r *http.Request) (params ReposRemoveStatusCheckProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposRemoveTeamAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposRemoveTeamAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposRemoveTeamAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposRemoveUserAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposRemoveUserAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposRemoveUserAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposRenameBranchParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposRenameBranchParams(args [3]string, r *http.Request) (params ReposRenameBranchParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposReplaceAllTopicsParams struct {
	Owner string
	Repo  string
}

func decodeReposReplaceAllTopicsParams(args [2]string, r *http.Request) (params ReposReplaceAllTopicsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposRequestPagesBuildParams struct {
	Owner string
	Repo  string
}

func decodeReposRequestPagesBuildParams(args [2]string, r *http.Request) (params ReposRequestPagesBuildParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposSetAdminBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposSetAdminBranchProtectionParams(args [3]string, r *http.Request) (params ReposSetAdminBranchProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposSetAppAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposSetAppAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposSetAppAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposSetStatusCheckContextsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposSetStatusCheckContextsParams(args [3]string, r *http.Request) (params ReposSetStatusCheckContextsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposSetTeamAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposSetTeamAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposSetTeamAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposSetUserAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposSetUserAccessRestrictionsParams(args [3]string, r *http.Request) (params ReposSetUserAccessRestrictionsParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposTestPushWebhookParams struct {
	Owner  string
	Repo   string
	HookID int
}

func decodeReposTestPushWebhookParams(args [3]string, r *http.Request) (params ReposTestPushWebhookParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type ReposTransferParams struct {
	Owner string
	Repo  string
}

func decodeReposTransferParams(args [2]string, r *http.Request) (params ReposTransferParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposUpdateParams struct {
	Owner string
	Repo  string
}

func decodeReposUpdateParams(args [2]string, r *http.Request) (params ReposUpdateParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type ReposUpdateBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposUpdateBranchProtectionParams(args [3]string, r *http.Request) (params ReposUpdateBranchProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposUpdateCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

func decodeReposUpdateCommitCommentParams(args [3]string, r *http.Request) (params ReposUpdateCommitCommentParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: comment_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_id: not specified")
		}
	}
	return params, nil
}

type ReposUpdateInvitationParams struct {
	Owner string
	Repo  string
	// Invitation_id parameter.
	InvitationID int
}

func decodeReposUpdateInvitationParams(args [3]string, r *http.Request) (params ReposUpdateInvitationParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: invitation_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "invitation_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.InvitationID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: invitation_id: not specified")
		}
	}
	return params, nil
}

type ReposUpdatePullRequestReviewProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposUpdatePullRequestReviewProtectionParams(args [3]string, r *http.Request) (params ReposUpdatePullRequestReviewProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposUpdateReleaseParams struct {
	Owner string
	Repo  string
	// Release_id parameter.
	ReleaseID int
}

func decodeReposUpdateReleaseParams(args [3]string, r *http.Request) (params ReposUpdateReleaseParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: release_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "release_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReleaseID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: release_id: not specified")
		}
	}
	return params, nil
}

type ReposUpdateReleaseAssetParams struct {
	Owner string
	Repo  string
	// Asset_id parameter.
	AssetID int
}

func decodeReposUpdateReleaseAssetParams(args [3]string, r *http.Request) (params ReposUpdateReleaseAssetParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: asset_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "asset_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.AssetID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: asset_id: not specified")
		}
	}
	return params, nil
}

type ReposUpdateStatusCheckProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

func decodeReposUpdateStatusCheckProtectionParams(args [3]string, r *http.Request) (params ReposUpdateStatusCheckProtectionParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: branch.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "branch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Branch = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: branch: not specified")
		}
	}
	return params, nil
}

type ReposUpdateWebhookParams struct {
	Owner  string
	Repo   string
	HookID int
}

func decodeReposUpdateWebhookParams(args [3]string, r *http.Request) (params ReposUpdateWebhookParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type ReposUpdateWebhookConfigForRepoParams struct {
	Owner  string
	Repo   string
	HookID int
}

func decodeReposUpdateWebhookConfigForRepoParams(args [3]string, r *http.Request) (params ReposUpdateWebhookConfigForRepoParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: hook_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hook_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.HookID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: hook_id: not specified")
		}
	}
	return params, nil
}

type ScimDeleteUserFromOrgParams struct {
	Org string
	// Scim_user_id parameter.
	ScimUserID string
}

func decodeScimDeleteUserFromOrgParams(args [2]string, r *http.Request) (params ScimDeleteUserFromOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: scim_user_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "scim_user_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ScimUserID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: scim_user_id: not specified")
		}
	}
	return params, nil
}

type SearchCodeParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://help.github.
	// com/articles/searching-code/)" for a detailed list of qualifiers.
	Q string
	// Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has
	// been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.
	// com/rest/reference/search#ranking-search-results).
	Sort OptSearchCodeSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchCodeOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeSearchCodeParams(args [0]string, r *http.Request) (params SearchCodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Q = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: q: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal SearchCodeSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = SearchCodeSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: order.
	{
		val := SearchCodeOrder("desc")
		params.Order.SetTo(val)
	}
	// Decode query: order.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal SearchCodeOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = SearchCodeOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: order: parse")
			}
			if err := func() error {
				if params.Order.Set {
					if err := func() error {
						if err := params.Order.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: order: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type SearchCommitsParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://help.
	// github.com/articles/searching-commits/)" for a detailed list of qualifiers.
	Q string
	// Sorts the results of your query by `author-date` or `committer-date`. Default: [best
	// match](https://docs.github.com/rest/reference/search#ranking-search-results).
	Sort OptSearchCommitsSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchCommitsOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeSearchCommitsParams(args [0]string, r *http.Request) (params SearchCommitsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Q = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: q: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal SearchCommitsSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = SearchCommitsSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: order.
	{
		val := SearchCommitsOrder("desc")
		params.Order.SetTo(val)
	}
	// Decode query: order.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal SearchCommitsOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = SearchCommitsOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: order: parse")
			}
			if err := func() error {
				if params.Order.Set {
					if err := func() error {
						if err := params.Order.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: order: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type SearchIssuesAndPullRequestsParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull
	// requests](https://help.github.com/articles/searching-issues-and-pull-requests/)" for a detailed
	// list of qualifiers.
	Q string
	// Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`,
	// `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`,
	// or `interactions`. You can also sort results by how recently the items were `created` or `updated`,
	//  Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results).
	Sort OptSearchIssuesAndPullRequestsSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchIssuesAndPullRequestsOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeSearchIssuesAndPullRequestsParams(args [0]string, r *http.Request) (params SearchIssuesAndPullRequestsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Q = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: q: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal SearchIssuesAndPullRequestsSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = SearchIssuesAndPullRequestsSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: order.
	{
		val := SearchIssuesAndPullRequestsOrder("desc")
		params.Order.SetTo(val)
	}
	// Decode query: order.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal SearchIssuesAndPullRequestsOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = SearchIssuesAndPullRequestsOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: order: parse")
			}
			if err := func() error {
				if params.Order.Set {
					if err := func() error {
						if err := params.Order.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: order: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type SearchLabelsParams struct {
	// The id of the repository.
	RepositoryID int
	// The search keywords. This endpoint does not accept qualifiers in the query. To learn more about
	// the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query).
	Q string
	// Sorts the results of your query by when the label was `created` or `updated`. Default: [best
	// match](https://docs.github.com/rest/reference/search#ranking-search-results).
	Sort OptSearchLabelsSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchLabelsOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeSearchLabelsParams(args [0]string, r *http.Request) (params SearchLabelsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: repository_id.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "repository_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.RepositoryID = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: repository_id: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: q.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Q = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: q: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal SearchLabelsSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = SearchLabelsSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: order.
	{
		val := SearchLabelsOrder("desc")
		params.Order.SetTo(val)
	}
	// Decode query: order.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal SearchLabelsOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = SearchLabelsOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: order: parse")
			}
			if err := func() error {
				if params.Order.Set {
					if err := func() error {
						if err := params.Order.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: order: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type SearchReposParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query). See "[Searching for
	// repositories](https://help.github.com/articles/searching-for-repositories/)" for a detailed list
	// of qualifiers.
	Q string
	// Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how
	// recently the items were `updated`. Default: [best match](https://docs.github.
	// com/rest/reference/search#ranking-search-results).
	Sort OptSearchReposSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchReposOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeSearchReposParams(args [0]string, r *http.Request) (params SearchReposParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Q = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: q: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal SearchReposSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = SearchReposSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: order.
	{
		val := SearchReposOrder("desc")
		params.Order.SetTo(val)
	}
	// Decode query: order.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal SearchReposOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = SearchReposOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: order: parse")
			}
			if err := func() error {
				if params.Order.Set {
					if err := func() error {
						if err := params.Order.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: order: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type SearchTopicsParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query).
	Q string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeSearchTopicsParams(args [0]string, r *http.Request) (params SearchTopicsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Q = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: q: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type SearchUsersParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://help.github.
	// com/articles/searching-users/)" for a detailed list of qualifiers.
	Q string
	// Sorts the results of your query by number of `followers` or `repositories`, or when the person
	// `joined` GitHub. Default: [best match](https://docs.github.
	// com/rest/reference/search#ranking-search-results).
	Sort OptSearchUsersSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchUsersOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeSearchUsersParams(args [0]string, r *http.Request) (params SearchUsersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: q.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "q",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Q = c
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: q: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortVal SearchUsersSort
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortVal = SearchUsersSort(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Sort.SetTo(paramsDotSortVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if params.Sort.Set {
					if err := func() error {
						if err := params.Sort.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		}
	}
	// Set default value for query: order.
	{
		val := SearchUsersOrder("desc")
		params.Order.SetTo(val)
	}
	// Decode query: order.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal SearchUsersOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = SearchUsersOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: order: parse")
			}
			if err := func() error {
				if params.Order.Set {
					if err := func() error {
						if err := params.Order.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: order: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type SecretScanningGetAlertParams struct {
	Owner string
	Repo  string
	// The number that identifies an alert. You can find this at the end of the URL for a code scanning
	// alert within GitHub, and in the `number` field in the response from the `GET
	// /repos/{owner}/{repo}/code-scanning/alerts` operation.
	AlertNumber AlertNumber
}

func decodeSecretScanningGetAlertParams(args [3]string, r *http.Request) (params SecretScanningGetAlertParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: alert_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "alert_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAlertNumberVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotAlertNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AlertNumber = AlertNumber(paramsDotAlertNumberVal)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: alert_number: not specified")
		}
	}
	return params, nil
}

type SecretScanningListAlertsForOrgParams struct {
	Org string
	// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
	State OptSecretScanningListAlertsForOrgState
	// A comma separated list of secret types to return. By default all secret types are returned.
	SecretType OptString
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

func decodeSecretScanningListAlertsForOrgParams(args [1]string, r *http.Request) (params SecretScanningListAlertsForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal SecretScanningListAlertsForOrgState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = SecretScanningListAlertsForOrgState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Decode query: secret_type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "secret_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSecretTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSecretTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SecretType.SetTo(paramsDotSecretTypeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: secret_type: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	return params, nil
}

type SecretScanningListAlertsForRepoParams struct {
	Owner string
	Repo  string
	// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
	State OptSecretScanningListAlertsForRepoState
	// A comma separated list of secret types to return. By default all secret types are returned. See
	// "[About secret scanning for private repositories](https://docs.github.
	// com/code-security/secret-security/about-secret-scanning#about-secret-scanning-for-private-repositories)" for a complete list of secret types (API slug).
	SecretType OptString
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

func decodeSecretScanningListAlertsForRepoParams(args [2]string, r *http.Request) (params SecretScanningListAlertsForRepoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode query: state.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal SecretScanningListAlertsForRepoState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = SecretScanningListAlertsForRepoState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: state: parse")
			}
			if err := func() error {
				if params.State.Set {
					if err := func() error {
						if err := params.State.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: state: invalid")
			}
		}
	}
	// Decode query: secret_type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "secret_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSecretTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSecretTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SecretType.SetTo(paramsDotSecretTypeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: secret_type: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	return params, nil
}

type SecretScanningUpdateAlertParams struct {
	Owner string
	Repo  string
	// The number that identifies an alert. You can find this at the end of the URL for a code scanning
	// alert within GitHub, and in the `number` field in the response from the `GET
	// /repos/{owner}/{repo}/code-scanning/alerts` operation.
	AlertNumber AlertNumber
}

func decodeSecretScanningUpdateAlertParams(args [3]string, r *http.Request) (params SecretScanningUpdateAlertParams, _ error) {
	// Decode path: owner.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	// Decode path: alert_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "alert_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotAlertNumberVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotAlertNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AlertNumber = AlertNumber(paramsDotAlertNumberVal)
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: alert_number: not specified")
		}
	}
	return params, nil
}

type TeamsAddMemberLegacyParams struct {
	TeamID   int
	Username string
}

func decodeTeamsAddMemberLegacyParams(args [2]string, r *http.Request) (params TeamsAddMemberLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type TeamsAddOrUpdateMembershipForUserInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Username string
}

func decodeTeamsAddOrUpdateMembershipForUserInOrgParams(args [3]string, r *http.Request) (params TeamsAddOrUpdateMembershipForUserInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type TeamsAddOrUpdateMembershipForUserLegacyParams struct {
	TeamID   int
	Username string
}

func decodeTeamsAddOrUpdateMembershipForUserLegacyParams(args [2]string, r *http.Request) (params TeamsAddOrUpdateMembershipForUserLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type TeamsAddOrUpdateProjectPermissionsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug  string
	ProjectID int
}

func decodeTeamsAddOrUpdateProjectPermissionsInOrgParams(args [3]string, r *http.Request) (params TeamsAddOrUpdateProjectPermissionsInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: project_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	return params, nil
}

type TeamsAddOrUpdateProjectPermissionsLegacyParams struct {
	TeamID    int
	ProjectID int
}

func decodeTeamsAddOrUpdateProjectPermissionsLegacyParams(args [2]string, r *http.Request) (params TeamsAddOrUpdateProjectPermissionsLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: project_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	return params, nil
}

type TeamsAddOrUpdateRepoPermissionsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Owner    string
	Repo     string
}

func decodeTeamsAddOrUpdateRepoPermissionsInOrgParams(args [4]string, r *http.Request) (params TeamsAddOrUpdateRepoPermissionsInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: owner.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type TeamsAddOrUpdateRepoPermissionsLegacyParams struct {
	TeamID int
	Owner  string
	Repo   string
}

func decodeTeamsAddOrUpdateRepoPermissionsLegacyParams(args [3]string, r *http.Request) (params TeamsAddOrUpdateRepoPermissionsLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: owner.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type TeamsCheckPermissionsForProjectInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug  string
	ProjectID int
}

func decodeTeamsCheckPermissionsForProjectInOrgParams(args [3]string, r *http.Request) (params TeamsCheckPermissionsForProjectInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: project_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	return params, nil
}

type TeamsCheckPermissionsForProjectLegacyParams struct {
	TeamID    int
	ProjectID int
}

func decodeTeamsCheckPermissionsForProjectLegacyParams(args [2]string, r *http.Request) (params TeamsCheckPermissionsForProjectLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: project_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	return params, nil
}

type TeamsCheckPermissionsForRepoInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Owner    string
	Repo     string
}

func decodeTeamsCheckPermissionsForRepoInOrgParams(args [4]string, r *http.Request) (params TeamsCheckPermissionsForRepoInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: owner.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type TeamsCheckPermissionsForRepoLegacyParams struct {
	TeamID int
	Owner  string
	Repo   string
}

func decodeTeamsCheckPermissionsForRepoLegacyParams(args [3]string, r *http.Request) (params TeamsCheckPermissionsForRepoLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: owner.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type TeamsCreateParams struct {
	Org string
}

func decodeTeamsCreateParams(args [1]string, r *http.Request) (params TeamsCreateParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	return params, nil
}

type TeamsCreateDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
}

func decodeTeamsCreateDiscussionCommentInOrgParams(args [3]string, r *http.Request) (params TeamsCreateDiscussionCommentInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	return params, nil
}

type TeamsCreateDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
}

func decodeTeamsCreateDiscussionCommentLegacyParams(args [2]string, r *http.Request) (params TeamsCreateDiscussionCommentLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	return params, nil
}

type TeamsCreateDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

func decodeTeamsCreateDiscussionInOrgParams(args [2]string, r *http.Request) (params TeamsCreateDiscussionInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	return params, nil
}

type TeamsCreateDiscussionLegacyParams struct {
	TeamID int
}

func decodeTeamsCreateDiscussionLegacyParams(args [1]string, r *http.Request) (params TeamsCreateDiscussionLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	return params, nil
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgParams(args [2]string, r *http.Request) (params TeamsCreateOrUpdateIdpGroupConnectionsInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	return params, nil
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyParams struct {
	TeamID int
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsLegacyParams(args [1]string, r *http.Request) (params TeamsCreateOrUpdateIdpGroupConnectionsLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	return params, nil
}

type TeamsDeleteDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
}

func decodeTeamsDeleteDiscussionCommentInOrgParams(args [4]string, r *http.Request) (params TeamsDeleteDiscussionCommentInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	return params, nil
}

type TeamsDeleteDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	CommentNumber    int
}

func decodeTeamsDeleteDiscussionCommentLegacyParams(args [3]string, r *http.Request) (params TeamsDeleteDiscussionCommentLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	return params, nil
}

type TeamsDeleteDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
}

func decodeTeamsDeleteDiscussionInOrgParams(args [3]string, r *http.Request) (params TeamsDeleteDiscussionInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	return params, nil
}

type TeamsDeleteDiscussionLegacyParams struct {
	TeamID           int
	DiscussionNumber int
}

func decodeTeamsDeleteDiscussionLegacyParams(args [2]string, r *http.Request) (params TeamsDeleteDiscussionLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	return params, nil
}

type TeamsDeleteInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

func decodeTeamsDeleteInOrgParams(args [2]string, r *http.Request) (params TeamsDeleteInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	return params, nil
}

type TeamsDeleteLegacyParams struct {
	TeamID int
}

func decodeTeamsDeleteLegacyParams(args [1]string, r *http.Request) (params TeamsDeleteLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	return params, nil
}

type TeamsGetByNameParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

func decodeTeamsGetByNameParams(args [2]string, r *http.Request) (params TeamsGetByNameParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	return params, nil
}

type TeamsGetDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
}

func decodeTeamsGetDiscussionCommentInOrgParams(args [4]string, r *http.Request) (params TeamsGetDiscussionCommentInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	return params, nil
}

type TeamsGetDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	CommentNumber    int
}

func decodeTeamsGetDiscussionCommentLegacyParams(args [3]string, r *http.Request) (params TeamsGetDiscussionCommentLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	return params, nil
}

type TeamsGetDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
}

func decodeTeamsGetDiscussionInOrgParams(args [3]string, r *http.Request) (params TeamsGetDiscussionInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	return params, nil
}

type TeamsGetDiscussionLegacyParams struct {
	TeamID           int
	DiscussionNumber int
}

func decodeTeamsGetDiscussionLegacyParams(args [2]string, r *http.Request) (params TeamsGetDiscussionLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	return params, nil
}

type TeamsGetLegacyParams struct {
	TeamID int
}

func decodeTeamsGetLegacyParams(args [1]string, r *http.Request) (params TeamsGetLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	return params, nil
}

type TeamsGetMemberLegacyParams struct {
	TeamID   int
	Username string
}

func decodeTeamsGetMemberLegacyParams(args [2]string, r *http.Request) (params TeamsGetMemberLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type TeamsGetMembershipForUserInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Username string
}

func decodeTeamsGetMembershipForUserInOrgParams(args [3]string, r *http.Request) (params TeamsGetMembershipForUserInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type TeamsGetMembershipForUserLegacyParams struct {
	TeamID   int
	Username string
}

func decodeTeamsGetMembershipForUserLegacyParams(args [2]string, r *http.Request) (params TeamsGetMembershipForUserLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type TeamsListParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListParams(args [1]string, r *http.Request) (params TeamsListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListChildInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListChildInOrgParams(args [2]string, r *http.Request) (params TeamsListChildInOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListChildLegacyParams struct {
	TeamID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListChildLegacyParams(args [1]string, r *http.Request) (params TeamsListChildLegacyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListDiscussionCommentsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptTeamsListDiscussionCommentsInOrgDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListDiscussionCommentsInOrgParams(args [3]string, r *http.Request) (params TeamsListDiscussionCommentsInOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Set default value for query: direction.
	{
		val := TeamsListDiscussionCommentsInOrgDirection("desc")
		params.Direction.SetTo(val)
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal TeamsListDiscussionCommentsInOrgDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = TeamsListDiscussionCommentsInOrgDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListDiscussionCommentsLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptTeamsListDiscussionCommentsLegacyDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListDiscussionCommentsLegacyParams(args [2]string, r *http.Request) (params TeamsListDiscussionCommentsLegacyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Set default value for query: direction.
	{
		val := TeamsListDiscussionCommentsLegacyDirection("desc")
		params.Direction.SetTo(val)
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal TeamsListDiscussionCommentsLegacyDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = TeamsListDiscussionCommentsLegacyDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListDiscussionsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptTeamsListDiscussionsInOrgDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
	// Pinned discussions only filter.
	Pinned OptString
}

func decodeTeamsListDiscussionsInOrgParams(args [2]string, r *http.Request) (params TeamsListDiscussionsInOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Set default value for query: direction.
	{
		val := TeamsListDiscussionsInOrgDirection("desc")
		params.Direction.SetTo(val)
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal TeamsListDiscussionsInOrgDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = TeamsListDiscussionsInOrgDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	// Decode query: pinned.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pinned",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPinnedVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPinnedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pinned.SetTo(paramsDotPinnedVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: pinned: parse")
			}
		}
	}
	return params, nil
}

type TeamsListDiscussionsLegacyParams struct {
	TeamID int
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptTeamsListDiscussionsLegacyDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListDiscussionsLegacyParams(args [1]string, r *http.Request) (params TeamsListDiscussionsLegacyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Set default value for query: direction.
	{
		val := TeamsListDiscussionsLegacyDirection("desc")
		params.Direction.SetTo(val)
	}
	// Decode query: direction.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal TeamsListDiscussionsLegacyDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = TeamsListDiscussionsLegacyDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: direction: parse")
			}
			if err := func() error {
				if params.Direction.Set {
					if err := func() error {
						if err := params.Direction.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: direction: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListForAuthenticatedUserParams(args [0]string, r *http.Request) (params TeamsListForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListIdpGroupsForLegacyParams struct {
	TeamID int
}

func decodeTeamsListIdpGroupsForLegacyParams(args [1]string, r *http.Request) (params TeamsListIdpGroupsForLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	return params, nil
}

type TeamsListIdpGroupsForOrgParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page token.
	Page OptString
}

func decodeTeamsListIdpGroupsForOrgParams(args [1]string, r *http.Request) (params TeamsListIdpGroupsForOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListIdpGroupsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

func decodeTeamsListIdpGroupsInOrgParams(args [2]string, r *http.Request) (params TeamsListIdpGroupsInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	return params, nil
}

type TeamsListMembersInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// Filters members returned by their role in the team. Can be one of:
	// \* `member` - normal members of the team.
	// \* `maintainer` - team maintainers.
	// \* `all` - all members of the team.
	Role OptTeamsListMembersInOrgRole
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListMembersInOrgParams(args [2]string, r *http.Request) (params TeamsListMembersInOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Set default value for query: role.
	{
		val := TeamsListMembersInOrgRole("all")
		params.Role.SetTo(val)
	}
	// Decode query: role.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "role",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRoleVal TeamsListMembersInOrgRole
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRoleVal = TeamsListMembersInOrgRole(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Role.SetTo(paramsDotRoleVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: role: parse")
			}
			if err := func() error {
				if params.Role.Set {
					if err := func() error {
						if err := params.Role.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: role: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListMembersLegacyParams struct {
	TeamID int
	// Filters members returned by their role in the team. Can be one of:
	// \* `member` - normal members of the team.
	// \* `maintainer` - team maintainers.
	// \* `all` - all members of the team.
	Role OptTeamsListMembersLegacyRole
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListMembersLegacyParams(args [1]string, r *http.Request) (params TeamsListMembersLegacyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Set default value for query: role.
	{
		val := TeamsListMembersLegacyRole("all")
		params.Role.SetTo(val)
	}
	// Decode query: role.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "role",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRoleVal TeamsListMembersLegacyRole
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRoleVal = TeamsListMembersLegacyRole(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Role.SetTo(paramsDotRoleVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: role: parse")
			}
			if err := func() error {
				if params.Role.Set {
					if err := func() error {
						if err := params.Role.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: role: invalid")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListPendingInvitationsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListPendingInvitationsInOrgParams(args [2]string, r *http.Request) (params TeamsListPendingInvitationsInOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListPendingInvitationsLegacyParams struct {
	TeamID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListPendingInvitationsLegacyParams(args [1]string, r *http.Request) (params TeamsListPendingInvitationsLegacyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListProjectsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListProjectsInOrgParams(args [2]string, r *http.Request) (params TeamsListProjectsInOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListProjectsLegacyParams struct {
	TeamID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListProjectsLegacyParams(args [1]string, r *http.Request) (params TeamsListProjectsLegacyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListReposInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListReposInOrgParams(args [2]string, r *http.Request) (params TeamsListReposInOrgParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsListReposLegacyParams struct {
	TeamID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeTeamsListReposLegacyParams(args [1]string, r *http.Request) (params TeamsListReposLegacyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type TeamsRemoveMemberLegacyParams struct {
	TeamID   int
	Username string
}

func decodeTeamsRemoveMemberLegacyParams(args [2]string, r *http.Request) (params TeamsRemoveMemberLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type TeamsRemoveMembershipForUserInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Username string
}

func decodeTeamsRemoveMembershipForUserInOrgParams(args [3]string, r *http.Request) (params TeamsRemoveMembershipForUserInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type TeamsRemoveMembershipForUserLegacyParams struct {
	TeamID   int
	Username string
}

func decodeTeamsRemoveMembershipForUserLegacyParams(args [2]string, r *http.Request) (params TeamsRemoveMembershipForUserLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: username.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type TeamsRemoveProjectInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug  string
	ProjectID int
}

func decodeTeamsRemoveProjectInOrgParams(args [3]string, r *http.Request) (params TeamsRemoveProjectInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: project_id.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	return params, nil
}

type TeamsRemoveProjectLegacyParams struct {
	TeamID    int
	ProjectID int
}

func decodeTeamsRemoveProjectLegacyParams(args [2]string, r *http.Request) (params TeamsRemoveProjectLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: project_id.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "project_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: project_id: not specified")
		}
	}
	return params, nil
}

type TeamsRemoveRepoInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Owner    string
	Repo     string
}

func decodeTeamsRemoveRepoInOrgParams(args [4]string, r *http.Request) (params TeamsRemoveRepoInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: owner.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type TeamsRemoveRepoLegacyParams struct {
	TeamID int
	Owner  string
	Repo   string
}

func decodeTeamsRemoveRepoLegacyParams(args [3]string, r *http.Request) (params TeamsRemoveRepoLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: owner.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "owner",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Owner = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: owner: not specified")
		}
	}
	// Decode path: repo.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "repo",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Repo = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: repo: not specified")
		}
	}
	return params, nil
}

type TeamsUpdateDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
}

func decodeTeamsUpdateDiscussionCommentInOrgParams(args [4]string, r *http.Request) (params TeamsUpdateDiscussionCommentInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[3]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	return params, nil
}

type TeamsUpdateDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	CommentNumber    int
}

func decodeTeamsUpdateDiscussionCommentLegacyParams(args [3]string, r *http.Request) (params TeamsUpdateDiscussionCommentLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	// Decode path: comment_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CommentNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: comment_number: not specified")
		}
	}
	return params, nil
}

type TeamsUpdateDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
}

func decodeTeamsUpdateDiscussionInOrgParams(args [3]string, r *http.Request) (params TeamsUpdateDiscussionInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[2]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	return params, nil
}

type TeamsUpdateDiscussionLegacyParams struct {
	TeamID           int
	DiscussionNumber int
}

func decodeTeamsUpdateDiscussionLegacyParams(args [2]string, r *http.Request) (params TeamsUpdateDiscussionLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	// Decode path: discussion_number.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "discussion_number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.DiscussionNumber = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: discussion_number: not specified")
		}
	}
	return params, nil
}

type TeamsUpdateInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

func decodeTeamsUpdateInOrgParams(args [2]string, r *http.Request) (params TeamsUpdateInOrgParams, _ error) {
	// Decode path: org.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "org",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Org = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: org: not specified")
		}
	}
	// Decode path: team_slug.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_slug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamSlug = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_slug: not specified")
		}
	}
	return params, nil
}

type TeamsUpdateLegacyParams struct {
	TeamID int
}

func decodeTeamsUpdateLegacyParams(args [1]string, r *http.Request) (params TeamsUpdateLegacyParams, _ error) {
	// Decode path: team_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "team_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TeamID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: team_id: not specified")
		}
	}
	return params, nil
}

type UsersBlockParams struct {
	Username string
}

func decodeUsersBlockParams(args [1]string, r *http.Request) (params UsersBlockParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type UsersCheckBlockedParams struct {
	Username string
}

func decodeUsersCheckBlockedParams(args [1]string, r *http.Request) (params UsersCheckBlockedParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type UsersCheckFollowingForUserParams struct {
	Username   string
	TargetUser string
}

func decodeUsersCheckFollowingForUserParams(args [2]string, r *http.Request) (params UsersCheckFollowingForUserParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Decode path: target_user.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "target_user",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TargetUser = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: target_user: not specified")
		}
	}
	return params, nil
}

type UsersCheckPersonIsFollowedByAuthenticatedParams struct {
	Username string
}

func decodeUsersCheckPersonIsFollowedByAuthenticatedParams(args [1]string, r *http.Request) (params UsersCheckPersonIsFollowedByAuthenticatedParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type UsersDeleteGpgKeyForAuthenticatedParams struct {
	// Gpg_key_id parameter.
	GpgKeyID int
}

func decodeUsersDeleteGpgKeyForAuthenticatedParams(args [1]string, r *http.Request) (params UsersDeleteGpgKeyForAuthenticatedParams, _ error) {
	// Decode path: gpg_key_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gpg_key_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.GpgKeyID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gpg_key_id: not specified")
		}
	}
	return params, nil
}

type UsersDeletePublicSSHKeyForAuthenticatedParams struct {
	// Key_id parameter.
	KeyID int
}

func decodeUsersDeletePublicSSHKeyForAuthenticatedParams(args [1]string, r *http.Request) (params UsersDeletePublicSSHKeyForAuthenticatedParams, _ error) {
	// Decode path: key_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "key_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.KeyID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: key_id: not specified")
		}
	}
	return params, nil
}

type UsersFollowParams struct {
	Username string
}

func decodeUsersFollowParams(args [1]string, r *http.Request) (params UsersFollowParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type UsersGetByUsernameParams struct {
	Username string
}

func decodeUsersGetByUsernameParams(args [1]string, r *http.Request) (params UsersGetByUsernameParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type UsersGetContextForUserParams struct {
	Username string
	// Identifies which additional information you'd like to receive about the person's hovercard. Can be
	// `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
	SubjectType OptUsersGetContextForUserSubjectType
	// Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
	SubjectID OptString
}

func decodeUsersGetContextForUserParams(args [1]string, r *http.Request) (params UsersGetContextForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Decode query: subject_type.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "subject_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSubjectTypeVal UsersGetContextForUserSubjectType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSubjectTypeVal = UsersGetContextForUserSubjectType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SubjectType.SetTo(paramsDotSubjectTypeVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: subject_type: parse")
			}
			if err := func() error {
				if params.SubjectType.Set {
					if err := func() error {
						if err := params.SubjectType.Value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: subject_type: invalid")
			}
		}
	}
	// Decode query: subject_id.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "subject_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSubjectIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSubjectIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SubjectID.SetTo(paramsDotSubjectIDVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: subject_id: parse")
			}
		}
	}
	return params, nil
}

type UsersGetGpgKeyForAuthenticatedParams struct {
	// Gpg_key_id parameter.
	GpgKeyID int
}

func decodeUsersGetGpgKeyForAuthenticatedParams(args [1]string, r *http.Request) (params UsersGetGpgKeyForAuthenticatedParams, _ error) {
	// Decode path: gpg_key_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gpg_key_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.GpgKeyID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: gpg_key_id: not specified")
		}
	}
	return params, nil
}

type UsersGetPublicSSHKeyForAuthenticatedParams struct {
	// Key_id parameter.
	KeyID int
}

func decodeUsersGetPublicSSHKeyForAuthenticatedParams(args [1]string, r *http.Request) (params UsersGetPublicSSHKeyForAuthenticatedParams, _ error) {
	// Decode path: key_id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "key_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.KeyID = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: key_id: not specified")
		}
	}
	return params, nil
}

type UsersListParams struct {
	// A user ID. Only return users with an ID greater than this ID.
	Since OptInt
	// Results per page (max 100).
	PerPage OptInt
}

func decodeUsersListParams(args [0]string, r *http.Request) (params UsersListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: since.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: since: parse")
			}
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	return params, nil
}

type UsersListEmailsForAuthenticatedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeUsersListEmailsForAuthenticatedParams(args [0]string, r *http.Request) (params UsersListEmailsForAuthenticatedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type UsersListFollowedByAuthenticatedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeUsersListFollowedByAuthenticatedParams(args [0]string, r *http.Request) (params UsersListFollowedByAuthenticatedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type UsersListFollowersForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeUsersListFollowersForAuthenticatedUserParams(args [0]string, r *http.Request) (params UsersListFollowersForAuthenticatedUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type UsersListFollowersForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeUsersListFollowersForUserParams(args [1]string, r *http.Request) (params UsersListFollowersForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type UsersListFollowingForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeUsersListFollowingForUserParams(args [1]string, r *http.Request) (params UsersListFollowingForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type UsersListGpgKeysForAuthenticatedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeUsersListGpgKeysForAuthenticatedParams(args [0]string, r *http.Request) (params UsersListGpgKeysForAuthenticatedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type UsersListGpgKeysForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeUsersListGpgKeysForUserParams(args [1]string, r *http.Request) (params UsersListGpgKeysForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type UsersListPublicEmailsForAuthenticatedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeUsersListPublicEmailsForAuthenticatedParams(args [0]string, r *http.Request) (params UsersListPublicEmailsForAuthenticatedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type UsersListPublicKeysForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeUsersListPublicKeysForUserParams(args [1]string, r *http.Request) (params UsersListPublicKeysForUserParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type UsersListPublicSSHKeysForAuthenticatedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

func decodeUsersListPublicSSHKeysForAuthenticatedParams(args [0]string, r *http.Request) (params UsersListPublicSSHKeysForAuthenticatedParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: per_page.
	{
		val := int(30)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: per_page: parse")
			}
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
		}
	}
	return params, nil
}

type UsersUnblockParams struct {
	Username string
}

func decodeUsersUnblockParams(args [1]string, r *http.Request) (params UsersUnblockParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}

type UsersUnfollowParams struct {
	Username string
}

func decodeUsersUnfollowParams(args [1]string, r *http.Request) (params UsersUnfollowParams, _ error) {
	// Decode path: username.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: username: not specified")
		}
	}
	return params, nil
}
