// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

import "testing"

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

var _ = testing.TB(nil)

func TestAPIOverview_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"verifiable_password_authentication\": true,\r\n          \"ssh_key_fingerprints\": {\r\n            \"SHA256_RSA\": \"nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8\",\r\n            \"SHA256_DSA\": \"br9IjFspm1vxR3iA35FWE+4VTyz1hYVLIE2t1/CeyWQ\",\r\n            \"SHA256_ECDSA\": \"p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM\",\r\n            \"SHA256_ED25519\": \"+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU\"\r\n          },\r\n          \"hooks\": [\r\n            \"192.30.252.0/22\"\r\n          ],\r\n          \"web\": [\r\n            \"192.30.252.0/22\",\r\n            \"185.199.108.0/22\"\r\n          ],\r\n          \"api\": [\r\n            \"192.30.252.0/22\",\r\n            \"185.199.108.0/22\"\r\n          ],\r\n          \"git\": [\r\n            \"192.30.252.0/22\"\r\n          ],\r\n          \"packages\": [\r\n            \"192.30.252.0/22\"\r\n          ],\r\n          \"pages\": [\r\n            \"192.30.252.153/32\",\r\n            \"192.30.252.154/32\"\r\n          ],\r\n          \"importer\": [\r\n            \"54.158.161.132\",\r\n            \"54.226.70.38\"\r\n          ],\r\n          \"actions\": [\r\n            \"13.64.0.0/16\",\r\n            \"13.65.0.0/16\"\r\n          ],\r\n          \"dependabot\": [\r\n            \"54.158.161.132\"\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ APIOverview

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsBillingUsage_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_minutes_used\": 305,\r\n          \"total_paid_minutes_used\": 0,\r\n          \"included_minutes\": 3000,\r\n          \"minutes_used_breakdown\": {\r\n            \"UBUNTU\": 205,\r\n            \"MACOS\": 10,\r\n            \"WINDOWS\": 90\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsBillingUsage

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsEnterprisePermissions_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"enabled_organizations\": \"all\",\r\n          \"allowed_actions\": \"selected\",\r\n          \"selected_actions_url\": \"https://api.github.com/enterprises/2/actions/permissions/selected-actions\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsEnterprisePermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListArtifactsForRepoOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"artifacts\": [\r\n            {\r\n              \"id\": 11,\r\n              \"node_id\": \"MDg6QXJ0aWZhY3QxMQ==\",\r\n              \"name\": \"Rails\",\r\n              \"size_in_bytes\": 556,\r\n              \"url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11\",\r\n              \"archive_download_url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip\",\r\n              \"expired\": false,\r\n              \"created_at\": \"2020-01-10T14:59:22Z\",\r\n              \"expires_at\": \"2020-03-21T14:59:22Z\",\r\n              \"updated_at\": \"2020-02-21T14:59:22Z\"\r\n            },\r\n            {\r\n              \"id\": 13,\r\n              \"node_id\": \"MDg6QXJ0aWZhY3QxMw==\",\r\n              \"name\": \"\",\r\n              \"size_in_bytes\": 453,\r\n              \"url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13\",\r\n              \"archive_download_url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip\",\r\n              \"expired\": false,\r\n              \"created_at\": \"2020-01-10T14:59:22Z\",\r\n              \"expires_at\": \"2020-03-21T14:59:22Z\",\r\n              \"updated_at\": \"2020-02-21T14:59:22Z\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListArtifactsForRepoOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListEnvironmentSecretsOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"secrets\": [\r\n            {\r\n              \"name\": \"GH_TOKEN\",\r\n              \"created_at\": \"2019-08-10T14:59:22Z\",\r\n              \"updated_at\": \"2020-01-10T14:59:22Z\"\r\n            },\r\n            {\r\n              \"name\": \"GIST_ID\",\r\n              \"created_at\": \"2020-01-10T10:59:22Z\",\r\n              \"updated_at\": \"2020-01-11T11:59:22Z\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListEnvironmentSecretsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListJobsForWorkflowRunOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"jobs\": [\r\n            {\r\n              \"id\": 399444496,\r\n              \"run_id\": 29679449,\r\n              \"run_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449\",\r\n              \"node_id\": \"MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==\",\r\n              \"head_sha\": \"f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0\",\r\n              \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496\",\r\n              \"html_url\": \"https://github.com/octo-org/octo-repo/runs/399444496\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"started_at\": \"2020-01-20T17:42:40Z\",\r\n              \"completed_at\": \"2020-01-20T17:44:39Z\",\r\n              \"name\": \"build\",\r\n              \"steps\": [\r\n                {\r\n                  \"name\": \"Set up job\",\r\n                  \"status\": \"completed\",\r\n                  \"conclusion\": \"success\",\r\n                  \"number\": 1,\r\n                  \"started_at\": \"2020-01-20T09:42:40.000-08:00\",\r\n                  \"completed_at\": \"2020-01-20T09:42:41.000-08:00\"\r\n                },\r\n                {\r\n                  \"name\": \"Run actions/checkout@v2\",\r\n                  \"status\": \"completed\",\r\n                  \"conclusion\": \"success\",\r\n                  \"number\": 2,\r\n                  \"started_at\": \"2020-01-20T09:42:41.000-08:00\",\r\n                  \"completed_at\": \"2020-01-20T09:42:45.000-08:00\"\r\n                },\r\n                {\r\n                  \"name\": \"Set up Ruby\",\r\n                  \"status\": \"completed\",\r\n                  \"conclusion\": \"success\",\r\n                  \"number\": 3,\r\n                  \"started_at\": \"2020-01-20T09:42:45.000-08:00\",\r\n                  \"completed_at\": \"2020-01-20T09:42:45.000-08:00\"\r\n                },\r\n                {\r\n                  \"name\": \"Run actions/cache@v2\",\r\n                  \"status\": \"completed\",\r\n                  \"conclusion\": \"success\",\r\n                  \"number\": 4,\r\n                  \"started_at\": \"2020-01-20T09:42:45.000-08:00\",\r\n                  \"completed_at\": \"2020-01-20T09:42:48.000-08:00\"\r\n                },\r\n                {\r\n                  \"name\": \"Install Bundler\",\r\n                  \"status\": \"completed\",\r\n                  \"conclusion\": \"success\",\r\n                  \"number\": 5,\r\n                  \"started_at\": \"2020-01-20T09:42:48.000-08:00\",\r\n                  \"completed_at\": \"2020-01-20T09:42:52.000-08:00\"\r\n                },\r\n                {\r\n                  \"name\": \"Install Gems\",\r\n                  \"status\": \"completed\",\r\n                  \"conclusion\": \"success\",\r\n                  \"number\": 6,\r\n                  \"started_at\": \"2020-01-20T09:42:52.000-08:00\",\r\n                  \"completed_at\": \"2020-01-20T09:42:53.000-08:00\"\r\n                },\r\n                {\r\n                  \"name\": \"Run Tests\",\r\n                  \"status\": \"completed\",\r\n                  \"conclusion\": \"success\",\r\n                  \"number\": 7,\r\n                  \"started_at\": \"2020-01-20T09:42:53.000-08:00\",\r\n                  \"completed_at\": \"2020-01-20T09:42:59.000-08:00\"\r\n                },\r\n                {\r\n                  \"name\": \"Deploy to Heroku\",\r\n                  \"status\": \"completed\",\r\n                  \"conclusion\": \"success\",\r\n                  \"number\": 8,\r\n                  \"started_at\": \"2020-01-20T09:42:59.000-08:00\",\r\n                  \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\r\n                },\r\n                {\r\n                  \"name\": \"Post actions/cache@v2\",\r\n                  \"status\": \"completed\",\r\n                  \"conclusion\": \"success\",\r\n                  \"number\": 16,\r\n                  \"started_at\": \"2020-01-20T09:44:39.000-08:00\",\r\n                  \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\r\n                },\r\n                {\r\n                  \"name\": \"Complete job\",\r\n                  \"status\": \"completed\",\r\n                  \"conclusion\": \"success\",\r\n                  \"number\": 17,\r\n                  \"started_at\": \"2020-01-20T09:44:39.000-08:00\",\r\n                  \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\r\n                }\r\n              ],\r\n              \"check_run_url\": \"https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListJobsForWorkflowRunOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListOrgSecretsOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 3,\r\n          \"secrets\": [\r\n            {\r\n              \"name\": \"GIST_ID\",\r\n              \"created_at\": \"2019-08-10T14:59:22Z\",\r\n              \"updated_at\": \"2020-01-10T14:59:22Z\",\r\n              \"visibility\": \"private\"\r\n            },\r\n            {\r\n              \"name\": \"DEPLOY_TOKEN\",\r\n              \"created_at\": \"2019-08-10T14:59:22Z\",\r\n              \"updated_at\": \"2020-01-10T14:59:22Z\",\r\n              \"visibility\": \"all\"\r\n            },\r\n            {\r\n              \"name\": \"GH_TOKEN\",\r\n              \"created_at\": \"2019-08-10T14:59:22Z\",\r\n              \"updated_at\": \"2020-01-10T14:59:22Z\",\r\n              \"visibility\": \"selected\",\r\n              \"selected_repositories_url\": \"https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListOrgSecretsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"repositories\": [\r\n            {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"template_repository\": {\r\n                \"id\": 1296269,\r\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n                \"name\": \"Hello-World\",\r\n                \"full_name\": \"octocat/Hello-World\",\r\n                \"owner\": {\r\n                  \"login\": \"octocat\",\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDQ6VXNlcjE=\",\r\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"url\": \"https://api.github.com/users/octocat\",\r\n                  \"html_url\": \"https://github.com/octocat\",\r\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                  \"type\": \"User\",\r\n                  \"site_admin\": false\r\n                },\r\n                \"private\": false,\r\n                \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n                \"description\": \"This your first repo!\",\r\n                \"fork\": false,\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n                \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n                \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n                \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n                \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n                \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n                \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n                \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n                \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n                \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n                \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n                \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n                \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n                \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n                \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n                \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n                \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n                \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n                \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n                \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n                \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n                \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n                \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n                \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n                \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n                \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n                \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n                \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n                \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n                \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n                \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n                \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n                \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n                \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n                \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n                \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n                \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n                \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n                \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n                \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n                \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n                \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n                \"homepage\": \"https://github.com\",\r\n                \"organization\": null,\r\n                \"language\": null,\r\n                \"forks\": 9,\r\n                \"forks_count\": 9,\r\n                \"stargazers_count\": 80,\r\n                \"watchers_count\": 80,\r\n                \"watchers\": 80,\r\n                \"size\": 108,\r\n                \"default_branch\": \"master\",\r\n                \"open_issues\": 0,\r\n                \"open_issues_count\": 0,\r\n                \"is_template\": true,\r\n                \"license\": {\r\n                  \"key\": \"mit\",\r\n                  \"name\": \"MIT License\",\r\n                  \"url\": \"https://api.github.com/licenses/mit\",\r\n                  \"spdx_id\": \"MIT\",\r\n                  \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                  \"html_url\": \"https://api.github.com/licenses/mit\"\r\n                },\r\n                \"topics\": [\r\n                  \"octocat\",\r\n                  \"atom\",\r\n                  \"electron\",\r\n                  \"api\"\r\n                ],\r\n                \"has_issues\": true,\r\n                \"has_projects\": true,\r\n                \"has_wiki\": true,\r\n                \"has_pages\": false,\r\n                \"has_downloads\": true,\r\n                \"archived\": false,\r\n                \"disabled\": false,\r\n                \"visibility\": \"public\",\r\n                \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n                \"created_at\": \"2011-01-26T19:01:12Z\",\r\n                \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n                \"permissions\": {\r\n                  \"admin\": false,\r\n                  \"push\": false,\r\n                  \"pull\": true\r\n                },\r\n                \"allow_rebase_merge\": true,\r\n                \"template_repository\": null,\r\n                \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n                \"allow_squash_merge\": true,\r\n                \"allow_auto_merge\": false,\r\n                \"delete_branch_on_merge\": true,\r\n                \"allow_merge_commit\": true,\r\n                \"subscribers_count\": 42,\r\n                \"network_count\": 0\r\n              },\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"delete_branch_on_merge\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListRepoSecretsOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"secrets\": [\r\n            {\r\n              \"name\": \"GH_TOKEN\",\r\n              \"created_at\": \"2019-08-10T14:59:22Z\",\r\n              \"updated_at\": \"2020-01-10T14:59:22Z\"\r\n            },\r\n            {\r\n              \"name\": \"GIST_ID\",\r\n              \"created_at\": \"2020-01-10T10:59:22Z\",\r\n              \"updated_at\": \"2020-01-11T11:59:22Z\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListRepoSecretsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListRepoWorkflowsOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"workflows\": [\r\n            {\r\n              \"id\": 161335,\r\n              \"node_id\": \"MDg6V29ya2Zsb3cxNjEzMzU=\",\r\n              \"name\": \"CI\",\r\n              \"path\": \".github/workflows/blank.yaml\",\r\n              \"state\": \"active\",\r\n              \"created_at\": \"2020-01-08T23:48:37.000-08:00\",\r\n              \"updated_at\": \"2020-01-08T23:50:21.000-08:00\",\r\n              \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335\",\r\n              \"html_url\": \"https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335\",\r\n              \"badge_url\": \"https://github.com/octo-org/octo-repo/workflows/CI/badge.svg\"\r\n            },\r\n            {\r\n              \"id\": 269289,\r\n              \"node_id\": \"MDE4OldvcmtmbG93IFNlY29uZGFyeTI2OTI4OQ==\",\r\n              \"name\": \"Linter\",\r\n              \"path\": \".github/workflows/linter.yaml\",\r\n              \"state\": \"active\",\r\n              \"created_at\": \"2020-01-08T23:48:37.000-08:00\",\r\n              \"updated_at\": \"2020-01-08T23:50:21.000-08:00\",\r\n              \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/workflows/269289\",\r\n              \"html_url\": \"https://github.com/octo-org/octo-repo/blob/master/.github/workflows/269289\",\r\n              \"badge_url\": \"https://github.com/octo-org/octo-repo/workflows/Linter/badge.svg\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListRepoWorkflowsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListSelectedReposForOrgSecretOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"repositories\": [\r\n            {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelectedReposForOrgSecretOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"repositories\": [\r\n            {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"template_repository\": null,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://github.com/licenses/mit\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListSelfHostedRunnerGroupsForOrgOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 3,\r\n          \"runner_groups\": [\r\n            {\r\n              \"id\": 1,\r\n              \"name\": \"Default\",\r\n              \"visibility\": \"all\",\r\n              \"default\": true,\r\n              \"runners_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/1/runners\",\r\n              \"inherited\": false,\r\n              \"allows_public_repositories\": true\r\n            },\r\n            {\r\n              \"id\": 2,\r\n              \"name\": \"octo-runner-group\",\r\n              \"visibility\": \"selected\",\r\n              \"default\": false,\r\n              \"selected_repositories_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/2/repositories\",\r\n              \"runners_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners\",\r\n              \"inherited\": true,\r\n              \"allows_public_repositories\": true\r\n            },\r\n            {\r\n              \"id\": 3,\r\n              \"name\": \"expensive-hardware\",\r\n              \"visibility\": \"private\",\r\n              \"default\": false,\r\n              \"runners_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/3/runners\",\r\n              \"inherited\": false,\r\n              \"allows_public_repositories\": true\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelfHostedRunnerGroupsForOrgOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListSelfHostedRunnersForOrgOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"runners\": [\r\n            {\r\n              \"id\": 23,\r\n              \"name\": \"linux_runner\",\r\n              \"os\": \"linux\",\r\n              \"status\": \"online\",\r\n              \"busy\": true,\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 5,\r\n                  \"name\": \"self-hosted\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 7,\r\n                  \"name\": \"X64\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 11,\r\n                  \"name\": \"Linux\",\r\n                  \"type\": \"read-only\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              \"id\": 24,\r\n              \"name\": \"mac_runner\",\r\n              \"os\": \"macos\",\r\n              \"status\": \"offline\",\r\n              \"busy\": false,\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 5,\r\n                  \"name\": \"self-hosted\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 7,\r\n                  \"name\": \"X64\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 20,\r\n                  \"name\": \"macOS\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 21,\r\n                  \"name\": \"no-gpu\",\r\n                  \"type\": \"custom\"\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelfHostedRunnersForOrgOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListSelfHostedRunnersForRepoOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"runners\": [\r\n            {\r\n              \"id\": 23,\r\n              \"name\": \"linux_runner\",\r\n              \"os\": \"linux\",\r\n              \"status\": \"online\",\r\n              \"busy\": true,\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 5,\r\n                  \"name\": \"self-hosted\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 7,\r\n                  \"name\": \"X64\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 11,\r\n                  \"name\": \"Linux\",\r\n                  \"type\": \"read-only\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              \"id\": 24,\r\n              \"name\": \"mac_runner\",\r\n              \"os\": \"macos\",\r\n              \"status\": \"offline\",\r\n              \"busy\": false,\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 5,\r\n                  \"name\": \"self-hosted\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 7,\r\n                  \"name\": \"X64\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 20,\r\n                  \"name\": \"macOS\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 21,\r\n                  \"name\": \"no-gpu\",\r\n                  \"type\": \"custom\"\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelfHostedRunnersForRepoOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListSelfHostedRunnersInGroupForOrgOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"runners\": [\r\n            {\r\n              \"id\": 23,\r\n              \"name\": \"linux_runner\",\r\n              \"os\": \"linux\",\r\n              \"status\": \"online\",\r\n              \"busy\": true,\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 5,\r\n                  \"name\": \"self-hosted\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 7,\r\n                  \"name\": \"X64\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 11,\r\n                  \"name\": \"Linux\",\r\n                  \"type\": \"read-only\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              \"id\": 24,\r\n              \"name\": \"mac_runner\",\r\n              \"os\": \"macos\",\r\n              \"status\": \"offline\",\r\n              \"busy\": false,\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 5,\r\n                  \"name\": \"self-hosted\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 7,\r\n                  \"name\": \"X64\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 20,\r\n                  \"name\": \"macOS\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 21,\r\n                  \"name\": \"no-gpu\",\r\n                  \"type\": \"custom\"\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelfHostedRunnersInGroupForOrgOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListWorkflowRunArtifactsOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"artifacts\": [\r\n            {\r\n              \"id\": 11,\r\n              \"node_id\": \"MDg6QXJ0aWZhY3QxMQ==\",\r\n              \"name\": \"Rails\",\r\n              \"size_in_bytes\": 556,\r\n              \"url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11\",\r\n              \"archive_download_url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip\",\r\n              \"expired\": false,\r\n              \"created_at\": \"2020-01-10T14:59:22Z\",\r\n              \"expires_at\": \"2020-03-21T14:59:22Z\",\r\n              \"updated_at\": \"2020-02-21T14:59:22Z\"\r\n            },\r\n            {\r\n              \"id\": 13,\r\n              \"node_id\": \"MDg6QXJ0aWZhY3QxMw==\",\r\n              \"name\": \"\",\r\n              \"size_in_bytes\": 453,\r\n              \"url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13\",\r\n              \"archive_download_url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip\",\r\n              \"expired\": false,\r\n              \"created_at\": \"2020-01-10T14:59:22Z\",\r\n              \"expires_at\": \"2020-03-21T14:59:22Z\",\r\n              \"updated_at\": \"2020-02-21T14:59:22Z\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListWorkflowRunArtifactsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsListWorkflowRunsForRepoOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"workflow_runs\": [\r\n            {\r\n              \"id\": 30433642,\r\n              \"name\": \"Build\",\r\n              \"node_id\": \"MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==\",\r\n              \"head_branch\": \"master\",\r\n              \"head_sha\": \"acb5820ced9479c074f688cc328bf03f341a511d\",\r\n              \"run_number\": 562,\r\n              \"event\": \"push\",\r\n              \"status\": \"queued\",\r\n              \"conclusion\": null,\r\n              \"workflow_id\": 159038,\r\n              \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642\",\r\n              \"html_url\": \"https://github.com/octo-org/octo-repo/actions/runs/30433642\",\r\n              \"pull_requests\": [\r\n\r\n              ],\r\n              \"created_at\": \"2020-01-22T19:33:08Z\",\r\n              \"updated_at\": \"2020-01-22T19:33:08Z\",\r\n              \"jobs_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs\",\r\n              \"logs_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs\",\r\n              \"check_suite_url\": \"https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374\",\r\n              \"artifacts_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts\",\r\n              \"cancel_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel\",\r\n              \"rerun_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun\",\r\n              \"workflow_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038\",\r\n              \"head_commit\": {\r\n                \"id\": \"acb5820ced9479c074f688cc328bf03f341a511d\",\r\n                \"tree_id\": \"d23f6eedb1e1b9610bbc754ddb5197bfe7271223\",\r\n                \"message\": \"Create linter.yaml\",\r\n                \"timestamp\": \"2020-01-22T19:33:05Z\",\r\n                \"author\": {\r\n                  \"name\": \"Octo Cat\",\r\n                  \"email\": \"octocat@github.com\"\r\n                },\r\n                \"committer\": {\r\n                  \"name\": \"GitHub\",\r\n                  \"email\": \"noreply@github.com\"\r\n                }\r\n              },\r\n              \"repository\": {\r\n                \"id\": 1296269,\r\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n                \"name\": \"Hello-World\",\r\n                \"full_name\": \"octocat/Hello-World\",\r\n                \"owner\": {\r\n                  \"login\": \"octocat\",\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDQ6VXNlcjE=\",\r\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"url\": \"https://api.github.com/users/octocat\",\r\n                  \"html_url\": \"https://github.com/octocat\",\r\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                  \"type\": \"User\",\r\n                  \"site_admin\": false\r\n                },\r\n                \"private\": false,\r\n                \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n                \"description\": \"This your first repo!\",\r\n                \"fork\": false,\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n                \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n                \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n                \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n                \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n                \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n                \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n                \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n                \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n                \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n                \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n                \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n                \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n                \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n                \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n                \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n                \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n                \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n                \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n                \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n                \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n                \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n                \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n                \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n                \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n                \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n                \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n                \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n                \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n                \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n                \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n                \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n                \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n                \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n                \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n                \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n                \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n                \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n                \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\r\n              },\r\n              \"head_repository\": {\r\n                \"id\": 217723378,\r\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=\",\r\n                \"name\": \"octo-repo\",\r\n                \"full_name\": \"octo-org/octo-repo\",\r\n                \"private\": true,\r\n                \"owner\": {\r\n                  \"login\": \"octocat\",\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDQ6VXNlcjE=\",\r\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"url\": \"https://api.github.com/users/octocat\",\r\n                  \"html_url\": \"https://github.com/octocat\",\r\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                  \"type\": \"User\",\r\n                  \"site_admin\": false\r\n                },\r\n                \"html_url\": \"https://github.com/octo-org/octo-repo\",\r\n                \"description\": null,\r\n                \"fork\": false,\r\n                \"url\": \"https://api.github.com/repos/octo-org/octo-repo\",\r\n                \"forks_url\": \"https://api.github.com/repos/octo-org/octo-repo/forks\",\r\n                \"keys_url\": \"https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}\",\r\n                \"collaborators_url\": \"https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}\",\r\n                \"teams_url\": \"https://api.github.com/repos/octo-org/octo-repo/teams\",\r\n                \"hooks_url\": \"https://api.github.com/repos/octo-org/octo-repo/hooks\",\r\n                \"issue_events_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}\",\r\n                \"events_url\": \"https://api.github.com/repos/octo-org/octo-repo/events\",\r\n                \"assignees_url\": \"https://api.github.com/repos/octo-org/octo-repo/assignees{/user}\",\r\n                \"branches_url\": \"https://api.github.com/repos/octo-org/octo-repo/branches{/branch}\",\r\n                \"tags_url\": \"https://api.github.com/repos/octo-org/octo-repo/tags\",\r\n                \"blobs_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}\",\r\n                \"git_tags_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}\",\r\n                \"git_refs_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}\",\r\n                \"trees_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}\",\r\n                \"statuses_url\": \"https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}\",\r\n                \"languages_url\": \"https://api.github.com/repos/octo-org/octo-repo/languages\",\r\n                \"stargazers_url\": \"https://api.github.com/repos/octo-org/octo-repo/stargazers\",\r\n                \"contributors_url\": \"https://api.github.com/repos/octo-org/octo-repo/contributors\",\r\n                \"subscribers_url\": \"https://api.github.com/repos/octo-org/octo-repo/subscribers\",\r\n                \"subscription_url\": \"https://api.github.com/repos/octo-org/octo-repo/subscription\",\r\n                \"commits_url\": \"https://api.github.com/repos/octo-org/octo-repo/commits{/sha}\",\r\n                \"git_commits_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}\",\r\n                \"comments_url\": \"https://api.github.com/repos/octo-org/octo-repo/comments{/number}\",\r\n                \"issue_comment_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}\",\r\n                \"contents_url\": \"https://api.github.com/repos/octo-org/octo-repo/contents/{+path}\",\r\n                \"compare_url\": \"https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}\",\r\n                \"merges_url\": \"https://api.github.com/repos/octo-org/octo-repo/merges\",\r\n                \"archive_url\": \"https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}\",\r\n                \"downloads_url\": \"https://api.github.com/repos/octo-org/octo-repo/downloads\",\r\n                \"issues_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues{/number}\",\r\n                \"pulls_url\": \"https://api.github.com/repos/octo-org/octo-repo/pulls{/number}\",\r\n                \"milestones_url\": \"https://api.github.com/repos/octo-org/octo-repo/milestones{/number}\",\r\n                \"notifications_url\": \"https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}\",\r\n                \"labels_url\": \"https://api.github.com/repos/octo-org/octo-repo/labels{/name}\",\r\n                \"releases_url\": \"https://api.github.com/repos/octo-org/octo-repo/releases{/id}\",\r\n                \"deployments_url\": \"https://api.github.com/repos/octo-org/octo-repo/deployments\"\r\n              }\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListWorkflowRunsForRepoOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsOrganizationPermissions_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"enabled_repositories\": \"all\",\r\n          \"allowed_actions\": \"selected\",\r\n          \"selected_actions_url\": \"https://api.github.com/organizations/42/actions/permissions/selected-actions\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsOrganizationPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsPublicKey_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"key_id\": \"012345678912345678\",\r\n          \"key\": \"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsPublicKey

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsRepositoryPermissions_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"enabled\": true,\r\n          \"allowed_actions\": \"selected\",\r\n          \"selected_actions_url\": \"https://api.github.com/repositories/42/actions/permissions/selected-actions\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsRepositoryPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsReviewPendingDeploymentsForRunReqState_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"approved\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsReviewPendingDeploymentsForRunReqState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestActionsSecret_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"name\": \"GH_TOKEN\",\r\n          \"created_at\": \"2019-08-10T14:59:22Z\",\r\n          \"updated_at\": \"2020-01-10T14:59:22Z\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsSecret

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestAppPermissions_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"contents\": \"read\",\r\n          \"issues\": \"read\",\r\n          \"deployments\": \"write\",\r\n          \"single_file\": \"read\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AppPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestApplicationGrant_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"url\": \"https://api.github.com/applications/grants/1\",\r\n          \"app\": {\r\n            \"url\": \"http://my-github-app.com\",\r\n            \"name\": \"my github app\",\r\n            \"client_id\": \"abcde12345fghij67890\"\r\n          },\r\n          \"created_at\": \"2011-09-06T17:26:27Z\",\r\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\r\n          \"scopes\": [\r\n            \"public_repo\"\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ApplicationGrant

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestAppsListInstallationReposForAuthenticatedUserOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"repositories\": [\r\n            {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"template_repository\": null,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://github.com/licenses/mit\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AppsListInstallationReposForAuthenticatedUserOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestAppsListReposAccessibleToInstallationOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"repositories\": [\r\n            {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"allow_rebase_merge\": true,\r\n              \"template_repository\": null,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://github.com/licenses/mit\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AppsListReposAccessibleToInstallationOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestAppsUpdateWebhookConfigForAppReq_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                  \"content_type\": \"json\",\r\n                  \"insecure_ssl\": \"0\",\r\n                  \"secret\": \"********\",\r\n                  \"url\": \"https://example.com/webhook\"\r\n                }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AppsUpdateWebhookConfigForAppReq

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestArtifact_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 11,\r\n          \"node_id\": \"MDg6QXJ0aWZhY3QxMQ==\",\r\n          \"name\": \"Rails\",\r\n          \"size_in_bytes\": 556,\r\n          \"url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11\",\r\n          \"archive_download_url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip\",\r\n          \"expired\": false,\r\n          \"created_at\": \"2020-01-10T14:59:22Z\",\r\n          \"expires_at\": \"2020-01-21T14:59:22Z\",\r\n          \"updated_at\": \"2020-01-21T14:59:22Z\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Artifact

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestAuthenticationToken_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"token\": \"LLBF3JGZDX3P5PMEXLND6TS6FCWO6\",\r\n          \"expires_at\": \"2020-01-22T12:13:35.123-08:00\"\r\n        }",
		},
		{
			Input: "{\r\n          \"token\": \"AABF3JGZDX3P5PMEXLND6TS6FCWO6\",\r\n          \"expires_at\": \"2020-01-29T12:13:35.123-08:00\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AuthenticationToken

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestAuthenticationTokenPermissions_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n              \"issues\": \"read\",\r\n              \"deployments\": \"write\"\r\n            }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AuthenticationTokenPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestAuthorAssociation_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"OWNER\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AuthorAssociation

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestAuthorization_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"url\": \"https://api.github.com/authorizations/1\",\r\n          \"scopes\": [\r\n\r\n          ],\r\n          \"token\": \"ghu_16C7e42F292c6912E7710c838347Ae178B4a\",\r\n          \"token_last_eight\": \"Ae178B4a\",\r\n          \"hashed_token\": \"25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8\",\r\n          \"app\": {\r\n            \"url\": \"http://my-github-app.com\",\r\n            \"name\": \"my github app\",\r\n            \"client_id\": \"abcde12345fghij67890\"\r\n          },\r\n          \"note\": \"optional note\",\r\n          \"note_url\": \"http://optional/note/url\",\r\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\r\n          \"created_at\": \"2011-09-06T17:26:27Z\",\r\n          \"fingerprint\": \"jklmnop12345678\",\r\n          \"expires_at\": \"2011-09-08T17:26:27Z\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"installation\": {\r\n            \"permissions\": {\r\n              \"metadata\": \"read\",\r\n              \"issues\": \"write\",\r\n              \"contents\": \"read\"\r\n            },\r\n            \"repository_selection\": \"selected\",\r\n            \"single_file_name\": \".github/workflow.yml\",\r\n            \"repositories_url\": \"https://api.github.com/user/repos\",\r\n            \"account\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"has_multiple_single_files\": false,\r\n            \"single_file_paths\": [\r\n\r\n            ]\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"url\": \"https://api.github.com/authorizations/1\",\r\n          \"scopes\": [\r\n            \"public_repo\"\r\n          ],\r\n          \"token\": \"ghu_16C7e42F292c6912E7710c838347Ae178B4a\",\r\n          \"token_last_eight\": \"Ae178B4a\",\r\n          \"hashed_token\": \"25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8\",\r\n          \"app\": {\r\n            \"url\": \"http://my-github-app.com\",\r\n            \"name\": \"my github app\",\r\n            \"client_id\": \"abcde12345fghij67890\"\r\n          },\r\n          \"note\": \"optional note\",\r\n          \"note_url\": \"http://optional/note/url\",\r\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\r\n          \"created_at\": \"2011-09-06T17:26:27Z\",\r\n          \"expires_at\": \"2011-10-06T17:26:27Z\",\r\n          \"fingerprint\": \"jklmnop12345678\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"url\": \"https://api.github.com/authorizations/1\",\r\n          \"scopes\": [\r\n            \"public_repo\"\r\n          ],\r\n          \"token\": \"ghu_16C7e42F292c6912E7710c838347Ae178B4a\",\r\n          \"token_last_eight\": \"Ae178B4a\",\r\n          \"hashed_token\": \"25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8\",\r\n          \"app\": {\r\n            \"url\": \"http://my-github-app.com\",\r\n            \"name\": \"my github app\",\r\n            \"client_id\": \"abcde12345fghij67890\"\r\n          },\r\n          \"note\": \"optional note\",\r\n          \"note_url\": \"http://optional/note/url\",\r\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\r\n          \"created_at\": \"2011-09-06T17:26:27Z\",\r\n          \"expires_at\": \"2012-10-06T17:26:27Z\",\r\n          \"fingerprint\": \"jklmnop12345678\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"url\": \"https://api.github.com/authorizations/1\",\r\n          \"scopes\": [\r\n            \"public_repo\"\r\n          ],\r\n          \"token\": \"ghu_16C7e42F292c6912E7710c838347Ae178B4a\",\r\n          \"token_last_eight\": \"Ae178B4a\",\r\n          \"hashed_token\": \"25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8\",\r\n          \"app\": {\r\n            \"url\": \"http://my-github-app.com\",\r\n            \"name\": \"my github app\",\r\n            \"client_id\": \"abcde12345fghij67890\"\r\n          },\r\n          \"note\": \"optional note\",\r\n          \"note_url\": \"http://optional/note/url\",\r\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\r\n          \"created_at\": \"2011-09-06T17:26:27Z\",\r\n          \"expires_at\": \"2011-10-06T17:26:27Z\",\r\n          \"fingerprint\": \"\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"url\": \"https://api.github.com/authorizations/1\",\r\n          \"scopes\": [\r\n            \"public_repo\",\r\n            \"user\"\r\n          ],\r\n          \"token\": \"ghu_16C7e42F292c6912E7710c838347Ae178B4a\",\r\n          \"token_last_eight\": \"Ae178B4a\",\r\n          \"hashed_token\": \"25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8\",\r\n          \"app\": {\r\n            \"url\": \"http://my-github-app.com\",\r\n            \"name\": \"my github app\",\r\n            \"client_id\": \"abcde12345fghij67890\"\r\n          },\r\n          \"note\": \"optional note\",\r\n          \"note_url\": \"http://optional/note/url\",\r\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\r\n          \"created_at\": \"2011-09-06T17:26:27Z\",\r\n          \"fingerprint\": \"jklmnop12345678\",\r\n          \"expires_at\": \"2011-09-08T17:26:27Z\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Authorization

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestAutolink_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"key_prefix\": \"TICKET-\",\r\n          \"url_template\": \"https://example.com/TICKET?query=<num>\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Autolink

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestBaseGist_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d\",\r\n          \"forks_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/forks\",\r\n          \"commits_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/commits\",\r\n          \"id\": \"aa5a315d61ae9438b18d\",\r\n          \"node_id\": \"MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk\",\r\n          \"git_pull_url\": \"https://gist.github.com/aa5a315d61ae9438b18d.git\",\r\n          \"git_push_url\": \"https://gist.github.com/aa5a315d61ae9438b18d.git\",\r\n          \"html_url\": \"https://gist.github.com/aa5a315d61ae9438b18d\",\r\n          \"files\": {\r\n            \"hello_world.rb\": {\r\n              \"filename\": \"hello_world.rb\",\r\n              \"type\": \"application/x-ruby\",\r\n              \"language\": \"Ruby\",\r\n              \"raw_url\": \"https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb\",\r\n              \"size\": 167\r\n            }\r\n          },\r\n          \"public\": true,\r\n          \"created_at\": \"2010-04-14T02:15:15Z\",\r\n          \"updated_at\": \"2011-06-20T11:34:15Z\",\r\n          \"description\": \"Hello World Examples\",\r\n          \"comments\": 0,\r\n          \"user\": null,\r\n          \"comments_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/comments/\",\r\n          \"owner\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"truncated\": false\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ BaseGist

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestBlob_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"content\": \"Q29udGVudCBvZiB0aGUgYmxvYg==\",\r\n          \"encoding\": \"base64\",\r\n          \"url\": \"https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\",\r\n          \"sha\": \"3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\",\r\n          \"size\": 19,\r\n          \"node_id\": \"Q29udGVudCBvZiB0aGUgYmxvYg==\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Blob

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestBranchProtection_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection\",\r\n          \"required_status_checks\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks\",\r\n            \"contexts\": [\r\n              \"continuous-integration/travis-ci\"\r\n            ],\r\n            \"contexts_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts\",\r\n            \"enforcement_level\": \"non_admins\"\r\n          },\r\n          \"enforce_admins\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins\",\r\n            \"enabled\": true\r\n          },\r\n          \"required_pull_request_reviews\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews\",\r\n            \"dismissal_restrictions\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions\",\r\n              \"users_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams\",\r\n              \"users\": [\r\n                {\r\n                  \"login\": \"octocat\",\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDQ6VXNlcjE=\",\r\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"url\": \"https://api.github.com/users/octocat\",\r\n                  \"html_url\": \"https://github.com/octocat\",\r\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                  \"type\": \"User\",\r\n                  \"site_admin\": false\r\n                }\r\n              ],\r\n              \"teams\": [\r\n                {\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDQ6VGVhbTE=\",\r\n                  \"url\": \"https://api.github.com/teams/1\",\r\n                  \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\r\n                  \"name\": \"Justice League\",\r\n                  \"slug\": \"justice-league\",\r\n                  \"description\": \"A great team.\",\r\n                  \"privacy\": \"closed\",\r\n                  \"permission\": \"admin\",\r\n                  \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\r\n                  \"repositories_url\": \"https://api.github.com/teams/1/repos\",\r\n                  \"parent\": null\r\n                }\r\n              ]\r\n            },\r\n            \"dismiss_stale_reviews\": true,\r\n            \"require_code_owner_reviews\": true,\r\n            \"required_approving_review_count\": 2\r\n          },\r\n          \"restrictions\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions\",\r\n            \"users_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams\",\r\n            \"apps_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams\",\r\n            \"users\": [\r\n              {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              }\r\n            ],\r\n            \"teams\": [\r\n              {\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VGVhbTE=\",\r\n                \"url\": \"https://api.github.com/teams/1\",\r\n                \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\r\n                \"name\": \"Justice League\",\r\n                \"slug\": \"justice-league\",\r\n                \"description\": \"A great team.\",\r\n                \"privacy\": \"closed\",\r\n                \"permission\": \"admin\",\r\n                \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\r\n                \"repositories_url\": \"https://api.github.com/teams/1/repos\",\r\n                \"parent\": null\r\n              }\r\n            ],\r\n            \"apps\": [\r\n              {\r\n                \"id\": 1,\r\n                \"slug\": \"octoapp\",\r\n                \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\r\n                \"owner\": {\r\n                  \"login\": \"github\",\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n                  \"url\": \"https://api.github.com/orgs/github\",\r\n                  \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n                  \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n                  \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\r\n                  \"issues_url\": \"https://api.github.com/orgs/github/issues\",\r\n                  \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\r\n                  \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\r\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                  \"description\": \"A great organization\"\r\n                },\r\n                \"name\": \"Octocat App\",\r\n                \"description\": \"\",\r\n                \"external_url\": \"https://example.com\",\r\n                \"html_url\": \"https://github.com/apps/octoapp\",\r\n                \"created_at\": \"2017-07-08T16:18:44-04:00\",\r\n                \"updated_at\": \"2017-07-08T16:18:44-04:00\",\r\n                \"permissions\": {\r\n                  \"metadata\": \"read\",\r\n                  \"contents\": \"read\",\r\n                  \"issues\": \"write\",\r\n                  \"single_file\": \"write\"\r\n                },\r\n                \"events\": [\r\n                  \"push\",\r\n                  \"pull_request\"\r\n                ]\r\n              }\r\n            ]\r\n          },\r\n          \"required_linear_history\": {\r\n            \"enabled\": true\r\n          },\r\n          \"allow_force_pushes\": {\r\n            \"enabled\": true\r\n          },\r\n          \"allow_deletions\": {\r\n            \"enabled\": true\r\n          },\r\n          \"required_conversation_resolution\": {\r\n            \"enabled\": true\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ BranchProtection

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestBranchRestrictionPolicy_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions\",\r\n          \"users_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users\",\r\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams\",\r\n          \"apps_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams\",\r\n          \"users\": [\r\n            {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            }\r\n          ],\r\n          \"teams\": [\r\n            {\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VGVhbTE=\",\r\n              \"url\": \"https://api.github.com/teams/1\",\r\n              \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\r\n              \"name\": \"Justice League\",\r\n              \"slug\": \"justice-league\",\r\n              \"description\": \"A great team.\",\r\n              \"privacy\": \"closed\",\r\n              \"permission\": \"admin\",\r\n              \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\r\n              \"repositories_url\": \"https://api.github.com/teams/1/repos\",\r\n              \"parent\": null\r\n            }\r\n          ],\r\n          \"apps\": [\r\n            {\r\n              \"id\": 1,\r\n              \"slug\": \"octoapp\",\r\n              \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\r\n              \"owner\": {\r\n                \"login\": \"github\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n                \"url\": \"https://api.github.com/orgs/github\",\r\n                \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n                \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n                \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\r\n                \"issues_url\": \"https://api.github.com/orgs/github/issues\",\r\n                \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\r\n                \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"description\": \"A great organization\"\r\n              },\r\n              \"name\": \"Octocat App\",\r\n              \"description\": \"\",\r\n              \"external_url\": \"https://example.com\",\r\n              \"html_url\": \"https://github.com/apps/octoapp\",\r\n              \"created_at\": \"2017-07-08T16:18:44-04:00\",\r\n              \"updated_at\": \"2017-07-08T16:18:44-04:00\",\r\n              \"permissions\": {\r\n                \"metadata\": \"read\",\r\n                \"contents\": \"read\",\r\n                \"issues\": \"write\",\r\n                \"single_file\": \"write\"\r\n              },\r\n              \"events\": [\r\n                \"push\",\r\n                \"pull_request\"\r\n              ]\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ BranchRestrictionPolicy

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestBranchWithProtection_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"name\": \"master\",\r\n          \"commit\": {\r\n            \"sha\": \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\r\n            \"node_id\": \"MDY6Q29tbWl0N2ZkMWE2MGIwMWY5MWIzMTRmNTk5NTVhNGU0ZDRlODBkOGVkZjExZA==\",\r\n            \"commit\": {\r\n              \"author\": {\r\n                \"name\": \"The Octocat\",\r\n                \"date\": \"2012-03-06T15:06:50-08:00\",\r\n                \"email\": \"octocat@nowhere.com\"\r\n              },\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\r\n              \"message\": \"Merge pull request #6 from Spaceghost/patch-1\\n\\nNew line at end of file.\",\r\n              \"tree\": {\r\n                \"sha\": \"b4eecafa9be2f2006ce1b709d6857b07069b4608\",\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/b4eecafa9be2f2006ce1b709d6857b07069b4608\"\r\n              },\r\n              \"committer\": {\r\n                \"name\": \"The Octocat\",\r\n                \"date\": \"2012-03-06T15:06:50-08:00\",\r\n                \"email\": \"octocat@nowhere.com\"\r\n              },\r\n              \"verification\": {\r\n                \"verified\": false,\r\n                \"reason\": \"unsigned\",\r\n                \"signature\": null,\r\n                \"payload\": null\r\n              },\r\n              \"comment_count\": 0\r\n            },\r\n            \"author\": {\r\n              \"gravatar_id\": \"\",\r\n              \"avatar_url\": \"https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"id\": 583231,\r\n              \"login\": \"octocat\",\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": true\r\n            },\r\n            \"parents\": [\r\n              {\r\n                \"sha\": \"553c2077f0edc3d5dc5d17262f6aa498e69d6f8e\",\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e\"\r\n              },\r\n              {\r\n                \"sha\": \"762941318ee16e59dabbacb1b4049eec22f0d303\",\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/762941318ee16e59dabbacb1b4049eec22f0d303\"\r\n              }\r\n            ],\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\r\n            \"committer\": {\r\n              \"gravatar_id\": \"\",\r\n              \"avatar_url\": \"https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"id\": 583231,\r\n              \"login\": \"octocat\",\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": true\r\n            },\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments\"\r\n          },\r\n          \"_links\": {\r\n            \"html\": \"https://github.com/octocat/Hello-World/tree/master\",\r\n            \"self\": \"https://api.github.com/repos/octocat/Hello-World/branches/master\"\r\n          },\r\n          \"protected\": true,\r\n          \"protection\": {\r\n            \"required_status_checks\": {\r\n              \"enforcement_level\": \"non_admins\",\r\n              \"contexts\": [\r\n                \"ci-test\",\r\n                \"linter\"\r\n              ]\r\n            }\r\n          },\r\n          \"protection_url\": \"https://api.github.com/repos/octocat/hello-world/branches/master/protection\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ BranchWithProtection

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCheckRun_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 4,\r\n          \"head_sha\": \"ce587453ced02b1526dfb4cb910479d431683101\",\r\n          \"node_id\": \"MDg6Q2hlY2tSdW40\",\r\n          \"external_id\": \"\",\r\n          \"url\": \"https://api.github.com/repos/github/hello-world/check-runs/4\",\r\n          \"html_url\": \"https://github.com/github/hello-world/runs/4\",\r\n          \"details_url\": \"https://example.com\",\r\n          \"status\": \"completed\",\r\n          \"conclusion\": \"neutral\",\r\n          \"started_at\": \"2018-05-04T01:14:52Z\",\r\n          \"completed_at\": \"2018-05-04T01:14:52Z\",\r\n          \"output\": {\r\n            \"title\": \"Mighty Readme report\",\r\n            \"summary\": \"There are 0 failures, 2 warnings, and 1 notice.\",\r\n            \"text\": \"You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.\",\r\n            \"annotations_count\": 2,\r\n            \"annotations_url\": \"https://api.github.com/repos/github/hello-world/check-runs/4/annotations\"\r\n          },\r\n          \"name\": \"mighty_readme\",\r\n          \"check_suite\": {\r\n            \"id\": 5\r\n          },\r\n          \"app\": {\r\n            \"id\": 1,\r\n            \"slug\": \"octoapp\",\r\n            \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\r\n            \"owner\": {\r\n              \"login\": \"github\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n              \"url\": \"https://api.github.com/orgs/github\",\r\n              \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n              \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": true\r\n            },\r\n            \"name\": \"Octocat App\",\r\n            \"description\": \"\",\r\n            \"external_url\": \"https://example.com\",\r\n            \"html_url\": \"https://github.com/apps/octoapp\",\r\n            \"created_at\": \"2017-07-08T16:18:44-04:00\",\r\n            \"updated_at\": \"2017-07-08T16:18:44-04:00\",\r\n            \"permissions\": {\r\n              \"metadata\": \"read\",\r\n              \"contents\": \"read\",\r\n              \"issues\": \"write\",\r\n              \"single_file\": \"write\"\r\n            },\r\n            \"events\": [\r\n              \"push\",\r\n              \"pull_request\"\r\n            ]\r\n          },\r\n          \"pull_requests\": [\r\n            {\r\n              \"url\": \"https://api.github.com/repos/github/hello-world/pulls/1\",\r\n              \"id\": 1934,\r\n              \"number\": 3956,\r\n              \"head\": {\r\n                \"ref\": \"say-hello\",\r\n                \"sha\": \"3dca65fa3e8d4b3da3f3d056c59aee1c50f41390\",\r\n                \"repo\": {\r\n                  \"id\": 526,\r\n                  \"url\": \"https://api.github.com/repos/github/hello-world\",\r\n                  \"name\": \"hello-world\"\r\n                }\r\n              },\r\n              \"base\": {\r\n                \"ref\": \"master\",\r\n                \"sha\": \"e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f\",\r\n                \"repo\": {\r\n                  \"id\": 526,\r\n                  \"url\": \"https://api.github.com/repos/github/hello-world\",\r\n                  \"name\": \"hello-world\"\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckRun

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCheckRunConclusion_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"neutral\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckRunConclusion

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCheckRunStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"queued\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckRunStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCheckSuite_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 5,\r\n          \"node_id\": \"MDEwOkNoZWNrU3VpdGU1\",\r\n          \"head_branch\": \"master\",\r\n          \"head_sha\": \"d6fde92930d4715a2b49857d24b940956b26d2d3\",\r\n          \"status\": \"completed\",\r\n          \"conclusion\": \"neutral\",\r\n          \"url\": \"https://api.github.com/repos/github/hello-world/check-suites/5\",\r\n          \"before\": \"146e867f55c26428e5f9fade55a9bbf5e95a7912\",\r\n          \"after\": \"d6fde92930d4715a2b49857d24b940956b26d2d3\",\r\n          \"pull_requests\": [\r\n\r\n          ],\r\n          \"created_at\": \"2017-07-08T16:18:44-04:00\",\r\n          \"updated_at\": \"2017-07-08T16:18:44-04:00\",\r\n          \"app\": {\r\n            \"id\": 1,\r\n            \"slug\": \"octoapp\",\r\n            \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\r\n            \"owner\": {\r\n              \"login\": \"github\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n              \"url\": \"https://api.github.com/orgs/github\",\r\n              \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n              \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": true\r\n            },\r\n            \"name\": \"Octocat App\",\r\n            \"description\": \"\",\r\n            \"external_url\": \"https://example.com\",\r\n            \"html_url\": \"https://github.com/apps/octoapp\",\r\n            \"created_at\": \"2017-07-08T16:18:44-04:00\",\r\n            \"updated_at\": \"2017-07-08T16:18:44-04:00\",\r\n            \"permissions\": {\r\n              \"metadata\": \"read\",\r\n              \"contents\": \"read\",\r\n              \"issues\": \"write\",\r\n              \"single_file\": \"write\"\r\n            },\r\n            \"events\": [\r\n              \"push\",\r\n              \"pull_request\"\r\n            ]\r\n          },\r\n          \"repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"template_repository\": {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World-Template\",\r\n              \"full_name\": \"octocat/Hello-World-Template\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks\": 9,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"watchers\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues\": 0,\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://api.github.com/licenses/mit\"\r\n              },\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0\r\n            },\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n            \"homepage\": \"https://github.com\",\r\n            \"language\": null,\r\n            \"forks_count\": 9,\r\n            \"stargazers_count\": 80,\r\n            \"watchers_count\": 80,\r\n            \"size\": 108,\r\n            \"default_branch\": \"master\",\r\n            \"open_issues_count\": 0,\r\n            \"is_template\": false,\r\n            \"topics\": [\r\n              \"octocat\",\r\n              \"atom\",\r\n              \"electron\",\r\n              \"api\"\r\n            ],\r\n            \"has_issues\": true,\r\n            \"has_projects\": true,\r\n            \"has_wiki\": true,\r\n            \"has_pages\": false,\r\n            \"has_downloads\": true,\r\n            \"archived\": false,\r\n            \"disabled\": false,\r\n            \"visibility\": \"public\",\r\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n            \"created_at\": \"2011-01-26T19:01:12Z\",\r\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n            \"permissions\": {\r\n              \"admin\": false,\r\n              \"push\": false,\r\n              \"pull\": true\r\n            },\r\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n            \"delete_branch_on_merge\": true,\r\n            \"subscribers_count\": 42,\r\n            \"network_count\": 0\r\n          },\r\n          \"head_commit\": {\r\n            \"id\": \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\r\n            \"tree_id\": \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\r\n            \"message\": \"Merge pull request #6 from Spaceghost/patch-1\\n\\nNew line at end of file.\",\r\n            \"timestamp\": \"2016-10-10T00:00:00Z\",\r\n            \"author\": {\r\n              \"name\": \"The Octocat\",\r\n              \"email\": \"octocat@nowhere.com\"\r\n            },\r\n            \"committer\": {\r\n              \"name\": \"The Octocat\",\r\n              \"email\": \"octocat@nowhere.com\"\r\n            }\r\n          },\r\n          \"latest_check_runs_count\": 1,\r\n          \"check_runs_url\": \"https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckSuite

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCheckSuiteConclusion_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"neutral\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckSuiteConclusion

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCheckSuitePreference_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"preferences\": {\r\n            \"auto_trigger_checks\": [\r\n              {\r\n                \"app_id\": 2,\r\n                \"setting\": true\r\n              },\r\n              {\r\n                \"app_id\": 4,\r\n                \"setting\": false\r\n              }\r\n            ]\r\n          },\r\n          \"repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n            \"homepage\": \"https://github.com\",\r\n            \"language\": null,\r\n            \"forks_count\": 9,\r\n            \"stargazers_count\": 80,\r\n            \"watchers_count\": 80,\r\n            \"size\": 108,\r\n            \"default_branch\": \"master\",\r\n            \"open_issues_count\": 0,\r\n            \"is_template\": false,\r\n            \"topics\": [\r\n              \"octocat\",\r\n              \"atom\",\r\n              \"electron\",\r\n              \"api\"\r\n            ],\r\n            \"has_issues\": true,\r\n            \"has_projects\": true,\r\n            \"has_wiki\": true,\r\n            \"has_pages\": false,\r\n            \"has_downloads\": true,\r\n            \"archived\": false,\r\n            \"disabled\": false,\r\n            \"visibility\": \"public\",\r\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n            \"created_at\": \"2011-01-26T19:01:12Z\",\r\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n            \"permissions\": {\r\n              \"admin\": false,\r\n              \"push\": false,\r\n              \"pull\": true\r\n            },\r\n            \"template_repository\": {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World-Template\",\r\n              \"full_name\": \"octocat/Hello-World-Template\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks\": 9,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"watchers\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues\": 0,\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://api.github.com/licenses/mit\"\r\n              },\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0\r\n            }\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckSuitePreference

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCheckSuiteStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"completed\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckSuiteStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestChecksListForRefOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"check_runs\": [\r\n            {\r\n              \"id\": 4,\r\n              \"head_sha\": \"ce587453ced02b1526dfb4cb910479d431683101\",\r\n              \"node_id\": \"MDg6Q2hlY2tSdW40\",\r\n              \"external_id\": \"\",\r\n              \"url\": \"https://api.github.com/repos/github/hello-world/check-runs/4\",\r\n              \"html_url\": \"https://github.com/github/hello-world/runs/4\",\r\n              \"details_url\": \"https://example.com\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"neutral\",\r\n              \"started_at\": \"2018-05-04T01:14:52Z\",\r\n              \"completed_at\": \"2018-05-04T01:14:52Z\",\r\n              \"output\": {\r\n                \"title\": \"Mighty Readme report\",\r\n                \"summary\": \"There are 0 failures, 2 warnings, and 1 notice.\",\r\n                \"text\": \"You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.\",\r\n                \"annotations_count\": 2,\r\n                \"annotations_url\": \"https://api.github.com/repos/github/hello-world/check-runs/4/annotations\"\r\n              },\r\n              \"name\": \"mighty_readme\",\r\n              \"check_suite\": {\r\n                \"id\": 5\r\n              },\r\n              \"app\": {\r\n                \"id\": 1,\r\n                \"slug\": \"octoapp\",\r\n                \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\r\n                \"owner\": {\r\n                  \"login\": \"github\",\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n                  \"url\": \"https://api.github.com/orgs/github\",\r\n                  \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n                  \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"html_url\": \"https://github.com/octocat\",\r\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                  \"type\": \"User\",\r\n                  \"site_admin\": true\r\n                },\r\n                \"name\": \"Octocat App\",\r\n                \"description\": \"\",\r\n                \"external_url\": \"https://example.com\",\r\n                \"html_url\": \"https://github.com/apps/octoapp\",\r\n                \"created_at\": \"2017-07-08T16:18:44-04:00\",\r\n                \"updated_at\": \"2017-07-08T16:18:44-04:00\",\r\n                \"permissions\": {\r\n                  \"metadata\": \"read\",\r\n                  \"contents\": \"read\",\r\n                  \"issues\": \"write\",\r\n                  \"single_file\": \"write\"\r\n                },\r\n                \"events\": [\r\n                  \"push\",\r\n                  \"pull_request\"\r\n                ]\r\n              },\r\n              \"pull_requests\": [\r\n                {\r\n                  \"url\": \"https://api.github.com/repos/github/hello-world/pulls/1\",\r\n                  \"id\": 1934,\r\n                  \"number\": 3956,\r\n                  \"head\": {\r\n                    \"ref\": \"say-hello\",\r\n                    \"sha\": \"3dca65fa3e8d4b3da3f3d056c59aee1c50f41390\",\r\n                    \"repo\": {\r\n                      \"id\": 526,\r\n                      \"url\": \"https://api.github.com/repos/github/hello-world\",\r\n                      \"name\": \"hello-world\"\r\n                    }\r\n                  },\r\n                  \"base\": {\r\n                    \"ref\": \"master\",\r\n                    \"sha\": \"e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f\",\r\n                    \"repo\": {\r\n                      \"id\": 526,\r\n                      \"url\": \"https://api.github.com/repos/github/hello-world\",\r\n                      \"name\": \"hello-world\"\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ChecksListForRefOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestChecksListForSuiteOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"check_runs\": [\r\n            {\r\n              \"id\": 4,\r\n              \"head_sha\": \"ce587453ced02b1526dfb4cb910479d431683101\",\r\n              \"node_id\": \"MDg6Q2hlY2tSdW40\",\r\n              \"external_id\": \"\",\r\n              \"url\": \"https://api.github.com/repos/github/hello-world/check-runs/4\",\r\n              \"html_url\": \"https://github.com/github/hello-world/runs/4\",\r\n              \"details_url\": \"https://example.com\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"neutral\",\r\n              \"started_at\": \"2018-05-04T01:14:52Z\",\r\n              \"completed_at\": \"2018-05-04T01:14:52Z\",\r\n              \"output\": {\r\n                \"title\": \"Mighty Readme report\",\r\n                \"summary\": \"There are 0 failures, 2 warnings, and 1 notice.\",\r\n                \"text\": \"You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.\",\r\n                \"annotations_count\": 2,\r\n                \"annotations_url\": \"https://api.github.com/repos/github/hello-world/check-runs/4/annotations\"\r\n              },\r\n              \"name\": \"mighty_readme\",\r\n              \"check_suite\": {\r\n                \"id\": 5\r\n              },\r\n              \"app\": {\r\n                \"id\": 1,\r\n                \"slug\": \"octoapp\",\r\n                \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\r\n                \"owner\": {\r\n                  \"login\": \"github\",\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n                  \"url\": \"https://api.github.com/orgs/github\",\r\n                  \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n                  \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"html_url\": \"https://github.com/octocat\",\r\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                  \"type\": \"User\",\r\n                  \"site_admin\": true\r\n                },\r\n                \"name\": \"Octocat App\",\r\n                \"description\": \"\",\r\n                \"external_url\": \"https://example.com\",\r\n                \"html_url\": \"https://github.com/apps/octoapp\",\r\n                \"created_at\": \"2017-07-08T16:18:44-04:00\",\r\n                \"updated_at\": \"2017-07-08T16:18:44-04:00\",\r\n                \"permissions\": {\r\n                  \"metadata\": \"read\",\r\n                  \"contents\": \"read\",\r\n                  \"issues\": \"write\",\r\n                  \"single_file\": \"write\"\r\n                },\r\n                \"events\": [\r\n                  \"push\",\r\n                  \"pull_request\"\r\n                ]\r\n              },\r\n              \"pull_requests\": [\r\n                {\r\n                  \"url\": \"https://api.github.com/repos/github/hello-world/pulls/1\",\r\n                  \"id\": 1934,\r\n                  \"number\": 3956,\r\n                  \"head\": {\r\n                    \"ref\": \"say-hello\",\r\n                    \"sha\": \"3dca65fa3e8d4b3da3f3d056c59aee1c50f41390\",\r\n                    \"repo\": {\r\n                      \"id\": 526,\r\n                      \"url\": \"https://api.github.com/repos/github/hello-world\",\r\n                      \"name\": \"hello-world\"\r\n                    }\r\n                  },\r\n                  \"base\": {\r\n                    \"ref\": \"master\",\r\n                    \"sha\": \"e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f\",\r\n                    \"repo\": {\r\n                      \"id\": 526,\r\n                      \"url\": \"https://api.github.com/repos/github/hello-world\",\r\n                      \"name\": \"hello-world\"\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ChecksListForSuiteOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestChecksListSuitesForRefOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"check_suites\": [\r\n            {\r\n              \"id\": 5,\r\n              \"node_id\": \"MDEwOkNoZWNrU3VpdGU1\",\r\n              \"head_branch\": \"master\",\r\n              \"head_sha\": \"d6fde92930d4715a2b49857d24b940956b26d2d3\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"neutral\",\r\n              \"url\": \"https://api.github.com/repos/github/hello-world/check-suites/5\",\r\n              \"before\": \"146e867f55c26428e5f9fade55a9bbf5e95a7912\",\r\n              \"after\": \"d6fde92930d4715a2b49857d24b940956b26d2d3\",\r\n              \"pull_requests\": [\r\n\r\n              ],\r\n              \"app\": {\r\n                \"id\": 1,\r\n                \"slug\": \"octoapp\",\r\n                \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\r\n                \"owner\": {\r\n                  \"login\": \"github\",\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n                  \"url\": \"https://api.github.com/orgs/github\",\r\n                  \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n                  \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"html_url\": \"https://github.com/octocat\",\r\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                  \"type\": \"User\",\r\n                  \"site_admin\": true\r\n                },\r\n                \"name\": \"Octocat App\",\r\n                \"description\": \"\",\r\n                \"external_url\": \"https://example.com\",\r\n                \"html_url\": \"https://github.com/apps/octoapp\",\r\n                \"created_at\": \"2017-07-08T16:18:44-04:00\",\r\n                \"updated_at\": \"2017-07-08T16:18:44-04:00\",\r\n                \"permissions\": {\r\n                  \"metadata\": \"read\",\r\n                  \"contents\": \"read\",\r\n                  \"issues\": \"write\",\r\n                  \"single_file\": \"write\"\r\n                },\r\n                \"events\": [\r\n                  \"push\",\r\n                  \"pull_request\"\r\n                ]\r\n              },\r\n              \"repository\": {\r\n                \"id\": 1296269,\r\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n                \"name\": \"Hello-World\",\r\n                \"full_name\": \"octocat/Hello-World\",\r\n                \"owner\": {\r\n                  \"login\": \"octocat\",\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDQ6VXNlcjE=\",\r\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"url\": \"https://api.github.com/users/octocat\",\r\n                  \"html_url\": \"https://github.com/octocat\",\r\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                  \"type\": \"User\",\r\n                  \"site_admin\": false\r\n                },\r\n                \"private\": false,\r\n                \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n                \"description\": \"This your first repo!\",\r\n                \"fork\": false,\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n                \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n                \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n                \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n                \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n                \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n                \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n                \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n                \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n                \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n                \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n                \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n                \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n                \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n                \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n                \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n                \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n                \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n                \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n                \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n                \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n                \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n                \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n                \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n                \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n                \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n                \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n                \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n                \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n                \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n                \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n                \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n                \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n                \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n                \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n                \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n                \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n                \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n                \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n                \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n                \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n                \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n                \"homepage\": \"https://github.com\",\r\n                \"language\": null,\r\n                \"forks_count\": 9,\r\n                \"stargazers_count\": 80,\r\n                \"watchers_count\": 80,\r\n                \"size\": 108,\r\n                \"default_branch\": \"master\",\r\n                \"open_issues_count\": 0,\r\n                \"is_template\": true,\r\n                \"topics\": [\r\n                  \"octocat\",\r\n                  \"atom\",\r\n                  \"electron\",\r\n                  \"api\"\r\n                ],\r\n                \"has_issues\": true,\r\n                \"has_projects\": true,\r\n                \"has_wiki\": true,\r\n                \"has_pages\": false,\r\n                \"has_downloads\": true,\r\n                \"archived\": false,\r\n                \"disabled\": false,\r\n                \"visibility\": \"public\",\r\n                \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n                \"created_at\": \"2011-01-26T19:01:12Z\",\r\n                \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n                \"permissions\": {\r\n                  \"admin\": false,\r\n                  \"push\": false,\r\n                  \"pull\": true\r\n                },\r\n                \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n                \"delete_branch_on_merge\": true,\r\n                \"subscribers_count\": 42,\r\n                \"network_count\": 0\r\n              },\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"head_commit\": {\r\n                \"id\": \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\r\n                \"tree_id\": \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\r\n                \"message\": \"Merge pull request #6 from Spaceghost/patch-1\\n\\nNew line at end of file.\",\r\n                \"timestamp\": \"2016-10-10T00:00:00Z\",\r\n                \"author\": {\r\n                  \"name\": \"The Octocat\",\r\n                  \"email\": \"octocat@nowhere.com\"\r\n                },\r\n                \"committer\": {\r\n                  \"name\": \"The Octocat\",\r\n                  \"email\": \"octocat@nowhere.com\"\r\n                }\r\n              },\r\n              \"latest_check_runs_count\": 1,\r\n              \"check_runs_url\": \"https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ChecksListSuitesForRefOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCloneTraffic_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"count\": 173,\r\n          \"uniques\": 128,\r\n          \"clones\": [\r\n            {\r\n              \"timestamp\": \"2016-10-10T00:00:00Z\",\r\n              \"count\": 2,\r\n              \"uniques\": 1\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-11T00:00:00Z\",\r\n              \"count\": 17,\r\n              \"uniques\": 16\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-12T00:00:00Z\",\r\n              \"count\": 21,\r\n              \"uniques\": 15\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-13T00:00:00Z\",\r\n              \"count\": 8,\r\n              \"uniques\": 7\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-14T00:00:00Z\",\r\n              \"count\": 5,\r\n              \"uniques\": 5\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-15T00:00:00Z\",\r\n              \"count\": 2,\r\n              \"uniques\": 2\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-16T00:00:00Z\",\r\n              \"count\": 8,\r\n              \"uniques\": 7\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-17T00:00:00Z\",\r\n              \"count\": 26,\r\n              \"uniques\": 15\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-18T00:00:00Z\",\r\n              \"count\": 19,\r\n              \"uniques\": 17\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-19T00:00:00Z\",\r\n              \"count\": 19,\r\n              \"uniques\": 14\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-20T00:00:00Z\",\r\n              \"count\": 19,\r\n              \"uniques\": 15\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-21T00:00:00Z\",\r\n              \"count\": 9,\r\n              \"uniques\": 7\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-22T00:00:00Z\",\r\n              \"count\": 5,\r\n              \"uniques\": 5\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-23T00:00:00Z\",\r\n              \"count\": 6,\r\n              \"uniques\": 5\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-24T00:00:00Z\",\r\n              \"count\": 7,\r\n              \"uniques\": 5\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CloneTraffic

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCodeOfConduct_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"key\": \"contributor_covenant\",\r\n          \"name\": \"Contributor Covenant\",\r\n          \"url\": \"https://api.github.com/codes_of_conduct/contributor_covenant\",\r\n          \"body\": \"# Contributor Covenant Code of Conduct\\n\\n## Our Pledge\\n\\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\\n\\n## Our Standards\\n\\nExamples of behavior that contributes to creating a positive environment include:\\n\\n* Using welcoming and inclusive language\\n* Being respectful of differing viewpoints and experiences\\n* Gracefully accepting constructive criticism\\n* Focusing on what is best for the community\\n* Showing empathy towards other community members\\n\\nExamples of unacceptable behavior by participants include:\\n\\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\\n* Trolling, insulting/derogatory comments, and personal or political attacks\\n* Public or private harassment\\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\\n* Other conduct which could reasonably be considered inappropriate in a professional setting\\n\\n## Our Responsibilities\\n\\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\\n                  to any instances of unacceptable behavior.\\n\\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\\n\\n## Scope\\n\\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\\n\\n## Enforcement\\n\\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\\n\\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\\n\\n## Attribution\\n\\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\\n\\n[homepage]: http://contributor-covenant.org\\n[version]: http://contributor-covenant.org/version/1/4/\\n\",\r\n          \"html_url\": \"http://contributor-covenant.org/version/1/4/\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeOfConduct

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCodeScanningAlert_Decode(t *testing.T) {
	t.Skip("Skipped by regex")
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"number\": 42,\r\n          \"created_at\": \"2020-06-19T11:21:34Z\",\r\n          \"url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42\",\r\n          \"html_url\": \"https://github.com/octocat/hello-world/code-scanning/42\",\r\n          \"state\": \"dismissed\",\r\n          \"dismissed_by\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 54933897,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"dismissed_at\": \"2020-02-14T12:29:18Z\",\r\n          \"dismissed_reason\": \"false positive\",\r\n          \"rule\": {\r\n            \"id\": \"js/zipslip\",\r\n            \"severity\": \"error\",\r\n            \"security_severity_level\": \"high\",\r\n            \"description\": \"Arbitrary file write during zip extraction (\\\"Zip Slip\\\")\",\r\n            \"name\": \"js/zipslip\",\r\n            \"full_description\": \"Extracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten.\",\r\n            \"tags\": [\r\n              \"security\",\r\n              \"external/cwe/cwe-022\"\r\n            ],\r\n            \"help\": \"# Arbitrary file write during zip extraction (\\\"Zip Slip\\\")\\\\nExtracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten ...\"\r\n          },\r\n          \"tool\": {\r\n            \"name\": \"CodeQL\",\r\n            \"guid\": null,\r\n            \"version\": \"2.4.0\"\r\n          },\r\n          \"most_recent_instance\": {\r\n            \"ref\": \"refs/heads/main\",\r\n            \"analysis_key\": \".github/workflows/codeql-analysis.yml:CodeQL-Build\",\r\n            \"environment\": \"{}\",\r\n            \"state\": \"dismissed\",\r\n            \"commit_sha\": \"39406e42cb832f683daa691dd652a8dc36ee8930\",\r\n            \"message\": {\r\n              \"text\": \"This path depends on a user-provided value.\"\r\n            },\r\n            \"location\": {\r\n              \"path\": \"spec-main/api-session-spec.ts\",\r\n              \"start_line\": 917,\r\n              \"end_line\": 917,\r\n              \"start_column\": 7,\r\n              \"end_column\": 18\r\n            },\r\n            \"classifications\": [\r\n              \"test\"\r\n            ]\r\n          },\r\n          \"instances_url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42/instances\",\r\n          \"instances\": null\r\n        }",
		},
		{
			Input: "{\r\n          \"number\": 42,\r\n          \"created_at\": \"2020-08-25T21:28:36Z\",\r\n          \"url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42\",\r\n          \"html_url\": \"https://github.com/octocat/hello-world/code-scanning/42\",\r\n          \"state\": \"dismissed\",\r\n          \"dismissed_by\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"dismissed_at\": \"2020-09-02T22:34:56Z\",\r\n          \"dismissed_reason\": \"false positive\",\r\n          \"rule\": {\r\n            \"id\": \"js/zipslip\",\r\n            \"severity\": \"error\",\r\n            \"security_severity_level\": \"high\",\r\n            \"description\": \"Arbitrary file write during zip extraction (\\\"Zip Slip\\\")\",\r\n            \"name\": \"js/zipslip\",\r\n            \"full_description\": \"Extracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten.\",\r\n            \"tags\": [\r\n              \"security\",\r\n              \"external/cwe/cwe-022\"\r\n            ],\r\n            \"help\": \"# Arbitrary file write during zip extraction (\\\"Zip Slip\\\")\\\\nExtracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten ...\"\r\n          },\r\n          \"tool\": {\r\n            \"name\": \"CodeQL\",\r\n            \"guid\": null,\r\n            \"version\": \"2.4.0\"\r\n          },\r\n          \"most_recent_instance\": {\r\n            \"ref\": \"refs/heads/main\",\r\n            \"analysis_key\": \".github/workflows/codeql-analysis.yml:CodeQL-Build\",\r\n            \"environment\": \"{}\",\r\n            \"state\": \"dismissed\",\r\n            \"commit_sha\": \"39406e42cb832f683daa691dd652a8dc36ee8930\",\r\n            \"message\": {\r\n              \"text\": \"This path depends on a user-provided value.\"\r\n            },\r\n            \"location\": {\r\n              \"path\": \"spec-main/api-session-spec.ts\",\r\n              \"start_line\": 917,\r\n              \"end_line\": 917,\r\n              \"start_column\": 7,\r\n              \"end_column\": 18\r\n            },\r\n            \"classifications\": [\r\n              \"test\"\r\n            ]\r\n          },\r\n          \"instances_url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42/instances\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeScanningAlert

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCodeScanningAnalysis_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"ref\": \"refs/heads/main\",\r\n          \"commit_sha\": \"c18c69115654ff0166991962832dc2bd7756e655\",\r\n          \"analysis_key\": \".github/workflows/codeql-analysis.yml:analyze\",\r\n          \"environment\": \"{\\\"language\\\":\\\"javascript\\\"}\",\r\n          \"error\": \"\",\r\n          \"category\": \".github/workflows/codeql-analysis.yml:analyze/language:javascript\",\r\n          \"created_at\": \"2021-01-13T11:55:49Z\",\r\n          \"results_count\": 3,\r\n          \"rules_count\": 67,\r\n          \"id\": 3602840,\r\n          \"url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/201\",\r\n          \"sarif_id\": \"47177e22-5596-11eb-80a1-c1e54ef945c6\",\r\n          \"tool\": {\r\n            \"name\": \"CodeQL\",\r\n            \"guid\": null,\r\n            \"version\": \"2.4.0\"\r\n          },\r\n          \"deletable\": true,\r\n          \"warning\": \"\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeScanningAnalysis

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCodeScanningAnalysisDeletion_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"next_analysis_url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/41\",\r\n          \"confirm_delete_url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/41?confirm_delete\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeScanningAnalysisDeletion

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCodeScanningSarifsReceipt_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": \"47177e22-5596-11eb-80a1-c1e54ef945c6\",\r\n          \"url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/sarifs/47177e22-5596-11eb-80a1-c1e54ef945c6\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeScanningSarifsReceipt

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCodeScanningSarifsStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"processing_status\": \"complete\",\r\n          \"analyses_url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/analyses?sarif_id=47177e22-5596-11eb-80a1-c1e54ef945c6\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeScanningSarifsStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCombinedBillingUsage_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"days_left_in_billing_cycle\": 20,\r\n          \"estimated_paid_storage_for_month\": 15,\r\n          \"estimated_storage_for_month\": 40\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CombinedBillingUsage

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCombinedCommitStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"state\": \"success\",\r\n          \"statuses\": [\r\n            {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDY6U3RhdHVzMQ==\",\r\n              \"state\": \"success\",\r\n              \"description\": \"Build has completed successfully\",\r\n              \"target_url\": \"https://ci.example.com/1000/output\",\r\n              \"context\": \"continuous-integration/jenkins\",\r\n              \"created_at\": \"2012-07-20T01:19:13Z\",\r\n              \"updated_at\": \"2012-07-20T01:19:13Z\"\r\n            },\r\n            {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"avatar_url\": \"https://github.com/images/error/other_user_happy.gif\",\r\n              \"id\": 2,\r\n              \"node_id\": \"MDY6U3RhdHVzMg==\",\r\n              \"state\": \"success\",\r\n              \"description\": \"Testing has completed successfully\",\r\n              \"target_url\": \"https://ci.example.com/2000/output\",\r\n              \"context\": \"security/brakeman\",\r\n              \"created_at\": \"2012-08-20T01:19:13Z\",\r\n              \"updated_at\": \"2012-08-20T01:19:13Z\"\r\n            }\r\n          ],\r\n          \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"total_count\": 2,\r\n          \"repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\r\n          },\r\n          \"commit_url\": \"https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e/status\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CombinedCommitStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCommit_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"node_id\": \"MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments\",\r\n          \"commit\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"author\": {\r\n              \"name\": \"Monalisa Octocat\",\r\n              \"email\": \"mona@github.com\",\r\n              \"date\": \"2011-04-14T16:00:49Z\"\r\n            },\r\n            \"committer\": {\r\n              \"name\": \"Monalisa Octocat\",\r\n              \"email\": \"mona@github.com\",\r\n              \"date\": \"2011-04-14T16:00:49Z\"\r\n            },\r\n            \"message\": \"Fix all the bugs\",\r\n            \"tree\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\r\n            },\r\n            \"comment_count\": 0,\r\n            \"verification\": {\r\n              \"verified\": false,\r\n              \"reason\": \"unsigned\",\r\n              \"signature\": null,\r\n              \"payload\": null\r\n            }\r\n          },\r\n          \"author\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"committer\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"parents\": [\r\n            {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\r\n            }\r\n          ],\r\n          \"stats\": {\r\n            \"additions\": 104,\r\n            \"deletions\": 4,\r\n            \"total\": 108\r\n          },\r\n          \"files\": [\r\n            {\r\n              \"filename\": \"file1.txt\",\r\n              \"additions\": 10,\r\n              \"deletions\": 2,\r\n              \"changes\": 12,\r\n              \"status\": \"modified\",\r\n              \"raw_url\": \"https://github.com/octocat/Hello-World/raw/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt\",\r\n              \"blob_url\": \"https://github.com/octocat/Hello-World/blob/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt\",\r\n              \"patch\": \"@@ -29,7 +29,7 @@\\n.....\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Commit

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCommitComment_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/comments/1\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDEzOkNvbW1pdENvbW1lbnQx\",\r\n          \"body\": \"Great stuff\",\r\n          \"path\": \"file1.txt\",\r\n          \"position\": 4,\r\n          \"line\": 14,\r\n          \"commit_id\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"author_association\": \"COLLABORATOR\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"created_at\": \"2011-04-14T16:00:49Z\",\r\n          \"updated_at\": \"2011-04-14T16:00:49Z\"\r\n        }",
		},
		{
			Input: "{\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/comments/1\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDEzOkNvbW1pdENvbW1lbnQx\",\r\n          \"body\": \"Nice change\",\r\n          \"path\": \"file1.txt\",\r\n          \"position\": 4,\r\n          \"line\": 14,\r\n          \"commit_id\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"author_association\": \"COLLABORATOR\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"created_at\": \"2011-04-14T16:00:49Z\",\r\n          \"updated_at\": \"2011-04-14T16:00:49Z\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CommitComment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCommitComparison_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/compare/master...topic\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/compare/master...topic\",\r\n          \"permalink_url\": \"https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17\",\r\n          \"diff_url\": \"https://github.com/octocat/Hello-World/compare/master...topic.diff\",\r\n          \"patch_url\": \"https://github.com/octocat/Hello-World/compare/master...topic.patch\",\r\n          \"base_commit\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"node_id\": \"MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments\",\r\n            \"commit\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"author\": {\r\n                \"name\": \"Monalisa Octocat\",\r\n                \"email\": \"mona@github.com\",\r\n                \"date\": \"2011-04-14T16:00:49Z\"\r\n              },\r\n              \"committer\": {\r\n                \"name\": \"Monalisa Octocat\",\r\n                \"email\": \"mona@github.com\",\r\n                \"date\": \"2011-04-14T16:00:49Z\"\r\n              },\r\n              \"message\": \"Fix all the bugs\",\r\n              \"tree\": {\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n                \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\r\n              },\r\n              \"comment_count\": 0,\r\n              \"verification\": {\r\n                \"verified\": false,\r\n                \"reason\": \"unsigned\",\r\n                \"signature\": null,\r\n                \"payload\": null\r\n              }\r\n            },\r\n            \"author\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"committer\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"parents\": [\r\n              {\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n                \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\r\n              }\r\n            ]\r\n          },\r\n          \"merge_base_commit\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"node_id\": \"MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments\",\r\n            \"commit\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"author\": {\r\n                \"name\": \"Monalisa Octocat\",\r\n                \"email\": \"mona@github.com\",\r\n                \"date\": \"2011-04-14T16:00:49Z\"\r\n              },\r\n              \"committer\": {\r\n                \"name\": \"Monalisa Octocat\",\r\n                \"email\": \"mona@github.com\",\r\n                \"date\": \"2011-04-14T16:00:49Z\"\r\n              },\r\n              \"message\": \"Fix all the bugs\",\r\n              \"tree\": {\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n                \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\r\n              },\r\n              \"comment_count\": 0,\r\n              \"verification\": {\r\n                \"verified\": false,\r\n                \"reason\": \"unsigned\",\r\n                \"signature\": null,\r\n                \"payload\": null\r\n              }\r\n            },\r\n            \"author\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"committer\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"parents\": [\r\n              {\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n                \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\r\n              }\r\n            ]\r\n          },\r\n          \"status\": \"behind\",\r\n          \"ahead_by\": 1,\r\n          \"behind_by\": 2,\r\n          \"total_commits\": 1,\r\n          \"commits\": [\r\n            {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"node_id\": \"MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments\",\r\n              \"commit\": {\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n                \"author\": {\r\n                  \"name\": \"Monalisa Octocat\",\r\n                  \"email\": \"mona@github.com\",\r\n                  \"date\": \"2011-04-14T16:00:49Z\"\r\n                },\r\n                \"committer\": {\r\n                  \"name\": \"Monalisa Octocat\",\r\n                  \"email\": \"mona@github.com\",\r\n                  \"date\": \"2011-04-14T16:00:49Z\"\r\n                },\r\n                \"message\": \"Fix all the bugs\",\r\n                \"tree\": {\r\n                  \"url\": \"https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n                  \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\r\n                },\r\n                \"comment_count\": 0,\r\n                \"verification\": {\r\n                  \"verified\": false,\r\n                  \"reason\": \"unsigned\",\r\n                  \"signature\": null,\r\n                  \"payload\": null\r\n                }\r\n              },\r\n              \"author\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"committer\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"parents\": [\r\n                {\r\n                  \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n                  \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\r\n                }\r\n              ]\r\n            }\r\n          ],\r\n          \"files\": [\r\n            {\r\n              \"sha\": \"bbcd538c8e72b8c175046e27cc8f907076331401\",\r\n              \"filename\": \"file1.txt\",\r\n              \"status\": \"added\",\r\n              \"additions\": 103,\r\n              \"deletions\": 21,\r\n              \"changes\": 124,\r\n              \"blob_url\": \"https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt\",\r\n              \"raw_url\": \"https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"patch\": \"@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CommitComparison

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCommitComparisonStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"ahead\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CommitComparisonStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestCommunityProfile_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"health_percentage\": 100,\r\n          \"description\": \"My first repository on GitHub!\",\r\n          \"documentation\": null,\r\n          \"files\": {\r\n            \"code_of_conduct\": {\r\n              \"name\": \"Contributor Covenant\",\r\n              \"key\": \"contributor_covenant\",\r\n              \"url\": \"https://api.github.com/codes_of_conduct/contributor_covenant\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/CODE_OF_CONDUCT.md\"\r\n            },\r\n            \"code_of_conduct_file\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/CODE_OF_CONDUCT.md\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/CODE_OF_CONDUCT.md\"\r\n            },\r\n            \"contributing\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/CONTRIBUTING\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/CONTRIBUTING\"\r\n            },\r\n            \"issue_template\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/ISSUE_TEMPLATE\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/ISSUE_TEMPLATE\"\r\n            },\r\n            \"pull_request_template\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/PULL_REQUEST_TEMPLATE\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/PULL_REQUEST_TEMPLATE\"\r\n            },\r\n            \"license\": {\r\n              \"name\": \"MIT License\",\r\n              \"key\": \"mit\",\r\n              \"spdx_id\": \"MIT\",\r\n              \"url\": \"https://api.github.com/licenses/mit\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/LICENSE\",\r\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\r\n            },\r\n            \"readme\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/README.md\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/README.md\"\r\n            }\r\n          },\r\n          \"updated_at\": \"2017-02-28T19:09:29Z\",\r\n          \"content_reports_enabled\": true\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CommunityProfile

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestContentFile_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"type\": \"file\",\r\n          \"encoding\": \"base64\",\r\n          \"size\": 5362,\r\n          \"name\": \"README.md\",\r\n          \"path\": \"README.md\",\r\n          \"content\": \"encoded content ...\",\r\n          \"sha\": \"3d21ec53a331a6f037a91c368710b99387d012c1\",\r\n          \"url\": \"https://api.github.com/repos/octokit/octokit.rb/contents/README.md\",\r\n          \"git_url\": \"https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1\",\r\n          \"html_url\": \"https://github.com/octokit/octokit.rb/blob/master/README.md\",\r\n          \"download_url\": \"https://raw.githubusercontent.com/octokit/octokit.rb/master/README.md\",\r\n          \"_links\": {\r\n            \"git\": \"https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1\",\r\n            \"self\": \"https://api.github.com/repos/octokit/octokit.rb/contents/README.md\",\r\n            \"html\": \"https://github.com/octokit/octokit.rb/blob/master/README.md\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ContentFile

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestContentReferenceAttachment_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 101,\r\n          \"title\": \"[A-1234] Error found in core/models.py file'\",\r\n          \"body\": \"You have used an email that already exists for the user_email_uniq field.\\n ## DETAILS:\\n\\nThe (email)=(Octocat@github.com) already exists.\\n\\n The error was found in core/models.py in get_or_create_user at line 62.\\n\\n self.save()\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ContentReferenceAttachment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestDeployKey_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"key\": \"ssh-rsa AAA...\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/keys/1\",\r\n          \"title\": \"octocat@octomac\",\r\n          \"verified\": true,\r\n          \"created_at\": \"2014-12-10T15:53:42Z\",\r\n          \"read_only\": true\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ DeployKey

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestDeployment_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/example/deployments/1\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDEwOkRlcGxveW1lbnQx\",\r\n          \"sha\": \"a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d\",\r\n          \"ref\": \"topic-branch\",\r\n          \"task\": \"deploy\",\r\n          \"payload\": {\r\n          },\r\n          \"original_environment\": \"staging\",\r\n          \"environment\": \"production\",\r\n          \"description\": \"Deploy request from hubot\",\r\n          \"creator\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"created_at\": \"2012-07-20T01:19:13Z\",\r\n          \"updated_at\": \"2012-07-20T01:19:13Z\",\r\n          \"statuses_url\": \"https://api.github.com/repos/octocat/example/deployments/1/statuses\",\r\n          \"repository_url\": \"https://api.github.com/repos/octocat/example\",\r\n          \"transient_environment\": false,\r\n          \"production_environment\": true\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Deployment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestDeploymentReviewerType_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"User\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ DeploymentReviewerType

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestDeploymentStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/example/deployments/42/statuses/1\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDE2OkRlcGxveW1lbnRTdGF0dXMx\",\r\n          \"state\": \"success\",\r\n          \"creator\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"description\": \"Deployment finished successfully.\",\r\n          \"environment\": \"production\",\r\n          \"target_url\": \"https://example.com/deployment/42/output\",\r\n          \"created_at\": \"2012-07-20T01:19:13Z\",\r\n          \"updated_at\": \"2012-07-20T01:19:13Z\",\r\n          \"deployment_url\": \"https://api.github.com/repos/octocat/example/deployments/42\",\r\n          \"repository_url\": \"https://api.github.com/repos/octocat/example\",\r\n          \"environment_url\": \"https://test-branch.lab.acme.com\",\r\n          \"log_url\": \"https://example.com/deployment/42/output\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ DeploymentStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestDeploymentStatusState_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"success\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ DeploymentStatusState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestDiffEntryStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"added\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ DiffEntryStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"organizations\": [\r\n            {\r\n              \"login\": \"octocat\",\r\n              \"id\": 161335,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"url\": \"https://api.github.com/orgs/octo-org\",\r\n              \"repos_url\": \"https://api.github.com/orgs/octo-org/repos\",\r\n              \"events_url\": \"https://api.github.com/orgs/octo-org/events\",\r\n              \"hooks_url\": \"https://api.github.com/orgs/octo-org/hooks\",\r\n              \"issues_url\": \"https://api.github.com/orgs/octo-org/issues\",\r\n              \"members_url\": \"https://api.github.com/orgs/octo-org/members{/member}\",\r\n              \"public_members_url\": \"https://api.github.com/orgs/octo-org/public_members{/member}\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"description\": \"A great organization\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"organizations\": [\r\n            {\r\n              \"login\": \"octocat\",\r\n              \"id\": 161335,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"url\": \"https://api.github.com/orgs/octo-org\",\r\n              \"repos_url\": \"https://api.github.com/orgs/octo-org/repos\",\r\n              \"events_url\": \"https://api.github.com/orgs/octo-org/events\",\r\n              \"hooks_url\": \"https://api.github.com/orgs/octo-org/hooks\",\r\n              \"issues_url\": \"https://api.github.com/orgs/octo-org/issues\",\r\n              \"members_url\": \"https://api.github.com/orgs/octo-org/members{/member}\",\r\n              \"public_members_url\": \"https://api.github.com/orgs/octo-org/public_members{/member}\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"description\": \"A great organization\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 3,\r\n          \"runner_groups\": [\r\n            {\r\n              \"id\": 1,\r\n              \"name\": \"Default\",\r\n              \"visibility\": \"all\",\r\n              \"default\": true,\r\n              \"runners_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner_groups/1/runners\",\r\n              \"allows_public_repositories\": false\r\n            },\r\n            {\r\n              \"id\": 2,\r\n              \"name\": \"octo-runner-group\",\r\n              \"visibility\": \"selected\",\r\n              \"default\": false,\r\n              \"selected_organizations_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner_groups/2/organizations\",\r\n              \"runners_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner_groups/2/runners\",\r\n              \"allows_public_repositories\": true\r\n            },\r\n            {\r\n              \"id\": 3,\r\n              \"name\": \"expensive-hardware\",\r\n              \"visibility\": \"private\",\r\n              \"default\": false,\r\n              \"runners_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner_groups/3/runners\",\r\n              \"allows_public_repositories\": true\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestEnterpriseAdminListSelfHostedRunnersForEnterpriseOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"runners\": [\r\n            {\r\n              \"id\": 23,\r\n              \"name\": \"linux_runner\",\r\n              \"os\": \"linux\",\r\n              \"status\": \"online\",\r\n              \"busy\": true,\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 5,\r\n                  \"name\": \"self-hosted\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 7,\r\n                  \"name\": \"X64\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 11,\r\n                  \"name\": \"Linux\",\r\n                  \"type\": \"read-only\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              \"id\": 24,\r\n              \"name\": \"mac_runner\",\r\n              \"os\": \"macos\",\r\n              \"status\": \"offline\",\r\n              \"busy\": false,\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 5,\r\n                  \"name\": \"self-hosted\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 7,\r\n                  \"name\": \"X64\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 20,\r\n                  \"name\": \"macOS\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 21,\r\n                  \"name\": \"no-gpu\",\r\n                  \"type\": \"custom\"\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnterpriseAdminListSelfHostedRunnersForEnterpriseOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"runners\": [\r\n            {\r\n              \"id\": 23,\r\n              \"name\": \"linux_runner\",\r\n              \"os\": \"linux\",\r\n              \"status\": \"online\",\r\n              \"busy\": true,\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 5,\r\n                  \"name\": \"self-hosted\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 7,\r\n                  \"name\": \"X64\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 11,\r\n                  \"name\": \"Linux\",\r\n                  \"type\": \"read-only\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              \"id\": 24,\r\n              \"name\": \"mac_runner\",\r\n              \"os\": \"macos\",\r\n              \"status\": \"offline\",\r\n              \"busy\": false,\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 5,\r\n                  \"name\": \"self-hosted\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 7,\r\n                  \"name\": \"X64\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 20,\r\n                  \"name\": \"macOS\",\r\n                  \"type\": \"read-only\"\r\n                },\r\n                {\r\n                  \"id\": 21,\r\n                  \"name\": \"no-gpu\",\r\n                  \"type\": \"custom\"\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestEnvironmentApprovalsState_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"approved\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnvironmentApprovalsState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestFeed_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"timeline_url\": \"https://github.com/timeline\",\r\n          \"user_url\": \"https://github.com/{user}\",\r\n          \"current_user_public_url\": \"https://github.com/octocat\",\r\n          \"current_user_url\": \"https://github.com/octocat.private?token=abc123\",\r\n          \"current_user_actor_url\": \"https://github.com/octocat.private.actor?token=abc123\",\r\n          \"current_user_organization_url\": \"\",\r\n          \"current_user_organization_urls\": [\r\n            \"https://github.com/organizations/github/octocat.private.atom?token=abc123\"\r\n          ],\r\n          \"security_advisories_url\": \"https://github.com/security-advisories\",\r\n          \"_links\": {\r\n            \"timeline\": {\r\n              \"href\": \"https://github.com/timeline\",\r\n              \"type\": \"application/atom+xml\"\r\n            },\r\n            \"user\": {\r\n              \"href\": \"https://github.com/{user}\",\r\n              \"type\": \"application/atom+xml\"\r\n            },\r\n            \"current_user_public\": {\r\n              \"href\": \"https://github.com/octocat\",\r\n              \"type\": \"application/atom+xml\"\r\n            },\r\n            \"current_user\": {\r\n              \"href\": \"https://github.com/octocat.private?token=abc123\",\r\n              \"type\": \"application/atom+xml\"\r\n            },\r\n            \"current_user_actor\": {\r\n              \"href\": \"https://github.com/octocat.private.actor?token=abc123\",\r\n              \"type\": \"application/atom+xml\"\r\n            },\r\n            \"current_user_organization\": {\r\n              \"href\": \"\",\r\n              \"type\": \"\"\r\n            },\r\n            \"current_user_organizations\": [\r\n              {\r\n                \"href\": \"https://github.com/organizations/github/octocat.private.atom?token=abc123\",\r\n                \"type\": \"application/atom+xml\"\r\n              }\r\n            ],\r\n            \"security_advisories\": {\r\n              \"href\": \"https://github.com/security-advisories\",\r\n              \"type\": \"application/atom+xml\"\r\n            }\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Feed

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestFileCommit_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"content\": {\r\n            \"name\": \"hello.txt\",\r\n            \"path\": \"notes/hello.txt\",\r\n            \"sha\": \"a56507ed892d05a37c6d6128c260937ea4d287bd\",\r\n            \"size\": 9,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/notes/hello.txt\",\r\n            \"git_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/a56507ed892d05a37c6d6128c260937ea4d287bd\",\r\n            \"download_url\": \"https://raw.githubusercontent.com/octocat/HelloWorld/master/notes/hello.txt\",\r\n            \"type\": \"file\",\r\n            \"_links\": {\r\n              \"self\": \"https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt\",\r\n              \"git\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/a56507ed892d05a37c6d6128c260937ea4d287bd\",\r\n              \"html\": \"https://github.com/octocat/Hello-World/blob/master/notes/hello.txt\"\r\n            }\r\n          },\r\n          \"commit\": {\r\n            \"sha\": \"18a43cd8e1e3a79c786e3d808a73d23b6d212b16\",\r\n            \"node_id\": \"MDY6Q29tbWl0MThhNDNjZDhlMWUzYTc5Yzc4NmUzZDgwOGE3M2QyM2I2ZDIxMmIxNg==\",\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/18a43cd8e1e3a79c786e3d808a73d23b6d212b16\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/18a43cd8e1e3a79c786e3d808a73d23b6d212b16\",\r\n            \"author\": {\r\n              \"date\": \"2014-11-07T22:01:45Z\",\r\n              \"name\": \"Monalisa Octocat\",\r\n              \"email\": \"octocat@github.com\"\r\n            },\r\n            \"committer\": {\r\n              \"date\": \"2014-11-07T22:01:45Z\",\r\n              \"name\": \"Monalisa Octocat\",\r\n              \"email\": \"octocat@github.com\"\r\n            },\r\n            \"message\": \"my commit message\",\r\n            \"tree\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/9a21f8e2018f42ffcf369b24d2cd20bc25c9e66f\",\r\n              \"sha\": \"9a21f8e2018f42ffcf369b24d2cd20bc25c9e66f\"\r\n            },\r\n            \"parents\": [\r\n              {\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/da5a433788da5c255edad7979b328b67d79f53f6\",\r\n                \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/da5a433788da5c255edad7979b328b67d79f53f6\",\r\n                \"sha\": \"da5a433788da5c255edad7979b328b67d79f53f6\"\r\n              }\r\n            ],\r\n            \"verification\": {\r\n              \"verified\": false,\r\n              \"reason\": \"unsigned\",\r\n              \"signature\": null,\r\n              \"payload\": null\r\n            }\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"content\": {\r\n            \"name\": \"hello.txt\",\r\n            \"path\": \"notes/hello.txt\",\r\n            \"sha\": \"95b966ae1c166bd92f8ae7d1c313e738c731dfc3\",\r\n            \"size\": 9,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/notes/hello.txt\",\r\n            \"git_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/95b966ae1c166bd92f8ae7d1c313e738c731dfc3\",\r\n            \"download_url\": \"https://raw.githubusercontent.com/octocat/HelloWorld/master/notes/hello.txt\",\r\n            \"type\": \"file\",\r\n            \"_links\": {\r\n              \"self\": \"https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt\",\r\n              \"git\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/95b966ae1c166bd92f8ae7d1c313e738c731dfc3\",\r\n              \"html\": \"https://github.com/octocat/Hello-World/blob/master/notes/hello.txt\"\r\n            }\r\n          },\r\n          \"commit\": {\r\n            \"sha\": \"7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n            \"node_id\": \"MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==\",\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n            \"author\": {\r\n              \"date\": \"2014-11-07T22:01:45Z\",\r\n              \"name\": \"Monalisa Octocat\",\r\n              \"email\": \"octocat@github.com\"\r\n            },\r\n            \"committer\": {\r\n              \"date\": \"2014-11-07T22:01:45Z\",\r\n              \"name\": \"Monalisa Octocat\",\r\n              \"email\": \"octocat@github.com\"\r\n            },\r\n            \"message\": \"my commit message\",\r\n            \"tree\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb\",\r\n              \"sha\": \"691272480426f78a0138979dd3ce63b77f706feb\"\r\n            },\r\n            \"parents\": [\r\n              {\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5\",\r\n                \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/1acc419d4d6a9ce985db7be48c6349a0475975b5\",\r\n                \"sha\": \"1acc419d4d6a9ce985db7be48c6349a0475975b5\"\r\n              }\r\n            ],\r\n            \"verification\": {\r\n              \"verified\": false,\r\n              \"reason\": \"unsigned\",\r\n              \"signature\": null,\r\n              \"payload\": null\r\n            }\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"content\": null,\r\n          \"commit\": {\r\n            \"sha\": \"7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n            \"node_id\": \"MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==\",\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n            \"author\": {\r\n              \"date\": \"2014-11-07T22:01:45Z\",\r\n              \"name\": \"Monalisa Octocat\",\r\n              \"email\": \"octocat@github.com\"\r\n            },\r\n            \"committer\": {\r\n              \"date\": \"2014-11-07T22:01:45Z\",\r\n              \"name\": \"Monalisa Octocat\",\r\n              \"email\": \"octocat@github.com\"\r\n            },\r\n            \"message\": \"my commit message\",\r\n            \"tree\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb\",\r\n              \"sha\": \"691272480426f78a0138979dd3ce63b77f706feb\"\r\n            },\r\n            \"parents\": [\r\n              {\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5\",\r\n                \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/1acc419d4d6a9ce985db7be48c6349a0475975b5\",\r\n                \"sha\": \"1acc419d4d6a9ce985db7be48c6349a0475975b5\"\r\n              }\r\n            ],\r\n            \"verification\": {\r\n              \"verified\": false,\r\n              \"reason\": \"unsigned\",\r\n              \"signature\": null,\r\n              \"payload\": null\r\n            }\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ FileCommit

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestFullRepository_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1296269,\r\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n          \"name\": \"Hello-World\",\r\n          \"full_name\": \"octocat/Hello-World\",\r\n          \"owner\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"private\": false,\r\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n          \"description\": \"This your first repo!\",\r\n          \"fork\": false,\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n          \"homepage\": \"https://github.com\",\r\n          \"language\": null,\r\n          \"forks_count\": 9,\r\n          \"forks\": 9,\r\n          \"stargazers_count\": 80,\r\n          \"watchers_count\": 80,\r\n          \"watchers\": 80,\r\n          \"size\": 108,\r\n          \"default_branch\": \"master\",\r\n          \"open_issues_count\": 0,\r\n          \"open_issues\": 0,\r\n          \"is_template\": false,\r\n          \"topics\": [\r\n            \"octocat\",\r\n            \"atom\",\r\n            \"electron\",\r\n            \"api\"\r\n          ],\r\n          \"has_issues\": true,\r\n          \"has_projects\": true,\r\n          \"has_wiki\": true,\r\n          \"has_pages\": false,\r\n          \"has_downloads\": true,\r\n          \"archived\": false,\r\n          \"disabled\": false,\r\n          \"visibility\": \"public\",\r\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n          \"created_at\": \"2011-01-26T19:01:12Z\",\r\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n          \"permissions\": {\r\n            \"pull\": true,\r\n            \"push\": false,\r\n            \"admin\": false\r\n          },\r\n          \"allow_rebase_merge\": true,\r\n          \"template_repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World-Template\",\r\n            \"full_name\": \"octocat/Hello-World-Template\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\r\n            \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\r\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\r\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\r\n            \"homepage\": \"https://github.com\",\r\n            \"language\": null,\r\n            \"forks\": 9,\r\n            \"forks_count\": 9,\r\n            \"stargazers_count\": 80,\r\n            \"watchers_count\": 80,\r\n            \"watchers\": 80,\r\n            \"size\": 108,\r\n            \"default_branch\": \"master\",\r\n            \"open_issues\": 0,\r\n            \"open_issues_count\": 0,\r\n            \"is_template\": true,\r\n            \"license\": {\r\n              \"key\": \"mit\",\r\n              \"name\": \"MIT License\",\r\n              \"url\": \"https://api.github.com/licenses/mit\",\r\n              \"spdx_id\": \"MIT\",\r\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n              \"html_url\": \"https://api.github.com/licenses/mit\"\r\n            },\r\n            \"topics\": [\r\n              \"octocat\",\r\n              \"atom\",\r\n              \"electron\",\r\n              \"api\"\r\n            ],\r\n            \"has_issues\": true,\r\n            \"has_projects\": true,\r\n            \"has_wiki\": true,\r\n            \"has_pages\": false,\r\n            \"has_downloads\": true,\r\n            \"archived\": false,\r\n            \"disabled\": false,\r\n            \"visibility\": \"public\",\r\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n            \"created_at\": \"2011-01-26T19:01:12Z\",\r\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n            \"permissions\": {\r\n              \"admin\": false,\r\n              \"push\": false,\r\n              \"pull\": true\r\n            },\r\n            \"allow_rebase_merge\": true,\r\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n            \"allow_squash_merge\": true,\r\n            \"allow_auto_merge\": false,\r\n            \"delete_branch_on_merge\": true,\r\n            \"allow_merge_commit\": true,\r\n            \"subscribers_count\": 42,\r\n            \"network_count\": 0\r\n          },\r\n          \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n          \"allow_squash_merge\": true,\r\n          \"allow_auto_merge\": false,\r\n          \"delete_branch_on_merge\": true,\r\n          \"allow_merge_commit\": true,\r\n          \"subscribers_count\": 42,\r\n          \"network_count\": 0,\r\n          \"license\": {\r\n            \"key\": \"mit\",\r\n            \"name\": \"MIT License\",\r\n            \"spdx_id\": \"MIT\",\r\n            \"url\": \"https://api.github.com/licenses/mit\",\r\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\r\n          },\r\n          \"organization\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"Organization\",\r\n            \"site_admin\": false\r\n          },\r\n          \"parent\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n            \"homepage\": \"https://github.com\",\r\n            \"language\": null,\r\n            \"forks_count\": 9,\r\n            \"stargazers_count\": 80,\r\n            \"watchers_count\": 80,\r\n            \"size\": 108,\r\n            \"default_branch\": \"master\",\r\n            \"open_issues_count\": 0,\r\n            \"is_template\": true,\r\n            \"topics\": [\r\n              \"octocat\",\r\n              \"atom\",\r\n              \"electron\",\r\n              \"api\"\r\n            ],\r\n            \"has_issues\": true,\r\n            \"has_projects\": true,\r\n            \"has_wiki\": true,\r\n            \"has_pages\": false,\r\n            \"has_downloads\": true,\r\n            \"archived\": false,\r\n            \"disabled\": false,\r\n            \"visibility\": \"public\",\r\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n            \"created_at\": \"2011-01-26T19:01:12Z\",\r\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n            \"permissions\": {\r\n              \"admin\": false,\r\n              \"push\": false,\r\n              \"pull\": true\r\n            },\r\n            \"allow_rebase_merge\": true,\r\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n            \"allow_squash_merge\": true,\r\n            \"allow_auto_merge\": false,\r\n            \"delete_branch_on_merge\": true,\r\n            \"allow_merge_commit\": true,\r\n            \"subscribers_count\": 42,\r\n            \"network_count\": 0,\r\n            \"license\": {\r\n              \"key\": \"mit\",\r\n              \"name\": \"MIT License\",\r\n              \"url\": \"https://api.github.com/licenses/mit\",\r\n              \"spdx_id\": \"MIT\",\r\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n              \"html_url\": \"https://api.github.com/licenses/mit\"\r\n            },\r\n            \"forks\": 1,\r\n            \"open_issues\": 1,\r\n            \"watchers\": 1\r\n          },\r\n          \"source\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n            \"homepage\": \"https://github.com\",\r\n            \"language\": null,\r\n            \"forks_count\": 9,\r\n            \"stargazers_count\": 80,\r\n            \"watchers_count\": 80,\r\n            \"size\": 108,\r\n            \"default_branch\": \"master\",\r\n            \"open_issues_count\": 0,\r\n            \"is_template\": true,\r\n            \"topics\": [\r\n              \"octocat\",\r\n              \"atom\",\r\n              \"electron\",\r\n              \"api\"\r\n            ],\r\n            \"has_issues\": true,\r\n            \"has_projects\": true,\r\n            \"has_wiki\": true,\r\n            \"has_pages\": false,\r\n            \"has_downloads\": true,\r\n            \"archived\": false,\r\n            \"disabled\": false,\r\n            \"visibility\": \"public\",\r\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n            \"created_at\": \"2011-01-26T19:01:12Z\",\r\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n            \"permissions\": {\r\n              \"admin\": false,\r\n              \"push\": false,\r\n              \"pull\": true\r\n            },\r\n            \"allow_rebase_merge\": true,\r\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n            \"allow_squash_merge\": true,\r\n            \"allow_auto_merge\": false,\r\n            \"delete_branch_on_merge\": true,\r\n            \"allow_merge_commit\": true,\r\n            \"subscribers_count\": 42,\r\n            \"network_count\": 0,\r\n            \"license\": {\r\n              \"key\": \"mit\",\r\n              \"name\": \"MIT License\",\r\n              \"url\": \"https://api.github.com/licenses/mit\",\r\n              \"spdx_id\": \"MIT\",\r\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n              \"html_url\": \"https://api.github.com/licenses/mit\"\r\n            },\r\n            \"forks\": 1,\r\n            \"open_issues\": 1,\r\n            \"watchers\": 1\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 1296269,\r\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n          \"name\": \"Hello-World\",\r\n          \"full_name\": \"octocat/Hello-World\",\r\n          \"owner\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"private\": false,\r\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n          \"description\": \"This your first repo!\",\r\n          \"fork\": false,\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n          \"homepage\": \"https://github.com\",\r\n          \"license\": {\r\n            \"key\": \"mit\",\r\n            \"name\": \"MIT License\",\r\n            \"url\": \"https://api.github.com/licenses/mit\",\r\n            \"spdx_id\": \"MIT\",\r\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n            \"html_url\": \"https://github.com/licenses/mit\"\r\n          },\r\n          \"language\": null,\r\n          \"forks_count\": 9,\r\n          \"forks\": 9,\r\n          \"stargazers_count\": 80,\r\n          \"watchers_count\": 80,\r\n          \"watchers\": 80,\r\n          \"size\": 108,\r\n          \"default_branch\": \"master\",\r\n          \"open_issues_count\": 0,\r\n          \"open_issues\": 0,\r\n          \"is_template\": false,\r\n          \"topics\": [\r\n            \"octocat\",\r\n            \"atom\",\r\n            \"electron\",\r\n            \"api\"\r\n          ],\r\n          \"has_issues\": true,\r\n          \"has_projects\": true,\r\n          \"has_wiki\": true,\r\n          \"has_pages\": false,\r\n          \"has_downloads\": true,\r\n          \"archived\": false,\r\n          \"disabled\": false,\r\n          \"visibility\": \"public\",\r\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n          \"created_at\": \"2011-01-26T19:01:12Z\",\r\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n          \"permissions\": {\r\n            \"pull\": true,\r\n            \"push\": false,\r\n            \"admin\": false\r\n          },\r\n          \"allow_rebase_merge\": true,\r\n          \"template_repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World-Template\",\r\n            \"full_name\": \"octocat/Hello-World-Template\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\r\n            \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\r\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\r\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\r\n            \"homepage\": \"https://github.com\",\r\n            \"language\": null,\r\n            \"forks\": 9,\r\n            \"forks_count\": 9,\r\n            \"stargazers_count\": 80,\r\n            \"watchers_count\": 80,\r\n            \"watchers\": 80,\r\n            \"size\": 108,\r\n            \"default_branch\": \"master\",\r\n            \"open_issues\": 0,\r\n            \"open_issues_count\": 0,\r\n            \"is_template\": true,\r\n            \"license\": {\r\n              \"key\": \"mit\",\r\n              \"name\": \"MIT License\",\r\n              \"url\": \"https://api.github.com/licenses/mit\",\r\n              \"spdx_id\": \"MIT\",\r\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n              \"html_url\": \"https://api.github.com/licenses/mit\"\r\n            },\r\n            \"topics\": [\r\n              \"octocat\",\r\n              \"atom\",\r\n              \"electron\",\r\n              \"api\"\r\n            ],\r\n            \"has_issues\": true,\r\n            \"has_projects\": true,\r\n            \"has_wiki\": true,\r\n            \"has_pages\": false,\r\n            \"has_downloads\": true,\r\n            \"archived\": false,\r\n            \"disabled\": false,\r\n            \"visibility\": \"public\",\r\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n            \"created_at\": \"2011-01-26T19:01:12Z\",\r\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n            \"permissions\": {\r\n              \"admin\": false,\r\n              \"push\": false,\r\n              \"pull\": true\r\n            },\r\n            \"allow_rebase_merge\": true,\r\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n            \"allow_squash_merge\": true,\r\n            \"allow_auto_merge\": false,\r\n            \"delete_branch_on_merge\": true,\r\n            \"allow_merge_commit\": true,\r\n            \"subscribers_count\": 42,\r\n            \"network_count\": 0\r\n          },\r\n          \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n          \"allow_squash_merge\": true,\r\n          \"allow_auto_merge\": false,\r\n          \"delete_branch_on_merge\": true,\r\n          \"allow_merge_commit\": true,\r\n          \"allow_forking\": true,\r\n          \"subscribers_count\": 42,\r\n          \"network_count\": 0,\r\n          \"organization\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"Organization\",\r\n            \"site_admin\": false\r\n          },\r\n          \"parent\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n            \"homepage\": \"https://github.com\",\r\n            \"language\": null,\r\n            \"forks_count\": 9,\r\n            \"stargazers_count\": 80,\r\n            \"watchers_count\": 80,\r\n            \"size\": 108,\r\n            \"default_branch\": \"master\",\r\n            \"open_issues_count\": 0,\r\n            \"is_template\": true,\r\n            \"topics\": [\r\n              \"octocat\",\r\n              \"atom\",\r\n              \"electron\",\r\n              \"api\"\r\n            ],\r\n            \"has_issues\": true,\r\n            \"has_projects\": true,\r\n            \"has_wiki\": true,\r\n            \"has_pages\": false,\r\n            \"has_downloads\": true,\r\n            \"archived\": false,\r\n            \"disabled\": false,\r\n            \"visibility\": \"public\",\r\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n            \"created_at\": \"2011-01-26T19:01:12Z\",\r\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n            \"permissions\": {\r\n              \"admin\": false,\r\n              \"push\": false,\r\n              \"pull\": true\r\n            },\r\n            \"allow_rebase_merge\": true,\r\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n            \"allow_squash_merge\": true,\r\n            \"allow_auto_merge\": false,\r\n            \"delete_branch_on_merge\": true,\r\n            \"allow_merge_commit\": true,\r\n            \"subscribers_count\": 42,\r\n            \"network_count\": 0,\r\n            \"license\": {\r\n              \"key\": \"mit\",\r\n              \"name\": \"MIT License\",\r\n              \"url\": \"https://api.github.com/licenses/mit\",\r\n              \"spdx_id\": \"MIT\",\r\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n              \"html_url\": \"https://api.github.com/licenses/mit\"\r\n            },\r\n            \"forks\": 1,\r\n            \"open_issues\": 1,\r\n            \"watchers\": 1\r\n          },\r\n          \"source\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n            \"homepage\": \"https://github.com\",\r\n            \"language\": null,\r\n            \"forks_count\": 9,\r\n            \"stargazers_count\": 80,\r\n            \"watchers_count\": 80,\r\n            \"size\": 108,\r\n            \"default_branch\": \"master\",\r\n            \"open_issues_count\": 0,\r\n            \"is_template\": true,\r\n            \"topics\": [\r\n              \"octocat\",\r\n              \"atom\",\r\n              \"electron\",\r\n              \"api\"\r\n            ],\r\n            \"has_issues\": true,\r\n            \"has_projects\": true,\r\n            \"has_wiki\": true,\r\n            \"has_pages\": false,\r\n            \"has_downloads\": true,\r\n            \"archived\": false,\r\n            \"disabled\": false,\r\n            \"visibility\": \"public\",\r\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n            \"created_at\": \"2011-01-26T19:01:12Z\",\r\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n            \"permissions\": {\r\n              \"admin\": false,\r\n              \"push\": false,\r\n              \"pull\": true\r\n            },\r\n            \"allow_rebase_merge\": true,\r\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n            \"allow_squash_merge\": true,\r\n            \"allow_auto_merge\": false,\r\n            \"delete_branch_on_merge\": true,\r\n            \"allow_merge_commit\": true,\r\n            \"subscribers_count\": 42,\r\n            \"network_count\": 0,\r\n            \"license\": {\r\n              \"key\": \"mit\",\r\n              \"name\": \"MIT License\",\r\n              \"url\": \"https://api.github.com/licenses/mit\",\r\n              \"spdx_id\": \"MIT\",\r\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n              \"html_url\": \"https://api.github.com/licenses/mit\"\r\n            },\r\n            \"forks\": 1,\r\n            \"open_issues\": 1,\r\n            \"watchers\": 1\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ FullRepository

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGistComment_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"node_id\": \"MDExOkdpc3RDb21tZW50MQ==\",\r\n          \"url\": \"https://api.github.com/gists/a6db0bec360bb87e9418/comments/1\",\r\n          \"body\": \"Just commenting for the sake of commenting\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"created_at\": \"2011-04-18T23:23:56Z\",\r\n          \"updated_at\": \"2011-04-18T23:23:56Z\",\r\n          \"author_association\": \"COLLABORATOR\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GistComment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGistSimple_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d\",\r\n          \"forks_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/forks\",\r\n          \"commits_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/commits\",\r\n          \"id\": \"aa5a315d61ae9438b18d\",\r\n          \"node_id\": \"MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk\",\r\n          \"git_pull_url\": \"https://gist.github.com/aa5a315d61ae9438b18d.git\",\r\n          \"git_push_url\": \"https://gist.github.com/aa5a315d61ae9438b18d.git\",\r\n          \"html_url\": \"https://gist.github.com/aa5a315d61ae9438b18d\",\r\n          \"created_at\": \"2010-04-14T02:15:15Z\",\r\n          \"updated_at\": \"2011-06-20T11:34:15Z\",\r\n          \"description\": \"Hello World Examples\",\r\n          \"comments\": 0,\r\n          \"comments_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/comments/\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GistSimple

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGistsCreateReqFiles_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"hello.rb\": {\r\n                        \"content\": \"puts \\\"Hello, World!\\\"\"\r\n                      }\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GistsCreateReqFiles
			typ = make(GistsCreateReqFiles)

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGistsCreateReqPublic1_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"true\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GistsCreateReqPublic1

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGitCommit_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"sha\": \"7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n          \"node_id\": \"MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n          \"author\": {\r\n            \"date\": \"2014-11-07T22:01:45Z\",\r\n            \"name\": \"Monalisa Octocat\",\r\n            \"email\": \"octocat@github.com\"\r\n          },\r\n          \"committer\": {\r\n            \"date\": \"2014-11-07T22:01:45Z\",\r\n            \"name\": \"Monalisa Octocat\",\r\n            \"email\": \"octocat@github.com\"\r\n          },\r\n          \"message\": \"my commit message\",\r\n          \"tree\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/827efc6d56897b048c772eb4087f854f46256132\",\r\n            \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\r\n          },\r\n          \"parents\": [\r\n            {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7d1b31e74ee336d15cbd21741bc88a537ed063a0\",\r\n              \"sha\": \"7d1b31e74ee336d15cbd21741bc88a537ed063a0\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/commit/7d1b31e74ee336d15cbd21741bc88a537ed063a0\"\r\n            }\r\n          ],\r\n          \"verification\": {\r\n            \"verified\": false,\r\n            \"reason\": \"unsigned\",\r\n            \"signature\": null,\r\n            \"payload\": null\r\n          },\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd\"\r\n        }",
		},
		{
			Input: "{\r\n          \"sha\": \"7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n          \"node_id\": \"MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd\",\r\n          \"author\": {\r\n            \"date\": \"2014-11-07T22:01:45Z\",\r\n            \"name\": \"Monalisa Octocat\",\r\n            \"email\": \"octocat@github.com\"\r\n          },\r\n          \"committer\": {\r\n            \"date\": \"2014-11-07T22:01:45Z\",\r\n            \"name\": \"Monalisa Octocat\",\r\n            \"email\": \"octocat@github.com\"\r\n          },\r\n          \"message\": \"added readme, because im a good github citizen\",\r\n          \"tree\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb\",\r\n            \"sha\": \"691272480426f78a0138979dd3ce63b77f706feb\"\r\n          },\r\n          \"parents\": [\r\n            {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5\",\r\n              \"sha\": \"1acc419d4d6a9ce985db7be48c6349a0475975b5\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd\"\r\n            }\r\n          ],\r\n          \"verification\": {\r\n            \"verified\": false,\r\n            \"reason\": \"unsigned\",\r\n            \"signature\": null,\r\n            \"payload\": null\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GitCommit

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGitRef_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"ref\": \"refs/heads/featureA\",\r\n          \"node_id\": \"MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlQQ==\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA\",\r\n          \"object\": {\r\n            \"type\": \"commit\",\r\n            \"sha\": \"aa218f56b14c9653891f9e74264a383fa43fefbd\",\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GitRef

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGitTag_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"node_id\": \"MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==\",\r\n          \"tag\": \"v0.0.1\",\r\n          \"sha\": \"940bd336248efae0f9ee5bc7b2d5c985887b16ac\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac\",\r\n          \"message\": \"initial version\",\r\n          \"tagger\": {\r\n            \"name\": \"Monalisa Octocat\",\r\n            \"email\": \"octocat@github.com\",\r\n            \"date\": \"2014-11-07T22:01:45Z\"\r\n          },\r\n          \"object\": {\r\n            \"type\": \"commit\",\r\n            \"sha\": \"c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c\",\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c\"\r\n          },\r\n          \"verification\": {\r\n            \"verified\": false,\r\n            \"reason\": \"unsigned\",\r\n            \"signature\": null,\r\n            \"payload\": null\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GitTag

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGitTree_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"sha\": \"9fb037999f264ba9a7fc6274d15fa3ae2ab98312\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/trees/9fb037999f264ba9a7fc6274d15fa3ae2ab98312\",\r\n          \"tree\": [\r\n            {\r\n              \"path\": \"file.rb\",\r\n              \"mode\": \"100644\",\r\n              \"type\": \"blob\",\r\n              \"size\": 30,\r\n              \"sha\": \"44b4fc6d56897b048c772eb4087f854f46256132\",\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132\"\r\n            },\r\n            {\r\n              \"path\": \"subdir\",\r\n              \"mode\": \"040000\",\r\n              \"type\": \"tree\",\r\n              \"sha\": \"f484d249c660418515fb01c2b9662073663c242e\",\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/f484d249c660418515fb01c2b9662073663c242e\"\r\n            },\r\n            {\r\n              \"path\": \"exec_file\",\r\n              \"mode\": \"100755\",\r\n              \"type\": \"blob\",\r\n              \"size\": 75,\r\n              \"sha\": \"45b983be36b73c0788dc9cbcb76cbb80fc7bb057\",\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/45b983be36b73c0788dc9cbcb76cbb80fc7bb057\"\r\n            }\r\n          ],\r\n          \"truncated\": false\r\n        }",
		},
		{
			Input: "{\r\n          \"sha\": \"fc6274d15fa3ae2ab983129fb037999f264ba9a7\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/trees/fc6274d15fa3ae2ab983129fb037999f264ba9a7\",\r\n          \"tree\": [\r\n            {\r\n              \"path\": \"subdir/file.txt\",\r\n              \"mode\": \"100644\",\r\n              \"type\": \"blob\",\r\n              \"size\": 132,\r\n              \"sha\": \"7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\",\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\"\r\n            }\r\n          ],\r\n          \"truncated\": false\r\n        }",
		},
		{
			Input: "{\r\n          \"sha\": \"cd8274d15fa3ae2ab983129fb037999f264ba9a7\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7\",\r\n          \"tree\": [\r\n            {\r\n              \"path\": \"file.rb\",\r\n              \"mode\": \"100644\",\r\n              \"type\": \"blob\",\r\n              \"size\": 132,\r\n              \"sha\": \"7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\",\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\"\r\n            }\r\n          ],\r\n          \"truncated\": true\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GitTree

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGitignoreTemplate_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"name\": \"C\",\r\n          \"source\": \"# Object files\\n*.o\\n\\n# Libraries\\n*.lib\\n*.a\\n\\n# Shared objects (inc. Windows DLLs)\\n*.dll\\n*.so\\n*.so.*\\n*.dylib\\n\\n# Executables\\n*.exe\\n*.out\\n*.app\\n\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GitignoreTemplate

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGpgKey_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 3,\r\n          \"primary_key_id\": 2,\r\n          \"key_id\": \"3262EFF25BA0D270\",\r\n          \"public_key\": \"xsBNBFayYZ...\",\r\n          \"emails\": [\r\n            {\r\n              \"email\": \"mastahyeti@users.noreply.github.com\",\r\n              \"verified\": true\r\n            }\r\n          ],\r\n          \"subkeys\": [\r\n            {\r\n              \"id\": 4,\r\n              \"primary_key_id\": 3,\r\n              \"key_id\": \"4A595D4C72EE49C7\",\r\n              \"public_key\": \"zsBNBFayYZ...\",\r\n              \"emails\": [\r\n\r\n              ],\r\n              \"subkeys\": [\r\n\r\n              ],\r\n              \"can_sign\": false,\r\n              \"can_encrypt_comms\": true,\r\n              \"can_encrypt_storage\": true,\r\n              \"can_certify\": false,\r\n              \"created_at\": \"2016-03-24T11:31:04-06:00\",\r\n              \"expires_at\": \"2016-03-24T11:31:04-07:00\"\r\n            }\r\n          ],\r\n          \"can_sign\": true,\r\n          \"can_encrypt_comms\": false,\r\n          \"can_encrypt_storage\": false,\r\n          \"can_certify\": true,\r\n          \"created_at\": \"2016-03-24T11:31:04-06:00\",\r\n          \"expires_at\": \"2016-03-24T11:31:04-07:00\",\r\n          \"raw_key\": \"\\\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\\\nVersion: GnuPG v2\\\\n\\\\nmQENBFayYZ0BCAC4hScoJXXpyR+MXGcrBxElqw3FzCVvkViuyeko+Jp76QJhg8kr\\\\nucRTxbnOoHfda/FmilEa/wxf9ch5/PSrrL26FxEoPHhJolp8fnIDLQeITn94NYdB\\\\nZtnnEKslpPrG97qSUWIchvyqCPtvOb8+8fWvGx9K/ZWcEEdh1X8+WFR2jMENMeoX\\\\nwxHWQoPnS7LpX/85/M7VUcJxvDVfv+eHsnQupmE5bGarKNih0oMe3LbdN3qA5PTz\\\\nSCm6Iudar1VsQ+xTz08ymL7t4pnEtLguQ7EyatFHCjxNblv5RzxoL0tDgN3HqoDz\\\\nc7TEA+q4RtDQl9amcvQ95emnXmZ974u7UkYdABEBAAG0HlNvbWUgVXNlciA8c29t\\\\nZXVzZXJAZ21haWwuY29tPokBOAQTAQIAIgUCVrJhnQIbAwYLCQgHAwIGFQgCCQoL\\\\nBBYCAwECHgECF4AACgkQMmLv8lug0nAViQgArWjI55+7p48URr2z9Jvak+yrBTx1\\\\nzkufltQAnHTJkq+Kl9dySSmTnOop8o3rE4++IOpYV5Y36PkKf9EZMk4n1RQiDPKE\\\\nAFtRVTkRaoWzOir9KQXJPfhKrl01j/QzY+utfiMvUoBJZ9ybq8Pa885SljW9lbaX\\\\nIYw+hl8ZdJ2KStvGrEyfQvRyq3aN5c9TV//4BdGnwx7Qabq/U+G18lizG6f/yq15\\\\ned7t0KELaCfeKPvytp4VE9/z/Ksah/h3+Qilx07/oG2Ae5kC1bEC9coD/ogPUhbv\\\\nb2bsBIoY9E9YwsLoif2lU+o1t76zLgUktuNscRRUKobW028H1zuFS/XQhrkBDQRW\\\\nsmGdAQgApnyyv3i144OLYy0O4UKQxd3e10Y3WpDwfnGIBefAI1m7RxnUxBag/DsU\\\\n7gi9qLEC4VHSfq4eiNfr1LJOyCL2edTgCWFgBhVjbXjZe6YAOrAnhxwCErnN0Y7N\\\\n6s8wVh9fObSOyf8ZE6G7JeKpcq9Q6gd/KxagfD48a1v+fyRHpyQc6J9pUEmtrDJ7\\\\nBjmsd2VWzLBvNWdHyxDNtZweIaqIO9VUYYpr1mtTliNBOZLUelmgrt7HBRcJpWMA\\\\nS8muVVbuP5MK0trLBq/JB8qUH3zRzB/PhMgzmkIfjEK1VYDWm4E8DYyTWEJcHqkb\\\\neqFsNjrIlwPaA122BWC6gUOPwwH+oQARAQABiQEfBBgBAgAJBQJWsmGdAhsMAAoJ\\\\nEDJi7/JboNJwAyAIALd4xcdmGbZD98gScJzqwzkOMcO8zFHqHNvJ42xIFvGny7c0\\\\n1Rx7iyrdypOby5AxE+viQcjG4rpLZW/xKYBNGrCfDyQO7511I0v8x20EICMlMfD/\\\\nNrWQCzesEPcUlKTP07d+sFyP8AyseOidbzY/92CpskTgdSBjY/ntLSaoknl/fjJE\\\\nQM8OkPqU7IraO1Jzzdnm20d5PZL9+PIwIWdSTedU/vBMTJyNcoqvSfKf1wNC66XP\\\\nhqfYgXJE564AdWZKA3C0IyCqiv+LHwxLnUHio1a4/r91C8KPzxs6tGxRDjXLd7ms\\\\nuYFGWymiUGOE/giHlcxdYcHzwLnPDliMQOLiTkK5AQ0EVuxMygEIAOD+bW1cDTmE\\\\nBxh5JECoqeHuwgl6DlLhnubWPkQ4ZeRzBRAsFcEJQlwlJjrzFDicL+lnm6Qq4tt0\\\\n560TwHdf15/AKTZIZu7H25axvGNzgeaUkJEJdYAq9zTKWwX7wKyzBszi485nQg97\\\\nMfAqwhMpDW0Qqf8+7Ug+WEmfBSGv9uL3aQC6WEeIsHfri0n0n8v4XgwhfShXguxO\\\\nCsOztEsuW7WWKW9P4TngKKv4lCHdPlV6FwxeMzODBJvc2fkHVHnqc0PqszJ5xcF8\\\\n6gZCpMM027SbpeYWCAD5zwJyYP9ntfO1p2HjnQ1dZaP9FeNcO7uIV1Lnd1eGCu6I\\\\nsrVp5k1f3isAEQEAAYkCPgQYAQIACQUCVuxMygIbAgEpCRAyYu/yW6DScMBdIAQZ\\\\nAQIABgUCVuxMygAKCRCKohN4dhq2b4tcCACHxmOHVXNpu47OvUGYQydLgMACUlXN\\\\nlj+HfE0VReqShxdDmpasAY9IRpuMB2RsGK8GbNP+4SlOlAiPf5SMhS7nZNkNDgQQ\\\\naZ3HFpgrFmFwmE10BKT4iQtoxELLM57z0qGOAfTsEjWFQa4sF+6IHAQR/ptkdkkI\\\\nBUEXiMnAwVwBysLIJiLO8qdjB6qp52QkT074JVrwywT/P+DkMfC2k4r/AfEbf6eF\\\\ndmPDuPk6KD87+hJZsSa5MaMUBQVvRO/mgEkhJRITVu58eWGaBOcQJ8gqurhCqM5P\\\\nDfUA4TJ7wiqM6sS764vV1rOioTTXkszzhClQqET7hPVnVQjenYgv0EZHNyQH/1f1\\\\n/CYqvV1vFjM9vJjMbxXsATCkZe6wvBVKD8vLsJAr8N+onKQz+4OPc3kmKq7aESu3\\\\nCi/iuie5KKVwnuNhr9AzT61vEkKxwHcVFEvHB77F6ZAAInhRvjzmQbD2dlPLLQCC\\\\nqDj71ODSSAPTEmUy6969bgD9PfWei7kNkBIx7s3eBv8yzytSc2EcuUgopqFazquw\\\\nFs1+tqGHjBvQfTo6bqbJjp/9Ci2pvde3ElV2rAgUlb3lqXyXjRDqrXosh5GcRPQj\\\\nK8Nhj1BNhnrCVskE4BP0LYbOHuzgm86uXwGCFsY+w2VOsSm16Jx5GHyG5S5WU3+D\\\\nIts/HFYRLiFgDLmTlxo=\\\\n=+OzK\\\\n-----END PGP PUBLIC KEY BLOCK-----\\\"\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GpgKey

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestGroupMapping_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"groups\": [\r\n            {\r\n              \"group_id\": \"123\",\r\n              \"group_name\": \"Octocat admins\",\r\n              \"group_description\": \"The people who configure your octoworld.\"\r\n            },\r\n            {\r\n              \"group_id\": \"456\",\r\n              \"group_name\": \"Octocat docs members\",\r\n              \"group_description\": \"The people who make your octoworld come to life.\"\r\n            }\r\n          ]\r\n        }",
		},
		{
			Input: "{\r\n          \"groups\": [\r\n            {\r\n              \"group_id\": \"123\",\r\n              \"group_name\": \"Octocat admins\",\r\n              \"group_description\": \"The people who configure your octoworld.\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GroupMapping

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestHook_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"type\": \"Repository\",\r\n          \"id\": 12345678,\r\n          \"name\": \"web\",\r\n          \"active\": true,\r\n          \"events\": [\r\n            \"push\",\r\n            \"pull_request\"\r\n          ],\r\n          \"config\": {\r\n            \"content_type\": \"json\",\r\n            \"insecure_ssl\": \"0\",\r\n            \"url\": \"https://example.com/webhook\"\r\n          },\r\n          \"updated_at\": \"2019-06-03T00:57:16Z\",\r\n          \"created_at\": \"2019-06-03T00:57:16Z\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/12345678\",\r\n          \"test_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/12345678/test\",\r\n          \"ping_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/12345678/pings\",\r\n          \"deliveries_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/12345678/deliveries\",\r\n          \"last_response\": {\r\n            \"code\": null,\r\n            \"status\": \"unused\",\r\n            \"message\": null\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Hook

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestHookDelivery_Decode(t *testing.T) {
	t.Skip("Skipped by regex")
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 12345678,\r\n          \"guid\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\r\n          \"delivered_at\": \"2019-06-03T00:57:16Z\",\r\n          \"redelivery\": false,\r\n          \"duration\": 0.27,\r\n          \"status\": \"OK\",\r\n          \"status_code\": 200,\r\n          \"event\": \"issues\",\r\n          \"action\": \"opened\",\r\n          \"installation_id\": 123,\r\n          \"repository_id\": 456,\r\n          \"url\": \"https://www.example.com\",\r\n          \"request\": {\r\n            \"headers\": {\r\n              \"X-GitHub-Delivery\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\r\n              \"X-Hub-Signature-256\": \"sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n              \"Accept\": \"*/*\",\r\n              \"X-GitHub-Hook-ID\": \"42\",\r\n              \"User-Agent\": \"GitHub-Hookshot/b8c71d8\",\r\n              \"X-GitHub-Event\": \"issues\",\r\n              \"X-GitHub-Hook-Installation-Target-ID\": \"123\",\r\n              \"X-GitHub-Hook-Installation-Target-Type\": \"repository\",\r\n              \"content-type\": \"application/json\",\r\n              \"X-Hub-Signature\": \"sha1=a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d\"\r\n            },\r\n            \"payload\": {\r\n              \"action\": \"opened\",\r\n              \"issue\": {\r\n                \"body\": \"foo\"\r\n              },\r\n              \"repository\": {\r\n                \"id\": 123\r\n              }\r\n            }\r\n          },\r\n          \"response\": {\r\n            \"headers\": {\r\n              \"Content-Type\": \"text/html;charset=utf-8\"\r\n            },\r\n            \"payload\": \"ok\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ HookDelivery

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestHovercard_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"contexts\": [\r\n            {\r\n              \"message\": \"Owns this repository\",\r\n              \"octicon\": \"repo\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Hovercard

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestImport_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"vcs\": \"subversion\",\r\n          \"use_lfs\": true,\r\n          \"vcs_url\": \"http://svn.mycompany.com/svn/myproject\",\r\n          \"status\": \"complete\",\r\n          \"status_text\": \"Done\",\r\n          \"has_large_files\": true,\r\n          \"large_files_size\": 132331036,\r\n          \"large_files_count\": 1,\r\n          \"authors_count\": 4,\r\n          \"url\": \"https://api.github.com/repos/octocat/socm/import\",\r\n          \"html_url\": \"https://import.github.com/octocat/socm/import\",\r\n          \"authors_url\": \"https://api.github.com/repos/octocat/socm/import/authors\",\r\n          \"repository_url\": \"https://api.github.com/repos/octocat/socm\"\r\n        }",
		},
		{
			Input: "{\r\n          \"vcs\": \"subversion\",\r\n          \"use_lfs\": true,\r\n          \"vcs_url\": \"http://svn.mycompany.com/svn/myproject\",\r\n          \"status\": \"importing\",\r\n          \"status_text\": \"Importing...\",\r\n          \"has_large_files\": false,\r\n          \"large_files_size\": 0,\r\n          \"large_files_count\": 0,\r\n          \"authors_count\": 0,\r\n          \"commit_count\": 1042,\r\n          \"url\": \"https://api.github.com/repos/octocat/socm/import\",\r\n          \"html_url\": \"https://import.github.com/octocat/socm/import\",\r\n          \"authors_url\": \"https://api.github.com/repos/octocat/socm/import/authors\",\r\n          \"repository_url\": \"https://api.github.com/repos/octocat/socm\"\r\n        }",
		},
		{
			Input: "{\r\n          \"vcs\": \"subversion\",\r\n          \"use_lfs\": true,\r\n          \"vcs_url\": \"http://svn.mycompany.com/svn/myproject\",\r\n          \"status\": \"detecting\",\r\n          \"url\": \"https://api.github.com/repos/octocat/socm/import\",\r\n          \"html_url\": \"https://import.github.com/octocat/socm/import\",\r\n          \"authors_url\": \"https://api.github.com/repos/octocat/socm/import/authors\",\r\n          \"repository_url\": \"https://api.github.com/repos/octocat/socm\"\r\n        }",
		},
		{
			Input: "{\r\n          \"vcs\": \"tfvc\",\r\n          \"use_lfs\": true,\r\n          \"vcs_url\": \"http://tfs.mycompany.com/tfs/myproject\",\r\n          \"tfvc_project\": \"project1\",\r\n          \"status\": \"importing\",\r\n          \"status_text\": \"Importing...\",\r\n          \"has_large_files\": false,\r\n          \"large_files_size\": 0,\r\n          \"large_files_count\": 0,\r\n          \"authors_count\": 0,\r\n          \"commit_count\": 1042,\r\n          \"url\": \"https://api.github.com/repos/octocat/socm/import\",\r\n          \"html_url\": \"https://import.github.com/octocat/socm/import\",\r\n          \"authors_url\": \"https://api.github.com/repos/octocat/socm/import/authors\",\r\n          \"repository_url\": \"https://api.github.com/repos/octocat/socm\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Import

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestInstallationToken_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"token\": \"ghs_16C7e42F292c6912E7710c838347Ae178B4a\",\r\n          \"expires_at\": \"2016-07-11T22:14:10Z\",\r\n          \"permissions\": {\r\n            \"issues\": \"write\",\r\n            \"contents\": \"read\"\r\n          },\r\n          \"repository_selection\": \"selected\",\r\n          \"repositories\": [\r\n            {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"template_repository\": null,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://github.com/licenses/mit\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ InstallationToken

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestIntegration_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"slug\": \"octoapp\",\r\n          \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\r\n          \"owner\": {\r\n            \"login\": \"github\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n            \"url\": \"https://api.github.com/orgs/github\",\r\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": true\r\n          },\r\n          \"name\": \"Octocat App\",\r\n          \"description\": \"\",\r\n          \"external_url\": \"https://example.com\",\r\n          \"html_url\": \"https://github.com/apps/octoapp\",\r\n          \"created_at\": \"2017-07-08T16:18:44-04:00\",\r\n          \"updated_at\": \"2017-07-08T16:18:44-04:00\",\r\n          \"permissions\": {\r\n            \"metadata\": \"read\",\r\n            \"contents\": \"read\",\r\n            \"issues\": \"write\",\r\n            \"single_file\": \"write\"\r\n          },\r\n          \"events\": [\r\n            \"push\",\r\n            \"pull_request\"\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Integration

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestIntegrationPermissions_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n              \"issues\": \"read\",\r\n              \"deployments\": \"write\"\r\n            }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ IntegrationPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestInteractionExpiry_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"one_month\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ InteractionExpiry

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestInteractionGroup_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"collaborators_only\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ InteractionGroup

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestInteractionLimitResponse_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"limit\": \"collaborators_only\",\r\n          \"origin\": \"repository\",\r\n          \"expires_at\": \"2018-08-17T04:18:39Z\"\r\n        }",
		},
		{
			Input: "{\r\n          \"limit\": \"collaborators_only\",\r\n          \"origin\": \"user\",\r\n          \"expires_at\": \"2018-08-17T04:18:39Z\"\r\n        }",
		},
		{
			Input: "{\r\n          \"limit\": \"collaborators_only\",\r\n          \"origin\": \"organization\",\r\n          \"expires_at\": \"2018-08-17T04:18:39Z\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ InteractionLimitResponse

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestIssue_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"node_id\": \"MDU6SXNzdWUx\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\r\n          \"repository_url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\",\r\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/events\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/issues/1347\",\r\n          \"number\": 1347,\r\n          \"state\": \"open\",\r\n          \"title\": \"Found a bug\",\r\n          \"body\": \"I'm having a problem with this.\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"labels\": [\r\n            {\r\n              \"id\": 208045946,\r\n              \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\r\n              \"name\": \"bug\",\r\n              \"description\": \"Something isn't working\",\r\n              \"color\": \"f29513\",\r\n              \"default\": true\r\n            }\r\n          ],\r\n          \"assignee\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"assignees\": [\r\n            {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            }\r\n          ],\r\n          \"milestone\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\r\n            \"id\": 1002604,\r\n            \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\r\n            \"number\": 1,\r\n            \"state\": \"open\",\r\n            \"title\": \"v1.0\",\r\n            \"description\": \"Tracking milestone for version 1.0\",\r\n            \"creator\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"open_issues\": 4,\r\n            \"closed_issues\": 8,\r\n            \"created_at\": \"2011-04-10T20:09:31Z\",\r\n            \"updated_at\": \"2014-03-03T18:58:10Z\",\r\n            \"closed_at\": \"2013-02-12T13:22:01Z\",\r\n            \"due_on\": \"2012-10-09T23:39:01Z\"\r\n          },\r\n          \"locked\": true,\r\n          \"active_lock_reason\": \"too heated\",\r\n          \"comments\": 0,\r\n          \"pull_request\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\r\n            \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\r\n            \"patch_url\": \"https://github.com/octocat/Hello-World/pull/1347.patch\"\r\n          },\r\n          \"closed_at\": null,\r\n          \"created_at\": \"2011-04-22T13:33:48Z\",\r\n          \"updated_at\": \"2011-04-22T13:33:48Z\",\r\n          \"closed_by\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"author_association\": \"COLLABORATOR\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Issue

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestIssueComment_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"node_id\": \"MDEyOklzc3VlQ29tbWVudDE=\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments/1\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/issues/1347#issuecomment-1\",\r\n          \"body\": \"Me too\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"created_at\": \"2011-04-14T16:00:49Z\",\r\n          \"updated_at\": \"2011-04-14T16:00:49Z\",\r\n          \"issue_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\r\n          \"author_association\": \"COLLABORATOR\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ IssueComment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestIssueEvent_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"node_id\": \"MDEwOklzc3VlRXZlbnQx\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events/1\",\r\n          \"actor\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"event\": \"closed\",\r\n          \"commit_id\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"commit_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"created_at\": \"2011-04-14T16:00:49Z\",\r\n          \"issue\": {\r\n            \"id\": 1,\r\n            \"node_id\": \"MDU6SXNzdWUx\",\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\r\n            \"repository_url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/events\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/issues/1347\",\r\n            \"number\": 1347,\r\n            \"state\": \"open\",\r\n            \"title\": \"Found a bug\",\r\n            \"body\": \"I'm having a problem with this.\",\r\n            \"user\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"labels\": [\r\n              {\r\n                \"id\": 208045946,\r\n                \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\r\n                \"name\": \"bug\",\r\n                \"description\": \"Something isn't working\",\r\n                \"color\": \"f29513\",\r\n                \"default\": true\r\n              }\r\n            ],\r\n            \"assignee\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"assignees\": [\r\n              {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              }\r\n            ],\r\n            \"milestone\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\r\n              \"id\": 1002604,\r\n              \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\r\n              \"number\": 1,\r\n              \"state\": \"open\",\r\n              \"title\": \"v1.0\",\r\n              \"description\": \"Tracking milestone for version 1.0\",\r\n              \"creator\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"open_issues\": 4,\r\n              \"closed_issues\": 8,\r\n              \"created_at\": \"2011-04-10T20:09:31Z\",\r\n              \"updated_at\": \"2014-03-03T18:58:10Z\",\r\n              \"closed_at\": \"2013-02-12T13:22:01Z\",\r\n              \"due_on\": \"2012-10-09T23:39:01Z\"\r\n            },\r\n            \"locked\": true,\r\n            \"performed_via_github_app\": {\r\n              \"id\": 1,\r\n              \"slug\": \"octoapp\",\r\n              \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\r\n              \"owner\": {\r\n                \"login\": \"github\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n                \"url\": \"https://api.github.com/orgs/github\",\r\n                \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n                \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": true\r\n              },\r\n              \"name\": \"Octocat App\",\r\n              \"description\": \"\",\r\n              \"external_url\": \"https://example.com\",\r\n              \"html_url\": \"https://github.com/apps/octoapp\",\r\n              \"created_at\": \"2017-07-08T16:18:44-04:00\",\r\n              \"updated_at\": \"2017-07-08T16:18:44-04:00\",\r\n              \"permissions\": {\r\n                \"metadata\": \"read\",\r\n                \"contents\": \"read\",\r\n                \"issues\": \"write\",\r\n                \"single_file\": \"write\"\r\n              },\r\n              \"events\": [\r\n                \"push\",\r\n                \"pull_request\"\r\n              ]\r\n            },\r\n            \"comments\": 0,\r\n            \"pull_request\": {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\",\r\n              \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\r\n              \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\r\n              \"patch_url\": \"https://github.com/octocat/Hello-World/pull/1347.patch\"\r\n            },\r\n            \"closed_at\": null,\r\n            \"created_at\": \"2011-04-22T13:33:48Z\",\r\n            \"updated_at\": \"2011-04-22T13:33:48Z\",\r\n            \"author_association\": \"COLLABORATOR\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ IssueEvent

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestIssueSimple_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"node_id\": \"MDU6SXNzdWUx\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\r\n          \"repository_url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\",\r\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/events\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/issues/1347\",\r\n          \"number\": 1347,\r\n          \"state\": \"open\",\r\n          \"title\": \"Found a bug\",\r\n          \"body\": \"I'm having a problem with this.\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"labels\": [\r\n            {\r\n              \"id\": 208045946,\r\n              \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\r\n              \"name\": \"bug\",\r\n              \"description\": \"Something isn't working\",\r\n              \"color\": \"f29513\",\r\n              \"default\": true\r\n            }\r\n          ],\r\n          \"assignee\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"assignees\": [\r\n            {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            {\r\n              \"login\": \"hubot\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/hubot\",\r\n              \"html_url\": \"https://github.com/hubot\",\r\n              \"followers_url\": \"https://api.github.com/users/hubot/followers\",\r\n              \"following_url\": \"https://api.github.com/users/hubot/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/hubot/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/hubot/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/hubot/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/hubot/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/hubot/repos\",\r\n              \"events_url\": \"https://api.github.com/users/hubot/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/hubot/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": true\r\n            },\r\n            {\r\n              \"login\": \"other_user\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/other_user_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/other_user\",\r\n              \"html_url\": \"https://github.com/other_user\",\r\n              \"followers_url\": \"https://api.github.com/users/other_user/followers\",\r\n              \"following_url\": \"https://api.github.com/users/other_user/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/other_user/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/other_user/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/other_user/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/other_user/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/other_user/repos\",\r\n              \"events_url\": \"https://api.github.com/users/other_user/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/other_user/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            }\r\n          ],\r\n          \"milestone\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\r\n            \"id\": 1002604,\r\n            \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\r\n            \"number\": 1,\r\n            \"state\": \"open\",\r\n            \"title\": \"v1.0\",\r\n            \"description\": \"Tracking milestone for version 1.0\",\r\n            \"creator\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"open_issues\": 4,\r\n            \"closed_issues\": 8,\r\n            \"created_at\": \"2011-04-10T20:09:31Z\",\r\n            \"updated_at\": \"2014-03-03T18:58:10Z\",\r\n            \"closed_at\": \"2013-02-12T13:22:01Z\",\r\n            \"due_on\": \"2012-10-09T23:39:01Z\"\r\n          },\r\n          \"locked\": true,\r\n          \"active_lock_reason\": \"too heated\",\r\n          \"comments\": 0,\r\n          \"pull_request\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\r\n            \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\r\n            \"patch_url\": \"https://github.com/octocat/Hello-World/pull/1347.patch\"\r\n          },\r\n          \"closed_at\": null,\r\n          \"created_at\": \"2011-04-22T13:33:48Z\",\r\n          \"updated_at\": \"2011-04-22T13:33:48Z\",\r\n          \"author_association\": \"COLLABORATOR\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ IssueSimple

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestJob_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 399444496,\r\n          \"run_id\": 29679449,\r\n          \"run_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449\",\r\n          \"node_id\": \"MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==\",\r\n          \"head_sha\": \"f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0\",\r\n          \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496\",\r\n          \"html_url\": \"https://github.com/octo-org/octo-repo/runs/399444496\",\r\n          \"status\": \"completed\",\r\n          \"conclusion\": \"success\",\r\n          \"started_at\": \"2020-01-20T17:42:40Z\",\r\n          \"completed_at\": \"2020-01-20T17:44:39Z\",\r\n          \"name\": \"build\",\r\n          \"steps\": [\r\n            {\r\n              \"name\": \"Set up job\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"number\": 1,\r\n              \"started_at\": \"2020-01-20T09:42:40.000-08:00\",\r\n              \"completed_at\": \"2020-01-20T09:42:41.000-08:00\"\r\n            },\r\n            {\r\n              \"name\": \"Run actions/checkout@v2\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"number\": 2,\r\n              \"started_at\": \"2020-01-20T09:42:41.000-08:00\",\r\n              \"completed_at\": \"2020-01-20T09:42:45.000-08:00\"\r\n            },\r\n            {\r\n              \"name\": \"Set up Ruby\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"number\": 3,\r\n              \"started_at\": \"2020-01-20T09:42:45.000-08:00\",\r\n              \"completed_at\": \"2020-01-20T09:42:45.000-08:00\"\r\n            },\r\n            {\r\n              \"name\": \"Run actions/cache@v2\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"number\": 4,\r\n              \"started_at\": \"2020-01-20T09:42:45.000-08:00\",\r\n              \"completed_at\": \"2020-01-20T09:42:48.000-08:00\"\r\n            },\r\n            {\r\n              \"name\": \"Install Bundler\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"number\": 5,\r\n              \"started_at\": \"2020-01-20T09:42:48.000-08:00\",\r\n              \"completed_at\": \"2020-01-20T09:42:52.000-08:00\"\r\n            },\r\n            {\r\n              \"name\": \"Install Gems\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"number\": 6,\r\n              \"started_at\": \"2020-01-20T09:42:52.000-08:00\",\r\n              \"completed_at\": \"2020-01-20T09:42:53.000-08:00\"\r\n            },\r\n            {\r\n              \"name\": \"Run Tests\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"number\": 7,\r\n              \"started_at\": \"2020-01-20T09:42:53.000-08:00\",\r\n              \"completed_at\": \"2020-01-20T09:42:59.000-08:00\"\r\n            },\r\n            {\r\n              \"name\": \"Deploy to Heroku\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"number\": 8,\r\n              \"started_at\": \"2020-01-20T09:42:59.000-08:00\",\r\n              \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\r\n            },\r\n            {\r\n              \"name\": \"Post actions/cache@v2\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"number\": 16,\r\n              \"started_at\": \"2020-01-20T09:44:39.000-08:00\",\r\n              \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\r\n            },\r\n            {\r\n              \"name\": \"Complete job\",\r\n              \"status\": \"completed\",\r\n              \"conclusion\": \"success\",\r\n              \"number\": 17,\r\n              \"started_at\": \"2020-01-20T09:44:39.000-08:00\",\r\n              \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\r\n            }\r\n          ],\r\n          \"check_run_url\": \"https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Job

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestJobStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"queued\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ JobStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestJobStepsItemStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"queued\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ JobStepsItemStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestKey_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"key\": \"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234\",\r\n          \"id\": 2,\r\n          \"url\": \"https://api.github.com/user/keys/2\",\r\n          \"title\": \"ssh-rsa AAAAB3NzaC1yc2EAAA\",\r\n          \"created_at\": \"2020-06-11T21:31:57Z\",\r\n          \"verified\": false,\r\n          \"read_only\": false\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Key

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestLabel_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 208045946,\r\n          \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\r\n          \"name\": \"bug\",\r\n          \"description\": \"Something isn't working\",\r\n          \"color\": \"f29513\",\r\n          \"default\": true\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 208045946,\r\n          \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug%20:bug:\",\r\n          \"name\": \"bug :bug:\",\r\n          \"description\": \"Small bug fix required\",\r\n          \"color\": \"b01f26\",\r\n          \"default\": true\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Label

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestLanguage_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"C\": 78769,\r\n          \"Python\": 7769\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Language
			typ = make(Language)

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestLicense_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"key\": \"mit\",\r\n          \"name\": \"MIT License\",\r\n          \"spdx_id\": \"MIT\",\r\n          \"url\": \"https://api.github.com/licenses/mit\",\r\n          \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n          \"html_url\": \"http://choosealicense.com/licenses/mit/\",\r\n          \"description\": \"A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.\",\r\n          \"implementation\": \"Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.\",\r\n          \"permissions\": [\r\n            \"commercial-use\",\r\n            \"modifications\",\r\n            \"distribution\",\r\n            \"sublicense\",\r\n            \"private-use\"\r\n          ],\r\n          \"conditions\": [\r\n            \"include-copyright\"\r\n          ],\r\n          \"limitations\": [\r\n            \"no-liability\"\r\n          ],\r\n          \"body\": \"\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) [year] [fullname]\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\",\r\n          \"featured\": true\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ License

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestLicenseContent_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"name\": \"LICENSE\",\r\n          \"path\": \"LICENSE\",\r\n          \"sha\": \"401c59dcc4570b954dd6d345e76199e1f4e76266\",\r\n          \"size\": 1077,\r\n          \"url\": \"https://api.github.com/repos/benbalter/gman/contents/LICENSE?ref=master\",\r\n          \"html_url\": \"https://github.com/benbalter/gman/blob/master/LICENSE\",\r\n          \"git_url\": \"https://api.github.com/repos/benbalter/gman/git/blobs/401c59dcc4570b954dd6d345e76199e1f4e76266\",\r\n          \"download_url\": \"https://raw.githubusercontent.com/benbalter/gman/master/LICENSE?lab=true\",\r\n          \"type\": \"file\",\r\n          \"content\": \"VGhlIE1JVCBMaWNlbnNlIChNSVQpCgpDb3B5cmlnaHQgKGMpIDIwMTMgQmVu\\nIEJhbHRlcgoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBv\\nZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZgp0\\naGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmls\\nZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbgp0aGUgU29mdHdhcmUg\\nd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRh\\ndGlvbiB0aGUgcmlnaHRzIHRvCnVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwg\\ncHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwg\\nY29waWVzIG9mCnRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25z\\nIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywK\\nc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJv\\ndmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGlj\\nZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwKY29waWVzIG9yIHN1YnN0YW50\\naWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJ\\nUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBL\\nSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJ\\nTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBG\\nSVRORVNTCkZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklO\\nR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUgpDT1BZ\\nUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdF\\nUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIKSU4gQU4gQUNUSU9OIE9G\\nIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBP\\nVVQgT0YgT1IgSU4KQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBU\\nSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4K\\n\",\r\n          \"encoding\": \"base64\",\r\n          \"_links\": {\r\n            \"self\": \"https://api.github.com/repos/benbalter/gman/contents/LICENSE?ref=master\",\r\n            \"git\": \"https://api.github.com/repos/benbalter/gman/git/blobs/401c59dcc4570b954dd6d345e76199e1f4e76266\",\r\n            \"html\": \"https://github.com/benbalter/gman/blob/master/LICENSE\"\r\n          },\r\n          \"license\": {\r\n            \"key\": \"mit\",\r\n            \"name\": \"MIT License\",\r\n            \"spdx_id\": \"MIT\",\r\n            \"url\": \"https://api.github.com/licenses/mit\",\r\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ LicenseContent

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestMarkdownRenderReqMode_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"markdown\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MarkdownRenderReqMode

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestMarketplacePurchase_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/orgs/github\",\r\n          \"type\": \"Organization\",\r\n          \"id\": 4,\r\n          \"login\": \"github\",\r\n          \"organization_billing_email\": \"billing@github.com\",\r\n          \"email\": \"billing@github.com\",\r\n          \"marketplace_pending_change\": {\r\n            \"effective_date\": \"2017-11-11T00:00:00Z\",\r\n            \"unit_count\": null,\r\n            \"id\": 77,\r\n            \"plan\": {\r\n              \"url\": \"https://api.github.com/marketplace_listing/plans/1111\",\r\n              \"accounts_url\": \"https://api.github.com/marketplace_listing/plans/1111/accounts\",\r\n              \"id\": 1111,\r\n              \"number\": 2,\r\n              \"name\": \"Startup\",\r\n              \"description\": \"A professional-grade CI solution\",\r\n              \"monthly_price_in_cents\": 699,\r\n              \"yearly_price_in_cents\": 7870,\r\n              \"price_model\": \"flat-rate\",\r\n              \"has_free_trial\": true,\r\n              \"state\": \"published\",\r\n              \"unit_name\": null,\r\n              \"bullets\": [\r\n                \"Up to 10 private repositories\",\r\n                \"3 concurrent builds\"\r\n              ]\r\n            }\r\n          },\r\n          \"marketplace_purchase\": {\r\n            \"billing_cycle\": \"monthly\",\r\n            \"next_billing_date\": \"2017-11-11T00:00:00Z\",\r\n            \"unit_count\": null,\r\n            \"on_free_trial\": true,\r\n            \"free_trial_ends_on\": \"2017-11-11T00:00:00Z\",\r\n            \"updated_at\": \"2017-11-02T01:12:12Z\",\r\n            \"plan\": {\r\n              \"url\": \"https://api.github.com/marketplace_listing/plans/1313\",\r\n              \"accounts_url\": \"https://api.github.com/marketplace_listing/plans/1313/accounts\",\r\n              \"id\": 1313,\r\n              \"number\": 3,\r\n              \"name\": \"Pro\",\r\n              \"description\": \"A professional-grade CI solution\",\r\n              \"monthly_price_in_cents\": 1099,\r\n              \"yearly_price_in_cents\": 11870,\r\n              \"price_model\": \"flat-rate\",\r\n              \"has_free_trial\": true,\r\n              \"unit_name\": null,\r\n              \"state\": \"published\",\r\n              \"bullets\": [\r\n                \"Up to 25 private repositories\",\r\n                \"11 concurrent builds\"\r\n              ]\r\n            }\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MarketplacePurchase

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestMergedUpstream_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"message\": \"Successfully fetched and fast-forwarded from upstream defunkt:main\",\r\n          \"merge_type\": \"fast-forward\",\r\n          \"base_branch\": \"defunkt:main\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MergedUpstream

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestMigration_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 79,\r\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n          \"owner\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"guid\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\r\n          \"state\": \"exported\",\r\n          \"lock_repositories\": true,\r\n          \"exclude_attachments\": false,\r\n          \"exclude_releases\": false,\r\n          \"exclude_owner_projects\": false,\r\n          \"repositories\": [\r\n            {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"template_repository\": null,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://api.github.com/licenses/mit\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          ],\r\n          \"url\": \"https://api.github.com/orgs/octo-org/migrations/79\",\r\n          \"created_at\": \"2015-07-06T15:33:38-07:00\",\r\n          \"updated_at\": \"2015-07-06T15:33:38-07:00\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 79,\r\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n          \"owner\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"guid\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\r\n          \"state\": \"pending\",\r\n          \"lock_repositories\": true,\r\n          \"exclude_attachments\": false,\r\n          \"exclude_releases\": false,\r\n          \"exclude_owner_projects\": false,\r\n          \"repositories\": [\r\n            {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"template_repository\": null,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://api.github.com/licenses/mit\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          ],\r\n          \"url\": \"https://api.github.com/orgs/octo-org/migrations/79\",\r\n          \"created_at\": \"2015-07-06T15:33:38-07:00\",\r\n          \"updated_at\": \"2015-07-06T15:33:38-07:00\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 79,\r\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n          \"owner\": {\r\n            \"login\": \"github\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n            \"url\": \"https://api.github.com/orgs/github\",\r\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": true\r\n          },\r\n          \"guid\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\r\n          \"state\": \"exported\",\r\n          \"lock_repositories\": true,\r\n          \"exclude_attachments\": false,\r\n          \"exclude_releases\": false,\r\n          \"exclude_owner_projects\": false,\r\n          \"repositories\": [\r\n            {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"template_repository\": null,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://api.github.com/licenses/mit\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          ],\r\n          \"url\": \"https://api.github.com/orgs/octo-org/migrations/79\",\r\n          \"created_at\": \"2015-07-06T15:33:38-07:00\",\r\n          \"updated_at\": \"2015-07-06T15:33:38-07:00\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 79,\r\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n          \"owner\": {\r\n            \"login\": \"github\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n            \"url\": \"https://api.github.com/orgs/github\",\r\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": true\r\n          },\r\n          \"guid\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\r\n          \"state\": \"pending\",\r\n          \"lock_repositories\": true,\r\n          \"exclude_attachments\": false,\r\n          \"exclude_releases\": false,\r\n          \"exclude_owner_projects\": false,\r\n          \"repositories\": [\r\n            {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"template_repository\": null,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://api.github.com/licenses/mit\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          ],\r\n          \"url\": \"https://api.github.com/orgs/octo-org/migrations/79\",\r\n          \"created_at\": \"2015-07-06T15:33:38-07:00\",\r\n          \"updated_at\": \"2015-07-06T15:33:38-07:00\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Migration

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestMigrationsStartForAuthenticatedUserReqExcludeItem_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"repositories\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MigrationsStartForAuthenticatedUserReqExcludeItem

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestMilestone_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\r\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\r\n          \"id\": 1002604,\r\n          \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\r\n          \"number\": 1,\r\n          \"state\": \"open\",\r\n          \"title\": \"v1.0\",\r\n          \"description\": \"Tracking milestone for version 1.0\",\r\n          \"creator\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"open_issues\": 4,\r\n          \"closed_issues\": 8,\r\n          \"created_at\": \"2011-04-10T20:09:31Z\",\r\n          \"updated_at\": \"2014-03-03T18:58:10Z\",\r\n          \"closed_at\": \"2013-02-12T13:22:01Z\",\r\n          \"due_on\": \"2012-10-09T23:39:01Z\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Milestone

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestMilestoneState_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"open\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MilestoneState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestMinimalRepository_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1296269,\r\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n          \"name\": \"Hello-World\",\r\n          \"full_name\": \"octocat/Hello-World\",\r\n          \"owner\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"private\": false,\r\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n          \"description\": \"This your first repo!\",\r\n          \"fork\": false,\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n          \"homepage\": \"https://github.com\",\r\n          \"language\": null,\r\n          \"forks_count\": 9,\r\n          \"stargazers_count\": 80,\r\n          \"watchers_count\": 80,\r\n          \"size\": 108,\r\n          \"default_branch\": \"master\",\r\n          \"open_issues_count\": 0,\r\n          \"is_template\": false,\r\n          \"topics\": [\r\n            \"octocat\",\r\n            \"atom\",\r\n            \"electron\",\r\n            \"api\"\r\n          ],\r\n          \"has_issues\": true,\r\n          \"has_projects\": true,\r\n          \"has_wiki\": true,\r\n          \"has_pages\": false,\r\n          \"has_downloads\": true,\r\n          \"archived\": false,\r\n          \"disabled\": false,\r\n          \"visibility\": \"public\",\r\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n          \"created_at\": \"2011-01-26T19:01:12Z\",\r\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n          \"permissions\": {\r\n            \"admin\": false,\r\n            \"push\": false,\r\n            \"pull\": true\r\n          },\r\n          \"template_repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World-Template\",\r\n            \"full_name\": \"octocat/Hello-World-Template\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\r\n            \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\r\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\r\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\r\n            \"homepage\": \"https://github.com\",\r\n            \"language\": null,\r\n            \"forks\": 9,\r\n            \"forks_count\": 9,\r\n            \"stargazers_count\": 80,\r\n            \"watchers_count\": 80,\r\n            \"watchers\": 80,\r\n            \"size\": 108,\r\n            \"default_branch\": \"master\",\r\n            \"open_issues\": 0,\r\n            \"open_issues_count\": 0,\r\n            \"is_template\": true,\r\n            \"license\": {\r\n              \"key\": \"mit\",\r\n              \"name\": \"MIT License\",\r\n              \"url\": \"https://api.github.com/licenses/mit\",\r\n              \"spdx_id\": \"MIT\",\r\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n              \"html_url\": \"https://api.github.com/licenses/mit\"\r\n            },\r\n            \"topics\": [\r\n              \"octocat\",\r\n              \"atom\",\r\n              \"electron\",\r\n              \"api\"\r\n            ],\r\n            \"has_issues\": true,\r\n            \"has_projects\": true,\r\n            \"has_wiki\": true,\r\n            \"has_pages\": false,\r\n            \"has_downloads\": true,\r\n            \"archived\": false,\r\n            \"disabled\": false,\r\n            \"visibility\": \"public\",\r\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n            \"created_at\": \"2011-01-26T19:01:12Z\",\r\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n            \"permissions\": {\r\n              \"admin\": false,\r\n              \"push\": false,\r\n              \"pull\": true\r\n            },\r\n            \"allow_rebase_merge\": true,\r\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n            \"allow_squash_merge\": true,\r\n            \"allow_auto_merge\": false,\r\n            \"delete_branch_on_merge\": true,\r\n            \"allow_merge_commit\": true,\r\n            \"allow_forking\": true,\r\n            \"subscribers_count\": 42,\r\n            \"network_count\": 0\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MinimalRepository

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestNullableIntegrationPermissions_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n              \"issues\": \"read\",\r\n              \"deployments\": \"write\"\r\n            }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ NullableIntegrationPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestNullableMilestoneState_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"open\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ NullableMilestoneState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestOrgHook_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"url\": \"https://api.github.com/orgs/octocat/hooks/1\",\r\n          \"ping_url\": \"https://api.github.com/orgs/octocat/hooks/1/pings\",\r\n          \"deliveries_url\": \"https://api.github.com/orgs/octocat/hooks/1/deliveries\",\r\n          \"name\": \"web\",\r\n          \"events\": [\r\n            \"push\",\r\n            \"pull_request\"\r\n          ],\r\n          \"active\": true,\r\n          \"config\": {\r\n            \"url\": \"http://example.com\",\r\n            \"content_type\": \"json\"\r\n          },\r\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\r\n          \"created_at\": \"2011-09-06T17:26:27Z\",\r\n          \"type\": \"Organization\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"url\": \"https://api.github.com/orgs/octocat/hooks/1\",\r\n          \"ping_url\": \"https://api.github.com/orgs/octocat/hooks/1/pings\",\r\n          \"deliveries_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/12345678/deliveries\",\r\n          \"name\": \"web\",\r\n          \"events\": [\r\n            \"pull_request\"\r\n          ],\r\n          \"active\": true,\r\n          \"config\": {\r\n            \"url\": \"http://example.com\",\r\n            \"content_type\": \"json\"\r\n          },\r\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\r\n          \"created_at\": \"2011-09-06T17:26:27Z\",\r\n          \"type\": \"Organization\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgHook

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestOrgMembership_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/orgs/invitocat/memberships/defunkt\",\r\n          \"state\": \"pending\",\r\n          \"role\": \"admin\",\r\n          \"organization_url\": \"https://api.github.com/orgs/invitocat\",\r\n          \"organization\": {\r\n            \"login\": \"github\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n            \"url\": \"https://api.github.com/orgs/github\",\r\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n            \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\r\n            \"issues_url\": \"https://api.github.com/orgs/github/issues\",\r\n            \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\r\n            \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"description\": \"A great organization\"\r\n          },\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/orgs/octocat/memberships/defunkt\",\r\n          \"state\": \"active\",\r\n          \"role\": \"admin\",\r\n          \"organization_url\": \"https://api.github.com/orgs/octocat\",\r\n          \"organization\": {\r\n            \"login\": \"github\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n            \"url\": \"https://api.github.com/orgs/github\",\r\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n            \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\r\n            \"issues_url\": \"https://api.github.com/orgs/github/issues\",\r\n            \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\r\n            \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"description\": \"A great organization\"\r\n          },\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgMembership

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestOrgMembershipRole_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"admin\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgMembershipRole

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestOrgMembershipState_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"active\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgMembershipState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestOrganizationActionsSecret_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"name\": \"GH_TOKEN\",\r\n          \"created_at\": \"2019-08-10T14:59:22Z\",\r\n          \"updated_at\": \"2020-01-10T14:59:22Z\",\r\n          \"visibility\": \"selected\",\r\n          \"selected_repositories_url\": \"https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrganizationActionsSecret

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestOrganizationFull_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"login\": \"github\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n          \"url\": \"https://api.github.com/orgs/github\",\r\n          \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n          \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n          \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\r\n          \"issues_url\": \"https://api.github.com/orgs/github/issues\",\r\n          \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\r\n          \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\r\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n          \"description\": \"A great organization\",\r\n          \"name\": \"github\",\r\n          \"company\": \"GitHub\",\r\n          \"blog\": \"https://github.com/blog\",\r\n          \"location\": \"San Francisco\",\r\n          \"email\": \"octocat@github.com\",\r\n          \"twitter_username\": \"github\",\r\n          \"is_verified\": true,\r\n          \"has_organization_projects\": true,\r\n          \"has_repository_projects\": true,\r\n          \"public_repos\": 2,\r\n          \"public_gists\": 1,\r\n          \"followers\": 20,\r\n          \"following\": 0,\r\n          \"html_url\": \"https://github.com/octocat\",\r\n          \"created_at\": \"2008-01-14T04:33:35Z\",\r\n          \"updated_at\": \"2014-03-03T18:58:10Z\",\r\n          \"type\": \"Organization\",\r\n          \"total_private_repos\": 100,\r\n          \"owned_private_repos\": 100,\r\n          \"private_gists\": 81,\r\n          \"disk_usage\": 10000,\r\n          \"collaborators\": 8,\r\n          \"billing_email\": \"mona@github.com\",\r\n          \"plan\": {\r\n            \"name\": \"Medium\",\r\n            \"space\": 400,\r\n            \"private_repos\": 20,\r\n            \"filled_seats\": 4,\r\n            \"seats\": 5\r\n          },\r\n          \"default_repository_permission\": \"read\",\r\n          \"members_can_create_repositories\": true,\r\n          \"two_factor_requirement_enabled\": true,\r\n          \"members_allowed_repository_creation_type\": \"all\",\r\n          \"members_can_create_public_repositories\": false,\r\n          \"members_can_create_private_repositories\": false,\r\n          \"members_can_create_internal_repositories\": false,\r\n          \"members_can_create_pages\": true\r\n        }",
		},
		{
			Input: "{\r\n          \"login\": \"github\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n          \"url\": \"https://api.github.com/orgs/github\",\r\n          \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n          \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n          \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\r\n          \"issues_url\": \"https://api.github.com/orgs/github/issues\",\r\n          \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\r\n          \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\r\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n          \"description\": \"A great organization\",\r\n          \"name\": \"github\",\r\n          \"company\": \"GitHub\",\r\n          \"blog\": \"https://github.com/blog\",\r\n          \"location\": \"San Francisco\",\r\n          \"email\": \"octocat@github.com\",\r\n          \"twitter_username\": \"github\",\r\n          \"is_verified\": true,\r\n          \"has_organization_projects\": true,\r\n          \"has_repository_projects\": true,\r\n          \"public_repos\": 2,\r\n          \"public_gists\": 1,\r\n          \"followers\": 20,\r\n          \"following\": 0,\r\n          \"html_url\": \"https://github.com/octocat\",\r\n          \"created_at\": \"2008-01-14T04:33:35Z\",\r\n          \"type\": \"Organization\",\r\n          \"total_private_repos\": 100,\r\n          \"owned_private_repos\": 100,\r\n          \"private_gists\": 81,\r\n          \"disk_usage\": 10000,\r\n          \"collaborators\": 8,\r\n          \"billing_email\": \"mona@github.com\",\r\n          \"plan\": {\r\n            \"name\": \"Medium\",\r\n            \"space\": 400,\r\n            \"private_repos\": 20\r\n          },\r\n          \"default_repository_permission\": \"read\",\r\n          \"members_can_create_repositories\": true,\r\n          \"two_factor_requirement_enabled\": true,\r\n          \"members_allowed_repository_creation_type\": \"all\",\r\n          \"members_can_create_public_repositories\": false,\r\n          \"members_can_create_private_repositories\": false,\r\n          \"members_can_create_internal_repositories\": false,\r\n          \"members_can_create_pages\": true,\r\n          \"members_can_create_public_pages\": true,\r\n          \"members_can_create_private_pages\": true,\r\n          \"updated_at\": \"2014-03-03T18:58:10Z\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrganizationFull

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestOrganizationInvitation_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"login\": \"monalisa\",\r\n          \"node_id\": \"MDQ6VXNlcjE=\",\r\n          \"email\": \"octocat@github.com\",\r\n          \"role\": \"direct_member\",\r\n          \"created_at\": \"2016-11-30T06:46:10-08:00\",\r\n          \"inviter\": {\r\n            \"login\": \"other_user\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/other_user_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/other_user\",\r\n            \"html_url\": \"https://github.com/other_user\",\r\n            \"followers_url\": \"https://api.github.com/users/other_user/followers\",\r\n            \"following_url\": \"https://api.github.com/users/other_user/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/other_user/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/other_user/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/other_user/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/other_user/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/other_user/repos\",\r\n            \"events_url\": \"https://api.github.com/users/other_user/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/other_user/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"team_count\": 2,\r\n          \"invitation_teams_url\": \"https://api.github.com/organizations/2/invitations/1/teams\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrganizationInvitation

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestOrgsRemoveOutsideCollaboratorUnprocessableEntity_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"message\": \"You cannot specify an organization member to remove as an outside collaborator.\",\r\n                      \"documentation_url\": \"https://docs.github.com/rest/reference/orgs#remove-outside-collaborator\"\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgsRemoveOutsideCollaboratorUnprocessableEntity

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestOrgsUpdateWebhookConfigForOrgReq_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                  \"content_type\": \"json\",\r\n                  \"insecure_ssl\": \"0\",\r\n                  \"secret\": \"********\",\r\n                  \"url\": \"https://example.com/webhook\"\r\n                }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgsUpdateWebhookConfigForOrgReq

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPackage_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 197,\r\n          \"name\": \"hello_docker\",\r\n          \"package_type\": \"container\",\r\n          \"owner\": {\r\n            \"login\": \"github\",\r\n            \"id\": 9919,\r\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjk5MTk=\",\r\n            \"avatar_url\": \"https://avatars.githubusercontent.com/u/9919?v=4\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/github\",\r\n            \"html_url\": \"https://github.com/github\",\r\n            \"followers_url\": \"https://api.github.com/users/github/followers\",\r\n            \"following_url\": \"https://api.github.com/users/github/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/github/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/github/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/github/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/github/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/github/repos\",\r\n            \"events_url\": \"https://api.github.com/users/github/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/github/received_events\",\r\n            \"type\": \"Organization\",\r\n            \"site_admin\": false\r\n          },\r\n          \"version_count\": 1,\r\n          \"visibility\": \"private\",\r\n          \"url\": \"https://api.github.com/orgs/github/packages/container/hello_docker\",\r\n          \"created_at\": \"2020-05-19T22:19:11Z\",\r\n          \"updated_at\": \"2020-05-19T22:19:11Z\",\r\n          \"html_url\": \"https://github.com/orgs/github/packages/container/package/hello_docker\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 40201,\r\n          \"name\": \"octo-name\",\r\n          \"package_type\": \"rubygems\",\r\n          \"owner\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 209477,\r\n            \"node_id\": \"MDQ6VXNlcjIwOTQ3Nw==\",\r\n            \"avatar_url\": \"https://avatars.githubusercontent.com/u/209477?v=4\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": true\r\n          },\r\n          \"version_count\": 3,\r\n          \"visibility\": \"public\",\r\n          \"url\": \"https://api.github.com/users/octocat/packages/rubygems/octo-name\",\r\n          \"created_at\": \"2019-10-20T14:17:14Z\",\r\n          \"updated_at\": \"2019-10-20T14:17:14Z\",\r\n          \"repository\": {\r\n            \"id\": 216219492,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMTYyMTk0OTI=\",\r\n            \"name\": \"octo-name-repo\",\r\n            \"full_name\": \"octocat/octo-name-repo\",\r\n            \"private\": false,\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 209477,\r\n              \"node_id\": \"MDQ6VXNlcjIwOTQ3Nw==\",\r\n              \"avatar_url\": \"https://avatars.githubusercontent.com/u/209477?v=4\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": true\r\n            },\r\n            \"html_url\": \"https://github.com/octocat/octo-name-repo\",\r\n            \"description\": \"Project for octocats\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/octo-name-repo\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/octo-name-repo/forks\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/octo-name-repo/keys{/key_id}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/octo-name-repo/collaborators{/collaborator}\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/octo-name-repo/teams\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/octo-name-repo/hooks\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/octo-name-repo/issues/events{/number}\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/octo-name-repo/events\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/octo-name-repo/assignees{/user}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/octo-name-repo/branches{/branch}\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/octo-name-repo/tags\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/octo-name-repo/git/blobs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/octo-name-repo/git/tags{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/octo-name-repo/git/refs{/sha}\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/octo-name-repo/git/trees{/sha}\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/octo-name-repo/statuses/{sha}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/octo-name-repo/languages\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/octo-name-repo/stargazers\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/octo-name-repo/contributors\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/octo-name-repo/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/octo-name-repo/subscription\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/octo-name-repo/commits{/sha}\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/octo-name-repo/git/commits{/sha}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/octo-name-repo/comments{/number}\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/octo-name-repo/issues/comments{/number}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/octo-name-repo/contents/{+path}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/octo-name-repo/compare/{base}...{head}\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/octo-name-repo/merges\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/octo-name-repo/{archive_format}{/ref}\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/octo-name-repo/downloads\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/octo-name-repo/issues{/number}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/octo-name-repo/pulls{/number}\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/octo-name-repo/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/octo-name-repo/notifications{?since,all,participating}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/octo-name-repo/labels{/name}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/octo-name-repo/releases{/id}\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/octo-name-repo/deployments\"\r\n          },\r\n          \"html_url\": \"https://github.com/octocat/octo-name-repo/packages/40201\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Package

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPackagePackageType_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"docker\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PackagePackageType

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPackageVersion_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 836,\r\n          \"name\": \"sha256:b3d3e366b55f9a54599220198b3db5da8f53592acbbb7dc7e4e9878762fc5344\",\r\n          \"url\": \"https://api.github.com/orgs/github/packages/container/hello_docker/versions/836\",\r\n          \"package_html_url\": \"https://github.com/orgs/github/packages/container/package/hello_docker\",\r\n          \"created_at\": \"2020-05-19T22:19:11Z\",\r\n          \"updated_at\": \"2020-05-19T22:19:11Z\",\r\n          \"html_url\": \"https://github.com/orgs/github/packages/container/hello_docker/836\",\r\n          \"metadata\": {\r\n            \"package_type\": \"container\",\r\n            \"container\": {\r\n              \"tags\": [\r\n                \"latest\"\r\n              ]\r\n            }\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 214,\r\n          \"name\": \"sha256:3561f0cff06caccddb99c93bd26e712fcc56a811de0f8ea7a17bb865f30b176a\",\r\n          \"url\": \"https://api.github.com/users/octocat/packages/container/hello_docker/versions/214\",\r\n          \"package_html_url\": \"https://github.com/users/octocat/packages/container/package/hello_docker\",\r\n          \"created_at\": \"2020-05-15T03:46:45Z\",\r\n          \"updated_at\": \"2020-05-15T03:46:45Z\",\r\n          \"html_url\": \"https://github.com/users/octocat/packages/container/hello_docker/214\",\r\n          \"metadata\": {\r\n            \"package_type\": \"container\",\r\n            \"container\": {\r\n              \"tags\": [\r\n                \"1.13.6\"\r\n              ]\r\n            }\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 387039,\r\n          \"name\": \"0.2.0\",\r\n          \"url\": \"https://api.github.com/users/octocat/packages/rubygems/octo-name/versions/387039\",\r\n          \"package_html_url\": \"https://github.com/octocat/octo-name-repo/packages/40201\",\r\n          \"license\": \"MIT\",\r\n          \"created_at\": \"2019-12-01T20:49:29Z\",\r\n          \"updated_at\": \"2019-12-01T20:49:30Z\",\r\n          \"description\": \"Octo-name client for Ruby\",\r\n          \"html_url\": \"https://github.com/octocat/octo-name-repo/packages/40201?version=0.2.0\",\r\n          \"metadata\": {\r\n            \"package_type\": \"rubygems\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PackageVersion

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPackageVersionMetadataPackageType_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"docker\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PackageVersionMetadataPackageType

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPackageVisibility_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"private\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PackageVisibility

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPackagesBillingUsage_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_gigabytes_bandwidth_used\": 50,\r\n          \"total_paid_gigabytes_bandwidth_used\": 40,\r\n          \"included_gigabytes_bandwidth\": 10\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PackagesBillingUsage

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPage_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/github/developer.github.com/pages\",\r\n          \"status\": \"built\",\r\n          \"cname\": \"developer.github.com\",\r\n          \"custom_404\": false,\r\n          \"html_url\": \"https://developer.github.com\",\r\n          \"source\": {\r\n            \"branch\": \"master\",\r\n            \"path\": \"/\"\r\n          },\r\n          \"public\": true,\r\n          \"https_certificate\": {\r\n            \"state\": \"approved\",\r\n            \"description\": \"Certificate is approved\",\r\n            \"domains\": [\r\n              \"developer.github.com\"\r\n            ],\r\n            \"expires_at\": \"2021-05-22\"\r\n          },\r\n          \"https_enforced\": true\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Page

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPageBuild_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/github/developer.github.com/pages/builds/5472601\",\r\n          \"status\": \"built\",\r\n          \"error\": {\r\n            \"message\": null\r\n          },\r\n          \"pusher\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"commit\": \"351391cdcb88ffae71ec3028c91f375a8036a26b\",\r\n          \"duration\": 2104,\r\n          \"created_at\": \"2014-02-10T19:00:49Z\",\r\n          \"updated_at\": \"2014-02-10T19:00:51Z\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PageBuild

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPageBuildStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/github/developer.github.com/pages/builds/latest\",\r\n          \"status\": \"queued\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PageBuildStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPageProtectedDomainState_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"pending\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PageProtectedDomainState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPageStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"built\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PageStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPagesHTTPSCertificateState_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"approved\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PagesHTTPSCertificateState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPagesHealthCheck_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"domain\": {\r\n            \"host\": \"example.com\",\r\n            \"uri\": \"http://example.com/\",\r\n            \"nameservers\": \"default\",\r\n            \"dns_resolves\": true,\r\n            \"is_proxied\": false,\r\n            \"is_cloudflare_ip\": false,\r\n            \"is_fastly_ip\": false,\r\n            \"is_old_ip_address\": false,\r\n            \"is_a_record\": true,\r\n            \"has_cname_record\": false,\r\n            \"has_mx_records_present\": false,\r\n            \"is_valid_domain\": true,\r\n            \"is_apex_domain\": true,\r\n            \"should_be_a_record\": true,\r\n            \"is_cname_to_github_user_domain\": false,\r\n            \"is_cname_to_pages_dot_github_dot_com\": false,\r\n            \"is_cname_to_fastly\": false,\r\n            \"is_pointed_to_github_pages_ip\": true,\r\n            \"is_non_github_pages_ip_present\": false,\r\n            \"is_pages_domain\": false,\r\n            \"is_served_by_pages\": true,\r\n            \"is_valid\": true,\r\n            \"reason\": null,\r\n            \"responds_to_https\": true,\r\n            \"enforces_https\": true,\r\n            \"https_error\": null,\r\n            \"is_https_eligible\": true,\r\n            \"caa_error\": null\r\n          },\r\n          \"alt_domain\": {\r\n            \"host\": \"www.example.com\",\r\n            \"uri\": \"http://www.example.com/\",\r\n            \"nameservers\": \"default\",\r\n            \"dns_resolves\": true,\r\n            \"is_proxied\": false,\r\n            \"is_cloudflare_ip\": false,\r\n            \"is_fastly_ip\": false,\r\n            \"is_old_ip_address\": false,\r\n            \"is_a_record\": true,\r\n            \"has_cname_record\": false,\r\n            \"has_mx_records_present\": false,\r\n            \"is_valid_domain\": true,\r\n            \"is_apex_domain\": true,\r\n            \"should_be_a_record\": true,\r\n            \"is_cname_to_github_user_domain\": false,\r\n            \"is_cname_to_pages_dot_github_dot_com\": false,\r\n            \"is_cname_to_fastly\": false,\r\n            \"is_pointed_to_github_pages_ip\": true,\r\n            \"is_non_github_pages_ip_present\": false,\r\n            \"is_pages_domain\": false,\r\n            \"is_served_by_pages\": true,\r\n            \"is_valid\": true,\r\n            \"reason\": null,\r\n            \"responds_to_https\": true,\r\n            \"enforces_https\": true,\r\n            \"https_error\": null,\r\n            \"is_https_eligible\": true,\r\n            \"caa_error\": null\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PagesHealthCheck

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestParticipationStats_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"all\": [\r\n            11,\r\n            21,\r\n            15,\r\n            2,\r\n            8,\r\n            1,\r\n            8,\r\n            23,\r\n            17,\r\n            21,\r\n            11,\r\n            10,\r\n            33,\r\n            91,\r\n            38,\r\n            34,\r\n            22,\r\n            23,\r\n            32,\r\n            3,\r\n            43,\r\n            87,\r\n            71,\r\n            18,\r\n            13,\r\n            5,\r\n            13,\r\n            16,\r\n            66,\r\n            27,\r\n            12,\r\n            45,\r\n            110,\r\n            117,\r\n            13,\r\n            8,\r\n            18,\r\n            9,\r\n            19,\r\n            26,\r\n            39,\r\n            12,\r\n            20,\r\n            31,\r\n            46,\r\n            91,\r\n            45,\r\n            10,\r\n            24,\r\n            9,\r\n            29,\r\n            7\r\n          ],\r\n          \"owner\": [\r\n            3,\r\n            2,\r\n            3,\r\n            0,\r\n            2,\r\n            0,\r\n            5,\r\n            14,\r\n            7,\r\n            9,\r\n            1,\r\n            5,\r\n            0,\r\n            48,\r\n            19,\r\n            2,\r\n            0,\r\n            1,\r\n            10,\r\n            2,\r\n            23,\r\n            40,\r\n            35,\r\n            8,\r\n            8,\r\n            2,\r\n            10,\r\n            6,\r\n            30,\r\n            0,\r\n            2,\r\n            9,\r\n            53,\r\n            104,\r\n            3,\r\n            3,\r\n            10,\r\n            4,\r\n            7,\r\n            11,\r\n            21,\r\n            4,\r\n            4,\r\n            22,\r\n            26,\r\n            63,\r\n            11,\r\n            2,\r\n            14,\r\n            1,\r\n            10,\r\n            3\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ParticipationStats

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPorterAuthor_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 2268557,\r\n          \"remote_id\": \"nobody@fc7da526-431c-80fe-3c8c-c148ff18d7ef\",\r\n          \"remote_name\": \"nobody\",\r\n          \"email\": \"hubot@github.com\",\r\n          \"name\": \"Hubot\",\r\n          \"url\": \"https://api.github.com/repos/octocat/socm/import/authors/2268557\",\r\n          \"import_url\": \"https://api.github.com/repos/octocat/socm/import\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PorterAuthor

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPrivateUser_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"login\": \"octocat\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDQ6VXNlcjE=\",\r\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n          \"gravatar_id\": \"\",\r\n          \"url\": \"https://api.github.com/users/octocat\",\r\n          \"html_url\": \"https://github.com/octocat\",\r\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n          \"type\": \"User\",\r\n          \"site_admin\": false,\r\n          \"name\": \"monalisa octocat\",\r\n          \"company\": \"GitHub\",\r\n          \"blog\": \"https://github.com/blog\",\r\n          \"location\": \"San Francisco\",\r\n          \"email\": \"octocat@github.com\",\r\n          \"hireable\": false,\r\n          \"bio\": \"There once was...\",\r\n          \"twitter_username\": \"monatheoctocat\",\r\n          \"public_repos\": 2,\r\n          \"public_gists\": 1,\r\n          \"followers\": 20,\r\n          \"following\": 0,\r\n          \"created_at\": \"2008-01-14T04:33:35Z\",\r\n          \"updated_at\": \"2008-01-14T04:33:35Z\",\r\n          \"private_gists\": 81,\r\n          \"total_private_repos\": 100,\r\n          \"owned_private_repos\": 100,\r\n          \"disk_usage\": 10000,\r\n          \"collaborators\": 8,\r\n          \"two_factor_authentication\": true,\r\n          \"plan\": {\r\n            \"name\": \"Medium\",\r\n            \"space\": 400,\r\n            \"private_repos\": 20,\r\n            \"collaborators\": 0\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PrivateUser

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestProject_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"owner_url\": \"https://api.github.com/repos/api-playground/projects-test\",\r\n          \"url\": \"https://api.github.com/projects/1002604\",\r\n          \"html_url\": \"https://github.com/api-playground/projects-test/projects/1\",\r\n          \"columns_url\": \"https://api.github.com/projects/1002604/columns\",\r\n          \"id\": 1002604,\r\n          \"node_id\": \"MDc6UHJvamVjdDEwMDI2MDQ=\",\r\n          \"name\": \"Projects Documentation\",\r\n          \"body\": \"Developer documentation project for the developer site.\",\r\n          \"number\": 1,\r\n          \"state\": \"open\",\r\n          \"creator\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"created_at\": \"2011-04-10T20:09:31Z\",\r\n          \"updated_at\": \"2014-03-03T18:58:10Z\"\r\n        }",
		},
		{
			Input: "{\r\n          \"owner_url\": \"https://api.github.com/users/octocat\",\r\n          \"url\": \"https://api.github.com/projects/1002603\",\r\n          \"html_url\": \"https://github.com/users/octocat/projects/1\",\r\n          \"columns_url\": \"https://api.github.com/projects/1002603/columns\",\r\n          \"id\": 1002603,\r\n          \"node_id\": \"MDc6UHJvamVjdDEwMDI2MDM=\",\r\n          \"name\": \"My Projects\",\r\n          \"body\": \"A board to manage my personal projects.\",\r\n          \"number\": 1,\r\n          \"state\": \"open\",\r\n          \"creator\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"created_at\": \"2011-04-10T20:09:31Z\",\r\n          \"updated_at\": \"2014-03-03T18:58:10Z\"\r\n        }",
		},
		{
			Input: "{\r\n          \"owner_url\": \"https://api.github.com/orgs/octocat\",\r\n          \"url\": \"https://api.github.com/projects/1002605\",\r\n          \"html_url\": \"https://github.com/orgs/api-playground/projects/1\",\r\n          \"columns_url\": \"https://api.github.com/projects/1002605/columns\",\r\n          \"id\": 1002605,\r\n          \"node_id\": \"MDc6UHJvamVjdDEwMDI2MDU=\",\r\n          \"name\": \"Organization Roadmap\",\r\n          \"body\": \"High-level roadmap for the upcoming year.\",\r\n          \"number\": 1,\r\n          \"state\": \"open\",\r\n          \"creator\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"created_at\": \"2011-04-11T20:09:31Z\",\r\n          \"updated_at\": \"2014-03-04T18:58:10Z\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Project

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestProjectCard_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/projects/columns/cards/1478\",\r\n          \"id\": 1478,\r\n          \"node_id\": \"MDExOlByb2plY3RDYXJkMTQ3OA==\",\r\n          \"note\": \"Add payload for delete Project column\",\r\n          \"creator\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"created_at\": \"2016-09-05T14:21:06Z\",\r\n          \"updated_at\": \"2016-09-05T14:20:22Z\",\r\n          \"archived\": false,\r\n          \"column_url\": \"https://api.github.com/projects/columns/367\",\r\n          \"content_url\": \"https://api.github.com/repos/api-playground/projects-test/issues/3\",\r\n          \"project_url\": \"https://api.github.com/projects/120\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ProjectCard

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestProjectColumn_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/projects/columns/367\",\r\n          \"project_url\": \"https://api.github.com/projects/120\",\r\n          \"cards_url\": \"https://api.github.com/projects/columns/367/cards\",\r\n          \"id\": 367,\r\n          \"node_id\": \"MDEzOlByb2plY3RDb2x1bW4zNjc=\",\r\n          \"name\": \"To Do\",\r\n          \"created_at\": \"2016-09-05T14:18:44Z\",\r\n          \"updated_at\": \"2016-09-05T14:22:28Z\"\r\n        }",
		},
		{
			Input: "{\r\n                  \"url\": \"https://api.github.com/projects/columns/367\",\r\n                  \"project_url\": \"https://api.github.com/projects/120\",\r\n                  \"cards_url\": \"https://api.github.com/projects/columns/367/cards\",\r\n                  \"id\": 367,\r\n                  \"node_id\": \"MDEzOlByb2plY3RDb2x1bW4zNjc=\",\r\n                  \"name\": \"To Do\",\r\n                  \"created_at\": \"2016-09-05T14:18:44Z\",\r\n                  \"updated_at\": \"2016-09-05T14:22:28Z\"\r\n                }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ProjectColumn

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestProjectsAddCollaboratorReqPermission_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"write\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ProjectsAddCollaboratorReqPermission

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestProtectedBranchAdminEnforced_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures\",\r\n          \"enabled\": true\r\n        }",
		},
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins\",\r\n          \"enabled\": true\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ProtectedBranchAdminEnforced

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestProtectedBranchPullRequestReview_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews\",\r\n          \"dismissal_restrictions\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions\",\r\n            \"users_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams\",\r\n            \"users\": [\r\n              {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              }\r\n            ],\r\n            \"teams\": [\r\n              {\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VGVhbTE=\",\r\n                \"url\": \"https://api.github.com/teams/1\",\r\n                \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\r\n                \"name\": \"Justice League\",\r\n                \"slug\": \"justice-league\",\r\n                \"description\": \"A great team.\",\r\n                \"privacy\": \"closed\",\r\n                \"permission\": \"admin\",\r\n                \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\r\n                \"repositories_url\": \"https://api.github.com/teams/1/repos\",\r\n                \"parent\": null\r\n              }\r\n            ]\r\n          },\r\n          \"dismiss_stale_reviews\": true,\r\n          \"require_code_owner_reviews\": true,\r\n          \"required_approving_review_count\": 2\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ProtectedBranchPullRequestReview

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPullRequest_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDExOlB1bGxSZXF1ZXN0MQ==\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\r\n          \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\r\n          \"patch_url\": \"https://github.com/octocat/Hello-World/pull/1347.patch\",\r\n          \"issue_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\r\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits\",\r\n          \"review_comments_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments\",\r\n          \"review_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\",\r\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"number\": 1347,\r\n          \"state\": \"open\",\r\n          \"locked\": true,\r\n          \"title\": \"Amazing new feature\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"Please pull these awesome changes in!\",\r\n          \"labels\": [\r\n            {\r\n              \"id\": 208045946,\r\n              \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\r\n              \"name\": \"bug\",\r\n              \"description\": \"Something isn't working\",\r\n              \"color\": \"f29513\",\r\n              \"default\": true\r\n            }\r\n          ],\r\n          \"milestone\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\r\n            \"id\": 1002604,\r\n            \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\r\n            \"number\": 1,\r\n            \"state\": \"open\",\r\n            \"title\": \"v1.0\",\r\n            \"description\": \"Tracking milestone for version 1.0\",\r\n            \"creator\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"open_issues\": 4,\r\n            \"closed_issues\": 8,\r\n            \"created_at\": \"2011-04-10T20:09:31Z\",\r\n            \"updated_at\": \"2014-03-03T18:58:10Z\",\r\n            \"closed_at\": \"2013-02-12T13:22:01Z\",\r\n            \"due_on\": \"2012-10-09T23:39:01Z\"\r\n          },\r\n          \"active_lock_reason\": \"too heated\",\r\n          \"created_at\": \"2011-01-26T19:01:12Z\",\r\n          \"updated_at\": \"2011-01-26T19:01:12Z\",\r\n          \"closed_at\": \"2011-01-26T19:01:12Z\",\r\n          \"merged_at\": \"2011-01-26T19:01:12Z\",\r\n          \"merge_commit_sha\": \"e5bd3914e2e596debea16f433f57875b5b90bcd6\",\r\n          \"assignee\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"assignees\": [\r\n            {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            {\r\n              \"login\": \"hubot\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/hubot\",\r\n              \"html_url\": \"https://github.com/hubot\",\r\n              \"followers_url\": \"https://api.github.com/users/hubot/followers\",\r\n              \"following_url\": \"https://api.github.com/users/hubot/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/hubot/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/hubot/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/hubot/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/hubot/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/hubot/repos\",\r\n              \"events_url\": \"https://api.github.com/users/hubot/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/hubot/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": true\r\n            }\r\n          ],\r\n          \"requested_reviewers\": [\r\n            {\r\n              \"login\": \"other_user\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/other_user_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/other_user\",\r\n              \"html_url\": \"https://github.com/other_user\",\r\n              \"followers_url\": \"https://api.github.com/users/other_user/followers\",\r\n              \"following_url\": \"https://api.github.com/users/other_user/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/other_user/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/other_user/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/other_user/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/other_user/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/other_user/repos\",\r\n              \"events_url\": \"https://api.github.com/users/other_user/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/other_user/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            }\r\n          ],\r\n          \"requested_teams\": [\r\n            {\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VGVhbTE=\",\r\n              \"url\": \"https://api.github.com/teams/1\",\r\n              \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\r\n              \"name\": \"Justice League\",\r\n              \"slug\": \"justice-league\",\r\n              \"description\": \"A great team.\",\r\n              \"privacy\": \"closed\",\r\n              \"permission\": \"admin\",\r\n              \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\r\n              \"repositories_url\": \"https://api.github.com/teams/1/repos\"\r\n            }\r\n          ],\r\n          \"head\": {\r\n            \"label\": \"octocat:new-topic\",\r\n            \"ref\": \"new-topic\",\r\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"user\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"repo\": {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"allow_forking\": true,\r\n              \"forks\": 123,\r\n              \"open_issues\": 123,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\r\n              },\r\n              \"watchers\": 123\r\n            }\r\n          },\r\n          \"base\": {\r\n            \"label\": \"octocat:master\",\r\n            \"ref\": \"master\",\r\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"user\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"repo\": {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"forks\": 123,\r\n              \"open_issues\": 123,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\r\n              },\r\n              \"watchers\": 123\r\n            }\r\n          },\r\n          \"_links\": {\r\n            \"self\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\"\r\n            },\r\n            \"html\": {\r\n              \"href\": \"https://github.com/octocat/Hello-World/pull/1347\"\r\n            },\r\n            \"issue\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\"\r\n            },\r\n            \"comments\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\"\r\n            },\r\n            \"review_comments\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments\"\r\n            },\r\n            \"review_comment\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}\"\r\n            },\r\n            \"commits\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits\"\r\n            },\r\n            \"statuses\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\"\r\n            }\r\n          },\r\n          \"author_association\": \"OWNER\",\r\n          \"auto_merge\": null,\r\n          \"draft\": false,\r\n          \"merged\": false,\r\n          \"mergeable\": true,\r\n          \"rebaseable\": true,\r\n          \"mergeable_state\": \"clean\",\r\n          \"merged_by\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"comments\": 10,\r\n          \"review_comments\": 0,\r\n          \"maintainer_can_modify\": true,\r\n          \"commits\": 3,\r\n          \"additions\": 100,\r\n          \"deletions\": 3,\r\n          \"changed_files\": 5\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequest

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPullRequestMergeResult_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"merged\": true,\r\n          \"message\": \"Pull Request successfully merged\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestMergeResult

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPullRequestReview_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 80,\r\n          \"node_id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"This is close to perfect! Please address the suggested inline change.\",\r\n          \"state\": \"CHANGES_REQUESTED\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\",\r\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\",\r\n          \"_links\": {\r\n            \"html\": {\r\n              \"href\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\"\r\n            },\r\n            \"pull_request\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\"\r\n            }\r\n          },\r\n          \"submitted_at\": \"2019-11-17T17:43:43Z\",\r\n          \"commit_id\": \"ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091\",\r\n          \"author_association\": \"COLLABORATOR\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 80,\r\n          \"node_id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"Here is the body for the review.\",\r\n          \"state\": \"APPROVED\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\",\r\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\",\r\n          \"_links\": {\r\n            \"html\": {\r\n              \"href\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\"\r\n            },\r\n            \"pull_request\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\"\r\n            }\r\n          },\r\n          \"submitted_at\": \"2019-11-17T17:43:43Z\",\r\n          \"commit_id\": \"ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091\",\r\n          \"author_association\": \"COLLABORATOR\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 80,\r\n          \"node_id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"This is close to perfect! Please address the suggested inline change. And add more about this.\",\r\n          \"state\": \"CHANGES_REQUESTED\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\",\r\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\",\r\n          \"_links\": {\r\n            \"html\": {\r\n              \"href\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\"\r\n            },\r\n            \"pull_request\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\"\r\n            }\r\n          },\r\n          \"submitted_at\": \"2019-11-17T17:43:43Z\",\r\n          \"commit_id\": \"ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091\",\r\n          \"author_association\": \"COLLABORATOR\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 80,\r\n          \"node_id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"Here is the body for the review.\",\r\n          \"state\": \"DISMISSED\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\",\r\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\",\r\n          \"_links\": {\r\n            \"html\": {\r\n              \"href\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\"\r\n            },\r\n            \"pull_request\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\"\r\n            }\r\n          },\r\n          \"submitted_at\": \"2019-11-17T17:43:43Z\",\r\n          \"commit_id\": \"ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091\",\r\n          \"author_association\": \"COLLABORATOR\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestReview

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPullRequestReviewComment_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments/1\",\r\n          \"pull_request_review_id\": 42,\r\n          \"id\": 10,\r\n          \"node_id\": \"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw\",\r\n          \"diff_hunk\": \"@@ -16,33 +16,40 @@ public class Connection : IConnection...\",\r\n          \"path\": \"file1.txt\",\r\n          \"position\": 1,\r\n          \"original_position\": 4,\r\n          \"commit_id\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"original_commit_id\": \"9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840\",\r\n          \"in_reply_to_id\": 426899381,\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"Great stuff!\",\r\n          \"created_at\": \"2011-04-14T16:00:49Z\",\r\n          \"updated_at\": \"2011-04-14T16:00:49Z\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/1#discussion-diff-1\",\r\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1\",\r\n          \"author_association\": \"NONE\",\r\n          \"_links\": {\r\n            \"self\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments/1\"\r\n            },\r\n            \"html\": {\r\n              \"href\": \"https://github.com/octocat/Hello-World/pull/1#discussion-diff-1\"\r\n            },\r\n            \"pull_request\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1\"\r\n            }\r\n          },\r\n          \"start_line\": 1,\r\n          \"original_start_line\": 1,\r\n          \"start_side\": \"RIGHT\",\r\n          \"line\": 2,\r\n          \"original_line\": 2,\r\n          \"side\": \"RIGHT\"\r\n        }",
		},
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments/1\",\r\n          \"pull_request_review_id\": 42,\r\n          \"id\": 10,\r\n          \"node_id\": \"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw\",\r\n          \"diff_hunk\": \"@@ -16,33 +16,40 @@ public class Connection : IConnection...\",\r\n          \"path\": \"file1.txt\",\r\n          \"position\": 1,\r\n          \"original_position\": 4,\r\n          \"commit_id\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"original_commit_id\": \"9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840\",\r\n          \"in_reply_to_id\": 8,\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"Great stuff!\",\r\n          \"created_at\": \"2011-04-14T16:00:49Z\",\r\n          \"updated_at\": \"2011-04-14T16:00:49Z\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/1#discussion-diff-1\",\r\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1\",\r\n          \"author_association\": \"NONE\",\r\n          \"_links\": {\r\n            \"self\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments/1\"\r\n            },\r\n            \"html\": {\r\n              \"href\": \"https://github.com/octocat/Hello-World/pull/1#discussion-diff-1\"\r\n            },\r\n            \"pull_request\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1\"\r\n            }\r\n          },\r\n          \"start_line\": 1,\r\n          \"original_start_line\": 1,\r\n          \"start_side\": \"RIGHT\",\r\n          \"line\": 2,\r\n          \"original_line\": 2,\r\n          \"side\": \"RIGHT\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestReviewComment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPullRequestReviewRequest_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"users\": [\r\n            {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            }\r\n          ],\r\n          \"teams\": [\r\n            {\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VGVhbTE=\",\r\n              \"url\": \"https://api.github.com/teams/1\",\r\n              \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\r\n              \"name\": \"Justice League\",\r\n              \"slug\": \"justice-league\",\r\n              \"description\": \"A great team.\",\r\n              \"privacy\": \"closed\",\r\n              \"permission\": \"admin\",\r\n              \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\r\n              \"repositories_url\": \"https://api.github.com/teams/1/repos\",\r\n              \"parent\": null\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestReviewRequest

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPullRequestSimple_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDExOlB1bGxSZXF1ZXN0MQ==\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\r\n          \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\r\n          \"patch_url\": \"https://github.com/octocat/Hello-World/pull/1347.patch\",\r\n          \"issue_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\r\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits\",\r\n          \"review_comments_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments\",\r\n          \"review_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\",\r\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"number\": 1347,\r\n          \"state\": \"open\",\r\n          \"locked\": true,\r\n          \"title\": \"Amazing new feature\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"Please pull these awesome changes in!\",\r\n          \"labels\": [\r\n            {\r\n              \"id\": 208045946,\r\n              \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\r\n              \"name\": \"bug\",\r\n              \"description\": \"Something isn't working\",\r\n              \"color\": \"f29513\",\r\n              \"default\": true\r\n            }\r\n          ],\r\n          \"milestone\": {\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\r\n            \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\r\n            \"id\": 1002604,\r\n            \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\r\n            \"number\": 1,\r\n            \"state\": \"open\",\r\n            \"title\": \"v1.0\",\r\n            \"description\": \"Tracking milestone for version 1.0\",\r\n            \"creator\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"open_issues\": 4,\r\n            \"closed_issues\": 8,\r\n            \"created_at\": \"2011-04-10T20:09:31Z\",\r\n            \"updated_at\": \"2014-03-03T18:58:10Z\",\r\n            \"closed_at\": \"2013-02-12T13:22:01Z\",\r\n            \"due_on\": \"2012-10-09T23:39:01Z\"\r\n          },\r\n          \"active_lock_reason\": \"too heated\",\r\n          \"created_at\": \"2011-01-26T19:01:12Z\",\r\n          \"updated_at\": \"2011-01-26T19:01:12Z\",\r\n          \"closed_at\": \"2011-01-26T19:01:12Z\",\r\n          \"merged_at\": \"2011-01-26T19:01:12Z\",\r\n          \"merge_commit_sha\": \"e5bd3914e2e596debea16f433f57875b5b90bcd6\",\r\n          \"assignee\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"assignees\": [\r\n            {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            {\r\n              \"login\": \"hubot\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/hubot\",\r\n              \"html_url\": \"https://github.com/hubot\",\r\n              \"followers_url\": \"https://api.github.com/users/hubot/followers\",\r\n              \"following_url\": \"https://api.github.com/users/hubot/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/hubot/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/hubot/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/hubot/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/hubot/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/hubot/repos\",\r\n              \"events_url\": \"https://api.github.com/users/hubot/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/hubot/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": true\r\n            }\r\n          ],\r\n          \"requested_reviewers\": [\r\n            {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            {\r\n              \"login\": \"hubot\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/hubot\",\r\n              \"html_url\": \"https://github.com/hubot\",\r\n              \"followers_url\": \"https://api.github.com/users/hubot/followers\",\r\n              \"following_url\": \"https://api.github.com/users/hubot/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/hubot/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/hubot/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/hubot/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/hubot/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/hubot/repos\",\r\n              \"events_url\": \"https://api.github.com/users/hubot/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/hubot/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": true\r\n            },\r\n            {\r\n              \"login\": \"other_user\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/other_user_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/other_user\",\r\n              \"html_url\": \"https://github.com/other_user\",\r\n              \"followers_url\": \"https://api.github.com/users/other_user/followers\",\r\n              \"following_url\": \"https://api.github.com/users/other_user/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/other_user/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/other_user/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/other_user/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/other_user/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/other_user/repos\",\r\n              \"events_url\": \"https://api.github.com/users/other_user/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/other_user/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            }\r\n          ],\r\n          \"requested_teams\": [\r\n            {\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VGVhbTE=\",\r\n              \"url\": \"https://api.github.com/teams/1\",\r\n              \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\r\n              \"name\": \"Justice League\",\r\n              \"slug\": \"justice-league\",\r\n              \"description\": \"A great team.\",\r\n              \"privacy\": \"closed\",\r\n              \"permission\": \"admin\",\r\n              \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\r\n              \"repositories_url\": \"https://api.github.com/teams/1/repos\",\r\n              \"parent\": null\r\n            }\r\n          ],\r\n          \"head\": {\r\n            \"label\": \"octocat:new-topic\",\r\n            \"ref\": \"new-topic\",\r\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"user\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"repo\": {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"template_repository\": null,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://github.com/licenses/mit\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          },\r\n          \"base\": {\r\n            \"label\": \"octocat:master\",\r\n            \"ref\": \"master\",\r\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n            \"user\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"repo\": {\r\n              \"id\": 1296269,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n              \"name\": \"Hello-World\",\r\n              \"full_name\": \"octocat/Hello-World\",\r\n              \"owner\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n              \"description\": \"This your first repo!\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"language\": null,\r\n              \"forks_count\": 9,\r\n              \"stargazers_count\": 80,\r\n              \"watchers_count\": 80,\r\n              \"size\": 108,\r\n              \"default_branch\": \"master\",\r\n              \"open_issues_count\": 0,\r\n              \"is_template\": true,\r\n              \"topics\": [\r\n                \"octocat\",\r\n                \"atom\",\r\n                \"electron\",\r\n                \"api\"\r\n              ],\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_wiki\": true,\r\n              \"has_pages\": false,\r\n              \"has_downloads\": true,\r\n              \"archived\": false,\r\n              \"disabled\": false,\r\n              \"visibility\": \"public\",\r\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n              \"created_at\": \"2011-01-26T19:01:12Z\",\r\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n              \"permissions\": {\r\n                \"admin\": false,\r\n                \"push\": false,\r\n                \"pull\": true\r\n              },\r\n              \"allow_rebase_merge\": true,\r\n              \"template_repository\": null,\r\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n              \"allow_squash_merge\": true,\r\n              \"allow_auto_merge\": false,\r\n              \"delete_branch_on_merge\": true,\r\n              \"allow_merge_commit\": true,\r\n              \"subscribers_count\": 42,\r\n              \"network_count\": 0,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://api.github.com/licenses/mit\"\r\n              },\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1\r\n            }\r\n          },\r\n          \"_links\": {\r\n            \"self\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\"\r\n            },\r\n            \"html\": {\r\n              \"href\": \"https://github.com/octocat/Hello-World/pull/1347\"\r\n            },\r\n            \"issue\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\"\r\n            },\r\n            \"comments\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\"\r\n            },\r\n            \"review_comments\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments\"\r\n            },\r\n            \"review_comment\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}\"\r\n            },\r\n            \"commits\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits\"\r\n            },\r\n            \"statuses\": {\r\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\"\r\n            }\r\n          },\r\n          \"author_association\": \"OWNER\",\r\n          \"auto_merge\": null,\r\n          \"draft\": false\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestSimple

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPullRequestState_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"open\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPullsMergeConflict_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"message\": \"Head branch was modified. Review and try the merge again.\"\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullsMergeConflict

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPullsMergeMethodNotAllowed_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"message\": \"Pull Request is not mergeable\"\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullsMergeMethodNotAllowed

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestPullsUpdateBranchAccepted_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                  \"message\": \"Updating pull request branch.\",\r\n                  \"url\": \"https://github.com/repos/octocat/Hello-World/pulls/53\"\r\n                }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullsUpdateBranchAccepted

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestRateLimitOverview_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"resources\": {\r\n            \"core\": {\r\n              \"limit\": 5000,\r\n              \"remaining\": 4999,\r\n              \"reset\": 1372700873,\r\n              \"used\": 1\r\n            },\r\n            \"search\": {\r\n              \"limit\": 30,\r\n              \"remaining\": 18,\r\n              \"reset\": 1372697452,\r\n              \"used\": 12\r\n            },\r\n            \"graphql\": {\r\n              \"limit\": 5000,\r\n              \"remaining\": 4993,\r\n              \"reset\": 1372700389,\r\n              \"used\": 7\r\n            },\r\n            \"integration_manifest\": {\r\n              \"limit\": 5000,\r\n              \"remaining\": 4999,\r\n              \"reset\": 1551806725,\r\n              \"used\": 1\r\n            },\r\n            \"code_scanning_upload\": {\r\n              \"limit\": 500,\r\n              \"remaining\": 499,\r\n              \"reset\": 1551806725,\r\n              \"used\": 1\r\n            }\r\n          },\r\n          \"rate\": {\r\n            \"limit\": 5000,\r\n            \"remaining\": 4999,\r\n            \"reset\": 1372700873,\r\n            \"used\": 1\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RateLimitOverview

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReaction_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"node_id\": \"MDg6UmVhY3Rpb24x\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"content\": \"heart\",\r\n          \"created_at\": \"2016-05-20T20:09:31Z\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Reaction

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReactionContent_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"heart\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReactionContent

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestRelease_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/releases/1\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/releases/v1.0.0\",\r\n          \"assets_url\": \"https://api.github.com/repos/octocat/Hello-World/releases/1/assets\",\r\n          \"upload_url\": \"https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}\",\r\n          \"tarball_url\": \"https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0\",\r\n          \"zipball_url\": \"https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0\",\r\n          \"discussion_url\": \"https://github.com/octocat/Hello-World/discussions/90\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDc6UmVsZWFzZTE=\",\r\n          \"tag_name\": \"v1.0.0\",\r\n          \"target_commitish\": \"master\",\r\n          \"name\": \"v1.0.0\",\r\n          \"body\": \"Description of the release\",\r\n          \"draft\": false,\r\n          \"prerelease\": false,\r\n          \"created_at\": \"2013-02-27T19:35:32Z\",\r\n          \"published_at\": \"2013-02-27T19:35:32Z\",\r\n          \"author\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"assets\": [\r\n            {\r\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/releases/assets/1\",\r\n              \"browser_download_url\": \"https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDEyOlJlbGVhc2VBc3NldDE=\",\r\n              \"name\": \"example.zip\",\r\n              \"label\": \"short description\",\r\n              \"state\": \"uploaded\",\r\n              \"content_type\": \"application/zip\",\r\n              \"size\": 1024,\r\n              \"download_count\": 42,\r\n              \"created_at\": \"2013-02-27T19:35:32Z\",\r\n              \"updated_at\": \"2013-02-27T19:35:32Z\",\r\n              \"uploader\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 1,\r\n                \"node_id\": \"MDQ6VXNlcjE=\",\r\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              }\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Release

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReleaseAsset_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/releases/assets/1\",\r\n          \"browser_download_url\": \"https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDEyOlJlbGVhc2VBc3NldDE=\",\r\n          \"name\": \"example.zip\",\r\n          \"label\": \"short description\",\r\n          \"state\": \"uploaded\",\r\n          \"content_type\": \"application/zip\",\r\n          \"size\": 1024,\r\n          \"download_count\": 42,\r\n          \"created_at\": \"2013-02-27T19:35:32Z\",\r\n          \"updated_at\": \"2013-02-27T19:35:32Z\",\r\n          \"uploader\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReleaseAsset

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposAddAppAccessRestrictionsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"apps\": [\r\n                        \"my-app\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposAddAppAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposAddStatusCheckContextsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"contexts\": [\r\n                        \"contexts\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposAddStatusCheckContextsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposAddTeamAccessRestrictionsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"teams\": [\r\n                        \"my-team\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposAddTeamAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposAddUserAccessRestrictionsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"users\": [\r\n                        \"mona\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposAddUserAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposCreateDeploymentAccepted_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"message\": \"Auto-merged master into topic-branch on deployment.\"\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposCreateDeploymentAccepted

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposDeleteForbidden_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                  \"message\": \"Organization members cannot delete repositories.\",\r\n                  \"documentation_url\": \"https://docs.github.com/rest/reference/repos#delete-a-repository\"\r\n                }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposDeleteForbidden

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposRemoveAppAccessRestrictionsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"apps\": [\r\n                        \"my-app\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposRemoveAppAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposRemoveStatusCheckContextsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"contexts\": [\r\n                        \"contexts\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposRemoveStatusCheckContextsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposRemoveTeamAccessRestrictionsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"teams\": [\r\n                        \"my-team\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposRemoveTeamAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposRemoveUserAccessRestrictionsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"users\": [\r\n                        \"mona\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposRemoveUserAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposSetAppAccessRestrictionsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"apps\": [\r\n                        \"my-app\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposSetAppAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposSetStatusCheckContextsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"contexts\": [\r\n                        \"contexts\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposSetStatusCheckContextsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposSetTeamAccessRestrictionsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"teams\": [\r\n                        \"my-team\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposSetTeamAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposSetUserAccessRestrictionsReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"users\": [\r\n                        \"mona\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposSetUserAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestReposUpdateWebhookConfigForRepoReq_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                  \"content_type\": \"json\",\r\n                  \"insecure_ssl\": \"0\",\r\n                  \"secret\": \"********\",\r\n                  \"url\": \"https://example.com/webhook\"\r\n                }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposUpdateWebhookConfigForRepoReq

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestRepository_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1296269,\r\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n          \"name\": \"Hello-World\",\r\n          \"full_name\": \"octocat/Hello-World\",\r\n          \"owner\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"private\": false,\r\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n          \"description\": \"This your first repo!\",\r\n          \"fork\": false,\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n          \"homepage\": \"https://github.com\",\r\n          \"organization\": null,\r\n          \"language\": null,\r\n          \"forks\": 9,\r\n          \"forks_count\": 9,\r\n          \"stargazers_count\": 80,\r\n          \"watchers_count\": 80,\r\n          \"watchers\": 80,\r\n          \"size\": 108,\r\n          \"default_branch\": \"master\",\r\n          \"open_issues\": 0,\r\n          \"open_issues_count\": 0,\r\n          \"is_template\": true,\r\n          \"license\": {\r\n            \"key\": \"mit\",\r\n            \"name\": \"MIT License\",\r\n            \"url\": \"https://api.github.com/licenses/mit\",\r\n            \"spdx_id\": \"MIT\",\r\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n            \"html_url\": \"https://api.github.com/licenses/mit\"\r\n          },\r\n          \"topics\": [\r\n            \"octocat\",\r\n            \"atom\",\r\n            \"electron\",\r\n            \"api\"\r\n          ],\r\n          \"has_issues\": true,\r\n          \"has_projects\": true,\r\n          \"has_wiki\": true,\r\n          \"has_pages\": false,\r\n          \"has_downloads\": true,\r\n          \"archived\": false,\r\n          \"disabled\": false,\r\n          \"visibility\": \"public\",\r\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n          \"created_at\": \"2011-01-26T19:01:12Z\",\r\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n          \"permissions\": {\r\n            \"admin\": false,\r\n            \"push\": false,\r\n            \"pull\": true\r\n          },\r\n          \"allow_rebase_merge\": true,\r\n          \"template_repository\": null,\r\n          \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n          \"allow_squash_merge\": true,\r\n          \"allow_auto_merge\": false,\r\n          \"delete_branch_on_merge\": true,\r\n          \"allow_merge_commit\": true,\r\n          \"subscribers_count\": 42,\r\n          \"network_count\": 0\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 1296269,\r\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n          \"name\": \"Hello-World\",\r\n          \"full_name\": \"octocat/Hello-World\",\r\n          \"owner\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"private\": false,\r\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n          \"description\": \"This your first repo!\",\r\n          \"fork\": false,\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n          \"homepage\": \"https://github.com\",\r\n          \"language\": null,\r\n          \"forks_count\": 9,\r\n          \"forks\": 9,\r\n          \"stargazers_count\": 80,\r\n          \"watchers_count\": 80,\r\n          \"watchers\": 80,\r\n          \"size\": 108,\r\n          \"default_branch\": \"master\",\r\n          \"open_issues_count\": 0,\r\n          \"open_issues\": 0,\r\n          \"is_template\": false,\r\n          \"topics\": [\r\n            \"octocat\",\r\n            \"atom\",\r\n            \"electron\",\r\n            \"api\"\r\n          ],\r\n          \"has_issues\": true,\r\n          \"has_projects\": true,\r\n          \"has_wiki\": true,\r\n          \"has_pages\": false,\r\n          \"has_downloads\": true,\r\n          \"archived\": false,\r\n          \"disabled\": false,\r\n          \"visibility\": \"public\",\r\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n          \"created_at\": \"2011-01-26T19:01:12Z\",\r\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n          \"permissions\": {\r\n            \"admin\": false,\r\n            \"push\": false,\r\n            \"pull\": true\r\n          },\r\n          \"allow_rebase_merge\": true,\r\n          \"allow_auto_merge\": false,\r\n          \"license\": {\r\n            \"key\": \"mit\",\r\n            \"name\": \"MIT License\",\r\n            \"url\": \"https://api.github.com/licenses/mit\",\r\n            \"spdx_id\": \"MIT\",\r\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n            \"html_url\": \"https://github.com/licenses/mit\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Repository

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestRepositoryCollaboratorPermission_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"permission\": \"admin\",\r\n          \"user\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RepositoryCollaboratorPermission

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestRepositoryInvitation_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n          \"repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\r\n          },\r\n          \"invitee\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"inviter\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"permissions\": \"write\",\r\n          \"created_at\": \"2016-06-13T14:52:50-05:00\",\r\n          \"expired\": false,\r\n          \"url\": \"https://api.github.com/user/repository_invitations/1296269\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/invitations\"\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n          \"repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\r\n          },\r\n          \"invitee\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"inviter\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"permissions\": \"write\",\r\n          \"created_at\": \"2016-06-13T14:52:50-05:00\",\r\n          \"url\": \"https://api.github.com/user/repository_invitations/1296269\",\r\n          \"html_url\": \"https://github.com/octocat/Hello-World/invitations\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RepositoryInvitation

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestRepositoryInvitationPermissions_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"read\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RepositoryInvitationPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestRepositorySubscription_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"subscribed\": true,\r\n          \"ignored\": false,\r\n          \"reason\": null,\r\n          \"created_at\": \"2012-10-06T21:34:12Z\",\r\n          \"url\": \"https://api.github.com/repos/octocat/example/subscription\",\r\n          \"repository_url\": \"https://api.github.com/repos/octocat/example\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RepositorySubscription

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestRunner_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 23,\r\n          \"name\": \"MBP\",\r\n          \"os\": \"macos\",\r\n          \"status\": \"online\",\r\n          \"busy\": true,\r\n          \"labels\": [\r\n            {\r\n              \"id\": 5,\r\n              \"name\": \"self-hosted\",\r\n              \"type\": \"read-only\"\r\n            },\r\n            {\r\n              \"id\": 7,\r\n              \"name\": \"X64\",\r\n              \"type\": \"read-only\"\r\n            },\r\n            {\r\n              \"id\": 20,\r\n              \"name\": \"macOS\",\r\n              \"type\": \"read-only\"\r\n            },\r\n            {\r\n              \"id\": 21,\r\n              \"name\": \"no-gpu\",\r\n              \"type\": \"custom\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Runner

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestRunnerGroupsEnterprise_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 2,\r\n          \"name\": \"octo-runner-group\",\r\n          \"visibility\": \"selected\",\r\n          \"default\": false,\r\n          \"selected_organizations_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/organizations\",\r\n          \"runners_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/runners\",\r\n          \"allows_public_repositories\": false\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 2,\r\n          \"name\": \"Expensive hardware runners\",\r\n          \"visibility\": \"selected\",\r\n          \"default\": false,\r\n          \"selected_organizations_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/organizations\",\r\n          \"runners_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/runners\",\r\n          \"allows_public_repositories\": true\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RunnerGroupsEnterprise

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestRunnerGroupsOrg_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 2,\r\n          \"name\": \"octo-runner-group\",\r\n          \"visibility\": \"selected\",\r\n          \"default\": false,\r\n          \"selected_repositories_url\": \"https://api.github.com/orgs/octo-org/actions/runner-groups/2/repositories\",\r\n          \"runners_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners\",\r\n          \"inherited\": false,\r\n          \"allows_public_repositories\": true\r\n        }",
		},
		{
			Input: "{\r\n          \"id\": 2,\r\n          \"name\": \"octo-runner-group\",\r\n          \"visibility\": \"selected\",\r\n          \"default\": false,\r\n          \"selected_repositories_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/2/repositories\",\r\n          \"runners_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners\",\r\n          \"inherited\": false,\r\n          \"allows_public_repositories\": true\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RunnerGroupsOrg

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestScimEnterpriseGroup_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"schemas\": [\r\n            \"urn:ietf:params:scim:schemas:core:2.0:Group\"\r\n          ],\r\n          \"id\": \"abcd27f8-a9aa-11ea-8221-f59b2be9cccc\",\r\n          \"externalId\": null,\r\n          \"displayName\": \"octo-org\",\r\n          \"members\": [\r\n            {\r\n              \"value\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n              \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n              \"display\": \"octocat@github.com\"\r\n            },\r\n            {\r\n              \"value\": \"aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5\",\r\n              \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5\",\r\n              \"display\": \"hubot@example.com\"\r\n            }\r\n          ],\r\n          \"meta\": {\r\n            \"resourceType\": \"Group\",\r\n            \"created\": \"2020-06-09T03:10:17.000+10:0\",\r\n            \"lastModified\": \"2020-06-09T03:10:17.000+10:00\",\r\n            \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Groups/abcd27f8-a9aa-11ea-8221-f59b2be9cccc\"\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"schemas\": [\r\n            \"urn:ietf:params:scim:schemas:core:2.0:Group\"\r\n          ],\r\n          \"id\": \"abcd27f8-a9aa-11ea-8221-f59b2be9cccc\",\r\n          \"externalId\": null,\r\n          \"displayName\": \"octo-org\",\r\n          \"members\": [\r\n            {\r\n              \"value\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n              \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n              \"display\": \"octocat@github.com\"\r\n            }\r\n          ],\r\n          \"meta\": {\r\n            \"resourceType\": \"Group\",\r\n            \"created\": \"2020-06-09T03:10:17.000+10:00\",\r\n            \"lastModified\": \"2020-06-09T03:10:17.000+10:00\",\r\n            \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Groups/abcd27f8-a9aa-11ea-8221-f59b2be9cccc\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ScimEnterpriseGroup

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestScimEnterpriseUser_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"schemas\": [\r\n            \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n          ],\r\n          \"id\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n          \"externalId\": \"00dowz5dr9oSfDFRA0h7\",\r\n          \"userName\": \"mona.octocat@okta.example.com\",\r\n          \"name\": {\r\n            \"givenName\": \"Mona\",\r\n            \"familyName\": \"Octocat\"\r\n          },\r\n          \"emails\": [\r\n            {\r\n              \"value\": \"mona.octocat@okta.example.com\",\r\n              \"type\": \"work\",\r\n              \"primary\": true\r\n            }\r\n          ],\r\n          \"groups\": [\r\n            {\r\n              \"value\": \"468dd3fa-a1d6-11ea-9031-15a1f0d7811d\"\r\n            }\r\n          ],\r\n          \"active\": true,\r\n          \"meta\": {\r\n            \"resourceType\": \"User\",\r\n            \"created\": \"2017-03-09T16:11:13-05:00\",\r\n            \"lastModified\": \"2017-03-09T16:11:13-05:00\",\r\n            \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\"\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"schemas\": [\r\n            \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n          ],\r\n          \"id\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n          \"externalId\": \"00dowz5dr9oSfDFRA0h7\",\r\n          \"userName\": \"mona.octocat@okta.example.com\",\r\n          \"name\": {\r\n            \"givenName\": \"Monalisa\",\r\n            \"familyName\": \"Octocat\"\r\n          },\r\n          \"emails\": [\r\n            {\r\n              \"value\": \"mona.octocat@okta.example.com\",\r\n              \"type\": \"work\",\r\n              \"primary\": true\r\n            },\r\n            {\r\n              \"value\": \"monalisa@octocat.github.com\",\r\n              \"type\": \"home\"\r\n            }\r\n          ],\r\n          \"groups\": [\r\n            {\r\n              \"value\": \"468dd3fa-a1d6-11ea-9031-15a1f0d7811d\"\r\n            }\r\n          ],\r\n          \"active\": true,\r\n          \"meta\": {\r\n            \"resourceType\": \"User\",\r\n            \"created\": \"2017-03-09T16:11:13-05:00\",\r\n            \"lastModified\": \"2017-03-09T16:11:13-05:00\",\r\n            \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ScimEnterpriseUser

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestScimGroupListEnterprise_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"schemas\": [\r\n            \"urn:ietf:params:scim:api:messages:2.0:ListResponse\"\r\n          ],\r\n          \"totalResults\": 2,\r\n          \"itemsPerPage\": 2,\r\n          \"startIndex\": 1,\r\n          \"Resources\": [\r\n            {\r\n              \"schemas\": [\r\n                \"urn:ietf:params:scim:schemas:core:2.0:Group\"\r\n              ],\r\n              \"id\": \"abcd27f8-a9aa-11ea-8221-f59b2be9cccc\",\r\n              \"externalId\": null,\r\n              \"displayName\": \"octo-org\",\r\n              \"members\": [\r\n                {\r\n                  \"value\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n                  \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n                  \"display\": \"octocat@github.com\"\r\n                },\r\n                {\r\n                  \"value\": \"aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5\",\r\n                  \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5\",\r\n                  \"display\": \"hubot@example.com\"\r\n                }\r\n              ],\r\n              \"meta\": {\r\n                \"resourceType\": \"Group\",\r\n                \"created\": \"2020-06-09T03:10:17.000+10:00\",\r\n                \"lastModified\": \"2020-06-09T03:10:17.000+10:00\",\r\n                \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Groups/abcd27f8-a9aa-11ea-8221-f59b2be9cccc\"\r\n              }\r\n            },\r\n            {\r\n              \"schemas\": [\r\n                \"urn:ietf:params:scim:schemas:core:2.0:Group\"\r\n              ],\r\n              \"id\": \"5e75bbbb-aa1a-11ea-8644-75ff655cdddd\",\r\n              \"externalId\": null,\r\n              \"displayName\": \"octo-docs-org\",\r\n              \"members\": [\r\n                {\r\n                  \"value\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n                  \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n                  \"display\": \"octocat@github.com\"\r\n                }\r\n              ],\r\n              \"meta\": {\r\n                \"resourceType\": \"Group\",\r\n                \"created\": \"2020-06-09T16:28:01.000+10:00\",\r\n                \"lastModified\": \"2020-06-09T16:28:01.000+10:00\",\r\n                \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Groups/5e75bbbb-aa1a-11ea-8644-75ff655cdddd\"\r\n              }\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ScimGroupListEnterprise

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestScimProvisionAndInviteUserReqName_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"givenName\": \"Jane\",\r\n                      \"familyName\": \"User\"\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ScimProvisionAndInviteUserReqName

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestScimSetInformationForProvisionedUserReqName_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"givenName\": \"Jane\",\r\n                      \"familyName\": \"User\"\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ScimSetInformationForProvisionedUserReqName

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestScimUserListEnterprise_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"schemas\": [\r\n            \"urn:ietf:params:scim:api:messages:2.0:ListResponse\"\r\n          ],\r\n          \"totalResults\": 2,\r\n          \"itemsPerPage\": 2,\r\n          \"startIndex\": 1,\r\n          \"Resources\": [\r\n            {\r\n              \"schemas\": [\r\n                \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n              ],\r\n              \"id\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\r\n              \"externalId\": \"00dowz5dr9oSfDFRA0h7\",\r\n              \"userName\": \"octocat@github.com\",\r\n              \"name\": {\r\n                \"givenName\": \"Mona\",\r\n                \"familyName\": \"Octocat\"\r\n              },\r\n              \"emails\": [\r\n                {\r\n                  \"value\": \"octocat@github.com\",\r\n                  \"primary\": true,\r\n                  \"type\": \"work\"\r\n                }\r\n              ],\r\n              \"groups\": [\r\n                {\r\n                  \"value\": \"468dd3fa-a1d6-11ea-9031-15a1f0d7811d\"\r\n                }\r\n              ],\r\n              \"active\": true,\r\n              \"meta\": {\r\n                \"resourceType\": \"User\",\r\n                \"created\": \"2020-05-30T04:02:34.000+10:00\",\r\n                \"lastModified\": \"2020-05-30T04:05:04.000+10:00\",\r\n                \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\"\r\n              }\r\n            },\r\n            {\r\n              \"schemas\": [\r\n                \"urn:ietf:params:scim:schemas:core:2.0:User\"\r\n              ],\r\n              \"id\": \"e18b8c34-a6b2-11ea-9d70-54abbd1c8fd5\",\r\n              \"externalId\": \"sdfoiausdofiua\",\r\n              \"userName\": \"hubot@example.com\",\r\n              \"name\": {\r\n                \"givenName\": \"hu\",\r\n                \"familyName\": \"bot\"\r\n              },\r\n              \"emails\": [\r\n                {\r\n                  \"value\": \"hubot@example.com\",\r\n                  \"type\": \"work\",\r\n                  \"primary\": true\r\n                }\r\n              ],\r\n              \"groups\": [\r\n\r\n              ],\r\n              \"active\": true,\r\n              \"meta\": {\r\n                \"resourceType\": \"User\",\r\n                \"created\": \"2020-06-05T08:29:40.000+10:00\",\r\n                \"lastModified\": \"2020-06-05T08:30:19.000+10:00\",\r\n                \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/e18b8c34-a6b2-11ea-9d70-54abbd1c8fd5\"\r\n              }\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ScimUserListEnterprise

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestSearchCodeOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 7,\r\n          \"incomplete_results\": false,\r\n          \"items\": [\r\n            {\r\n              \"name\": \"classes.js\",\r\n              \"path\": \"src/attributes/classes.js\",\r\n              \"sha\": \"d7212f9dee2dcc18f084d7df8f417b80846ded5a\",\r\n              \"url\": \"https://api.github.com/repositories/167174/contents/src/attributes/classes.js?ref=825ac3773694e0cd23ee74895fd5aeb535b27da4\",\r\n              \"git_url\": \"https://api.github.com/repositories/167174/git/blobs/d7212f9dee2dcc18f084d7df8f417b80846ded5a\",\r\n              \"html_url\": \"https://github.com/jquery/jquery/blob/825ac3773694e0cd23ee74895fd5aeb535b27da4/src/attributes/classes.js\",\r\n              \"repository\": {\r\n                \"id\": 167174,\r\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkxNjcxNzQ=\",\r\n                \"name\": \"jquery\",\r\n                \"full_name\": \"jquery/jquery\",\r\n                \"owner\": {\r\n                  \"login\": \"jquery\",\r\n                  \"id\": 70142,\r\n                  \"node_id\": \"MDQ6VXNlcjcwMTQy\",\r\n                  \"avatar_url\": \"https://0.gravatar.com/avatar/6906f317a4733f4379b06c32229ef02f?d=https%3A%2F%2Fidenticons.github.com%2Ff426f04f2f9813718fb806b30e0093de.png\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"url\": \"https://api.github.com/users/jquery\",\r\n                  \"html_url\": \"https://github.com/jquery\",\r\n                  \"followers_url\": \"https://api.github.com/users/jquery/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/jquery/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/jquery/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/jquery/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/jquery/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/jquery/orgs\",\r\n                  \"repos_url\": \"https://api.github.com/users/jquery/repos\",\r\n                  \"events_url\": \"https://api.github.com/users/jquery/events{/privacy}\",\r\n                  \"received_events_url\": \"https://api.github.com/users/jquery/received_events\",\r\n                  \"type\": \"Organization\",\r\n                  \"site_admin\": false\r\n                },\r\n                \"private\": false,\r\n                \"html_url\": \"https://github.com/jquery/jquery\",\r\n                \"description\": \"jQuery JavaScript Library\",\r\n                \"fork\": false,\r\n                \"url\": \"https://api.github.com/repos/jquery/jquery\",\r\n                \"forks_url\": \"https://api.github.com/repos/jquery/jquery/forks\",\r\n                \"keys_url\": \"https://api.github.com/repos/jquery/jquery/keys{/key_id}\",\r\n                \"collaborators_url\": \"https://api.github.com/repos/jquery/jquery/collaborators{/collaborator}\",\r\n                \"teams_url\": \"https://api.github.com/repos/jquery/jquery/teams\",\r\n                \"hooks_url\": \"https://api.github.com/repos/jquery/jquery/hooks\",\r\n                \"issue_events_url\": \"https://api.github.com/repos/jquery/jquery/issues/events{/number}\",\r\n                \"events_url\": \"https://api.github.com/repos/jquery/jquery/events\",\r\n                \"assignees_url\": \"https://api.github.com/repos/jquery/jquery/assignees{/user}\",\r\n                \"branches_url\": \"https://api.github.com/repos/jquery/jquery/branches{/branch}\",\r\n                \"tags_url\": \"https://api.github.com/repos/jquery/jquery/tags\",\r\n                \"blobs_url\": \"https://api.github.com/repos/jquery/jquery/git/blobs{/sha}\",\r\n                \"git_tags_url\": \"https://api.github.com/repos/jquery/jquery/git/tags{/sha}\",\r\n                \"git_refs_url\": \"https://api.github.com/repos/jquery/jquery/git/refs{/sha}\",\r\n                \"trees_url\": \"https://api.github.com/repos/jquery/jquery/git/trees{/sha}\",\r\n                \"statuses_url\": \"https://api.github.com/repos/jquery/jquery/statuses/{sha}\",\r\n                \"languages_url\": \"https://api.github.com/repos/jquery/jquery/languages\",\r\n                \"stargazers_url\": \"https://api.github.com/repos/jquery/jquery/stargazers\",\r\n                \"contributors_url\": \"https://api.github.com/repos/jquery/jquery/contributors\",\r\n                \"subscribers_url\": \"https://api.github.com/repos/jquery/jquery/subscribers\",\r\n                \"subscription_url\": \"https://api.github.com/repos/jquery/jquery/subscription\",\r\n                \"commits_url\": \"https://api.github.com/repos/jquery/jquery/commits{/sha}\",\r\n                \"git_commits_url\": \"https://api.github.com/repos/jquery/jquery/git/commits{/sha}\",\r\n                \"comments_url\": \"https://api.github.com/repos/jquery/jquery/comments{/number}\",\r\n                \"issue_comment_url\": \"https://api.github.com/repos/jquery/jquery/issues/comments/{number}\",\r\n                \"contents_url\": \"https://api.github.com/repos/jquery/jquery/contents/{+path}\",\r\n                \"compare_url\": \"https://api.github.com/repos/jquery/jquery/compare/{base}...{head}\",\r\n                \"merges_url\": \"https://api.github.com/repos/jquery/jquery/merges\",\r\n                \"archive_url\": \"https://api.github.com/repos/jquery/jquery/{archive_format}{/ref}\",\r\n                \"downloads_url\": \"https://api.github.com/repos/jquery/jquery/downloads\",\r\n                \"issues_url\": \"https://api.github.com/repos/jquery/jquery/issues{/number}\",\r\n                \"pulls_url\": \"https://api.github.com/repos/jquery/jquery/pulls{/number}\",\r\n                \"milestones_url\": \"https://api.github.com/repos/jquery/jquery/milestones{/number}\",\r\n                \"notifications_url\": \"https://api.github.com/repos/jquery/jquery/notifications{?since,all,participating}\",\r\n                \"labels_url\": \"https://api.github.com/repos/jquery/jquery/labels{/name}\",\r\n                \"deployments_url\": \"http://api.github.com/repos/octocat/Hello-World/deployments\",\r\n                \"releases_url\": \"http://api.github.com/repos/octocat/Hello-World/releases{/id}\"\r\n              },\r\n              \"score\": 1\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchCodeOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestSearchCommitsOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 1,\r\n          \"incomplete_results\": false,\r\n          \"items\": [\r\n            {\r\n              \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\r\n              \"sha\": \"bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\r\n              \"html_url\": \"https://github.com/octocat/Spoon-Knife/commit/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\r\n              \"comments_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f/comments\",\r\n              \"commit\": {\r\n                \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\r\n                \"author\": {\r\n                  \"date\": \"2014-02-04T14:38:36-08:00\",\r\n                  \"name\": \"The Octocat\",\r\n                  \"email\": \"octocat@nowhere.com\"\r\n                },\r\n                \"committer\": {\r\n                  \"date\": \"2014-02-12T15:18:55-08:00\",\r\n                  \"name\": \"The Octocat\",\r\n                  \"email\": \"octocat@nowhere.com\"\r\n                },\r\n                \"message\": \"Create styles.css and updated README\",\r\n                \"tree\": {\r\n                  \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/trees/a639e96f9038797fba6e0469f94a4b0cc459fa68\",\r\n                  \"sha\": \"a639e96f9038797fba6e0469f94a4b0cc459fa68\"\r\n                },\r\n                \"comment_count\": 8\r\n              },\r\n              \"author\": {\r\n                \"login\": \"octocat\",\r\n                \"id\": 583231,\r\n                \"node_id\": \"MDQ6VXNlcjU4MzIzMQ==\",\r\n                \"avatar_url\": \"https://avatars.githubusercontent.com/u/583231?v=3\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/octocat\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": false\r\n              },\r\n              \"committer\": {\r\n              },\r\n              \"parents\": [\r\n                {\r\n                  \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits/a30c19e3f13765a3b48829788bc1cb8b4e95cee4\",\r\n                  \"html_url\": \"https://github.com/octocat/Spoon-Knife/commit/a30c19e3f13765a3b48829788bc1cb8b4e95cee4\",\r\n                  \"sha\": \"a30c19e3f13765a3b48829788bc1cb8b4e95cee4\"\r\n                }\r\n              ],\r\n              \"repository\": {\r\n                \"id\": 1300192,\r\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMzAwMTky\",\r\n                \"name\": \"Spoon-Knife\",\r\n                \"full_name\": \"octocat/Spoon-Knife\",\r\n                \"owner\": {\r\n                  \"login\": \"octocat\",\r\n                  \"id\": 583231,\r\n                  \"node_id\": \"MDQ6VXNlcjU4MzIzMQ==\",\r\n                  \"avatar_url\": \"https://avatars.githubusercontent.com/u/583231?v=3\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"url\": \"https://api.github.com/users/octocat\",\r\n                  \"html_url\": \"https://github.com/octocat\",\r\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                  \"type\": \"User\",\r\n                  \"site_admin\": false\r\n                },\r\n                \"private\": false,\r\n                \"html_url\": \"https://github.com/octocat/Spoon-Knife\",\r\n                \"description\": \"This repo is for demonstration purposes only.\",\r\n                \"fork\": false,\r\n                \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife\",\r\n                \"forks_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/forks\",\r\n                \"keys_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/keys{/key_id}\",\r\n                \"collaborators_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/collaborators{/collaborator}\",\r\n                \"teams_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/teams\",\r\n                \"hooks_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/hooks\",\r\n                \"issue_events_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/issues/events{/number}\",\r\n                \"events_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/events\",\r\n                \"assignees_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/assignees{/user}\",\r\n                \"branches_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/branches{/branch}\",\r\n                \"tags_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/tags\",\r\n                \"blobs_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/blobs{/sha}\",\r\n                \"git_tags_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/tags{/sha}\",\r\n                \"git_refs_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/refs{/sha}\",\r\n                \"trees_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/trees{/sha}\",\r\n                \"statuses_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/statuses/{sha}\",\r\n                \"languages_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/languages\",\r\n                \"stargazers_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/stargazers\",\r\n                \"contributors_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/contributors\",\r\n                \"subscribers_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/subscribers\",\r\n                \"subscription_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/subscription\",\r\n                \"commits_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits{/sha}\",\r\n                \"git_commits_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/commits{/sha}\",\r\n                \"comments_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/comments{/number}\",\r\n                \"issue_comment_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/issues/comments{/number}\",\r\n                \"contents_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/contents/{+path}\",\r\n                \"compare_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/compare/{base}...{head}\",\r\n                \"merges_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/merges\",\r\n                \"archive_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/{archive_format}{/ref}\",\r\n                \"downloads_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/downloads\",\r\n                \"issues_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/issues{/number}\",\r\n                \"pulls_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/pulls{/number}\",\r\n                \"milestones_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/milestones{/number}\",\r\n                \"notifications_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/notifications{?since,all,participating}\",\r\n                \"labels_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/labels{/name}\",\r\n                \"releases_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/releases{/id}\",\r\n                \"deployments_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/deployments\"\r\n              },\r\n              \"score\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjU4MzIzMQ==\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchCommitsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestSearchIssuesAndPullRequestsOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 280,\r\n          \"incomplete_results\": false,\r\n          \"items\": [\r\n            {\r\n              \"url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132\",\r\n              \"repository_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit\",\r\n              \"labels_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/labels{/name}\",\r\n              \"comments_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/comments\",\r\n              \"events_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/events\",\r\n              \"html_url\": \"https://github.com/batterseapower/pinyin-toolkit/issues/132\",\r\n              \"id\": 35802,\r\n              \"node_id\": \"MDU6SXNzdWUzNTgwMg==\",\r\n              \"number\": 132,\r\n              \"title\": \"Line Number Indexes Beyond 20 Not Displayed\",\r\n              \"user\": {\r\n                \"login\": \"Nick3C\",\r\n                \"id\": 90254,\r\n                \"node_id\": \"MDQ6VXNlcjkwMjU0\",\r\n                \"avatar_url\": \"https://secure.gravatar.com/avatar/934442aadfe3b2f4630510de416c5718?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/Nick3C\",\r\n                \"html_url\": \"https://github.com/Nick3C\",\r\n                \"followers_url\": \"https://api.github.com/users/Nick3C/followers\",\r\n                \"following_url\": \"https://api.github.com/users/Nick3C/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/Nick3C/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/Nick3C/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/Nick3C/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/Nick3C/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/Nick3C/repos\",\r\n                \"events_url\": \"https://api.github.com/users/Nick3C/events{/privacy}\",\r\n                \"received_events_url\": \"https://api.github.com/users/Nick3C/received_events\",\r\n                \"type\": \"User\",\r\n                \"site_admin\": true\r\n              },\r\n              \"labels\": [\r\n                {\r\n                  \"id\": 4,\r\n                  \"node_id\": \"MDU6TGFiZWw0\",\r\n                  \"url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/labels/bug\",\r\n                  \"name\": \"bug\",\r\n                  \"color\": \"ff0000\"\r\n                }\r\n              ],\r\n              \"state\": \"open\",\r\n              \"assignee\": null,\r\n              \"milestone\": {\r\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\r\n                \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\r\n                \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\r\n                \"id\": 1002604,\r\n                \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\r\n                \"number\": 1,\r\n                \"state\": \"open\",\r\n                \"title\": \"v1.0\",\r\n                \"description\": \"Tracking milestone for version 1.0\",\r\n                \"creator\": {\r\n                  \"login\": \"octocat\",\r\n                  \"id\": 1,\r\n                  \"node_id\": \"MDQ6VXNlcjE=\",\r\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n                  \"gravatar_id\": \"\",\r\n                  \"url\": \"https://api.github.com/users/octocat\",\r\n                  \"html_url\": \"https://github.com/octocat\",\r\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n                  \"type\": \"User\",\r\n                  \"site_admin\": false\r\n                },\r\n                \"open_issues\": 4,\r\n                \"closed_issues\": 8,\r\n                \"created_at\": \"2011-04-10T20:09:31Z\",\r\n                \"updated_at\": \"2014-03-03T18:58:10Z\",\r\n                \"closed_at\": \"2013-02-12T13:22:01Z\",\r\n                \"due_on\": \"2012-10-09T23:39:01Z\"\r\n              },\r\n              \"comments\": 15,\r\n              \"created_at\": \"2009-07-12T20:10:41Z\",\r\n              \"updated_at\": \"2009-07-19T09:23:43Z\",\r\n              \"closed_at\": null,\r\n              \"pull_request\": {\r\n                \"url\": \"https://api/github.com/repos/octocat/Hello-World/pull/1347\",\r\n                \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\r\n                \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\r\n                \"patch_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\"\r\n              },\r\n              \"body\": \"...\",\r\n              \"score\": 1,\r\n              \"locked\": true,\r\n              \"author_association\": \"COLLABORATOR\"\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchIssuesAndPullRequestsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestSearchLabelsOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 2,\r\n          \"incomplete_results\": false,\r\n          \"items\": [\r\n            {\r\n              \"id\": 418327088,\r\n              \"node_id\": \"MDU6TGFiZWw0MTgzMjcwODg=\",\r\n              \"url\": \"https://api.github.com/repos/octocat/linguist/labels/enhancement\",\r\n              \"name\": \"enhancement\",\r\n              \"color\": \"84b6eb\",\r\n              \"default\": true,\r\n              \"description\": \"New feature or request.\",\r\n              \"score\": 1\r\n            },\r\n            {\r\n              \"id\": 418327086,\r\n              \"node_id\": \"MDU6TGFiZWw0MTgzMjcwODY=\",\r\n              \"url\": \"https://api.github.com/repos/octocat/linguist/labels/bug\",\r\n              \"name\": \"bug\",\r\n              \"color\": \"ee0701\",\r\n              \"default\": true,\r\n              \"description\": \"Something isn't working.\",\r\n              \"score\": 1\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchLabelsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestSearchReposOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 40,\r\n          \"incomplete_results\": false,\r\n          \"items\": [\r\n            {\r\n              \"id\": 3081286,\r\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkzMDgxMjg2\",\r\n              \"name\": \"Tetris\",\r\n              \"full_name\": \"dtrupenn/Tetris\",\r\n              \"owner\": {\r\n                \"login\": \"dtrupenn\",\r\n                \"id\": 872147,\r\n                \"node_id\": \"MDQ6VXNlcjg3MjE0Nw==\",\r\n                \"avatar_url\": \"https://secure.gravatar.com/avatar/e7956084e75f239de85d3a31bc172ace?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\",\r\n                \"gravatar_id\": \"\",\r\n                \"url\": \"https://api.github.com/users/dtrupenn\",\r\n                \"received_events_url\": \"https://api.github.com/users/dtrupenn/received_events\",\r\n                \"type\": \"User\",\r\n                \"html_url\": \"https://github.com/octocat\",\r\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n                \"site_admin\": true\r\n              },\r\n              \"private\": false,\r\n              \"html_url\": \"https://github.com/dtrupenn/Tetris\",\r\n              \"description\": \"A C implementation of Tetris using Pennsim through LC4\",\r\n              \"fork\": false,\r\n              \"url\": \"https://api.github.com/repos/dtrupenn/Tetris\",\r\n              \"created_at\": \"2012-01-01T00:31:50Z\",\r\n              \"updated_at\": \"2013-01-05T17:58:47Z\",\r\n              \"pushed_at\": \"2012-01-01T00:37:02Z\",\r\n              \"homepage\": \"https://github.com\",\r\n              \"size\": 524,\r\n              \"stargazers_count\": 1,\r\n              \"watchers_count\": 1,\r\n              \"language\": \"Assembly\",\r\n              \"forks_count\": 0,\r\n              \"open_issues_count\": 0,\r\n              \"master_branch\": \"master\",\r\n              \"default_branch\": \"master\",\r\n              \"score\": 1,\r\n              \"archive_url\": \"https://api.github.com/repos/dtrupenn/Tetris/{archive_format}{/ref}\",\r\n              \"assignees_url\": \"https://api.github.com/repos/dtrupenn/Tetris/assignees{/user}\",\r\n              \"blobs_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/blobs{/sha}\",\r\n              \"branches_url\": \"https://api.github.com/repos/dtrupenn/Tetris/branches{/branch}\",\r\n              \"collaborators_url\": \"https://api.github.com/repos/dtrupenn/Tetris/collaborators{/collaborator}\",\r\n              \"comments_url\": \"https://api.github.com/repos/dtrupenn/Tetris/comments{/number}\",\r\n              \"commits_url\": \"https://api.github.com/repos/dtrupenn/Tetris/commits{/sha}\",\r\n              \"compare_url\": \"https://api.github.com/repos/dtrupenn/Tetris/compare/{base}...{head}\",\r\n              \"contents_url\": \"https://api.github.com/repos/dtrupenn/Tetris/contents/{+path}\",\r\n              \"contributors_url\": \"https://api.github.com/repos/dtrupenn/Tetris/contributors\",\r\n              \"deployments_url\": \"https://api.github.com/repos/dtrupenn/Tetris/deployments\",\r\n              \"downloads_url\": \"https://api.github.com/repos/dtrupenn/Tetris/downloads\",\r\n              \"events_url\": \"https://api.github.com/repos/dtrupenn/Tetris/events\",\r\n              \"forks_url\": \"https://api.github.com/repos/dtrupenn/Tetris/forks\",\r\n              \"git_commits_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/commits{/sha}\",\r\n              \"git_refs_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/refs{/sha}\",\r\n              \"git_tags_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/tags{/sha}\",\r\n              \"git_url\": \"git:github.com/dtrupenn/Tetris.git\",\r\n              \"issue_comment_url\": \"https://api.github.com/repos/dtrupenn/Tetris/issues/comments{/number}\",\r\n              \"issue_events_url\": \"https://api.github.com/repos/dtrupenn/Tetris/issues/events{/number}\",\r\n              \"issues_url\": \"https://api.github.com/repos/dtrupenn/Tetris/issues{/number}\",\r\n              \"keys_url\": \"https://api.github.com/repos/dtrupenn/Tetris/keys{/key_id}\",\r\n              \"labels_url\": \"https://api.github.com/repos/dtrupenn/Tetris/labels{/name}\",\r\n              \"languages_url\": \"https://api.github.com/repos/dtrupenn/Tetris/languages\",\r\n              \"merges_url\": \"https://api.github.com/repos/dtrupenn/Tetris/merges\",\r\n              \"milestones_url\": \"https://api.github.com/repos/dtrupenn/Tetris/milestones{/number}\",\r\n              \"notifications_url\": \"https://api.github.com/repos/dtrupenn/Tetris/notifications{?since,all,participating}\",\r\n              \"pulls_url\": \"https://api.github.com/repos/dtrupenn/Tetris/pulls{/number}\",\r\n              \"releases_url\": \"https://api.github.com/repos/dtrupenn/Tetris/releases{/id}\",\r\n              \"ssh_url\": \"git@github.com:dtrupenn/Tetris.git\",\r\n              \"stargazers_url\": \"https://api.github.com/repos/dtrupenn/Tetris/stargazers\",\r\n              \"statuses_url\": \"https://api.github.com/repos/dtrupenn/Tetris/statuses/{sha}\",\r\n              \"subscribers_url\": \"https://api.github.com/repos/dtrupenn/Tetris/subscribers\",\r\n              \"subscription_url\": \"https://api.github.com/repos/dtrupenn/Tetris/subscription\",\r\n              \"tags_url\": \"https://api.github.com/repos/dtrupenn/Tetris/tags\",\r\n              \"teams_url\": \"https://api.github.com/repos/dtrupenn/Tetris/teams\",\r\n              \"trees_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/trees{/sha}\",\r\n              \"clone_url\": \"https://github.com/dtrupenn/Tetris.git\",\r\n              \"mirror_url\": \"git:git.example.com/dtrupenn/Tetris\",\r\n              \"hooks_url\": \"https://api.github.com/repos/dtrupenn/Tetris/hooks\",\r\n              \"svn_url\": \"https://svn.github.com/dtrupenn/Tetris\",\r\n              \"forks\": 1,\r\n              \"open_issues\": 1,\r\n              \"watchers\": 1,\r\n              \"has_issues\": true,\r\n              \"has_projects\": true,\r\n              \"has_pages\": true,\r\n              \"has_wiki\": true,\r\n              \"has_downloads\": true,\r\n              \"archived\": true,\r\n              \"disabled\": true,\r\n              \"license\": {\r\n                \"key\": \"mit\",\r\n                \"name\": \"MIT License\",\r\n                \"url\": \"https://api.github.com/licenses/mit\",\r\n                \"spdx_id\": \"MIT\",\r\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n                \"html_url\": \"https://api.github.com/licenses/mit\"\r\n              }\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchReposOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestSearchTopicsOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 6,\r\n          \"incomplete_results\": false,\r\n          \"items\": [\r\n            {\r\n              \"name\": \"ruby\",\r\n              \"display_name\": \"Ruby\",\r\n              \"short_description\": \"Ruby is a scripting language designed for simplified object-oriented programming.\",\r\n              \"description\": \"Ruby was developed by\u00a0Yukihiro \\\"Matz\\\" Matsumoto\u00a0in 1995 with the intent of having an easily readable programming language. It is integrated with the Rails framework to create dynamic web-applications. Ruby's syntax is similar to that of Perl and Python.\",\r\n              \"created_by\": \"Yukihiro Matsumoto\",\r\n              \"released\": \"December 21, 1995\",\r\n              \"created_at\": \"2016-11-28T22:03:59Z\",\r\n              \"updated_at\": \"2017-10-30T18:16:32Z\",\r\n              \"featured\": true,\r\n              \"curated\": true,\r\n              \"score\": 1\r\n            },\r\n            {\r\n              \"name\": \"rails\",\r\n              \"display_name\": \"Rails\",\r\n              \"short_description\": \"Ruby on Rails (Rails) is a web application framework written in Ruby.\",\r\n              \"description\": \"Ruby on Rails (Rails) is a web application framework written in Ruby. It is meant to help simplify the building of complex websites.\",\r\n              \"created_by\": \"David Heinemeier Hansson\",\r\n              \"released\": \"December 13 2005\",\r\n              \"created_at\": \"2016-12-09T17:03:50Z\",\r\n              \"updated_at\": \"2017-10-30T16:20:19Z\",\r\n              \"featured\": true,\r\n              \"curated\": true,\r\n              \"score\": 1\r\n            },\r\n            {\r\n              \"name\": \"python\",\r\n              \"display_name\": \"Python\",\r\n              \"short_description\": \"Python is a dynamically typed programming language.\",\r\n              \"description\": \"Python is a dynamically typed programming language designed by Guido Van Rossum. Much like the programming language Ruby, Python was designed to be easily read by programmers. Because of its large following and many libraries, Python can be implemented and used to do anything from webpages to scientific research.\",\r\n              \"created_by\": \"Guido van Rossum\",\r\n              \"released\": \"February 20, 1991\",\r\n              \"created_at\": \"2016-12-07T00:07:02Z\",\r\n              \"updated_at\": \"2017-10-27T22:45:43Z\",\r\n              \"featured\": true,\r\n              \"curated\": true,\r\n              \"score\": 1\r\n            },\r\n            {\r\n              \"name\": \"jekyll\",\r\n              \"display_name\": \"Jekyll\",\r\n              \"short_description\": \"Jekyll is a simple, blog-aware static site generator.\",\r\n              \"description\": \"Jekyll is a blog-aware, site generator written in Ruby. It takes raw text files, runs it through a renderer and produces a publishable static website.\",\r\n              \"created_by\": \"Tom Preston-Werner\",\r\n              \"released\": \"2008\",\r\n              \"created_at\": \"2016-12-16T21:53:08Z\",\r\n              \"updated_at\": \"2017-10-27T19:00:24Z\",\r\n              \"featured\": true,\r\n              \"curated\": true,\r\n              \"score\": 1\r\n            },\r\n            {\r\n              \"name\": \"sass\",\r\n              \"display_name\": \"Sass\",\r\n              \"short_description\": \"Sass is a stable extension to classic CSS.\",\r\n              \"description\": \"Sass is a stylesheet language with a main implementation in Ruby. It is an extension of CSS that makes improvements to the old stylesheet format, such as being able to declare variables and using a cleaner nesting syntax.\",\r\n              \"created_by\": \"Hampton Catlin, Natalie Weizenbaum, Chris Eppstein\",\r\n              \"released\": \"November 28, 2006\",\r\n              \"created_at\": \"2016-12-16T21:53:45Z\",\r\n              \"updated_at\": \"2018-01-16T16:30:40Z\",\r\n              \"featured\": true,\r\n              \"curated\": true,\r\n              \"score\": 1\r\n            },\r\n            {\r\n              \"name\": \"homebrew\",\r\n              \"display_name\": \"Homebrew\",\r\n              \"short_description\": \"Homebrew is a package manager for macOS.\",\r\n              \"description\": \"Homebrew is a package manager for Apple's macOS operating system. It simplifies the installation of software and is popular in the Ruby on Rails community.\",\r\n              \"created_by\": \"Max Howell\",\r\n              \"released\": \"2009\",\r\n              \"created_at\": \"2016-12-17T20:30:44Z\",\r\n              \"updated_at\": \"2018-02-06T16:14:56Z\",\r\n              \"featured\": true,\r\n              \"curated\": true,\r\n              \"score\": 1\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchTopicsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestSearchUsersOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"total_count\": 12,\r\n          \"incomplete_results\": false,\r\n          \"items\": [\r\n            {\r\n              \"login\": \"mojombo\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://secure.gravatar.com/avatar/25c7c18223fb42a4c6ae1c8db6f50f9b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/mojombo\",\r\n              \"html_url\": \"https://github.com/mojombo\",\r\n              \"followers_url\": \"https://api.github.com/users/mojombo/followers\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/mojombo/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/mojombo/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/mojombo/repos\",\r\n              \"received_events_url\": \"https://api.github.com/users/mojombo/received_events\",\r\n              \"type\": \"User\",\r\n              \"score\": 1,\r\n              \"following_url\": \"https://api.github.com/users/mojombo/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/mojombo/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/mojombo/starred{/owner}{/repo}\",\r\n              \"events_url\": \"https://api.github.com/users/mojombo/events{/privacy}\",\r\n              \"site_admin\": true\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchUsersOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestSecretScanningAlert_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"number\": 42,\r\n          \"created_at\": \"2020-11-06T18:18:30Z\",\r\n          \"url\": \"https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42\",\r\n          \"html_url\": \"https://github.com/owner/private-repo/security/secret-scanning/42\",\r\n          \"state\": \"open\",\r\n          \"resolution\": null,\r\n          \"resolved_at\": null,\r\n          \"resolved_by\": null,\r\n          \"secret_type\": \"mailchimp_api_key\",\r\n          \"secret\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2\"\r\n        }",
		},
		{
			Input: "{\r\n          \"number\": 42,\r\n          \"created_at\": \"2020-11-06T18:18:30Z\",\r\n          \"url\": \"https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42\",\r\n          \"html_url\": \"https://github.com/owner/private-repo/security/secret-scanning/42\",\r\n          \"state\": \"resolved\",\r\n          \"resolution\": \"used_in_tests\",\r\n          \"resolved_at\": \"2020-11-16T22:42:07Z\",\r\n          \"resolved_by\": {\r\n            \"login\": \"monalisa\",\r\n            \"id\": 2,\r\n            \"node_id\": \"MDQ6VXNlcjI=\",\r\n            \"avatar_url\": \"https://alambic.github.com/avatars/u/2?\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/monalisa\",\r\n            \"html_url\": \"https://github.com/monalisa\",\r\n            \"followers_url\": \"https://api.github.com/users/monalisa/followers\",\r\n            \"following_url\": \"https://api.github.com/users/monalisa/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/monalisa/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/monalisa/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/monalisa/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/monalisa/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/monalisa/repos\",\r\n            \"events_url\": \"https://api.github.com/users/monalisa/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/monalisa/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": true\r\n          },\r\n          \"secret_type\": \"mailchimp_api_key\",\r\n          \"secret\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SecretScanningAlert

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestSelectedActions_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"github_owned_allowed\": true,\r\n          \"verified_allowed\": false,\r\n          \"patterns_allowed\": [\r\n            \"monalisa/octocat@*\",\r\n            \"docker/*\"\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SelectedActions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestShortBlob_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\",\r\n          \"sha\": \"3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ShortBlob

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestStatus_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\r\n          \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDY6U3RhdHVzMQ==\",\r\n          \"state\": \"success\",\r\n          \"description\": \"Build has completed successfully\",\r\n          \"target_url\": \"https://ci.example.com/1000/output\",\r\n          \"context\": \"continuous-integration/jenkins\",\r\n          \"created_at\": \"2012-07-20T01:19:13Z\",\r\n          \"updated_at\": \"2012-07-20T01:19:13Z\",\r\n          \"creator\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Status

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestStatusCheckPolicy_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks\",\r\n          \"strict\": true,\r\n          \"contexts\": [\r\n            \"continuous-integration/travis-ci\"\r\n          ],\r\n          \"contexts_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ StatusCheckPolicy

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTeamDiscussion_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"author\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"Hi! This is an area for us to collaborate as a team.\",\r\n          \"body_html\": \"<p>Hi! This is an area for us to collaborate as a team</p>\",\r\n          \"body_version\": \"0d495416a700fb06133c612575d92bfb\",\r\n          \"comments_count\": 0,\r\n          \"comments_url\": \"https://api.github.com/teams/2343027/discussions/1/comments\",\r\n          \"created_at\": \"2018-01-25T18:56:31Z\",\r\n          \"last_edited_at\": null,\r\n          \"html_url\": \"https://github.com/orgs/github/teams/justice-league/discussions/1\",\r\n          \"node_id\": \"MDE0OlRlYW1EaXNjdXNzaW9uMQ==\",\r\n          \"number\": 1,\r\n          \"pinned\": false,\r\n          \"private\": false,\r\n          \"team_url\": \"https://api.github.com/teams/2343027\",\r\n          \"title\": \"Our first team post\",\r\n          \"updated_at\": \"2018-01-25T18:56:31Z\",\r\n          \"url\": \"https://api.github.com/teams/2343027/discussions/1\",\r\n          \"reactions\": {\r\n            \"url\": \"https://api.github.com/teams/2343027/discussions/1/reactions\",\r\n            \"total_count\": 5,\r\n            \"+1\": 3,\r\n            \"-1\": 1,\r\n            \"laugh\": 0,\r\n            \"confused\": 0,\r\n            \"heart\": 1,\r\n            \"hooray\": 0,\r\n            \"eyes\": 1,\r\n            \"rocket\": 1\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"author\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"Hi! This is an area for us to collaborate as a team.\",\r\n          \"body_html\": \"<p>Hi! This is an area for us to collaborate as a team</p>\",\r\n          \"body_version\": \"0d495416a700fb06133c612575d92bfb\",\r\n          \"comments_count\": 1,\r\n          \"comments_url\": \"https://api.github.com/teams/2343027/discussions/1/comments\",\r\n          \"created_at\": \"2018-01-25T18:56:31Z\",\r\n          \"last_edited_at\": \"2018-01-26T18:22:20Z\",\r\n          \"html_url\": \"https://github.com/orgs/github/teams/justice-league/discussions/1\",\r\n          \"node_id\": \"MDE0OlRlYW1EaXNjdXNzaW9uMQ==\",\r\n          \"number\": 1,\r\n          \"pinned\": false,\r\n          \"private\": false,\r\n          \"team_url\": \"https://api.github.com/teams/2343027\",\r\n          \"title\": \"Welcome to our first team post\",\r\n          \"updated_at\": \"2018-01-26T18:22:20Z\",\r\n          \"url\": \"https://api.github.com/teams/2343027/discussions/1\",\r\n          \"reactions\": {\r\n            \"url\": \"https://api.github.com/teams/2343027/discussions/1/reactions\",\r\n            \"total_count\": 5,\r\n            \"+1\": 3,\r\n            \"-1\": 1,\r\n            \"laugh\": 0,\r\n            \"confused\": 0,\r\n            \"heart\": 1,\r\n            \"hooray\": 0,\r\n            \"eyes\": 1,\r\n            \"rocket\": 1\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamDiscussion

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTeamDiscussionComment_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"author\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"Do you like apples?\",\r\n          \"body_html\": \"<p>Do you like apples?</p>\",\r\n          \"body_version\": \"5eb32b219cdc6a5a9b29ba5d6caa9c51\",\r\n          \"created_at\": \"2018-01-15T23:53:58Z\",\r\n          \"last_edited_at\": null,\r\n          \"discussion_url\": \"https://api.github.com/teams/2403582/discussions/1\",\r\n          \"html_url\": \"https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1\",\r\n          \"node_id\": \"MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=\",\r\n          \"number\": 1,\r\n          \"updated_at\": \"2018-01-15T23:53:58Z\",\r\n          \"url\": \"https://api.github.com/teams/2403582/discussions/1/comments/1\",\r\n          \"reactions\": {\r\n            \"url\": \"https://api.github.com/teams/2403582/discussions/1/reactions\",\r\n            \"total_count\": 5,\r\n            \"+1\": 3,\r\n            \"-1\": 1,\r\n            \"laugh\": 0,\r\n            \"confused\": 0,\r\n            \"heart\": 1,\r\n            \"hooray\": 0,\r\n            \"eyes\": 1,\r\n            \"rocket\": 1\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"author\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"body\": \"Do you like pineapples?\",\r\n          \"body_html\": \"<p>Do you like pineapples?</p>\",\r\n          \"body_version\": \"e6907b24d9c93cc0c5024a7af5888116\",\r\n          \"created_at\": \"2018-01-15T23:53:58Z\",\r\n          \"last_edited_at\": \"2018-01-26T18:22:20Z\",\r\n          \"discussion_url\": \"https://api.github.com/teams/2403582/discussions/1\",\r\n          \"html_url\": \"https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1\",\r\n          \"node_id\": \"MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=\",\r\n          \"number\": 1,\r\n          \"updated_at\": \"2018-01-26T18:22:20Z\",\r\n          \"url\": \"https://api.github.com/teams/2403582/discussions/1/comments/1\",\r\n          \"reactions\": {\r\n            \"url\": \"https://api.github.com/teams/2403582/discussions/1/reactions\",\r\n            \"total_count\": 5,\r\n            \"+1\": 3,\r\n            \"-1\": 1,\r\n            \"laugh\": 0,\r\n            \"confused\": 0,\r\n            \"heart\": 1,\r\n            \"hooray\": 0,\r\n            \"eyes\": 1,\r\n            \"rocket\": 1\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamDiscussionComment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTeamFull_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1,\r\n          \"node_id\": \"MDQ6VGVhbTE=\",\r\n          \"url\": \"https://api.github.com/teams/1\",\r\n          \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\r\n          \"name\": \"Justice League\",\r\n          \"slug\": \"justice-league\",\r\n          \"description\": \"A great team.\",\r\n          \"privacy\": \"closed\",\r\n          \"permission\": \"admin\",\r\n          \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\r\n          \"repositories_url\": \"https://api.github.com/teams/1/repos\",\r\n          \"parent\": null,\r\n          \"members_count\": 3,\r\n          \"repos_count\": 10,\r\n          \"created_at\": \"2017-07-14T16:53:42Z\",\r\n          \"updated_at\": \"2017-08-17T12:37:15Z\",\r\n          \"organization\": {\r\n            \"login\": \"github\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\r\n            \"url\": \"https://api.github.com/orgs/github\",\r\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\r\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\r\n            \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\r\n            \"issues_url\": \"https://api.github.com/orgs/github/issues\",\r\n            \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\r\n            \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"description\": \"A great organization\",\r\n            \"name\": \"github\",\r\n            \"company\": \"GitHub\",\r\n            \"blog\": \"https://github.com/blog\",\r\n            \"location\": \"San Francisco\",\r\n            \"email\": \"octocat@github.com\",\r\n            \"is_verified\": true,\r\n            \"has_organization_projects\": true,\r\n            \"has_repository_projects\": true,\r\n            \"public_repos\": 2,\r\n            \"public_gists\": 1,\r\n            \"followers\": 20,\r\n            \"following\": 0,\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"created_at\": \"2008-01-14T04:33:35Z\",\r\n            \"updated_at\": \"2017-08-17T12:37:15Z\",\r\n            \"type\": \"Organization\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamFull

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTeamFullPrivacy_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"closed\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamFullPrivacy

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTeamMembership_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/teams/1/memberships/octocat\",\r\n          \"role\": \"maintainer\",\r\n          \"state\": \"active\"\r\n        }",
		},
		{
			Input: "{\r\n          \"url\": \"https://api.github.com/teams/1/memberships/octocat\",\r\n          \"role\": \"member\",\r\n          \"state\": \"pending\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamMembership

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTeamMembershipRole_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"member\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamMembershipRole

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTeamProject_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"owner_url\": \"https://api.github.com/orgs/octocat\",\r\n          \"url\": \"https://api.github.com/projects/1002605\",\r\n          \"html_url\": \"https://github.com/orgs/api-playground/projects/1\",\r\n          \"columns_url\": \"https://api.github.com/projects/1002605/columns\",\r\n          \"id\": 1002605,\r\n          \"node_id\": \"MDc6UHJvamVjdDEwMDI2MDU=\",\r\n          \"name\": \"Organization Roadmap\",\r\n          \"body\": \"High-level roadmap for the upcoming year.\",\r\n          \"number\": 1,\r\n          \"state\": \"open\",\r\n          \"creator\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"created_at\": \"2011-04-11T20:09:31Z\",\r\n          \"updated_at\": \"2014-03-04T18:58:10Z\",\r\n          \"organization_permission\": \"write\",\r\n          \"private\": false,\r\n          \"permissions\": {\r\n            \"read\": true,\r\n            \"write\": true,\r\n            \"admin\": false\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamProject

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTeamRepository_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 1296269,\r\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n          \"name\": \"Hello-World\",\r\n          \"full_name\": \"octocat/Hello-World\",\r\n          \"owner\": {\r\n            \"login\": \"octocat\",\r\n            \"id\": 1,\r\n            \"node_id\": \"MDQ6VXNlcjE=\",\r\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n            \"gravatar_id\": \"\",\r\n            \"url\": \"https://api.github.com/users/octocat\",\r\n            \"html_url\": \"https://github.com/octocat\",\r\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n            \"type\": \"User\",\r\n            \"site_admin\": false\r\n          },\r\n          \"private\": false,\r\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n          \"description\": \"This your first repo!\",\r\n          \"fork\": false,\r\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\r\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\r\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\r\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\r\n          \"homepage\": \"https://github.com\",\r\n          \"language\": null,\r\n          \"forks_count\": 9,\r\n          \"stargazers_count\": 80,\r\n          \"watchers_count\": 80,\r\n          \"size\": 108,\r\n          \"default_branch\": \"master\",\r\n          \"open_issues_count\": 0,\r\n          \"is_template\": false,\r\n          \"topics\": [\r\n            \"octocat\",\r\n            \"atom\",\r\n            \"electron\",\r\n            \"api\"\r\n          ],\r\n          \"has_issues\": true,\r\n          \"has_projects\": true,\r\n          \"has_wiki\": true,\r\n          \"has_pages\": false,\r\n          \"has_downloads\": true,\r\n          \"archived\": false,\r\n          \"disabled\": false,\r\n          \"visibility\": \"public\",\r\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n          \"created_at\": \"2011-01-26T19:01:12Z\",\r\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n          \"permissions\": {\r\n            \"admin\": false,\r\n            \"push\": false,\r\n            \"pull\": true\r\n          },\r\n          \"allow_rebase_merge\": true,\r\n          \"template_repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World-Template\",\r\n            \"full_name\": \"octocat/Hello-World-Template\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\r\n            \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\r\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\r\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\r\n            \"homepage\": \"https://github.com\",\r\n            \"language\": null,\r\n            \"forks\": 9,\r\n            \"forks_count\": 9,\r\n            \"stargazers_count\": 80,\r\n            \"watchers_count\": 80,\r\n            \"watchers\": 80,\r\n            \"size\": 108,\r\n            \"default_branch\": \"master\",\r\n            \"open_issues\": 0,\r\n            \"open_issues_count\": 0,\r\n            \"is_template\": true,\r\n            \"license\": {\r\n              \"key\": \"mit\",\r\n              \"name\": \"MIT License\",\r\n              \"url\": \"https://api.github.com/licenses/mit\",\r\n              \"spdx_id\": \"MIT\",\r\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n              \"html_url\": \"https://api.github.com/licenses/mit\"\r\n            },\r\n            \"topics\": [\r\n              \"octocat\",\r\n              \"atom\",\r\n              \"electron\",\r\n              \"api\"\r\n            ],\r\n            \"has_issues\": true,\r\n            \"has_projects\": true,\r\n            \"has_wiki\": true,\r\n            \"has_pages\": false,\r\n            \"has_downloads\": true,\r\n            \"archived\": false,\r\n            \"disabled\": false,\r\n            \"visibility\": \"public\",\r\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\r\n            \"created_at\": \"2011-01-26T19:01:12Z\",\r\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\r\n            \"permissions\": {\r\n              \"admin\": false,\r\n              \"push\": false,\r\n              \"pull\": true\r\n            },\r\n            \"allow_rebase_merge\": true,\r\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n            \"allow_squash_merge\": true,\r\n            \"allow_auto_merge\": false,\r\n            \"delete_branch_on_merge\": true,\r\n            \"allow_merge_commit\": true,\r\n            \"subscribers_count\": 42,\r\n            \"network_count\": 0\r\n          },\r\n          \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\r\n          \"allow_squash_merge\": true,\r\n          \"allow_auto_merge\": false,\r\n          \"delete_branch_on_merge\": true,\r\n          \"allow_merge_commit\": true,\r\n          \"subscribers_count\": 42,\r\n          \"network_count\": 0,\r\n          \"license\": {\r\n            \"key\": \"mit\",\r\n            \"name\": \"MIT License\",\r\n            \"url\": \"https://api.github.com/licenses/mit\",\r\n            \"spdx_id\": \"MIT\",\r\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\r\n            \"html_url\": \"https://api.github.com/licenses/mit\"\r\n          },\r\n          \"forks\": 1,\r\n          \"open_issues\": 1,\r\n          \"watchers\": 1\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamRepository

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTeamsAddOrUpdateProjectPermissionsInOrgForbidden_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"message\": \"Must have admin rights to Repository.\",\r\n                      \"documentation_url\": \"https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions\"\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamsAddOrUpdateProjectPermissionsInOrgForbidden

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTeamsAddOrUpdateProjectPermissionsLegacyForbidden_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"message\": \"Must have admin rights to Repository.\",\r\n                      \"documentation_url\": \"https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions\"\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamsAddOrUpdateProjectPermissionsLegacyForbidden

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestThread_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": \"1\",\r\n          \"repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\r\n          },\r\n          \"subject\": {\r\n            \"title\": \"Greetings\",\r\n            \"url\": \"https://api.github.com/repos/octokit/octokit.rb/issues/123\",\r\n            \"latest_comment_url\": \"https://api.github.com/repos/octokit/octokit.rb/issues/comments/123\",\r\n            \"type\": \"Issue\"\r\n          },\r\n          \"reason\": \"subscribed\",\r\n          \"unread\": true,\r\n          \"updated_at\": \"2014-11-07T22:01:45Z\",\r\n          \"last_read_at\": \"2014-11-07T22:01:45Z\",\r\n          \"url\": \"https://api.github.com/notifications/threads/1\",\r\n          \"subscription_url\": \"https://api.github.com/notifications/threads/1/subscription\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Thread

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestThreadSubscription_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"subscribed\": true,\r\n          \"ignored\": false,\r\n          \"reason\": null,\r\n          \"created_at\": \"2012-10-06T21:34:12Z\",\r\n          \"url\": \"https://api.github.com/notifications/threads/1/subscription\",\r\n          \"thread_url\": \"https://api.github.com/notifications/threads/1\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ThreadSubscription

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestTopic_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"names\": [\r\n            \"octocat\",\r\n            \"atom\",\r\n            \"electron\",\r\n            \"api\"\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Topic

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestUsersAddEmailForAuthenticatedReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"emails\": [\r\n                        \"octocat@github.com\",\r\n                        \"mona@github.com\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ UsersAddEmailForAuthenticatedReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestUsersDeleteEmailForAuthenticatedReq0_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n                      \"emails\": [\r\n                        \"octocat@github.com\",\r\n                        \"mona@github.com\"\r\n                      ]\r\n                    }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ UsersDeleteEmailForAuthenticatedReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestUsersGetAuthenticatedOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"login\": \"octocat\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDQ6VXNlcjE=\",\r\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n          \"gravatar_id\": \"\",\r\n          \"url\": \"https://api.github.com/users/octocat\",\r\n          \"html_url\": \"https://github.com/octocat\",\r\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n          \"type\": \"User\",\r\n          \"site_admin\": false,\r\n          \"name\": \"monalisa octocat\",\r\n          \"company\": \"GitHub\",\r\n          \"blog\": \"https://github.com/blog\",\r\n          \"location\": \"San Francisco\",\r\n          \"email\": \"octocat@github.com\",\r\n          \"hireable\": false,\r\n          \"bio\": \"There once was...\",\r\n          \"twitter_username\": \"monatheoctocat\",\r\n          \"public_repos\": 2,\r\n          \"public_gists\": 1,\r\n          \"followers\": 20,\r\n          \"following\": 0,\r\n          \"created_at\": \"2008-01-14T04:33:35Z\",\r\n          \"updated_at\": \"2008-01-14T04:33:35Z\",\r\n          \"private_gists\": 81,\r\n          \"total_private_repos\": 100,\r\n          \"owned_private_repos\": 100,\r\n          \"disk_usage\": 10000,\r\n          \"collaborators\": 8,\r\n          \"two_factor_authentication\": true,\r\n          \"plan\": {\r\n            \"name\": \"Medium\",\r\n            \"space\": 400,\r\n            \"private_repos\": 20,\r\n            \"collaborators\": 0\r\n          }\r\n        }",
		},
		{
			Input: "{\r\n          \"login\": \"octocat\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDQ6VXNlcjE=\",\r\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n          \"gravatar_id\": \"\",\r\n          \"url\": \"https://api.github.com/users/octocat\",\r\n          \"html_url\": \"https://github.com/octocat\",\r\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n          \"type\": \"User\",\r\n          \"site_admin\": false,\r\n          \"name\": \"monalisa octocat\",\r\n          \"company\": \"GitHub\",\r\n          \"blog\": \"https://github.com/blog\",\r\n          \"location\": \"San Francisco\",\r\n          \"email\": \"octocat@github.com\",\r\n          \"hireable\": false,\r\n          \"bio\": \"There once was...\",\r\n          \"twitter_username\": \"monatheoctocat\",\r\n          \"public_repos\": 2,\r\n          \"public_gists\": 1,\r\n          \"followers\": 20,\r\n          \"following\": 0,\r\n          \"created_at\": \"2008-01-14T04:33:35Z\",\r\n          \"updated_at\": \"2008-01-14T04:33:35Z\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ UsersGetAuthenticatedOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestUsersGetByUsernameOK_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"login\": \"octocat\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDQ6VXNlcjE=\",\r\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n          \"gravatar_id\": \"\",\r\n          \"url\": \"https://api.github.com/users/octocat\",\r\n          \"html_url\": \"https://github.com/octocat\",\r\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n          \"type\": \"User\",\r\n          \"site_admin\": false,\r\n          \"name\": \"monalisa octocat\",\r\n          \"company\": \"GitHub\",\r\n          \"blog\": \"https://github.com/blog\",\r\n          \"location\": \"San Francisco\",\r\n          \"email\": \"octocat@github.com\",\r\n          \"hireable\": false,\r\n          \"bio\": \"There once was...\",\r\n          \"twitter_username\": \"monatheoctocat\",\r\n          \"public_repos\": 2,\r\n          \"public_gists\": 1,\r\n          \"followers\": 20,\r\n          \"following\": 0,\r\n          \"created_at\": \"2008-01-14T04:33:35Z\",\r\n          \"updated_at\": \"2008-01-14T04:33:35Z\"\r\n        }",
		},
		{
			Input: "{\r\n          \"login\": \"octocat\",\r\n          \"id\": 1,\r\n          \"node_id\": \"MDQ6VXNlcjE=\",\r\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n          \"gravatar_id\": \"\",\r\n          \"url\": \"https://api.github.com/users/octocat\",\r\n          \"html_url\": \"https://github.com/octocat\",\r\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n          \"type\": \"User\",\r\n          \"site_admin\": false,\r\n          \"name\": \"monalisa octocat\",\r\n          \"company\": \"GitHub\",\r\n          \"blog\": \"https://github.com/blog\",\r\n          \"location\": \"San Francisco\",\r\n          \"email\": \"octocat@github.com\",\r\n          \"hireable\": false,\r\n          \"bio\": \"There once was...\",\r\n          \"twitter_username\": \"monatheoctocat\",\r\n          \"public_repos\": 2,\r\n          \"public_gists\": 1,\r\n          \"followers\": 20,\r\n          \"following\": 0,\r\n          \"created_at\": \"2008-01-14T04:33:35Z\",\r\n          \"updated_at\": \"2008-01-14T04:33:35Z\",\r\n          \"plan\": {\r\n            \"name\": \"pro\",\r\n            \"space\": 976562499,\r\n            \"collaborators\": 0,\r\n            \"private_repos\": 9999\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ UsersGetByUsernameOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestViewTraffic_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"count\": 14850,\r\n          \"uniques\": 3782,\r\n          \"views\": [\r\n            {\r\n              \"timestamp\": \"2016-10-10T00:00:00Z\",\r\n              \"count\": 440,\r\n              \"uniques\": 143\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-11T00:00:00Z\",\r\n              \"count\": 1308,\r\n              \"uniques\": 414\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-12T00:00:00Z\",\r\n              \"count\": 1486,\r\n              \"uniques\": 452\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-13T00:00:00Z\",\r\n              \"count\": 1170,\r\n              \"uniques\": 401\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-14T00:00:00Z\",\r\n              \"count\": 868,\r\n              \"uniques\": 266\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-15T00:00:00Z\",\r\n              \"count\": 495,\r\n              \"uniques\": 157\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-16T00:00:00Z\",\r\n              \"count\": 524,\r\n              \"uniques\": 175\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-17T00:00:00Z\",\r\n              \"count\": 1263,\r\n              \"uniques\": 412\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-18T00:00:00Z\",\r\n              \"count\": 1402,\r\n              \"uniques\": 417\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-19T00:00:00Z\",\r\n              \"count\": 1394,\r\n              \"uniques\": 424\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-20T00:00:00Z\",\r\n              \"count\": 1492,\r\n              \"uniques\": 448\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-21T00:00:00Z\",\r\n              \"count\": 1153,\r\n              \"uniques\": 332\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-22T00:00:00Z\",\r\n              \"count\": 566,\r\n              \"uniques\": 168\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-23T00:00:00Z\",\r\n              \"count\": 675,\r\n              \"uniques\": 184\r\n            },\r\n            {\r\n              \"timestamp\": \"2016-10-24T00:00:00Z\",\r\n              \"count\": 614,\r\n              \"uniques\": 237\r\n            }\r\n          ]\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ViewTraffic

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestWebhookConfig_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"content_type\": \"json\",\r\n          \"insecure_ssl\": \"0\",\r\n          \"secret\": \"********\",\r\n          \"url\": \"https://example.com/webhook\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ WebhookConfig

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestWorkflow_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 161335,\r\n          \"node_id\": \"MDg6V29ya2Zsb3cxNjEzMzU=\",\r\n          \"name\": \"CI\",\r\n          \"path\": \".github/workflows/blank.yaml\",\r\n          \"state\": \"active\",\r\n          \"created_at\": \"2020-01-08T23:48:37.000-08:00\",\r\n          \"updated_at\": \"2020-01-08T23:50:21.000-08:00\",\r\n          \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335\",\r\n          \"html_url\": \"https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335\",\r\n          \"badge_url\": \"https://github.com/octo-org/octo-repo/workflows/CI/badge.svg\"\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Workflow

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestWorkflowRun_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"id\": 30433642,\r\n          \"name\": \"Build\",\r\n          \"node_id\": \"MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==\",\r\n          \"check_suite_id\": 42,\r\n          \"check_suite_node_id\": \"MDEwOkNoZWNrU3VpdGU0Mg==\",\r\n          \"head_branch\": \"master\",\r\n          \"head_sha\": \"acb5820ced9479c074f688cc328bf03f341a511d\",\r\n          \"run_number\": 562,\r\n          \"event\": \"push\",\r\n          \"status\": \"queued\",\r\n          \"conclusion\": null,\r\n          \"workflow_id\": 159038,\r\n          \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642\",\r\n          \"html_url\": \"https://github.com/octo-org/octo-repo/actions/runs/30433642\",\r\n          \"pull_requests\": [\r\n\r\n          ],\r\n          \"created_at\": \"2020-01-22T19:33:08Z\",\r\n          \"updated_at\": \"2020-01-22T19:33:08Z\",\r\n          \"jobs_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs\",\r\n          \"logs_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs\",\r\n          \"check_suite_url\": \"https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374\",\r\n          \"artifacts_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts\",\r\n          \"cancel_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel\",\r\n          \"rerun_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun\",\r\n          \"workflow_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038\",\r\n          \"head_commit\": {\r\n            \"id\": \"acb5820ced9479c074f688cc328bf03f341a511d\",\r\n            \"tree_id\": \"d23f6eedb1e1b9610bbc754ddb5197bfe7271223\",\r\n            \"message\": \"Create linter.yaml\",\r\n            \"timestamp\": \"2020-01-22T19:33:05Z\",\r\n            \"author\": {\r\n              \"name\": \"Octo Cat\",\r\n              \"email\": \"octocat@github.com\"\r\n            },\r\n            \"committer\": {\r\n              \"name\": \"GitHub\",\r\n              \"email\": \"noreply@github.com\"\r\n            }\r\n          },\r\n          \"repository\": {\r\n            \"id\": 1296269,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\r\n            \"name\": \"Hello-World\",\r\n            \"full_name\": \"octocat/Hello-World\",\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"private\": false,\r\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\r\n            \"description\": \"This your first repo!\",\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\r\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\r\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\r\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\r\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\r\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\r\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\r\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\r\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\r\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\r\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\r\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\r\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\r\n            \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\r\n          },\r\n          \"head_repository\": {\r\n            \"id\": 217723378,\r\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=\",\r\n            \"name\": \"octo-repo\",\r\n            \"full_name\": \"octo-org/octo-repo\",\r\n            \"private\": true,\r\n            \"owner\": {\r\n              \"login\": \"octocat\",\r\n              \"id\": 1,\r\n              \"node_id\": \"MDQ6VXNlcjE=\",\r\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\r\n              \"gravatar_id\": \"\",\r\n              \"url\": \"https://api.github.com/users/octocat\",\r\n              \"html_url\": \"https://github.com/octocat\",\r\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\r\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\r\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\r\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\r\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\r\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\r\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\r\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\r\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\r\n              \"type\": \"User\",\r\n              \"site_admin\": false\r\n            },\r\n            \"html_url\": \"https://github.com/octo-org/octo-repo\",\r\n            \"description\": null,\r\n            \"fork\": false,\r\n            \"url\": \"https://api.github.com/repos/octo-org/octo-repo\",\r\n            \"forks_url\": \"https://api.github.com/repos/octo-org/octo-repo/forks\",\r\n            \"keys_url\": \"https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}\",\r\n            \"collaborators_url\": \"https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}\",\r\n            \"teams_url\": \"https://api.github.com/repos/octo-org/octo-repo/teams\",\r\n            \"hooks_url\": \"https://api.github.com/repos/octo-org/octo-repo/hooks\",\r\n            \"issue_events_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}\",\r\n            \"events_url\": \"https://api.github.com/repos/octo-org/octo-repo/events\",\r\n            \"assignees_url\": \"https://api.github.com/repos/octo-org/octo-repo/assignees{/user}\",\r\n            \"branches_url\": \"https://api.github.com/repos/octo-org/octo-repo/branches{/branch}\",\r\n            \"tags_url\": \"https://api.github.com/repos/octo-org/octo-repo/tags\",\r\n            \"blobs_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}\",\r\n            \"git_tags_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}\",\r\n            \"git_refs_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}\",\r\n            \"trees_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}\",\r\n            \"statuses_url\": \"https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}\",\r\n            \"languages_url\": \"https://api.github.com/repos/octo-org/octo-repo/languages\",\r\n            \"stargazers_url\": \"https://api.github.com/repos/octo-org/octo-repo/stargazers\",\r\n            \"contributors_url\": \"https://api.github.com/repos/octo-org/octo-repo/contributors\",\r\n            \"subscribers_url\": \"https://api.github.com/repos/octo-org/octo-repo/subscribers\",\r\n            \"subscription_url\": \"https://api.github.com/repos/octo-org/octo-repo/subscription\",\r\n            \"commits_url\": \"https://api.github.com/repos/octo-org/octo-repo/commits{/sha}\",\r\n            \"git_commits_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}\",\r\n            \"comments_url\": \"https://api.github.com/repos/octo-org/octo-repo/comments{/number}\",\r\n            \"issue_comment_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}\",\r\n            \"contents_url\": \"https://api.github.com/repos/octo-org/octo-repo/contents/{+path}\",\r\n            \"compare_url\": \"https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}\",\r\n            \"merges_url\": \"https://api.github.com/repos/octo-org/octo-repo/merges\",\r\n            \"archive_url\": \"https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}\",\r\n            \"downloads_url\": \"https://api.github.com/repos/octo-org/octo-repo/downloads\",\r\n            \"issues_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues{/number}\",\r\n            \"pulls_url\": \"https://api.github.com/repos/octo-org/octo-repo/pulls{/number}\",\r\n            \"milestones_url\": \"https://api.github.com/repos/octo-org/octo-repo/milestones{/number}\",\r\n            \"notifications_url\": \"https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}\",\r\n            \"labels_url\": \"https://api.github.com/repos/octo-org/octo-repo/labels{/name}\",\r\n            \"releases_url\": \"https://api.github.com/repos/octo-org/octo-repo/releases{/id}\",\r\n            \"deployments_url\": \"https://api.github.com/repos/octo-org/octo-repo/deployments\"\r\n          }\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ WorkflowRun

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestWorkflowRunUsage_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "{\r\n          \"billable\": {\r\n            \"UBUNTU\": {\r\n              \"total_ms\": 180000,\r\n              \"jobs\": 1\r\n            },\r\n            \"MACOS\": {\r\n              \"total_ms\": 240000,\r\n              \"jobs\": 4\r\n            },\r\n            \"WINDOWS\": {\r\n              \"total_ms\": 300000,\r\n              \"jobs\": 2\r\n            }\r\n          },\r\n          \"run_duration_ms\": 500000\r\n        }",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ WorkflowRunUsage

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}

func TestWorkflowState_Decode(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{
			Input: "\"active\"",
		},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ WorkflowState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				t.Log("Input:", tc.Input)
				t.Fatalf("Unexpected error: %+v", err)
			}
		})
	}
}
