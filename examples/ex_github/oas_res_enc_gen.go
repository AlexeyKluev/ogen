// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func encodeActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse(response ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsAddSelectedRepoToOrgSecretResponse(response ActionsAddSelectedRepoToOrgSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActionsAddSelectedRepoToOrgSecretNoContent:
		w.WriteHeader(204)
		return nil
	case *ActionsAddSelectedRepoToOrgSecretConflict:
		w.WriteHeader(409)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}: unexpected response type: %T", response)
	}
}

func encodeActionsAddSelfHostedRunnerToGroupForOrgResponse(response ActionsAddSelfHostedRunnerToGroupForOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsApproveWorkflowRunResponse(response ActionsApproveWorkflowRunRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *EmptyObject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActionsApproveWorkflowRunApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActionsApproveWorkflowRunApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/actions/runs/{run_id}/approve: unexpected response type: %T", response)
	}
}

func encodeActionsCancelWorkflowRunResponse(response ActionsCancelWorkflowRunAccepted, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsCreateOrUpdateEnvironmentSecretResponse(response ActionsCreateOrUpdateEnvironmentSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *EmptyObject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActionsCreateOrUpdateEnvironmentSecretNoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}: unexpected response type: %T", response)
	}
}

func encodeActionsCreateOrUpdateOrgSecretResponse(response ActionsCreateOrUpdateOrgSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *EmptyObject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActionsCreateOrUpdateOrgSecretNoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/actions/secrets/{secret_name}: unexpected response type: %T", response)
	}
}

func encodeActionsCreateOrUpdateRepoSecretResponse(response ActionsCreateOrUpdateRepoSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActionsCreateOrUpdateRepoSecretCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActionsCreateOrUpdateRepoSecretNoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/actions/secrets/{secret_name}: unexpected response type: %T", response)
	}
}

func encodeActionsCreateRegistrationTokenForOrgResponse(response AuthenticationToken, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsCreateRegistrationTokenForRepoResponse(response AuthenticationToken, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsCreateRemoveTokenForOrgResponse(response AuthenticationToken, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsCreateRemoveTokenForRepoResponse(response AuthenticationToken, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsCreateSelfHostedRunnerGroupForOrgResponse(response RunnerGroupsOrg, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsDeleteArtifactResponse(response ActionsDeleteArtifactNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDeleteEnvironmentSecretResponse(response ActionsDeleteEnvironmentSecretNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDeleteOrgSecretResponse(response ActionsDeleteOrgSecretNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDeleteRepoSecretResponse(response ActionsDeleteRepoSecretNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDeleteSelfHostedRunnerFromOrgResponse(response ActionsDeleteSelfHostedRunnerFromOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDeleteSelfHostedRunnerFromRepoResponse(response ActionsDeleteSelfHostedRunnerFromRepoNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDeleteSelfHostedRunnerGroupFromOrgResponse(response ActionsDeleteSelfHostedRunnerGroupFromOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDeleteWorkflowRunResponse(response ActionsDeleteWorkflowRunNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDeleteWorkflowRunLogsResponse(response ActionsDeleteWorkflowRunLogsNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDisableSelectedRepositoryGithubActionsOrganizationResponse(response ActionsDisableSelectedRepositoryGithubActionsOrganizationNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDownloadArtifactResponse(response ActionsDownloadArtifactFound, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(302)
	return nil
}

func encodeActionsDownloadJobLogsForWorkflowRunResponse(response ActionsDownloadJobLogsForWorkflowRunFound, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(302)
	return nil
}

func encodeActionsDownloadWorkflowRunLogsResponse(response ActionsDownloadWorkflowRunLogsFound, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(302)
	return nil
}

func encodeActionsEnableSelectedRepositoryGithubActionsOrganizationResponse(response ActionsEnableSelectedRepositoryGithubActionsOrganizationNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsGetAllowedActionsOrganizationResponse(response SelectedActions, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetAllowedActionsRepositoryResponse(response SelectedActions, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetArtifactResponse(response Artifact, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetEnvironmentPublicKeyResponse(response ActionsPublicKey, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetEnvironmentSecretResponse(response ActionsSecret, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetGithubActionsPermissionsOrganizationResponse(response ActionsOrganizationPermissions, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetGithubActionsPermissionsRepositoryResponse(response ActionsRepositoryPermissions, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetJobForWorkflowRunResponse(response Job, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetOrgPublicKeyResponse(response ActionsPublicKey, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetOrgSecretResponse(response OrganizationActionsSecret, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetRepoPublicKeyResponse(response ActionsPublicKey, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetRepoSecretResponse(response ActionsSecret, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetReviewsForRunResponse(response []EnvironmentApprovals, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetSelfHostedRunnerForOrgResponse(response Runner, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetSelfHostedRunnerForRepoResponse(response Runner, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetSelfHostedRunnerGroupForOrgResponse(response RunnerGroupsOrg, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetWorkflowRunResponse(response WorkflowRun, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsGetWorkflowRunUsageResponse(response WorkflowRunUsage, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListArtifactsForRepoResponse(response ActionsListArtifactsForRepoOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListEnvironmentSecretsResponse(response ActionsListEnvironmentSecretsOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListJobsForWorkflowRunResponse(response ActionsListJobsForWorkflowRunOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListOrgSecretsResponse(response ActionsListOrgSecretsOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse(response ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListRepoSecretsResponse(response ActionsListRepoSecretsOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListRepoWorkflowsResponse(response ActionsListRepoWorkflowsOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListRunnerApplicationsForOrgResponse(response []RunnerApplication, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListRunnerApplicationsForRepoResponse(response []RunnerApplication, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListSelectedReposForOrgSecretResponse(response ActionsListSelectedReposForOrgSecretOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse(response ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListSelfHostedRunnerGroupsForOrgResponse(response ActionsListSelfHostedRunnerGroupsForOrgOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListSelfHostedRunnersForOrgResponse(response ActionsListSelfHostedRunnersForOrgOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListSelfHostedRunnersForRepoResponse(response ActionsListSelfHostedRunnersForRepoOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListSelfHostedRunnersInGroupForOrgResponse(response ActionsListSelfHostedRunnersInGroupForOrgOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListWorkflowRunArtifactsResponse(response ActionsListWorkflowRunArtifactsOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsListWorkflowRunsForRepoResponse(response ActionsListWorkflowRunsForRepoOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsReRunWorkflowResponse(response ActionsReRunWorkflowCreated, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponse(response ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsRemoveSelectedRepoFromOrgSecretResponse(response ActionsRemoveSelectedRepoFromOrgSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActionsRemoveSelectedRepoFromOrgSecretNoContent:
		w.WriteHeader(204)
		return nil
	case *ActionsRemoveSelectedRepoFromOrgSecretConflict:
		w.WriteHeader(409)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}: unexpected response type: %T", response)
	}
}

func encodeActionsRemoveSelfHostedRunnerFromGroupForOrgResponse(response ActionsRemoveSelfHostedRunnerFromGroupForOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsRetryWorkflowResponse(response ActionsRetryWorkflowCreated, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActionsSetAllowedActionsOrganizationResponse(response ActionsSetAllowedActionsOrganizationNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsSetAllowedActionsRepositoryResponse(response ActionsSetAllowedActionsRepositoryNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsSetGithubActionsPermissionsOrganizationResponse(response ActionsSetGithubActionsPermissionsOrganizationNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsSetGithubActionsPermissionsRepositoryResponse(response ActionsSetGithubActionsPermissionsRepositoryNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponse(response ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsSetSelectedReposForOrgSecretResponse(response ActionsSetSelectedReposForOrgSecretNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse(response ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsSetSelfHostedRunnersInGroupForOrgResponse(response ActionsSetSelfHostedRunnersInGroupForOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsUpdateSelfHostedRunnerGroupForOrgResponse(response RunnerGroupsOrg, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityCheckRepoIsStarredByAuthenticatedUserResponse(response ActivityCheckRepoIsStarredByAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityCheckRepoIsStarredByAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/starred/{owner}/{repo}: unexpected response type: %T", response)
	}
}

func encodeActivityDeleteRepoSubscriptionResponse(response ActivityDeleteRepoSubscriptionNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeActivityDeleteThreadSubscriptionResponse(response ActivityDeleteThreadSubscriptionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityDeleteThreadSubscriptionNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityDeleteThreadSubscriptionApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/notifications/threads/{thread_id}/subscription: unexpected response type: %T", response)
	}
}

func encodeActivityGetFeedsResponse(response Feed, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityGetRepoSubscriptionResponse(response ActivityGetRepoSubscriptionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *RepositorySubscription:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityGetRepoSubscriptionNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/subscription: unexpected response type: %T", response)
	}
}

func encodeActivityGetThreadResponse(response ActivityGetThreadRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Thread:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityGetThreadApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityGetThreadApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/notifications/threads/{thread_id}: unexpected response type: %T", response)
	}
}

func encodeActivityGetThreadSubscriptionForAuthenticatedUserResponse(response ActivityGetThreadSubscriptionForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ThreadSubscription:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/notifications/threads/{thread_id}/subscription: unexpected response type: %T", response)
	}
}

func encodeActivityListEventsForAuthenticatedUserResponse(response []Event, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityListOrgEventsForAuthenticatedUserResponse(response []Event, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityListPublicEventsResponse(response ActivityListPublicEventsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityListPublicEventsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/events: unexpected response type: %T", response)
	}
}

func encodeActivityListPublicEventsForRepoNetworkResponse(response ActivityListPublicEventsForRepoNetworkRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityListPublicEventsForRepoNetworkOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(301)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/networks/{owner}/{repo}/events: unexpected response type: %T", response)
	}
}

func encodeActivityListPublicEventsForUserResponse(response []Event, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityListPublicOrgEventsResponse(response []Event, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityListReceivedEventsForUserResponse(response []Event, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityListReceivedPublicEventsForUserResponse(response []Event, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityListRepoEventsResponse(response []Event, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityListRepoNotificationsForAuthenticatedUserResponse(response []Thread, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityListReposStarredByAuthenticatedUserResponse(response ActivityListReposStarredByAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityListReposStarredByAuthenticatedUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityListReposStarredByAuthenticatedUserOKApplicationVndGithubV3StarJSON:
		w.Header().Set("Content-Type", "application/vnd.github.v3.star+json")
		w.WriteHeader(200)
		return fmt.Errorf("application/vnd.github.v3.star+json encoder not implemented")
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityListReposStarredByAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityListReposStarredByAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/starred: unexpected response type: %T", response)
	}
}

func encodeActivityListReposWatchedByUserResponse(response []MinimalRepository, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityListWatchedReposForAuthenticatedUserResponse(response ActivityListWatchedReposForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityListWatchedReposForAuthenticatedUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/subscriptions: unexpected response type: %T", response)
	}
}

func encodeActivityListWatchersForRepoResponse(response []SimpleUser, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivityMarkNotificationsAsReadResponse(response ActivityMarkNotificationsAsReadRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityMarkNotificationsAsReadAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityMarkNotificationsAsReadResetContent:
		w.WriteHeader(205)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityMarkNotificationsAsReadApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityMarkNotificationsAsReadApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/notifications: unexpected response type: %T", response)
	}
}

func encodeActivityMarkRepoNotificationsAsReadResponse(response ActivityMarkRepoNotificationsAsReadRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityMarkRepoNotificationsAsReadAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityMarkRepoNotificationsAsReadResetContent:
		w.WriteHeader(205)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/notifications: unexpected response type: %T", response)
	}
}

func encodeActivityMarkThreadAsReadResponse(response ActivityMarkThreadAsReadRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityMarkThreadAsReadResetContent:
		w.WriteHeader(205)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/notifications/threads/{thread_id}: unexpected response type: %T", response)
	}
}

func encodeActivitySetRepoSubscriptionResponse(response RepositorySubscription, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeActivitySetThreadSubscriptionResponse(response ActivitySetThreadSubscriptionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ThreadSubscription:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivitySetThreadSubscriptionApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivitySetThreadSubscriptionApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/notifications/threads/{thread_id}/subscription: unexpected response type: %T", response)
	}
}

func encodeActivityStarRepoForAuthenticatedUserResponse(response ActivityStarRepoForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityStarRepoForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/starred/{owner}/{repo}: unexpected response type: %T", response)
	}
}

func encodeActivityUnstarRepoForAuthenticatedUserResponse(response ActivityUnstarRepoForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ActivityUnstarRepoForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/starred/{owner}/{repo}: unexpected response type: %T", response)
	}
}

func encodeAppsAddRepoToInstallationResponse(response AppsAddRepoToInstallationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsAddRepoToInstallationNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *AppsAddRepoToInstallationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsAddRepoToInstallationApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/installations/{installation_id}/repositories/{repository_id}: unexpected response type: %T", response)
	}
}

func encodeAppsDeleteInstallationResponse(response AppsDeleteInstallationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsDeleteInstallationNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/app/installations/{installation_id}: unexpected response type: %T", response)
	}
}

func encodeAppsGetAuthenticatedResponse(response Integration, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeAppsGetBySlugResponse(response AppsGetBySlugRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Integration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsGetBySlugApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsGetBySlugApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/apps/{app_slug}: unexpected response type: %T", response)
	}
}

func encodeAppsGetSubscriptionPlanForAccountResponse(response AppsGetSubscriptionPlanForAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MarketplacePurchase:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsGetSubscriptionPlanForAccountApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/marketplace_listing/accounts/{account_id}: unexpected response type: %T", response)
	}
}

func encodeAppsGetSubscriptionPlanForAccountStubbedResponse(response AppsGetSubscriptionPlanForAccountStubbedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MarketplacePurchase:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsGetSubscriptionPlanForAccountStubbedNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/marketplace_listing/stubbed/accounts/{account_id}: unexpected response type: %T", response)
	}
}

func encodeAppsGetWebhookConfigForAppResponse(response WebhookConfig, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeAppsListAccountsForPlanStubbedResponse(response AppsListAccountsForPlanStubbedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsListAccountsForPlanStubbedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/marketplace_listing/stubbed/plans/{plan_id}/accounts: unexpected response type: %T", response)
	}
}

func encodeAppsListInstallationReposForAuthenticatedUserResponse(response AppsListInstallationReposForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsListInstallationReposForAuthenticatedUserOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/installations/{installation_id}/repositories: unexpected response type: %T", response)
	}
}

func encodeAppsListPlansResponse(response AppsListPlansRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsListPlansOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsListPlansApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsListPlansApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/marketplace_listing/plans: unexpected response type: %T", response)
	}
}

func encodeAppsListPlansStubbedResponse(response AppsListPlansStubbedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsListPlansStubbedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/marketplace_listing/stubbed/plans: unexpected response type: %T", response)
	}
}

func encodeAppsListReposAccessibleToInstallationResponse(response AppsListReposAccessibleToInstallationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsListReposAccessibleToInstallationOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *AppsListReposAccessibleToInstallationApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsListReposAccessibleToInstallationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/installation/repositories: unexpected response type: %T", response)
	}
}

func encodeAppsListSubscriptionsForAuthenticatedUserResponse(response AppsListSubscriptionsForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsListSubscriptionsForAuthenticatedUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/marketplace_purchases: unexpected response type: %T", response)
	}
}

func encodeAppsListSubscriptionsForAuthenticatedUserStubbedResponse(response AppsListSubscriptionsForAuthenticatedUserStubbedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsListSubscriptionsForAuthenticatedUserStubbedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/marketplace_purchases/stubbed: unexpected response type: %T", response)
	}
}

func encodeAppsRemoveRepoFromInstallationResponse(response AppsRemoveRepoFromInstallationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsRemoveRepoFromInstallationNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *AppsRemoveRepoFromInstallationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *AppsRemoveRepoFromInstallationApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/installations/{installation_id}/repositories/{repository_id}: unexpected response type: %T", response)
	}
}

func encodeAppsRevokeInstallationAccessTokenResponse(response AppsRevokeInstallationAccessTokenNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeAppsSuspendInstallationResponse(response AppsSuspendInstallationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsSuspendInstallationNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/app/installations/{installation_id}/suspended: unexpected response type: %T", response)
	}
}

func encodeAppsUnsuspendInstallationResponse(response AppsUnsuspendInstallationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AppsUnsuspendInstallationNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/app/installations/{installation_id}/suspended: unexpected response type: %T", response)
	}
}

func encodeAppsUpdateWebhookConfigForAppResponse(response WebhookConfig, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeBillingGetGithubActionsBillingGheResponse(response ActionsBillingUsage, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeBillingGetGithubActionsBillingOrgResponse(response ActionsBillingUsage, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeBillingGetGithubActionsBillingUserResponse(response ActionsBillingUsage, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeBillingGetGithubPackagesBillingGheResponse(response PackagesBillingUsage, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeBillingGetGithubPackagesBillingOrgResponse(response PackagesBillingUsage, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeBillingGetGithubPackagesBillingUserResponse(response PackagesBillingUsage, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeBillingGetSharedStorageBillingGheResponse(response CombinedBillingUsage, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeBillingGetSharedStorageBillingOrgResponse(response CombinedBillingUsage, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeBillingGetSharedStorageBillingUserResponse(response CombinedBillingUsage, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeChecksCreateSuiteResponse(response ChecksCreateSuiteRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ChecksCreateSuiteApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ChecksCreateSuiteApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/check-suites: unexpected response type: %T", response)
	}
}

func encodeChecksGetResponse(response CheckRun, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeChecksGetSuiteResponse(response CheckSuite, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeChecksListAnnotationsResponse(response []CheckAnnotation, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeChecksListForRefResponse(response ChecksListForRefOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeChecksListForSuiteResponse(response ChecksListForSuiteOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeChecksListSuitesForRefResponse(response ChecksListSuitesForRefOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeChecksRerequestSuiteResponse(response ChecksRerequestSuiteCreated, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeChecksSetSuitesPreferencesResponse(response CheckSuitePreference, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeCodeScanningDeleteAnalysisResponse(response CodeScanningDeleteAnalysisRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodeScanningAnalysisDeletion:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningDeleteAnalysisApplicationJSONBadRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ScimError:
		w.Header().Set("Content-Type", "application/scim+json")
		w.WriteHeader(400)
		return fmt.Errorf("application/scim+json encoder not implemented")
	case *CodeScanningDeleteAnalysisApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningDeleteAnalysisApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}: unexpected response type: %T", response)
	}
}

func encodeCodeScanningGetAlertResponse(response CodeScanningGetAlertRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodeScanningAlert:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningGetAlertApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningGetAlertApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}: unexpected response type: %T", response)
	}
}

func encodeCodeScanningGetAnalysisResponse(response CodeScanningGetAnalysisRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodeScanningAnalysis:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningGetAnalysisOKApplicationJSONSarif:
		w.Header().Set("Content-Type", "application/json+sarif")
		w.WriteHeader(200)
		return fmt.Errorf("application/json+sarif encoder not implemented")
	case *CodeScanningGetAnalysisApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningGetAnalysisApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}: unexpected response type: %T", response)
	}
}

func encodeCodeScanningGetSarifResponse(response CodeScanningGetSarifRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodeScanningSarifsStatus:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningGetSarifNotFound:
		w.WriteHeader(404)
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}: unexpected response type: %T", response)
	}
}

func encodeCodeScanningListAlertInstancesResponse(response CodeScanningListAlertInstancesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodeScanningListAlertInstancesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningListAlertInstancesApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningListAlertInstancesApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances: unexpected response type: %T", response)
	}
}

func encodeCodeScanningListAlertsForRepoResponse(response CodeScanningListAlertsForRepoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodeScanningListAlertsForRepoOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningListAlertsForRepoApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningListAlertsForRepoApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/alerts: unexpected response type: %T", response)
	}
}

func encodeCodeScanningListRecentAnalysesResponse(response CodeScanningListRecentAnalysesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodeScanningListRecentAnalysesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningListRecentAnalysesApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningListRecentAnalysesApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/analyses: unexpected response type: %T", response)
	}
}

func encodeCodeScanningUpdateAlertResponse(response CodeScanningUpdateAlertRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodeScanningAlert:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningUpdateAlertApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningUpdateAlertApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}: unexpected response type: %T", response)
	}
}

func encodeCodeScanningUploadSarifResponse(response CodeScanningUploadSarifRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodeScanningSarifsReceipt:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningUploadSarifBadRequest:
		w.WriteHeader(400)
		return nil
	case *CodeScanningUploadSarifApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningUploadSarifApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *CodeScanningUploadSarifRequestEntityTooLarge:
		w.WriteHeader(413)
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/sarifs: unexpected response type: %T", response)
	}
}

func encodeCodesOfConductGetAllCodesOfConductResponse(response CodesOfConductGetAllCodesOfConductRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodesOfConductGetAllCodesOfConductOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/codes_of_conduct: unexpected response type: %T", response)
	}
}

func encodeCodesOfConductGetConductCodeResponse(response CodesOfConductGetConductCodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CodeOfConduct:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/codes_of_conduct/{key}: unexpected response type: %T", response)
	}
}

func encodeEmojisGetResponse(response EmojisGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *EmojisGetOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/emojis: unexpected response type: %T", response)
	}
}

func encodeEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse(response EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminCreateRegistrationTokenForEnterpriseResponse(response AuthenticationToken, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminCreateRemoveTokenForEnterpriseResponse(response AuthenticationToken, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse(response RunnerGroupsEnterprise, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminDeleteScimGroupFromEnterpriseResponse(response EnterpriseAdminDeleteScimGroupFromEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse(response EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse(response EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminDeleteUserFromEnterpriseResponse(response EnterpriseAdminDeleteUserFromEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse(response EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse(response EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminGetAllowedActionsEnterpriseResponse(response SelectedActions, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminGetAuditLogResponse(response []AuditLogEvent, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse(response ActionsEnterprisePermissions, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse(response ScimEnterpriseGroup, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse(response ScimEnterpriseUser, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse(response Runner, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse(response RunnerGroupsEnterprise, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminListProvisionedGroupsEnterpriseResponse(response ScimGroupListEnterprise, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminListProvisionedIdentitiesEnterpriseResponse(response ScimUserListEnterprise, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminListRunnerApplicationsForEnterpriseResponse(response []RunnerApplication, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(response EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse(response EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminListSelfHostedRunnersForEnterpriseResponse(response EnterpriseAdminListSelfHostedRunnersForEnterpriseOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse(response EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminProvisionAndInviteEnterpriseGroupResponse(response ScimEnterpriseGroup, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminProvisionAndInviteEnterpriseUserResponse(response ScimEnterpriseUser, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse(response EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminSetAllowedActionsEnterpriseResponse(response EnterpriseAdminSetAllowedActionsEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse(response EnterpriseAdminSetGithubActionsPermissionsEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponse(response ScimEnterpriseGroup, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserResponse(response ScimEnterpriseUser, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(response EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse(response EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminUpdateAttributeForEnterpriseUserResponse(response ScimEnterpriseUser, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse(response RunnerGroupsEnterprise, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeGistsCheckIsStarredResponse(response GistsCheckIsStarredRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistsCheckIsStarredNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *GistsCheckIsStarredNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/star: unexpected response type: %T", response)
	}
}

func encodeGistsCreateCommentResponse(response GistsCreateCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsCreateCommentApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *GistsCreateCommentApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/comments: unexpected response type: %T", response)
	}
}

func encodeGistsDeleteResponse(response GistsDeleteRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistsDeleteNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsDeleteApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *GistsDeleteApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}: unexpected response type: %T", response)
	}
}

func encodeGistsDeleteCommentResponse(response GistsDeleteCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistsDeleteCommentNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsDeleteCommentApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *GistsDeleteCommentApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/comments/{comment_id}: unexpected response type: %T", response)
	}
}

func encodeGistsGetResponse(response GistsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ForbiddenGist:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}: unexpected response type: %T", response)
	}
}

func encodeGistsGetCommentResponse(response GistsGetCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ForbiddenGist:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/comments/{comment_id}: unexpected response type: %T", response)
	}
}

func encodeGistsListResponse(response GistsListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistsListOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists: unexpected response type: %T", response)
	}
}

func encodeGistsListCommentsResponse(response GistsListCommentsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistsListCommentsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsListCommentsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *GistsListCommentsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/comments: unexpected response type: %T", response)
	}
}

func encodeGistsListCommitsResponse(response GistsListCommitsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistsListCommitsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsListCommitsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *GistsListCommitsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/commits: unexpected response type: %T", response)
	}
}

func encodeGistsListForksResponse(response GistsListForksRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistsListForksOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsListForksApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *GistsListForksApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/forks: unexpected response type: %T", response)
	}
}

func encodeGistsListStarredResponse(response GistsListStarredRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistsListStarredOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsListStarredApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *GistsListStarredApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/starred: unexpected response type: %T", response)
	}
}

func encodeGistsStarResponse(response GistsStarRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistsStarNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsStarApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *GistsStarApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/star: unexpected response type: %T", response)
	}
}

func encodeGistsUnstarResponse(response GistsUnstarRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistsUnstarNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsUnstarApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *GistsUnstarApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/star: unexpected response type: %T", response)
	}
}

func encodeGistsUpdateCommentResponse(response GistsUpdateCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GistComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/comments/{comment_id}: unexpected response type: %T", response)
	}
}

func encodeGitGetCommitResponse(response GitGetCommitRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GitCommit:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/git/commits/{commit_sha}: unexpected response type: %T", response)
	}
}

func encodeGitGetRefResponse(response GitGetRefRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GitRef:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/git/ref/{ref}: unexpected response type: %T", response)
	}
}

func encodeGitGetTagResponse(response GitGetTagRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GitTag:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/git/tags/{tag_sha}: unexpected response type: %T", response)
	}
}

func encodeGitListMatchingRefsResponse(response []GitRef, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeGitignoreGetAllTemplatesResponse(response GitignoreGetAllTemplatesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GitignoreGetAllTemplatesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/gitignore/templates: unexpected response type: %T", response)
	}
}

func encodeGitignoreGetTemplateResponse(response GitignoreGetTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GitignoreTemplate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/gitignore/templates/{name}: unexpected response type: %T", response)
	}
}

func encodeInteractionsRemoveRestrictionsForAuthenticatedUserResponse(response InteractionsRemoveRestrictionsForAuthenticatedUserNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeInteractionsRemoveRestrictionsForOrgResponse(response InteractionsRemoveRestrictionsForOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeInteractionsRemoveRestrictionsForRepoResponse(response InteractionsRemoveRestrictionsForRepoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *InteractionsRemoveRestrictionsForRepoNoContent:
		w.WriteHeader(204)
		return nil
	case *InteractionsRemoveRestrictionsForRepoConflict:
		w.WriteHeader(409)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/interaction-limits: unexpected response type: %T", response)
	}
}

func encodeInteractionsSetRestrictionsForRepoResponse(response InteractionsSetRestrictionsForRepoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *InteractionLimitResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *InteractionsSetRestrictionsForRepoConflict:
		w.WriteHeader(409)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/interaction-limits: unexpected response type: %T", response)
	}
}

func encodeIssuesAddAssigneesResponse(response IssueSimple, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeIssuesCheckUserCanBeAssignedResponse(response IssuesCheckUserCanBeAssignedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssuesCheckUserCanBeAssignedNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/assignees/{assignee}: unexpected response type: %T", response)
	}
}

func encodeIssuesDeleteCommentResponse(response IssuesDeleteCommentNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeIssuesDeleteLabelResponse(response IssuesDeleteLabelNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeIssuesDeleteMilestoneResponse(response IssuesDeleteMilestoneRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssuesDeleteMilestoneNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/milestones/{milestone_number}: unexpected response type: %T", response)
	}
}

func encodeIssuesGetCommentResponse(response IssuesGetCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssueComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/comments/{comment_id}: unexpected response type: %T", response)
	}
}

func encodeIssuesGetEventResponse(response IssuesGetEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssueEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *IssuesGetEventApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *IssuesGetEventApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *IssuesGetEventApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/events/{event_id}: unexpected response type: %T", response)
	}
}

func encodeIssuesGetLabelResponse(response IssuesGetLabelRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Label:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/labels/{name}: unexpected response type: %T", response)
	}
}

func encodeIssuesGetMilestoneResponse(response IssuesGetMilestoneRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Milestone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/milestones/{milestone_number}: unexpected response type: %T", response)
	}
}

func encodeIssuesListAssigneesResponse(response IssuesListAssigneesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssuesListAssigneesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/assignees: unexpected response type: %T", response)
	}
}

func encodeIssuesListCommentsResponse(response IssuesListCommentsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssuesListCommentsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *IssuesListCommentsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *IssuesListCommentsApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/comments: unexpected response type: %T", response)
	}
}

func encodeIssuesListLabelsForMilestoneResponse(response []Label, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeIssuesListLabelsForRepoResponse(response IssuesListLabelsForRepoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssuesListLabelsForRepoOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/labels: unexpected response type: %T", response)
	}
}

func encodeIssuesListLabelsOnIssueResponse(response IssuesListLabelsOnIssueRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssuesListLabelsOnIssueOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/labels: unexpected response type: %T", response)
	}
}

func encodeIssuesListMilestonesResponse(response IssuesListMilestonesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssuesListMilestonesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/milestones: unexpected response type: %T", response)
	}
}

func encodeIssuesRemoveAllLabelsResponse(response IssuesRemoveAllLabelsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssuesRemoveAllLabelsNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/labels: unexpected response type: %T", response)
	}
}

func encodeIssuesRemoveAssigneesResponse(response IssueSimple, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeIssuesRemoveLabelResponse(response IssuesRemoveLabelRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssuesRemoveLabelOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *IssuesRemoveLabelApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *IssuesRemoveLabelApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}: unexpected response type: %T", response)
	}
}

func encodeIssuesUnlockResponse(response IssuesUnlockRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IssuesUnlockNoContent:
		w.WriteHeader(204)
		return nil
	case *IssuesUnlockApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *IssuesUnlockApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/lock: unexpected response type: %T", response)
	}
}

func encodeIssuesUpdateLabelResponse(response Label, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeIssuesUpdateMilestoneResponse(response Milestone, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeLicensesGetResponse(response LicensesGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *License:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *LicensesGetApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *LicensesGetApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/licenses/{license}: unexpected response type: %T", response)
	}
}

func encodeLicensesGetAllCommonlyUsedResponse(response LicensesGetAllCommonlyUsedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *LicensesGetAllCommonlyUsedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/licenses: unexpected response type: %T", response)
	}
}

func encodeLicensesGetForRepoResponse(response LicenseContent, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeMarkdownRenderResponse(response MarkdownRenderRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MarkdownRenderOKTextHTML:
		w.Header().Set("Content-Type", "text/html")
		w.WriteHeader(200)
		return fmt.Errorf("text/html encoder not implemented")
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/markdown: unexpected response type: %T", response)
	}
}

func encodeMarkdownRenderRawResponse(response MarkdownRenderRawRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MarkdownRenderRawOKTextHTML:
		w.Header().Set("Content-Type", "text/html")
		w.WriteHeader(200)
		return fmt.Errorf("text/html encoder not implemented")
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/markdown/raw: unexpected response type: %T", response)
	}
}

func encodeMetaGetResponse(response MetaGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *APIOverview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/meta: unexpected response type: %T", response)
	}
}

func encodeMetaGetOctocatResponse(response string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/octocat-stream")
	w.WriteHeader(200)
	return fmt.Errorf("application/octocat-stream encoder not implemented")
}

func encodeMetaGetZenResponse(response string, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)
	return fmt.Errorf("text/plain encoder not implemented")
}

func encodeMetaRootResponse(response MetaRootOK, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeMigrationsCancelImportResponse(response MigrationsCancelImportNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeMigrationsDeleteArchiveForAuthenticatedUserResponse(response MigrationsDeleteArchiveForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MigrationsDeleteArchiveForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/migrations/{migration_id}/archive: unexpected response type: %T", response)
	}
}

func encodeMigrationsDeleteArchiveForOrgResponse(response MigrationsDeleteArchiveForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MigrationsDeleteArchiveForOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/migrations/{migration_id}/archive: unexpected response type: %T", response)
	}
}

func encodeMigrationsDownloadArchiveForOrgResponse(response MigrationsDownloadArchiveForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MigrationsDownloadArchiveForOrgFound:
		w.WriteHeader(302)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/migrations/{migration_id}/archive: unexpected response type: %T", response)
	}
}

func encodeMigrationsGetArchiveForAuthenticatedUserResponse(response MigrationsGetArchiveForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MigrationsGetArchiveForAuthenticatedUserFound:
		w.WriteHeader(302)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/migrations/{migration_id}/archive: unexpected response type: %T", response)
	}
}

func encodeMigrationsGetCommitAuthorsResponse(response MigrationsGetCommitAuthorsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MigrationsGetCommitAuthorsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/import/authors: unexpected response type: %T", response)
	}
}

func encodeMigrationsGetImportStatusResponse(response MigrationsGetImportStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Import:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/import: unexpected response type: %T", response)
	}
}

func encodeMigrationsGetLargeFilesResponse(response []PorterLargeFile, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeMigrationsGetStatusForAuthenticatedUserResponse(response MigrationsGetStatusForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Migration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/migrations/{migration_id}: unexpected response type: %T", response)
	}
}

func encodeMigrationsGetStatusForOrgResponse(response MigrationsGetStatusForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Migration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/migrations/{migration_id}: unexpected response type: %T", response)
	}
}

func encodeMigrationsListForAuthenticatedUserResponse(response MigrationsListForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MigrationsListForAuthenticatedUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *MigrationsListForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *MigrationsListForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/migrations: unexpected response type: %T", response)
	}
}

func encodeMigrationsListForOrgResponse(response []Migration, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeMigrationsListReposForOrgResponse(response MigrationsListReposForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MigrationsListReposForOrgOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/migrations/{migration_id}/repositories: unexpected response type: %T", response)
	}
}

func encodeMigrationsListReposForUserResponse(response MigrationsListReposForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MigrationsListReposForUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/migrations/{migration_id}/repositories: unexpected response type: %T", response)
	}
}

func encodeMigrationsUnlockRepoForAuthenticatedUserResponse(response MigrationsUnlockRepoForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MigrationsUnlockRepoForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/migrations/{migration_id}/repos/{repo_name}/lock: unexpected response type: %T", response)
	}
}

func encodeMigrationsUnlockRepoForOrgResponse(response MigrationsUnlockRepoForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MigrationsUnlockRepoForOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock: unexpected response type: %T", response)
	}
}

func encodeMigrationsUpdateImportResponse(response Import, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeOAuthAuthorizationsDeleteAuthorizationResponse(response OAuthAuthorizationsDeleteAuthorizationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OAuthAuthorizationsDeleteAuthorizationNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/authorizations/{authorization_id}: unexpected response type: %T", response)
	}
}

func encodeOAuthAuthorizationsDeleteGrantResponse(response OAuthAuthorizationsDeleteGrantRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OAuthAuthorizationsDeleteGrantNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OAuthAuthorizationsDeleteGrantApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/applications/grants/{grant_id}: unexpected response type: %T", response)
	}
}

func encodeOAuthAuthorizationsGetAuthorizationResponse(response OAuthAuthorizationsGetAuthorizationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Authorization:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/authorizations/{authorization_id}: unexpected response type: %T", response)
	}
}

func encodeOAuthAuthorizationsGetGrantResponse(response OAuthAuthorizationsGetGrantRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ApplicationGrant:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsGetGrantApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OAuthAuthorizationsGetGrantApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/applications/grants/{grant_id}: unexpected response type: %T", response)
	}
}

func encodeOAuthAuthorizationsListAuthorizationsResponse(response OAuthAuthorizationsListAuthorizationsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OAuthAuthorizationsListAuthorizationsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/authorizations: unexpected response type: %T", response)
	}
}

func encodeOAuthAuthorizationsListGrantsResponse(response OAuthAuthorizationsListGrantsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OAuthAuthorizationsListGrantsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsListGrantsApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OAuthAuthorizationsListGrantsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OAuthAuthorizationsListGrantsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/applications/grants: unexpected response type: %T", response)
	}
}

func encodeOrgsCheckBlockedUserResponse(response OrgsCheckBlockedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsCheckBlockedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/blocks/{username}: unexpected response type: %T", response)
	}
}

func encodeOrgsCheckMembershipForUserResponse(response OrgsCheckMembershipForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsCheckMembershipForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *OrgsCheckMembershipForUserFound:
		w.WriteHeader(302)
		return nil
	case *OrgsCheckMembershipForUserNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/members/{username}: unexpected response type: %T", response)
	}
}

func encodeOrgsCheckPublicMembershipForUserResponse(response OrgsCheckPublicMembershipForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsCheckPublicMembershipForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *OrgsCheckPublicMembershipForUserNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/public_members/{username}: unexpected response type: %T", response)
	}
}

func encodeOrgsConvertMemberToOutsideCollaboratorResponse(response OrgsConvertMemberToOutsideCollaboratorRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsConvertMemberToOutsideCollaboratorAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OrgsConvertMemberToOutsideCollaboratorNoContent:
		w.WriteHeader(204)
		return nil
	case *OrgsConvertMemberToOutsideCollaboratorForbidden:
		w.WriteHeader(403)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/outside_collaborators/{username}: unexpected response type: %T", response)
	}
}

func encodeOrgsDeleteWebhookResponse(response OrgsDeleteWebhookRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsDeleteWebhookNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/hooks/{hook_id}: unexpected response type: %T", response)
	}
}

func encodeOrgsGetResponse(response OrgsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrganizationFull:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}: unexpected response type: %T", response)
	}
}

func encodeOrgsGetAuditLogResponse(response []AuditLogEvent, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeOrgsGetMembershipForAuthenticatedUserResponse(response OrgsGetMembershipForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/memberships/orgs/{org}: unexpected response type: %T", response)
	}
}

func encodeOrgsGetMembershipForUserResponse(response OrgsGetMembershipForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OrgsGetMembershipForUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OrgsGetMembershipForUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/memberships/{username}: unexpected response type: %T", response)
	}
}

func encodeOrgsGetWebhookResponse(response OrgsGetWebhookRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgHook:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/hooks/{hook_id}: unexpected response type: %T", response)
	}
}

func encodeOrgsGetWebhookConfigForOrgResponse(response WebhookConfig, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeOrgsListResponse(response OrgsListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsListOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/organizations: unexpected response type: %T", response)
	}
}

func encodeOrgsListBlockedUsersResponse(response OrgsListBlockedUsersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsListBlockedUsersOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/blocks: unexpected response type: %T", response)
	}
}

func encodeOrgsListFailedInvitationsResponse(response OrgsListFailedInvitationsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsListFailedInvitationsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/failed_invitations: unexpected response type: %T", response)
	}
}

func encodeOrgsListForAuthenticatedUserResponse(response OrgsListForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsListForAuthenticatedUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OrgsListForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OrgsListForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/orgs: unexpected response type: %T", response)
	}
}

func encodeOrgsListForUserResponse(response []OrganizationSimple, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeOrgsListInvitationTeamsResponse(response OrgsListInvitationTeamsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsListInvitationTeamsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/invitations/{invitation_id}/teams: unexpected response type: %T", response)
	}
}

func encodeOrgsListOutsideCollaboratorsResponse(response []SimpleUser, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeOrgsListPendingInvitationsResponse(response OrgsListPendingInvitationsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsListPendingInvitationsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/invitations: unexpected response type: %T", response)
	}
}

func encodeOrgsListPublicMembersResponse(response []SimpleUser, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeOrgsListSamlSSOAuthorizationsResponse(response []CredentialAuthorization, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeOrgsListWebhooksResponse(response OrgsListWebhooksRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsListWebhooksOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/hooks: unexpected response type: %T", response)
	}
}

func encodeOrgsPingWebhookResponse(response OrgsPingWebhookRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsPingWebhookNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/hooks/{hook_id}/pings: unexpected response type: %T", response)
	}
}

func encodeOrgsRemoveMemberResponse(response OrgsRemoveMemberRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsRemoveMemberNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/members/{username}: unexpected response type: %T", response)
	}
}

func encodeOrgsRemoveMembershipForUserResponse(response OrgsRemoveMembershipForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsRemoveMembershipForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *OrgsRemoveMembershipForUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *OrgsRemoveMembershipForUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/memberships/{username}: unexpected response type: %T", response)
	}
}

func encodeOrgsRemoveOutsideCollaboratorResponse(response OrgsRemoveOutsideCollaboratorRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsRemoveOutsideCollaboratorNoContent:
		w.WriteHeader(204)
		return nil
	case *OrgsRemoveOutsideCollaboratorUnprocessableEntity:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/outside_collaborators/{username}: unexpected response type: %T", response)
	}
}

func encodeOrgsRemovePublicMembershipForAuthenticatedUserResponse(response OrgsRemovePublicMembershipForAuthenticatedUserNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeOrgsRemoveSamlSSOAuthorizationResponse(response OrgsRemoveSamlSSOAuthorizationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsRemoveSamlSSOAuthorizationNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/credential-authorizations/{credential_id}: unexpected response type: %T", response)
	}
}

func encodeOrgsSetPublicMembershipForAuthenticatedUserResponse(response OrgsSetPublicMembershipForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *OrgsSetPublicMembershipForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/public_members/{username}: unexpected response type: %T", response)
	}
}

func encodeOrgsUnblockUserResponse(response OrgsUnblockUserNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeOrgsUpdateWebhookConfigForOrgResponse(response WebhookConfig, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePackagesDeletePackageForAuthenticatedUserResponse(response PackagesDeletePackageForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesDeletePackageForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesDeletePackageForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/packages/{package_type}/{package_name}: unexpected response type: %T", response)
	}
}

func encodePackagesDeletePackageForOrgResponse(response PackagesDeletePackageForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesDeletePackageForOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesDeletePackageForOrgApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageForOrgApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageForOrgApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/packages/{package_type}/{package_name}: unexpected response type: %T", response)
	}
}

func encodePackagesDeletePackageForUserResponse(response PackagesDeletePackageForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesDeletePackageForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesDeletePackageForUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageForUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageForUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/users/{username}/packages/{package_type}/{package_name}: unexpected response type: %T", response)
	}
}

func encodePackagesDeletePackageVersionForAuthenticatedUserResponse(response PackagesDeletePackageVersionForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesDeletePackageVersionForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/packages/{package_type}/{package_name}/versions/{package_version_id}: unexpected response type: %T", response)
	}
}

func encodePackagesDeletePackageVersionForOrgResponse(response PackagesDeletePackageVersionForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesDeletePackageVersionForOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesDeletePackageVersionForOrgApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageVersionForOrgApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageVersionForOrgApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}: unexpected response type: %T", response)
	}
}

func encodePackagesDeletePackageVersionForUserResponse(response PackagesDeletePackageVersionForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesDeletePackageVersionForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesDeletePackageVersionForUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageVersionForUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesDeletePackageVersionForUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}: unexpected response type: %T", response)
	}
}

func encodePackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse(response PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/packages/{package_type}/{package_name}/versions: unexpected response type: %T", response)
	}
}

func encodePackagesGetAllPackageVersionsForPackageOwnedByOrgResponse(response PackagesGetAllPackageVersionsForPackageOwnedByOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/packages/{package_type}/{package_name}/versions: unexpected response type: %T", response)
	}
}

func encodePackagesGetAllPackageVersionsForPackageOwnedByUserResponse(response PackagesGetAllPackageVersionsForPackageOwnedByUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/users/{username}/packages/{package_type}/{package_name}/versions: unexpected response type: %T", response)
	}
}

func encodePackagesGetPackageForAuthenticatedUserResponse(response Package, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePackagesGetPackageForOrganizationResponse(response Package, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePackagesGetPackageForUserResponse(response Package, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePackagesGetPackageVersionForAuthenticatedUserResponse(response PackageVersion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePackagesGetPackageVersionForOrganizationResponse(response PackageVersion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePackagesGetPackageVersionForUserResponse(response PackageVersion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePackagesListPackagesForAuthenticatedUserResponse(response []Package, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePackagesListPackagesForOrganizationResponse(response PackagesListPackagesForOrganizationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesListPackagesForOrganizationOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesListPackagesForOrganizationApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesListPackagesForOrganizationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/packages: unexpected response type: %T", response)
	}
}

func encodePackagesListPackagesForUserResponse(response PackagesListPackagesForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesListPackagesForUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesListPackagesForUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesListPackagesForUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/users/{username}/packages: unexpected response type: %T", response)
	}
}

func encodePackagesRestorePackageForAuthenticatedUserResponse(response PackagesRestorePackageForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesRestorePackageForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesRestorePackageForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/packages/{package_type}/{package_name}/restore: unexpected response type: %T", response)
	}
}

func encodePackagesRestorePackageForOrgResponse(response PackagesRestorePackageForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesRestorePackageForOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesRestorePackageForOrgApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageForOrgApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageForOrgApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/packages/{package_type}/{package_name}/restore: unexpected response type: %T", response)
	}
}

func encodePackagesRestorePackageForUserResponse(response PackagesRestorePackageForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesRestorePackageForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesRestorePackageForUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageForUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageForUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/users/{username}/packages/{package_type}/{package_name}/restore: unexpected response type: %T", response)
	}
}

func encodePackagesRestorePackageVersionForAuthenticatedUserResponse(response PackagesRestorePackageVersionForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesRestorePackageVersionForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore: unexpected response type: %T", response)
	}
}

func encodePackagesRestorePackageVersionForOrgResponse(response PackagesRestorePackageVersionForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesRestorePackageVersionForOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesRestorePackageVersionForOrgApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageVersionForOrgApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageVersionForOrgApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore: unexpected response type: %T", response)
	}
}

func encodePackagesRestorePackageVersionForUserResponse(response PackagesRestorePackageVersionForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PackagesRestorePackageVersionForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *PackagesRestorePackageVersionForUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageVersionForUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PackagesRestorePackageVersionForUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore: unexpected response type: %T", response)
	}
}

func encodeProjectsCreateColumnResponse(response ProjectsCreateColumnRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectColumn:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsCreateColumnApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsCreateColumnApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/{project_id}/columns: unexpected response type: %T", response)
	}
}

func encodeProjectsCreateForAuthenticatedUserResponse(response ProjectsCreateForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Project:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsCreateForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/projects: unexpected response type: %T", response)
	}
}

func encodeProjectsCreateForOrgResponse(response ProjectsCreateForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Project:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsCreateForOrgApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsCreateForOrgApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsCreateForOrgApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsCreateForOrgApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/projects: unexpected response type: %T", response)
	}
}

func encodeProjectsCreateForRepoResponse(response ProjectsCreateForRepoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Project:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsCreateForRepoApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsCreateForRepoApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsCreateForRepoApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsCreateForRepoApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/projects: unexpected response type: %T", response)
	}
}

func encodeProjectsDeleteResponse(response ProjectsDeleteRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectsDeleteNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsDeleteApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsDeleteForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsDeleteApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsDeleteApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/{project_id}: unexpected response type: %T", response)
	}
}

func encodeProjectsDeleteCardResponse(response ProjectsDeleteCardRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectsDeleteCardNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsDeleteCardApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsDeleteCardForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsDeleteCardApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/columns/cards/{card_id}: unexpected response type: %T", response)
	}
}

func encodeProjectsDeleteColumnResponse(response ProjectsDeleteColumnRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectsDeleteColumnNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsDeleteColumnApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsDeleteColumnApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/columns/{column_id}: unexpected response type: %T", response)
	}
}

func encodeProjectsGetResponse(response ProjectsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Project:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsGetApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsGetApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/{project_id}: unexpected response type: %T", response)
	}
}

func encodeProjectsGetCardResponse(response ProjectsGetCardRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectCard:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsGetCardApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsGetCardApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsGetCardApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/columns/cards/{card_id}: unexpected response type: %T", response)
	}
}

func encodeProjectsGetColumnResponse(response ProjectsGetColumnRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectColumn:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsGetColumnApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsGetColumnApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsGetColumnApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/columns/{column_id}: unexpected response type: %T", response)
	}
}

func encodeProjectsListCardsResponse(response ProjectsListCardsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectsListCardsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsListCardsApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsListCardsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/columns/{column_id}/cards: unexpected response type: %T", response)
	}
}

func encodeProjectsListColumnsResponse(response ProjectsListColumnsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectsListColumnsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsListColumnsApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsListColumnsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/{project_id}/columns: unexpected response type: %T", response)
	}
}

func encodeProjectsListForOrgResponse(response ProjectsListForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectsListForOrgOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/projects: unexpected response type: %T", response)
	}
}

func encodeProjectsListForRepoResponse(response ProjectsListForRepoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectsListForRepoOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsListForRepoApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsListForRepoApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsListForRepoApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsListForRepoApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/projects: unexpected response type: %T", response)
	}
}

func encodeProjectsMoveColumnResponse(response ProjectsMoveColumnRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectsMoveColumnCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsMoveColumnApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsMoveColumnApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/columns/{column_id}/moves: unexpected response type: %T", response)
	}
}

func encodeProjectsUpdateResponse(response ProjectsUpdateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Project:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsUpdateApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsUpdateForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsUpdateNotFound:
		w.WriteHeader(404)
		return nil
	case *ProjectsUpdateApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/{project_id}: unexpected response type: %T", response)
	}
}

func encodeProjectsUpdateCardResponse(response ProjectsUpdateCardRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectCard:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsUpdateCardApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsUpdateCardApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsUpdateCardApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/columns/cards/{card_id}: unexpected response type: %T", response)
	}
}

func encodeProjectsUpdateColumnResponse(response ProjectsUpdateColumnRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProjectColumn:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsUpdateColumnApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ProjectsUpdateColumnApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/projects/columns/{column_id}: unexpected response type: %T", response)
	}
}

func encodePullsCheckIfMergedResponse(response PullsCheckIfMergedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullsCheckIfMergedNoContent:
		w.WriteHeader(204)
		return nil
	case *PullsCheckIfMergedNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/merge: unexpected response type: %T", response)
	}
}

func encodePullsCreateReplyForReviewCommentResponse(response PullsCreateReplyForReviewCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullRequestReviewComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies: unexpected response type: %T", response)
	}
}

func encodePullsCreateReviewResponse(response PullsCreateReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews: unexpected response type: %T", response)
	}
}

func encodePullsDeletePendingReviewResponse(response PullsDeletePendingReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}: unexpected response type: %T", response)
	}
}

func encodePullsDeleteReviewCommentResponse(response PullsDeleteReviewCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullsDeleteReviewCommentNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/comments/{comment_id}: unexpected response type: %T", response)
	}
}

func encodePullsDismissReviewResponse(response PullsDismissReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals: unexpected response type: %T", response)
	}
}

func encodePullsGetResponse(response PullsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *PullsGetApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PullsGetApplicationJSONInternalServerError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}: unexpected response type: %T", response)
	}
}

func encodePullsGetReviewResponse(response PullsGetReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}: unexpected response type: %T", response)
	}
}

func encodePullsGetReviewCommentResponse(response PullsGetReviewCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullRequestReviewComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/comments/{comment_id}: unexpected response type: %T", response)
	}
}

func encodePullsListCommentsForReviewResponse(response PullsListCommentsForReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullsListCommentsForReviewOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments: unexpected response type: %T", response)
	}
}

func encodePullsListCommitsResponse(response []Commit, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePullsListRequestedReviewersResponse(response PullRequestReviewRequest, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePullsListReviewCommentsResponse(response []PullRequestReviewComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePullsListReviewCommentsForRepoResponse(response []PullRequestReviewComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePullsListReviewsResponse(response []PullRequestReview, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodePullsSubmitReviewResponse(response PullsSubmitReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PullsSubmitReviewApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PullsSubmitReviewApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events: unexpected response type: %T", response)
	}
}

func encodePullsUpdateReviewResponse(response PullsUpdateReviewRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}: unexpected response type: %T", response)
	}
}

func encodePullsUpdateReviewCommentResponse(response PullRequestReviewComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeRateLimitGetResponse(response RateLimitGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *RateLimitOverview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/rate_limit: unexpected response type: %T", response)
	}
}

func encodeReactionsCreateForTeamDiscussionCommentInOrgResponse(response ReactionsCreateForTeamDiscussionCommentInOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions: unexpected response type: %T", response)
	}
}

func encodeReactionsCreateForTeamDiscussionCommentLegacyResponse(response Reaction, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReactionsCreateForTeamDiscussionInOrgResponse(response ReactionsCreateForTeamDiscussionInOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions: unexpected response type: %T", response)
	}
}

func encodeReactionsCreateForTeamDiscussionLegacyResponse(response Reaction, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReactionsDeleteForCommitCommentResponse(response ReactionsDeleteForCommitCommentNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReactionsDeleteForIssueResponse(response ReactionsDeleteForIssueNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReactionsDeleteForIssueCommentResponse(response ReactionsDeleteForIssueCommentNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReactionsDeleteForPullRequestCommentResponse(response ReactionsDeleteForPullRequestCommentNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReactionsDeleteForTeamDiscussionResponse(response ReactionsDeleteForTeamDiscussionNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReactionsDeleteForTeamDiscussionCommentResponse(response ReactionsDeleteForTeamDiscussionCommentNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReactionsDeleteLegacyResponse(response ReactionsDeleteLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReactionsDeleteLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ReactionsDeleteLegacyApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReactionsDeleteLegacyApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReactionsDeleteLegacyApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/reactions/{reaction_id}: unexpected response type: %T", response)
	}
}

func encodeReactionsListForCommitCommentResponse(response ReactionsListForCommitCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReactionsListForCommitCommentOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/comments/{comment_id}/reactions: unexpected response type: %T", response)
	}
}

func encodeReactionsListForIssueResponse(response ReactionsListForIssueRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReactionsListForIssueOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReactionsListForIssueApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReactionsListForIssueApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/reactions: unexpected response type: %T", response)
	}
}

func encodeReactionsListForIssueCommentResponse(response ReactionsListForIssueCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReactionsListForIssueCommentOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions: unexpected response type: %T", response)
	}
}

func encodeReactionsListForPullRequestReviewCommentResponse(response ReactionsListForPullRequestReviewCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReactionsListForPullRequestReviewCommentOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions: unexpected response type: %T", response)
	}
}

func encodeReactionsListForTeamDiscussionCommentInOrgResponse(response []Reaction, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReactionsListForTeamDiscussionCommentLegacyResponse(response []Reaction, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReactionsListForTeamDiscussionInOrgResponse(response []Reaction, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReactionsListForTeamDiscussionLegacyResponse(response []Reaction, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposAcceptInvitationResponse(response ReposAcceptInvitationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposAcceptInvitationNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ReposAcceptInvitationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposAcceptInvitationApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposAcceptInvitationApplicationJSONConflict:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/repository_invitations/{invitation_id}: unexpected response type: %T", response)
	}
}

func encodeReposCheckCollaboratorResponse(response ReposCheckCollaboratorRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposCheckCollaboratorNoContent:
		w.WriteHeader(204)
		return nil
	case *ReposCheckCollaboratorNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/collaborators/{username}: unexpected response type: %T", response)
	}
}

func encodeReposCheckVulnerabilityAlertsResponse(response ReposCheckVulnerabilityAlertsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposCheckVulnerabilityAlertsNoContent:
		w.WriteHeader(204)
		return nil
	case *ReposCheckVulnerabilityAlertsNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/vulnerability-alerts: unexpected response type: %T", response)
	}
}

func encodeReposCompareCommitsResponse(response ReposCompareCommitsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CommitComparison:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposCompareCommitsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposCompareCommitsApplicationJSONInternalServerError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/compare/{basehead}: unexpected response type: %T", response)
	}
}

func encodeReposCreateCommitSignatureProtectionResponse(response ReposCreateCommitSignatureProtectionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProtectedBranchAdminEnforced:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures: unexpected response type: %T", response)
	}
}

func encodeReposCreateCommitStatusResponse(response Status, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposCreateUsingTemplateResponse(response Repository, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposDeclineInvitationResponse(response ReposDeclineInvitationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposDeclineInvitationNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ReposDeclineInvitationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposDeclineInvitationApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposDeclineInvitationApplicationJSONConflict:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/repository_invitations/{invitation_id}: unexpected response type: %T", response)
	}
}

func encodeReposDeleteResponse(response ReposDeleteRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposDeleteNoContent:
		w.WriteHeader(204)
		return nil
	case *ReposDeleteApplicationJSONTemporaryRedirect:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(307)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposDeleteForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposDeleteApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}: unexpected response type: %T", response)
	}
}

func encodeReposDeleteAccessRestrictionsResponse(response ReposDeleteAccessRestrictionsNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDeleteAdminBranchProtectionResponse(response ReposDeleteAdminBranchProtectionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposDeleteAdminBranchProtectionNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins: unexpected response type: %T", response)
	}
}

func encodeReposDeleteAnEnvironmentResponse(response ReposDeleteAnEnvironmentNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDeleteAutolinkResponse(response ReposDeleteAutolinkRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposDeleteAutolinkNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/autolinks/{autolink_id}: unexpected response type: %T", response)
	}
}

func encodeReposDeleteBranchProtectionResponse(response ReposDeleteBranchProtectionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposDeleteBranchProtectionNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection: unexpected response type: %T", response)
	}
}

func encodeReposDeleteCommitCommentResponse(response ReposDeleteCommitCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposDeleteCommitCommentNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/comments/{comment_id}: unexpected response type: %T", response)
	}
}

func encodeReposDeleteCommitSignatureProtectionResponse(response ReposDeleteCommitSignatureProtectionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposDeleteCommitSignatureProtectionNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures: unexpected response type: %T", response)
	}
}

func encodeReposDeleteDeployKeyResponse(response ReposDeleteDeployKeyNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDeleteDeploymentResponse(response ReposDeleteDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposDeleteDeploymentNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/deployments/{deployment_id}: unexpected response type: %T", response)
	}
}

func encodeReposDeleteInvitationResponse(response ReposDeleteInvitationNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDeletePullRequestReviewProtectionResponse(response ReposDeletePullRequestReviewProtectionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposDeletePullRequestReviewProtectionNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews: unexpected response type: %T", response)
	}
}

func encodeReposDeleteReleaseResponse(response ReposDeleteReleaseNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDeleteReleaseAssetResponse(response ReposDeleteReleaseAssetNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDeleteWebhookResponse(response ReposDeleteWebhookRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposDeleteWebhookNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/hooks/{hook_id}: unexpected response type: %T", response)
	}
}

func encodeReposDisableAutomatedSecurityFixesResponse(response ReposDisableAutomatedSecurityFixesNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDisableLfsForRepoResponse(response ReposDisableLfsForRepoNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDisableVulnerabilityAlertsResponse(response ReposDisableVulnerabilityAlertsNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDownloadTarballArchiveResponse(response ReposDownloadTarballArchiveFound, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(302)
	return nil
}

func encodeReposDownloadZipballArchiveResponse(response ReposDownloadZipballArchiveFound, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(302)
	return nil
}

func encodeReposEnableAutomatedSecurityFixesResponse(response ReposEnableAutomatedSecurityFixesNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposEnableLfsForRepoResponse(response ReposEnableLfsForRepoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Accepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposEnableLfsForRepoForbidden:
		w.WriteHeader(403)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/lfs: unexpected response type: %T", response)
	}
}

func encodeReposEnableVulnerabilityAlertsResponse(response ReposEnableVulnerabilityAlertsNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposGetResponse(response ReposGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *FullRepository:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposGetApplicationJSONMovedPermanently:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(301)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposGetApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposGetApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}: unexpected response type: %T", response)
	}
}

func encodeReposGetAccessRestrictionsResponse(response ReposGetAccessRestrictionsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *BranchRestrictionPolicy:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions: unexpected response type: %T", response)
	}
}

func encodeReposGetAdminBranchProtectionResponse(response ProtectedBranchAdminEnforced, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposGetAllStatusCheckContextsResponse(response ReposGetAllStatusCheckContextsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposGetAllStatusCheckContextsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts: unexpected response type: %T", response)
	}
}

func encodeReposGetAllTopicsResponse(response ReposGetAllTopicsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Topic:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/topics: unexpected response type: %T", response)
	}
}

func encodeReposGetAppsWithAccessToProtectedBranchResponse(response ReposGetAppsWithAccessToProtectedBranchRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps: unexpected response type: %T", response)
	}
}

func encodeReposGetAutolinkResponse(response ReposGetAutolinkRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Autolink:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/autolinks/{autolink_id}: unexpected response type: %T", response)
	}
}

func encodeReposGetBranchResponse(response ReposGetBranchRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *BranchWithProtection:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposGetBranchApplicationJSONMovedPermanently:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(301)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposGetBranchApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}: unexpected response type: %T", response)
	}
}

func encodeReposGetBranchProtectionResponse(response ReposGetBranchProtectionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *BranchProtection:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection: unexpected response type: %T", response)
	}
}

func encodeReposGetClonesResponse(response ReposGetClonesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CloneTraffic:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/traffic/clones: unexpected response type: %T", response)
	}
}

func encodeReposGetCodeFrequencyStatsResponse(response ReposGetCodeFrequencyStatsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposGetCodeFrequencyStatsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *Accepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/stats/code_frequency: unexpected response type: %T", response)
	}
}

func encodeReposGetCollaboratorPermissionLevelResponse(response ReposGetCollaboratorPermissionLevelRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *RepositoryCollaboratorPermission:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/collaborators/{username}/permission: unexpected response type: %T", response)
	}
}

func encodeReposGetCombinedStatusForRefResponse(response ReposGetCombinedStatusForRefRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CombinedCommitStatus:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/commits/{ref}/status: unexpected response type: %T", response)
	}
}

func encodeReposGetCommitActivityStatsResponse(response ReposGetCommitActivityStatsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposGetCommitActivityStatsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *Accepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/stats/commit_activity: unexpected response type: %T", response)
	}
}

func encodeReposGetCommitCommentResponse(response ReposGetCommitCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CommitComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/comments/{comment_id}: unexpected response type: %T", response)
	}
}

func encodeReposGetCommitSignatureProtectionResponse(response ReposGetCommitSignatureProtectionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProtectedBranchAdminEnforced:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures: unexpected response type: %T", response)
	}
}

func encodeReposGetCommunityProfileMetricsResponse(response CommunityProfile, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposGetContributorsStatsResponse(response ReposGetContributorsStatsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposGetContributorsStatsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *Accepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/stats/contributors: unexpected response type: %T", response)
	}
}

func encodeReposGetDeployKeyResponse(response ReposGetDeployKeyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeployKey:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/keys/{key_id}: unexpected response type: %T", response)
	}
}

func encodeReposGetDeploymentStatusResponse(response ReposGetDeploymentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeploymentStatus:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}: unexpected response type: %T", response)
	}
}

func encodeReposGetLatestPagesBuildResponse(response PageBuild, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposGetLatestReleaseResponse(response Release, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposGetPagesResponse(response ReposGetPagesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Page:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pages: unexpected response type: %T", response)
	}
}

func encodeReposGetPagesBuildResponse(response PageBuild, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposGetPagesHealthCheckResponse(response ReposGetPagesHealthCheckRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PagesHealthCheck:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *EmptyObject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposGetPagesHealthCheckBadRequest:
		w.WriteHeader(400)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposGetPagesHealthCheckUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pages/health: unexpected response type: %T", response)
	}
}

func encodeReposGetParticipationStatsResponse(response ReposGetParticipationStatsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ParticipationStats:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/stats/participation: unexpected response type: %T", response)
	}
}

func encodeReposGetPullRequestReviewProtectionResponse(response ProtectedBranchPullRequestReview, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposGetPunchCardStatsResponse(response ReposGetPunchCardStatsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposGetPunchCardStatsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/stats/punch_card: unexpected response type: %T", response)
	}
}

func encodeReposGetReleaseResponse(response ReposGetReleaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Release:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/releases/{release_id}: unexpected response type: %T", response)
	}
}

func encodeReposGetReleaseAssetResponse(response ReposGetReleaseAssetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReleaseAsset:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *Found:
		w.WriteHeader(302)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/releases/assets/{asset_id}: unexpected response type: %T", response)
	}
}

func encodeReposGetReleaseByTagResponse(response ReposGetReleaseByTagRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Release:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/releases/tags/{tag}: unexpected response type: %T", response)
	}
}

func encodeReposGetStatusChecksProtectionResponse(response ReposGetStatusChecksProtectionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *StatusCheckPolicy:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks: unexpected response type: %T", response)
	}
}

func encodeReposGetTeamsWithAccessToProtectedBranchResponse(response ReposGetTeamsWithAccessToProtectedBranchRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams: unexpected response type: %T", response)
	}
}

func encodeReposGetTopPathsResponse(response ReposGetTopPathsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposGetTopPathsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/traffic/popular/paths: unexpected response type: %T", response)
	}
}

func encodeReposGetTopReferrersResponse(response ReposGetTopReferrersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposGetTopReferrersOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/traffic/popular/referrers: unexpected response type: %T", response)
	}
}

func encodeReposGetUsersWithAccessToProtectedBranchResponse(response ReposGetUsersWithAccessToProtectedBranchRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users: unexpected response type: %T", response)
	}
}

func encodeReposGetViewsResponse(response ReposGetViewsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ViewTraffic:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/traffic/views: unexpected response type: %T", response)
	}
}

func encodeReposGetWebhookResponse(response ReposGetWebhookRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Hook:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/hooks/{hook_id}: unexpected response type: %T", response)
	}
}

func encodeReposGetWebhookConfigForRepoResponse(response WebhookConfig, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListAutolinksResponse(response []Autolink, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListBranchesResponse(response ReposListBranchesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposListBranchesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches: unexpected response type: %T", response)
	}
}

func encodeReposListCollaboratorsResponse(response ReposListCollaboratorsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposListCollaboratorsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/collaborators: unexpected response type: %T", response)
	}
}

func encodeReposListCommentsForCommitResponse(response []CommitComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListCommitCommentsForRepoResponse(response []CommitComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListCommitStatusesForRefResponse(response ReposListCommitStatusesForRefRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposListCommitStatusesForRefOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(301)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/commits/{ref}/statuses: unexpected response type: %T", response)
	}
}

func encodeReposListCommitsResponse(response ReposListCommitsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposListCommitsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposListCommitsApplicationJSONBadRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ScimError:
		w.Header().Set("Content-Type", "application/scim+json")
		w.WriteHeader(400)
		return fmt.Errorf("application/scim+json encoder not implemented")
	case *ReposListCommitsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposListCommitsApplicationJSONConflict:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposListCommitsApplicationJSONInternalServerError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/commits: unexpected response type: %T", response)
	}
}

func encodeReposListContributorsResponse(response ReposListContributorsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposListContributorsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposListContributorsNoContent:
		w.WriteHeader(204)
		return nil
	case *ReposListContributorsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposListContributorsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/contributors: unexpected response type: %T", response)
	}
}

func encodeReposListDeployKeysResponse(response []DeployKey, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListDeploymentStatusesResponse(response ReposListDeploymentStatusesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposListDeploymentStatusesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/deployments/{deployment_id}/statuses: unexpected response type: %T", response)
	}
}

func encodeReposListForOrgResponse(response []MinimalRepository, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListForUserResponse(response []MinimalRepository, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListForksResponse(response ReposListForksRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposListForksOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ScimError:
		w.Header().Set("Content-Type", "application/scim+json")
		w.WriteHeader(400)
		return fmt.Errorf("application/scim+json encoder not implemented")
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/forks: unexpected response type: %T", response)
	}
}

func encodeReposListInvitationsResponse(response []RepositoryInvitation, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListInvitationsForAuthenticatedUserResponse(response ReposListInvitationsForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposListInvitationsForAuthenticatedUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/repository_invitations: unexpected response type: %T", response)
	}
}

func encodeReposListLanguagesResponse(response Language, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListPagesBuildsResponse(response []PageBuild, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListPullRequestsAssociatedWithCommitResponse(response []PullRequestSimple, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListReleaseAssetsResponse(response []ReleaseAsset, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListReleasesResponse(response ReposListReleasesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposListReleasesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/releases: unexpected response type: %T", response)
	}
}

func encodeReposListTagsResponse(response []Tag, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListTeamsResponse(response []Team, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposListWebhooksResponse(response ReposListWebhooksRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposListWebhooksOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/hooks: unexpected response type: %T", response)
	}
}

func encodeReposMergeUpstreamResponse(response ReposMergeUpstreamRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MergedUpstream:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposMergeUpstreamConflict:
		w.WriteHeader(409)
		return nil
	case *ReposMergeUpstreamUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/merge-upstream: unexpected response type: %T", response)
	}
}

func encodeReposPingWebhookResponse(response ReposPingWebhookRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposPingWebhookNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/hooks/{hook_id}/pings: unexpected response type: %T", response)
	}
}

func encodeReposRemoveCollaboratorResponse(response ReposRemoveCollaboratorNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposRemoveStatusCheckProtectionResponse(response ReposRemoveStatusCheckProtectionNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposReplaceAllTopicsResponse(response ReposReplaceAllTopicsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Topic:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/topics: unexpected response type: %T", response)
	}
}

func encodeReposRequestPagesBuildResponse(response PageBuildStatus, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposSetAdminBranchProtectionResponse(response ProtectedBranchAdminEnforced, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposTestPushWebhookResponse(response ReposTestPushWebhookRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReposTestPushWebhookNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/hooks/{hook_id}/tests: unexpected response type: %T", response)
	}
}

func encodeReposTransferResponse(response MinimalRepository, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposUpdateBranchProtectionResponse(response ReposUpdateBranchProtectionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ProtectedBranch:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposUpdateBranchProtectionApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ReposUpdateBranchProtectionApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection: unexpected response type: %T", response)
	}
}

func encodeReposUpdateCommitCommentResponse(response ReposUpdateCommitCommentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CommitComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/comments/{comment_id}: unexpected response type: %T", response)
	}
}

func encodeReposUpdateInvitationResponse(response RepositoryInvitation, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposUpdateReleaseResponse(response ReposUpdateReleaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Release:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/releases/{release_id}: unexpected response type: %T", response)
	}
}

func encodeReposUpdateReleaseAssetResponse(response ReleaseAsset, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposUpdateWebhookConfigForRepoResponse(response WebhookConfig, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeReposUploadReleaseAssetResponse(response ReleaseAsset, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeScimDeleteUserFromOrgResponse(response ScimDeleteUserFromOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ScimDeleteUserFromOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ScimDeleteUserFromOrgApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ScimDeleteUserFromOrgApplicationScimJSONForbidden:
		w.Header().Set("Content-Type", "application/scim+json")
		w.WriteHeader(403)
		return fmt.Errorf("application/scim+json encoder not implemented")
	case *ScimDeleteUserFromOrgApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ScimDeleteUserFromOrgApplicationScimJSONNotFound:
		w.Header().Set("Content-Type", "application/scim+json")
		w.WriteHeader(404)
		return fmt.Errorf("application/scim+json encoder not implemented")
	default:
		return fmt.Errorf("/scim/v2/organizations/{org}/Users/{scim_user_id}: unexpected response type: %T", response)
	}
}

func encodeSearchCommitsResponse(response SearchCommitsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SearchCommitsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/search/commits: unexpected response type: %T", response)
	}
}

func encodeSearchTopicsResponse(response SearchTopicsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SearchTopicsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/search/topics: unexpected response type: %T", response)
	}
}

func encodeSecretScanningGetAlertResponse(response SecretScanningGetAlertRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SecretScanningAlert:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *SecretScanningGetAlertNotFound:
		w.WriteHeader(404)
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}: unexpected response type: %T", response)
	}
}

func encodeSecretScanningListAlertsForOrgResponse(response SecretScanningListAlertsForOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SecretScanningListAlertsForOrgOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/secret-scanning/alerts: unexpected response type: %T", response)
	}
}

func encodeSecretScanningListAlertsForRepoResponse(response SecretScanningListAlertsForRepoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SecretScanningListAlertsForRepoOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *SecretScanningListAlertsForRepoNotFound:
		w.WriteHeader(404)
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/secret-scanning/alerts: unexpected response type: %T", response)
	}
}

func encodeSecretScanningUpdateAlertResponse(response SecretScanningUpdateAlertRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SecretScanningAlert:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *SecretScanningUpdateAlertNotFound:
		w.WriteHeader(404)
		return nil
	case *SecretScanningUpdateAlertUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}: unexpected response type: %T", response)
	}
}

func encodeTeamsAddMemberLegacyResponse(response TeamsAddMemberLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsAddMemberLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsAddMemberLegacyNotFound:
		w.WriteHeader(404)
		return nil
	case *TeamsAddMemberLegacyUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/members/{username}: unexpected response type: %T", response)
	}
}

func encodeTeamsAddOrUpdateMembershipForUserInOrgResponse(response TeamsAddOrUpdateMembershipForUserInOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsAddOrUpdateMembershipForUserInOrgForbidden:
		w.WriteHeader(403)
		return nil
	case *TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/memberships/{username}: unexpected response type: %T", response)
	}
}

func encodeTeamsAddOrUpdateMembershipForUserLegacyResponse(response TeamsAddOrUpdateMembershipForUserLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsAddOrUpdateMembershipForUserLegacyForbidden:
		w.WriteHeader(403)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/memberships/{username}: unexpected response type: %T", response)
	}
}

func encodeTeamsAddOrUpdateProjectPermissionsInOrgResponse(response TeamsAddOrUpdateProjectPermissionsInOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsAddOrUpdateProjectPermissionsInOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsAddOrUpdateProjectPermissionsInOrgForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/projects/{project_id}: unexpected response type: %T", response)
	}
}

func encodeTeamsAddOrUpdateRepoPermissionsInOrgResponse(response TeamsAddOrUpdateRepoPermissionsInOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsCheckPermissionsForProjectInOrgResponse(response TeamsCheckPermissionsForProjectInOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamProject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsCheckPermissionsForProjectInOrgNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/projects/{project_id}: unexpected response type: %T", response)
	}
}

func encodeTeamsCheckPermissionsForProjectLegacyResponse(response TeamsCheckPermissionsForProjectLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamProject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsCheckPermissionsForProjectLegacyNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/projects/{project_id}: unexpected response type: %T", response)
	}
}

func encodeTeamsCheckPermissionsForRepoInOrgResponse(response TeamsCheckPermissionsForRepoInOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamRepository:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsCheckPermissionsForRepoInOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsCheckPermissionsForRepoInOrgNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}: unexpected response type: %T", response)
	}
}

func encodeTeamsCheckPermissionsForRepoLegacyResponse(response TeamsCheckPermissionsForRepoLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamRepository:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsCheckPermissionsForRepoLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsCheckPermissionsForRepoLegacyNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/repos/{owner}/{repo}: unexpected response type: %T", response)
	}
}

func encodeTeamsCreateDiscussionCommentInOrgResponse(response TeamDiscussionComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsCreateDiscussionCommentLegacyResponse(response TeamDiscussionComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsCreateDiscussionInOrgResponse(response TeamDiscussion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsCreateDiscussionLegacyResponse(response TeamDiscussion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse(response GroupMapping, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsDeleteDiscussionCommentInOrgResponse(response TeamsDeleteDiscussionCommentInOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsDeleteDiscussionCommentLegacyResponse(response TeamsDeleteDiscussionCommentLegacyNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsDeleteDiscussionInOrgResponse(response TeamsDeleteDiscussionInOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsDeleteDiscussionLegacyResponse(response TeamsDeleteDiscussionLegacyNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsDeleteInOrgResponse(response TeamsDeleteInOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsGetByNameResponse(response TeamsGetByNameRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamFull:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}: unexpected response type: %T", response)
	}
}

func encodeTeamsGetDiscussionCommentInOrgResponse(response TeamDiscussionComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsGetDiscussionCommentLegacyResponse(response TeamDiscussionComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsGetDiscussionInOrgResponse(response TeamDiscussion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsGetDiscussionLegacyResponse(response TeamDiscussion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsGetLegacyResponse(response TeamsGetLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamFull:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/teams/{team_id}: unexpected response type: %T", response)
	}
}

func encodeTeamsGetMemberLegacyResponse(response TeamsGetMemberLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsGetMemberLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsGetMemberLegacyNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/members/{username}: unexpected response type: %T", response)
	}
}

func encodeTeamsGetMembershipForUserInOrgResponse(response TeamsGetMembershipForUserInOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsGetMembershipForUserInOrgNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/memberships/{username}: unexpected response type: %T", response)
	}
}

func encodeTeamsGetMembershipForUserLegacyResponse(response TeamsGetMembershipForUserLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/memberships/{username}: unexpected response type: %T", response)
	}
}

func encodeTeamsListResponse(response TeamsListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsListOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams: unexpected response type: %T", response)
	}
}

func encodeTeamsListChildInOrgResponse(response []Team, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListDiscussionCommentsInOrgResponse(response []TeamDiscussionComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListDiscussionCommentsLegacyResponse(response []TeamDiscussionComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListDiscussionsInOrgResponse(response []TeamDiscussion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListDiscussionsLegacyResponse(response []TeamDiscussion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListForAuthenticatedUserResponse(response TeamsListForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsListForAuthenticatedUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *TeamsListForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsListForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/teams: unexpected response type: %T", response)
	}
}

func encodeTeamsListIdpGroupsForLegacyResponse(response TeamsListIdpGroupsForLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GroupMapping:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsListIdpGroupsForLegacyApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *TeamsListIdpGroupsForLegacyApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/team-sync/group-mappings: unexpected response type: %T", response)
	}
}

func encodeTeamsListIdpGroupsForOrgResponse(response GroupMapping, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListIdpGroupsInOrgResponse(response GroupMapping, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListMembersInOrgResponse(response []SimpleUser, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListMembersLegacyResponse(response TeamsListMembersLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsListMembersLegacyOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/members: unexpected response type: %T", response)
	}
}

func encodeTeamsListPendingInvitationsInOrgResponse(response []OrganizationInvitation, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListPendingInvitationsLegacyResponse(response []OrganizationInvitation, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListProjectsInOrgResponse(response []TeamProject, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListProjectsLegacyResponse(response TeamsListProjectsLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsListProjectsLegacyOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/projects: unexpected response type: %T", response)
	}
}

func encodeTeamsListReposInOrgResponse(response []MinimalRepository, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsListReposLegacyResponse(response TeamsListReposLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsListReposLegacyOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/repos: unexpected response type: %T", response)
	}
}

func encodeTeamsRemoveMemberLegacyResponse(response TeamsRemoveMemberLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsRemoveMemberLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsRemoveMemberLegacyNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/members/{username}: unexpected response type: %T", response)
	}
}

func encodeTeamsRemoveMembershipForUserInOrgResponse(response TeamsRemoveMembershipForUserInOrgRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsRemoveMembershipForUserInOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsRemoveMembershipForUserInOrgForbidden:
		w.WriteHeader(403)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/memberships/{username}: unexpected response type: %T", response)
	}
}

func encodeTeamsRemoveMembershipForUserLegacyResponse(response TeamsRemoveMembershipForUserLegacyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TeamsRemoveMembershipForUserLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsRemoveMembershipForUserLegacyForbidden:
		w.WriteHeader(403)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/memberships/{username}: unexpected response type: %T", response)
	}
}

func encodeTeamsRemoveProjectInOrgResponse(response TeamsRemoveProjectInOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsRemoveRepoInOrgResponse(response TeamsRemoveRepoInOrgNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsRemoveRepoLegacyResponse(response TeamsRemoveRepoLegacyNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsUpdateDiscussionCommentInOrgResponse(response TeamDiscussionComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsUpdateDiscussionCommentLegacyResponse(response TeamDiscussionComment, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsUpdateDiscussionInOrgResponse(response TeamDiscussion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsUpdateDiscussionLegacyResponse(response TeamDiscussion, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeTeamsUpdateInOrgResponse(response TeamFull, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	response.WriteJSON(e)
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeUsersCheckBlockedResponse(response UsersCheckBlockedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersCheckBlockedNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersCheckBlockedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersCheckBlockedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersCheckBlockedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/blocks/{username}: unexpected response type: %T", response)
	}
}

func encodeUsersCheckFollowingForUserResponse(response UsersCheckFollowingForUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersCheckFollowingForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *UsersCheckFollowingForUserNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/users/{username}/following/{target_user}: unexpected response type: %T", response)
	}
}

func encodeUsersCheckPersonIsFollowedByAuthenticatedResponse(response UsersCheckPersonIsFollowedByAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersCheckPersonIsFollowedByAuthenticatedNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/following/{username}: unexpected response type: %T", response)
	}
}

func encodeUsersDeletePublicSSHKeyForAuthenticatedResponse(response UsersDeletePublicSSHKeyForAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersDeletePublicSSHKeyForAuthenticatedNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/keys/{key_id}: unexpected response type: %T", response)
	}
}

func encodeUsersFollowResponse(response UsersFollowRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersFollowNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersFollowApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersFollowApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersFollowApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/following/{username}: unexpected response type: %T", response)
	}
}

func encodeUsersGetAuthenticatedResponse(response UsersGetAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersGetAuthenticatedOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersGetAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersGetAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user: unexpected response type: %T", response)
	}
}

func encodeUsersGetByUsernameResponse(response UsersGetByUsernameRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersGetByUsernameOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *Accepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/users/{username}: unexpected response type: %T", response)
	}
}

func encodeUsersGetGpgKeyForAuthenticatedResponse(response UsersGetGpgKeyForAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GpgKey:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/gpg_keys/{gpg_key_id}: unexpected response type: %T", response)
	}
}

func encodeUsersGetPublicSSHKeyForAuthenticatedResponse(response UsersGetPublicSSHKeyForAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *Key:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/keys/{key_id}: unexpected response type: %T", response)
	}
}

func encodeUsersListResponse(response UsersListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersListOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/users: unexpected response type: %T", response)
	}
}

func encodeUsersListBlockedByAuthenticatedResponse(response UsersListBlockedByAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersListBlockedByAuthenticatedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListBlockedByAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListBlockedByAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListBlockedByAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		more.More()
		response.WriteJSON(e)
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/blocks: unexpected response type: %T", response)
	}
}

func encodeUsersListEmailsForAuthenticatedResponse(response UsersListEmailsForAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersListEmailsForAuthenticatedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListEmailsForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListEmailsForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListEmailsForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/emails: unexpected response type: %T", response)
	}
}

func encodeUsersListFollowedByAuthenticatedResponse(response UsersListFollowedByAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersListFollowedByAuthenticatedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListFollowedByAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListFollowedByAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/following: unexpected response type: %T", response)
	}
}

func encodeUsersListFollowersForAuthenticatedUserResponse(response UsersListFollowersForAuthenticatedUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersListFollowersForAuthenticatedUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListFollowersForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/followers: unexpected response type: %T", response)
	}
}

func encodeUsersListFollowersForUserResponse(response []SimpleUser, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeUsersListFollowingForUserResponse(response []SimpleUser, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeUsersListGpgKeysForAuthenticatedResponse(response UsersListGpgKeysForAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersListGpgKeysForAuthenticatedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListGpgKeysForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListGpgKeysForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/gpg_keys: unexpected response type: %T", response)
	}
}

func encodeUsersListGpgKeysForUserResponse(response []GpgKey, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeUsersListPublicEmailsForAuthenticatedResponse(response UsersListPublicEmailsForAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersListPublicEmailsForAuthenticatedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/public_emails: unexpected response type: %T", response)
	}
}

func encodeUsersListPublicKeysForUserResponse(response []KeySimple, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	e := json.GetEncoder()
	defer json.PutEncoder(e)
	more := json.NewMore(e)
	defer more.Reset()
	more.More()
	more.Down()
	e.ArrStart()
	for _, elem := range response {
		more.More()
		elem.WriteJSON(e)
	}
	e.ArrEnd()
	more.Up()
	if _, err := e.WriteTo(w); err != nil {
		return fmt.Errorf("write: %w", err)
	}

	return nil
}

func encodeUsersListPublicSSHKeysForAuthenticatedResponse(response UsersListPublicSSHKeysForAuthenticatedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersListPublicSSHKeysForAuthenticatedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/keys: unexpected response type: %T", response)
	}
}

func encodeUsersUnblockResponse(response UsersUnblockRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersUnblockNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersUnblockApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersUnblockApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersUnblockApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/blocks/{username}: unexpected response type: %T", response)
	}
}

func encodeUsersUnfollowResponse(response UsersUnfollowRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UsersUnfollowNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersUnfollowApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersUnfollowApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	case *UsersUnfollowApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := json.GetEncoder()
		defer json.PutEncoder(e)
		more := json.NewMore(e)
		defer more.Reset()
		// Unsupported kind "alias".
		if _, err := e.WriteTo(w); err != nil {
			return fmt.Errorf("write: %w", err)
		}

		return nil
	default:
		return fmt.Errorf("/user/following/{username}: unexpected response type: %T", response)
	}
}
