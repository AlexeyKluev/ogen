// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func decodeActionsCreateOrUpdateEnvironmentSecretRequest(r *http.Request, span trace.Span) (req ActionsCreateOrUpdateEnvironmentSecretReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateEnvironmentSecretReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsCreateOrUpdateOrgSecretRequest(r *http.Request, span trace.Span) (req ActionsCreateOrUpdateOrgSecretReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateOrgSecretReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsCreateOrUpdateRepoSecretRequest(r *http.Request, span trace.Span) (req ActionsCreateOrUpdateRepoSecretReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateRepoSecretReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsCreateSelfHostedRunnerGroupForOrgRequest(r *http.Request, span trace.Span) (req ActionsCreateSelfHostedRunnerGroupForOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateSelfHostedRunnerGroupForOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetAllowedActionsOrganizationRequest(r *http.Request, span trace.Span) (req SelectedActions, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetAllowedActionsRepositoryRequest(r *http.Request, span trace.Span) (req SelectedActions, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetGithubActionsPermissionsOrganizationRequest(r *http.Request, span trace.Span) (req ActionsSetGithubActionsPermissionsOrganizationReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetGithubActionsPermissionsOrganizationReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetGithubActionsPermissionsRepositoryRequest(r *http.Request, span trace.Span) (req ActionsSetGithubActionsPermissionsRepositoryReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetGithubActionsPermissionsRepositoryReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest(r *http.Request, span trace.Span) (req ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetSelectedReposForOrgSecretRequest(r *http.Request, span trace.Span) (req ActionsSetSelectedReposForOrgSecretReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelectedReposForOrgSecretReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest(r *http.Request, span trace.Span) (req ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetSelfHostedRunnersInGroupForOrgRequest(r *http.Request, span trace.Span) (req ActionsSetSelfHostedRunnersInGroupForOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelfHostedRunnersInGroupForOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsUpdateSelfHostedRunnerGroupForOrgRequest(r *http.Request, span trace.Span) (req ActionsUpdateSelfHostedRunnerGroupForOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsUpdateSelfHostedRunnerGroupForOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActivityMarkNotificationsAsReadRequest(r *http.Request, span trace.Span) (req ActivityMarkNotificationsAsReadReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivityMarkNotificationsAsReadReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActivityMarkRepoNotificationsAsReadRequest(r *http.Request, span trace.Span) (req ActivityMarkRepoNotificationsAsReadReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivityMarkRepoNotificationsAsReadReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActivitySetRepoSubscriptionRequest(r *http.Request, span trace.Span) (req ActivitySetRepoSubscriptionReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivitySetRepoSubscriptionReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActivitySetThreadSubscriptionRequest(r *http.Request, span trace.Span) (req ActivitySetThreadSubscriptionReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivitySetThreadSubscriptionReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeAppsUpdateWebhookConfigForAppRequest(r *http.Request, span trace.Span) (req AppsUpdateWebhookConfigForAppReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request AppsUpdateWebhookConfigForAppReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeChecksCreateSuiteRequest(r *http.Request, span trace.Span) (req ChecksCreateSuiteReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ChecksCreateSuiteReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeChecksSetSuitesPreferencesRequest(r *http.Request, span trace.Span) (req ChecksSetSuitesPreferencesReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ChecksSetSuitesPreferencesReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeCodeScanningUpdateAlertRequest(r *http.Request, span trace.Span) (req CodeScanningUpdateAlertReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request CodeScanningUpdateAlertReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeCodeScanningUploadSarifRequest(r *http.Request, span trace.Span) (req CodeScanningUploadSarifReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request CodeScanningUploadSarifReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(r *http.Request, span trace.Span) (req EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(r *http.Request, span trace.Span) (req EnterpriseAdminProvisionAndInviteEnterpriseGroupReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminProvisionAndInviteEnterpriseGroupReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseUserRequest(r *http.Request, span trace.Span) (req EnterpriseAdminProvisionAndInviteEnterpriseUserReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminProvisionAndInviteEnterpriseUserReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetAllowedActionsEnterpriseRequest(r *http.Request, span trace.Span) (req SelectedActions, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(r *http.Request, span trace.Span) (req EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest(r *http.Request, span trace.Span) (req EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest(r *http.Request, span trace.Span) (req EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(r *http.Request, span trace.Span) (req EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(r *http.Request, span trace.Span) (req EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest(r *http.Request, span trace.Span) (req EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseUserRequest(r *http.Request, span trace.Span) (req EnterpriseAdminUpdateAttributeForEnterpriseUserReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminUpdateAttributeForEnterpriseUserReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest(r *http.Request, span trace.Span) (req EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeGistsCreateCommentRequest(r *http.Request, span trace.Span) (req GistsCreateCommentReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GistsCreateCommentReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeGistsUpdateCommentRequest(r *http.Request, span trace.Span) (req GistsUpdateCommentReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GistsUpdateCommentReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeInteractionsSetRestrictionsForRepoRequest(r *http.Request, span trace.Span) (req InteractionLimit, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request InteractionLimit
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeIssuesAddAssigneesRequest(r *http.Request, span trace.Span) (req IssuesAddAssigneesReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesAddAssigneesReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeIssuesRemoveAssigneesRequest(r *http.Request, span trace.Span) (req IssuesRemoveAssigneesReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesRemoveAssigneesReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeIssuesUpdateLabelRequest(r *http.Request, span trace.Span) (req IssuesUpdateLabelReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesUpdateLabelReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeIssuesUpdateMilestoneRequest(r *http.Request, span trace.Span) (req IssuesUpdateMilestoneReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesUpdateMilestoneReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeMigrationsUpdateImportRequest(r *http.Request, span trace.Span) (req MigrationsUpdateImportReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MigrationsUpdateImportReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeOrgsUpdateWebhookConfigForOrgRequest(r *http.Request, span trace.Span) (req OrgsUpdateWebhookConfigForOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request OrgsUpdateWebhookConfigForOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsCreateColumnRequest(r *http.Request, span trace.Span) (req ProjectsCreateColumnReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateColumnReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsCreateForAuthenticatedUserRequest(r *http.Request, span trace.Span) (req ProjectsCreateForAuthenticatedUserReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForAuthenticatedUserReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsCreateForOrgRequest(r *http.Request, span trace.Span) (req ProjectsCreateForOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsCreateForRepoRequest(r *http.Request, span trace.Span) (req ProjectsCreateForRepoReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForRepoReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsMoveColumnRequest(r *http.Request, span trace.Span) (req ProjectsMoveColumnReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsMoveColumnReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsUpdateRequest(r *http.Request, span trace.Span) (req ProjectsUpdateReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsUpdateCardRequest(r *http.Request, span trace.Span) (req ProjectsUpdateCardReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateCardReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsUpdateColumnRequest(r *http.Request, span trace.Span) (req ProjectsUpdateColumnReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateColumnReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsCreateReplyForReviewCommentRequest(r *http.Request, span trace.Span) (req PullsCreateReplyForReviewCommentReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsCreateReplyForReviewCommentReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsCreateReviewRequest(r *http.Request, span trace.Span) (req PullsCreateReviewReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsCreateReviewReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsDismissReviewRequest(r *http.Request, span trace.Span) (req PullsDismissReviewReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsDismissReviewReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsSubmitReviewRequest(r *http.Request, span trace.Span) (req PullsSubmitReviewReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsSubmitReviewReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsUpdateReviewRequest(r *http.Request, span trace.Span) (req PullsUpdateReviewReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsUpdateReviewReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsUpdateReviewCommentRequest(r *http.Request, span trace.Span) (req PullsUpdateReviewCommentReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsUpdateReviewCommentReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReactionsCreateForTeamDiscussionCommentInOrgRequest(r *http.Request, span trace.Span) (req ReactionsCreateForTeamDiscussionCommentInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionCommentInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReactionsCreateForTeamDiscussionCommentLegacyRequest(r *http.Request, span trace.Span) (req ReactionsCreateForTeamDiscussionCommentLegacyReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionCommentLegacyReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReactionsCreateForTeamDiscussionInOrgRequest(r *http.Request, span trace.Span) (req ReactionsCreateForTeamDiscussionInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReactionsCreateForTeamDiscussionLegacyRequest(r *http.Request, span trace.Span) (req ReactionsCreateForTeamDiscussionLegacyReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionLegacyReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposCreateCommitStatusRequest(r *http.Request, span trace.Span) (req ReposCreateCommitStatusReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateCommitStatusReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposCreateUsingTemplateRequest(r *http.Request, span trace.Span) (req ReposCreateUsingTemplateReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateUsingTemplateReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposMergeUpstreamRequest(r *http.Request, span trace.Span) (req ReposMergeUpstreamReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposMergeUpstreamReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposReplaceAllTopicsRequest(r *http.Request, span trace.Span) (req ReposReplaceAllTopicsReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposReplaceAllTopicsReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposTransferRequest(r *http.Request, span trace.Span) (req ReposTransferReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposTransferReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateBranchProtectionRequest(r *http.Request, span trace.Span) (req ReposUpdateBranchProtectionReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateBranchProtectionReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateCommitCommentRequest(r *http.Request, span trace.Span) (req ReposUpdateCommitCommentReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateCommitCommentReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateInvitationRequest(r *http.Request, span trace.Span) (req ReposUpdateInvitationReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateInvitationReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateReleaseRequest(r *http.Request, span trace.Span) (req ReposUpdateReleaseReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateReleaseReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateReleaseAssetRequest(r *http.Request, span trace.Span) (req ReposUpdateReleaseAssetReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateReleaseAssetReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateWebhookConfigForRepoRequest(r *http.Request, span trace.Span) (req ReposUpdateWebhookConfigForRepoReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateWebhookConfigForRepoReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeSecretScanningUpdateAlertRequest(r *http.Request, span trace.Span) (req SecretScanningUpdateAlertReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SecretScanningUpdateAlertReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsAddOrUpdateMembershipForUserInOrgRequest(r *http.Request, span trace.Span) (req TeamsAddOrUpdateMembershipForUserInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateMembershipForUserInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsAddOrUpdateMembershipForUserLegacyRequest(r *http.Request, span trace.Span) (req TeamsAddOrUpdateMembershipForUserLegacyReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateMembershipForUserLegacyReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsAddOrUpdateProjectPermissionsInOrgRequest(r *http.Request, span trace.Span) (req TeamsAddOrUpdateProjectPermissionsInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateProjectPermissionsInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsAddOrUpdateRepoPermissionsInOrgRequest(r *http.Request, span trace.Span) (req TeamsAddOrUpdateRepoPermissionsInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateRepoPermissionsInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsCreateDiscussionCommentInOrgRequest(r *http.Request, span trace.Span) (req TeamsCreateDiscussionCommentInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionCommentInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsCreateDiscussionCommentLegacyRequest(r *http.Request, span trace.Span) (req TeamsCreateDiscussionCommentLegacyReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionCommentLegacyReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsCreateDiscussionInOrgRequest(r *http.Request, span trace.Span) (req TeamsCreateDiscussionInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsCreateDiscussionLegacyRequest(r *http.Request, span trace.Span) (req TeamsCreateDiscussionLegacyReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionLegacyReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgRequest(r *http.Request, span trace.Span) (req TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsUpdateDiscussionCommentInOrgRequest(r *http.Request, span trace.Span) (req TeamsUpdateDiscussionCommentInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionCommentInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsUpdateDiscussionCommentLegacyRequest(r *http.Request, span trace.Span) (req TeamsUpdateDiscussionCommentLegacyReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionCommentLegacyReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsUpdateDiscussionInOrgRequest(r *http.Request, span trace.Span) (req TeamsUpdateDiscussionInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsUpdateDiscussionLegacyRequest(r *http.Request, span trace.Span) (req TeamsUpdateDiscussionLegacyReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionLegacyReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsUpdateInOrgRequest(r *http.Request, span trace.Span) (req TeamsUpdateInOrgReq, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateInOrgReq
		buf := getBuf()
		defer putBuf(buf)
		if _, err := io.Copy(buf, r.Body); err != nil {
			return req, err
		}
		d := jx.GetDecoder()
		defer jx.PutDecoder(d)
		d.ResetBytes(buf.Bytes())
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, errors.Wrap(err, "validate")
		}
		return request, nil
	default:
		return req, errors.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}
