// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func decodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(r *http.Request) (req EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(r *http.Request) (req EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetAllowedActionsEnterpriseRequest(r *http.Request) (req SelectedActions, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(r *http.Request) (req EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest(r *http.Request) (req *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(r *http.Request) (req EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest(r *http.Request) (req EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeGistsCreateCommentRequest(r *http.Request) (req GistsCreateCommentApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GistsCreateCommentApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeGistsUpdateCommentRequest(r *http.Request) (req GistsUpdateCommentApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GistsUpdateCommentApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeMarkdownRenderRequest(r *http.Request) (req MarkdownRenderApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MarkdownRenderApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeMarkdownRenderRawRequest(r *http.Request) (req MarkdownRenderRawRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "text/plain":
		var request MarkdownRenderRawTextPlainRequest
		_ = request
		return req, fmt.Errorf("text/plain decoder not implemented")
	case "text/x-markdown":
		var request MarkdownRenderRawTextXMarkdownRequest
		_ = request
		return req, fmt.Errorf("text/x-markdown decoder not implemented")
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActivityMarkNotificationsAsReadRequest(r *http.Request) (req *ActivityMarkNotificationsAsReadApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivityMarkNotificationsAsReadApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActivitySetThreadSubscriptionRequest(r *http.Request) (req *ActivitySetThreadSubscriptionApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivitySetThreadSubscriptionApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetGithubActionsPermissionsOrganizationRequest(r *http.Request) (req ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest(r *http.Request) (req ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetAllowedActionsOrganizationRequest(r *http.Request) (req *SelectedActions, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsCreateSelfHostedRunnerGroupForOrgRequest(r *http.Request) (req ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsUpdateSelfHostedRunnerGroupForOrgRequest(r *http.Request) (req ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest(r *http.Request) (req ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetSelfHostedRunnersInGroupForOrgRequest(r *http.Request) (req ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsCreateOrUpdateOrgSecretRequest(r *http.Request) (req ActionsCreateOrUpdateOrgSecretApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateOrgSecretApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetSelectedReposForOrgSecretRequest(r *http.Request) (req ActionsSetSelectedReposForOrgSecretApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelectedReposForOrgSecretApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsCreateForOrgRequest(r *http.Request) (req ProjectsCreateForOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsUpdateInOrgRequest(r *http.Request) (req *TeamsUpdateInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsCreateDiscussionInOrgRequest(r *http.Request) (req TeamsCreateDiscussionInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsUpdateDiscussionInOrgRequest(r *http.Request) (req *TeamsUpdateDiscussionInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsCreateDiscussionCommentInOrgRequest(r *http.Request) (req TeamsCreateDiscussionCommentInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionCommentInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsUpdateDiscussionCommentInOrgRequest(r *http.Request) (req TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReactionsCreateForTeamDiscussionCommentInOrgRequest(r *http.Request) (req ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReactionsCreateForTeamDiscussionInOrgRequest(r *http.Request) (req ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsAddOrUpdateMembershipForUserInOrgRequest(r *http.Request) (req *TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsAddOrUpdateProjectPermissionsInOrgRequest(r *http.Request) (req *TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsAddOrUpdateRepoPermissionsInOrgRequest(r *http.Request) (req *TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgRequest(r *http.Request) (req TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsUpdateCardRequest(r *http.Request) (req *ProjectsUpdateCardApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateCardApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsUpdateColumnRequest(r *http.Request) (req ProjectsUpdateColumnApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateColumnApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsMoveColumnRequest(r *http.Request) (req ProjectsMoveColumnApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsMoveColumnApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsUpdateRequest(r *http.Request) (req *ProjectsUpdateApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsCreateColumnRequest(r *http.Request) (req ProjectsCreateColumnApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateColumnApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetGithubActionsPermissionsRepositoryRequest(r *http.Request) (req ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsSetAllowedActionsRepositoryRequest(r *http.Request) (req *SelectedActions, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsCreateOrUpdateRepoSecretRequest(r *http.Request) (req ActionsCreateOrUpdateRepoSecretApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateRepoSecretApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateBranchProtectionRequest(r *http.Request) (req ReposUpdateBranchProtectionApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateBranchProtectionApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeChecksCreateSuiteRequest(r *http.Request) (req ChecksCreateSuiteApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ChecksCreateSuiteApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeChecksSetSuitesPreferencesRequest(r *http.Request) (req ChecksSetSuitesPreferencesApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ChecksSetSuitesPreferencesApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeCodeScanningUploadSarifRequest(r *http.Request) (req CodeScanningUploadSarifApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request CodeScanningUploadSarifApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateCommitCommentRequest(r *http.Request) (req ReposUpdateCommitCommentApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateCommitCommentApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeMigrationsUpdateImportRequest(r *http.Request) (req *MigrationsUpdateImportApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MigrationsUpdateImportApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeInteractionsSetRestrictionsForRepoRequest(r *http.Request) (req InteractionLimit, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request InteractionLimit
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateInvitationRequest(r *http.Request) (req *ReposUpdateInvitationApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateInvitationApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeIssuesUpdateLabelRequest(r *http.Request) (req *IssuesUpdateLabelApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesUpdateLabelApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposMergeUpstreamRequest(r *http.Request) (req ReposMergeUpstreamApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposMergeUpstreamApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeIssuesUpdateMilestoneRequest(r *http.Request) (req *IssuesUpdateMilestoneApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesUpdateMilestoneApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActivityMarkRepoNotificationsAsReadRequest(r *http.Request) (req *ActivityMarkRepoNotificationsAsReadApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivityMarkRepoNotificationsAsReadApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsCreateForRepoRequest(r *http.Request) (req ProjectsCreateForRepoApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForRepoApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsUpdateReviewCommentRequest(r *http.Request) (req PullsUpdateReviewCommentApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsUpdateReviewCommentApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsCreateReplyForReviewCommentRequest(r *http.Request) (req PullsCreateReplyForReviewCommentApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsCreateReplyForReviewCommentApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsCreateReviewRequest(r *http.Request) (req *PullsCreateReviewApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsCreateReviewApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsUpdateReviewRequest(r *http.Request) (req PullsUpdateReviewApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsUpdateReviewApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsDismissReviewRequest(r *http.Request) (req PullsDismissReviewApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsDismissReviewApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodePullsSubmitReviewRequest(r *http.Request) (req PullsSubmitReviewApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsSubmitReviewApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateReleaseAssetRequest(r *http.Request) (req *ReposUpdateReleaseAssetApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateReleaseAssetApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUpdateReleaseRequest(r *http.Request) (req *ReposUpdateReleaseApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateReleaseApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposUploadReleaseAssetRequest(r *http.Request) (req *string, err error) {
	switch r.Header.Get("Content-Type") {
	case "*/*":
		var request string
		_ = request
		return req, fmt.Errorf("*/* decoder not implemented")
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeSecretScanningUpdateAlertRequest(r *http.Request) (req SecretScanningUpdateAlertApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SecretScanningUpdateAlertApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposCreateCommitStatusRequest(r *http.Request) (req ReposCreateCommitStatusApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateCommitStatusApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActivitySetRepoSubscriptionRequest(r *http.Request) (req *ActivitySetRepoSubscriptionApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivitySetRepoSubscriptionApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposReplaceAllTopicsRequest(r *http.Request) (req ReposReplaceAllTopicsApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposReplaceAllTopicsApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposTransferRequest(r *http.Request) (req ReposTransferApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposTransferApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReposCreateUsingTemplateRequest(r *http.Request) (req ReposCreateUsingTemplateApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateUsingTemplateApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeActionsCreateOrUpdateEnvironmentSecretRequest(r *http.Request) (req ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(r *http.Request) (req EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest(r *http.Request) (req EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseUserRequest(r *http.Request) (req EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest(r *http.Request) (req EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseUserRequest(r *http.Request) (req EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsCreateDiscussionLegacyRequest(r *http.Request) (req TeamsCreateDiscussionLegacyApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionLegacyApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsUpdateDiscussionLegacyRequest(r *http.Request) (req *TeamsUpdateDiscussionLegacyApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionLegacyApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsCreateDiscussionCommentLegacyRequest(r *http.Request) (req TeamsCreateDiscussionCommentLegacyApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionCommentLegacyApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsUpdateDiscussionCommentLegacyRequest(r *http.Request) (req TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReactionsCreateForTeamDiscussionCommentLegacyRequest(r *http.Request) (req ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeReactionsCreateForTeamDiscussionLegacyRequest(r *http.Request) (req ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeTeamsAddOrUpdateMembershipForUserLegacyRequest(r *http.Request) (req *TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}
		if err := request.Validate(); err != nil {
			return req, fmt.Errorf("validate: %w", err)
		}

		return &request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}

func decodeProjectsCreateForAuthenticatedUserRequest(r *http.Request) (req ProjectsCreateForAuthenticatedUserApplicationJSONRequest, err error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForAuthenticatedUserApplicationJSONRequest
		if err := request.ReadJSONFrom(r.Body); err != nil {
			return req, fmt.Errorf("json: %w", err)
		}

		return request, nil
	default:
		return req, fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
	}
}
